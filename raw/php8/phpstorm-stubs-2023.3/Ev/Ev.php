<?php

use JetBrains\PhpStorm\ExpectedValues;
use JetBrains\PhpStorm\Immutable;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;

/**
*<div id="class.ev" class="reference"> <h1 class="title">The Ev class</h1>  <div class="partintro"><p class="verinfo">(PECL ev &gt;= 0.2.0)</p>  <div class="section" id="ev.intro">   <h2 class="title">简介</h2>   <p class="para">    Ev is a static class providing access to the default loop and to some common    operations.   </p>  </div>  <div class="section" id="ev.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">final</span>      <span class="modifier">class</span> <strong class="classname">Ev</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.flag-auto"><var class="varname">FLAG_AUTO</var></a></var><span class="initializer"> = 0</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.flag-noenv"><var class="varname">FLAG_NOENV</var></a></var><span class="initializer"> = 16777216</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.flag-forkcheck"><var class="varname">FLAG_FORKCHECK</var></a></var><span class="initializer"> = 33554432</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.flag-noinotify"><var class="varname">FLAG_NOINOTIFY</var></a></var><span class="initializer"> = 1048576</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.flag-signalfd"><var class="varname">FLAG_SIGNALFD</var></a></var><span class="initializer"> = 2097152</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.flag-nosigmask"><var class="varname">FLAG_NOSIGMASK</var></a></var><span class="initializer"> = 4194304</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.run-nowait"><var class="varname">RUN_NOWAIT</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.run-once"><var class="varname">RUN_ONCE</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.break-cancel"><var class="varname">BREAK_CANCEL</var></a></var><span class="initializer"> = 0</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.break-one"><var class="varname">BREAK_ONE</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.break-all"><var class="varname">BREAK_ALL</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.minpri"><var class="varname">MINPRI</var></a></var><span class="initializer"> = -2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.maxpri"><var class="varname">MAXPRI</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.read"><var class="varname">READ</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.write"><var class="varname">WRITE</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.timer"><var class="varname">TIMER</var></a></var><span class="initializer"> = 256</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.periodic"><var class="varname">PERIODIC</var></a></var><span class="initializer"> = 512</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.signal"><var class="varname">SIGNAL</var></a></var><span class="initializer"> = 1024</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.child"><var class="varname">CHILD</var></a></var><span class="initializer"> = 2048</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.stat"><var class="varname">STAT</var></a></var><span class="initializer"> = 4096</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.idle"><var class="varname">IDLE</var></a></var><span class="initializer"> = 8192</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.prepare"><var class="varname">PREPARE</var></a></var><span class="initializer"> = 16384</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.check"><var class="varname">CHECK</var></a></var><span class="initializer"> = 32768</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.embed"><var class="varname">EMBED</var></a></var><span class="initializer"> = 65536</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.custom"><var class="varname">CUSTOM</var></a></var><span class="initializer"> = 16777216</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.error"><var class="varname">ERROR</var></a></var><span class="initializer"> = 2147483648</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.backend-select"><var class="varname">BACKEND_SELECT</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.backend-poll"><var class="varname">BACKEND_POLL</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.backend-epoll"><var class="varname">BACKEND_EPOLL</var></a></var><span class="initializer"> = 4</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.backend-kqueue"><var class="varname">BACKEND_KQUEUE</var></a></var><span class="initializer"> = 8</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.backend-devpoll"><var class="varname">BACKEND_DEVPOLL</var></a></var><span class="initializer"> = 16</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.backend-port"><var class="varname">BACKEND_PORT</var></a></var><span class="initializer"> = 32</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.backend-all"><var class="varname">BACKEND_ALL</var></a></var><span class="initializer"> = 63</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.backend-mask"><var class="varname">BACKEND_MASK</var></a></var><span class="initializer"> = 65535</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/ev.backend.php" class="methodname" style="color:#CC7832">backend</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/ev.depth.php" class="methodname" style="color:#CC7832">depth</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/ev.embeddablebackends.php" class="methodname" style="color:#CC7832">embeddableBackends</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/ev.feedsignal.php" class="methodname" style="color:#CC7832">feedSignal</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$signum</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/ev.feedsignalevent.php" class="methodname" style="color:#CC7832">feedSignalEvent</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$signum</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/ev.iteration.php" class="methodname" style="color:#CC7832">iteration</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/ev.now.php" class="methodname" style="color:#CC7832">now</a></span>(): <span class="type" style="color:#EAB766">float</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/ev.nowupdate.php" class="methodname" style="color:#CC7832">nowUpdate</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/ev.recommendedbackends.php" class="methodname" style="color:#CC7832">recommendedBackends</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/ev.resume.php" class="methodname" style="color:#CC7832">resume</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/ev.run.php" class="methodname" style="color:#CC7832">run</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$flags</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/ev.sleep.php" class="methodname" style="color:#CC7832">sleep</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$seconds</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/ev.stop.php" class="methodname" style="color:#CC7832">stop</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$how</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/ev.supportedbackends.php" class="methodname" style="color:#CC7832">supportedBackends</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/ev.suspend.php" class="methodname" style="color:#CC7832">suspend</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/ev.time.php" class="methodname" style="color:#CC7832">time</a></span>(): <span class="type" style="color:#EAB766">float</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/ev.verify.php" class="methodname" style="color:#CC7832">verify</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>  <div class="section" id="ev.constants">   <h2 class="title">预定义常量</h2>  <p class="para" id="ev.constants.loop-flags">    Flags passed to create a loop:    <dl>           <dt id="ev.constants.flag-auto">       <strong><span>Ev::FLAG_AUTO</span></strong>      </dt>      <dd>       <p class="para">        The default flags value       </p>      </dd>                <dt id="ev.constants.flag-noenv">       <strong><span>Ev::FLAG_NOENV</span></strong>      </dt>      <dd>       <p class="para">        If this flag used(or the program runs setuid or setgid),        <span>libev</span>        won&#039;t look at the environment variable        <var class="varname">LIBEV_FLAGS</var>        . Otherwise(by default),        <var class="varname">LIBEV_FLAGS</var>        will override the flags completely if it is found. Useful for        performance tests and searching for bugs.       </p>      </dd>                <dt id="ev.constants.flag-forkcheck">       <strong><span>Ev::FLAG_FORKCHECK</span></strong>      </dt>      <dd>       <p class="para">        Makes libev check for a fork in each iteration, instead of calling        <span class="methodname" style="color:#CC7832">{@link EvLoop::fork()}</span>        manually. This works by calling        <span>getpid()</span>        on every iteration of the loop, and thus this might slow down the        event loop with lots of loop iterations, but usually is not        noticeable. This flag setting cannot be overridden or specified in the        <var class="varname">LIBEV_FLAGS</var>        environment variable.       </p>      </dd>                <dt id="ev.constants.flag-noinotify">       <strong><span>Ev::FLAG_NOINOTIFY</span></strong>      </dt>      <dd>       <p class="para">        When this flag is specified,        <span>libev</span>        won&#039;t attempt to use the        <span>inotify</span>        API for its        <a href="http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#code_ev_stat_code_did_the_file_attri" class="link external">&raquo;&nbsp;ev_stat</a>        watchers. The flag can be useful to conserve inotify file descriptors,        as otherwise each loop using        <span>ev_stat</span>        watchers consumes one        <span>inotify</span>        handle.       </p>      </dd>                <dt id="ev.constants.flag-signalfd">       <strong><span>Ev::FLAG_SIGNALFD</span></strong>      </dt>      <dd>       <p class="para">        When this flag is specified,        <span>libev</span>        will attempt to use the        <span>signalfd</span>        API for its        <a href="http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#code_ev_signal_code_signal_me_when_a" class="link external">&raquo;&nbsp;ev_signal</a>        (and        <a href="http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#code_ev_child_code_watch_out_for_pro" class="link external">&raquo;&nbsp;ev_child</a>        ) watchers. This API delivers signals synchronously, which makes it        both faster and might make it possible to get the queued signal data.        It can also simplify signal handling with threads, as long as signals        are properly blocked in threads.        <span>Signalfd</span>        will not be used by default.       </p>      </dd>                <dt id="ev.constants.flag-nosigmask">       <strong><span>Ev::FLAG_NOSIGMASK</span></strong>      </dt>      <dd>       <p class="para">        When this flag is specified,        <span>libev</span>        will avoid to modify the signal mask. Specifically, this means having        to make sure signals are unblocked before receiving them.       </p>       <p class="para">        This behaviour is useful for custom signal handling, or handling        signals only in specific threads.       </p>      </dd>         </dl>   </p>   <p class="para" id="ev.constants.run-flags">    Flags passed to    <span class="methodname" style="color:#CC7832">{@link Ev::run()}</span>    , or    <span class="methodname" style="color:#CC7832">{@link EvLoop::run()}</span>    <dl>           <dt id="ev.constants.run-nowait">       <strong><span>Ev::RUN_NOWAIT</span></strong>      </dt>      <dd>       <p class="para">        Means that event loop will look for new events, will handle those        events and any already outstanding ones, but will not wait and block        the process in case there are no events and will return after one        iteration of the loop. This is sometimes useful to poll and handle new        events while doing lengthy calculations, to keep the program        responsive.       </p>      </dd>                <dt id="ev.constants.run-once">       <strong><span>Ev::RUN_ONCE</span></strong>      </dt>      <dd>       <p class="para">        Means that event loop will look for new events (waiting if necessary)        and will handle those and any already outstanding ones. It will block        the process until at least one new event arrives (which could be an        event internal to libev itself, so there is no guarantee that a        user-registered callback will be called), and will return after one        iteration of the loop.       </p>      </dd>         </dl>   </p>   <p class="para" id="ev.constants.break-flags">    Flags passed to    <span class="methodname" style="color:#CC7832">{@link Ev::stop()}</span>    , or    <span class="methodname" style="color:#CC7832">{@link EvLoop::stop()}</span>    <dl>           <dt id="ev.constants.break-cancel">       <strong><span>Ev::BREAK_CANCEL</span></strong>      </dt>      <dd>       <p class="para">        Cancel the break operation.       </p>      </dd>                <dt id="ev.constants.break-one">       <strong><span>Ev::BREAK_ONE</span></strong>      </dt>      <dd>       <p class="para">        Makes the innermost        <span class="methodname" style="color:#CC7832">{@link Ev::run()}</span>        (or        <span class="methodname" style="color:#CC7832">{@link EvLoop::run()}</span>        ) call return.       </p>      </dd>                <dt id="ev.constants.break-all">       <strong><span>Ev::BREAK_ALL</span></strong>      </dt>      <dd>       <p class="para">        Makes all nested        <span class="methodname" style="color:#CC7832">{@link Ev::run()}</span>        (or        <span class="methodname" style="color:#CC7832">{@link EvLoop::run()}</span>        ) calls return.       </p>      </dd>         </dl>   </p>   <p class="para" id="ev.constants.watcher-pri">    Watcher priorities:    <dl>           <dt id="ev.constants.minpri">       <strong><span>Ev::MINPRI</span></strong>      </dt>      <dd>       <p class="para">        Minimum allowed watcher priority.       </p>      </dd>                <dt id="ev.constants.maxpri">       <strong><span>Ev::MAXPRI</span></strong>      </dt>      <dd>       <p class="para">        Maximum allowed watcher priority.       </p>      </dd>         </dl>   </p>   <p class="para" id="ev.constants.watcher-revents">    Bit masks of (received) events:    <dl>           <dt id="ev.constants.read">       <strong><span>Ev::READ</span></strong>      </dt>      <dd>       <p class="para">        The file descriptor in the        <span class="classname"><a href="https://www.php.net/manual/zh/class.evio.php" class="classname">EvIo</a></span>        watcher has become readable.       </p>      </dd>                <dt id="ev.constants.write">       <strong><span>Ev::WRITE</span></strong>      </dt>      <dd>       <p class="para">        The file descriptor in the        <span class="classname"><a href="https://www.php.net/manual/zh/class.evio.php" class="classname">EvIo</a></span>        watcher has become writable.       </p>      </dd>                <dt id="ev.constants.timer">       <strong><span>Ev::TIMER</span></strong>      </dt>      <dd>       <p class="para">        <span class="classname"><a href="https://www.php.net/manual/zh/class.evtimer.php" class="classname">EvTimer</a></span>        watcher has been timed out.       </p>      </dd>                <dt id="ev.constants.periodic">       <strong><span>Ev::PERIODIC</span></strong>      </dt>      <dd>       <p class="para">        <span class="classname"><a href="https://www.php.net/manual/zh/class.evperiodic.php" class="classname">EvPeriodic</a></span>        watcher has been timed out.       </p>      </dd>                <dt id="ev.constants.signal">       <strong><span>Ev::SIGNAL</span></strong>      </dt>      <dd>       <p class="para">        A signal specified in        <span class="methodname" style="color:#CC7832">{@link EvSignal::__construct()}</span>        has been received.       </p>      </dd>                <dt id="ev.constants.child">       <strong><span>Ev::CHILD</span></strong>      </dt>      <dd>       <p class="para">        The        <span class="parameter" style="color:#3A95FF">pid</span>        specified in        <span class="methodname" style="color:#CC7832">{@link EvChild::__construct()}</span>        has received a status change.       </p>      </dd>                <dt id="ev.constants.stat">       <strong><span>Ev::STAT</span></strong>      </dt>      <dd>       <p class="para">        The path specified in        <span class="classname"><a href="https://www.php.net/manual/zh/class.evstat.php" class="classname">EvStat</a></span>        watcher changed its attributes.       </p>      </dd>                <dt id="ev.constants.idle">       <strong><span>Ev::IDLE</span></strong>      </dt>      <dd>       <p class="para">        <span class="classname"><a href="https://www.php.net/manual/zh/class.evidle.php" class="classname">EvIdle</a></span>        watcher works when there is nothing to do with other watchers.       </p>      </dd>                <dt id="ev.constants.prepare">       <strong><span>Ev::PREPARE</span></strong>      </dt>      <dd>       <p class="para">        All        <span class="classname"><a href="https://www.php.net/manual/zh/class.evprepare.php" class="classname">EvPrepare</a></span>        watchers are invoked just before        <span class="methodname" style="color:#CC7832">{@link Ev::run()}</span>        starts. Thus,        <span class="classname"><a href="https://www.php.net/manual/zh/class.evprepare.php" class="classname">EvPrepare</a></span>        watchers are the last watchers invoked before the event loop sleeps or        polls for new events.       </p>      </dd>                <dt id="ev.constants.check">       <strong><span>Ev::CHECK</span></strong>      </dt>      <dd>       <p class="para">        All        <span class="classname"><a href="https://www.php.net/manual/zh/class.evcheck.php" class="classname">EvCheck</a></span>        watchers are queued just after        <span class="methodname" style="color:#CC7832">{@link Ev::run()}</span>        has gathered the new events, but before it queues any callbacks for        any received events. Thus,        <span class="classname"><a href="https://www.php.net/manual/zh/class.evcheck.php" class="classname">EvCheck</a></span>        watchers will be invoked before any other watchers of the same or        lower priority within an event loop iteration.       </p>      </dd>                <dt id="ev.constants.embed">       <strong><span>Ev::EMBED</span></strong>      </dt>      <dd>       <p class="para">        The embedded event loop specified in the        <span class="classname"><a href="https://www.php.net/manual/zh/class.evembed.php" class="classname">EvEmbed</a></span>        watcher needs attention.       </p>      </dd>                <dt id="ev.constants.custom">       <strong><span>Ev::CUSTOM</span></strong>      </dt>      <dd>       <p class="para">        Not ever sent(or otherwise used) by        <span>libev</span>        itself, but can be freely used by        <span>libev</span>        users to signal watchers (e.g. via        <span class="methodname" style="color:#CC7832">{@link EvWatcher::feed()}</span>        ).       </p>      </dd>                <dt id="ev.constants.error">       <strong><span>Ev::ERROR</span></strong>      </dt>      <dd>       <p class="para">        An unspecified error has occurred, the watcher has been stopped. This        might happen because the watcher could not be properly started because        <span>libev</span>        ran out of memory, a file descriptor was found to be closed or any        other problem.        <span>Libev</span>        considers these application bugs. See also        <a href="http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#ANATOMY_OF_A_WATCHER_CONTENT" class="link external">&raquo;&nbsp;ANATOMY    OF A WATCHER</a>       </p>      </dd>         </dl>   </p>   <p class="para" id="ev.constants.watcher-backends">    Backend flags:    <dl>           <dt id="ev.constants.backend-select">       <strong><span>Ev::BACKEND_SELECT</span></strong>      </dt>      <dd>       <p class="para">        <span>select(2) backend</span>       </p>      </dd>                <dt id="ev.constants.backend-poll">       <strong><span>Ev::BACKEND_POLL</span></strong>      </dt>      <dd>       <p class="para">        <span>poll(2) backend</span>       </p>      </dd>                <dt id="ev.constants.backend-epoll">       <strong><span>Ev::BACKEND_EPOLL</span></strong>      </dt>      <dd>       <p class="para">        Linux-specific        <span>epoll(7)</span>        backend for both pre- and post-2.6.9 kernels       </p>      </dd>                <dt id="ev.constants.backend-kqueue">       <strong><span>Ev::BACKEND_KQUEUE</span></strong>      </dt>      <dd>       <p class="para">        <span>kqueue</span>        backend used on most BSD systems.        <span class="classname"><a href="https://www.php.net/manual/zh/class.evembed.php" class="classname">EvEmbed</a></span>        watcher could be used to embed one loop(with kqueue backend) into        another. For instance, one can try to create an event loop with        <span>kqueue</span>        backend and use it for sockets only.       </p>      </dd>                <dt id="ev.constants.backend-devpoll">       <strong><span>Ev::BACKEND_DEVPOLL</span></strong>      </dt>      <dd>       <p class="para">        Solaris 8 backend. This is not implemented yet.       </p>      </dd>                <dt id="ev.constants.backend-port">       <strong><span>Ev::BACKEND_PORT</span></strong>      </dt>      <dd>       <p class="para">        Solaris 10 event port mechanism with a good scaling.       </p>      </dd>                <dt id="ev.constants.backend-all">       <strong><span>Ev::BACKEND_ALL</span></strong>      </dt>      <dd>       <p class="para">        Try all backends(even currupted ones). It&#039;s not recommended to use it        explicitly. Bitwise operators should be applied here(e.g.        <strong><span>Ev::BACKEND_ALL</span></strong>        &amp; ~        <strong><span>Ev::BACKEND_KQUEUE</span></strong>        ) Use        <span class="methodname" style="color:#CC7832">{@link Ev::recommendedBackends()}</span>        , or don&#039;t specify any backends at all.       </p>      </dd>                <dt id="ev.constants.backend-mask">       <strong><span>Ev::BACKEND_MASK</span></strong>      </dt>      <dd>       <p class="para">        Not a backend, but a mask to select all backend bits from        <span class="parameter" style="color:#3A95FF">flags</span>        value to mask out any backends(e.g. when modifying the        <var class="varname">LIBEV_FLAGS</var>        environment variable).       </p>      </dd>         </dl>   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <p class="para">     For the default loop during module initialization phase     <span>Ev</span>     registers     <a href="http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#FUNCTIONS_CONTROLLING_EVENT_LOOPS_CO" class="link external">&raquo;&nbsp;ev_loop_fork</a>     call by means of     <span>pthread_atfork</span>     (if available).    </p>   </p></blockquote>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <p class="para">     There are methods providing access to the     <em>default event   loop</em>     in     <span class="classname"><strong class="classname">Ev</strong></span>     class(e.g.     <span class="methodname" style="color:#CC7832">{@link Ev::iteration()}</span>     ,     <span class="methodname" style="color:#CC7832">{@link Ev::depth()}</span>     etc.) For     <em>custom loops</em>     (created with     <span class="methodname" style="color:#CC7832">{@link EvLoop::__construct()}</span>     ) these values may be accessed via corresponding properties and methods     of the     <span class="classname"><a href="https://www.php.net/manual/zh/class.evloop.php" class="classname">EvLoop</a></span>     class.    </p>    <p class="para">     The instance of the default event loop itself can be fetched by means of     <span class="methodname" style="color:#CC7832">{@link EvLoop::defaultLoop()}</span>     method.    </p>   </p></blockquote>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Ev::backend} — Returns an integer describing the backend used by libev</li><li>{@link Ev::depth} — Returns recursion depth</li><li>{@link Ev::embeddableBackends} — Returns the set of backends that are embeddable in other event loops</li><li>{@link Ev::feedSignal} — Feed a signal event info Ev</li><li>{@link Ev::feedSignalEvent} — Feed signal event into the default loop</li><li>{@link Ev::iteration} — Return the number of times the default event loop has polled for new  events</li><li>{@link Ev::now} — Returns the time when the last iteration of the default event  loop has started</li><li>{@link Ev::nowUpdate} — Establishes the current time by querying the kernel, updating the time    returned by Ev::now in the progress</li><li>{@link Ev::recommendedBackends} — Returns a bit mask of recommended backends for current  platform</li><li>{@link Ev::resume} — Resume previously suspended default event loop</li><li>{@link Ev::run} — Begin checking for events and calling callbacks for the default  loop</li><li>{@link Ev::sleep} — Block the process for the given number of seconds</li><li>{@link Ev::stop} — Stops the default event loop</li><li>{@link Ev::supportedBackends} — Returns the set of backends supported by current libev  configuration</li><li>{@link Ev::suspend} — Suspend the default event loop</li><li>{@link Ev::time} — Returns the current time in fractional seconds since the epoch</li><li>{@link Ev::verify} — Performs internal consistency checks(for debugging)</li></ul></div>
*/
final class Ev
{
    /**
     * Flag passed to create a loop: The default flags value
     */
    public const FLAG_AUTO = 0;

    /**
     * Flag passed to create a loop: If this flag used(or the program runs setuid or setgid), libev won't look at the
     * environment variable LIBEV_FLAGS. Otherwise(by default), LIBEV_FLAGS will override the flags completely if it is
     * found. Useful for performance tests and searching for bugs.
     */
    public const FLAG_NOENV = 16777216;

    /**
     * Flag passed to create a loop: Makes libev check for a fork in each iteration, instead of calling EvLoop::fork()
     * manually. This works by calling getpid() on every iteration of the loop, and thus this might slow down the event
     * loop with lots of loop iterations, but usually is not noticeable. This flag setting cannot be overridden or
     * specified in the LIBEV_FLAGS environment variable.
     */
    public const FLAG_FORKCHECK = 33554432;

    /**
     * Flag passed to create a loop: When this flag is specified, libev won't attempt to use the inotify API for its
     * ev_stat watchers. The flag can be useful to conserve inotify file descriptors, as otherwise each loop using
     * ev_stat watchers consumes one inotify handle.
     */
    public const FLAG_NOINOTIFY = 1048576;

    /**
     * Flag passed to create a loop: When this flag is specified, libev will attempt to use the signalfd API for its
     * ev_signal (and ev_child ) watchers. This API delivers signals synchronously, which makes it both faster and might
     * make it possible to get the queued signal data. It can also simplify signal handling with threads, as long as
     * signals are properly blocked in threads. Signalfd will not be used by default.
     */
    public const FLAG_SIGNALFD = 2097152;

    /**
     * Flag passed to create a loop: When this flag is specified, libev will avoid to modify the signal mask.
     * Specifically, this means having to make sure signals are unblocked before receiving them.
     *
     * This behaviour is useful for custom signal handling, or handling signals only in specific threads.
     */
    public const FLAG_NOSIGMASK = 4194304;

    /**
     * Flag passed to Ev::run() or EvLoop::run(): Means that event loop will look for new events, will handle those
     * events and any already outstanding ones, but will not wait and block the process in case there are no events and
     * will return after one iteration of the loop. This is sometimes useful to poll and handle new events while doing
     * lengthy calculations, to keep the program responsive.
     */
    public const RUN_NOWAIT = 1;

    /**
     * Flag passed to Ev::run() or EvLoop::run(): Means that event loop will look for new events (waiting if necessary)
     * and will handle those and any already outstanding ones. It will block the process until at least one new event
     * arrives (which could be an event internal to libev itself, so there is no guarantee that a user-registered
     * callback will be called), and will return after one iteration of the loop.
     */
    public const RUN_ONCE = 2;

    /**
     * Flag passed to Ev::stop() or EvLoop::stop(): Cancel the break operation.
     */
    public const BREAK_CANCEL = 0;

    /**
     * Flag passed to Ev::stop() or EvLoop::stop(): Makes the innermost Ev::run() or EvLoop::run() call return.
     */
    public const BREAK_ONE = 1;

    /**
     * Flag passed to Ev::stop() or EvLoop::stop(): Makes all nested Ev::run() or EvLoop::run() calls return.
     */
    public const BREAK_ALL = 2;

    /**
     * Lowest allowed watcher priority.
     */
    public const MINPRI = -2;

    /**
     * Highest allowed watcher priority.
     */
    public const MAXPRI = 2;

    /**
     * Event bitmask: The file descriptor in the EvIo watcher has become readable.
     */
    public const READ = 1;

    /**
     * Event bitmask: The file descriptor in the EvIo watcher has become writable.
     */
    public const WRITE = 2;

    /**
     * Event bitmask: EvTimer watcher has been timed out.
     */
    public const TIMER = 256;

    /**
     * Event bitmask: EvPeriodic watcher has been timed out.
     */
    public const PERIODIC = 512;

    /**
     * Event bitmask: A signal specified in EvSignal::__construct() has been received.
     */
    public const SIGNAL = 1024;

    /**
     * Event bitmask: The pid specified in EvChild::__construct() has received a status change.
     */
    public const CHILD = 2048;

    /**
     * Event bitmask: The path specified in EvStat watcher changed its attributes.
     */
    public const STAT = 4096;

    /**
     * Event bitmask: EvIdle watcher works when there is nothing to do with other watchers.
     */
    public const IDLE = 8192;

    /**
     * Event bitmask: All EvPrepare watchers are invoked just before Ev::run() starts. Thus, EvPrepare watchers are the
     * last watchers invoked before the event loop sleeps or polls for new events.
     */
    public const PREPARE = 16384;

    /**
     * Event bitmask: All EvCheck watchers are queued just after Ev::run() has gathered the new events, but before it
     * queues any callbacks for any received events. Thus, EvCheck watchers will be invoked before any other watchers
     * of the same or lower priority within an event loop iteration.
     */
    public const CHECK = 32768;

    /**
     * Event bitmask: The embedded event loop specified in the EvEmbed watcher needs attention.
     */
    public const EMBED = 65536;

    /**
     * Event bitmask: Not ever sent(or otherwise used) by libev itself, but can be freely used by libev users to signal
     * watchers (e.g. via EvWatcher::feed() ).
     */
    public const CUSTOM = 16777216;

    /**
     * Event bitmask: An unspecified error has occurred, the watcher has been stopped. This might happen because the
     * watcher could not be properly started because libev ran out of memory, a file descriptor was found to be closed
     * or any other problem. Libev considers these application bugs.
     */
    public const ERROR = -2147483648;

    /**
     * select(2) backend
     */
    public const BACKEND_SELECT = 1;

    /**
     * poll(2) backend
     */
    public const BACKEND_POLL = 2;

    /**
     * Linux-specific epoll(7) backend for both pre- and post-2.6.9 kernels
     */
    public const BACKEND_EPOLL = 4;

    /**
     * kqueue backend used on most BSD systems. EvEmbed watcher could be used to embed one loop(with kqueue backend)
     * into another. For instance, one can try to create an event loop with kqueue backend and use it for sockets only.
     */
    public const BACKEND_KQUEUE = 8;

    /**
     * Solaris 8 backend. This is not implemented yet.
     */
    public const BACKEND_DEVPOLL = 16;

    /**
     * Solaris 10 event port mechanism with a good scaling.
     */
    public const BACKEND_PORT = 32;

    /**
     * Try all backends(even currupted ones). It's not recommended to use it explicitly. Bitwise operators should be
     * applied here(e.g. Ev::BACKEND_ALL & ~ Ev::BACKEND_KQUEUE ) Use Ev::recommendedBackends() , or don't specify any
     * backends at all.
     */
    public const BACKEND_ALL = 255;

    /**
     * Not a backend, but a mask to select all backend bits from flags value to mask out any backends(e.g. when
     * modifying the LIBEV_FLAGS environment variable).
     */
    public const BACKEND_MASK = 65535;

    /* Methods */

/**
*<div id="ev.backend" class="refentry"> <div class="refnamediv">  <h1 class="refname">Ev::backend</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">Ev::backend</span> &mdash; <span class="dc-title">Returns an integer describing the backend used by libev</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-ev.backend-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Ev::backend</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Returns an integer describing the backend used by   <em>libev</em>   . See   <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-backends" class="link">Backend flags</a>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-ev.backend-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-ev.backend-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an integer(bit mask) describing the backend used by   <em>libev</em>   .  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-ev.backend-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="classname"><a href="https://www.php.net/manual/zh/class.evembed.php" class="classname">EvEmbed</a></span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::embeddableBackends()} - Returns the set of backends that are embeddable in other event loops</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::recommendedBackends()} - Returns a bit mask of recommended backends for current  platform</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::supportedBackends()} - Returns the set of backends supported by current libev  configuration</span>   </li>   <li class="member">    <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-backends" class="link">Backend flags</a>   </li>  </ul> </div></div>
     * @return int Bit mask describing the backend used by libev, see Ev::BACKEND_* flags.*/
    final public static function backend() {}

/**
*<div id="ev.depth" class="refentry"> <div class="refnamediv">  <h1 class="refname">Ev::depth</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">Ev::depth</span> &mdash; <span class="dc-title">Returns recursion depth</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-ev.depth-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Ev::depth</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   The number of times   <span class="methodname" style="color:#CC7832">{@link Ev::run()}</span>   was entered minus the number of times   <span class="methodname" style="color:#CC7832">{@link Ev::run()}</span>   was exited normally, in other words, the recursion depth. Outside   <span class="methodname" style="color:#CC7832">{@link Ev::run()}</span>   , this number is   <strong><span>0</span></strong>   . In a callback, this number is   <strong><span>1</span></strong>   , unless   <span class="methodname" style="color:#CC7832">{@link Ev::run()}</span>   was invoked recursively (or from another thread), in which case it is   higher.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-ev.depth-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-ev.depth-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="function"><strong style="color:#CC7832">ev_depth()</strong></span>   returns recursion depth of the default loop.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-ev.depth-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::iteration()} - Return the number of times the default event loop has polled for new  events</span>   </li>  </ul> </div></div>
     * @return int Recursion depth of the default loop.*/
    final public static function depth() {}

/**
*<div id="ev.embeddablebackends" class="refentry"> <div class="refnamediv">  <h1 class="refname">Ev::embeddableBackends</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">Ev::embeddableBackends</span> &mdash; <span class="dc-title">Returns the set of backends that are embeddable in other event loops</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-ev.embeddablebackends-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Ev::embeddableBackends</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Returns the set of backends that are embeddable in other event loops.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-ev.embeddablebackends-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-ev.embeddablebackends-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a bit mask which can containing   <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-backends" class="link">backend flags</a>   combined using bitwise   <em>OR</em>   operator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-ev.embeddablebackends-examples">  <h3 class="title">示例</h3> <div class="example" id="">   <p><strong>示例 #1 Embedding loop created with kqueue backend into the default loop</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//<br />* Check if kqueue is available but not recommended and create a kqueue backend<br />* for use with sockets (which usually work with any kqueue implementation).<br />* Store the kqueue/socket-only event loop in loop_socket. (One might optionally<br />* use EVFLAG_NOENV, too)<br />*<br />* Example borrowed from<br />* http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Examples_CONTENT-9<br /><br /></span><span style="color: #9876AA">$loop        </span><span style="color: #007700">= </span><span style="color: #9876AA">EvLoop</span><span style="color: #007700">::</span><span style="color: #9876AA">defaultLoop</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$socket_loop </span><span style="color: #007700">= </span><span style="color: #9876AA">NULL</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$embed       </span><span style="color: #007700">= </span><span style="color: #9876AA">NULL</span><span style="color: #007700">;<br /><br />if (</span><span style="color: #9876AA">Ev</span><span style="color: #007700">::</span><span style="color: #9876AA">supportedBackends</span><span style="color: #007700">() &amp; ~</span><span style="color: #9876AA">Ev</span><span style="color: #007700">::</span><span style="color: #9876AA">recommendedBackends</span><span style="color: #007700">() &amp; </span><span style="color: #9876AA">Ev</span><span style="color: #007700">::</span><span style="color: #9876AA">BACKEND_KQUEUE</span><span style="color: #007700">) {<br /> if ((</span><span style="color: #9876AA">$socket_loop </span><span style="color: #007700">= new </span><span style="color: #9876AA">EvLoop</span><span style="color: #007700">(</span><span style="color: #9876AA">Ev</span><span style="color: #007700">::</span><span style="color: #9876AA">BACKEND_KQUEUE</span><span style="color: #007700">))) {<br />  </span><span style="color: #9876AA">$embed </span><span style="color: #007700">= new </span><span style="color: #9876AA">EvEmbed</span><span style="color: #007700">(</span><span style="color: #9876AA">$loop</span><span style="color: #007700">);<br /> }<br />}<br /><br />if (!</span><span style="color: #9876AA">$socket_loop</span><span style="color: #007700">) {<br /> </span><span style="color: #9876AA">$socket_loop </span><span style="color: #007700">= </span><span style="color: #9876AA">$loop</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// Now use $socket_loop for all sockets, and $loop for anything else<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-ev.embeddablebackends-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="classname"><a href="https://www.php.net/manual/zh/class.evembed.php" class="classname">EvEmbed</a></span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::recommendedBackends()} - Returns a bit mask of recommended backends for current  platform</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::supportedBackends()} - Returns the set of backends supported by current libev  configuration</span>   </li>   <li class="member">    <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-backends" class="link">Backend flags</a>   </li>   <li class="member">    <a href="https://www.php.net/manual/zh/ev.examples.php" class="link">Examples</a>   </li>  </ul> </div></div>
     * @return int Bit mask which can contain Ev::BACKEND_* flags combined using bitwise OR operator.*/
    final public static function embeddableBackends() {}

/**
*<div id="ev.feedsignal" class="refentry"> <div class="refnamediv">  <h1 class="refname">Ev::feedSignal</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">Ev::feedSignal</span> &mdash; <span class="dc-title">Feed a signal event info Ev</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-ev.feedsignal-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Ev::feedSignal</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$signum</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Simulates a signal receive. It is safe to call this function at any time,   from any context, including signal handlers or random threads. Its main use   is to customise signal handling in the process.  </p>  <p class="para">   Unlike   <span class="methodname" style="color:#CC7832">{@link Ev::feedSignalEvent()}</span>   , this works regardless of which loop has registered the signal.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-ev.feedsignal-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">signum</span>    </dt>    <dd>     <span>      Signal number. See      <span>signal(7)</span>      man page for detals. You can use constants exported by      <span>pcntl</span>      extension.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-ev.feedsignal-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-ev.feedsignal-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::feedSignalEvent()} - Feed signal event into the default loop</span>   </li>  </ul> </div></div>
*/
    final public static function feedSignal(int $signum) {}

/**
*<div id="ev.feedsignalevent" class="refentry"> <div class="refnamediv">  <h1 class="refname">Ev::feedSignalEvent</h1>  <p class="verinfo">(No version information available, might only be in Git)</p><p class="refpurpose"><span class="refname">Ev::feedSignalEvent</span> &mdash; <span class="dc-title">Feed signal event into the default loop</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-ev.feedsignalevent-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Ev::feedSignalEvent</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$signum</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Feed signal event into the default loop. Ev will react to this call as if   the signal specified by   <span class="parameter" style="color:#3A95FF">signal</span>   had occurred.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-ev.feedsignalevent-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">signum</span>    </dt>    <dd>     <span>      Signal number. See      <span>signal(7)</span>      man page for detals. See also constants exported by      <span>pcntl</span>      extension.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-ev.feedsignalevent-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-ev.feedsignalevent-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::feedSignal()} - Feed a signal event info Ev</span>   </li>  </ul> </div></div>
*/
    final public static function feedSignalEvent(int $signum) {}

/**
*<div id="ev.iteration" class="refentry"> <div class="refnamediv">  <h1 class="refname">Ev::iteration</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">Ev::iteration</span> &mdash; <span class="dc-title">Return the number of times the default event loop has polled for new  events</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-ev.iteration-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Ev::iteration</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Return the number of times the event loop has polled for new events.   Sometimes useful as a generation counter.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-ev.iteration-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-ev.iteration-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns number of polls of the default event loop.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-ev.iteration-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::depth()} - Returns recursion depth</span>   </li>  </ul> </div></div>
     * @return int Number of polls of the default event loop.*/
    final public static function iteration() {}

/**
*<div id="ev.now" class="refentry"> <div class="refnamediv">  <h1 class="refname">Ev::now</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">Ev::now</span> &mdash; <span class="dc-title">Returns the time when the last iteration of the default event  loop has started</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-ev.now-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Ev::now</strong></span>(): <span class="type" style="color:#EAB766">float</span></div>  <p class="para rdfs-comment">   Returns the time when the last iteration of the default event loop has   started. This is the time that timers(   <span class="classname"><a href="https://www.php.net/manual/zh/class.evtimer.php" class="classname">EvTimer</a></span>   and   <span class="classname"><a href="https://www.php.net/manual/zh/class.evperiodic.php" class="classname">EvPeriodic</a></span>   ) are based on, and referring to it is usually faster then calling   <span class="methodname" style="color:#CC7832">{@link Ev::time()}</span>   .  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-ev.now-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-ev.now-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns number of seconds(fractional) representing the time when the last   iteration of the default event loop has started.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-ev.now-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::nowUpdate()} - Establishes the current time by querying the kernel, updating the time    returned by Ev::now in the progress</span>   </li>  </ul> </div></div>
     * @return float Number of seconds(fractional) representing the time when the last iteration of the default event*/
    final public static function now() {}

/**
*<div id="ev.nowupdate" class="refentry"> <div class="refnamediv">  <h1 class="refname">Ev::nowUpdate</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">Ev::nowUpdate</span> &mdash; <span class="dc-title">Establishes the current time by querying the kernel, updating the time    returned by Ev::now in the progress</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-ev.nowupdate-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Ev::nowUpdate</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Establishes the current time by querying the kernel, updating the time   returned by   <span class="methodname" style="color:#CC7832">{@link Ev::now()}</span>   in the progress. This is a costly operation and is usually done   automatically within   <span class="methodname" style="color:#CC7832">{@link Ev::run()}</span>   .  </p>  <p class="para">   This method is rarely useful, but when some event callback runs for a very   long time without entering the event loop, updating   <em>libev</em>   &#039;s consideration of the current time is a good idea.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-ev.nowupdate-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-ev.nowupdate-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-ev.nowupdate-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::now()} - Returns the time when the last iteration of the default event  loop has started</span>   </li>  </ul> </div></div>
*/
    final public static function nowUpdate() {}

/**
*<div id="ev.recommendedbackends" class="refentry"> <div class="refnamediv">  <h1 class="refname">Ev::recommendedBackends</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">Ev::recommendedBackends</span> &mdash; <span class="dc-title">Returns a bit mask of recommended backends for current  platform</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-ev.recommendedbackends-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Ev::recommendedBackends</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Returns the set of all backends compiled into this binary of   <span>libev</span>   and also recommended for this platform, meaning it will work for most file   descriptor types. This set is often smaller than the one returned by   <span class="function"><strong style="color:#CC7832">ev_supported_backends()</strong></span>   , as for example   <span>kqueue</span>   is broken on most   <span>BSD</span>   systems and will not be auto-detected unless it is requested explicitly.   This is the set of backends that   <span>libev</span>   will probe no backends specified explicitly.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-ev.recommendedbackends-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-ev.recommendedbackends-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a bit mask which can containing   <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-backends" class="link">backend flags</a>   combined using bitwise   <em>OR</em>   operator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-ev.recommendedbackends-examples">  <h3 class="title">示例</h3> <div class="example" id="">   <p><strong>示例 #1 Embedding one loop into another</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//<br />* Try to get an embeddable event loop and embed it into the default event loop.<br />* If it is impossible, use the default<br />* loop. The default loop is stored in $loop_hi, while the embeddable loop is<br />* stored in $loop_lo(which is $loop_hi in the case no embeddable loop can be<br />* used).<br />*<br />* Sample translated to PHP<br />* http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Examples_CONTENT-9<br /><br /></span><span style="color: #9876AA">$loop_hi </span><span style="color: #007700">= </span><span style="color: #9876AA">EvLoop</span><span style="color: #007700">::</span><span style="color: #9876AA">defaultLoop</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$loop_lo </span><span style="color: #007700">= </span><span style="color: #9876AA">NULL</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$embed   </span><span style="color: #007700">= </span><span style="color: #9876AA">NULL</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//<br />* See if there is a chance of getting one that works<br />* (flags' value of 0 means autodetection)<br /><br /></span><span style="color: #9876AA">$loop_lo </span><span style="color: #007700">= </span><span style="color: #9876AA">Ev</span><span style="color: #007700">::</span><span style="color: #9876AA">embeddableBackends</span><span style="color: #007700">() &amp; </span><span style="color: #9876AA">Ev</span><span style="color: #007700">::</span><span style="color: #9876AA">recommendedBackends</span><span style="color: #007700">()<br /> ? new </span><span style="color: #9876AA">EvLoop</span><span style="color: #007700">(</span><span style="color: #9876AA">Ev</span><span style="color: #007700">::</span><span style="color: #9876AA">embeddableBackends</span><span style="color: #007700">() &amp; </span><span style="color: #9876AA">Ev</span><span style="color: #007700">::</span><span style="color: #9876AA">recommendedBackends</span><span style="color: #007700">())<br /> : </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br /><br />if (</span><span style="color: #9876AA">$loop_lo</span><span style="color: #007700">) {<br /> </span><span style="color: #9876AA">$embed </span><span style="color: #007700">= new </span><span style="color: #9876AA">EvEmbed</span><span style="color: #007700">(</span><span style="color: #9876AA">$loop_lo</span><span style="color: #007700">, function () {});<br />} else {<br /> </span><span style="color: #9876AA">$loop_lo </span><span style="color: #007700">= </span><span style="color: #9876AA">$loop_hi</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-ev.recommendedbackends-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="classname"><a href="https://www.php.net/manual/zh/class.evembed.php" class="classname">EvEmbed</a></span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::embeddableBackends()} - Returns the set of backends that are embeddable in other event loops</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::supportedBackends()} - Returns the set of backends supported by current libev  configuration</span>   </li>   <li class="member">    <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-backends" class="link">Backend flags</a>   </li>   <li class="member">    <a href="https://www.php.net/manual/zh/ev.examples.php" class="link">Examples</a>   </li>  </ul> </div></div>
     * @return int Bit mask which can contain Ev::BACKEND_* flags combined using bitwise OR operator.*/
    final public static function recommendedBackends() {}

/**
*<div id="ev.resume" class="refentry"> <div class="refnamediv">  <h1 class="refname">Ev::resume</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">Ev::resume</span> &mdash; <span class="dc-title">Resume previously suspended default event loop</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-ev.resume-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Ev::resume</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   <span class="methodname" style="color:#CC7832">{@link Ev::suspend()}</span>   and   <span class="methodname" style="color:#CC7832"><strong>Ev::resume()</strong></span>   methods suspend and resume a loop correspondingly.  </p>  <p class="para">   All timer watchers will be delayed by the time spend between   <em>suspend</em>   and   <em>resume</em>   , and all   <em>periodic</em>   watchers will be rescheduled(that is, they will lose any events that would   have occurred while suspended).  </p>  <p class="para">   After calling   <span class="methodname" style="color:#CC7832">{@link Ev::suspend()}</span>   it is not allowed to call any function on the given loop other than   <span class="methodname" style="color:#CC7832"><strong>Ev::resume()</strong></span>   . Also it is not allowed to call   <span class="methodname" style="color:#CC7832"><strong>Ev::resume()</strong></span>   without a previous call to   <span class="methodname" style="color:#CC7832">{@link Ev::suspend()}</span>   .  </p>  <p class="para">   Calling   <em>suspend</em>   /   <em>resume</em>   has the side effect of updating the event loop time(see   <span class="methodname" style="color:#CC7832">{@link Ev::nowUpdate()}</span>   ).  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-ev.resume-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-ev.resume-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-ev.resume-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::suspend()} - Suspend the default event loop</span>   </li>  </ul> </div></div>
*/
    final public static function resume() {}

/**
*<div id="ev.run" class="refentry"> <div class="refnamediv">  <h1 class="refname">Ev::run</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">Ev::run</span> &mdash; <span class="dc-title">Begin checking for events and calling callbacks for the default  loop</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-ev.run-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Ev::run</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$flags</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Begin checking for events and calling callbacks   <em>for the default  loop</em>   . Returns when a callback calls   <span class="methodname" style="color:#CC7832">{@link Ev::stop()}</span>   method, or the flags are nonzero(in which case the return value is true) or   when there are no active watchers which reference the loop(   <span class="methodname" style="color:#CC7832">{@link EvWatcher::keepalive()}</span>   is <strong><span>true</span></strong>), in which case the return value will be <strong><span>false</span></strong>. The return   value can generally be interpreted as   <em>if <strong><span>true</span></strong>, there is more work left to  do</em>   .  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-ev.run-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">flags</span>    </dt>    <dd>     <span>      Optional parameter      <span class="parameter" style="color:#3A95FF">flags</span>      can be one of the following:      <table class="doctable table">       <caption><strong>         List for possible values of <span class="parameter" style="color:#3A95FF">flags</span>       </strong></caption>               <thead>         <tr>          <th>           <span class="parameter" style="color:#3A95FF">flags</span>          </th>          <th>Description</th>         </tr>        </thead>        <tbody class="tbody">         <tr>          <td>           <strong><span>0</span></strong>          </td>          <td>The default behavior described above</td>         </tr>         <tr>          <td>           <strong><span>Ev::RUN_ONCE</span></strong>          </td>          <td>Block at most one(wait, but don&#039;t loop)</td>         </tr>         <tr>          <td>           <strong><span>Ev::RUN_NOWAIT</span></strong>          </td>          <td>Don&#039;t block at all(fetch/handle events, but don&#039;t wait)</td>         </tr>        </tbody>             </table>     </span>     <p class="para">      See      <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.run-flags" class="link">the run flag       constants</a>      .     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-ev.run-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-ev.run-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::stop()} - Stops the default event loop</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvLoop::run()} - Begin checking for events and calling callbacks for the loop</span>   </li>  </ul> </div></div>
*/
    final public static function run(int $flags = self::FLAG_AUTO) {}

/**
*<div id="ev.sleep" class="refentry"> <div class="refnamediv">  <h1 class="refname">Ev::sleep</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">Ev::sleep</span> &mdash; <span class="dc-title">Block the process for the given number of seconds</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-ev.sleep-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Ev::sleep</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$seconds</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Block the process for the given number of seconds.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-ev.sleep-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">seconds</span>    </dt>    <dd>     <span>      Fractional number of seconds     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-ev.sleep-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    final public static function sleep(float $seconds) {}

/**
*<div id="ev.stop" class="refentry"> <div class="refnamediv">  <h1 class="refname">Ev::stop</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">Ev::stop</span> &mdash; <span class="dc-title">Stops the default event loop</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-ev.stop-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Ev::stop</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$how</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Stops the default event loop  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-ev.stop-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">how</span>    </dt>    <dd>     <span>      One of      <em>Ev::BREAK_*</em>      <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.break-flags" class="link">constants</a>      .     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-ev.stop-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-ev.stop-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::run()} - Begin checking for events and calling callbacks for the default  loop</span>   </li>  </ul> </div></div>
*/
    final public static function stop(int $how = self::BREAK_ONE) {}

/**
*<div id="ev.supportedbackends" class="refentry"> <div class="refnamediv">  <h1 class="refname">Ev::supportedBackends</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">Ev::supportedBackends</span> &mdash; <span class="dc-title">Returns the set of backends supported by current libev  configuration</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-ev.supportedbackends-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Ev::supportedBackends</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Returns the set of backends supported by current libev configuration.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-ev.supportedbackends-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-ev.supportedbackends-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a bit mask which can containing   <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-backends" class="link">backend flags</a>   combined using bitwise   <em>OR</em>   operator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-ev.supportedbackends-examples">  <h3 class="title">示例</h3> <div class="example" id="">   <p><strong>示例 #1 Embedding loop created with kqueue backend into the default loop</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//<br />* Check if kqueue is available but not recommended and create a kqueue backend<br />* for use with sockets (which usually work with any kqueue implementation).<br />* Store the kqueue/socket-only event loop in loop_socket. (One might optionally<br />* use EVFLAG_NOENV, too)<br />*<br />* Example borrowed from<br />* http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Examples_CONTENT-9<br /><br /></span><span style="color: #9876AA">$loop        </span><span style="color: #007700">= </span><span style="color: #9876AA">EvLoop</span><span style="color: #007700">::</span><span style="color: #9876AA">defaultLoop</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$socket_loop </span><span style="color: #007700">= </span><span style="color: #9876AA">NULL</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$embed       </span><span style="color: #007700">= </span><span style="color: #9876AA">NULL</span><span style="color: #007700">;<br /><br />if (</span><span style="color: #9876AA">Ev</span><span style="color: #007700">::</span><span style="color: #9876AA">supportedBackends</span><span style="color: #007700">() &amp; ~</span><span style="color: #9876AA">Ev</span><span style="color: #007700">::</span><span style="color: #9876AA">recommendedBackends</span><span style="color: #007700">() &amp; </span><span style="color: #9876AA">Ev</span><span style="color: #007700">::</span><span style="color: #9876AA">BACKEND_KQUEUE</span><span style="color: #007700">) {<br /> if ((</span><span style="color: #9876AA">$socket_loop </span><span style="color: #007700">= new </span><span style="color: #9876AA">EvLoop</span><span style="color: #007700">(</span><span style="color: #9876AA">Ev</span><span style="color: #007700">::</span><span style="color: #9876AA">BACKEND_KQUEUE</span><span style="color: #007700">))) {<br />  </span><span style="color: #9876AA">$embed </span><span style="color: #007700">= new </span><span style="color: #9876AA">EvEmbed</span><span style="color: #007700">(</span><span style="color: #9876AA">$loop</span><span style="color: #007700">);<br /> }<br />}<br /><br />if (!</span><span style="color: #9876AA">$socket_loop</span><span style="color: #007700">) {<br /> </span><span style="color: #9876AA">$socket_loop </span><span style="color: #007700">= </span><span style="color: #9876AA">$loop</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// Now use $socket_loop for all sockets, and $loop for anything else<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-ev.supportedbackends-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="classname"><a href="https://www.php.net/manual/zh/class.evembed.php" class="classname">EvEmbed</a></span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::recommendedBackends()} - Returns a bit mask of recommended backends for current  platform</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::embeddableBackends()} - Returns the set of backends that are embeddable in other event loops</span>   </li>   <li class="member">    <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-backends" class="link">Backend flags</a>   </li>   <li class="member">    <a href="https://www.php.net/manual/zh/ev.examples.php" class="link">Examples</a>   </li>  </ul> </div></div>
     * @return int Bit mask which can contain Ev::BACKEND_* flags combined using bitwise OR operator.*/
    final public static function supportedBackends() {}

/**
*<div id="ev.suspend" class="refentry"> <div class="refnamediv">  <h1 class="refname">Ev::suspend</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">Ev::suspend</span> &mdash; <span class="dc-title">Suspend the default event loop</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-ev.suspend-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Ev::suspend</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   <span class="methodname" style="color:#CC7832"><strong>Ev::suspend()</strong></span>   and   <span class="methodname" style="color:#CC7832">{@link Ev::resume()}</span>   methods suspend and resume the default loop correspondingly.  </p>  <p class="para">   All timer watchers will be delayed by the time spend between   <em>suspend</em>   and   <em>resume</em>   , and all   <em>periodic</em>   watchers will be rescheduled(that is, they will lose any events that would   have occurred while suspended).  </p>  <p class="para">   After calling   <span class="methodname" style="color:#CC7832"><strong>Ev::suspend()</strong></span>   it is not allowed to call any function on the given loop other than   <span class="methodname" style="color:#CC7832">{@link Ev::resume()}</span>   . Also it is not allowed to call   <span class="methodname" style="color:#CC7832">{@link Ev::resume()}</span>   without a previous call to   <span class="methodname" style="color:#CC7832"><strong>Ev::suspend()</strong></span>   .  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-ev.suspend-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-ev.suspend-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-ev.suspend-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::resume()} - Resume previously suspended default event loop</span>   </li>  </ul> </div></div>
*/
    final public static function suspend() {}

/**
*<div id="ev.time" class="refentry"> <div class="refnamediv">  <h1 class="refname">Ev::time</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">Ev::time</span> &mdash; <span class="dc-title">Returns the current time in fractional seconds since the epoch</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-ev.time-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Ev::time</strong></span>(): <span class="type" style="color:#EAB766">float</span></div>  <p class="para rdfs-comment">   Returns the current time in fractional seconds since the epoch. Consider   using   <span class="methodname" style="color:#CC7832">{@link Ev::now()}</span>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-ev.time-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-ev.time-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current time in fractional seconds since the epoch.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-ev.time-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::now()} - Returns the time when the last iteration of the default event  loop has started</span>   </li>  </ul> </div></div>
     * @return float The current time in fractional seconds since the epoch.*/
    final public static function time() {}

/**
*<div id="ev.verify" class="refentry"> <div class="refnamediv">  <h1 class="refname">Ev::verify</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">Ev::verify</span> &mdash; <span class="dc-title">Performs internal consistency checks(for debugging)</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-ev.verify-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Ev::verify</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Performs internal consistency checks(for debugging   <em>libev</em>   ) and abort the program if any data structures were found to be corrupted.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-ev.verify-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-ev.verify-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    final public static function verify() {}
}

/**
*<div id="class.evwatcher" class="reference"> <h1 class="title">The EvWatcher class</h1>  <div class="partintro"><p class="verinfo">(PECL ev &gt;= 0.2.0)</p>  <div class="section" id="evwatcher.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">EvWatcher</strong></span>    is a base class for all watchers(    <span class="classname"><a href="https://www.php.net/manual/zh/class.evcheck.php" class="classname">EvCheck</a></span>    ,    <span class="classname"><a href="https://www.php.net/manual/zh/class.evchild.php" class="classname">EvChild</a></span>    etc.). Since    <span class="classname"><strong class="classname">EvWatcher</strong></span>    &#039;s constructor is    <span class="modifier">abstract</span>    , one can&#039;t(and don&#039;t need to) create EvWatcher objects    directly.   </p>  </div>  <div class="section" id="evwatcher.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">abstract</span>      <span class="modifier">class</span> <strong class="classname">EvWatcher</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-active">$<var class="varname">is_active</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.data">$<var class="varname">data</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-pending">$<var class="varname">is_pending</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.priority">$<var class="varname">priority</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">abstract</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evwatcher.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>()</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evwatcher.clear.php" class="methodname" style="color:#CC7832">clear</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evwatcher.feed.php" class="methodname" style="color:#CC7832">feed</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evwatcher.getloop.php" class="methodname" style="color:#CC7832">getLoop</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evloop.php" class="type EvLoop" style="color:#EAB766">EvLoop</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evwatcher.invoke.php" class="methodname" style="color:#CC7832">invoke</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evwatcher.keepalive.php" class="methodname" style="color:#CC7832">keepalive</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$value</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evwatcher.setcallback.php" class="methodname" style="color:#CC7832">setCallback</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evwatcher.start.php" class="methodname" style="color:#CC7832">start</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evwatcher.stop.php" class="methodname" style="color:#CC7832">stop</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>  <div class="section" id="evwatcher.props">   <h2 class="title">属性</h2>   <dl>         <dt id="evwatcher.props.is-active">      <var class="varname">is_active</var>     </dt>     <dd>      <p class="para">       <em>Readonly</em>       . <strong><span>true</span></strong> if the watcher is active. <strong><span>false</span></strong> otherwise.      </p>     </dd>             <dt id="evwatcher.props.data">      <var class="varname">data</var>     </dt>     <dd>      <p class="para">       User custom data associated with the watcher      </p>     </dd>             <dt id="evwatcher.props.is-pending">      <var class="varname">is_pending</var>     </dt>     <dd>      <p class="para">       <em>Readonly</em>       .<strong><span>true</span></strong> if the watcher is pending, i.e. it has outstanding events, but       its callback has not yet been invoked. <strong><span>false</span></strong> otherwise. As long, as a       watcher is pending(but not active), one must       <em>not</em>       change its priority.      </p>     </dd>             <dt id="evwatcher.props.priority">      <var class="varname">priority</var>     </dt>     <dd>      <p class="para">       <span class="type" style="color:#EAB766">int</span>       between       <strong><span>Ev::MINPRI</span></strong>       and       <strong><span>Ev::MAXPRI</span></strong>       . Pending watchers with higher priority will be invoked before watchers       with lower priority, but priority will not keep watchers from being       executed(except for       <span class="classname"><a href="https://www.php.net/manual/zh/class.evidle.php" class="classname">EvIdle</a></span>       watchers).       <span class="classname"><a href="https://www.php.net/manual/zh/class.evidle.php" class="classname">EvIdle</a></span>       watchers provide functionality to suppress invocation when higher       priority events are pending.      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EvWatcher::clear} — Clear watcher pending status</li><li>{@link EvWatcher::__construct} — Abstract constructor of a watcher object</li><li>{@link EvWatcher::feed} — Feeds the given revents set into the event loop</li><li>{@link EvWatcher::getLoop} — Returns the loop responsible for the watcher</li><li>{@link EvWatcher::invoke} — Invokes the watcher callback with the given received events bit  mask</li><li>{@link EvWatcher::keepalive} — Configures whether to keep the loop from returning</li><li>{@link EvWatcher::setCallback} — Sets new callback for the watcher</li><li>{@link EvWatcher::start} — Starts the watcher</li><li>{@link EvWatcher::stop} — Stops the watcher</li></ul></div>
*/
abstract class EvWatcher
{
    /**
     * @var bool TRUE if the watcher is active. FALSE otherwise.
     */
    #[Immutable]
    public $is_active;

    /**
     * @var bool TRUE if the watcher is pending, i.e. it has outstanding events, but its callback
     *      has not yet been invoked. FALSE otherwise. As long, as a watcher is pending (but not active), one must not
     *      change its priority.
     */
    #[Immutable]
    public $is_pending;

    /**
     * Abstract constructor of a watcher object
     */
    abstract public function __construct();

    /**
     * @var mixed Custom user data associated with the watcher
     */
    public $data;

    /**
     * @var int Number between Ev::MINPRi and Ev::MAXPRI. Pending watchers with higher priority will be invoked before
     *      watchers with lower priority, but priority will not keep watchers from being executed (except for EvIdle
     *      watchers). EvIdle watchers provide functionality to suppress invocation when higher priority events are
     *      pending.
     */
    public $priority;

/**
*<div id="evwatcher.clear" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvWatcher::clear</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvWatcher::clear</span> &mdash; <span class="dc-title">Clear watcher pending status</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evwatcher.clear-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvWatcher::clear</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   If the watcher is pending, this method clears its   <var class="varname">pending</var>   status and returns its   <var class="varname">revents</var>   bitset(as if its callback was invoked). If the watcher isn&#039;t pending   it does nothing and returns   <strong><span>0</span></strong>   .  </p>  <p class="para">   Sometimes it can be useful to &quot;poll&quot; a watcher instead of waiting for its   callback to be invoked, which can be accomplished with this function.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evwatcher.clear-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evwatcher.clear-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   In case if the watcher is pending, returns   <var class="varname">revents</var>   bitset as if the   <a href="https://www.php.net/manual/zh/ev.watcher-callbacks.php" class="link">watcher callback</a>   had been invoked. Otherwise returns   <strong><span>0</span></strong>   .  </p> </div></div>
     * @return int In case if the watcher is pending, returns revents bitset as if the watcher callback had been*/
    public function clear() {}

/**
*<div id="evwatcher.feed" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvWatcher::feed</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvWatcher::feed</span> &mdash; <span class="dc-title">Feeds the given revents set into the event loop</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evwatcher.feed-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvWatcher::feed</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Feeds the given revents set into the event loop, as if the specified event   had happened for the watcher.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evwatcher.feed-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">revents</span>    </dt>    <dd>     <span>      Bit mask of watcher      <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-revents" class="link">received events</a>      .     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evwatcher.feed-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function feed(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $revents) {}

/**
*<div id="evwatcher.getloop" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvWatcher::getLoop</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvWatcher::getLoop</span> &mdash; <span class="dc-title">Returns the loop responsible for the watcher</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evwatcher.getloop-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvWatcher::getLoop</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evloop.php" class="type EvLoop" style="color:#EAB766">EvLoop</a></span></div>  <p class="para rdfs-comment">   Returns the loop responsible for the watcher  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evwatcher.getloop-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evwatcher.getloop-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns   <span class="classname"><a href="https://www.php.net/manual/zh/class.evloop.php" class="classname">EvLoop</a></span>   event loop object responsible for the watcher.  </p> </div></div>
     * @return EvLoop Event loop object responsible for the watcher.*/
    public function getLoop() {}

/**
*<div id="evwatcher.invoke" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvWatcher::invoke</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvWatcher::invoke</span> &mdash; <span class="dc-title">Invokes the watcher callback with the given received events bit  mask</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evwatcher.invoke-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvWatcher::invoke</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Invokes the watcher callback with the given received events bit mask.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evwatcher.invoke-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">revents</span>    </dt>    <dd>     <span>      Bit mask of watcher      <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-revents" class="link">received events</a>      .     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evwatcher.invoke-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function invoke(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $revents) {}

/**
*<div id="evwatcher.keepalive" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvWatcher::keepalive</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvWatcher::keepalive</span> &mdash; <span class="dc-title">Configures whether to keep the loop from returning</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evwatcher.keepalive-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvWatcher::keepalive</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$value</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Configures whether to keep the loop from returning. With keepalive   <span class="parameter" style="color:#3A95FF">value</span>   set to <strong><span>false</span></strong> the watcher won&#039;t keep   <span class="methodname" style="color:#CC7832">{@link Ev::run()}</span>   /   <span class="methodname" style="color:#CC7832">{@link EvLoop::run()}</span>   from returning even though the watcher is active.  </p>  <p class="para">   Watchers have keepalive   <span class="parameter" style="color:#3A95FF">value</span>   <strong><span>true</span></strong> by default.  </p>  <p class="para">   Clearing keepalive status is useful when returning from   <span class="methodname" style="color:#CC7832">{@link Ev::run()}</span>   /   <span class="methodname" style="color:#CC7832">{@link EvLoop::run()}</span>   just because of the watcher is undesirable. It could be a long running UDP   socket watcher or so.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evwatcher.keepalive-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">value</span>    </dt>    <dd>     <span>      With keepalive      <span class="parameter" style="color:#3A95FF">value</span>      set to <strong><span>false</span></strong> the watcher won&#039;t keep      <span class="methodname" style="color:#CC7832">{@link Ev::run()}</span>      /      <span class="methodname" style="color:#CC7832">{@link EvLoop::run()}</span>      from returning even though the watcher is active.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evwatcher.keepalive-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the previous state.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-evwatcher.keepalive-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 Register an I/O watcher for some UDP socket but do not keep the   event loop from running just because of that watcher.</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$udp_socket </span><span style="color: #007700">= ...<br /></span><span style="color: #9876AA">$udp_watcher </span><span style="color: #007700">= new </span><span style="color: #9876AA">EvIo</span><span style="color: #007700">(</span><span style="color: #9876AA">$udp_socket</span><span style="color: #007700">, </span><span style="color: #9876AA">Ev</span><span style="color: #007700">::</span><span style="color: #9876AA">READ</span><span style="color: #007700">, function () { </span><span style="color: #FF8000">// ...  </span><span style="color: #007700">});<br /></span><span style="color: #9876AA">$udp_watcher</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">keepalive</span><span style="color: #007700">(</span><span style="color: #9876AA">FALSE</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div> </div></div>
*/
    public function keepalive(#[LanguageLevelTypeAware(['8.0' => 'bool'], default: '')] $value = true) {}

/**
*<div id="evwatcher.setcallback" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvWatcher::setCallback</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvWatcher::setCallback</span> &mdash; <span class="dc-title">Sets new callback for the watcher</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evwatcher.setcallback-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvWatcher::setCallback</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets new callback for the watcher  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evwatcher.setcallback-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">callback</span>    </dt>    <dd>     <span>      See      <a href="https://www.php.net/manual/zh/ev.watcher-callbacks.php" class="link">Watcher callbacks</a>      .     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evwatcher.setcallback-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function setCallback(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $callback) {}

/**
*<div id="evwatcher.start" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvWatcher::start</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvWatcher::start</span> &mdash; <span class="dc-title">Starts the watcher</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evwatcher.start-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvWatcher::start</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Marks the watcher as active. Note that only active watchers will receive   events.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evwatcher.start-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evwatcher.start-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evwatcher.start-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvWatcher::stop()} - Stops the watcher</span>   </li>  </ul> </div></div>
*/
    public function start() {}

/**
*<div id="evwatcher.stop" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvWatcher::stop</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvWatcher::stop</span> &mdash; <span class="dc-title">Stops the watcher</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evwatcher.stop-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvWatcher::stop</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Marks the watcher as inactive. Note that only active watchers will receive   events.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evwatcher.stop-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evwatcher.stop-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evwatcher.stop-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvWatcher::start()} - Starts the watcher</span>   </li>  </ul> </div></div>
*/
    public function stop() {}
}

/**
*<div id="class.evcheck" class="reference"> <h1 class="title">The EvCheck class</h1>  <div class="partintro"><p class="verinfo">(PECL ev &gt;= 0.2.0)</p>  <div class="section" id="evcheck.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><a href="https://www.php.net/manual/zh/class.evprepare.php" class="classname">EvPrepare</a></span>    and    <span class="classname"><strong class="classname">EvCheck</strong></span>    watchers are usually used in pairs.    <span class="classname"><a href="https://www.php.net/manual/zh/class.evprepare.php" class="classname">EvPrepare</a></span>    watchers get invoked before the process blocks,    <span class="classname"><strong class="classname">EvCheck</strong></span>    afterwards.   </p>   <p class="para">    It is not allowed to call    <span class="methodname" style="color:#CC7832">{@link EvLoop::run()}</span>    or similar methods or functions that enter the current event loop from    either    <span class="classname"><a href="https://www.php.net/manual/zh/class.evprepare.php" class="classname">EvPrepare</a></span>    or    <span class="classname"><strong class="classname">EvCheck</strong></span>    watchers. Other loops than the current one are fine, however. The    rationale behind this is that one don&#039;t need to check for recursion    in those watchers, i.e. the sequence will always be:    <span class="classname"><a href="https://www.php.net/manual/zh/class.evprepare.php" class="classname">EvPrepare</a></span>    -&gt; blocking -&gt;    <span class="classname"><strong class="classname">EvCheck</strong></span>    , so having a watcher of each kind they will always be called in pairs    bracketing the blocking call.   </p>   <p class="para">    The main purpose is to integrate other event mechanisms into    <em>libev</em>    and their use is somewhat advanced. They could be used, for example, to    track variable changes, implement custom watchers, integrate net-snmp or a    coroutine library and lots more. They are also occasionally useful to    cache some data and want to flush it before blocking.   </p>   <p class="para">    It is recommended to give    <span class="classname"><strong class="classname">EvCheck</strong></span>    watchers highest(    <strong><span>Ev::MAXPRI</span></strong>    ) priority, to ensure that they are being run before any other watchers    after the poll (this doesn’t matter for    <span class="classname"><a href="https://www.php.net/manual/zh/class.evprepare.php" class="classname">EvPrepare</a></span>    watchers).   </p>   <p class="para">    Also,    <span class="classname"><strong class="classname">EvCheck</strong></span>    watchers should not activate/feed events. While    <em>libev</em>    fully supports this, they might get executed before other    <span class="classname"><strong class="classname">EvCheck</strong></span>    watchers did their job.   </p>  </div>  <div class="section" id="evcheck.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">EvCheck</strong>     </span>     <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://www.php.net/manual/zh/class.evwatcher.php" class="classname">EvWatcher</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-active">$<var class="varname">is_active</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.data">$<var class="varname">data</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-pending">$<var class="varname">is_pending</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.priority">$<var class="varname">priority</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evcheck.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evcheck.createstopped.php" class="methodname" style="color:#CC7832">createStopped</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">object</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::clear}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::feed}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::getLoop}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evloop.php" class="type EvLoop" style="color:#EAB766">EvLoop</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::invoke}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::keepalive}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$value</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::setCallback}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::start}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::stop}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EvCheck::__construct} — Constructs the EvCheck watcher object</li><li>{@link EvCheck::createStopped} — Create instance of a stopped EvCheck watcher</li></ul></div>
*/
final class EvCheck extends EvWatcher
{
    /**
     * @param callable $callback
     * @param mixed $data
     * @param int $priority
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $callback,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $data = null,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $priority = 0
    ) {}

/**
*<div id="evcheck.createstopped" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvCheck::createStopped</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvCheck::createStopped</span> &mdash; <span class="dc-title">Create instance of a stopped EvCheck watcher</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evcheck.createstopped-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EvCheck::createStopped</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">object</span></div>  <p class="para rdfs-comment">   Create instance of a stopped EvCheck watcher  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evcheck.createstopped-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">callback</span>    </dt>    <dd>     <span>      See      <a href="https://www.php.net/manual/zh/ev.watcher-callbacks.php" class="link">Watcher callbacks</a>      .     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">data</span>    </dt>    <dd>     <p class="para">      Custom data associated with the watcher.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">priority</span>    </dt>    <dd>     <p class="para">      <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-pri" class="link">Watcher priority</a>     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evcheck.createstopped-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns EvCheck object on success.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evcheck.createstopped-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="classname"><a href="https://www.php.net/manual/zh/class.evprepare.php" class="classname">EvPrepare</a></span>   </li>  </ul> </div></div>
     * @return EvCheck*/
    final public static function createStopped(mixed $callback, mixed $data = null, int $priority = 0) {}
}

/**
*<div id="class.evchild" class="reference"> <h1 class="title">The EvChild class</h1>  <div class="partintro"><p class="verinfo">(PECL ev &gt;= 0.2.0)</p>  <div class="section" id="evchild.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">EvChild</strong></span>    watchers trigger when the process receives a    <strong><span>SIGCHLD</span></strong>    in response to some child status changes (most typically when a child dies    or exits). It is permissible to install an    <strong><span>EvChild</span></strong>    watcher after the child has been forked(which implies it might have    already exited), as long as the event loop isn&#039;t entered(or is continued    from a watcher), i.e. forking and then immediately registering a watcher    for the child is fine, but forking and registering a watcher a few event    loop iterations later or in the next callback invocation is not.   </p>   <p class="para">    It is allowed to register    <span class="classname"><strong class="classname">EvChild</strong></span>    watchers in the    <em>default loop</em>    only.   </p>  </div>  <div class="section" id="evchild.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">EvChild</strong>     </span>     <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://www.php.net/manual/zh/class.evwatcher.php" class="classname">EvWatcher</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evchild.php#evchild.props.pid">$<var class="varname">pid</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evchild.php#evchild.props.rpid">$<var class="varname">rpid</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evchild.php#evchild.props.rstatus">$<var class="varname">rstatus</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-active">$<var class="varname">is_active</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.data">$<var class="varname">data</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-pending">$<var class="varname">is_pending</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.priority">$<var class="varname">priority</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evchild.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$pid</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$trace</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evchild.createstopped.php" class="methodname" style="color:#CC7832">createStopped</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$pid</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$trace</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766">object</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evchild.set.php" class="methodname" style="color:#CC7832">set</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$pid</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$trace</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::clear}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::feed}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::getLoop}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evloop.php" class="type EvLoop" style="color:#EAB766">EvLoop</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::invoke}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::keepalive}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$value</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::setCallback}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::start}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::stop}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>  <div class="section" id="evchild.props">   <h2 class="title">属性</h2>   <dl>         <dt id="evchild.props.pid">      <var class="varname">pid</var>     </dt>     <dd>      <p class="para">       <em>Readonly</em>       . The process ID this watcher watches out for, or       <strong><span>0</span></strong>       , meaning any process ID.      </p>     </dd>             <dt id="evchild.props.rpid">      <var class="varname">rpid</var>     </dt>     <dd>      <p class="para">       <em>Readonly</em>       .The process ID that detected a status change.      </p>     </dd>             <dt id="evchild.props.rstatus">      <var class="varname">rstatus</var>     </dt>     <dd>      <p class="para">       <em>Readonly</em>       . The process exit status caused by       <var class="varname">rpid</var>       .      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EvChild::__construct} — Constructs the EvChild watcher object</li><li>{@link EvChild::createStopped} — Create instance of a stopped EvCheck watcher</li><li>{@link EvChild::set} — Configures the watcher</li></ul></div>
*/
final class EvChild extends EvWatcher
{
    /**
     * @var int The process ID this watcher watches out for, or 0, meaning any process ID.
     */
    #[Immutable]
    public $pid;

    /**
     * @var int The process ID that detected a status change.
     */
    #[Immutable]
    public $rpid;

    /**
     * @var int The process exit status caused by rpid.
     */
    #[Immutable]
    public $rstatus;

    /**
     * Constructs the EvChild watcher object.
     *
     * Call the callback when a status change for process ID pid (or any PID if pid is 0) has been received (a status
     * change happens when the process terminates or is killed, or, when trace is TRUE, additionally when it is stopped
     * or continued). In other words, when the process receives a SIGCHLD, Ev will fetch the outstanding exit/wait
     * status for all changed/zombie children and call the callback.
     *
     * It is valid to install a child watcher after an EvChild has exited but before the event loop has started its next
     * iteration. For example, first one calls fork , then the new child process might exit, and only then an EvChild
     * watcher is installed in the parent for the new PID .
     *
     * You can access both exit/tracing status and pid by using the rstatus and rpid properties of the watcher object.
     *
     * The number of PID watchers per PID is unlimited. All of them will be called.
     *
     * The EvChild::createStopped() method doesn't start(activate) the newly created watcher.
     *
     * @param int $pid  Wait for status changes of process PID(or any process if PID is specified as 0 ).
     * @param bool $trace If FALSE, only activate the watcher when the process terminates. Otherwise(TRUE) additionally
     *      activate the watcher when the process is stopped or continued.
     * @param callable $callback
     * @param mixed $data
     * @param int $priority
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $pid,
        #[LanguageLevelTypeAware(['8.0' => 'bool'], default: '')] $trace,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $callback,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $data = null,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $priority = 0
    ) {}

/**
*<div id="evchild.createstopped" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvChild::createStopped</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvChild::createStopped</span> &mdash; <span class="dc-title">Create instance of a stopped EvCheck watcher</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evchild.createstopped-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EvChild::createStopped</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$pid</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$trace</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766">object</span></div>  <p class="para rdfs-comment">   The same as   <span class="methodname" style="color:#CC7832">{@link EvChild::__construct()}</span>   , but doesn&#039;t start the watcher automatically.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evchild.createstopped-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">pid</span>    </dt>    <dd>     <span>      The same as for      <span class="methodname" style="color:#CC7832">{@link EvChild::__construct()}</span>     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">trace</span>    </dt>    <dd>     <p class="para">      The same as for      <span class="methodname" style="color:#CC7832">{@link EvChild::__construct()}</span>     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">callback</span>    </dt>    <dd>     <p class="para">      See      <a href="https://www.php.net/manual/zh/ev.watcher-callbacks.php" class="link">Watcher callbacks</a>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">data</span>    </dt>    <dd>     <p class="para">      Custom data associated with the watcher.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">priority</span>    </dt>    <dd>     <p class="para">      <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-pri" class="link">Watcher priority</a>     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evchild.createstopped-returnvalues">  <h3 class="title">返回值</h3>  <p class="para"> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evchild.createstopped-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvChild::__construct()} - Constructs the EvChild watcher object</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvLoop::child()} - Creates EvChild object associated with the current event loop</span>   </li>  </ul> </div></div>
     * @return EvChild*/
    final public static function createStopped(int $pid, bool $trace, mixed $callback, mixed $data = null, int $priority = 0) {}

/**
*<div id="evchild.set" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvChild::set</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvChild::set</span> &mdash; <span class="dc-title">Configures the watcher</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evchild.set-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvChild::set</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$pid</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$trace</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment"> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evchild.set-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">pid</span>    </dt>    <dd>     <span>      The same as for      <span class="methodname" style="color:#CC7832">{@link EvChild::__construct()}</span>     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">trace</span>    </dt>    <dd>     <p class="para">      The same as for      <span class="methodname" style="color:#CC7832">{@link EvChild::__construct()}</span>     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evchild.set-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evchild.set-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvChild::__construct()} - Constructs the EvChild watcher object</span>   </li>  </ul> </div></div>
*/
    public function set(
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $pid,
        #[LanguageLevelTypeAware(['8.0' => 'bool'], default: '')] $trace
    ) {}
}

/**
*<div id="class.evembed" class="reference"> <h1 class="title">The EvEmbed class</h1>  <div class="partintro"><p class="verinfo">(PECL ev &gt;= 0.2.0)</p>  <div class="section" id="evembed.intro">   <h2 class="title">简介</h2>   <p class="para">    Used to embed one event loop into another.   </p>  </div>  <div class="section" id="evembed.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">EvEmbed</strong>     </span>     <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://www.php.net/manual/zh/class.evwatcher.php" class="classname">EvWatcher</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evembed.php#evembed.props.embed">$<var class="varname">embed</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evembed.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">object</span>     <span class="parameter" style="color:#3A95FF">$other</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span><br>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evembed.createstopped.php" class="methodname" style="color:#CC7832">createStopped</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">object</span>     <span class="parameter" style="color:#3A95FF">$other</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evembed.set.php" class="methodname" style="color:#CC7832">set</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">object</span>     <span class="parameter" style="color:#3A95FF">$other</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evembed.sweep.php" class="methodname" style="color:#CC7832">sweep</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::clear}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::feed}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::getLoop}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evloop.php" class="type EvLoop" style="color:#EAB766">EvLoop</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::invoke}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::keepalive}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$value</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::setCallback}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::start}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::stop}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>  <div class="section" id="evembed.props">   <h2 class="title">属性</h2>   <dl>         <dt id="evembed.props.is-active">      <var class="varname">is_active</var>     </dt>     <dd>      <p class="para"/>     </dd>             <dt id="evembed.props.data">      <var class="varname">data</var>     </dt>     <dd>      <p class="para"/>     </dd>             <dt id="evembed.props.is-pending">      <var class="varname">is_pending</var>     </dt>     <dd>      <p class="para"/>     </dd>             <dt id="evembed.props.priority">      <var class="varname">priority</var>     </dt>     <dd>      <p class="para"/>     </dd>             <dt id="evembed.props.embed">      <var class="varname">embed</var>     </dt>     <dd>      <p class="para"/>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EvEmbed::__construct} — Constructs the EvEmbed object</li><li>{@link EvEmbed::createStopped} — Create stopped EvEmbed watcher object</li><li>{@link EvEmbed::set} — Configures the watcher</li><li>{@link EvEmbed::sweep} — Make a single, non-blocking sweep over the embedded loop</li></ul></div>
*/
final class EvEmbed extends EvWatcher
{
    /**
     * @var EvLoop The embedded loop
     */
    #[Immutable]
    public $embed;

    /**
     * Constructs the EvEmbed object.
     *
     * This is a rather advanced watcher type that lets to embed one event loop into another(currently only IO events
     * are supported in the embedded loop, other types of watchers might be handled in a delayed or incorrect fashion
     * and must not be used).
     *
     * See the libev documentation for details.
     *
     * This watcher is most useful on BSD systems without working kqueue to still be able to handle a large number of
     * sockets.
     *
     * @param EvLoop $other The loop to embed, this loop must be embeddable(see Ev::embeddableBackends()).
     * @param callable $callback
     * @param mixed $data
     * @param int $priority
     */
    public function __construct(
        EvLoop $other,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $callback,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $data = null,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $priority = 0
    ) {}

/**
*<div id="evembed.set" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvEmbed::set</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvEmbed::set</span> &mdash; <span class="dc-title">Configures the watcher</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evembed.set-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvEmbed::set</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">object</span>     <span class="parameter" style="color:#3A95FF">$other</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Configures the watcher to use   <span class="parameter" style="color:#3A95FF">other</span>   event loop object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evembed.set-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">other</span>    </dt>    <dd>     <span>      The same as for      <span class="methodname" style="color:#CC7832">{@link EvEmbed::__construct()}</span>     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evembed.set-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function set(EvLoop $other) {}

/**
*<div id="evembed.sweep" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvEmbed::sweep</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvEmbed::sweep</span> &mdash; <span class="dc-title">Make a single, non-blocking sweep over the embedded loop</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evembed.sweep-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvEmbed::sweep</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Make a single, non-blocking sweep over the embedded loop. Works similarly   to the following, but in the most appropriate way for embedded loops:   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$other</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">start</span><span style="color: #007700">(</span><span style="color: #9876AA">Ev</span><span style="color: #007700">::</span><span style="color: #9876AA">RUN_NOWAIT</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evembed.sweep-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evembed.sweep-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evembed.sweep-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvWatcher::start()} - Starts the watcher</span>   </li>  </ul> </div></div>
*/
    public function sweep() {}

/**
*<div id="evembed.createstopped" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvEmbed::createStopped</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvEmbed::createStopped</span> &mdash; <span class="dc-title">Create stopped EvEmbed watcher object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evembed.createstopped-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EvEmbed::createStopped</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">object</span>     <span class="parameter" style="color:#3A95FF">$other</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   The same as   <span class="methodname" style="color:#CC7832">{@link EvEmbed::__construct()}</span>   , but doesn&#039;t start the watcher automatically.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evembed.createstopped-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">other</span>    </dt>    <dd>     <span>      The same as for      <span class="methodname" style="color:#CC7832">{@link EvEmbed::__construct()}</span>     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">callback</span>    </dt>    <dd>     <p class="para">      See      <a href="https://www.php.net/manual/zh/ev.watcher-callbacks.php" class="link">Watcher callbacks</a>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">data</span>    </dt>    <dd>     <p class="para">      Custom data associated with the watcher.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">priority</span>    </dt>    <dd>     <p class="para">      <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-pri" class="link">Watcher priority</a>     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evembed.createstopped-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns stopped EvEmbed object on success.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evembed.createstopped-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvEmbed::__construct()} - Constructs the EvEmbed object</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::embeddableBackends()} - Returns the set of backends that are embeddable in other event loops</span>   </li>  </ul> </div></div>
     * @return EvEmbed*/
    final public static function createStopped(EvLoop $other, mixed $callback, mixed $data = null, int $priority = 0) {}
}

/**
*<div id="class.evio" class="reference"> <h1 class="title">The EvIo class</h1>  <div class="partintro"><p class="verinfo">(PECL ev &gt;= 0.2.0)</p>  <div class="section" id="evio.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">EvIo</strong></span>    watchers check whether a file descriptor(or socket, or a stream castable    to numeric file descriptor) is readable or writable in each iteration of    the event loop, or, more precisely, when reading would not block the    process and writing would at least be able to write some data. This    behaviour is called    <em>level-triggering</em>    because events are kept receiving as long as the condition persists. To    stop receiving events just stop the watcher.   </p>   <p class="para">    The number of read and/or write event watchers per    <span class="parameter" style="color:#3A95FF">fd</span>    is unlimited. Setting all file descriptors to non-blocking mode is also    usually a good idea(but not required).   </p>   <p class="para">    Another thing to watch out for is that it is quite easy to receive false    readiness notifications, i.e. the callback might be called with    <strong><span>Ev::READ</span></strong>    but a subsequent    <em>read()</em>    will actually block because there is no data. It is very easy to get into    this situation. Thus it is best to always use non-blocking I/O: An extra    <em>read()</em>    returning    <strong><span>EAGAIN</span></strong>    (or similar) is far preferable to a program hanging until some data    arrives.   </p>   <p class="para">    If for some reason it is impossible to run the    <span class="parameter" style="color:#3A95FF">fd</span>    in non-blocking mode, then separately re-test whether a file descriptor is    really ready. Some people additionally use    <strong><span>SIGALRM</span></strong>    and an interval timer, just to be sure thry won&#039;t block infinitely.   </p>   <p class="para">    Always consider using non-blocking mode.   </p>  </div>  <div class="section" id="evio.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">EvIo</strong>     </span>     <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://www.php.net/manual/zh/class.evwatcher.php" class="classname">EvWatcher</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evio.php#evio.props.fd">$<var class="varname">fd</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evio.php#evio.props.events">$<var class="varname">events</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-active">$<var class="varname">is_active</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.data">$<var class="varname">data</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-pending">$<var class="varname">is_pending</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.priority">$<var class="varname">priority</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evio.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$fd</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$events</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span><br>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evio.createstopped.php" class="methodname" style="color:#CC7832">createStopped</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$fd</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$events</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evio.php" class="type EvIo" style="color:#EAB766">EvIo</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evio.set.php" class="methodname" style="color:#CC7832">set</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$fd</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$events</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::clear}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::feed}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::getLoop}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evloop.php" class="type EvLoop" style="color:#EAB766">EvLoop</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::invoke}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::keepalive}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$value</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::setCallback}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::start}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::stop}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>  <div class="section" id="evio.props">   <h2 class="title">属性</h2>   <dl>         <dt id="evio.props.fd">      <var class="varname">fd</var>     </dt>     <dd>      <p class="para"/>     </dd>             <dt id="evio.props.events">      <var class="varname">events</var>     </dt>     <dd>      <p class="para"/>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EvIo::__construct} — Constructs EvIo watcher object</li><li>{@link EvIo::createStopped} — Create stopped EvIo watcher object</li><li>{@link EvIo::set} — Configures the watcher</li></ul></div>
*/
final class EvIo extends EvWatcher
{
    /**
     * @var resource A stream opened with fopen() or similar functions, numeric file descriptor, or socket.
     */
    #[Immutable]
    public $fd;

    /**
     * @var int Ev::READ and/or Ev::WRITE. See the bit masks.
     */
    #[Immutable]
    #[ExpectedValues(flags: [Ev::READ, Ev::WRITE])]
    public $events;

    /**
     * Constructs EvIo watcher object.
     *
     * Constructs EvIo watcher object and starts the watcher automatically.
     *
     * @param resource $fd  A stream opened with fopen() or similar functions, numeric file descriptor, or socket.
     * @param int $events Ev::READ and/or Ev::WRITE. See the bit masks.
     * @param callable $callback
     * @param mixed $data
     * @param int $priority
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $fd,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $events,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $callback,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $data = null,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $priority = 0
    ) {}

/**
*<div id="evio.set" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvIo::set</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvIo::set</span> &mdash; <span class="dc-title">Configures the watcher</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evio.set-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvIo::set</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$fd</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$events</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Configures the EvIo watcher  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evio.set-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">fd</span>    </dt>    <dd>     <span>      The same as for      <span class="methodname" style="color:#CC7832">{@link EvIo::__construct()}</span>     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">events</span>    </dt>    <dd>     <p class="para">      The same as for      <span class="methodname" style="color:#CC7832">{@link EvIo::__construct()}</span>     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evio.set-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function set(
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $fd,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $events
    ) {}

/**
*<div id="evio.createstopped" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvIo::createStopped</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvIo::createStopped</span> &mdash; <span class="dc-title">Create stopped EvIo watcher object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evio.createstopped-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EvIo::createStopped</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$fd</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$events</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evio.php" class="type EvIo" style="color:#EAB766">EvIo</a></span></div>  <p class="para rdfs-comment">   The same as   <span class="methodname" style="color:#CC7832">{@link EvIo::__construct()}</span>   , but doesn&#039;t start the watcher automatically.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evio.createstopped-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">fd</span>    </dt>    <dd>     <span>      The same as for      <span class="methodname" style="color:#CC7832">{@link EvIo::__construct()}</span>     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">events</span>    </dt>    <dd>     <p class="para">      The same as for      <span class="methodname" style="color:#CC7832">{@link EvIo::__construct()}</span>     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">callback</span>    </dt>    <dd>     <p class="para">      See      <a href="https://www.php.net/manual/zh/ev.watcher-callbacks.php" class="link">Watcher callbacks</a>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">data</span>    </dt>    <dd>     <p class="para">      Custom data associated with the watcher.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">priority</span>    </dt>    <dd>     <p class="para">      <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-pri" class="link">Watcher priority</a>     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evio.createstopped-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns EvIo object on success.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evio.createstopped-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvIo::__construct()} - Constructs EvIo watcher object</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvLoop::io()} - Create EvIo watcher object associated with the current event  loop instance</span>   </li>  </ul> </div></div>
     * @return EvIo*/
    final public static function createStopped(mixed $fd, int $events, mixed $callback, mixed $data = null, int $priority = 0) {}
}

/**
*<div id="class.evperiodic" class="reference"> <h1 class="title">The EvPeriodic class</h1>  <div class="partintro"><p class="verinfo">(PECL ev &gt;= 0.2.0)</p>  <div class="section" id="evperiodic.intro">   <h2 class="title">简介</h2>  <p class="para">    Periodic watchers are also timers of a kind, but they are very versatile.   </p>   <p class="para">    Unlike    <span class="classname"><a href="https://www.php.net/manual/zh/class.evtimer.php" class="classname">EvTimer</a></span>    ,    <span class="classname"><strong class="classname">EvPeriodic</strong></span>    watchers are not based on real time(or relative time, the physical time    that passes) but on wall clock time(absolute time, calendar or clock). The    difference is that wall clock time can run faster or slower than real    time, and time jumps are not uncommon(e.g. when adjusting it).   </p>   <p class="para">    <span class="classname"><strong class="classname">EvPeriodic</strong></span>    watcher can be configured to trigger after some specific point in time.    For example, if an    <span class="classname"><strong class="classname">EvPeriodic</strong></span>    watcher is configured to trigger    <em>&quot;in 10 seconds&quot;</em>    (e.g.    <span class="methodname" style="color:#CC7832">{@link EvLoop::now()}</span>    +    <strong><span>10.0</span></strong>    , i.e. an absolute time, not a delay), and the system clock is reset to    <em>January of the previous year</em>    , then it will take a year or more to trigger the event (unlike an    <span class="classname"><a href="https://www.php.net/manual/zh/class.evtimer.php" class="classname">EvTimer</a></span>    , which would still trigger roughly    <strong><span>10</span></strong>    seconds after starting it as it uses a relative timeout).   </p>   <p class="para">    As with timers, the callback is guaranteed to be invoked only when the    point in time where it is supposed to trigger has passed. If multiple    timers become ready during the same loop iteration then the ones with    earlier time-out values are invoked before ones with later time-out values    (but this is no longer true when a callback calls    <span class="methodname" style="color:#CC7832">{@link EvLoop::run()}</span>    recursively).   </p>  </div>  <div class="section" id="evperiodic.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">EvPeriodic</strong>     </span>     <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://www.php.net/manual/zh/class.evwatcher.php" class="classname">EvWatcher</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evperiodic.php#evperiodic.props.offset">$<var class="varname">offset</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evperiodic.php#evperiodic.props.interval">$<var class="varname">interval</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-active">$<var class="varname">is_active</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.data">$<var class="varname">data</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-pending">$<var class="varname">is_pending</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.priority">$<var class="varname">priority</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evperiodic.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$offset</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$interval</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$reschedule_cb</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evperiodic.again.php" class="methodname" style="color:#CC7832">again</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evperiodic.at.php" class="methodname" style="color:#CC7832">at</a></span>(): <span class="type" style="color:#EAB766">float</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evperiodic.createstopped.php" class="methodname" style="color:#CC7832">createStopped</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$offset</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$interval</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$reschedule_cb</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evperiodic.php" class="type EvPeriodic" style="color:#EAB766">EvPeriodic</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evperiodic.set.php" class="methodname" style="color:#CC7832">set</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$offset</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$interval</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::clear}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::feed}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::getLoop}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evloop.php" class="type EvLoop" style="color:#EAB766">EvLoop</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::invoke}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::keepalive}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$value</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::setCallback}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::start}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::stop}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>  <div class="section" id="evperiodic.props">   <h2 class="title">属性</h2>   <dl>         <dt id="evperiodic.props.offset">      <var class="varname">offset</var>     </dt>     <dd>      <p class="para">       When repeating, this contains the offset value, otherwise this is the       absolute point in time(the offset value passed to       <span class="methodname" style="color:#CC7832">{@link EvPeriodic::set()}</span>       , although       <em>libev</em>       might modify this value for better numerical stability).      </p>     </dd>             <dt id="evperiodic.props.interval">      <var class="varname">interval</var>     </dt>     <dd>      <p class="para">       The current interval value. Can be modified any time, but changes only       take effect when the periodic timer fires or       <span class="methodname" style="color:#CC7832">{@link EvPeriodic::again()}</span>       is being called.      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EvPeriodic::again} — Simply stops and restarts the periodic watcher again</li><li>{@link EvPeriodic::at} — Returns the absolute time that this  watcher is supposed to trigger next</li><li>{@link EvPeriodic::__construct} — Constructs EvPeriodic watcher object</li><li>{@link EvPeriodic::createStopped} — Create a stopped EvPeriodic watcher</li><li>{@link EvPeriodic::set} — Configures the watcher</li></ul></div>
*/
final class EvPeriodic extends EvWatcher
{
    /**
     * @var float When repeating, this contains the offset value, otherwise this is the absolute point in time (the
     *      offset value passed to EvPeriodic::set(), although libev might modify this value for better numerical
     *      stability).
     */
    public $offset;

    /**
     * @var float The current interval value. Can be modified any time, but changes only take effect when the periodic
     *      timer fires or EvPeriodic::again() is being called.
     */
    public $interval;

    /**
     * Constructs EvPeriodic watcher object.
     *
     * Constructs EvPeriodic watcher object and starts it automatically. EvPeriodic::createStopped() method creates
     * stopped periodic watcher.
     *
     * @param float $offset When repeating, this contains the offset value, otherwise this is the absolute point in
     *      time (the offset value passed to EvPeriodic::set(), although libev might modify this value for better
     *      numerical stability).
     * @param float $interval The current interval value. Can be modified any time, but changes only take effect when
     *      the periodic timer fires or EvPeriodic::again() is being called.
     * @param null|callable $reschedule_cb If set, tt must return the next time to trigger, based on the passed time value
     *      (that is, the lowest time value larger than or equal to the second argument). It will usually be called just
     *      before the callback will be triggered, but might be called at other times, too.
     * @param callable $callback
     * @param mixed $data
     * @param int $priority
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'float'], default: '')] $offset,
        #[LanguageLevelTypeAware(['8.0' => 'float'], default: '')] $interval,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $reschedule_cb,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $callback,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $data = null,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $priority = 0
    ) {}

/**
*<div id="evperiodic.again" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvPeriodic::again</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvPeriodic::again</span> &mdash; <span class="dc-title">Simply stops and restarts the periodic watcher again</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evperiodic.again-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvPeriodic::again</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Simply stops and restarts the periodic watcher again. This is only useful   when attributes are changed.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evperiodic.again-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evperiodic.again-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evperiodic.again-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvTimer::again()} - Restarts the timer watcher</span>   </li>  </ul> </div></div>
     * @return void*/
    public function again() {}

/**
*<div id="evperiodic.at" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvPeriodic::at</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvPeriodic::at</span> &mdash; <span class="dc-title">Returns the absolute time that this  watcher is supposed to trigger next</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evperiodic.at-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvPeriodic::at</strong></span>(): <span class="type" style="color:#EAB766">float</span></div>  <p class="para rdfs-comment">   When the watcher is active, returns the absolute time that this watcher is   supposed to trigger next. This is not the same as the offset argument to   <span class="methodname" style="color:#CC7832">{@link EvPeriodic::set()}</span>   or   <span class="methodname" style="color:#CC7832">{@link EvPeriodic::__construct()}</span>   , but indeed works even in interval mode.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evperiodic.at-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evperiodic.at-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the absolute time this watcher is supposed to trigger next in   seconds.  </p> </div></div>
     * @return float Rhe absolute time this watcher is supposed to trigger next in seconds.*/
    public function at() {}

/**
*<div id="evperiodic.createstopped" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvPeriodic::createStopped</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvPeriodic::createStopped</span> &mdash; <span class="dc-title">Create a stopped EvPeriodic watcher</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evperiodic.createstopped-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EvPeriodic::createStopped</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$offset</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$interval</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$reschedule_cb</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evperiodic.php" class="type EvPeriodic" style="color:#EAB766">EvPeriodic</a></span></div>  <p class="para rdfs-comment">   Create EvPeriodic object. Unlike   <span class="methodname" style="color:#CC7832">{@link EvPeriodic::__construct()}</span>   this method doesn&#039;t start the watcher automatically.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evperiodic.createstopped-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">offset</span>    </dt>    <dd>     <span>      See      <a href="https://www.php.net/manual/zh/ev.periodic-modes.php" class="link">Periodic watcher operation modes</a>     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">interval</span>    </dt>    <dd>     <p class="para">      See      <a href="https://www.php.net/manual/zh/ev.periodic-modes.php" class="link">Periodic watcher operation modes</a>     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">reschedule_cb</span>    </dt>    <dd>     <p class="para">      Reschedule callback. You can pass <strong><span>null</span></strong>. See      <a href="https://www.php.net/manual/zh/ev.periodic-modes.php" class="link">Periodic watcher operation     modes</a>     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">callback</span>    </dt>    <dd>     <p class="para">      See      <a href="https://www.php.net/manual/zh/ev.watcher-callbacks.php" class="link">Watcher callbacks</a>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">data</span>    </dt>    <dd>     <p class="para">      Custom data associated with the watcher.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">priority</span>    </dt>    <dd>     <p class="para">      <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-pri" class="link">Watcher priority</a>     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evperiodic.createstopped-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns EvPeriodic watcher object on success.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evperiodic.createstopped-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvPeriodic::__construct()} - Constructs EvPeriodic watcher object</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvTimer::createStopped()} - Creates EvTimer stopped watcher object</span>   </li>  </ul> </div></div>
     * @return EvPeriodic*/
    final public static function createStopped(float $offset, float $interval, mixed $reschedule_cb, mixed $callback, mixed $data = null, int $priority = 0) {}

/**
*<div id="evperiodic.set" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvPeriodic::set</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvPeriodic::set</span> &mdash; <span class="dc-title">Configures the watcher</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evperiodic.set-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvPeriodic::set</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$offset</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$interval</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   (Re-)Configures EvPeriodic watcher  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evperiodic.set-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">offset</span>    </dt>    <dd>     <span>      The same meaning as for      <span class="methodname" style="color:#CC7832">{@link EvPeriodic::__construct()}</span>      . See      <a href="https://www.php.net/manual/zh/ev.periodic-modes.php" class="link">Periodic watcher operation modes</a>     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">interval</span>    </dt>    <dd>     <p class="para">      The same meaning as for      <span class="methodname" style="color:#CC7832">{@link EvPeriodic::__construct()}</span>      . See      <a href="https://www.php.net/manual/zh/ev.periodic-modes.php" class="link">Periodic watcher operation modes</a>     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evperiodic.set-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function set(
        #[LanguageLevelTypeAware(['8.0' => 'float'], default: '')] $offset,
        #[LanguageLevelTypeAware(['8.0' => 'float'], default: '')] $interval,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $reschedule_cb = null
    ) {}
}

/**
*<div id="class.evprepare" class="reference"> <h1 class="title">The EvPrepare class</h1>  <div class="partintro"><p class="verinfo">(PECL ev &gt;= 0.2.0)</p>  <div class="section" id="evprepare.intro">   <h2 class="title">简介</h2><p class="para">    <span class="classname"><strong class="classname">EvPrepare</strong></span>    and    <span class="classname"><a href="https://www.php.net/manual/zh/class.evcheck.php" class="classname">EvCheck</a></span>    watchers are usually used in pairs.    <span class="classname"><strong class="classname">EvPrepare</strong></span>    watchers get invoked before the process blocks,    <span class="classname"><a href="https://www.php.net/manual/zh/class.evcheck.php" class="classname">EvCheck</a></span>    afterwards.   </p><p class="para">    It is not allowed to call    <span class="methodname" style="color:#CC7832">{@link EvLoop::run()}</span>    or similar methods or functions that enter the current event loop from    either    <span class="classname"><strong class="classname">EvPrepare</strong></span>    or    <span class="classname"><a href="https://www.php.net/manual/zh/class.evcheck.php" class="classname">EvCheck</a></span>    watchers. Other loops than the current one are fine, however. The    rationale behind this is that one don&#039;t need to check for recursion    in those watchers, i.e. the sequence will always be:    <span class="classname"><strong class="classname">EvPrepare</strong></span>    -&gt; blocking -&gt;    <span class="classname"><a href="https://www.php.net/manual/zh/class.evcheck.php" class="classname">EvCheck</a></span>    , so having a watcher of each kind they will always be called in pairs    bracketing the blocking call.   </p><p class="para">    The main purpose is to integrate other event mechanisms into    <em>libev</em>    and their use is somewhat advanced. They could be used, for example, to    track variable changes, implement custom watchers, integrate net-snmp or a    coroutine library and lots more. They are also occasionally useful to    cache some data and want to flush it before blocking.   </p><p class="para">    It is recommended to give    <span class="classname"><a href="https://www.php.net/manual/zh/class.evcheck.php" class="classname">EvCheck</a></span>    watchers highest(    <strong><span>Ev::MAXPRI</span></strong>    ) priority, to ensure that they are being run before any other watchers    after the poll (this doesn’t matter for    <span class="classname"><strong class="classname">EvPrepare</strong></span>    watchers).   </p><p class="para">    Also,    <span class="classname"><a href="https://www.php.net/manual/zh/class.evcheck.php" class="classname">EvCheck</a></span>    watchers should not activate/feed events. While    <em>libev</em>    fully supports this, they might get executed before other    <span class="classname"><a href="https://www.php.net/manual/zh/class.evcheck.php" class="classname">EvCheck</a></span>    watchers did their job.   </p>  </div>  <div class="section" id="evprepare.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">EvPrepare</strong>     </span>     <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://www.php.net/manual/zh/class.evwatcher.php" class="classname">EvWatcher</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-active">$<var class="varname">is_active</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.data">$<var class="varname">data</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-pending">$<var class="varname">is_pending</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.priority">$<var class="varname">priority</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evprepare.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evprepare.createstopped.php" class="methodname" style="color:#CC7832">createStopped</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evprepare.php" class="type EvPrepare" style="color:#EAB766">EvPrepare</a></span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::clear}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::feed}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::getLoop}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evloop.php" class="type EvLoop" style="color:#EAB766">EvLoop</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::invoke}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::keepalive}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$value</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::setCallback}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::start}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::stop}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EvPrepare::__construct} — Constructs EvPrepare watcher object</li><li>{@link EvPrepare::createStopped} — Creates a stopped instance of EvPrepare watcher</li></ul></div>
*/
final class EvPrepare extends EvWatcher
{
    /**
     * Constructs EvPrepare watcher object.
     *
     * Constructs EvPrepare watcher object and starts the watcher automatically. If you need a stopped watcher, consider
     * using EvPrepare::createStopped().
     *
     * @param callable $callback
     * @param mixed $data
     * @param int $priority
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $callback,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $data = null,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $priority = 0
    ) {}

/**
*<div id="evprepare.createstopped" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvPrepare::createStopped</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvPrepare::createStopped</span> &mdash; <span class="dc-title">Creates a stopped instance of EvPrepare watcher</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evprepare.createstopped-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EvPrepare::createStopped</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evprepare.php" class="type EvPrepare" style="color:#EAB766">EvPrepare</a></span></div>  <p class="para rdfs-comment">   Creates a stopped instance of EvPrepare watcher. Unlike   <span class="methodname" style="color:#CC7832">{@link EvPrepare::__construct()}</span>   , this method doesn&#039; start the watcher automatically.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evprepare.createstopped-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">callback</span>    </dt>    <dd>     <span>      See      <a href="https://www.php.net/manual/zh/ev.watcher-callbacks.php" class="link">Watcher callbacks</a>      .     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">data</span>    </dt>    <dd>     <p class="para">      Custom data associated with the watcher.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">priority</span>    </dt>    <dd>     <p class="para">      <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-pri" class="link">Watcher priority</a>     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evprepare.createstopped-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Return EvPrepare object on success.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evprepare.createstopped-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvPrepare::__construct()} - Constructs EvPrepare watcher object</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvWatcher::start()} - Starts the watcher</span>   </li>  </ul> </div></div>
     * @return EvPrepare*/
    final public static function createStopped(mixed $callback, mixed $data = null, int $priority = 0) {}
}

/**
*<div id="class.evsignal" class="reference"> <h1 class="title">The EvSignal class</h1>  <div class="partintro"><p class="verinfo">(PECL ev &gt;= 0.2.0)</p>  <div class="section" id="evsignal.intro">   <h2 class="title">简介</h2>  <p class="para">    <span class="classname"><strong class="classname">EvSignal</strong></span>    watchers will trigger an event when the process receives a specific signal    one or more times. Even though signals are very asynchronous,    <em>libev</em>    will try its best to deliver signals synchronously, i.e. as part of the    normal event processing, like any other event.   </p>   <p class="para">    There is no limit for the number of watchers for the same signal, but only    within the same loop, i.e. one can watch for    <strong><span>SIGINT</span></strong>    in the default loop and for    <strong><span>SIGIO</span></strong>    in another loop, but it is not allowed to watch for    <strong><span>SIGINT</span></strong>    in both the default loop and another loop at the same time. At the moment,    <strong><span>SIGCHLD</span></strong>    is permanently tied to the default loop.   </p>   <p class="para">    If possible and supported,    <em>libev</em>    will install its handlers with    <span>SA_RESTART</span>    (or equivalent) behaviour enabled, so system calls should not be unduly    interrupted. In case of a problem with system calls getting interrupted by    signals, all the signals can be blocked in an    <span class="classname"><a href="https://www.php.net/manual/zh/class.evcheck.php" class="classname">EvCheck</a></span>    watcher and unblocked in a    <span class="classname"><a href="https://www.php.net/manual/zh/class.evprepare.php" class="classname">EvPrepare</a></span>    watcher.   </p>  </div>  <div class="section" id="evsignal.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">EvSignal</strong>     </span>     <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://www.php.net/manual/zh/class.evwatcher.php" class="classname">EvWatcher</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evsignal.php#evsignal.props.signum">$<var class="varname">signum</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-active">$<var class="varname">is_active</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.data">$<var class="varname">data</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-pending">$<var class="varname">is_pending</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.priority">$<var class="varname">priority</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evsignal.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$signum</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evsignal.createstopped.php" class="methodname" style="color:#CC7832">createStopped</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$signum</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evsignal.php" class="type EvSignal" style="color:#EAB766">EvSignal</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evsignal.set.php" class="methodname" style="color:#CC7832">set</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$signum</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::clear}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::feed}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::getLoop}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evloop.php" class="type EvLoop" style="color:#EAB766">EvLoop</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::invoke}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::keepalive}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$value</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::setCallback}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::start}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::stop}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>  <div class="section" id="evsignal.props">   <h2 class="title">属性</h2>   <dl>         <dt id="evsignal.props.signum">      <var class="varname">signum</var>     </dt>     <dd>      <p class="para">       Signal number. See the constants exported by       <em>pcntl</em>       extension. See also       <span>signal(7)</span>       man page.      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EvSignal::__construct} — Constructs EvSignal watcher object</li><li>{@link EvSignal::createStopped} — Create stopped EvSignal watcher object</li><li>{@link EvSignal::set} — Configures the watcher</li></ul></div>
*/
final class EvSignal extends EvWatcher
{
    /**
     * @var int Signal number. See the constants exported by pcntl extension. See also signal(7) man page.
     */
    #[Immutable]
    public $signum;

    /**
     * Constructs EvSignal watcher object
     *
     * @param int $signum Signal number. See the constants exported by pcntl extension. See also signal(7) man page.
     * @param callable $callback
     * @param mixed $data
     * @param int $priority
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $signum,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $callback,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $data = null,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $priority = 0
    ) {}

/**
*<div id="evsignal.set" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvSignal::set</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvSignal::set</span> &mdash; <span class="dc-title">Configures the watcher</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evsignal.set-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvSignal::set</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$signum</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Configures the watcher.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evsignal.set-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">signum</span>    </dt>    <dd>     <span>      Signal number. The same as for      <span class="methodname" style="color:#CC7832">{@link EvSignal::__construct()}</span>     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evsignal.set-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function set(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $signum) {}

/**
*<div id="evsignal.createstopped" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvSignal::createStopped</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvSignal::createStopped</span> &mdash; <span class="dc-title">Create stopped EvSignal watcher object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evsignal.createstopped-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EvSignal::createStopped</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$signum</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evsignal.php" class="type EvSignal" style="color:#EAB766">EvSignal</a></span></div>  <p class="para rdfs-comment">   Create stopped EvSignal watcher object. Unlike   <span class="methodname" style="color:#CC7832">{@link EvSignal::__construct()}</span>   , this method does&#039;t start the watcher automatically.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evsignal.createstopped-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">signum</span>    </dt>    <dd>     <span>      Signal number. See constants exported by      <em>pcntl</em>      extension. See also      <span>signal(7)</span>      man page.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">callback</span>    </dt>    <dd>     <p class="para">      See      <a href="https://www.php.net/manual/zh/ev.watcher-callbacks.php" class="link">Watcher callbacks</a>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">data</span>    </dt>    <dd>     <p class="para">      Custom data associated with the watcher.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">priority</span>    </dt>    <dd>     <p class="para">      <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-pri" class="link">Watcher priority</a>     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evsignal.createstopped-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns EvSignal object on success.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evsignal.createstopped-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvWatcher::start()} - Starts the watcher</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvSignal::__construct()} - Constructs EvSignal watcher object</span>   </li>  </ul> </div></div>
     * @return EvSignal*/
    final public static function createStopped(int $signum, mixed $callback, mixed $data = null, int $priority = 0) {}
}

/**
*<div id="class.evstat" class="reference"> <h1 class="title">The EvStat class</h1>  <div class="partintro"><p class="verinfo">(PECL ev &gt;= 0.2.0)</p>  <div class="section" id="evstat.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">EvStat</strong></span>    monitors a file system path for attribute changes. It calls    <em>stat()</em>    on that path in regular intervals(or when the OS signals it changed) and    sees if it changed compared to the last time, invoking the callback if it    did.   </p>   <p class="para">    The path does not need to exist: changing from &quot;path exists&quot; to &quot;path does    not exist&quot; is a status change like any other. The condition &quot;path does not    exist&quot; is signified by the    <strong><span>&#039;nlink&#039;</span></strong>    item being 0(returned by    <span class="methodname" style="color:#CC7832">{@link EvStat::attr()}</span>    method).   </p>   <p class="para">    The path must not end in a slash or contain special components such as    <strong><span>&#039;.&#039;</span></strong>    or    <strong><span>..</span></strong>    . The path should be absolute: if it is relative and the working directory    changes, then the behaviour is undefined.   </p>   <p class="para">    Since there is no portable change notification interface available, the    portable implementation simply calls    <em>stat()</em>    regularly on the path to see if it changed somehow. For this case a    recommended polling interval can be specified. If one specifies a polling    interval of    <strong><span>0.0</span></strong>    (highly recommended) then a suitable, unspecified default value will be    used(which could be expected to be around 5 seconds, although this might    change dynamically).    <em>libev</em>    will also impose a minimum interval which is currently around    <strong><span>0.1</span></strong>    , but that’s usually overkill.   </p>   <p class="para">    This watcher type is not meant for massive numbers of    <span class="classname"><strong class="classname">EvStat</strong></span>    watchers, as even with OS-supported change notifications, this can be    resource-intensive.   </p>  </div>  <div class="section" id="evstat.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">EvStat</strong>     </span>     <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://www.php.net/manual/zh/class.evwatcher.php" class="classname">EvWatcher</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evstat.php#evstat.props.path">$<var class="varname">path</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evstat.php#evstat.props.interval">$<var class="varname">interval</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-active">$<var class="varname">is_active</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.data">$<var class="varname">data</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-pending">$<var class="varname">is_pending</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.priority">$<var class="varname">priority</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evstat.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$path</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$interval</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evstat.attr.php" class="methodname" style="color:#CC7832">attr</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evstat.createstopped.php" class="methodname" style="color:#CC7832">createStopped</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$path</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$interval</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evstat.prev.php" class="methodname" style="color:#CC7832">prev</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evstat.set.php" class="methodname" style="color:#CC7832">set</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$path</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$interval</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evstat.stat.php" class="methodname" style="color:#CC7832">stat</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::clear}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::feed}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::getLoop}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evloop.php" class="type EvLoop" style="color:#EAB766">EvLoop</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::invoke}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::keepalive}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$value</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::setCallback}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::start}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::stop}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>  <div class="section" id="evstat.props">   <h2 class="title">属性</h2>   <dl>         <dt id="evstat.props.interval">      <var class="varname">interval</var>     </dt>     <dd>      <p class="para">       <em>Readonly</em>       . Hint on how quickly a change is expected to be detected and should       normally be specified as       <strong><span>0.0</span></strong>       to let       <em>libev</em>       choose a suitable value.      </p>     </dd>             <dt id="evstat.props.path">      <var class="varname">path</var>     </dt>     <dd>      <p class="para">       <em>Readonly</em>       . The path to wait for status changes on.      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EvStat::attr} — Returns the values most recently detected by Ev</li><li>{@link EvStat::__construct} — Constructs EvStat watcher object</li><li>{@link EvStat::createStopped} — Create a stopped EvStat watcher object</li><li>{@link EvStat::prev} — Returns the previous set of values returned by EvStat::attr</li><li>{@link EvStat::set} — Configures the watcher</li><li>{@link EvStat::stat} — Initiates the stat call</li></ul></div>
*/
final class EvStat extends EvWatcher
{
    /**
     * @var float  Hint on how quickly a change is expected to be detected and should normally be
     *      specified as 0.0 to let libev choose a suitable value.
     */
    #[Immutable]
    public $interval;

    /**
     * @var string The path to wait for status changes on.
     */
    #[Immutable]
    public $path;

    /**
     * Constructs EvStat watcher object.
     *
     * Constructs EvStat watcher object and starts the watcher automatically.
     *
     * @param string $path The path to wait for status changes on.
     * @param float $interval Hint on how quickly a change is expected to be detected and should normally be specified
     *      as 0.0 to let libev choose a suitable value.
     * @param callable $callback
     * @param mixed $data
     * @param int $priority
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $path,
        #[LanguageLevelTypeAware(['8.0' => 'float'], default: '')] $interval,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $callback,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $data = null,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $priority = 0
    ) {}

/**
*<div id="evstat.attr" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvStat::attr</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvStat::attr</span> &mdash; <span class="dc-title">Returns the values most recently detected by Ev</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evstat.attr-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvStat::attr</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Returns array of the values most recently detected by Ev  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evstat.attr-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evstat.attr-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns array with the values most recently detect by Ev(without actual   <span>stat</span>   &#039;ing):   <table class="doctable table">    <caption><strong>    List for item keys of the array returned by <span class="methodname" style="color:#CC7832"><strong>EvStat::attr()</strong></span>    </strong></caption>         <thead>      <tr>       <th>Key</th>       <th>Description</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>        <strong><span>&#039;dev&#039;</span></strong>       </td>       <td>ID of device containing file</td>      </tr>      <tr>       <td>        <strong><span>&#039;ino&#039;</span></strong>       </td>       <td>inode number</td>      </tr>      <tr>       <td>        <strong><span>&#039;mode&#039;</span></strong>       </td>       <td>protection</td>      </tr>      <tr>       <td>        <strong><span>&#039;nlink&#039;</span></strong>       </td>       <td>number of hard links</td>      </tr>      <tr>       <td>        <strong><span>&#039;uid&#039;</span></strong>       </td>       <td>user ID of owner</td>      </tr>      <tr>       <td>        <strong><span>&#039;size&#039;</span></strong>       </td>       <td>total size, in bytes</td>      </tr>      <tr>       <td>        <strong><span>&#039;gid&#039;</span></strong>       </td>       <td>group ID of owner</td>      </tr>      <tr>       <td>        <strong><span>&#039;rdev&#039;</span></strong>       </td>       <td>device ID (if special file)</td>      </tr>      <tr>       <td>        <strong><span>&#039;blksize&#039;</span></strong>       </td>       <td>blocksize for file system I/O</td>      </tr>      <tr>       <td>        <strong><span>&#039;blocks&#039;</span></strong>       </td>       <td>number of 512B blocks allocated</td>      </tr>      <tr>       <td>        <strong><span>&#039;atime&#039;</span></strong>       </td>       <td>time of last access</td>      </tr>      <tr>       <td>        <strong><span>&#039;ctime&#039;</span></strong>       </td>       <td>time of last status change</td>      </tr>      <tr>       <td>        <strong><span>&#039;mtime&#039;</span></strong>       </td>       <td>time of last modification</td>      </tr>     </tbody>       </table>  </p>  <p class="para">   See   <span>stat(2)</span>   man page for details.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-evstat.attr-examples">  <h3 class="title">示例</h3> <div class="example" id="">   <p><strong>示例 #1 Monitor changes of /var/log/messages</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Use 10 second update interval.<br /></span><span style="color: #9876AA">$w </span><span style="color: #007700">= new </span><span style="color: #9876AA">EvStat</span><span style="color: #007700">(</span><span style="color: #DD0000">"/var/log/messages"</span><span style="color: #007700">, </span><span style="color: #9876AA">8</span><span style="color: #007700">, function (</span><span style="color: #9876AA">$w</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"/var/log/messages changed\n"</span><span style="color: #007700">;<br /><br />    </span><span style="color: #9876AA">$attr </span><span style="color: #007700">= </span><span style="color: #9876AA">$w</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attr</span><span style="color: #007700">();<br /><br />    if (</span><span style="color: #9876AA">$attr</span><span style="color: #007700">[</span><span style="color: #DD0000">'nlink'</span><span style="color: #007700">]) {<br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"Current size: %ld\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$attr</span><span style="color: #007700">[</span><span style="color: #DD0000">'size'</span><span style="color: #007700">]);<br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"Current atime: %ld\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$attr</span><span style="color: #007700">[</span><span style="color: #DD0000">'atime'</span><span style="color: #007700">]);<br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"Current mtime: %ld\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$attr</span><span style="color: #007700">[</span><span style="color: #DD0000">'mtime'</span><span style="color: #007700">]);<br />    } else {<br />        </span><span style="color: #9876AA">fprintf</span><span style="color: #007700">(</span><span style="color: #9876AA">STDERR</span><span style="color: #007700">, </span><span style="color: #DD0000">"`messages` file is not there!"</span><span style="color: #007700">);<br />        </span><span style="color: #9876AA">$w</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">stop</span><span style="color: #007700">();<br />    }<br />});<br /><br /></span><span style="color: #9876AA">Ev</span><span style="color: #007700">::</span><span style="color: #9876AA">run</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evstat.attr-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvStat::prev()} - Returns the previous set of values returned by EvStat::attr</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvStat::stat()} - Initiates the stat call</span>   </li>  </ul> </div></div>
     * @return array The values most recently detect by Ev (without actual stat'ing). See stat(2) man page for details.*/
    public function attr() {}

/**
*<div id="evstat.prev" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvStat::prev</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvStat::prev</span> &mdash; <span class="dc-title">Returns the previous set of values returned by EvStat::attr</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evstat.prev-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvStat::prev</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Just like   <span class="methodname" style="color:#CC7832">{@link EvStat::attr()}</span>   , but returns the previous set of values.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evstat.prev-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evstat.prev-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an array with the same structure as the array returned by   <span class="methodname" style="color:#CC7832">{@link EvStat::attr()}</span>   . The array contains previously detected values.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evstat.prev-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvStat::attr()} - Returns the values most recently detected by Ev</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvStat::stat()} - Initiates the stat call</span>   </li>  </ul> </div></div>
     * @return array Just like EvStat::attr() , but returns the previous set of values.*/
    public function prev() {}

/**
*<div id="evstat.set" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvStat::set</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvStat::set</span> &mdash; <span class="dc-title">Configures the watcher</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evstat.set-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvStat::set</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$path</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$interval</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Configures the watcher.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evstat.set-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">path</span>    </dt>    <dd>     <span>      The path to wait for status changes on.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">interval</span>    </dt>    <dd>     <p class="para">      Hint on how quickly a change is expected to be detected and should      normally be specified as      <strong><span>0.0</span></strong>      to let      <em>libev</em>      choose a suitable value.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evstat.set-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function set(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $path,
        #[LanguageLevelTypeAware(['8.0' => 'float'], default: '')] $interval
    ) {}

/**
*<div id="evstat.stat" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvStat::stat</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvStat::stat</span> &mdash; <span class="dc-title">Initiates the stat call</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evstat.stat-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvStat::stat</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Initiates the stat call(updates internal cache). It stats(using   <span>lstat</span>   ) the   <var class="varname">path</var>   specified in the watcher and sets to the values found.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evstat.stat-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evstat.stat-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if   <var class="varname">path</var>   exists. Otherwise <strong><span>false</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evstat.stat-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvStat::attr()} - Returns the values most recently detected by Ev</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvStat::prev()} - Returns the previous set of values returned by EvStat::attr</span>   </li>  </ul> </div></div>
     * @return bool TRUE if path exists. Otherwise FALSE.*/
    public function stat() {}

/**
*<div id="evstat.createstopped" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvStat::createStopped</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvStat::createStopped</span> &mdash; <span class="dc-title">Create a stopped EvStat watcher object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evstat.createstopped-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EvStat::createStopped</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$path</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$interval</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Creates EvStat watcher object, but doesn&#039;t start it   automatically(unlike   <span class="methodname" style="color:#CC7832">{@link EvStat::__construct()}</span>   ).  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evstat.createstopped-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">path</span>    </dt>    <dd>     <span>      The path to wait for status changes on.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">interval</span>    </dt>    <dd>     <p class="para">      Hint on how quickly a change is expected to be detected and should      normally be specified as      <strong><span>0.0</span></strong>      to let      <em>libev</em>      choose a suitable value.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">callback</span>    </dt>    <dd>     <p class="para">      See      <a href="https://www.php.net/manual/zh/ev.watcher-callbacks.php" class="link">Watcher callbacks</a>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">data</span>    </dt>    <dd>     <p class="para">      Custom data associated with the watcher.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">priority</span>    </dt>    <dd>     <p class="para">      <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-pri" class="link">Watcher priority</a>     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evstat.createstopped-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a stopped EvStat watcher object on success.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evstat.createstopped-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvStat::__construct()} - Constructs EvStat watcher object</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvWatcher::start()} - Starts the watcher</span>   </li>  </ul> </div></div>
     * @return EvStat*/
    final public static function createStopped(string $path, float $interval, mixed $callback, mixed $data = null, int $priority = 0) {}
}

/**
*<div id="class.evtimer" class="reference"> <h1 class="title">The EvTimer class</h1>  <div class="partintro"><p class="verinfo">(PECL ev &gt;= 0.2.0)</p>  <div class="section" id="evtimer.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">EvTimer</strong></span>    watchers are simple relative timers that generate an event after a given    time, and optionally repeating in regular intervals after that.   </p>   <p class="para">    The timers are based on real time, that is, if one registers an event that    times out after an hour and resets the system clock to    <em>January last year</em>    , it will still time out after(roughly) one hour. &quot;Roughly&quot; because    detecting time jumps is hard, and some inaccuracies are unavoidable.   </p>   <p class="para">    The callback is guaranteed to be invoked only after its timeout has passed    (not at, so on systems with very low-resolution clocks this might    introduce a small delay). If multiple timers become ready during the same    loop iteration then the ones with earlier time-out values are invoked    before ones of the same priority with later time-out values (but this is    no longer true when a callback calls    <span class="methodname" style="color:#CC7832">{@link EvLoop::run()}</span>    recursively).   </p>   <p class="para">    The timer itself will do a best-effort at avoiding drift, that is, if a    timer is configured to trigger every    <strong><span>10</span></strong>    seconds, then it will normally trigger at exactly    <strong><span>10</span></strong>    second intervals. If, however, the script cannot keep up with the timer    because it takes longer than those    <strong><span>10</span></strong>    seconds to do) the timer will not fire more than once per event loop    iteration.   </p>  </div>  <div class="section" id="evtimer.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">EvTimer</strong>     </span>     <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://www.php.net/manual/zh/class.evwatcher.php" class="classname">EvWatcher</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evtimer.php#evtimer.props.repeat">$<var class="varname">repeat</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evtimer.php#evtimer.props.remaining">$<var class="varname">remaining</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-active">$<var class="varname">is_active</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.data">$<var class="varname">data</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-pending">$<var class="varname">is_pending</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.priority">$<var class="varname">priority</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evtimer.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$after</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$repeat</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evtimer.again.php" class="methodname" style="color:#CC7832">again</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evtimer.createstopped.php" class="methodname" style="color:#CC7832">createStopped</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$after</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$repeat</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evtimer.php" class="type EvTimer" style="color:#EAB766">EvTimer</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evtimer.set.php" class="methodname" style="color:#CC7832">set</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$after</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$repeat</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::clear}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::feed}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::getLoop}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evloop.php" class="type EvLoop" style="color:#EAB766">EvLoop</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::invoke}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::keepalive}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$value</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::setCallback}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::start}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::stop}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>  <div class="section" id="evtimer.props">   <h2 class="title">属性</h2>   <dl>         <dt id="evtimer.props.repeat">      <var class="varname">repeat</var>     </dt>     <dd>      <p class="para">       If repeat is       <strong><span>0.0</span></strong>       , then it will automatically be stopped once the timeout is reached. If       it is positive, then the timer will automatically be configured to       trigger again every repeat seconds later, until stopped manually.      </p>     </dd>             <dt id="evtimer.props.remaining">      <var class="varname">remaining</var>     </dt>     <dd>      <p class="para">       Returns the remaining time until a timer fires. If the timer is active,       then this time is relative to the current event loop time, otherwise       it&#039;s the timeout value currently configured.      </p>      <p class="para">       That is, after instanciating an       <span class="classname"><strong class="classname">EvTimer</strong></span>       with an       <span class="parameter" style="color:#3A95FF">after</span>       value of       <strong><span>5.0</span></strong>       and       <span class="parameter" style="color:#3A95FF">repeat</span>       value of       <strong><span>7.0</span></strong>       ,       <var class="varname">remaining</var>       returns       <strong><span>5.0</span></strong>       . When the timer is started and one second passes,       <var class="varname">remaining</var>       will return       <strong><span>4.0</span></strong>       . When the timer expires and is restarted, it will return roughly       <strong><span>7.0</span></strong>       (likely slightly less as callback invocation takes some time too), and       so on.      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EvTimer::again} — Restarts the timer watcher</li><li>{@link EvTimer::__construct} — Constructs an EvTimer watcher object</li><li>{@link EvTimer::createStopped} — Creates EvTimer stopped watcher object</li><li>{@link EvTimer::set} — Configures the watcher</li></ul></div>
*/
final class EvTimer extends EvWatcher
{
    /**
     * @var float If repeat is 0.0, then it will automatically be stopped once the timeout is reached. If it is
     *      positive, then the timer will automatically be configured to trigger again every repeat seconds later, until
     *      stopped manually.
     */
    public $repeat;

    /**
     * @var float The remaining time until a timer fires. If the timer is active, then this time is relative to the
     *      current event loop time, otherwise it's the timeout value currently configured.
     *
     *      That is, after instantiating an EvTimer with an after value of 5.0 and repeat value of 7.0, remaining
     *      returns 5.0. When the timer is started and one second passes, remaining will return 4.0 . When the timer
     *      expires and is restarted, it will return roughly 7.0 (likely slightly less as callback invocation takes some
     *      time too), and so on.
     */
    public $remaining;

    /**
     * Constructs an EvTimer watcher object.
     *
     * @param float $after Configures the timer to trigger after $after seconds.
     * @param float $repeat If repeat is 0.0, then it will automatically be stopped once the timeout is reached. If it
     *      is positive, then the timer will automatically be configured to trigger again every repeat seconds later,
     *      until stopped manually.
     * @param callable $callback
     * @param mixed $data
     * @param int $priority
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'float'], default: '')] $after,
        #[LanguageLevelTypeAware(['8.0' => 'float'], default: '')] $repeat,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $callback,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $data = null,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $priority = 0
    ) {}

/**
*<div id="evtimer.again" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvTimer::again</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvTimer::again</span> &mdash; <span class="dc-title">Restarts the timer watcher</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evtimer.again-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvTimer::again</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   This will act as if the timer timed out and restart it again if it is   repeating. The exact semantics are:  </p>  <ol type="1">   <li class="listitem">    <p class="para">     if the timer is pending, its pending status is cleared.    </p>   </li>   <li class="listitem">    <p class="para">     if the timer is started but non-repeating, stop it (as if it timed out).    </p>   </li>   <li class="listitem">    <p class="para">     if the timer is repeating, either start it if necessary (with the     <var class="varname">repeat</var>     value), or reset the running timer to the     <var class="varname">repeat</var>     value.    </p>   </li>  </ol> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evtimer.again-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evtimer.again-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evtimer.again-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvWatcher::stop()} - Stops the watcher</span>   </li>  </ul> </div></div>
*/
    public function again() {}

/**
*<div id="evtimer.set" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvTimer::set</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvTimer::set</span> &mdash; <span class="dc-title">Configures the watcher</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evtimer.set-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvTimer::set</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$after</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$repeat</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Configures the watcher  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evtimer.set-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">after</span>    </dt>    <dd>     <span>      Configures the timer to trigger after      <span class="parameter" style="color:#3A95FF">after</span>      seconds.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">repeat</span>    </dt>    <dd>     <p class="para">      If repeat is      <strong><span>0.0</span></strong>      , then it will automatically be stopped once the timeout is reached. If      it is positive, then the timer will automatically be configured to      trigger again every repeat seconds later, until stopped manually.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evtimer.set-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function set(
        #[LanguageLevelTypeAware(['8.0' => 'float'], default: '')] $after,
        #[LanguageLevelTypeAware(['8.0' => 'float'], default: '')] $repeat
    ) {}

/**
*<div id="evtimer.createstopped" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvTimer::createStopped</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvTimer::createStopped</span> &mdash; <span class="dc-title">Creates EvTimer stopped watcher object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evtimer.createstopped-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EvTimer::createStopped</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$after</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$repeat</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evtimer.php" class="type EvTimer" style="color:#EAB766">EvTimer</a></span></div>  <p class="para rdfs-comment">   Creates EvTimer stopped watcher object. Unlike   <span class="methodname" style="color:#CC7832">{@link EvTimer::__construct()}</span>   , this method doesn&#039;t start the watcher automatically.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evtimer.createstopped-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">after</span>    </dt>    <dd>     <span>      Configures the timer to trigger after      <span class="parameter" style="color:#3A95FF">after</span>      seconds.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">repeat</span>    </dt>    <dd>     <p class="para">      If repeat is      <strong><span>0.0</span></strong>      , then it will automatically be stopped once the timeout is reached. If      it is positive, then the timer will automatically be configured to      trigger again every repeat seconds later, until stopped manually.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">callback</span>    </dt>    <dd>     <p class="para">      See      <a href="https://www.php.net/manual/zh/ev.watcher-callbacks.php" class="link">Watcher callbacks</a>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">data</span>    </dt>    <dd>     <p class="para">      Custom data associated with the watcher.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">priority</span>    </dt>    <dd>     <p class="para">      <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-pri" class="link">Watcher priority</a>     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evtimer.createstopped-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns EvTimer watcher object on success.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-evtimer.createstopped-examples">  <h3 class="title">示例</h3> <div class="example" id="">   <p><strong>示例 #1 Monotor changes of /var/log/messages. Avoid missing updates by means of one second delay</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$timer </span><span style="color: #007700">= </span><span style="color: #9876AA">EvTimer</span><span style="color: #007700">::</span><span style="color: #9876AA">createStopped</span><span style="color: #007700">(</span><span style="color: #9876AA">0.</span><span style="color: #007700">, </span><span style="color: #9876AA">1.02</span><span style="color: #007700">, function (</span><span style="color: #9876AA">$w</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$w</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">stop</span><span style="color: #007700">();<br /><br />    </span><span style="color: #9876AA">$stat </span><span style="color: #007700">= </span><span style="color: #9876AA">$w</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">data</span><span style="color: #007700">;<br /><br />    </span><span style="color: #FF8000">// 1 second after the most recent change of the file<br />    </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"Current size: %ld\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$stat</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attr</span><span style="color: #007700">()[</span><span style="color: #DD0000">'size'</span><span style="color: #007700">]);<br />});<br /><br /></span><span style="color: #9876AA">$stat </span><span style="color: #007700">= new </span><span style="color: #9876AA">EvStat</span><span style="color: #007700">(</span><span style="color: #DD0000">"/var/log/messages"</span><span style="color: #007700">, </span><span style="color: #9876AA">0.</span><span style="color: #007700">, function () use (</span><span style="color: #9876AA">$timer</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// Reset timer watcher<br />    </span><span style="color: #9876AA">$timer</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">again</span><span style="color: #007700">();<br />});<br /><br /></span><span style="color: #9876AA">$timer</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">data </span><span style="color: #007700">= </span><span style="color: #9876AA">$stat</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">Ev</span><span style="color: #007700">::</span><span style="color: #9876AA">run</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evtimer.createstopped-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvTimer::__construct()} - Constructs an EvTimer watcher object</span>   </li>   <li class="member">    <span class="classname"><a href="https://www.php.net/manual/zh/class.evperiodic.php" class="classname">EvPeriodic</a></span>   </li>  </ul> </div></div>
     * @return EvTimer*/
    final public static function createStopped(float $after, float $repeat, mixed $callback, mixed $data = null, int $priority = 0) {}
}

/**
*<div id="class.evidle" class="reference"> <h1 class="title">The EvIdle class</h1>  <div class="partintro"><p class="verinfo">(PECL ev &gt;= 0.2.0)</p>  <div class="section" id="evidle.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">EvIdle</strong></span>    watchers trigger events when no other events of the same or higher    priority are pending (    <span class="classname"><a href="https://www.php.net/manual/zh/class.evprepare.php" class="classname">EvPrepare</a></span>    ,    <span class="classname"><a href="https://www.php.net/manual/zh/class.evcheck.php" class="classname">EvCheck</a></span>    and other    <span class="classname"><strong class="classname">EvIdle</strong></span>    watchers do not count as receiving    <em>events</em>    ).   </p>   <p class="para">    Thus, as long as the process is busy handling sockets or timeouts(or even    signals) of the same or higher priority it will not be triggered. But when    the process is in idle(or only lower-priority watchers are pending), the    <span class="classname"><strong class="classname">EvIdle</strong></span>    watchers are being called once per event loop iteration - until stopped,    that is, or the process receives more events and becomes busy again with    higher priority stuff.   </p>   <p class="para">    Apart from keeping the process non-blocking(which is a useful on its own    sometimes),    <span class="classname"><strong class="classname">EvIdle</strong></span>    watchers are a good place to do    <em>&quot;pseudo-background processing&quot;</em>    , or delay processing stuff to after the event loop has handled all    outstanding events.   </p>   <p class="para">    The most noticeable effect is that as long as any    <em>idle</em>    watchers are active, the process will    <em>not</em>    block when waiting for new events.   </p>  </div>  <div class="section" id="evidle.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">EvIdle</strong>     </span>     <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://www.php.net/manual/zh/class.evwatcher.php" class="classname">EvWatcher</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-active">$<var class="varname">is_active</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.data">$<var class="varname">data</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-pending">$<var class="varname">is_pending</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.priority">$<var class="varname">priority</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evidle.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evidle.createstopped.php" class="methodname" style="color:#CC7832">createStopped</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">object</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::clear}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::feed}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::getLoop}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evloop.php" class="type EvLoop" style="color:#EAB766">EvLoop</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::invoke}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::keepalive}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$value</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::setCallback}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::start}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::stop}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EvIdle::__construct} — Constructs the EvIdle watcher object</li><li>{@link EvIdle::createStopped} — Creates instance of a stopped EvIdle watcher object</li></ul></div>
*/
final class EvIdle extends EvWatcher
{
    /**
     * Constructs an EvIdle instance.
     *
     * @param callable $callback
     * @param mixed $data
     * @param int $priority
     */
    public function __construct(mixed $callback, mixed $data = null, int $priority = 0) {}

/**
*<div id="evidle.createstopped" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvIdle::createStopped</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvIdle::createStopped</span> &mdash; <span class="dc-title">Creates instance of a stopped EvIdle watcher object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evidle.createstopped-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EvIdle::createStopped</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">object</span></div>  <p class="para rdfs-comment">   The same as   <span class="methodname" style="color:#CC7832">{@link EvIdle::__construct()}</span>   , but doesn&#039;t start the watcher automatically.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evidle.createstopped-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">callback</span>    </dt>    <dd>     <span>      See      <a href="https://www.php.net/manual/zh/ev.watcher-callbacks.php" class="link">Watcher callbacks</a>      .     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">data</span>    </dt>    <dd>     <p class="para">      Custom data associated with the watcher.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">priority</span>    </dt>    <dd>     <p class="para">      <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-pri" class="link">Watcher priority</a>     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evidle.createstopped-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns EvIdle object on success.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evidle.createstopped-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvIdle::__construct()} - Constructs the EvIdle watcher object</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvLoop::idle()} - Creates EvIdle watcher object associated with the current event  loop instance</span>   </li>  </ul> </div></div>
     * @return EvIdle*/
    final public static function createStopped(mixed $callback, mixed $data = null, int $priority = 0) {}
}

/**
*<div id="class.evfork" class="reference"> <h1 class="title">The EvFork class</h1>  <div class="partintro"><p class="verinfo">(PECL ev &gt;= 0.2.0)</p>  <div class="section" id="evfork.intro">   <h2 class="title">简介</h2>   <p class="para">    Fork watchers are called when a    <span>fork()</span>    was detected (usually because whoever signalled    <em>libev</em>    about it by calling    <span class="methodname" style="color:#CC7832">{@link EvLoop::fork()}</span>    ). The invocation is done before the event loop blocks next and before    <span class="classname"><a href="https://www.php.net/manual/zh/class.evcheck.php" class="classname">EvCheck</a></span>    watchers are being called, and only in the child after the fork. Note,    that if whoever calling    <span class="methodname" style="color:#CC7832">{@link EvLoop::fork()}</span>    calls it in the wrong process, the fork handlers will be invoked, too.   </p>  </div>  <div class="section" id="evfork.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">EvFork</strong>     </span>     <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://www.php.net/manual/zh/class.evwatcher.php" class="classname">EvWatcher</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-active">$<var class="varname">is_active</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.data">$<var class="varname">data</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.is-pending">$<var class="varname">is_pending</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evwatcher.php#evwatcher.props.priority">$<var class="varname">priority</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evfork.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evfork.createstopped.php" class="methodname" style="color:#CC7832">createStopped</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">object</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::clear}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::feed}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::getLoop}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evloop.php" class="type EvLoop" style="color:#EAB766">EvLoop</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::invoke}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$revents</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::keepalive}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$value</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::setCallback}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::start}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EvWatcher::stop}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EvFork::__construct} — Constructs the EvFork watcher object</li><li>{@link EvFork::createStopped} — Creates a stopped instance of EvFork watcher class</li></ul></div>
*/
final class EvFork extends EvWatcher
{
    /**
     * Constructs an EvFork instance.
     *
     * @param callable $callback
     * @param mixed $data
     * @param int $priority
     */
    public function __construct(EvLoop $loop, mixed $callback, mixed $data = null, int $priority = 0) {}

/**
*<div id="evfork.createstopped" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvFork::createStopped</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvFork::createStopped</span> &mdash; <span class="dc-title">Creates a stopped instance of EvFork watcher class</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evfork.createstopped-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EvFork::createStopped</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">object</span></div>  <p class="para rdfs-comment">   The same as   <span class="methodname" style="color:#CC7832">{@link EvFork::__construct()}</span>   , but doesn&#039;t start the watcher automatically.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evfork.createstopped-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">callback</span>    </dt>    <dd>     <span>      See      <a href="https://www.php.net/manual/zh/ev.watcher-callbacks.php" class="link">Watcher callbacks</a>      .     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">data</span>    </dt>    <dd>     <p class="para">      Custom data associated with the watcher.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">priority</span>    </dt>    <dd>     <p class="para">      <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-pri" class="link">Watcher priority</a>     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evfork.createstopped-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns EvFork(stopped) object on success.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evfork.createstopped-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvFork::__construct()} - Constructs the EvFork watcher object</span>   </li>  </ul> </div></div>
     * @return EvFork*/
    final public static function createStopped(EvLoop $loop, mixed $callback, mixed $data = null, int $priority = 0) {}
}

/**
*<div id="class.evloop" class="reference"> <h1 class="title">The EvLoop class</h1>  <div class="partintro"><p class="verinfo">(PECL ev &gt;= 0.2.0)</p>  <div class="section" id="evloop.intro">   <h2 class="title">简介</h2>   <p class="para">    Represents an event loop that is always distinct from the    <em>default    loop</em>    . Unlike the    <em>default loop</em>    , it cannot handle    <span class="classname"><a href="https://www.php.net/manual/zh/class.evchild.php" class="classname">EvChild</a></span>    watchers.   </p>   <p class="para">    Having threads we have to create a loop per thread, and use the    <em>default loop</em>    in the parent thread.   </p>   <p class="para">    The    <em>default event loop</em>    is initialized automatically by    <em>Ev</em>    . It is accessible via methods of the    <span class="classname"><a href="https://www.php.net/manual/zh/class.ev.php" class="classname">Ev</a></span>    class, or via    <span class="methodname" style="color:#CC7832">{@link EvLoop::defaultLoop()}</span>    method.   </p>  </div>  <div class="section" id="evloop.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">final</span>      <span class="modifier">class</span> <strong class="classname">EvLoop</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evloop.php#evloop.props.data">$<var class="varname">data</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evloop.php#evloop.props.backend">$<var class="varname">backend</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evloop.php#evloop.props.is-default-loop">$<var class="varname">is_default_loop</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evloop.php#evloop.props.iteration">$<var class="varname">iteration</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evloop.php#evloop.props.pending">$<var class="varname">pending</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evloop.php#evloop.props.io-interval">$<var class="varname">io_interval</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evloop.php#evloop.props.timeout-interval">$<var class="varname">timeout_interval</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.evloop.php#evloop.props.depth">$<var class="varname">depth</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$flags</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = NULL</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$io_interval</span>    <span class="initializer"> = 0.0</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$timeout_interval</span>    <span class="initializer"> = 0.0</span>   </span><br>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.backend.php" class="methodname" style="color:#CC7832">backend</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.check.php" class="methodname" style="color:#CC7832">check</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evcheck.php" class="type EvCheck" style="color:#EAB766">EvCheck</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.child.php" class="methodname" style="color:#CC7832">child</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$pid</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$trace</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evchild.php" class="type EvChild" style="color:#EAB766">EvChild</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.defaultloop.php" class="methodname" style="color:#CC7832">defaultLoop</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$flags</span>    <span class="initializer"> = Ev::FLAG_AUTO</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = NULL</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$io_interval</span>    <span class="initializer"> = 0.</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$timeout_interval</span>    <span class="initializer"> = 0.</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evloop.php" class="type EvLoop" style="color:#EAB766">EvLoop</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.embed.php" class="methodname" style="color:#CC7832">embed</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$other</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$callback</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evembed.php" class="type EvEmbed" style="color:#EAB766">EvEmbed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.fork.php" class="methodname" style="color:#CC7832">fork</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evfork.php" class="type EvFork" style="color:#EAB766">EvFork</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.idle.php" class="methodname" style="color:#CC7832">idle</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evidle.php" class="type EvIdle" style="color:#EAB766">EvIdle</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.invokepending.php" class="methodname" style="color:#CC7832">invokePending</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.io.php" class="methodname" style="color:#CC7832">io</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$fd</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$events</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evio.php" class="type EvIo" style="color:#EAB766">EvIo</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.loopfork.php" class="methodname" style="color:#CC7832">loopFork</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.now.php" class="methodname" style="color:#CC7832">now</a></span>(): <span class="type" style="color:#EAB766">float</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.nowupdate.php" class="methodname" style="color:#CC7832">nowUpdate</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.periodic.php" class="methodname" style="color:#CC7832">periodic</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$offset</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$interval</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evperiodic.php" class="type EvPeriodic" style="color:#EAB766">EvPeriodic</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.prepare.php" class="methodname" style="color:#CC7832">prepare</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evprepare.php" class="type EvPrepare" style="color:#EAB766">EvPrepare</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.resume.php" class="methodname" style="color:#CC7832">resume</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.run.php" class="methodname" style="color:#CC7832">run</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$flags</span>    <span class="initializer"> = 0</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.signal.php" class="methodname" style="color:#CC7832">signal</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$signum</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evsignal.php" class="type EvSignal" style="color:#EAB766">EvSignal</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.stat.php" class="methodname" style="color:#CC7832">stat</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$path</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$interval</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evstat.php" class="type EvStat" style="color:#EAB766">EvStat</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.stop.php" class="methodname" style="color:#CC7832">stop</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$how</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.suspend.php" class="methodname" style="color:#CC7832">suspend</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.timer.php" class="methodname" style="color:#CC7832">timer</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$after</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$repeat</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evtimer.php" class="type EvTimer" style="color:#EAB766">EvTimer</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/evloop.verify.php" class="methodname" style="color:#CC7832">verify</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>  <div class="section" id="evloop.props">   <h2 class="title">属性</h2>   <dl>         <dt id="evloop.props.data">      <var class="varname">data</var>     </dt>     <dd>      <p class="para">       Custom data attached to loop      </p>     </dd>             <dt id="evloop.props.backend">      <var class="varname">backend</var>     </dt>     <dd>      <p class="para">       <em>Readonly</em>       . The       <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.watcher-backends" class="link">backend flags</a>       indicating the event backend in use.      </p>     </dd>             <dt id="evloop.props.is-default-loop">      <var class="varname">is_default_loop</var>     </dt>     <dd>      <p class="para">       <em>Readonly</em>       . <strong><span>true</span></strong> if it is the default event loop.      </p>     </dd>             <dt id="evloop.props.iteration">      <var class="varname">iteration</var>     </dt>     <dd>      <p class="para">       The current iteration count of the loop. See       <span class="methodname" style="color:#CC7832">{@link Ev::iteration()}</span>      </p>     </dd>             <dt id="evloop.props.pending">      <var class="varname">pending</var>     </dt>     <dd>      <p class="para">       The number of pending watchers.       <strong><span>0</span></strong>       indicates that there are no watchers pending.      </p>     </dd>             <dt id="evloop.props.io-interval">      <var class="varname">io_interval</var>     </dt>     <dd>      <p class="para">       Higher       <var class="varname">io_interval</var>       allows       <em>libev</em>       to spend more time collecting       <span class="classname"><a href="https://www.php.net/manual/zh/class.evio.php" class="classname">EvIo</a></span>       events, so more events can be handled per iteration, at the cost of       increasing latency. Timeouts (both       <span class="classname"><a href="https://www.php.net/manual/zh/class.evperiodic.php" class="classname">EvPeriodic</a></span>       and       <span class="classname"><a href="https://www.php.net/manual/zh/class.evtimer.php" class="classname">EvTimer</a></span>       ) will not be affected. Setting this to a non-zero value will introduce       an additional       <span>sleep()</span>       call into most loop iterations. The sleep time ensures that       <em>libev</em>       will not poll for       <span class="classname"><a href="https://www.php.net/manual/zh/class.evio.php" class="classname">EvIo</a></span>       events more often than once per this interval, on average. Many       programs can usually benefit by setting the       <var class="varname">io_interval</var>       to a value near       <strong><span>0.1</span></strong>       , which is often enough for interactive servers(not for games). It       usually doesn&#039;t make much sense to set it to a lower value than       <strong><span>0.01</span></strong>       , as this approaches the timing granularity of most systems.      </p>      <p class="para">       See also       <a href="http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#FUNCTIONS_CONTROLLING_EVENT_LOOPS" class="link external">&raquo;&nbsp;FUNCTIONS      CONTROLLING EVENT LOOPS</a>       .      </p>     </dd>             <dt id="evloop.props.timeout-interval">      <var class="varname">timeout_interval</var>     </dt>     <dd>      <p class="para">       Higher       <var class="varname">timeout_interval</var>       allows       <em>libev</em>       to spend more time collecting timeouts, at the expense of increased       latency/jitter/inexactness(the watcher callback will be called later).       <span class="classname"><a href="https://www.php.net/manual/zh/class.evio.php" class="classname">EvIo</a></span>       watchers will not be affected. Setting this to a non-null value will       not introduce any overhead in       <em>libev</em>       . See also       <a href="http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#FUNCTIONS_CONTROLLING_EVENT_LOOPS" class="link external">&raquo;&nbsp;FUNCTIONS      CONTROLLING EVENT LOOPS</a>       .      </p>     </dd>             <dt id="evloop.props.depth">      <var class="varname">depth</var>     </dt>     <dd>      <p class="para">       The recursion depth. See       <span class="methodname" style="color:#CC7832">{@link Ev::depth()}</span>       .      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EvLoop::backend} — Returns an integer describing the backend used by libev</li><li>{@link EvLoop::check} — Creates EvCheck object associated with the current event loop  instance</li><li>{@link EvLoop::child} — Creates EvChild object associated with the current event loop</li><li>{@link EvLoop::__construct} — Constructs the event loop object</li><li>{@link EvLoop::defaultLoop} — Returns or creates the default event loop</li><li>{@link EvLoop::embed} — Creates an instance of EvEmbed watcher associated  with the current EvLoop object</li><li>{@link EvLoop::fork} — Creates EvFork watcher object associated with the current event  loop instance</li><li>{@link EvLoop::idle} — Creates EvIdle watcher object associated with the current event  loop instance</li><li>{@link EvLoop::invokePending} — Invoke all pending watchers while resetting their pending state</li><li>{@link EvLoop::io} — Create EvIo watcher object associated with the current event  loop instance</li><li>{@link EvLoop::loopFork} — Must be called after a fork</li><li>{@link EvLoop::now} — Returns the current &quot;event loop time&quot;</li><li>{@link EvLoop::nowUpdate} — Establishes the current time by querying the kernel, updating the time    returned by EvLoop::now in the progress</li><li>{@link EvLoop::periodic} — Creates EvPeriodic watcher object associated with the current  event loop instance</li><li>{@link EvLoop::prepare} — Creates EvPrepare watcher object associated with the current  event loop instance</li><li>{@link EvLoop::resume} — Resume previously suspended default event loop</li><li>{@link EvLoop::run} — Begin checking for events and calling callbacks for the loop</li><li>{@link EvLoop::signal} — Creates EvSignal watcher object associated with the current  event loop instance</li><li>{@link EvLoop::stat} — Creates EvStat watcher object associated with the current event  loop instance</li><li>{@link EvLoop::stop} — Stops the event loop</li><li>{@link EvLoop::suspend} — Suspend the loop</li><li>{@link EvLoop::timer} — Creates EvTimer watcher object associated with the current event  loop instance</li><li>{@link EvLoop::verify} — Performs internal consistency checks(for debugging)</li></ul></div>
*/
final class EvLoop
{
    /**
     * @var int The Ev::BACKEND_* flag indicating the event backend in use.
     */
    #[Immutable]
    #[ExpectedValues(flags: [Ev::BACKEND_ALL, Ev::BACKEND_DEVPOLL, Ev::BACKEND_EPOLL, Ev::BACKEND_KQUEUE, Ev::BACKEND_MASK, Ev::BACKEND_POLL, Ev::BACKEND_PORT, Ev::BACKEND_SELECT])]
    public $backend;

    /**
     * @var bool TRUE if it is the default event loop.
     */
    #[Immutable]
    public $is_default_loop;

    /**
     * @var mixed Custom data attached to the loop.
     */
    public $data;

    /**
     * @var int The current iteration count of the loop. See Ev::iteration().
     */
    public $iteration;

    /**
     * @var int The number of pending watchers. 0 indicates that there are no watchers pending.
     */
    public $pending;

    /**
     * @var float Higher io_interval allows libev to spend more time collecting EvIo events, so more events can be
     *      handled per iteration, at the cost of increasing latency. Timeouts (both EvPeriodic and EvTimer) will not be
     *      affected. Setting this to a non-zero value will introduce an additional sleep() call into most loop
     *      iterations. The sleep time ensures that libev will not poll for EvIo events more often than once per this
     *      interval, on average. Many programs can usually benefit by setting the io_interval to a value near 0.1,
     *      which is often enough for interactive servers (not for games). It usually doesn't make much sense to set it
     *      to a lower value than 0.01, as this approaches the timing granularity of most systems.
     */
    public $io_interval;

    /**
     * @var float Higher timeout_interval allows libev to spend more time collecting timeouts, at the expense of
     *      increased latency/jitter/inexactness (the watcher callback will be called later). EvIo watchers will not be
     *      affected. Setting this to a non-null value will not introduce any overhead in libev.
     */
    public $timeout_interval;

    /**
     * @var int The recursion depth.
     */
    public $depth;

    /**
     * @param int $flags
     * @param mixed $data
     * @param float $io_interval
     * @param float $timeout_interval
     */
    public function __construct(int $flags = Ev::FLAG_AUTO, mixed $data = null, float $io_interval = 0.0, float $timeout_interval = 0.0) {}

/**
*<div id="evloop.backend" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::backend</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::backend</span> &mdash; <span class="dc-title">Returns an integer describing the backend used by libev</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.backend-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::backend</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   The same as   <span class="methodname" style="color:#CC7832">{@link Ev::backend()}</span>   , but for the loop instance.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.backend-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.backend-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an integer describing the backend used by libev. See   <span class="methodname" style="color:#CC7832">{@link Ev::backend()}</span>   .  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.backend-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::backend()} - Returns an integer describing the backend used by libev</span>   </li>  </ul> </div></div>
     * @return int An integer describing the backend used by libev. See Ev::backend().*/
    public function backend() {}

/**
*<div id="evloop.check" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::check</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::check</span> &mdash; <span class="dc-title">Creates EvCheck object associated with the current event loop  instance</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.check-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::check</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evcheck.php" class="type EvCheck" style="color:#EAB766">EvCheck</a></span></div>  <p class="para rdfs-comment">   Creates EvCheck object associated with the current event loop instance.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.check-parameters">  <h3 class="title">参数</h3>  <span>   All parameters have the same meaning as for   <span class="methodname" style="color:#CC7832">{@link EvCheck::__construct()}</span>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.check-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns EvCheck object on success.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.check-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvCheck::__construct()} - Constructs the EvCheck watcher object</span>   </li>  </ul> </div></div>
     * @return EvCheck*/
    final public function check(callable $callback, $data = null, $priority = 0) {}

/**
*<div id="evloop.child" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::child</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::child</span> &mdash; <span class="dc-title">Creates EvChild object associated with the current event loop</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.child-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::child</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$pid</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$trace</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evchild.php" class="type EvChild" style="color:#EAB766">EvChild</a></span></div>  <p class="para rdfs-comment">   Creates EvChild object associated with the current event loop.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.child-parameters">  <h3 class="title">参数</h3>  <span>   All parameters have the same meaning as for   <span class="methodname" style="color:#CC7832">{@link EvChild::__construct()}</span>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.child-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns EvChild object on success.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.child-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvChild::__construct()} - Constructs the EvChild watcher object</span>   </li>  </ul> </div></div>
     * @return EvChild*/
    final public function child(int $pid, bool $trace, mixed $callback, mixed $data = null, int $priority = 0) {}

/**
*<div id="evloop.embed" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::embed</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::embed</span> &mdash; <span class="dc-title">Creates an instance of EvEmbed watcher associated  with the current EvLoop object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.embed-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::embed</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$other</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$callback</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   <span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evembed.php" class="type EvEmbed" style="color:#EAB766">EvEmbed</a></span></div>  <p class="para rdfs-comment">   Creates an instance of   <span class="classname"><a href="https://www.php.net/manual/zh/class.evembed.php" class="classname">EvEmbed</a></span>   watcher associated with the current   <span class="classname"><a href="https://www.php.net/manual/zh/class.evloop.php" class="classname">EvLoop</a></span>   object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.embed-parameters">  <h3 class="title">参数</h3>  <span>   All parameters have the same meaning as for   <span class="methodname" style="color:#CC7832">{@link EvEmbed::__construct()}</span>   .  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.embed-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns EvEmbed object on success.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.embed-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvEmbed::__construct()} - Constructs the EvEmbed object</span>   </li>  </ul> </div></div>
     * @return EvEmbed*/
    final public function embed(EvLoop $other, callable $callback, $data = null, $priority = 0) {}

/**
*<div id="evloop.fork" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::fork</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::fork</span> &mdash; <span class="dc-title">Creates EvFork watcher object associated with the current event  loop instance</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.fork-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::fork</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evfork.php" class="type EvFork" style="color:#EAB766">EvFork</a></span></div>  <p class="para rdfs-comment">   Creates EvFork watcher object associated with the current event loop   instance  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.fork-parameters">  <h3 class="title">参数</h3>  <span>   All parameters have the same meaning as for   <span class="methodname" style="color:#CC7832">{@link EvFork::__construct()}</span>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.fork-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns EvFork object on success.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.fork-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvFork::__construct()} - Constructs the EvFork watcher object</span>   </li>  </ul> </div></div>
     * @return EvFork*/
    final public function fork(callable $callback, $data = null, $priority = 0) {}

/**
*<div id="evloop.idle" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::idle</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::idle</span> &mdash; <span class="dc-title">Creates EvIdle watcher object associated with the current event  loop instance</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.idle-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::idle</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evidle.php" class="type EvIdle" style="color:#EAB766">EvIdle</a></span></div>  <p class="para rdfs-comment">   Creates EvIdle watcher object associated with the current event loop   instance  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.idle-parameters">  <h3 class="title">参数</h3>  <span>   All the parameters have the same meaning as for   <span class="methodname" style="color:#CC7832">{@link EvIdle::__construct()}</span>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.idle-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns EvIdle object on success.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.idle-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvIdle::__construct()} - Constructs the EvIdle watcher object</span>   </li>  </ul> </div></div>
     * @return EvIdle*/
    final public function idle(mixed $callback, mixed $data = null, int $priority = 0) {}

/**
*<div id="evloop.invokepending" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::invokePending</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::invokePending</span> &mdash; <span class="dc-title">Invoke all pending watchers while resetting their pending state</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.invokepending-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::invokePending</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Invoke all pending watchers while resetting their pending state.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.invokepending-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.invokepending-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function invokePending() {}

/**
*<div id="evloop.io" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::io</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::io</span> &mdash; <span class="dc-title">Create EvIo watcher object associated with the current event  loop instance</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.io-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::io</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$fd</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$events</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evio.php" class="type EvIo" style="color:#EAB766">EvIo</a></span></div>  <p class="para rdfs-comment">   Create EvIo watcher object associated with the current event loop instance.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.io-parameters">  <h3 class="title">参数</h3>  <span>   All parameters have the same meaning as for   <span class="methodname" style="color:#CC7832">{@link EvIo::__construct()}</span>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.io-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns EvIo object on success.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.io-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvIo::__construct()} - Constructs EvIo watcher object</span>   </li>  </ul> </div></div>
     * @return EvIo*/
    final public function io(mixed $fd, int $events, mixed $callback, mixed $data = null, int $priority = 0) {}

/**
*<div id="evloop.loopfork" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::loopFork</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::loopFork</span> &mdash; <span class="dc-title">Must be called after a fork</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.loopfork-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::loopFork</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Must be called after a   <em>fork</em>   in the child, before entering or continuing the event loop. An alternative   is to use   <strong><span>Ev::FLAG_FORKCHECK</span></strong>   which calls this function automatically, at some performance loss (refer to   the   <a href="http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#FUNCTIONS_CONTROLLING_EVENT_LOOPS" class="link external">&raquo;&nbsp;libev  documentation</a>   ).  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.loopfork-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.loopfork-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function loopFork() {}

/**
*<div id="evloop.now" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::now</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::now</span> &mdash; <span class="dc-title">Returns the current &quot;event loop time&quot;</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.now-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::now</strong></span>(): <span class="type" style="color:#EAB766">float</span></div>  <p class="para rdfs-comment">   Returns the current &quot;event loop time&quot;, which is the time the event loop   received events and started processing them. This timestamp does not change   as long as callbacks are being processed, and this is also the base time   used for relative timers. You can treat it as the timestamp of the event   occurring(or more correctly, libev finding out about it).  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.now-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.now-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns time of the event loop in (fractional) seconds.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.now-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::now()} - Returns the time when the last iteration of the default event  loop has started</span>   </li>  </ul> </div></div>
     * @return float Time of the event loop in (fractional) seconds.*/
    public function now() {}

/**
*<div id="evloop.nowupdate" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::nowUpdate</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::nowUpdate</span> &mdash; <span class="dc-title">Establishes the current time by querying the kernel, updating the time    returned by EvLoop::now in the progress</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.nowupdate-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::nowUpdate</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Establishes the current time by querying the kernel, updating the time   returned by   <span class="methodname" style="color:#CC7832">{@link EvLoop::now()}</span>   in the progress. This is a costly operation and is usually done   automatically within   <span class="methodname" style="color:#CC7832">{@link EvLoop::run()}</span>   .  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.nowupdate-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.nowupdate-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.nowupdate-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvLoop::now()} - Returns the current &quot;event loop time&quot;</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::nowUpdate()} - Establishes the current time by querying the kernel, updating the time    returned by Ev::now in the progress</span>   </li>  </ul> </div></div>
*/
    public function nowUpdate() {}

/**
*<div id="evloop.periodic" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::periodic</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::periodic</span> &mdash; <span class="dc-title">Creates EvPeriodic watcher object associated with the current  event loop instance</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.periodic-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::periodic</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$offset</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$interval</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evperiodic.php" class="type EvPeriodic" style="color:#EAB766">EvPeriodic</a></span></div>  <p class="para rdfs-comment">   Creates EvPeriodic watcher object associated with the current event loop   instance  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.periodic-parameters">  <h3 class="title">参数</h3>  <span>   All parameters have the same maening as for   <span class="methodname" style="color:#CC7832">{@link EvPeriodic::__construct()}</span>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.periodic-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns EvPeriodic object on success.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.periodic-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvPeriodic::__construct()} - Constructs EvPeriodic watcher object</span>   </li>  </ul> </div></div>
*/
    final public function periodic(float $offset, float $interval, mixed $reschedule_cb, mixed $callback, mixed $data = null, int $priority = 0) {}

/**
*<div id="evloop.prepare" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::prepare</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::prepare</span> &mdash; <span class="dc-title">Creates EvPrepare watcher object associated with the current  event loop instance</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.prepare-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::prepare</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evprepare.php" class="type EvPrepare" style="color:#EAB766">EvPrepare</a></span></div>  <p class="para rdfs-comment">   Creates EvPrepare watcher object associated with the current event loop   instance  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.prepare-parameters">  <h3 class="title">参数</h3>  <span>   All parameters have the same maening as for   <span class="methodname" style="color:#CC7832"><strong>EvPrepare()</strong></span>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.prepare-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns EvPrepare object on success  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.prepare-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvPrepare::__construct()} - Constructs EvPrepare watcher object</span>   </li>  </ul> </div></div>
*/
    final public function prepare(callable $callback, $data = null, $priority = 0) {}

/**
*<div id="evloop.resume" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::resume</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::resume</span> &mdash; <span class="dc-title">Resume previously suspended default event loop</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.resume-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::resume</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   <span class="methodname" style="color:#CC7832">{@link EvLoop::suspend()}</span>   and   <span class="methodname" style="color:#CC7832"><strong>EvLoop::resume()</strong></span>   methods suspend and resume a loop correspondingly.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.resume-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.resume-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.resume-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvLoop::suspend()} - Suspend the loop</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::resume()} - Resume previously suspended default event loop</span>   </li>  </ul> </div></div>
*/
    public function resume() {}

/**
*<div id="evloop.run" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::run</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::run</span> &mdash; <span class="dc-title">Begin checking for events and calling callbacks for the loop</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.run-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::run</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$flags</span>    <span class="initializer"> = 0</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Begin checking for events and calling callbacks for the current event loop.   Returns when a callback calls   <span class="methodname" style="color:#CC7832">{@link Ev::stop()}</span>   method, or the flags are nonzero(in which case the return value is true) or   when there are no active watchers which reference the loop(   <span class="methodname" style="color:#CC7832">{@link EvWatcher::keepalive()}</span>   is <strong><span>true</span></strong>), in which case the return value will be <strong><span>false</span></strong>. The return   value can generally be interpreted as   <em>if <strong><span>true</span></strong>, there is more work left  to do</em>   .  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.run-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">flags</span>    </dt>    <dd>     <span>      Optional parameter      <span class="parameter" style="color:#3A95FF">flags</span>      can be one of the following:      <table class="doctable table">       <caption><strong>         List for possible values of <span class="parameter" style="color:#3A95FF">flags</span>       </strong></caption>               <thead>         <tr>          <th>           <span class="parameter" style="color:#3A95FF">flags</span>          </th>          <th>Description</th>         </tr>        </thead>        <tbody class="tbody">         <tr>          <td>           <strong><span>0</span></strong>          </td>          <td>The default behavior described above</td>         </tr>         <tr>          <td>           <strong><span>Ev::RUN_ONCE</span></strong>          </td>          <td>Block at most one(wait, but don&#039;t loop)</td>         </tr>         <tr>          <td>           <strong><span>Ev::RUN_NOWAIT</span></strong>          </td>          <td>Don&#039;t block at all(fetch/handle events, but don&#039;t wait)</td>         </tr>        </tbody>             </table>     </span>     <p class="para">      See      <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.run-flags" class="link">the run flag       constants</a>      .     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.run-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.run-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvLoop::stop()} - Stops the event loop</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::run()} - Begin checking for events and calling callbacks for the default  loop</span>   </li>  </ul> </div></div>
*/
    public function run(int $flags = Ev::FLAG_AUTO) {}

/**
*<div id="evloop.signal" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::signal</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::signal</span> &mdash; <span class="dc-title">Creates EvSignal watcher object associated with the current  event loop instance</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.signal-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::signal</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$signum</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evsignal.php" class="type EvSignal" style="color:#EAB766">EvSignal</a></span></div>  <p class="para rdfs-comment">   Creates EvSignal watcher object associated with the current event loop   instance  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.signal-parameters">  <h3 class="title">参数</h3>  <span>   All parameters have the same meaning as for   <span class="methodname" style="color:#CC7832">{@link EvSignal::__construct()}</span>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.signal-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns EvSignal object on success  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.signal-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvSignal::__construct()} - Constructs EvSignal watcher object</span>   </li>  </ul> </div></div>
     * @return EvSignal*/
    final public function signal(int $signum, mixed $callback, mixed $data = null, int $priority = 0) {}

/**
*<div id="evloop.stat" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::stat</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::stat</span> &mdash; <span class="dc-title">Creates EvStat watcher object associated with the current event  loop instance</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.stat-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::stat</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$path</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$interval</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evstat.php" class="type EvStat" style="color:#EAB766">EvStat</a></span></div>  <p class="para rdfs-comment">   Creates EvStat watcher object associated with the current event loop   instance  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.stat-parameters">  <h3 class="title">参数</h3>  <span>   All parameters have the same meaning as for   <span class="methodname" style="color:#CC7832">{@link EvSignal::__construct()}</span>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.stat-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns EvStat object on success  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.stat-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvSignal::__construct()} - Constructs EvSignal watcher object</span>   </li>  </ul> </div></div>
     * @return EvStat*/
    final public function stat(string $path, float $interval, mixed $callback, mixed $data = null, int $priority = 0) {}

/**
*<div id="evloop.stop" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::stop</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::stop</span> &mdash; <span class="dc-title">Stops the event loop</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.stop-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::stop</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$how</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Stops the event loop  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.stop-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">how</span>    </dt>    <dd>     <span>      One of      <em>Ev::BREAK_*</em>      <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.break-flags" class="link">constants</a>      .     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.stop-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.stop-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvLoop::run()} - Begin checking for events and calling callbacks for the loop</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::stop()} - Stops the default event loop</span>   </li>  </ul> </div></div>
*/
    public function stop(int $how = Ev::BREAK_ALL) {}

/**
*<div id="evloop.suspend" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::suspend</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::suspend</span> &mdash; <span class="dc-title">Suspend the loop</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.suspend-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::suspend</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   <span class="methodname" style="color:#CC7832"><strong>EvLoop::suspend()</strong></span>   and   <span class="methodname" style="color:#CC7832">{@link EvLoop::resume()}</span>   methods suspend and resume a loop correspondingly.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.suspend-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.suspend-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.suspend-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvLoop::resume()} - Resume previously suspended default event loop</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::suspend()} - Suspend the default event loop</span>   </li>  </ul> </div></div>
*/
    public function suspend() {}

/**
*<div id="evloop.timer" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::timer</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::timer</span> &mdash; <span class="dc-title">Creates EvTimer watcher object associated with the current event  loop instance</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.timer-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::timer</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$after</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$repeat</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evtimer.php" class="type EvTimer" style="color:#EAB766">EvTimer</a></span></div>  <p class="para rdfs-comment">   Creates EvTimer watcher object associated with the current event loop   instance  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.timer-parameters">  <h3 class="title">参数</h3>  <span>   All parameters have the same meaning as for   <span class="methodname" style="color:#CC7832">{@link EvTimer::__construct()}</span>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.timer-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns EvTimer object on success  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.timer-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvTimer::__construct()} - Constructs an EvTimer watcher object</span>   </li>  </ul> </div></div>
     * @return EvTimer*/
    final public function timer(float $after, float $repeat, mixed $callback, mixed $data = null, int $priority = 0) {}

/**
*<div id="evloop.verify" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::verify</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::verify</span> &mdash; <span class="dc-title">Performs internal consistency checks(for debugging)</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.verify-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::verify</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Performs internal consistency checks(for debugging   <em>libev</em>   ) and abort the program if any data structures were found to be corrupted.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.verify-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.verify-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.verify-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Ev::verify()} - Performs internal consistency checks(for debugging)</span>   </li>  </ul> </div></div>
*/
    public function verify() {}

/**
*<div id="evloop.defaultloop" class="refentry"> <div class="refnamediv">  <h1 class="refname">EvLoop::defaultLoop</h1>  <p class="verinfo">(PECL ev &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">EvLoop::defaultLoop</span> &mdash; <span class="dc-title">Returns or creates the default event loop</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-evloop.defaultloop-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EvLoop::defaultLoop</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$flags</span>    <span class="initializer"> = Ev::FLAG_AUTO</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = NULL</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$io_interval</span>    <span class="initializer"> = 0.</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$timeout_interval</span>    <span class="initializer"> = 0.</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.evloop.php" class="type EvLoop" style="color:#EAB766">EvLoop</a></span></div>  <p class="para rdfs-comment">   If the default event loop is not created,   <span class="methodname" style="color:#CC7832"><strong>EvLoop::defaultLoop()</strong></span>   creates it with the specified parameters. Otherwise, it just returns the   object representing previously created instance ignoring all the   parameters.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-evloop.defaultloop-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">flags</span>    </dt>    <dd>     <span>      One of the      <a href="https://www.php.net/manual/zh/class.ev.php#ev.constants.loop-flags" class="link">event loop flags</a>     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">data</span>    </dt>    <dd>     <p class="para">      Custom data to associate with the loop.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">io_collect_interval</span>    </dt>    <dd>     <p class="para">      See      <a href="https://www.php.net/manual/zh/class.evloop.php#evloop.props.io-interval" class="link">io_interval</a>     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">timeout_collect_interval</span>    </dt>    <dd>     <p class="para">      See      <a href="https://www.php.net/manual/zh/class.evloop.php#evloop.props.timeout-interval" class="link">timeout_interval</a>     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-evloop.defaultloop-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns EvLoop object on success.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-evloop.defaultloop-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EvLoop::__construct()} - Constructs the event loop object</span>   </li>  </ul> </div></div>
*/
    public static function defaultLoop(
        int $flags = Ev::FLAG_AUTO,
        mixed $data = null,
        float $io_interval = 0.0,
        float $timeout_interval = 0.0
    ) {}
}
