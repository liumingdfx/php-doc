<?php

// Start of PDO v.1.0.4dev
use JetBrains\PhpStorm\ArrayShape;
use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\TentativeType;
use JetBrains\PhpStorm\Pure;

/**
*<div id="class.pdoexception" class="reference"> <h1 class="title">PDOException 异常类</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>   <div class="section" id="pdoexception.intro">   <h2 class="title">简介</h2>   <p class="para">     代表一个由 PDO 产生的错误。在自己的代码不应抛出一个 <span class="classname"><strong class="classname">PDOException</strong></span> 异常。关于 PHP 异常的更多信息请参见 <a href="https://www.php.net/manual/zh/language.exceptions.php" class="link">异常</a> 。   </p>  </div>   <div class="section" id="pdoexception.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">PDOException</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">string</span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.pdoexception.php#pdoexception.props.code">$<var class="varname">code</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.pdoexception.php#pdoexception.props.errorinfo">$<var class="varname">errorInfo</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>   </div>   <div class="section" id="pdoexception.props">   <h2 class="title">属性</h2>   <dl>         <dt id="pdoexception.props.errorinfo"><var class="varname">errorInfo</var></dt>     <dd>      <p class="para">       相当于 <span class="methodname" style="color:#CC7832">{@link PDO::errorInfo()}</span> 或 <span class="methodname" style="color:#CC7832">{@link PDOStatement::errorInfo()}</span>      </p>     </dd>             <dt id="pdoexception.props.code"><var class="varname">code</var></dt>     <dd>      <p class="para">       <span>SQLSTATE</span> 错误码。用 <span class="methodname" style="color:#CC7832">{@link Exception::getCode()}</span> 来访问。      </p>     </dd>       </dl>  </div>  </div> </div>
*/
class PDOException extends RuntimeException
{
    #[LanguageLevelTypeAware(['8.1' => 'array|null'], default: '')]
    public $errorInfo;
    protected $code;
}

/**
*<div id="class.pdo" class="reference"> <h1 class="title"> PDO 类</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.1.0)</p>   <div class="section" id="pdo.intro">   <h2 class="title">简介</h2>   <p class="para">   代表 PHP 和数据库服务之间的一个连接   </p>  </div>   <div class="section" id="pdo.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">PDO</strong></strong>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.param-null"><var class="varname">PARAM_NULL</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.param-bool"><var class="varname">PARAM_BOOL</var></a></var><span class="initializer"> = 5</span>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.param-int"><var class="varname">PARAM_INT</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.param-str"><var class="varname">PARAM_STR</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.param-lob"><var class="varname">PARAM_LOB</var></a></var><span class="initializer"> = 3</span>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.param-stmt"><var class="varname">PARAM_STMT</var></a></var><span class="initializer"> = 4</span>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.param-input-output"><var class="varname">PARAM_INPUT_OUTPUT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.param-str-natl"><var class="varname">PARAM_STR_NATL</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.param-str-char"><var class="varname">PARAM_STR_CHAR</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.param-evt-alloc"><var class="varname">PARAM_EVT_ALLOC</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.param-evt-free"><var class="varname">PARAM_EVT_FREE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.param-evt-exec-pre"><var class="varname">PARAM_EVT_EXEC_PRE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.param-evt-exec-post"><var class="varname">PARAM_EVT_EXEC_POST</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.param-evt-fetch-pre"><var class="varname">PARAM_EVT_FETCH_PRE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.param-evt-fetch-post"><var class="varname">PARAM_EVT_FETCH_POST</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.param-evt-normalize"><var class="varname">PARAM_EVT_NORMALIZE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-default"><var class="varname">FETCH_DEFAULT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-lazy"><var class="varname">FETCH_LAZY</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-assoc"><var class="varname">FETCH_ASSOC</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-num"><var class="varname">FETCH_NUM</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-both"><var class="varname">FETCH_BOTH</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-obj"><var class="varname">FETCH_OBJ</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-bound"><var class="varname">FETCH_BOUND</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-column"><var class="varname">FETCH_COLUMN</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-class"><var class="varname">FETCH_CLASS</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-into"><var class="varname">FETCH_INTO</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-func"><var class="varname">FETCH_FUNC</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-group"><var class="varname">FETCH_GROUP</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-unique"><var class="varname">FETCH_UNIQUE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-key-pair"><var class="varname">FETCH_KEY_PAIR</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-classtype"><var class="varname">FETCH_CLASSTYPE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-serialize"><var class="varname">FETCH_SERIALIZE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-props-late"><var class="varname">FETCH_PROPS_LATE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-named"><var class="varname">FETCH_NAMED</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-autocommit"><var class="varname">ATTR_AUTOCOMMIT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-prefetch"><var class="varname">ATTR_PREFETCH</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-timeout"><var class="varname">ATTR_TIMEOUT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-errmode"><var class="varname">ATTR_ERRMODE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-server-version"><var class="varname">ATTR_SERVER_VERSION</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-client-version"><var class="varname">ATTR_CLIENT_VERSION</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-server-info"><var class="varname">ATTR_SERVER_INFO</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-connection-status"><var class="varname">ATTR_CONNECTION_STATUS</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-case"><var class="varname">ATTR_CASE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-cursor-name"><var class="varname">ATTR_CURSOR_NAME</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-cursor"><var class="varname">ATTR_CURSOR</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-oracle-nulls"><var class="varname">ATTR_ORACLE_NULLS</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-persistent"><var class="varname">ATTR_PERSISTENT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-statement-class"><var class="varname">ATTR_STATEMENT_CLASS</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-fetch-table-names"><var class="varname">ATTR_FETCH_TABLE_NAMES</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-fetch-catalog-names"><var class="varname">ATTR_FETCH_CATALOG_NAMES</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-driver-name"><var class="varname">ATTR_DRIVER_NAME</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-stringify-fetches"><var class="varname">ATTR_STRINGIFY_FETCHES</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-max-column-len"><var class="varname">ATTR_MAX_COLUMN_LEN</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-emulate-prepares"><var class="varname">ATTR_EMULATE_PREPARES</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-default-fetch-mode"><var class="varname">ATTR_DEFAULT_FETCH_MODE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.attr-default-str-param"><var class="varname">ATTR_DEFAULT_STR_PARAM</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.errmode-silent"><var class="varname">ERRMODE_SILENT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.errmode-warning"><var class="varname">ERRMODE_WARNING</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.errmode-exception"><var class="varname">ERRMODE_EXCEPTION</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.case-natural"><var class="varname">CASE_NATURAL</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.case-lower"><var class="varname">CASE_LOWER</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.case-upper"><var class="varname">CASE_UPPER</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.null-natural"><var class="varname">NULL_NATURAL</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.null-empty-string"><var class="varname">NULL_EMPTY_STRING</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.null-to-string"><var class="varname">NULL_TO_STRING</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">string</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.err-none"><var class="varname">ERR_NONE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-ori-next"><var class="varname">FETCH_ORI_NEXT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-ori-prior"><var class="varname">FETCH_ORI_PRIOR</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-ori-first"><var class="varname">FETCH_ORI_FIRST</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-ori-last"><var class="varname">FETCH_ORI_LAST</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-ori-abs"><var class="varname">FETCH_ORI_ABS</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.fetch-ori-rel"><var class="varname">FETCH_ORI_REL</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.cursor-fwdonly"><var class="varname">CURSOR_FWDONLY</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/pdo.constants.php#pdo.constants.cursor-scroll"><var class="varname">CURSOR_SCROLL</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdo.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$dsn</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$username</span><span class="initializer"> = <strong><span>null</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$password</span><span class="initializer"> = <strong><span>null</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$options</span><span class="initializer"> = <strong><span>null</span></strong></span></span><br>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdo.begintransaction.php" class="methodname" style="color:#CC7832">beginTransaction</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdo.commit.php" class="methodname" style="color:#CC7832">commit</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdo.errorcode.php" class="methodname" style="color:#CC7832">errorCode</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">string</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdo.errorinfo.php" class="methodname" style="color:#CC7832">errorInfo</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdo.exec.php" class="methodname" style="color:#CC7832">exec</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$statement</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdo.getattribute.php" class="methodname" style="color:#CC7832">getAttribute</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$attribute</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdo.getavailabledrivers.php" class="methodname" style="color:#CC7832">getAvailableDrivers</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdo.intransaction.php" class="methodname" style="color:#CC7832">inTransaction</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdo.lastinsertid.php" class="methodname" style="color:#CC7832">lastInsertId</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$name</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdo.prepare.php" class="methodname" style="color:#CC7832">prepare</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$query</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$options</span><span class="initializer"> = []</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="type PDOStatement" style="color:#EAB766">PDOStatement</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdo.query.php" class="methodname" style="color:#CC7832">query</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$query</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$fetchMode</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="type PDOStatement" style="color:#EAB766">PDOStatement</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdo.query.php" class="methodname" style="color:#CC7832">query</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$query</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$fetchMode</span><span class="initializer"> = PDO::FETCH_COLUMN</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$colno</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="type PDOStatement" style="color:#EAB766">PDOStatement</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdo.query.php" class="methodname" style="color:#CC7832">query</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$query</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$fetchMode</span><span class="initializer"> = PDO::FETCH_CLASS</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$classname</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$constructorArgs</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="type PDOStatement" style="color:#EAB766">PDOStatement</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdo.query.php" class="methodname" style="color:#CC7832">query</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$query</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$fetchMode</span><span class="initializer"> = PDO::FETCH_INTO</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="type PDOStatement" style="color:#EAB766">PDOStatement</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdo.quote.php" class="methodname" style="color:#CC7832">quote</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$type</span><span class="initializer"> = PDO::PARAM_STR</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdo.rollback.php" class="methodname" style="color:#CC7832">rollBack</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdo.setattribute.php" class="methodname" style="color:#CC7832">setAttribute</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$attribute</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div> </div>   <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link PDO::beginTransaction} — 启动一个事务</li><li>{@link PDO::commit} — 提交一个事务</li><li>{@link PDO::__construct} — 创建一个表示数据库连接的 PDO 实例</li><li>{@link PDO::errorCode} — 获取跟数据库句柄上一次操作相关的 SQLSTATE</li><li>{@link PDO::errorInfo} — Fetch extended error information associated with the last operation on the database handle</li><li>{@link PDO::exec} — 执行 SQL 语句，并返回受影响的行数</li><li>{@link PDO::getAttribute} — 取回一个数据库连接的属性</li><li>{@link PDO::getAvailableDrivers} — 返回一个可用驱动的数组</li><li>{@link PDO::inTransaction} — 检查是否在事务内</li><li>{@link PDO::lastInsertId} — 返回最后插入行的ID或序列值</li><li>{@link PDO::prepare} — 预处理要执行的语句，并返回语句对象</li><li>{@link PDO::query} — 预处理并执行没有占位符的 SQL 语句</li><li>{@link PDO::quote} — 为 SQL 查询里的字符串添加引号</li><li>{@link PDO::rollBack} — 回滚事务</li><li>{@link PDO::setAttribute} — 设置属性</li></ul></div>
*/
class PDO
{
    /**
     * Represents the SQL NULL data type.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.param-null
     */
    public const PARAM_NULL = 0;

    /**
     * Represents the SQL INTEGER data type.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.param-int
     */
    public const PARAM_INT = 1;

    /**
     * Represents the SQL CHAR, VARCHAR, or other string data type.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.param-str
     */
    public const PARAM_STR = 2;

    /**
     * Represents the SQL large object data type.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.param-lob
     */
    public const PARAM_LOB = 3;

    /**
     * Represents a recordset type. Not currently supported by any drivers.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.param-stmt
     */
    public const PARAM_STMT = 4;

    /**
     * Represents a boolean data type.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.param-bool
     */
    public const PARAM_BOOL = 5;

    /**
     * Flag to denote a string uses the national character set.
     * @since 7.2
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.param-str-natl
     */
    public const PARAM_STR_NATL = 1073741824;

    /**
     * Flag to denote a string uses the regular character set.
     * @since 7.2
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.param-str-char
     */
    public const PARAM_STR_CHAR = 536870912;

    /**
     * Sets the default string parameter type, this can be one of PDO::PARAM_STR_NATL and PDO::PARAM_STR_CHAR.
     * @since 7.2
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-default-str-param
     */
    public const ATTR_DEFAULT_STR_PARAM = 21;

    /**
     * Specifies that a function created with PDO::sqliteCreateFunction() is deterministic, i.e. it always returns the same result given the same inputs within a single SQL statement.
     * @since 7.1.4
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.sqlite-deterministic
     */
    public const SQLITE_DETERMINISTIC = 2048;

    /**
     * @since 7.3
     */
    public const SQLITE_OPEN_READONLY = 1;

    /**
     * @since 7.3
     */
    public const SQLITE_OPEN_READWRITE = 2;

    /**
     * @since 7.3
     */
    public const SQLITE_OPEN_CREATE = 4;

    /**
     * @since 7.3
     */
    public const SQLITE_ATTR_OPEN_FLAGS = 1000;

    /**
     * Specifies that the parameter is an INOUT parameter for a stored
     * procedure. You must bitwise-OR this value with an explicit
     * PDO::PARAM_* data type.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.param-input-output
     */
    public const PARAM_INPUT_OUTPUT = 2147483648;

    /**
     * Allocation event
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.param-evt-alloc
     */
    public const PARAM_EVT_ALLOC = 0;

    /**
     * Deallocation event
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.param-evt-free
     */
    public const PARAM_EVT_FREE = 1;

    /**
     * Event triggered prior to execution of a prepared statement.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.param-evt-exec-pre
     */
    public const PARAM_EVT_EXEC_PRE = 2;

    /**
     * Event triggered subsequent to execution of a prepared statement.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.param-evt-exec-post
     */
    public const PARAM_EVT_EXEC_POST = 3;

    /**
     * Event triggered prior to fetching a result from a resultset.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.param-evt-fetch-pre
     */
    public const PARAM_EVT_FETCH_PRE = 4;

    /**
     * Event triggered subsequent to fetching a result from a resultset.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.param-evt-fetch-post
     */
    public const PARAM_EVT_FETCH_POST = 5;

    /**
     * Event triggered during bound parameter registration
     * allowing the driver to normalize the parameter name.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.param-evt-normalize
     */
    public const PARAM_EVT_NORMALIZE = 6;

    /**
     * Specifies that the fetch method shall return each row as an object with
     * variable names that correspond to the column names returned in the result
     * set. <b>PDO::FETCH_LAZY</b> creates the object variable names as they are accessed.
     * Not valid inside <b>PDOStatement::fetchAll</b>.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-lazy
     */
    public const FETCH_LAZY = 1;

    /**
     * Specifies that the fetch method shall return each row as an array indexed
     * by column name as returned in the corresponding result set. If the result
     * set contains multiple columns with the same name,
     * <b>PDO::FETCH_ASSOC</b> returns
     * only a single value per column name.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-assoc
     */
    public const FETCH_ASSOC = 2;

    /**
     * Specifies that the fetch method shall return each row as an array indexed
     * by column number as returned in the corresponding result set, starting at
     * column 0.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-num
     */
    public const FETCH_NUM = 3;

    /**
     * Specifies that the fetch method shall return each row as an array indexed
     * by both column name and number as returned in the corresponding result set,
     * starting at column 0.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-both
     */
    public const FETCH_BOTH = 4;

    /**
     * Specifies that the fetch method shall return each row as an object with
     * property names that correspond to the column names returned in the result
     * set.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-obj
     */
    public const FETCH_OBJ = 5;

    /**
     * Specifies that the fetch method shall return TRUE and assign the values of
     * the columns in the result set to the PHP variables to which they were
     * bound with the <b>PDOStatement::bindParam</b> or
     * <b>PDOStatement::bindColumn</b> methods.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-bound
     */
    public const FETCH_BOUND = 6;

    /**
     * Specifies that the fetch method shall return only a single requested
     * column from the next row in the result set.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-column
     */
    public const FETCH_COLUMN = 7;

    /**
     * Specifies that the fetch method shall return a new instance of the
     * requested class, mapping the columns to named properties in the class.
     * The magic
     * <b>__set</b>
     * method is called if the property doesn't exist in the requested class
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-class
     */
    public const FETCH_CLASS = 8;

    /**
     * Specifies that the fetch method shall update an existing instance of the
     * requested class, mapping the columns to named properties in the class.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-into
     */
    public const FETCH_INTO = 9;

    /**
     * Allows completely customize the way data is treated on the fly (only
     * valid inside <b>PDOStatement::fetchAll</b>).
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-func
     */
    public const FETCH_FUNC = 10;

    /**
     * Group return by values. Usually combined with
     * <b>PDO::FETCH_COLUMN</b> or
     * <b>PDO::FETCH_KEY_PAIR</b>.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-group
     */
    public const FETCH_GROUP = 65536;

    /**
     * Fetch only the unique values.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-unique
     */
    public const FETCH_UNIQUE = 196608;

    /**
     * Fetch a two-column result into an array where the first column is a key and the second column
     * is the value.
     * @since 5.2.3
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-key-pair
     */
    public const FETCH_KEY_PAIR = 12;

    /**
     * Determine the class name from the value of first column.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-classtype
     */
    public const FETCH_CLASSTYPE = 262144;

    /**
     * As <b>PDO::FETCH_INTO</b> but object is provided as a serialized string.
     * Available since PHP 5.1.0. Since PHP 5.3.0 the class constructor is never called if this
     * flag is set.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-serialize
     */
    public const FETCH_SERIALIZE = 524288;

    /**
     * Call the constructor before setting properties.
     * @since 5.2.0
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-props-late
     */
    public const FETCH_PROPS_LATE = 1048576;

    /**
     * Specifies that the fetch method shall return each row as an array indexed
     * by column name as returned in the corresponding result set. If the result
     * set contains multiple columns with the same name,
     * <b>PDO::FETCH_NAMED</b> returns
     * an array of values per column name.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-named
     */
    public const FETCH_NAMED = 11;

    /**
     * If this value is <b>FALSE</b>, PDO attempts to disable autocommit so that the
     * connection begins a transaction.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-autocommit
     */
    public const ATTR_AUTOCOMMIT = 0;

    /**
     * Setting the prefetch size allows you to balance speed against memory
     * usage for your application. Not all database/driver combinations support
     * setting of the prefetch size. A larger prefetch size results in
     * increased performance at the cost of higher memory usage.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-prefetch
     */
    public const ATTR_PREFETCH = 1;

    /**
     * Sets the timeout value in seconds for communications with the database.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-timeout
     */
    public const ATTR_TIMEOUT = 2;

    /**
     * @see https://php.net/manual/en/pdo.error-handling.php Errors and error handling
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-errmode
     */
    public const ATTR_ERRMODE = 3;

    /**
     * This is a read only attribute; it will return information about the
     * version of the database server to which PDO is connected.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-
     */
    public const ATTR_SERVER_VERSION = 4;

    /**
     * This is a read only attribute; it will return information about the
     * version of the client libraries that the PDO driver is using.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-client-version
     */
    public const ATTR_CLIENT_VERSION = 5;

    /**
     * This is a read only attribute; it will return some meta information about the
     * database server to which PDO is connected.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-server-info
     */
    public const ATTR_SERVER_INFO = 6;
    public const ATTR_CONNECTION_STATUS = 7;

    /**
     * Force column names to a specific case specified by the PDO::CASE_*
     * constants.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-case
     */
    public const ATTR_CASE = 8;

    /**
     * Get or set the name to use for a cursor. Most useful when using
     * scrollable cursors and positioned updates.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-cursor-name
     */
    public const ATTR_CURSOR_NAME = 9;

    /**
     * Selects the cursor type. PDO currently supports either
     * <b>PDO::CURSOR_FWDONLY</b> and
     * <b>PDO::CURSOR_SCROLL</b>. Stick with
     * <b>PDO::CURSOR_FWDONLY</b> unless you know that you need a
     * scrollable cursor.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-cursor
     */
    public const ATTR_CURSOR = 10;

    /**
     * Convert empty strings to SQL NULL values on data fetches.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-oracle-nulls
     */
    public const ATTR_ORACLE_NULLS = 11;

    /**
     * Request a persistent connection, rather than creating a new connection.
     * @see https://php.net/manual/en/pdo.connections.php Connections and Connection Management
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-persistent
     */
    public const ATTR_PERSISTENT = 12;

    /**
     * Sets the class name of which statements are returned as.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-statement-class
     */
    public const ATTR_STATEMENT_CLASS = 13;

    /**
     * Prepend the containing table name to each column name returned in the
     * result set. The table name and column name are separated by a decimal (.)
     * character. Support of this attribute is at the driver level; it may not
     * be supported by your driver.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-fetch-table-names
     */
    public const ATTR_FETCH_TABLE_NAMES = 14;

    /**
     * Prepend the containing catalog name to each column name returned in the
     * result set. The catalog name and column name are separated by a decimal
     * (.) character. Support of this attribute is at the driver level; it may
     * not be supported by your driver.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-fetch-catalog-names
     */
    public const ATTR_FETCH_CATALOG_NAMES = 15;

    /**
     * Returns the name of the driver.
     * <p>
     * using <b>PDO::ATTR_DRIVER_NAME</b>
     * <code>
     * if ($db->getAttribute(PDO::ATTR_DRIVER_NAME) == 'mysql') {
     * echo "Running on mysql; doing something mysql specific here\n";
     * }
     * </code>
     * </p>
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-driver-name
     */
    public const ATTR_DRIVER_NAME = 16;

    /**
     * Forces all values fetched to be treated as strings.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-stringify-fetches
     */
    public const ATTR_STRINGIFY_FETCHES = 17;

    /**
     * Sets the maximum column name length.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-max-column-len
     */
    public const ATTR_MAX_COLUMN_LEN = 18;

    /**
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-emulate-prepares
     * @since 5.1.3
     */
    public const ATTR_EMULATE_PREPARES = 20;

    /**
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.attr-default-fetch-mode
     * @since 5.2.0
     */
    public const ATTR_DEFAULT_FETCH_MODE = 19;

    /**
     * Do not raise an error or exception if an error occurs. The developer is
     * expected to explicitly check for errors. This is the default mode.
     * @see https://php.net/manual/en/pdo.error-handling.php  Errors and Error Handling
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.errmode-silent
     */
    public const ERRMODE_SILENT = 0;

    /**
     * Issue a PHP <b>E_WARNING</b> message if an error occurs.
     * @see https://php.net/manual/en/pdo.error-handling.php  Errors and Error Handling
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.errmode-warning
     */
    public const ERRMODE_WARNING = 1;

    /**
     * Throw a <b>PDOException</b> if an error occurs.
     * @see https://php.net/manual/en/pdo.error-handling.php  Errors and Error Handling
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.errmode-exception
     */
    public const ERRMODE_EXCEPTION = 2;

    /**
     * Leave column names as returned by the database driver.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.case-natural
     */
    public const CASE_NATURAL = 0;

    /**
     * Force column names to lower case.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.case-lower
     */
    public const CASE_LOWER = 2;

    /**
     * Force column names to upper case.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.case-upper
     */
    public const CASE_UPPER = 1;

    /**
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.null-natural
     */
    public const NULL_NATURAL = 0;

    /**
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.null-empty-string
     */
    public const NULL_EMPTY_STRING = 1;

    /**
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.null-to-string
     */
    public const NULL_TO_STRING = 2;

    /**
     * Corresponds to SQLSTATE '00000', meaning that the SQL statement was
     * successfully issued with no errors or warnings. This constant is for
     * your convenience when checking <b>PDO::errorCode</b> or
     * <b>PDOStatement::errorCode</b> to determine if an error
     * occurred. You will usually know if this is the case by examining the
     * return code from the method that raised the error condition anyway.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.err-none
     */
    public const ERR_NONE = '00000';

    /**
     * Fetch the next row in the result set. Valid only for scrollable cursors.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-ori-next
     */
    public const FETCH_ORI_NEXT = 0;

    /**
     * Fetch the previous row in the result set. Valid only for scrollable
     * cursors.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-ori-prior
     */
    public const FETCH_ORI_PRIOR = 1;

    /**
     * Fetch the first row in the result set. Valid only for scrollable cursors.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-ori-first
     */
    public const FETCH_ORI_FIRST = 2;

    /**
     * Fetch the last row in the result set. Valid only for scrollable cursors.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-ori-last
     */
    public const FETCH_ORI_LAST = 3;

    /**
     * Fetch the requested row by row number from the result set. Valid only
     * for scrollable cursors.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-ori-abs
     */
    public const FETCH_ORI_ABS = 4;

    /**
     * Fetch the requested row by relative position from the current position
     * of the cursor in the result set. Valid only for scrollable cursors.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-ori-rel
     */
    public const FETCH_ORI_REL = 5;

    /**
     * Specifies that the default fetch mode shall be used.
     * @since 8.0.7
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-default
     */
    public const FETCH_DEFAULT = 0;

    /**
     * Create a <b>PDOStatement</b> object with a forward-only cursor. This is the
     * default cursor choice, as it is the fastest and most common data access
     * pattern in PHP.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.cursor-fwdonly
     */
    public const CURSOR_FWDONLY = 0;

    /**
     * Create a <b>PDOStatement</b> object with a scrollable cursor. Pass the
     * PDO::FETCH_ORI_* constants to control the rows fetched from the result set.
     * @link https://php.net/manual/en/pdo.constants.php#pdo.constants.cursor-scroll
     */
    public const CURSOR_SCROLL = 1;

    /**
     * If this attribute is set to <b>TRUE</b> on a
     * <b>PDOStatement</b>, the MySQL driver will use the
     * buffered versions of the MySQL API. If you're writing portable code, you
     * should use <b>PDOStatement::fetchAll</b> instead.
     * <p>
     * Forcing queries to be buffered in mysql
     * <code>
     * if ($db->getAttribute(PDO::ATTR_DRIVER_NAME) == 'mysql') {
     * $stmt = $db->prepare('select * from foo',
     * array(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => true));
     * } else {
     * die("my application only works with mysql; I should use \$stmt->fetchAll() instead");
     * }
     * </code>
     * </p>
     * @link https://php.net/manual/en/ref.pdo-mysql.php#pdo.constants.mysql-attr-use-buffered-query
     */
    public const MYSQL_ATTR_USE_BUFFERED_QUERY = 1000;

    /**
     * <p>
     * Enable LOAD LOCAL INFILE.
     * </p>
     * <p>
     * Note, this constant can only be used in the <i>driver_options</i>
     * array when constructing a new database handle.
     * </p>
     * @link https://php.net/manual/en/ref.pdo-mysql.php#pdo.constants.mysql-attr-local-infile
     */
    public const MYSQL_ATTR_LOCAL_INFILE = 1001;

    /**
     * <p>
     * Command to execute when connecting to the MySQL server. Will
     * automatically be re-executed when reconnecting.
     * </p>
     * <p>
     * Note, this constant can only be used in the <i>driver_options</i>
     * array when constructing a new database handle.
     * </p>
     * @link https://php.net/manual/en/ref.pdo-mysql.php#pdo.constants.mysql-attr-init-command
     */
    public const MYSQL_ATTR_INIT_COMMAND = 1002;

    /**
     * <p>
     * Maximum buffer size. Defaults to 1 MiB. This constant is not supported when
     * compiled against mysqlnd.
     * </p>
     * @link https://php.net/manual/en/ref.pdo-mysql.php#pdo.constants.mysql-attr-max-buffer-size
     */
    public const MYSQL_ATTR_MAX_BUFFER_SIZE = 1005;

    /**
     * <p>
     * Read options from the named option file instead of from
     * my.cnf. This option is not available if
     * mysqlnd is used, because mysqlnd does not read the mysql
     * configuration files.
     * </p>
     * @link https://php.net/manual/en/ref.pdo-mysql.php#pdo.constants.mysql-attr-read-default-file
     */
    public const MYSQL_ATTR_READ_DEFAULT_FILE = 1003;

    /**
     * <p>
     * Read options from the named group from my.cnf or the
     * file specified with <b>MYSQL_READ_DEFAULT_FILE</b>. This option
     * is not available if mysqlnd is used, because mysqlnd does not read the mysql
     * configuration files.
     * </p>
     * @link https://php.net/manual/en/ref.pdo-mysql.php#pdo.constants.mysql-attr-read-default-group
     */
    public const MYSQL_ATTR_READ_DEFAULT_GROUP = 1004;

    /**
     * <p>
     * Enable network communication compression. This is not supported when
     * compiled against mysqlnd.
     * </p>
     * @link https://php.net/manual/en/ref.pdo-mysql.php#pdo.constants.mysql-attr-compress
     */
    public const MYSQL_ATTR_COMPRESS = 1003;

    /**
     * <p>
     * Perform direct queries, don't use prepared statements.
     * </p>
     * @link https://php.net/manual/en/ref.pdo-mysql.php#pdo.constants.mysql-attr-direct-query
     */
    public const MYSQL_ATTR_DIRECT_QUERY = 1004;

    /**
     * <p>
     * Return the number of found (matched) rows, not the
     * number of changed rows.
     * </p>
     * @link https://php.net/manual/en/ref.pdo-mysql.php#pdo.constants.mysql-attr-found-rows
     */
    public const MYSQL_ATTR_FOUND_ROWS = 1005;

    /**
     * <p>
     * Permit spaces after function names. Makes all functions
     * names reserved words.
     * </p>
     * @link https://php.net/manual/en/ref.pdo-mysql.php#pdo.constants.mysql-attr-ignore-space
     */
    public const MYSQL_ATTR_IGNORE_SPACE = 1006;
    public const MYSQL_ATTR_SERVER_PUBLIC_KEY = 1012;

    /**
     * <p>
     * The file path to the SSL key.
     * </p>
     * @since 5.3.7
     * @link https://php.net/manual/en/ref.pdo-mysql.php#pdo.constants.mysql-attr-ssl-key
     */
    public const MYSQL_ATTR_SSL_KEY = 1007;

    /**
     * <p>
     * The file path to the SSL certificate.
     * </p>
     * @since 5.3.7
     * @link https://php.net/manual/en/ref.pdo-mysql.php#pdo.constants.mysql-attr-ssl-cert
     */
    public const MYSQL_ATTR_SSL_CERT = 1008;

    /**
     * <p>
     * The file path to the SSL certificate authority.
     * </p>
     * @since 5.3.7
     * @link https://php.net/manual/en/ref.pdo-mysql.php#pdo.constants.mysql-attr-ssl-ca
     */
    public const MYSQL_ATTR_SSL_CA = 1009;

    /**
     * <p>
     * The file path to the directory that contains the trusted SSL
     * CA certificates, which are stored in PEM format.
     * </p>
     * @since 5.3.7
     * @link https://php.net/manual/en/ref.pdo-mysql.php#pdo.constants.mysql-attr-ssl-capath
     */
    public const MYSQL_ATTR_SSL_CAPATH = 1010;

    /**
     * <p>
     * A list of one or more permissible ciphers to use for SSL encryption,
     * in a format understood by OpenSSL.
     * For example: DHE-RSA-AES256-SHA:AES128-SHA
     * </p>
     * @since 5.3.7
     * @link https://php.net/manual/en/ref.pdo-mysql.php#pdo.constants.mysql-attr-cipher
     */
    public const MYSQL_ATTR_SSL_CIPHER = 1011;

    /**
     * <p>
     * Disables multi query execution in both {@see PDO::prepare()} and {@see PDO::query()} when set to FALSE.
     * </p>
     * <p>
     * Note, this constant can only be used in the driver_options array when constructing a new database handle.
     * </p>
     * @since 5.5.21
     * @link https://php.net/manual/en/ref.pdo-mysql.php#pdo.constants.mysql-attr-multi-statements
     */
    public const MYSQL_ATTR_MULTI_STATEMENTS = 1013;

    /**
     * <p>
     * Disables SSL peer verification when set to FALSE.
     * </p>
     * @since 7.0.18
     * @since 7.1.4
     * @link https://bugs.php.net/bug.php?id=71003
     */
    public const MYSQL_ATTR_SSL_VERIFY_SERVER_CERT = 1014;

    /**
     * @since 8.1
     */
    public const MYSQL_ATTR_LOCAL_INFILE_DIRECTORY = 1015;

    #[Deprecated("Use PDO::ATTR_EMULATE_PREPARES instead")]
    public const PGSQL_ASSOC = 1;

    /**
     * @removed 7.1
     */
    public const PGSQL_ATTR_DISABLE_NATIVE_PREPARED_STATEMENT = 1000;

    /**
     * @since 5.6
     */
    public const PGSQL_ATTR_DISABLE_PREPARES = 1000;
    public const PGSQL_BAD_RESPONSE = 5;
    public const PGSQL_BOTH = 3;
    public const PGSQL_TRANSACTION_IDLE = 0;
    public const PGSQL_TRANSACTION_ACTIVE = 1;
    public const PGSQL_TRANSACTION_INTRANS = 2;
    public const PGSQL_TRANSACTION_INERROR = 3;
    public const PGSQL_TRANSACTION_UNKNOWN = 4;
    public const PGSQL_CONNECT_ASYNC = 4;
    public const PGSQL_CONNECT_FORCE_NEW = 2;
    public const PGSQL_CONNECTION_AUTH_OK = 5;
    public const PGSQL_CONNECTION_AWAITING_RESPONSE = 4;
    public const PGSQL_CONNECTION_BAD = 1;
    public const PGSQL_CONNECTION_OK = 0;
    public const PGSQL_CONNECTION_MADE = 3;
    public const PGSQL_CONNECTION_SETENV = 6;
    public const PGSQL_CONNECTION_SSL_STARTUP = 7;
    public const PGSQL_CONNECTION_STARTED = 2;
    public const PGSQL_COMMAND_OK = 1;
    public const PGSQL_CONV_FORCE_NULL = 4;
    public const PGSQL_CONV_IGNORE_DEFAULT = 2;
    public const PGSQL_CONV_IGNORE_NOT_NULL = 8;
    public const PGSQL_COPY_IN = 4;
    public const PGSQL_COPY_OUT = 3;
    public const PGSQL_DIAG_CONTEXT = 87;
    public const PGSQL_DIAG_INTERNAL_POSITION = 112;
    public const PGSQL_DIAG_INTERNAL_QUERY = 113;
    public const PGSQL_DIAG_MESSAGE_DETAIL = 68;
    public const PGSQL_DIAG_MESSAGE_HINT = 72;
    public const PGSQL_DIAG_MESSAGE_PRIMARY = 77;
    public const PGSQL_DIAG_SEVERITY = 83;
    public const PGSQL_DIAG_SOURCE_FILE = 70;
    public const PGSQL_DIAG_SOURCE_FUNCTION = 82;
    public const PGSQL_DIAG_SOURCE_LINE = 76;
    public const PGSQL_DIAG_SQLSTATE = 67;
    public const PGSQL_DIAG_STATEMENT_POSITION = 80;
    public const PGSQL_DML_ASYNC = 1024;
    public const PGSQL_DML_EXEC = 512;
    public const PGSQL_DML_NO_CONV = 256;
    public const PGSQL_DML_STRING = 2048;
    public const PGSQL_DML_ESCAPE = 4096;
    public const PGSQL_EMPTY_QUERY = 0;
    public const PGSQL_ERRORS_DEFAULT = 1;
    public const PGSQL_ERRORS_TERSE = 0;
    public const PGSQL_ERRORS_VERBOSE = 2;
    public const PGSQL_FATAL_ERROR = 7;
    public const PGSQL_NONFATAL_ERROR = 6;
    public const PGSQL_NOTICE_ALL = 2;
    public const PGSQL_NOTICE_CLEAR = 3;
    public const PGSQL_NOTICE_LAST = 1;
    public const PGSQL_NUM = 2;
    public const PGSQL_POLLING_ACTIVE = 4;
    public const PGSQL_POLLING_FAILED = 0;
    public const PGSQL_POLLING_OK = 3;
    public const PGSQL_POLLING_READING = 1;
    public const PGSQL_POLLING_WRITING = 2;
    public const PGSQL_SEEK_CUR = 1;
    public const PGSQL_SEEK_END = 2;
    public const PGSQL_SEEK_SET = 0;
    public const PGSQL_STATUS_LONG = 1;
    public const PGSQL_STATUS_STRING = 2;
    public const PGSQL_TUPLES_OK = 2;
    public const SQLSRV_TXN_READ_UNCOMMITTED = "READ_UNCOMMITTED";
    public const SQLSRV_TXN_READ_COMMITTED = "READ_COMMITTED";
    public const SQLSRV_TXN_REPEATABLE_READ = "REPEATABLE_READ";
    public const SQLSRV_TXN_SNAPSHOT = "SNAPSHOT";
    public const SQLSRV_TXN_SERIALIZABLE = "SERIALIZABLE";
    public const SQLSRV_ENCODING_BINARY = 2;
    public const SQLSRV_ENCODING_SYSTEM = 3;
    public const SQLSRV_ENCODING_UTF8 = 65001;
    public const SQLSRV_ENCODING_DEFAULT = 1;
    public const SQLSRV_ATTR_ENCODING = 1000;
    public const SQLSRV_ATTR_QUERY_TIMEOUT = 1001;
    public const SQLSRV_ATTR_DIRECT_QUERY = 1002;
    public const SQLSRV_ATTR_CURSOR_SCROLL_TYPE = 1003;
    public const SQLSRV_ATTR_CLIENT_BUFFER_MAX_KB_SIZE = 1004;
    public const SQLSRV_ATTR_FETCHES_NUMERIC_TYPE = 1005;
    public const SQLSRV_ATTR_FETCHES_DATETIME_TYPE = 1006;
    public const SQLSRV_ATTR_FORMAT_DECIMALS = 1007;
    public const SQLSRV_ATTR_DECIMAL_PLACES = 1008;
    public const SQLSRV_ATTR_DATA_CLASSIFICATION = 1009;
    public const SQLSRV_PARAM_OUT_DEFAULT_SIZE = -1;
    public const SQLSRV_CURSOR_KEYSET = 1;
    public const SQLSRV_CURSOR_DYNAMIC = 2;
    public const SQLSRV_CURSOR_STATIC = 3;
    public const SQLSRV_CURSOR_BUFFERED = 42;

    /**
     * @since 7.4
     */
    public const SQLITE_ATTR_READONLY_STATEMENT = 1001;

    /**
     * @since 7.4
     */
    public const SQLITE_ATTR_EXTENDED_RESULT_CODES = 1002;

    /**
     * Provides a way to specify the action on the database session.
     * @since 7.2.16
     * @since 7.3.3
     */
    public const OCI_ATTR_ACTION = 1000;

    /**
     * Provides a way to specify the client info on the database session.
     * @since 7.2.16
     * @since 7.3.3
     */
    public const OCI_ATTR_CLIENT_INFO = 1001;

    /**
     * Provides a way to specify the client identifier on the database session.
     * @since 7.2.16
     * @since 7.3.3
     */
    public const OCI_ATTR_CLIENT_IDENTIFIER = 1002;

    /**
     * Provides a way to specify the module on the database session.
     * @since 7.2.16
     * @since 7.3.3
     */
    public const OCI_ATTR_MODULE = 1003;

    /**
     * The number of milliseconds to wait for individual round trips to the database to complete before timing out.
     * @since 8.0
     */
    public const OCI_ATTR_CALL_TIMEOUT = 1004;

    /**
     * Sets the date format.
     */
    public const FB_ATTR_DATE_FORMAT = 1000;

    /**
     * Sets the time format.
     */
    public const FB_ATTR_TIME_FORMAT = 1001;

    /**
     * Sets the timestamp format.
     */
    public const FB_ATTR_TIMESTAMP_FORMAT = 1002;

    /**
     * (PHP 5 &gt;= 5.1.0, PHP 7, PECL pdo &gt;= 0.1.0)<br/>
     * Creates a PDO instance representing a connection to a database
     * @link https://php.net/manual/en/pdo.construct.php
     * @param string $dsn
     * @param string $username [optional]
     * @param string $password [optional]
     * @param array $options [optional]
     * @throws PDOException if the attempt to connect to the requested database fails.
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $dsn,
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $username = null,
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $password = null,
        #[LanguageLevelTypeAware(['8.0' => 'array|null'], default: '')] $options = null
    ) {}

/**
*<div id="pdo.prepare" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::prepare</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PHP 8,PECL pdo &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">PDO::prepare</span> &mdash; <span class="dc-title">    预处理要执行的语句，并返回语句对象  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.prepare-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::prepare</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$query</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$options</span><span class="initializer"> = []</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="type PDOStatement" style="color:#EAB766">PDOStatement</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   为 <span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()}</span> 方法预处理待执行的 SQL 语句。   语句模板可以包含零个或多个参数占位标记，格式是命名（:name）或问号（?）的形式，当它执行时将用真实数据取代。      在同一个语句模板里，命名形式和问号形式不能同时使用；只能选择其中一种参数形式。   请用参数形式绑定用户输入的数据，不要直接字符串拼接到查询里。  </p>  <p class="para">   调用 <span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()}</span> 时，每一个值的参数占位标记，名称必须唯一。   除非启用模拟（emulation）模式，同一个语句里无法使用重名的参数。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">     参数占位符仅能字面上展示完整的数据。不能是字面的一部分，不能是关键词，不能是标识符，不能是其他任意的范围。     举例说明：不能把多个值绑到单个参数里，然后在 SQL 语句里用 IN() 查询。   </p>  </p></blockquote>  <p class="para">    如果用不同参数，通过 <span class="methodname" style="color:#CC7832"><strong>PDO::prepare()</strong></span> 和 <span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()}</span>   多次调用同一个 SQL 语句，将提升应用的性能 —— 驱动可以让客户端/服务器缓存查询和元信息。   同时，调用 <span class="methodname" style="color:#CC7832"><strong>PDO::prepare()</strong></span> 和   <span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()}</span> 还能阻止 SQL 注入攻击，不需要给参数手动加引号与转义。  </p>  <p class="para">    如果内置驱动不支持参数，PDO 将模拟出参数的功能；如果驱动仅仅支持其中一种风格（命名参数和问号参数两种），也会自动重写到另外一种风格。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    The parser used for emulated prepared statements and for    rewriting named or question mark style parameters supports the non standard    backslash escapes for single- and double quotes. That means that terminating    quotes immediately preceeded by a backslash are not recognized as such, which    may result in wrong detection of parameters causing the prepared statement to    fail when it is executed. A work-around is to not use emulated prepares for    such SQL queries, and to avoid rewriting of parameters by using a parameter style    which is natively supported by the driver.   </span>  </p></blockquote>  <p class="para">    自 PHP 7.4.0 起，可以通过两个问号来转义问号。这意味着 <span>??</span> 在发送查询到数据库时会转换成 <span>?</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.prepare-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">query</span></dt>     <dd>      <p class="para">        必须是对目标数据库服务器有效的 SQL 语句模板。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">options</span></dt>     <dd>      <p class="para">        数组包含一个或多个 key=&gt;value 键值对，为返回的 PDOStatement 对象设置属性。       常见用法是：设置 <span>PDO::ATTR_CURSOR</span> 为 <span>PDO::CURSOR_SCROLL</span>，将得到可滚动的光标。       某些驱动有驱动级的选项，在 prepare 时就设置。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.prepare-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果数据库服务器已经成功预处理语句，<span class="methodname" style="color:#CC7832"><strong>PDO::prepare()</strong></span> 返回 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="classname">PDOStatement</a></span> 对象。   如果数据库服务器无法预处理语句，<span class="methodname" style="color:#CC7832"><strong>PDO::prepare()</strong></span> 返回 <strong><span>false</span></strong> 或抛出   <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span> (取决于 <a href="https://www.php.net/manual/zh/pdo.error-handling.php" class="link">错误处理</a>)。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    模拟模式下的预处理语句不会和数据库服务器交互，所以 <span class="methodname" style="color:#CC7832"><strong>PDO::prepare()</strong></span> 不会检查语句。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdo.prepare-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_WARNING</span></strong>，则发出级别为 <strong><span>E_WARNING</span></strong> 的错误。</p><p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_EXCEPTION</span></strong>，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdo.prepare-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3146"><p><strong>示例 #1 命名参数形式的 SQL 语句模板</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 传入数组的值，并执行已预处理的语句 <br /></span><span style="color: #9876AA">$sql </span><span style="color: #007700">= </span><span style="color: #DD0000">'SELECT name, colour, calories<br />    FROM fruit<br />    WHERE calories &lt; :calories AND colour = :colour'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #9876AA">$sql</span><span style="color: #007700">, [</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">ATTR_CURSOR </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">CURSOR_FWDONLY</span><span style="color: #007700">]);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">([</span><span style="color: #DD0000">'calories' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">150</span><span style="color: #007700">, </span><span style="color: #DD0000">'colour' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'red'</span><span style="color: #007700">]);<br /></span><span style="color: #9876AA">$red </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetchAll</span><span style="color: #007700">();<br /></span><span style="color: #FF8000">// Array keys can be prefixed with colons ":" too (optional) <br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">([</span><span style="color: #DD0000">':calories' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">175</span><span style="color: #007700">, </span><span style="color: #DD0000">':colour' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'yellow'</span><span style="color: #007700">]);<br /></span><span style="color: #9876AA">$yellow </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetchAll</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>   <div class="example" id="example-3149">    <p><strong>示例 #2 问号形式的 SQL 语句模板</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 传入数组的值，并执行已预处理的语句 <br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT name, colour, calories<br />    FROM fruit<br />    WHERE calories &lt; ? AND colour = ?'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">([</span><span style="color: #9876AA">150</span><span style="color: #007700">, </span><span style="color: #DD0000">'red'</span><span style="color: #007700">]);<br /></span><span style="color: #9876AA">$red </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetchAll</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">([</span><span style="color: #9876AA">175</span><span style="color: #007700">, </span><span style="color: #DD0000">'yellow'</span><span style="color: #007700">]);<br /></span><span style="color: #9876AA">$yellow </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetchAll</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>   <div class="example" id="example-3152">    <p><strong>示例 #3 问号转义的 SQL 语句模板</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// note: this is only valid on PostgreSQL databases <br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT * FROM issues WHERE tag::jsonb ?? ?'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">([</span><span style="color: #DD0000">'feature'</span><span style="color: #007700">]);<br /></span><span style="color: #9876AA">$featureIssues </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetchAll</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">([</span><span style="color: #DD0000">'performance'</span><span style="color: #007700">]);<br /></span><span style="color: #9876AA">$performanceIssues </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetchAll</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdo.prepare-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::exec()} - 执行 SQL 语句，并返回受影响的行数</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::query()} - 预处理并执行没有占位符的 SQL 语句</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()} - 执行预处理语句</span></li>   </ul>  </span> </div></div>
     * @return PDOStatement|false If the database server successfully prepares the statement,*/
    public function prepare(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $query,
        #[LanguageLevelTypeAware(['8.0' => 'array'], default: '')] $options = []
    ): PDOStatement|false {}

/**
*<div id="pdo.begintransaction" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::beginTransaction</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">PDO::beginTransaction</span> &mdash; <span class="dc-title">   启动一个事务  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.begintransaction-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::beginTransaction</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   关闭自动提交模式。自动提交模式被关闭的同时，通过 PDO 对象实例对数据库做出的更改直到调用   <span class="methodname" style="color:#CC7832">{@link PDO::commit()}</span> 结束事务才被提交。调用 <span class="methodname" style="color:#CC7832">{@link PDO::rollBack()}</span>   将回滚对数据库做出的更改并将数据库连接返回到自动提交模式。  </p>  <p class="para">   包括 MySQL 在内的一些数据库，当发出一条类似 DROP TABLE 或 CREATE TABLE 这样的 DDL   语句时，会自动进行一个隐式地事务提交。隐式地提交将阻止你在此事务范围内回滚任何其他更改。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.begintransaction-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.begintransaction-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdo.begintransaction-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果事务已启动或者驱动不支持事务，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara"><strong><span>PDO::ATTR_ERRMODE</span></strong> 属性不是 <strong><span>PDO::ERRMODE_EXCEPTION</span></strong> 时会抛出一个异常。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdo.begintransaction-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3113"><p><strong>示例 #1 回滚一个事务</strong></p>    <div class="example-contents"><p>     下面例子在回滚此更改前开始一个事务并发出两条修改数据库的语句。但在 MySQL 中，DROP TABLE 语句自动提交事务，使得在此事务中的任何更改都不会被回滚。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 开始一个事务，关闭自动提交 <br /></span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">beginTransaction</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">//  更改数据库架构及数据 <br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exec</span><span style="color: #007700">(</span><span style="color: #DD0000">"DROP TABLE fruit"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exec</span><span style="color: #007700">(</span><span style="color: #DD0000">"UPDATE dessert<br />    SET name = 'hamburger'"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//  识别出错误并回滚更改 <br /></span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rollBack</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 数据库连接现在返回到自动提交模式 <br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdo.begintransaction-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::commit()} - 提交一个事务</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::rollBack()} - 回滚事务</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/pdo.transactions.php" class="link">事务与自动提交</a></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function beginTransaction(): bool {}

/**
*<div id="pdo.commit" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::commit</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">PDO::commit</span> &mdash; <span class="dc-title">   提交一个事务  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.commit-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::commit</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">  提交一个事务，数据库连接返回到自动提交模式直到下次调用 <span class="methodname" style="color:#CC7832">{@link PDO::beginTransaction()}</span> 开始一个新的事务为止。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.commit-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.commit-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdo.commit-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果没有活动中的事务，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara"><strong><span>PDO::ATTR_ERRMODE</span></strong> 属性不是 <strong><span>PDO::ERRMODE_EXCEPTION</span></strong> 时会抛出一个异常。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdo.commit-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3116">    <p><strong>示例 #1 提交一个基础事务</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 开始一个事务，关闭自动提交 <br /></span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">beginTransaction</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 在全有或全无的基础上插入多行记录（要么全部插入，要么全部不插入） <br /></span><span style="color: #9876AA">$sql </span><span style="color: #007700">= </span><span style="color: #DD0000">'INSERT INTO fruit<br />    (name, colour, calories)<br />    VALUES (?, ?, ?)'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #9876AA">$sql</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$fruits </span><span style="color: #007700">as </span><span style="color: #9876AA">$fruit</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">(array(<br />        </span><span style="color: #9876AA">$fruit</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">name</span><span style="color: #007700">,<br />        </span><span style="color: #9876AA">$fruit</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">colour</span><span style="color: #007700">,<br />        </span><span style="color: #9876AA">$fruit</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">calories</span><span style="color: #007700">,<br />    ));<br />}<br /><br /></span><span style="color: #FF8000">// 提交更改 <br /></span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">commit</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 现在数据库连接返回到自动提交模式 <br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="example-3119">    <p><strong>示例 #2 提交一个DDL事务</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//  开始一个事务，关闭自动提交 <br /></span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">beginTransaction</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// Change the database schema <br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exec</span><span style="color: #007700">(</span><span style="color: #DD0000">"DROP TABLE fruit"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 更改数据库架构 <br /></span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">commit</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 现在数据库连接返回到自动提交模式 <br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <span class="simpara">     并不是所有数据库都允许使用DDL语句进行事务操作：有些会产生错误，而其他一些（包括MySQL）会在遇到第一个DDL语句后就自动提交事务。    </span>   </p></blockquote>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdo.commit-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::beginTransaction()} - 启动一个事务</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::rollBack()} - 回滚事务</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/pdo.transactions.php" class="link">事务和自动提交</a></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function commit(): bool {}

/**
*<div id="pdo.rollback" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::rollBack</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">PDO::rollBack</span> &mdash; <span class="dc-title">   回滚事务  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.rollback-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::rollBack</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   回滚由 <span class="methodname" style="color:#CC7832">{@link PDO::beginTransaction()}</span> 发起的当前事务。如果没有事务激活，将抛出一个 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span> 异常。  </p>  <p class="para">   如果数据库被设置成自动提交模式，此函数（方法）在回滚事务之后将恢复自动提交模式。  </p>  <p class="para">   包括 MySQL 在内的一些数据库， 当在一个事务内有类似删除或创建数据表等 DLL 语句时，会自动导致一个隐式地提交。隐式地提交将无法回滚此事务范围内的任何更改。    </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.rollback-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.rollback-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdo.rollback-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果没有活动的事务，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara"><strong><span>PDO::ATTR_ERRMODE</span></strong> 属性不是 <strong><span>PDO::ERRMODE_EXCEPTION</span></strong> 时会抛出一个异常。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdo.rollback-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3167"><p><strong>示例 #1 回滚一个事务</strong></p>    <div class="example-contents"><p>     下面例子在回滚更改之前开始一个事务并发出两条修改数据库的语句。但在 MySQL 中，DROP TABLE 语句自动提交事务，因此在此事务内的任何更改都不会被回滚。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 开始一个事务，关闭自动提交 <br /></span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">beginTransaction</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 更改数据库架构和数据  <br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exec</span><span style="color: #007700">(</span><span style="color: #DD0000">"DROP TABLE fruit"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exec</span><span style="color: #007700">(</span><span style="color: #DD0000">"UPDATE dessert<br />    SET name = 'hamburger'"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//  识别错误且回滚更改  <br /></span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rollBack</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">//  此时数据库连接恢复到自动提交模式  <br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdo.rollback-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::beginTransaction()} - 启动一个事务</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::commit()} - 提交一个事务</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/pdo.transactions.php" class="link">事务和自动提交</a></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function rollBack(): bool {}

/**
*<div id="pdo.intransaction" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::inTransaction</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.3, Bundled pdo_pgsql, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">PDO::inTransaction</span> &mdash; <span class="dc-title">   检查是否在事务内  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.intransaction-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::inTransaction</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查驱动内的事务当前是否处于激活。此方法仅对支持事务的数据库驱动起作用。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.intransaction-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.intransaction-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果当前事务处于激活，则返回 <strong><span>true</span></strong> ，否则返回 <strong><span>false</span></strong> 。  </p> </div></div>
     * @return bool <b>TRUE</b> if a transaction is currently active, and <b>FALSE</b> if not.*/
    public function inTransaction(): bool {}

/**
*<div id="pdo.setattribute" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::setAttribute</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">PDO::setAttribute</span> &mdash; <span class="dc-title">   设置属性  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.setattribute-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::setAttribute</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$attribute</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   设置数据库句柄属性。下面列出了一些可用的通用属性；有些驱动可能使用另外的特定属性。   请注意，特定的驱动程序属性<em>不得</em>用于其他驱动程序。   <dl>         <dt><strong><span>PDO::ATTR_CASE</span></strong></dt>     <dd>      <p class="para">       强制列名为指定的大小写。可以采用以下某个值：      </p>      <dl>               <dt><strong><span>PDO::CASE_LOWER</span></strong></dt>        <dd>         <span class="simpara">          强制列名小写。         </span>        </dd>                      <dt><strong><span>PDO::CASE_NATURAL</span></strong></dt>        <dd>         <span class="simpara">          保留数据库驱动返回的列名。         </span>        </dd>                      <dt><strong><span>PDO::CASE_UPPER</span></strong></dt>        <dd>         <span class="simpara">          强制列名大写。         </span>        </dd>             </dl>     </dd>             <dt><strong><span>PDO::ATTR_ERRMODE</span></strong></dt>     <dd>      <p class="para">       PDO 的报错方式。可以采用以下某个值：      </p>      <dl>               <dt><strong><span>PDO::ERRMODE_SILENT</span></strong></dt>        <dd>         <span class="simpara">          仅设置错误代码。         </span>        </dd>                      <dt><strong><span>PDO::ERRMODE_WARNING</span></strong></dt>        <dd>         <span class="simpara">          引发 <strong><span>E_WARNING</span></strong> 警告。         </span>        </dd>                      <dt><strong><span>PDO::ERRMODE_EXCEPTION</span></strong></dt>        <dd>         <span class="simpara">          抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。         </span>        </dd>             </dl>     </dd>             <dt><strong><span>PDO::ATTR_ORACLE_NULLS</span></strong></dt>     <dd>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <span class="simpara">        此属性适用于所有驱动程序，而不仅仅是 Oracle。       </span>      </p></blockquote>      <p class="para">       确定是否以及如何转换 <strong><span>null</span></strong> 和空字符串。可以采用以下值之一：      </p>      <dl>               <dt><strong><span>PDO::NULL_NATURAL</span></strong></dt>        <dd>         <span class="simpara">          不发生转换。         </span>        </dd>                      <dt><strong><span>PDO::NULL_EMPTY_STRING</span></strong></dt>        <dd>         <span class="simpara">          空字符串转换为 <strong><span>null</span></strong>。         </span>        </dd>                      <dt><strong><span>PDO::NULL_TO_STRING</span></strong></dt>        <dd>         <span class="simpara">          <strong><span>null</span></strong> 被转换为空字符串。         </span>        </dd>             </dl>     </dd>             <dt><strong><span>PDO::ATTR_STRINGIFY_FETCHES</span></strong></dt>     <dd>      <p class="para">       获取时是否将数值转换为字符串。值采用 <span class="type" style="color:#EAB766">bool</span> 类型：<strong><span>true</span></strong> 表示启用，<strong><span>false</span></strong> 表示禁用。      </p>     </dd>             <dt><strong><span>PDO::ATTR_STATEMENT_CLASS</span></strong></dt>     <dd>      <p class="para">       设置从 PDOStatement 派生的用户提供的语句类。              需要 <span>array(string classname, array(mixed constructor_args))</span>。      </p>      <div class="caution"><strong class="caution">警告</strong>       <p class="simpara">        不能用于持久 PDO 实例。       </p>      </div>     </dd>             <dt><strong><span>PDO::ATTR_TIMEOUT</span></strong></dt>     <dd>      <p class="para">       指定超时的秒数。需要 <span class="type" style="color:#EAB766">int</span> 类型的值。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        并非所有驱动都支持此选项，这意味着驱动和驱动之间可能会有差异。比如，SQLite 等待的时间达到此值后就放弃获取可写锁，但其他驱动可能会将此值解释为一个连接或读取超时的间隔。        </p>      </p></blockquote>     </dd>             <dt><strong><span>PDO::ATTR_AUTOCOMMIT</span></strong></dt>     <dd>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <span class="simpara">        仅适用于 OCI、Firebird 和 MySQL 驱动程序。       </span>      </p></blockquote>      <p class="para">       是否自动提交每个单独的语句。采用 <span class="type" style="color:#EAB766">bool</span> 类型的值：<strong><span>true</span></strong> 表示启用，<strong><span>false</span></strong> 表示禁用。默认为 <strong><span>true</span></strong>。      </p>     </dd>             <dt><strong><span>PDO::ATTR_EMULATE_PREPARES</span></strong></dt>     <dd>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <span class="simpara">        仅适用于 OCI、Firebird 和 MySQL 驱动程序。       </span>      </p></blockquote>      <p class="para">       是否启用或禁用预处理语句的模拟。有些驱动天然不支持或有限度地支持预处理语句。如果设置为 <strong><span>true</span></strong>，PDO       始终模拟预处理语句，否则 PDO 将会尝试使用本地预处理语句。如果驱动不能成功预处理当前查询，PDO 将始终回退到模拟预处理语句上。      </p>     </dd>             <dt><strong><span>PDO::MYSQL_ATTR_USE_BUFFERED_QUERY</span></strong></dt>     <dd>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <span class="simpara">        仅适用于 MySQL 驱动程序。       </span>      </p></blockquote>      <p class="para">       是否使用缓冲查询。采用 <span class="type" style="color:#EAB766">bool</span> 类型的值：<strong><span>true</span></strong> 表示启用，<strong><span>false</span></strong> 表示禁用。默认情况下，默认为 <strong><span>true</span></strong>。      </p>     </dd>             <dt><strong><span>PDO::ATTR_DEFAULT_FETCH_MODE</span></strong></dt>     <dd>      <p class="para">       设置默认获取模式。关于模式的说明以及如何使用可以在 <span class="methodname" style="color:#CC7832">{@link PDOStatement::fetch()}</span> 文档找到。      </p>     </dd>       </dl>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.setattribute-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">attribute</span></dt>     <dd>      <p class="para">       要修改的属性。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       设置 <span class="parameter" style="color:#3A95FF">attribute</span> 的值，属性的不同导致需要的类型也会不同。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.setattribute-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdo.setattribute-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PDO::getAttribute()} - 取回一个数据库连接的属性</span></li>    <li class="member"><span class="function">{@link PDOStatement::getAttribute()} - 检索语句属性</span></li>    <li class="member"><span class="function">{@link PDOStatement::setAttribute()} - 设置一个语句属性</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function setAttribute(
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $attribute,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value
    ): bool {}

/**
*<div id="pdo.exec" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::exec</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">PDO::exec</span> &mdash; <span class="dc-title">   执行 SQL 语句，并返回受影响的行数  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.exec-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::exec</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$statement</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   <span class="methodname" style="color:#CC7832"><strong>PDO::exec()</strong></span> 在单独的函数调用中执行 SQL 语句，返回受此语句影响的行数。  </p>  <p class="para">   <span class="methodname" style="color:#CC7832"><strong>PDO::exec()</strong></span> 不会从 SELECT 语句中返回结果。对于在程序中只需要发出一次的 SELECT 语句，可以考虑使用   <span class="methodname" style="color:#CC7832">{@link PDO::query()}</span>。对于需要发出多次的语句，可用 <span class="methodname" style="color:#CC7832">{@link PDO::prepare()}</span> 来预处理   PDOStatement 对象并用 <span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()}</span> 发出语句。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.exec-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">statement</span></dt>      <dd>       <p class="para">        要被预处理和执行的 SQL 语句。       </p>       <p class="para">        查询中的数据应<a href="https://www.php.net/manual/zh/pdo.quote.php" class="link">正确转义</a>。       </p>      </dd>        </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.exec-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="methodname" style="color:#CC7832"><strong>PDO::exec()</strong></span> 返回 SQL 语句修改或删除影响的行数。如果没有受影响的行，则 <span class="methodname" style="color:#CC7832"><strong>PDO::exec()</strong></span> 返回 <span>0</span>。  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数可能返回布尔值<strong><span>false</span></strong>，但也可能返回等同于 <strong><span>false</span></strong> 的非布尔值。请阅读 <a href="https://www.php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">===运算符</a>来测试此函数的返回值。</p></div>  <p class="para">   下列示例错误依赖 <span class="methodname" style="color:#CC7832"><strong>PDO::exec()</strong></span> 的返回值，其中受影响行数为 0 的语句会导致调用 <span class="methodname" style="color:#CC7832">{@link die()}</span>：   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exec</span><span style="color: #007700">() or die(</span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">errorInfo</span><span style="color: #007700">(), </span><span style="color: #9876AA">true</span><span style="color: #007700">)); </span><span style="color: #FF8000">// 错误<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdo.exec-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_WARNING</span></strong>，则发出级别为 <strong><span>E_WARNING</span></strong> 的错误。</p><p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_EXCEPTION</span></strong>，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdo.exec-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3137">    <p><strong>示例 #1 发出 DELETE 语句</strong></p>    <div class="example-contents"><p>     计算不带 WHERE 子句的 DELETE 语句删除的行数。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$dbh </span><span style="color: #007700">= new </span><span style="color: #9876AA">PDO</span><span style="color: #007700">(</span><span style="color: #DD0000">'odbc:sample'</span><span style="color: #007700">, </span><span style="color: #DD0000">'db2inst1'</span><span style="color: #007700">, </span><span style="color: #DD0000">'ibmdb2'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//  删除 FRUIT 数据表中满足条件的所有行 <br /></span><span style="color: #9876AA">$count </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exec</span><span style="color: #007700">(</span><span style="color: #DD0000">"DELETE FROM fruit"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 返回被删除的行数 <br /></span><span style="color: #007700">print </span><span style="color: #DD0000">"Deleted </span><span style="color: #9876AA">$count</span><span style="color: #DD0000"> rows.\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Deleted 1 rows.<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdo.exec-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::prepare()} - 预处理要执行的语句，并返回语句对象</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::query()} - 预处理并执行没有占位符的 SQL 语句</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()} - 执行预处理语句</span></li>   </ul>  </span> </div></div>
     * @return int|false <b>PDO::exec</b> returns the number of rows that were modified*/
    public function exec(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $statement): int|false {}

/**
*<div id="pdo.query" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::query</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">PDO::query</span> &mdash; <span class="dc-title">    预处理并执行没有占位符的 SQL 语句  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.query-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::query</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$query</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$fetchMode</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="type PDOStatement" style="color:#EAB766">PDOStatement</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::query</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$query</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$fetchMode</span><span class="initializer"> = PDO::FETCH_COLUMN</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$colno</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="type PDOStatement" style="color:#EAB766">PDOStatement</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::query</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$query</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$fetchMode</span><span class="initializer"> = PDO::FETCH_CLASS</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$classname</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$constructorArgs</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="type PDOStatement" style="color:#EAB766">PDOStatement</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::query</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$query</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$fetchMode</span><span class="initializer"> = PDO::FETCH_INTO</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="type PDOStatement" style="color:#EAB766">PDOStatement</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   <span class="methodname" style="color:#CC7832"><strong>PDO::query()</strong></span> 在单次函数调用内预处理并执行 SQL 语句，以 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="classname">PDOStatement</a></span> 对象形式返回结果集（如果有数据的话）。     </p>  <p class="para">   如果反复调用同一个查询，用 <span class="methodname" style="color:#CC7832">{@link PDO::prepare()}</span> 准备 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="classname">PDOStatement</a></span> 对象，并用 <span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()}</span> 执行语句，将具有更好的性能。  </p>  <p class="para">   如果没有完整获取结果集内的数据，就调用下一个 <span class="methodname" style="color:#CC7832"><strong>PDO::query()</strong></span>，将可能调用失败。应当在执行下一个 <span class="methodname" style="color:#CC7832"><strong>PDO::query()</strong></span>   前，先用 <span class="methodname" style="color:#CC7832">{@link PDOStatement::closeCursor()}</span> 释放数据库 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="classname">PDOStatement</a></span> 关联的资源。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    如果 <span class="parameter" style="color:#3A95FF">query</span> 包含占位符，则必须使用 <span class="methodname" style="color:#CC7832">{@link PDO::prepare()}</span> 和 <span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()}</span>    方法分别预处理和执行语句。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.query-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">query</span></dt>      <dd>       <p class="para">         预处理和执行的 SQL 语句。       </p>       <p class="para">        如果 SQL 包含占位符，则必须使用 <span class="methodname" style="color:#CC7832">{@link PDO::prepare()}</span> 和        <span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()}</span>。或者在调用 <span class="methodname" style="color:#CC7832"><strong>PDO::query()</strong></span>        之前手动预处理 SQL，如果驱动程序支持，使用 <span class="methodname" style="color:#CC7832">{@link PDO::quote()}</span> 正确格式化数据。       </p>      </dd>              <dt><span class="parameter" style="color:#3A95FF">fetchMode</span></dt>      <dd>       <p class="para">        返回 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="classname">PDOStatement</a></span> 的默认获取模式。必须是        {@link <code class="literal">PDO::FETCH_*</code>} 常量之一。       </p>       <p class="para">        If this argument is passed to the function, the remaining arguments        will be treated as though <span class="methodname" style="color:#CC7832">{@link PDOStatement::setFetchMode()}</span>        was called on the resultant statement object.        The subsequent arguments vary depending on the selected fetch mode.       </p>      </dd>        </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.query-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="classname">PDOStatement</a></span> 对象 或者在失败时返回 <strong><span>false</span></strong>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdo.query-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_WARNING</span></strong>，则发出级别为 <strong><span>E_WARNING</span></strong> 的错误。</p><p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_EXCEPTION</span></strong>，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdo.query-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3155">    <p><strong>示例 #1 没有占位符的 SQL 可以使用 <span class="methodname" style="color:#CC7832"><strong>PDO::query()</strong></span> 执行</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$sql </span><span style="color: #007700">= </span><span style="color: #DD0000">'SELECT name, color, calories FROM fruit ORDER BY name'</span><span style="color: #007700">;<br />foreach (</span><span style="color: #9876AA">$conn</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">query</span><span style="color: #007700">(</span><span style="color: #9876AA">$sql</span><span style="color: #007700">) as </span><span style="color: #9876AA">$row</span><span style="color: #007700">) {<br />    print </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #DD0000">'name'</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\t"</span><span style="color: #007700">;<br />    print </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #DD0000">'color'</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\t"</span><span style="color: #007700">;<br />    print </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #DD0000">'calories'</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>apple   red     150<br>banana  yellow  250<br>kiwi    brown   75<br>lemon   yellow  25<br>orange  orange  300<br>pear    green   150<br>watermelon      pink    90<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdo.query-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::exec()} - 执行 SQL 语句，并返回受影响的行数</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::prepare()} - 预处理要执行的语句，并返回语句对象</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()} - 执行预处理语句</span></li>   </ul>  </span> </div></div>
     * @return PDOStatement|false <b>PDO::query</b> returns a PDOStatement object, or <b>FALSE</b>*/
    public function query($query, $fetchMode = PDO::ATTR_DEFAULT_FETCH_MODE, $arg3 = null, $ctorargs = []) {}

/**
*<div id="pdo.query" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::query</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">PDO::query</span> &mdash; <span class="dc-title">    预处理并执行没有占位符的 SQL 语句  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.query-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::query</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$query</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$fetchMode</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="type PDOStatement" style="color:#EAB766">PDOStatement</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::query</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$query</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$fetchMode</span><span class="initializer"> = PDO::FETCH_COLUMN</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$colno</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="type PDOStatement" style="color:#EAB766">PDOStatement</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::query</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$query</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$fetchMode</span><span class="initializer"> = PDO::FETCH_CLASS</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$classname</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$constructorArgs</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="type PDOStatement" style="color:#EAB766">PDOStatement</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::query</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$query</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$fetchMode</span><span class="initializer"> = PDO::FETCH_INTO</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="type PDOStatement" style="color:#EAB766">PDOStatement</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   <span class="methodname" style="color:#CC7832"><strong>PDO::query()</strong></span> 在单次函数调用内预处理并执行 SQL 语句，以 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="classname">PDOStatement</a></span> 对象形式返回结果集（如果有数据的话）。     </p>  <p class="para">   如果反复调用同一个查询，用 <span class="methodname" style="color:#CC7832">{@link PDO::prepare()}</span> 准备 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="classname">PDOStatement</a></span> 对象，并用 <span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()}</span> 执行语句，将具有更好的性能。  </p>  <p class="para">   如果没有完整获取结果集内的数据，就调用下一个 <span class="methodname" style="color:#CC7832"><strong>PDO::query()</strong></span>，将可能调用失败。应当在执行下一个 <span class="methodname" style="color:#CC7832"><strong>PDO::query()</strong></span>   前，先用 <span class="methodname" style="color:#CC7832">{@link PDOStatement::closeCursor()}</span> 释放数据库 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="classname">PDOStatement</a></span> 关联的资源。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    如果 <span class="parameter" style="color:#3A95FF">query</span> 包含占位符，则必须使用 <span class="methodname" style="color:#CC7832">{@link PDO::prepare()}</span> 和 <span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()}</span>    方法分别预处理和执行语句。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.query-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">query</span></dt>      <dd>       <p class="para">         预处理和执行的 SQL 语句。       </p>       <p class="para">        如果 SQL 包含占位符，则必须使用 <span class="methodname" style="color:#CC7832">{@link PDO::prepare()}</span> 和        <span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()}</span>。或者在调用 <span class="methodname" style="color:#CC7832"><strong>PDO::query()</strong></span>        之前手动预处理 SQL，如果驱动程序支持，使用 <span class="methodname" style="color:#CC7832">{@link PDO::quote()}</span> 正确格式化数据。       </p>      </dd>              <dt><span class="parameter" style="color:#3A95FF">fetchMode</span></dt>      <dd>       <p class="para">        返回 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="classname">PDOStatement</a></span> 的默认获取模式。必须是        {@link <code class="literal">PDO::FETCH_*</code>} 常量之一。       </p>       <p class="para">        If this argument is passed to the function, the remaining arguments        will be treated as though <span class="methodname" style="color:#CC7832">{@link PDOStatement::setFetchMode()}</span>        was called on the resultant statement object.        The subsequent arguments vary depending on the selected fetch mode.       </p>      </dd>        </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.query-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdostatement.php" class="classname">PDOStatement</a></span> 对象 或者在失败时返回 <strong><span>false</span></strong>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdo.query-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_WARNING</span></strong>，则发出级别为 <strong><span>E_WARNING</span></strong> 的错误。</p><p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_EXCEPTION</span></strong>，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdo.query-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3155">    <p><strong>示例 #1 没有占位符的 SQL 可以使用 <span class="methodname" style="color:#CC7832"><strong>PDO::query()</strong></span> 执行</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$sql </span><span style="color: #007700">= </span><span style="color: #DD0000">'SELECT name, color, calories FROM fruit ORDER BY name'</span><span style="color: #007700">;<br />foreach (</span><span style="color: #9876AA">$conn</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">query</span><span style="color: #007700">(</span><span style="color: #9876AA">$sql</span><span style="color: #007700">) as </span><span style="color: #9876AA">$row</span><span style="color: #007700">) {<br />    print </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #DD0000">'name'</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\t"</span><span style="color: #007700">;<br />    print </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #DD0000">'color'</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\t"</span><span style="color: #007700">;<br />    print </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #DD0000">'calories'</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>apple   red     150<br>banana  yellow  250<br>kiwi    brown   75<br>lemon   yellow  25<br>orange  orange  300<br>pear    green   150<br>watermelon      pink    90<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdo.query-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::exec()} - 执行 SQL 语句，并返回受影响的行数</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::prepare()} - 预处理要执行的语句，并返回语句对象</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()} - 执行预处理语句</span></li>   </ul>  </span> </div></div>
     * @return PDOStatement|false <b>PDO::query</b> returns a PDOStatement object, or <b>FALSE</b>*/
    public function query(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $query,
        #[LanguageLevelTypeAware(['8.0' => 'int|null'], default: '')] $fetchMode = null,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] ...$fetch_mode_args
    ) {}

/**
*<div id="pdo.lastinsertid" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::lastInsertId</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">PDO::lastInsertId</span> &mdash; <span class="dc-title">   返回最后插入行的ID或序列值  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.lastinsertid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::lastInsertId</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$name</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   返回最后插入行的 ID，或者是序列对象最后的值，取决于底层的驱动。比如，<a href="https://www.php.net/manual/zh/ref.pdo-pgsql.php" class="link">PDO_PGSQL</a>   允许为 <span class="parameter" style="color:#3A95FF">name</span> 参数指定任何序列对象的名称。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    在不同的 PDO 驱动之间，此方法可能不会返回有意义或一致的结果，因为底层数据库可能不支持自增字段或序列的概念。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.lastinsertid-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       应该返回 ID 的序列对象的名称。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.lastinsertid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果没有为参数 <span class="parameter" style="color:#3A95FF">name</span> 指定序列名称，<span class="methodname" style="color:#CC7832"><strong>PDO::lastInsertId()</strong></span> 返回表示最后插入数据库行的 ID 的字符串。  </p>  <p class="para">   如果为参数 <span class="parameter" style="color:#3A95FF">name</span> 指定了序列名称，<span class="methodname" style="color:#CC7832"><strong>PDO::lastInsertId()</strong></span> 则返回表示从指定序列对象取回最后的值的字符串。  </p>  <p class="para">   如果当前 PDO 驱动不支持此功能，则 <span class="methodname" style="color:#CC7832"><strong>PDO::lastInsertId()</strong></span> 触发一个 <span>IM001</span> SQLSTATE 。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdo.lastinsertid-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_WARNING</span></strong>，则发出级别为 <strong><span>E_WARNING</span></strong> 的错误。</p><p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_EXCEPTION</span></strong>，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。</p> </div></div>
     * @return string|false If a sequence name was not specified for the <i>name</i>*/
    public function lastInsertId(#[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $name = null): string|false {}

/**
*<div id="pdo.errorcode" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::errorCode</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">PDO::errorCode</span> &mdash; <span class="dc-title">   获取跟数据库句柄上一次操作相关的 SQLSTATE  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.errorcode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::errorCode</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">string</span></span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.errorcode-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.errorcode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个 SQLSTATE，一个由 5 个字母或数字组成的在 ANSI SQL 标准中定义的标识符。 简要地说，一个 SQLSTATE 由前面两个字符的类值和后面三个字符的子类值组成。   A class value of 01 indicates a warning and is accompanied by a return code   of SQL_SUCCESS_WITH_INFO. Class values other than &#039;01&#039;, except for the   class &#039;IM&#039;, indicate an error.  The class &#039;IM&#039; is specific to warnings   and errors that derive from the implementation of PDO (or perhaps ODBC,   if you&#039;re using the ODBC driver) itself.  The subclass value &#039;000&#039; in any   class indicates that there is no subclass for that SQLSTATE.  </p>  <p class="para">   <span class="methodname" style="color:#CC7832"><strong>PDO::errorCode()</strong></span> 仅检索直接在数据库句柄上操作执行的错误代码。如果通过 <span class="methodname" style="color:#CC7832">{@link PDO::prepare()}</span>   或 <span class="methodname" style="color:#CC7832">{@link PDO::query()}</span> 创建的 PDOStatement 对象并且在 statement 句柄上调用错误，<span class="methodname" style="color:#CC7832"><strong>PDO::errorCode()</strong></span>   将不会反映该错误。必须在特定 statement 句柄上调用 <span class="methodname" style="color:#CC7832">{@link PDOStatement::errorCode()}</span> 返回操作执行的错误代码。  </p>  <p class="para">   如果数据库句柄没有进行操作，则返回 <strong><span>null</span></strong> 。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdo.errorcode-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3131"><p><strong>示例 #1 取得一个 SQLSTATE 码</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 引发一个错误 -- BONES 数据表不存在 <br /></span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exec</span><span style="color: #007700">(</span><span style="color: #DD0000">"INSERT INTO bones(skull) VALUES ('lucy')"</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #DD0000">"\nPDO::errorCode(): "</span><span style="color: #007700">, </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">errorCode</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>PDO::errorCode(): 42S02<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdo.errorcode-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::errorInfo()} - Fetch extended error information associated with the last operation on the database handle</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::errorCode()} - 获取跟上一次语句句柄操作相关的 SQLSTATE</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::errorInfo()} - 获取跟上一次语句句柄操作相关的扩展错误信息</span></li>   </ul>  </span> </div></div>
     * @return mixed an SQLSTATE, a five characters alphanumeric identifier defined in*/
    public function errorCode(): ?string {}

/**
*<div id="pdo.errorinfo" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::errorInfo</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">PDO::errorInfo</span> &mdash; <span class="dc-title">   Fetch extended error information associated with the last operation on the database handle  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.errorinfo-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::errorInfo</strong></span>(): <span class="type" style="color:#EAB766">array</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.errorinfo-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.errorinfo-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="methodname" style="color:#CC7832"><strong>PDO::errorInfo()</strong></span> returns an array of error information   about the last operation performed by this database handle. The array   consists of at least the following fields:   <table class="doctable informaltable">         <thead>      <tr>       <th>Element</th>       <th>Information</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>0</td>       <td>SQLSTATE error code (a five characters alphanumeric identifier defined               in the ANSI SQL standard).</td>      </tr>      <tr>       <td>1</td>       <td>Driver-specific error code.</td>      </tr>      <tr>       <td>2</td>       <td>Driver-specific error message.</td>      </tr>     </tbody>       </table>  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    If the SQLSTATE error code is not set or there is no driver-specific    error, the elements following element 0 will be set to <strong><span>null</span></strong>.    </p>  </p></blockquote>  <p class="para">   <span class="methodname" style="color:#CC7832"><strong>PDO::errorInfo()</strong></span> only retrieves error information for   operations performed directly on the database handle. If you create a   PDOStatement object through <span class="methodname" style="color:#CC7832">{@link PDO::prepare()}</span> or   <span class="methodname" style="color:#CC7832">{@link PDO::query()}</span> and invoke an error on the statement   handle, <span class="methodname" style="color:#CC7832"><strong>PDO::errorInfo()</strong></span> will not reflect the error   from the statement handle. You must call   <span class="methodname" style="color:#CC7832">{@link PDOStatement::errorInfo()}</span> to return the error   information for an operation performed on a particular statement handle.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdo.errorinfo-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3134"><p><strong>示例 #1 Displaying errorInfo() fields for a PDO_ODBC connection to a DB2 database</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Provoke an error -- bogus SQL syntax <br /></span><span style="color: #9876AA">$stmt </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'bogus sql'</span><span style="color: #007700">);<br />if (!</span><span style="color: #9876AA">$stmt</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"\nPDO::errorInfo():\n"</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">errorInfo</span><span style="color: #007700">());<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>PDO::errorInfo():<br>Array<br>(<br>    [0] =&gt; HY000<br>    [1] =&gt; 1<br>    [2] =&gt; near &quot;bogus&quot;: syntax error<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdo.errorinfo-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::errorCode()} - 获取跟数据库句柄上一次操作相关的 SQLSTATE</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::errorCode()} - 获取跟上一次语句句柄操作相关的 SQLSTATE</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::errorInfo()} - 获取跟上一次语句句柄操作相关的扩展错误信息</span></li>   </ul>  </span> </div></div>
     * @return array <b>PDO::errorInfo</b> returns an array of error information*/
    public function errorInfo(): array {}

/**
*<div id="pdo.getattribute" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::getAttribute</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">PDO::getAttribute</span> &mdash; <span class="dc-title">   取回一个数据库连接的属性  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.getattribute-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::getAttribute</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$attribute</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   此方法返回数据库连接属性的值。要检索 PDOStatement 属性，请参阅    <span class="methodname" style="color:#CC7832">{@link PDOStatement::getAttribute()}</span>。  </p>  <p class="para">   注意有些数据库/驱动可能不支持所有的数据库连接属性。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.getattribute-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">attribute</span></dt>     <dd>      <p class="para">        <span>PDO::ATTR_*</span> 常量之一。下列为应用到数据库连接中的通用属性：        <ul class="simplelist">         <li class="member"><span>PDO::ATTR_AUTOCOMMIT</span></li>        <li class="member"><span>PDO::ATTR_CASE</span></li>        <li class="member"><span>PDO::ATTR_CLIENT_VERSION</span></li>        <li class="member"><span>PDO::ATTR_CONNECTION_STATUS</span></li>        <li class="member"><span>PDO::ATTR_DRIVER_NAME</span></li>        <li class="member"><span>PDO::ATTR_ERRMODE</span></li>        <li class="member"><span>PDO::ATTR_ORACLE_NULLS</span></li>        <li class="member"><span>PDO::ATTR_PERSISTENT</span></li>        <li class="member"><span>PDO::ATTR_PREFETCH</span></li>        <li class="member"><span>PDO::ATTR_SERVER_INFO</span></li>        <li class="member"><span>PDO::ATTR_SERVER_VERSION</span></li>        <li class="member"><span>PDO::ATTR_TIMEOUT</span></li>       </ul>       </p>      <span class="simpara">       一些驱动程序可能会使用额外的特定驱动程序属性。请注意，特定驱动程序的属性<em>不能</em>与其它驱动程序一起使用。      </span>     </dd>        </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.getattribute-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功调用则返回请求的 PDO 属性值。不成功则返回 <span>null</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdo.getattribute-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   当底层驱动程序不支持请求的 <span class="parameter" style="color:#3A95FF">attribute</span> 时，   <span class="methodname" style="color:#CC7832"><strong>PDO::getAttribute()</strong></span> 可能会抛出 <span class="exceptionname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="exceptionname">PDOException</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdo.getattribute-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3140">    <p><strong>示例 #1 取回数据库连接属性</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$conn </span><span style="color: #007700">= new </span><span style="color: #9876AA">PDO</span><span style="color: #007700">(</span><span style="color: #DD0000">'odbc:sample'</span><span style="color: #007700">, </span><span style="color: #DD0000">'db2inst1'</span><span style="color: #007700">, </span><span style="color: #DD0000">'ibmdb2'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$attributes </span><span style="color: #007700">= array(<br />    </span><span style="color: #DD0000">"AUTOCOMMIT"</span><span style="color: #007700">, </span><span style="color: #DD0000">"ERRMODE"</span><span style="color: #007700">, </span><span style="color: #DD0000">"CASE"</span><span style="color: #007700">, </span><span style="color: #DD0000">"CLIENT_VERSION"</span><span style="color: #007700">, </span><span style="color: #DD0000">"CONNECTION_STATUS"</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">"ORACLE_NULLS"</span><span style="color: #007700">, </span><span style="color: #DD0000">"PERSISTENT"</span><span style="color: #007700">, </span><span style="color: #DD0000">"PREFETCH"</span><span style="color: #007700">, </span><span style="color: #DD0000">"SERVER_INFO"</span><span style="color: #007700">, </span><span style="color: #DD0000">"SERVER_VERSION"</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">"TIMEOUT"<br /></span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$attributes </span><span style="color: #007700">as </span><span style="color: #9876AA">$val</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"PDO::ATTR_</span><span style="color: #9876AA">$val</span><span style="color: #DD0000">: "</span><span style="color: #007700">;<br />    echo </span><span style="color: #9876AA">$conn</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttribute</span><span style="color: #007700">(</span><span style="color: #9876AA">constant</span><span style="color: #007700">(</span><span style="color: #DD0000">"PDO::ATTR_</span><span style="color: #9876AA">$val</span><span style="color: #DD0000">"</span><span style="color: #007700">)) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>       </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdo.getattribute-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::setAttribute()} - 设置属性</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::getAttribute()} - 检索语句属性</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::setAttribute()} - 设置一个语句属性</span></li>   </ul>  </span> </div></div>
     * @return mixed A successful call returns the value of the requested PDO attribute.*/
    public function getAttribute(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $attribute): mixed {}

/**
*<div id="pdo.quote" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::quote</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.2.1)</p><p class="refpurpose"><span class="refname">PDO::quote</span> &mdash; <span class="dc-title">   为 SQL 查询里的字符串添加引号  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.quote-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::quote</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$type</span><span class="initializer"> = PDO::PARAM_STR</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   <span class="methodname" style="color:#CC7832"><strong>PDO::quote()</strong></span> 为输入的字符串添加引号（如果有需要），并对特殊字符进行转义，且引号的风格和底层驱动适配。  </p>  <p class="para">   如果使用此函数构建 SQL 语句，<em>强烈</em>建议使用 <span class="methodname" style="color:#CC7832">{@link PDO::prepare()}</span> 配合参数构建，而不是用 <span class="methodname" style="color:#CC7832"><strong>PDO::quote()</strong></span>   把用户输入的数据拼接进 SQL 语句。使用 prepare 语句处理参数，不仅仅可移植性更好，而且更方便、免疫 SQL 注入；相对于拼接 SQL 更快，客户端和服务器都能缓存编译后的 SQL 查询。  </p>  <p class="para">   不是所有的 PDO 驱动都实现了此功能（例如 PDO_ODBC）。   考虑使用 prepare 代替。  </p>  <div class="caution"><strong class="caution">警告</strong>   <h1 class="title">安全性：默认字符集</h1>   <p class="para">    字符集不仅仅要在数据库服务器上设置，也要为数据库连接设置（取决于驱动），它影响了 <span class="methodname" style="color:#CC7832"><strong>PDO::quote()</strong></span>。       更多信息可参考<a href="https://www.php.net/manual/zh/pdo.drivers.php" class="link">PDO 驱动文档</a>。   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.quote-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>      <dd>       <p class="para">        要添加引号的字符串。       </p>      </dd>              <dt><span class="parameter" style="color:#3A95FF">type</span></dt>      <dd>       <p class="para">        为驱动程序的数据类型提供引号风格的提示。例如 <strong><span>PDO_PARAM_LOB</span></strong> 将告诉驱动程序转义二进制数据。       </p>      </dd>        </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.quote-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回加引号的字符串，理论上可以安全用于 SQL 语句。 如果驱动不支持这种方式，将返回 <strong><span>false</span></strong> 。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdo.quote-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3158">    <p><strong>示例 #1 普通字符串加引号</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$conn </span><span style="color: #007700">= new </span><span style="color: #9876AA">PDO</span><span style="color: #007700">(</span><span style="color: #DD0000">'sqlite:/home/lynn/music.sql3'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 简单字符串 <br /></span><span style="color: #9876AA">$string </span><span style="color: #007700">= </span><span style="color: #DD0000">'Nice'</span><span style="color: #007700">;<br />print </span><span style="color: #DD0000">"Unquoted string: </span><span style="color: #9876AA">$string</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />print </span><span style="color: #DD0000">"Quoted string: " </span><span style="color: #007700">. </span><span style="color: #9876AA">$conn</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">quote</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Unquoted string: Nice<br>Quoted string: &#039;Nice&#039;<br></span></div>    </div>   </div>   <div class="example" id="example-3161">    <p><strong>示例 #2 危险字符串加引号</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$conn </span><span style="color: #007700">= new </span><span style="color: #9876AA">PDO</span><span style="color: #007700">(</span><span style="color: #DD0000">'sqlite:/home/lynn/music.sql3'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 危险字符串 <br /></span><span style="color: #9876AA">$string </span><span style="color: #007700">= </span><span style="color: #DD0000">'Naughty \' string'</span><span style="color: #007700">;<br />print </span><span style="color: #DD0000">"Unquoted string: </span><span style="color: #9876AA">$string</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />print </span><span style="color: #DD0000">"Quoted string:" </span><span style="color: #007700">. </span><span style="color: #9876AA">$conn</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">quote</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Unquoted string: Naughty &#039; string<br>Quoted string: &#039;Naughty &#039;&#039; string&#039;<br></span></div>    </div>   </div>   <div class="example" id="example-3164">    <p><strong>示例 #3 复杂字符串加引号</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$conn </span><span style="color: #007700">= new </span><span style="color: #9876AA">PDO</span><span style="color: #007700">(</span><span style="color: #DD0000">'sqlite:/home/lynn/music.sql3'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 复杂字符串 <br /></span><span style="color: #9876AA">$string </span><span style="color: #007700">= </span><span style="color: #DD0000">"Co'mpl''ex \"st'\"ring"</span><span style="color: #007700">;<br />print </span><span style="color: #DD0000">"Unquoted string: </span><span style="color: #9876AA">$string</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />print </span><span style="color: #DD0000">"Quoted string: " </span><span style="color: #007700">. </span><span style="color: #9876AA">$conn</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">quote</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Unquoted string: Co&#039;mpl&#039;&#039;ex &quot;st&#039;&quot;ring<br>Quoted string: &#039;Co&#039;&#039;mpl&#039;&#039;&#039;&#039;ex &quot;st&#039;&#039;&quot;ring&#039;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdo.quote-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::prepare()} - 预处理要执行的语句，并返回语句对象</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()} - 执行预处理语句</span></li>   </ul>  </span> </div></div>
     * @return string|false a quoted string that is theoretically safe to pass into an*/
    public function quote(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $string,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $type = PDO::PARAM_STR
    ): string|false {}

    final public function __wakeup() {}

    final public function __sleep() {}

/**
*<div id="pdo.getavailabledrivers" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::getAvailableDrivers</h1>  <h1 class="refname">pdo_drivers</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 1.0.3)</p><p class="refpurpose"><span class="refname">PDO::getAvailableDrivers</span> -- <span class="refname">pdo_drivers</span> &mdash; <span class="dc-title">   返回一个可用驱动的数组  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.getavailabledrivers-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>PDO::getAvailableDrivers</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><strong>pdo_drivers</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   此方法返回所有当前可用在 <span class="methodname" style="color:#CC7832">{@link PDO::__construct()}</span> 的 <span class="parameter" style="color:#3A95FF">DSN</span> 参数中的 PDO 驱动。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.getavailabledrivers-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.getavailabledrivers-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="methodname" style="color:#CC7832"><strong>PDO::getAvailableDrivers()</strong></span> 返回包含可用 PDO 驱动名字的数组。如果没有可用的驱动，则返回空数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdo.getavailabledrivers-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3143">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>PDO::getAvailableDrivers()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">getAvailableDrivers</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; mysql<br>    [1] =&gt; sqlite<br>)<br></span></div>    </div>   </div>  </span> </div></div>
     * @return array <b>PDO::getAvailableDrivers</b> returns an array of PDO driver names. If*/
    public static function getAvailableDrivers(): array {}

/**
*<div id="pdo.sqlitecreateaggregate" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::sqliteCreateAggregate</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo_sqlite &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">PDO::sqliteCreateAggregate</span> &mdash; <span class="dc-title">   Registers an aggregating User Defined Function for use in SQL statements  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.sqlitecreateaggregate-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::sqliteCreateAggregate</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$function_name</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$step_func</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$finalize_func</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$num_args</span><span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数是<em>实验性</em>的。此函数的表象，包括名称及其相关文档都可能在未来的PHP 发布版本中未通知就被修改。使用本函数风险自担。</p></div>  <p class="para">   This method is similar to {@link PDO::sqliteCreateFunction} except that it registers functions that can be used to calculate a   result aggregated across all the rows of a query.  </p>  <p class="para">   The key difference between this method and {@link PDO::sqliteCreateFunction} is that two functions are   required to manage the aggregate.   </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.sqlitecreateaggregate-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">function_name</span></dt>     <dd>      <p class="para">       The name of the function used in SQL statements.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">step_func</span></dt>     <dd>      <p class="para">       Callback function called for each row of the result set. Your PHP       function should accumulate the result and store it in the aggregation       context.      </p>      <p class="para">       This function need to be defined as:       <div class="methodsynopsis dc-description">        <span class="methodname" style="color:#CC7832"><span class="replaceable">step</span></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$context</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$rownumber</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$values</span></span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>       <dl>                 <dt><span class="parameter" style="color:#3A95FF">context</span></dt>         <dd>          <p class="para">           <strong><span>null</span></strong> for the first row; on subsequent rows it will have the value           that was previously returned from the step function; you should use           this to maintain the aggregate state.          </p>         </dd>                         <dt><span class="parameter" style="color:#3A95FF">rownumber</span></dt>         <dd>          <p class="para">           The current row number.          </p>         </dd>                         <dt><span class="parameter" style="color:#3A95FF">value</span></dt>         <dd>          <p class="para">           The first argument passed to the aggregate.          </p>         </dd>                         <dt><span class="parameter" style="color:#3A95FF">values</span></dt>         <dd>          <p class="para">           Further arguments passed to the aggregate.          </p>         </dd>               </dl>       The return value of this function will be used as the       <span class="parameter" style="color:#3A95FF">context</span> argument in the next call of the step or       finalize functions.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">finalize_func</span></dt>     <dd>      <p class="para">       Callback function to aggregate the &quot;stepped&quot; data from each row.        Once all the rows have been processed, this function will be called       and it should then take the data from the aggregation context and       return the result. This callback function should return a type understood       by SQLite (i.e. <a href="https://www.php.net/manual/zh/language.types.intro.php" class="link">scalar type</a>).      </p>      <p class="para">       This function need to be defined as:       <div class="methodsynopsis dc-description">        <span class="methodname" style="color:#CC7832"><span class="replaceable">fini</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$context</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$rowcount</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>       <dl>                 <dt><span class="parameter" style="color:#3A95FF">context</span></dt>         <dd>          <p class="para">           Holds the return value from the very last call to the step function.          </p>         </dd>                         <dt><span class="parameter" style="color:#3A95FF">rowcount</span></dt>         <dd>          <p class="para">           Holds the number of rows over which the aggregate was performed.          </p>         </dd>               </dl>       The return value of this function will be used as the return value for       the aggregate.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">num_args</span></dt>     <dd>      <p class="para">       Hint to the SQLite parser if the callback function accepts a       predetermined number of arguments.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.sqlitecreateaggregate-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdo.sqlitecreateaggregate-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3344">    <p><strong>示例 #1 max_length aggregation function example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$data </span><span style="color: #007700">= array(<br />   </span><span style="color: #DD0000">'one'</span><span style="color: #007700">,<br />   </span><span style="color: #DD0000">'two'</span><span style="color: #007700">,<br />   </span><span style="color: #DD0000">'three'</span><span style="color: #007700">,<br />   </span><span style="color: #DD0000">'four'</span><span style="color: #007700">,<br />   </span><span style="color: #DD0000">'five'</span><span style="color: #007700">,<br />   </span><span style="color: #DD0000">'six'</span><span style="color: #007700">,<br />   </span><span style="color: #DD0000">'seven'</span><span style="color: #007700">,<br />   </span><span style="color: #DD0000">'eight'</span><span style="color: #007700">,<br />   </span><span style="color: #DD0000">'nine'</span><span style="color: #007700">,<br />   </span><span style="color: #DD0000">'ten'</span><span style="color: #007700">,<br />   );<br /></span><span style="color: #9876AA">$db </span><span style="color: #007700">= new </span><span style="color: #9876AA">PDO</span><span style="color: #007700">(</span><span style="color: #DD0000">'sqlite::memory:'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exec</span><span style="color: #007700">(</span><span style="color: #DD0000">"CREATE TABLE strings(a)"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$insert </span><span style="color: #007700">= </span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'INSERT INTO strings VALUES (?)'</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$data </span><span style="color: #007700">as </span><span style="color: #9876AA">$str</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$insert</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">(array(</span><span style="color: #9876AA">$str</span><span style="color: #007700">));<br />}<br /></span><span style="color: #9876AA">$insert </span><span style="color: #007700">= </span><span style="color: #9876AA">null</span><span style="color: #007700">;<br /><br />function </span><span style="color: #9876AA">max_len_step</span><span style="color: #007700">(</span><span style="color: #9876AA">$context</span><span style="color: #007700">, </span><span style="color: #9876AA">$rownumber</span><span style="color: #007700">, </span><span style="color: #9876AA">$string</span><span style="color: #007700">) <br />{<br />    if (</span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">) &gt; </span><span style="color: #9876AA">$context</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">$context </span><span style="color: #007700">= </span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">);<br />    }<br />    return </span><span style="color: #9876AA">$context</span><span style="color: #007700">;<br />}<br /><br />function </span><span style="color: #9876AA">max_len_finalize</span><span style="color: #007700">(</span><span style="color: #9876AA">$context</span><span style="color: #007700">, </span><span style="color: #9876AA">$rowcount</span><span style="color: #007700">) <br />{<br />    return </span><span style="color: #9876AA">$context </span><span style="color: #007700">=== </span><span style="color: #9876AA">null </span><span style="color: #007700">? </span><span style="color: #9876AA">0 </span><span style="color: #007700">: </span><span style="color: #9876AA">$context</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">sqliteCreateAggregate</span><span style="color: #007700">(</span><span style="color: #DD0000">'max_len'</span><span style="color: #007700">, </span><span style="color: #DD0000">'max_len_step'</span><span style="color: #007700">, </span><span style="color: #DD0000">'max_len_finalize'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">query</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT max_len(a) from strings'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">fetchAll</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>  <p class="para">   In this example, we are creating an aggregating function that will   calculate the length of the longest string in one of the columns of the   table.  For each row, the <span>max_len_step</span> function is   called and passed a <span>$context</span> parameter.  The context   parameter is just like any other PHP variable and be set to hold an array   or even an object value.  In this example, we are simply using it to hold   the maximum length we have seen so far; if the   <span>$string</span> has a length longer than the current   maximum, we update the context to hold this new maximum length.  </p>  <p class="para">   After all of the rows have been processed, SQLite calls the   <span>max_len_finalize</span> function to determine the aggregate   result.  Here, we could perform some kind of calculation based on the   data found in the <span>$context</span>.  In our simple example   though, we have been calculating the result as the query progressed, so we   simply need to return the context value.  </p>  <div class="tip"><strong class="tip">小技巧</strong>   <p class="para">    It is NOT recommended for you to store a copy of the values in the context    and then process them at the end, as you would cause SQLite to use a lot of    memory to process the query - just think of how much memory you would need    if a million rows were stored in memory, each containing a string 32 bytes    in length.   </p>  </div>  <div class="tip"><strong class="tip">小技巧</strong>   <p class="para">    You can use {@link PDO::sqliteCreateFunction} and    {@link PDO::sqliteCreateAggregate} to override SQLite    native SQL functions.   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdo.sqlitecreateaggregate-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member">{@link PDO::sqliteCreateFunction}</li>    <li class="member"><span class="function"><strong style="color:#CC7832">sqlite_create_function()</strong></span></li>    <li class="member"><span class="function"><strong style="color:#CC7832">sqlite_create_aggregate()</strong></span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function sqliteCreateAggregate($function_name, $step_func, $finalize_func, $num_args = -1) {}

/**
*<div id="pdo.sqlitecreatecollation" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::sqliteCreateCollation</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.11, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">PDO::sqliteCreateCollation</span> &mdash; <span class="dc-title">   Registers a User Defined Function for use as a collating function in SQL statements  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.sqlitecreatecollation-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::sqliteCreateCollation</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数是<em>实验性</em>的。此函数的表象，包括名称及其相关文档都可能在未来的PHP 发布版本中未通知就被修改。使用本函数风险自担。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.sqlitecreatecollation-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       Name of the SQL collating function to be created or redefined.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para">      The name of a PHP function or user-defined function to apply as a callback, defining the behavior of the collation. It should accept two strings and return as strcmp() does, i.e. it should return -1, 1, or 0 if the first string sorts before, sorts after, or is equal to the second.      </p>      <p class="para">       This function need to be defined as:       <div class="methodsynopsis dc-description">        <span class="methodname" style="color:#CC7832"><span class="replaceable">collation</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string2</span></span>): <span class="type" style="color:#EAB766">int</span></div>      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.sqlitecreatecollation-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdo.sqlitecreatecollation-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3347">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">PDO::sqliteCreateCollation()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$db </span><span style="color: #007700">= new </span><span style="color: #9876AA">PDO</span><span style="color: #007700">(</span><span style="color: #DD0000">'sqlite::memory:'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exec</span><span style="color: #007700">(</span><span style="color: #DD0000">"CREATE TABLE test (col1 string)"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exec</span><span style="color: #007700">(</span><span style="color: #DD0000">"INSERT INTO test VALUES ('a1')"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exec</span><span style="color: #007700">(</span><span style="color: #DD0000">"INSERT INTO test VALUES ('a10')"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exec</span><span style="color: #007700">(</span><span style="color: #DD0000">"INSERT INTO test VALUES ('a2')"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">sqliteCreateCollation</span><span style="color: #007700">(</span><span style="color: #DD0000">'NATURAL_CMP'</span><span style="color: #007700">, </span><span style="color: #DD0000">'strnatcmp'</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">query</span><span style="color: #007700">(</span><span style="color: #DD0000">"SELECT col1 FROM test ORDER BY col1"</span><span style="color: #007700">) as </span><span style="color: #9876AA">$row</span><span style="color: #007700">) {<br />  echo </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #DD0000">'col1'</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br />echo </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />foreach (</span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">query</span><span style="color: #007700">(</span><span style="color: #DD0000">"SELECT col1 FROM test ORDER BY col1 COLLATE NATURAL_CMP"</span><span style="color: #007700">) as </span><span style="color: #9876AA">$row</span><span style="color: #007700">) {<br />  echo </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #DD0000">'col1'</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>a1<br>a10<br>a2<br><br>a1<br>a2<br>a10<br></span></div>    </div>   </div>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function sqliteCreateCollation($name, $callback) {}

/**
*<div id="pdo.sqlitecreatefunction" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::sqliteCreateFunction</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo_sqlite &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">PDO::sqliteCreateFunction</span> &mdash; <span class="dc-title">   Registers a User Defined Function for use in SQL statements  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.sqlitecreatefunction-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::sqliteCreateFunction</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$function_name</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$num_args</span><span class="initializer"> = -1</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数是<em>实验性</em>的。此函数的表象，包括名称及其相关文档都可能在未来的PHP 发布版本中未通知就被修改。使用本函数风险自担。</p></div>  <p class="para">   This method allows you to register a PHP function with SQLite as an    <abbr title="User Defined Functions">UDF</abbr> (User Defined Function), so that it can be called   from within your SQL statements.  </p>  <p class="para">   The UDF can be used in any SQL statement that can call functions, such as   SELECT and UPDATE statements and also in triggers.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.sqlitecreatefunction-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">function_name</span></dt>     <dd>      <p class="para">       The name of the function used in SQL statements.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para">       Callback function to handle the defined SQL function.      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <span class="simpara">        Callback functions should return a type understood by SQLite (i.e.        <a href="https://www.php.net/manual/zh/language.types.intro.php" class="link">scalar type</a>).       </span>      </p></blockquote>      <p class="para">       This function need to be defined as:       <div class="methodsynopsis dc-description">        <span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$values</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>       <dl>                 <dt><span class="parameter" style="color:#3A95FF">value</span></dt>         <dd>          <p class="para">           The first argument passed to the SQL function.          </p>         </dd>                         <dt><span class="parameter" style="color:#3A95FF">values</span></dt>         <dd>          <p class="para">           Further arguments passed to the SQL function.          </p>         </dd>               </dl>      </p>      </dd>             <dt><span class="parameter" style="color:#3A95FF">num_args</span></dt>     <dd>      <p class="para">       The number of arguments that the SQL function takes. If       this parameter is <span>-1</span>, then the SQL function may take       any number of arguments.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       A bitwise conjunction of flags. Currently, only       <strong><span>PDO::SQLITE_DETERMINISTIC</span></strong> is supported, which specifies       that the function always returns the same result given the same inputs       within a single SQL statement.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.sqlitecreatefunction-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-pdo.sqlitecreatefunction-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>7.1.4</td>      <td>       The <span class="parameter" style="color:#3A95FF">flags</span> parameter has been added.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdo.sqlitecreatefunction-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3350">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">PDO::sqliteCreateFunction()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">md5_and_reverse</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">) <br />{<br />    return </span><span style="color: #9876AA">strrev</span><span style="color: #007700">(</span><span style="color: #9876AA">md5</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">));<br />}<br /><br /></span><span style="color: #9876AA">$db </span><span style="color: #007700">= new </span><span style="color: #9876AA">PDO</span><span style="color: #007700">(</span><span style="color: #DD0000">'sqlite:sqlitedb'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">sqliteCreateFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'md5rev'</span><span style="color: #007700">, </span><span style="color: #DD0000">'md5_and_reverse'</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$rows </span><span style="color: #007700">= </span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">query</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT md5rev(filename) FROM files'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">fetchAll</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>  <p class="para">   In this example, we have a function that calculates the md5 sum of a   string, and then reverses it.  When the SQL statement executes, it   returns the value of the filename transformed by our function.  The data   returned in <span>$rows</span> contains the processed result.  </p>  <p class="para">   The beauty of this technique is that you do not need to process the   result using a <a href="https://www.php.net/manual/zh/control-structures.foreach.php" class="link">foreach</a> loop after you have queried for the data.  </p>    <div class="tip"><strong class="tip">小技巧</strong>   <p class="para">    You can use {@link PDO::sqliteCreateFunction} and    {@link PDO::sqliteCreateAggregate} to override SQLite    native SQL functions.   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdo.sqlitecreatefunction-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member">{@link PDO::sqliteCreateAggregate}</li>    <li class="member"><span class="function"><strong style="color:#CC7832">sqlite_create_function()</strong></span></li>    <li class="member"><span class="function"><strong style="color:#CC7832">sqlite_create_aggregate()</strong></span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function sqliteCreateFunction($function_name, $callback, $num_args = -1, $flags = 0) {}

/**
*<div id="pdo.pgsqlcopyfromarray" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::pgsqlCopyFromArray</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.3, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">PDO::pgsqlCopyFromArray</span> &mdash; <span class="dc-title">Copy data from PHP array into table</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.pgsqlcopyfromarray-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::pgsqlCopyFromArray</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$table_name</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$rows</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$delimiter</span><span class="initializer"> = &quot;\t&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$null_as</span><span class="initializer"> = &quot;\\\\N&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$fields</span><span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Copies data from <span class="parameter" style="color:#3A95FF">rows</span> array to table <span class="parameter" style="color:#3A95FF">table_name</span>   using <span class="parameter" style="color:#3A95FF">delimiter</span> as fields delimiter and <span class="parameter" style="color:#3A95FF">fields</span> list  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.pgsqlcopyfromarray-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">table_name</span></dt>     <dd>      <p class="para">       String containing table name      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">rows</span></dt>     <dd>      <p class="para">       Array of strings with fields separated by <span class="parameter" style="color:#3A95FF">delimiter</span>      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">delimiter</span></dt>     <dd>      <p class="para">       Delimiter used in <span class="parameter" style="color:#3A95FF">rows</span> array      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">null_as</span></dt>     <dd>      <p class="para">       How to interpret null values      </p>     </dd>                 <dt><span class="parameter" style="color:#3A95FF">fields</span></dt>     <dd>      <p class="para">       List of fields to insert      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.pgsqlcopyfromarray-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> on success, 或者在失败时返回 <strong><span>false</span></strong>.  </p> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function pgsqlCopyFromArray(string $tableName, array $rows, string $separator = "\t", string $nullAs = "\\\\N", ?string $fields = null): bool {}

/**
*<div id="pdo.pgsqlcopyfromfile" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::pgsqlCopyFromFile</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.3, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">PDO::pgsqlCopyFromFile</span> &mdash; <span class="dc-title">Copy data from file into table</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.pgsqlcopyfromfile-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::pgsqlCopyFromFile</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$table_name</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$delimiter</span><span class="initializer"> = &quot;\t&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$null_as</span><span class="initializer"> = &quot;\\\\N&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$fields</span><span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Copies data from file specified by <span class="parameter" style="color:#3A95FF">filename</span> into table <span class="parameter" style="color:#3A95FF">table_name</span>   using <span class="parameter" style="color:#3A95FF">delimiter</span> as fields delimiter and <span class="parameter" style="color:#3A95FF">fields</span> list  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.pgsqlcopyfromfile-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">table_name</span></dt>     <dd>      <p class="para">       String containing table name      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">filename</span></dt>     <dd>      <p class="para">       Filename containing data to import      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">delimiter</span></dt>     <dd>      <p class="para">       Delimiter used in file specified by <span class="parameter" style="color:#3A95FF">filename</span>      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">null_as</span></dt>     <dd>      <p class="para">       How to interpret null values      </p>     </dd>                 <dt><span class="parameter" style="color:#3A95FF">fields</span></dt>     <dd>      <p class="para">       List of fields to insert      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.pgsqlcopyfromfile-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> on success, 或者在失败时返回 <strong><span>false</span></strong>.  </p> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function pgsqlCopyFromFile(string $tableName, string $filename, string $separator = "\t", string $nullAs = "\\\\N", ?string $fields = null): bool {}

/**
*<div id="pdo.pgsqlcopytoarray" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::pgsqlCopyToArray</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.3, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">PDO::pgsqlCopyToArray</span> &mdash; <span class="dc-title">Copy data from database table into PHP array</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.pgsqlcopytoarray-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::pgsqlCopyToArray</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$table_name</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$delimiter</span><span class="initializer"> = &quot;\t&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$null_as</span><span class="initializer"> = &quot;\\\\N&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$fields</span><span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Copies data from <span class="parameter" style="color:#3A95FF">table</span> into array using <span class="parameter" style="color:#3A95FF">delimiter</span> as fields delimiter and <span class="parameter" style="color:#3A95FF">fields</span> list  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.pgsqlcopytoarray-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">table_name</span></dt>     <dd>      <p class="para">       String containing table name      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">delimiter</span></dt>     <dd>      <p class="para">       Delimiter used in rows      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">null_as</span></dt>     <dd>      <p class="para">       How to interpret null values      </p>     </dd>                 <dt><span class="parameter" style="color:#3A95FF">fields</span></dt>     <dd>      <p class="para">       List of fields to export      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.pgsqlcopytoarray-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an array of rows, 或者在失败时返回 <strong><span>false</span></strong>.  </p> </div></div>
     * @return array|false returns an array of rows, or <b>FALSE</b> on failure.*/
    public function pgsqlCopyToArray(string $tableName, string $separator = "\t", string $nullAs = "\\\\N", ?string $fields = null): array|false {}

/**
*<div id="pdo.pgsqlcopytofile" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::pgsqlCopyToFile</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.3, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">PDO::pgsqlCopyToFile</span> &mdash; <span class="dc-title">Copy data from table into file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.pgsqlcopytofile-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::pgsqlCopyToFile</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$table_name</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$delimiter</span><span class="initializer"> = &quot;\t&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$null_as</span><span class="initializer"> = &quot;\\\\N&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$fields</span><span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Copies data from table into file specified by <span class="parameter" style="color:#3A95FF">filename</span>   using <span class="parameter" style="color:#3A95FF">delimiter</span> as fields delimiter and <span class="parameter" style="color:#3A95FF">fields</span> list  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.pgsqlcopytofile-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">table_name</span></dt>     <dd>      <p class="para">       String containing table name      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">filename</span></dt>     <dd>      <p class="para">       Filename to export data      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">delimiter</span></dt>     <dd>      <p class="para">       Delimiter used in file specified by <span class="parameter" style="color:#3A95FF">filename</span>      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">null_as</span></dt>     <dd>      <p class="para">       How to interpret null values      </p>     </dd>                 <dt><span class="parameter" style="color:#3A95FF">fields</span></dt>     <dd>      <p class="para">       List of fields to insert      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.pgsqlcopytofile-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> on success, 或者在失败时返回 <strong><span>false</span></strong>.  </p> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function pgsqlCopyToFile(string $tableName, string $filename, string $separator = "\t", string $nullAs = "\\\\N", ?string $fields = null): bool {}

/**
*<div id="pdo.pgsqllobcreate" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::pgsqlLOBCreate</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8, PECL pdo_pgsql &gt;= 1.0.2)</p><p class="refpurpose"><span class="refname">PDO::pgsqlLOBCreate</span> &mdash; <span class="dc-title">Creates a new large object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.pgsqllobcreate-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::pgsqlLOBCreate</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">PDO::pgsqlLOBCreate()</strong></span> creates a large object and   returns the OID of that object.  You may then open a stream on the object   using <span class="function">{@link PDO::pgsqlLOBOpen()}</span> to read or write data to   it.  The OID can be stored in columns of type OID and be used to reference   the large object, without causing the row to grow arbitrarily large.   The large object will continue to live in the database until it   is removed by calling <span class="function">{@link PDO::pgsqlLOBUnlink()}</span>.  </p>  <p class="para">   Large objects can be up to 2GB in size, but are cumbersome to use; you need   to ensure that <span class="function">{@link PDO::pgsqlLOBUnlink()}</span> is called prior   to deleting the last row that references its OID from your database.   In addition, large objects have no access controls.  As an alternative,   try the bytea column type; recent versions of PostgreSQL allow bytea   columns of up to 1GB in size and transparently manage the storage for   optimal row size.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    This function must be called within a transaction.   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.pgsqllobcreate-parameters">  <h3 class="title">参数</h3>  <span>   <span class="function"><strong style="color:#CC7832">PDO::pgsqlLOBCreate()</strong></span> takes no parameters.  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.pgsqllobcreate-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the OID of the newly created large object on success, or <strong><span>false</span></strong>   on failure.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdo.pgsqllobcreate-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3332">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">PDO::pgsqlLOBCreate()</strong></span> example</strong></p>    <div class="example-contents"><p>     This example creates a new large object and copies the contents     of a file into it.  The OID is then stored into a table.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$db </span><span style="color: #007700">= new </span><span style="color: #9876AA">PDO</span><span style="color: #007700">(</span><span style="color: #DD0000">'pgsql:dbname=test host=localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">$user</span><span style="color: #007700">, </span><span style="color: #9876AA">$pass</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setAttribute</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">ATTR_ERRMODE</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">ERRMODE_EXCEPTION</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">beginTransaction</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$oid </span><span style="color: #007700">= </span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">pgsqlLOBCreate</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$stream </span><span style="color: #007700">= </span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">pgsqlLOBOpen</span><span style="color: #007700">(</span><span style="color: #9876AA">$oid</span><span style="color: #007700">, </span><span style="color: #DD0000">'w'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$local </span><span style="color: #007700">= </span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #9876AA">$filename</span><span style="color: #007700">, </span><span style="color: #DD0000">'rb'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">stream_copy_to_stream</span><span style="color: #007700">(</span><span style="color: #9876AA">$local</span><span style="color: #007700">, </span><span style="color: #9876AA">$stream</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$local </span><span style="color: #007700">= </span><span style="color: #9876AA">null</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$stream </span><span style="color: #007700">= </span><span style="color: #9876AA">null</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$stmt </span><span style="color: #007700">= </span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">"INSERT INTO BLOBS (ident, oid) VALUES (?, ?)"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">(array(</span><span style="color: #9876AA">$some_id</span><span style="color: #007700">, </span><span style="color: #9876AA">$oid</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">commit</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdo.pgsqllobcreate-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PDO::pgsqlLOBOpen()} - Opens an existing large object stream</span></li>    <li class="member"><span class="function">{@link PDO::pgsqlLOBUnlink()} - Deletes the large object</span></li>    <li class="member"><span class="function">{@link pg_lo_create()} - 新建大对象</span></li>   </ul>  </span> </div></div>
     * @return string|false returns the OID of the newly created large object on success,*/
    public function pgsqlLOBCreate(): string|false {}

/**
*<div id="pdo.pgsqllobopen" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::pgsqlLOBOpen</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8, PECL pdo_pgsql &gt;= 1.0.2)</p><p class="refpurpose"><span class="refname">PDO::pgsqlLOBOpen</span> &mdash; <span class="dc-title">Opens an existing large object stream</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.pgsqllobopen-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::pgsqlLOBOpen</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$oid</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = &quot;rb&quot;</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">PDO::pgsqlLOBOpen()</strong></span> opens a stream to access the data   referenced by <span class="parameter" style="color:#3A95FF">oid</span>.  If <span class="parameter" style="color:#3A95FF">mode</span>   is <span>r</span>, the stream is opened for reading, if   <span class="parameter" style="color:#3A95FF">mode</span> is <span>w</span>, then the stream will   be opened for writing.  You can use all the usual filesystem functions,   such as <span class="function">{@link fread()}</span>, <span class="function">{@link fwrite()}</span> and   <span class="function">{@link fgets()}</span> to manipulate the contents of the stream.  </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    This function, and all manipulations of the large object,    must be called and carried out within a transaction.   </span>  </p></blockquote></div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.pgsqllobopen-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">oid</span></dt>     <dd>      <p class="para">       A large object identifier.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">mode</span></dt>     <dd>      <p class="para">       If mode is <span>r</span>, open the stream for reading.       If mode is <span>w</span>, open the stream for writing.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.pgsqllobopen-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a stream resource on success 或者在失败时返回 <strong><span>false</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdo.pgsqllobopen-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3335">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">PDO::pgsqlLOBOpen()</strong></span> example</strong></p>    <div class="example-contents"><p>     Following on from the <span class="function">{@link PDO::pgsqlLOBCreate()}</span>     example, this code snippet retrieves the large object from     the database and outputs it to the browser.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$db </span><span style="color: #007700">= new </span><span style="color: #9876AA">PDO</span><span style="color: #007700">(</span><span style="color: #DD0000">'pgsql:dbname=test host=localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">$user</span><span style="color: #007700">, </span><span style="color: #9876AA">$pass</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setAttribute</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">ATTR_ERRMODE</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">ERRMODE_EXCEPTION</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">beginTransaction</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$stmt </span><span style="color: #007700">= </span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">"select oid from BLOBS where ident = ?"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">(array(</span><span style="color: #9876AA">$some_id</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindColumn</span><span style="color: #007700">(</span><span style="color: #DD0000">'oid'</span><span style="color: #007700">, </span><span style="color: #9876AA">$oid</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">PARAM_STR</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetch</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_BOUND</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$stream </span><span style="color: #007700">= </span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">pgsqlLOBOpen</span><span style="color: #007700">(</span><span style="color: #9876AA">$oid</span><span style="color: #007700">, </span><span style="color: #DD0000">'r'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">header</span><span style="color: #007700">(</span><span style="color: #DD0000">"Content-type: application/octet-stream"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">fpassthru</span><span style="color: #007700">(</span><span style="color: #9876AA">$stream</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdo.pgsqllobopen-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PDO::pgsqlLOBCreate()} - Creates a new large object</span></li>    <li class="member"><span class="function">{@link PDO::pgsqlLOBUnlink()} - Deletes the large object</span></li>    <li class="member"><span class="function">{@link pg_lo_open()} - 打开大对象</span></li>   </ul>  </span> </div></div>
     * @return resource|false returns a stream resource on success or <b>FALSE</b> on failure.*/
    public function pgsqlLOBOpen(string $oid, string $mode = "rb") {}

/**
*<div id="pdo.pgsqllobunlink" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::pgsqlLOBUnlink</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8, PECL pdo_pgsql &gt;= 1.0.2)</p><p class="refpurpose"><span class="refname">PDO::pgsqlLOBUnlink</span> &mdash; <span class="dc-title">Deletes the large object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.pgsqllobunlink-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::pgsqlLOBUnlink</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$oid</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Deletes a large object from the database identified by OID.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    This function must be called within a transaction.   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.pgsqllobunlink-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">oid</span></dt>     <dd>      <p class="para">       A large object identifier      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.pgsqllobunlink-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdo.pgsqllobunlink-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3338">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">PDO::pgsqlLOBUnlink()</strong></span> example</strong></p>    <div class="example-contents"><p>     This example unlinks a large object from the database prior to deleting     the row that references it from the blobs table we&#039;ve been using in     our <span class="function">{@link PDO::pgsqlLOBCreate()}</span> and     <span class="function">{@link PDO::pgsqlLOBOpen()}</span> examples.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$db </span><span style="color: #007700">= new </span><span style="color: #9876AA">PDO</span><span style="color: #007700">(</span><span style="color: #DD0000">'pgsql:dbname=test host=localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">$user</span><span style="color: #007700">, </span><span style="color: #9876AA">$pass</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setAttribute</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">ATTR_ERRMODE</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">ERRMODE_EXCEPTION</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">beginTransaction</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">pgsqlLOBUnlink</span><span style="color: #007700">(</span><span style="color: #9876AA">$oid</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$stmt </span><span style="color: #007700">= </span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">"DELETE FROM BLOBS where ident = ?"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">(array(</span><span style="color: #9876AA">$some_id</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$db</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">commit</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdo.pgsqllobunlink-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PDO::pgsqlLOBOpen()} - Opens an existing large object stream</span></li>    <li class="member"><span class="function">{@link PDO::pgsqlLOBCreate()} - Creates a new large object</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function pgsqlLOBUnlink(string $oid): bool {}

/**
*<div id="pdo.pgsqlgetnotify" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::pgsqlGetNotify</h1>  <p class="verinfo">(PHP 5 &gt;= 5.6.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">PDO::pgsqlGetNotify</span> &mdash; <span class="dc-title">Get asynchronous notification</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.pgsqlgetnotify-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::pgsqlGetNotify</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$result_type</span><span class="initializer"> = <strong><span>PDO::FETCH_USE_DEFAULT</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$ms_timeout</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Returns a result set representing a pending asynchronous notification.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.pgsqlgetnotify-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">result_type</span></dt>     <dd>      <p class="para">       The format the result set should be returned as, represented as a       {@link <strong><code>PDO::FETCH_*</code></strong>}       constant.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">ms_timeout</span></dt>     <dd>      <p class="para">       The length of time to wait for a response, in milliseconds.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.pgsqlgetnotify-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   If one or more notifications is pending, returns a single row, with fields   <span>message</span> and <span>pid</span>, otherwise returns   <strong><span>false</span></strong>.  </p> </div></div>
     * @return array|false if one or more notifications is pending, returns a single row,*/
    public function pgsqlGetNotify(int $fetchMode = PDO::FETCH_DEFAULT, int $timeoutMilliseconds = 0): array|false {}

/**
*<div id="pdo.pgsqlgetpid" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDO::pgsqlGetPid</h1>  <p class="verinfo">(PHP 5 &gt;= 5.6.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">PDO::pgsqlGetPid</span> &mdash; <span class="dc-title">Get the server PID</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdo.pgsqlgetpid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDO::pgsqlGetPid</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Returns the server&#039;s PID.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdo.pgsqlgetpid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdo.pgsqlgetpid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The server&#039;s PID.  </p> </div></div>
     * @return int The server's PID.*/
    public function pgsqlGetPid(): int {}
}

/**
*<div id="class.pdostatement" class="reference"> <h1 class="title">PDOStatement 类</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 1.0.0)</p>   <div class="section" id="pdostatement.intro">   <h2 class="title">简介</h2>   <p class="para">    代表一条预处理语句，并在该语句被执行后代表一个相关的结果集。   </p>  </div>   <div class="section" id="pdostatement.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">PDOStatement</strong></strong>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.pdostatement.php#pdostatement.props.querystring">$<var class="varname">queryString</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.bindcolumn.php" class="methodname" style="color:#CC7832">bindColumn</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">int</span></span> <span class="parameter" style="color:#3A95FF">$column</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">&$var</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$type</span><span class="initializer"> = PDO::PARAM_STR</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$maxLength</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$driverOptions</span><span class="initializer"> = <strong><span>null</span></strong></span></span><br>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.bindparam.php" class="methodname" style="color:#CC7832">bindParam</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">int</span></span> <span class="parameter" style="color:#3A95FF">$param</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">&$var</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$type</span><span class="initializer"> = PDO::PARAM_STR</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$maxLength</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$driverOptions</span><span class="initializer"> = <strong><span>null</span></strong></span></span><br>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.bindvalue.php" class="methodname" style="color:#CC7832">bindValue</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">int</span></span> <span class="parameter" style="color:#3A95FF">$param</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$type</span><span class="initializer"> = PDO::PARAM_STR</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.closecursor.php" class="methodname" style="color:#CC7832">closeCursor</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.columncount.php" class="methodname" style="color:#CC7832">columnCount</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.debugdumpparams.php" class="methodname" style="color:#CC7832">debugDumpParams</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">bool</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.errorcode.php" class="methodname" style="color:#CC7832">errorCode</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">string</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.errorinfo.php" class="methodname" style="color:#CC7832">errorInfo</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.execute.php" class="methodname" style="color:#CC7832">execute</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$params</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.fetch.php" class="methodname" style="color:#CC7832">fetch</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = PDO::FETCH_DEFAULT</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$cursorOrientation</span><span class="initializer"> = PDO::FETCH_ORI_NEXT</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$cursorOffset</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.fetchall.php" class="methodname" style="color:#CC7832">fetchAll</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = PDO::FETCH_DEFAULT</span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.fetchall.php" class="methodname" style="color:#CC7832">fetchAll</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = PDO::FETCH_COLUMN</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$column</span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.fetchall.php" class="methodname" style="color:#CC7832">fetchAll</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = PDO::FETCH_CLASS</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$constructorArgs</span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.fetchall.php" class="methodname" style="color:#CC7832">fetchAll</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = PDO::FETCH_FUNC</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.fetchcolumn.php" class="methodname" style="color:#CC7832">fetchColumn</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$column</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.fetchobject.php" class="methodname" style="color:#CC7832">fetchObject</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = &quot;stdClass&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$constructorArgs</span><span class="initializer"> = []</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.getattribute.php" class="methodname" style="color:#CC7832">getAttribute</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.getcolumnmeta.php" class="methodname" style="color:#CC7832">getColumnMeta</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$column</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.getiterator.php" class="methodname" style="color:#CC7832">getIterator</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.nextrowset.php" class="methodname" style="color:#CC7832">nextRowset</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.rowcount.php" class="methodname" style="color:#CC7832">rowCount</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.setattribute.php" class="methodname" style="color:#CC7832">setAttribute</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$attribute</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.setfetchmode.php" class="methodname" style="color:#CC7832">setFetchMode</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.setfetchmode.php" class="methodname" style="color:#CC7832">setFetchMode</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = PDO::FETCH_COLUMN</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$colno</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.setfetchmode.php" class="methodname" style="color:#CC7832">setFetchMode</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = PDO::FETCH_CLASS</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$constructorArgs</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pdostatement.setfetchmode.php" class="methodname" style="color:#CC7832">setFetchMode</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = PDO::FETCH_INTO</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div>   <div class="section" id="pdostatement.props">   <h2 class="title">属性</h2>   <dl>         <dt id="pdostatement.props.querystring"><var class="varname">queryString</var></dt>     <dd>      <p class="para">       所用的查询字符串      </p>     </dd>       </dl>  </div>   <div class="section">   <h2 class="title">更新日志</h2>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        现在 <span class="classname"><strong class="classname">PDOStatement</strong></span> 的实现不是 <span class="interfacename"><a href="https://www.php.net/manual/zh/class.traversable.php" class="interfacename">Traversable</a></span>        而是 <span class="interfacename"><a href="https://www.php.net/manual/zh/class.iteratoraggregate.php" class="interfacename">IteratorAggregate</a></span>。       </td>      </tr>     </tbody>       </table>  </div> </div>   <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link PDOStatement::bindColumn} — 绑定一列到一个 PHP 变量</li><li>{@link PDOStatement::bindParam} — 绑定一个参数到指定的变量名</li><li>{@link PDOStatement::bindValue} — 把一个值绑定到一个参数</li><li>{@link PDOStatement::closeCursor} — 关闭游标，使语句能再次被执行</li><li>{@link PDOStatement::columnCount} — 返回结果集中的列数</li><li>{@link PDOStatement::debugDumpParams} — 打印一条 SQL 预处理命令</li><li>{@link PDOStatement::errorCode} — 获取跟上一次语句句柄操作相关的 SQLSTATE</li><li>{@link PDOStatement::errorInfo} — 获取跟上一次语句句柄操作相关的扩展错误信息</li><li>{@link PDOStatement::execute} — 执行预处理语句</li><li>{@link PDOStatement::fetch} — 从结果集中获取下一行</li><li>{@link PDOStatement::fetchAll} — 从结果集中获取剩余的行</li><li>{@link PDOStatement::fetchColumn} — 从结果集中的下一行返回单独的一列</li><li>{@link PDOStatement::fetchObject} — 获取下一行并作为一个对象返回</li><li>{@link PDOStatement::getAttribute} — 检索语句属性</li><li>{@link PDOStatement::getColumnMeta} — 返回结果集中一列的元数据</li><li>{@link PDOStatement::getIterator} — Gets result set iterator</li><li>{@link PDOStatement::nextRowset} — 在一个多行集合语句句柄中推进到下一个行集合</li><li>{@link PDOStatement::rowCount} — 返回受上一个 SQL 语句影响的行数</li><li>{@link PDOStatement::setAttribute} — 设置一个语句属性</li><li>{@link PDOStatement::setFetchMode} — 为语句设置默认的获取模式</li></ul></div>
*/
class PDOStatement implements IteratorAggregate
{
    /**
     * @var string
     */
    #[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
    public $queryString;

/**
*<div id="pdostatement.execute" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::execute</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">PDOStatement::execute</span> &mdash; <span class="dc-title">   执行预处理语句  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.execute-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::execute</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$params</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   执行<a href="https://www.php.net/manual/zh/pdo.prepared-statements.php" class="link">预处理语句</a>。如果预处理语句含有参数标记，必须选择下面其中一种做法：    <ul class="itemizedlist">    <li class="listitem"><p class="para">必须调用 <span class="methodname" style="color:#CC7832">{@link PDOStatement::bindParam()}</span> 和/或 <span class="methodname" style="color:#CC7832">{@link PDOStatement::bindValue()}</span> 以将变量或值（分别）绑定到参数标记。如果有的话，通过关联参数标记绑定的变量来传递输入值和取得输出值</p></li>    <li class="listitem">     <p class="para">或必须传递只作为输入参数值的数组</p>    </li>   </ul>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.execute-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">params</span></dt>     <dd>      <p class="para">       一个元素个数和将被执行的 SQL 语句中绑定的参数一样多的数组。所有的值作为 <strong><span>PDO::PARAM_STR</span></strong> 对待。      </p>      <p class="para">       多个值不能绑定到一个参数；比如，不允许绑定两个值到 IN（）子句中一个单独的命名参数。      </p>      <p class="para">       绑定的值不能比指定的多；如果在 <span class="parameter" style="color:#3A95FF">params</span> 中存在比 <span class="methodname" style="color:#CC7832">{@link PDO::prepare()}</span> 预处理的SQL 指定的多的键名，则此语句将会失败并发出一个错误。       </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.execute-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdostatement.execute-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_WARNING</span></strong>，则发出级别为 <strong><span>E_WARNING</span></strong> 的错误。</p><p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_EXCEPTION</span></strong>，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdostatement.execute-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-3206"><p><strong>示例 #1 执行绑定变量和值的预处理语句</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 通过绑定变量和值执行预处理语句 <br /></span><span style="color: #9876AA">$calories </span><span style="color: #007700">= </span><span style="color: #9876AA">150</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$colour </span><span style="color: #007700">= </span><span style="color: #DD0000">'gre'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT name, colour, calories<br />    FROM fruit<br />    WHERE calories &lt; :calories AND colour LIKE :colour'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindParam</span><span style="color: #007700">(</span><span style="color: #DD0000">'calories'</span><span style="color: #007700">, </span><span style="color: #9876AA">$calories</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">PARAM_INT</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// 名称也可以以冒号“:”为前缀（可选）<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindValue</span><span style="color: #007700">(</span><span style="color: #DD0000">':colour'</span><span style="color: #007700">, </span><span style="color: #DD0000">"%</span><span style="color: #9876AA">$colour</span><span style="color: #DD0000">%"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div>  <div class="example" id="example-3209"><p><strong>示例 #2 使用命名值数组执行预处理语句</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 通过传递一个含有插入值的数组执行一条预处理语句 <br /></span><span style="color: #9876AA">$calories </span><span style="color: #007700">= </span><span style="color: #9876AA">150</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$colour </span><span style="color: #007700">= </span><span style="color: #DD0000">'red'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT name, colour, calories<br />    FROM fruit<br />    WHERE calories &lt; :calories AND colour = :colour'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'calories' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$calories</span><span style="color: #007700">, </span><span style="color: #DD0000">'colour' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$colour</span><span style="color: #007700">));<br /></span><span style="color: #FF8000">// 数组键也可以以冒号“:”为前缀（可选）<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">(array(</span><span style="color: #DD0000">':calories' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$calories</span><span style="color: #007700">, </span><span style="color: #DD0000">':colour' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$colour</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div>  <div class="example" id="example-3212"><p><strong>示例 #3 使用位置值数组执行预处理语句</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 通过传递一个插入值的数组执行一条预处理语句 <br /></span><span style="color: #9876AA">$calories </span><span style="color: #007700">= </span><span style="color: #9876AA">150</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$colour </span><span style="color: #007700">= </span><span style="color: #DD0000">'red'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT name, colour, calories<br />    FROM fruit<br />    WHERE calories &lt; ? AND colour = ?'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">(array(</span><span style="color: #9876AA">$calories</span><span style="color: #007700">, </span><span style="color: #9876AA">$colour</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div>  <div class="example" id="example-3215"><p><strong>示例 #4 使用绑定到位置占位符的变量执行预处理语句</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 通过绑定 PHP 变量执行一条预处理语句 <br /></span><span style="color: #9876AA">$calories </span><span style="color: #007700">= </span><span style="color: #9876AA">150</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$colour </span><span style="color: #007700">= </span><span style="color: #DD0000">'red'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT name, colour, calories<br />    FROM fruit<br />    WHERE calories &lt; ? AND colour = ?'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindParam</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">$calories</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">PARAM_INT</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindParam</span><span style="color: #007700">(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">$colour</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">PARAM_STR</span><span style="color: #007700">, </span><span style="color: #9876AA">12</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div>  <div class="example" id="example-3218"><p><strong>示例 #5 使用数组执行一条含有 IN 子句的预处理语句</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//  使用一个数组的值执行一条含有 IN 子句的预处理语句 <br /></span><span style="color: #9876AA">$params </span><span style="color: #007700">= array(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">21</span><span style="color: #007700">, </span><span style="color: #9876AA">63</span><span style="color: #007700">, </span><span style="color: #9876AA">171</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">//  创建一个填充了和params相同数量占位符的字符串 <br /></span><span style="color: #9876AA">$place_holders </span><span style="color: #007700">= </span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">','</span><span style="color: #007700">, </span><span style="color: #9876AA">array_fill</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$params</span><span style="color: #007700">), </span><span style="color: #DD0000">'?'</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">//<br />    对于 $params 数组中的每个值，要预处理的语句包含足够的未命名占位符 。<br />    语句被执行时， $params 数组中的值被绑定到预处理语句中的占位符。<br />    这和使用 PDOStatement::bindParam() 不一样，因为它需要一个引用变量。<br />    PDOStatement::execute() 仅作为通过值绑定的替代。<br /><br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">"SELECT id, name FROM contacts WHERE id IN (</span><span style="color: #9876AA">$place_holders</span><span style="color: #DD0000">)"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">(</span><span style="color: #9876AA">$params</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-pdostatement.execute-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">   有些驱动在执行下一条语句前需要 <a href="https://www.php.net/manual/zh/pdostatement.closecursor.php" class="link">关闭游标</a> 。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdostatement.execute-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::prepare()} - 预处理要执行的语句，并返回语句对象</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::bindParam()} - 绑定一个参数到指定的变量名</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::fetch()} - 从结果集中获取下一行</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::fetchAll()} - 从结果集中获取剩余的行</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::fetchColumn()} - 从结果集中的下一行返回单独的一列</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function execute(#[LanguageLevelTypeAware(['8.0' => 'array|null'], default: '')] $params = null): bool {}

/**
*<div id="pdostatement.fetch" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::fetch</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">PDOStatement::fetch</span> &mdash; <span class="dc-title">   从结果集中获取下一行  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.fetch-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::fetch</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = PDO::FETCH_DEFAULT</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$cursorOrientation</span><span class="initializer"> = PDO::FETCH_ORI_NEXT</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$cursorOffset</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   从一个 PDOStatement 对象相关的结果集中获取下一行。<span class="parameter" style="color:#3A95FF">mode</span> 参数决定 POD 如何返回行。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.fetch-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">mode</span></dt>     <dd>      <p class="para">       控制下一行如何返回给调用者。此值必须是 <span>PDO::FETCH_*</span> 系列常量中的一个，缺省为 <span>PDO::ATTR_DEFAULT_FETCH_MODE</span> 的值 （默认为 <span>PDO::FETCH_BOTH</span> ）。       <ul class="itemizedlist">        <li class="listitem"><p class="para">         <span>PDO::FETCH_ASSOC</span>：返回一个索引为结果集列名的数组        </p></li>        <li class="listitem"><p class="para">         <span>PDO::FETCH_BOTH</span>（默认）：返回一个索引为结果集列名和以0开始的列号的数组        </p></li>        <li class="listitem"><p class="para">         <span>PDO::FETCH_BOUND</span>：返回 <strong><span>true</span></strong> ，并分配结果集中的列值给 <span class="methodname" style="color:#CC7832">{@link PDOStatement::bindColumn()}</span> 方法绑定的 PHP 变量。        </p></li>        <li class="listitem"><p class="para">         <span>PDO::FETCH_CLASS</span>：返回一个请求类的新实例，映射结果集中的列名到类中对应的属性名，然后调用构造函数，除非指定         <span>PDO::FETCH_PROPS_LATE</span>。如果 <span class="parameter" style="color:#3A95FF">mode</span> 包含 PDO::FETCH_CLASSTYPE（例如：<span>PDO::FETCH_CLASS |         PDO::FETCH_CLASSTYPE</span>），则类名由第一列的值决定        </p></li>        <li class="listitem"><p class="para">         <span>PDO::FETCH_INTO</span>：更新一个被请求类已存在的实例，映射结果集中的列到类中命名的属性        </p></li>        <li class="listitem"><p class="para">         <span>PDO::FETCH_LAZY</span>：结合使用 <span>PDO::FETCH_BOTH</span> 和 <span>PDO::FETCH_OBJ</span>，创建供用来访问的对象变量名        </p></li>        <li class="listitem"><p class="para">         <span>PDO::FETCH_NAMED</span>：返回与 <span>PDO::FETCH_ASSOC</span>         具有相同形式的数组，除了如果有多个同名列，则该键引用的值将是具有该列名的行中所有值的数组        </p></li>        <li class="listitem"><p class="para">         <span>PDO::FETCH_NUM</span>：返回一个索引为以0开始的结果集列号的数组        </p></li>        <li class="listitem"><p class="para">         <span>PDO::FETCH_OBJ</span>：返回一个属性名对应结果集列名的匿名对象        </p></li>        <li class="listitem"><p class="para">         <span>PDO::FETCH_PROPS_LATE</span>：当与 <span>PDO::FETCH_CLASS</span>         一起使用时，类的构造方法在从相应的列值分配属性之前被调用。        </p></li>       </ul>      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">cursorOrientation</span></dt>     <dd>      <p class="para">       对于 一个 PDOStatement 对象表示的可滚动游标，该值决定了哪一行将被返回给调用者。此值必须是 <span>PDO::FETCH_ORI_*</span> 系列常量中的一个，默认为 <span>PDO::FETCH_ORI_NEXT</span>。要想让 PDOStatement 对象使用可滚动游标，必须在用 <span class="methodname" style="color:#CC7832">{@link PDO::prepare()}</span> 预处理SQL语句时，设置 <span>PDO::ATTR_CURSOR</span> 属性为 <span>PDO::CURSOR_SCROLL</span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">cursorOffset</span></dt>     <dd>      <p class="para">        对于一个 <span class="parameter" style="color:#3A95FF">cursorOrientation</span> 参数设置为 <span>PDO::FETCH_ORI_ABS</span> 的 PDOStatement 对象代表的可滚动游标，此值指定结果集中想要获取行的绝对行号。      </p>      <p class="para">       对于一个 <span class="parameter" style="color:#3A95FF">cursorOrientation</span> 参数设置为 <span>PDO::FETCH_ORI_REL</span> 的 PDOStatement 对象代表的可滚动游标，此值指定想要获取行相对于调用 <span class="methodname" style="color:#CC7832"><strong>PDOStatement::fetch()</strong></span> 前游标的位置      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.fetch-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   此方法成功时返回的值依赖于获取类型。在所有情况下，失败或没有更多记录时都返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdostatement.fetch-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_WARNING</span></strong>，则发出级别为 <strong><span>E_WARNING</span></strong> 的错误。</p><p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_EXCEPTION</span></strong>，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdostatement.fetch-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3221"><p><strong>示例 #1  使用不同的提取方式获取行</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">"SELECT name, colour FROM fruit"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 运用 PDOStatement::fetch 风格 <br /></span><span style="color: #007700">print </span><span style="color: #DD0000">"PDO::FETCH_ASSOC: "</span><span style="color: #007700">;<br />print </span><span style="color: #DD0000">"Return next row as an array indexed by column name\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetch</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_ASSOC</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br />print </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br />print </span><span style="color: #DD0000">"PDO::FETCH_BOTH: "</span><span style="color: #007700">;<br />print </span><span style="color: #DD0000">"Return next row as an array indexed by both column name and number\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetch</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_BOTH</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br />print </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br />print </span><span style="color: #DD0000">"PDO::FETCH_LAZY: "</span><span style="color: #007700">;<br />print </span><span style="color: #DD0000">"Return next row as an anonymous object with column names as properties\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetch</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_LAZY</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br />print </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br />print </span><span style="color: #DD0000">"PDO::FETCH_OBJ: "</span><span style="color: #007700">;<br />print </span><span style="color: #DD0000">"Return next row as an anonymous object with column names as properties\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetch</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_OBJ</span><span style="color: #007700">);<br />print </span><span style="color: #9876AA">$result</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">name</span><span style="color: #007700">;<br />print </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>PDO::FETCH_ASSOC: Return next row as an array indexed by column name<br>Array<br>(<br>    [name] =&gt; apple<br>    [colour] =&gt; red<br>)<br><br>PDO::FETCH_BOTH: Return next row as an array indexed by both column name and number<br>Array<br>(<br>    [name] =&gt; banana<br>    [0] =&gt; banana<br>    [colour] =&gt; yellow<br>    [1] =&gt; yellow<br>)<br><br>PDO::FETCH_LAZY: Return next row as an anonymous object with column names as properties<br>PDORow Object<br>(<br>    [name] =&gt; orange<br>    [colour] =&gt; orange<br>)<br><br>PDO::FETCH_OBJ: Return next row as an anonymous object with column names as properties<br>kiwi<br></span></div>    </div>   </div>   <div class="example" id="example-3224"><p><strong>示例 #2 使用一个可滚动游标获取行</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">readDataForwards</span><span style="color: #007700">(</span><span style="color: #9876AA">$dbh</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$sql </span><span style="color: #007700">= </span><span style="color: #DD0000">'SELECT hand, won, bet FROM mynumbers ORDER BY BET'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$stmt </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #9876AA">$sql</span><span style="color: #007700">, array(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">ATTR_CURSOR </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">CURSOR_SCROLL</span><span style="color: #007700">));<br />    </span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br />    while (</span><span style="color: #9876AA">$row </span><span style="color: #007700">= </span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetch</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_NUM</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_ORI_NEXT</span><span style="color: #007700">)) {<br />        </span><span style="color: #9876AA">$data </span><span style="color: #007700">= </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\t" </span><span style="color: #007700">. </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\t" </span><span style="color: #007700">. </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />        print </span><span style="color: #9876AA">$data</span><span style="color: #007700">;<br />    }<br />}<br />function </span><span style="color: #9876AA">readDataBackwards</span><span style="color: #007700">(</span><span style="color: #9876AA">$dbh</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$sql </span><span style="color: #007700">= </span><span style="color: #DD0000">'SELECT hand, won, bet FROM mynumbers ORDER BY bet'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$stmt </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #9876AA">$sql</span><span style="color: #007700">, array(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">ATTR_CURSOR </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">CURSOR_SCROLL</span><span style="color: #007700">));<br />    </span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br />    </span><span style="color: #9876AA">$row </span><span style="color: #007700">= </span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetch</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_NUM</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_ORI_LAST</span><span style="color: #007700">);<br />    do {<br />        </span><span style="color: #9876AA">$data </span><span style="color: #007700">= </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\t" </span><span style="color: #007700">. </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\t" </span><span style="color: #007700">. </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />        print </span><span style="color: #9876AA">$data</span><span style="color: #007700">;<br />    } while (</span><span style="color: #9876AA">$row </span><span style="color: #007700">= </span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetch</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_NUM</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_ORI_PRIOR</span><span style="color: #007700">));<br />}<br /><br />print </span><span style="color: #DD0000">"Reading forwards:\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">readDataForwards</span><span style="color: #007700">(</span><span style="color: #9876AA">$conn</span><span style="color: #007700">);<br /><br />print </span><span style="color: #DD0000">"Reading backwards:\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">readDataBackwards</span><span style="color: #007700">(</span><span style="color: #9876AA">$conn</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Reading forwards:<br>21    10    5<br>16    0     5<br>19    20    10<br><br>Reading backwards:<br>19    20    10<br>16    0     5<br>21    10    5<br></span></div>    </div>   </div>   <div class="example" id="example-3227"><p><strong>示例 #3 构造顺序</strong></p>    <div class="example-contents"><p>     当通过 <span>PDO::FETCH_CLASS</span> 获取对象时，首先分配对象属性，然后调用类的构造方法。如果还指定了     <span>PDO::FETCH_PROPS_LATE</span>，则此顺序相反，即首先调用构造方法，然后分配属性。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Person<br /></span><span style="color: #007700">{<br />    private </span><span style="color: #9876AA">$name</span><span style="color: #007700">;<br /><br />    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">()<br />    {<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">tell</span><span style="color: #007700">();<br />    }<br /><br />    public function </span><span style="color: #9876AA">tell</span><span style="color: #007700">()<br />    {<br />        if (isset(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">name</span><span style="color: #007700">)) {<br />            echo </span><span style="color: #DD0000">"I am </span><span style="color: #007700">{</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">name</span><span style="color: #007700">}</span><span style="color: #DD0000">.\n"</span><span style="color: #007700">;<br />        } else {<br />            echo </span><span style="color: #DD0000">"I don't have a name yet.\n"</span><span style="color: #007700">;<br />        }<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">query</span><span style="color: #007700">(</span><span style="color: #DD0000">"SELECT * FROM people"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setFetchMode</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_CLASS</span><span style="color: #007700">, </span><span style="color: #DD0000">'Person'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$person </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetch</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$person</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">tell</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setFetchMode</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_CLASS</span><span style="color: #007700">|</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_PROPS_LATE</span><span style="color: #007700">, </span><span style="color: #DD0000">'Person'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$person </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetch</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$person</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">tell</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>I am Alice.<br>I am Alice.<br>I don&#039;t have a name yet.<br>I am Bob.<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdostatement.fetch-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::prepare()} - 预处理要执行的语句，并返回语句对象</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()} - 执行预处理语句</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::fetchAll()} - 从结果集中获取剩余的行</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::fetchColumn()} - 从结果集中的下一行返回单独的一列</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::fetchObject()} - 获取下一行并作为一个对象返回</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::setFetchMode()} - 为语句设置默认的获取模式</span></li>   </ul>  </span> </div></div>
     * @return mixed The return value of this function on success depends on the fetch type. In*/
    public function fetch(
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $mode = PDO::FETCH_DEFAULT,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $cursorOrientation = PDO::FETCH_ORI_NEXT,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $cursorOffset = 0
    ): mixed {}

/**
*<div id="pdostatement.bindparam" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::bindParam</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">PDOStatement::bindParam</span> &mdash; <span class="dc-title">   绑定一个参数到指定的变量名  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.bindparam-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::bindParam</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">int</span></span> <span class="parameter" style="color:#3A95FF">$param</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">&$var</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$type</span><span class="initializer"> = PDO::PARAM_STR</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$maxLength</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$driverOptions</span><span class="initializer"> = <strong><span>null</span></strong></span></span><br>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   绑定一个PHP变量到用作预处理的SQL语句中的对应命名占位符或问号占位符。 不同于 <span class="methodname" style="color:#CC7832">{@link PDOStatement::bindValue()}</span> ，此变量作为引用被绑定，并只在 <span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()}</span> 被调用的时候才取其值。  </p>  <p class="para">   大多数参数是输入参数，即，参数以只读的方式用来建立查询（但仍然可以根据 <span class="parameter" style="color:#3A95FF">type</span> 进行转换）。一些驱动支持调用存储过程并作为输出参数返回数据，一些支持作为输入/输出参数，既发送数据又接收更新后的数据。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.bindparam-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">param</span></dt>      <dd>       <p class="para">        参数标识符。对于使用命名占位符的预处理语句，应是类似 <var class="varname">:name</var> 形式的参数名。对于使用问号占位符的预处理语句，应是以1开始索引的参数位置。       </p>      </dd>              <dt><span class="parameter" style="color:#3A95FF">var</span></dt>      <dd>       <p class="para">        绑定到 SQL 语句参数的 PHP 变量名。       </p>      </dd>              <dt><span class="parameter" style="color:#3A95FF">type</span></dt>      <dd>       <p class="para">        使用 {@link <code class="literal">PDO::PARAM_*</code> 常量}明确地指定参数的类型。要从存储过程中返回 INOUT 参数，需要为 <span class="parameter" style="color:#3A95FF">type</span> 参数使用按位或操作符去设置 <strong><span>PDO::PARAM_INPUT_OUTPUT</span></strong> 位。       </p>      </dd>              <dt><span class="parameter" style="color:#3A95FF">maxLength</span></dt>      <dd>       <p class="para">        数据类型的长度。为表明参数是一个存储过程的  OUT 参数，必须明确地设置此长度。        仅当 <span class="parameter" style="color:#3A95FF">type</span> 参数为 <strong><span>PDO::PARAM_INPUT_OUTPUT</span></strong> 时才有意义。       </p>      </dd>              <dt><span class="parameter" style="color:#3A95FF">driverOptions</span></dt>     <dd>      <p class="para">               </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.bindparam-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdostatement.bindparam-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_WARNING</span></strong>，则发出级别为 <strong><span>E_WARNING</span></strong> 的错误。</p><p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_EXCEPTION</span></strong>，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdostatement.bindparam-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-3173"><p><strong>示例 #1 执行一条使用命名占位符的预处理语句</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 通过绑定的 PHP 变量执行一条预处理语句  <br /></span><span style="color: #9876AA">$calories </span><span style="color: #007700">= </span><span style="color: #9876AA">150</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$colour </span><span style="color: #007700">= </span><span style="color: #DD0000">'red'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT name, colour, calories<br />    FROM fruit<br />    WHERE calories &lt; :calories AND colour = :colour'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindParam</span><span style="color: #007700">(</span><span style="color: #DD0000">'calories'</span><span style="color: #007700">, </span><span style="color: #9876AA">$calories</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">PARAM_INT</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// 名称也可以以冒号“:”为前缀（可选）<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindParam</span><span style="color: #007700">(</span><span style="color: #DD0000">':colour'</span><span style="color: #007700">, </span><span style="color: #9876AA">$colour</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">PARAM_STR</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div>  <div class="example" id="example-3176"><p><strong>示例 #2  执行一条使用问号占位符的预处理语句 </strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//  通过绑定的 PHP 变量执行一条预处理语句 <br /></span><span style="color: #9876AA">$calories </span><span style="color: #007700">= </span><span style="color: #9876AA">150</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$colour </span><span style="color: #007700">= </span><span style="color: #DD0000">'red'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT name, colour, calories<br />    FROM fruit<br />    WHERE calories &lt; ? AND colour = ?'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindParam</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">$calories</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">PARAM_INT</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindParam</span><span style="color: #007700">(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">$colour</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">PARAM_STR</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div>  <div class="example" id="example-3179"><p><strong>示例 #3 使用 INOUT 参数调用一个存储过程</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 使用 INOUT 参数调用一个存储过程 <br /></span><span style="color: #9876AA">$colour </span><span style="color: #007700">= </span><span style="color: #DD0000">'red'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'CALL puree_fruit(?)'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindParam</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">$colour</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">PARAM_STR</span><span style="color: #007700">|</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">PARAM_INPUT_OUTPUT</span><span style="color: #007700">, </span><span style="color: #9876AA">12</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br />print </span><span style="color: #DD0000">"After pureeing fruit, the colour is: </span><span style="color: #9876AA">$colour</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdostatement.bindparam-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::prepare()} - 预处理要执行的语句，并返回语句对象</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()} - 执行预处理语句</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::bindValue()} - 把一个值绑定到一个参数</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function bindParam(
        #[LanguageLevelTypeAware(['8.0' => 'int|string'], default: '')] $param,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] &$var,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $type = PDO::PARAM_STR,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $maxLength = 0,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $driverOptions = null
    ): bool {}

/**
*<div id="pdostatement.bindcolumn" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::bindColumn</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">PDOStatement::bindColumn</span> &mdash; <span class="dc-title">    绑定一列到一个 PHP 变量  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.bindcolumn-description">  <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::bindColumn</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">int</span></span> <span class="parameter" style="color:#3A95FF">$column</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">&$var</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$type</span><span class="initializer"> = PDO::PARAM_STR</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$maxLength</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$driverOptions</span><span class="initializer"> = <strong><span>null</span></strong></span></span><br>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="methodname" style="color:#CC7832"><strong>PDOStatement::bindColumn()</strong></span> 安排特定变量绑定到查询结果集中的指定列。每次调用 <span class="methodname" style="color:#CC7832">{@link PDOStatement::fetch()}</span>   或 <span class="methodname" style="color:#CC7832">{@link PDOStatement::fetchAll()}</span> 都将更新所有绑定到列的变量。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    在语句执行前 PDO 有关列的信息并非总是可用，可移植的应用应在 <span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()}</span> <em>之后</em> 调用此函数（方法）。   </p>   <p class="para">   但是，当使用 <em>PgSQL 驱动</em>时，要想能绑定 LOB 列作为流，应用程序必须在调用 <span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()}</span> <em>之前</em> 调用此方法，否则大对象 OID 作为整数返回。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.bindcolumn-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">column</span></dt>     <dd>      <p class="para">       结果集中的列号（从1开始索引）或列名。如果使用列名，注意名称应该与由驱动返回的列名大小写保持一致。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">var</span></dt>     <dd>      <p class="para">       将绑定到列的 PHP 变量名称      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">type</span></dt>     <dd>      <p class="para">       通过 {@link <code class="literal">PDO::PARAM_*</code> 常量}指定的参数的数据类型。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">maxLength</span></dt>     <dd>      <p class="para">       预分配提示。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">driverOptions</span></dt>     <dd>      <p class="para">        驱动的可选参数。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.bindcolumn-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdostatement.bindcolumn-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_WARNING</span></strong>，则发出级别为 <strong><span>E_WARNING</span></strong> 的错误。</p><p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_EXCEPTION</span></strong>，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdostatement.bindcolumn-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3170">    <p><strong>示例 #1 把结果集输出绑定到 PHP 变量</strong></p>    <div class="example-contents"><p>    绑定结果集中的列到PHP变量是一种使每行包含的数据在应用程序中立即可用的有效方法。下面的示例演示了 PDO 怎样用多种选项和缺省值绑定和检索列。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$stmt </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT name, colour, calories FROM fruit'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 通过列号绑定 <br /></span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindColumn</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">$name</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindColumn</span><span style="color: #007700">(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">$colour</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 通过列名绑定 <br /></span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindColumn</span><span style="color: #007700">(</span><span style="color: #DD0000">'calories'</span><span style="color: #007700">, </span><span style="color: #9876AA">$cals</span><span style="color: #007700">);<br /><br />while (</span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetch</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_BOUND</span><span style="color: #007700">)) {<br />    print </span><span style="color: #9876AA">$name </span><span style="color: #007700">. </span><span style="color: #DD0000">"\t" </span><span style="color: #007700">. </span><span style="color: #9876AA">$colour </span><span style="color: #007700">. </span><span style="color: #DD0000">"\t" </span><span style="color: #007700">. </span><span style="color: #9876AA">$cals </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>apple   red     150<br>banana  yellow  175<br>kiwi    green   75<br>orange  orange  150<br>mango   red     200<br>strawberry      red     25<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdostatement.bindcolumn-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()} - 执行预处理语句</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::fetch()} - 从结果集中获取下一行</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::fetchAll()} - 从结果集中获取剩余的行</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::fetchColumn()} - 从结果集中的下一行返回单独的一列</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function bindColumn(
        #[LanguageLevelTypeAware(['8.0' => 'int|string'], default: '')] $column,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] &$var,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $type = PDO::PARAM_STR,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $maxLength = 0,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $driverOptions = null
    ): bool {}

/**
*<div id="pdostatement.bindvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::bindValue</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">PDOStatement::bindValue</span> &mdash; <span class="dc-title">   把一个值绑定到一个参数  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.bindvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::bindValue</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">int</span></span> <span class="parameter" style="color:#3A95FF">$param</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$type</span><span class="initializer"> = PDO::PARAM_STR</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   绑定一个值到用作预处理的 SQL 语句中的对应命名占位符或问号占位符。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.bindvalue-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">param</span></dt>      <dd>       <p class="para">        参数标识符。对于使用命名占位符的预处理语句，应是类似 <var class="varname">:name</var> 形式的参数名。对于使用问号占位符的预处理语句，应是以1开始索引的参数位置。       </p>      </dd>              <dt><span class="parameter" style="color:#3A95FF">value</span></dt>      <dd>       <p class="para">        绑定到参数的值       </p>      </dd>              <dt><span class="parameter" style="color:#3A95FF">type</span></dt>      <dd>       <p class="para">        使用 {@link <code class="literal">PDO::PARAM_*</code> 常量}明确地指定参数的类型。       </p>      </dd>        </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.bindvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdostatement.bindvalue-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_WARNING</span></strong>，则发出级别为 <strong><span>E_WARNING</span></strong> 的错误。</p><p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_EXCEPTION</span></strong>，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdostatement.bindvalue-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-3182"><p><strong>示例 #1 执行一条使用命名占位符的预处理语句</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 通过绑定的 PHP 变量执行一条预处理语句 <br /></span><span style="color: #9876AA">$calories </span><span style="color: #007700">= </span><span style="color: #9876AA">150</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$colour </span><span style="color: #007700">= </span><span style="color: #DD0000">'red'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT name, colour, calories<br />    FROM fruit<br />    WHERE calories &lt; :calories AND colour = :colour'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 使用名字设置参数值 <br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindValue</span><span style="color: #007700">(</span><span style="color: #DD0000">'calories'</span><span style="color: #007700">, </span><span style="color: #9876AA">$calories</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">PARAM_INT</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// 视需要，参数名也可以以冒号“:”为前缀 <br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindValue</span><span style="color: #007700">(</span><span style="color: #DD0000">':colour'</span><span style="color: #007700">, </span><span style="color: #9876AA">$colour</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">PARAM_STR</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div>  <div class="example" id="example-3185"><p><strong>示例 #2 执行一条使用问号占位符的预处理语句</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 通过绑定的 PHP 变量执行一条预处理语句 <br /></span><span style="color: #9876AA">$calories </span><span style="color: #007700">= </span><span style="color: #9876AA">150</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$colour </span><span style="color: #007700">= </span><span style="color: #DD0000">'red'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT name, colour, calories<br />    FROM fruit<br />    WHERE calories &lt; ? AND colour = ?'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindValue</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">$calories</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">PARAM_INT</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindValue</span><span style="color: #007700">(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">$colour</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">PARAM_STR</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdostatement.bindvalue-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::prepare()} - 预处理要执行的语句，并返回语句对象</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()} - 执行预处理语句</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::bindParam()} - 绑定一个参数到指定的变量名</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function bindValue(
        #[LanguageLevelTypeAware(['8.0' => 'int|string'], default: '')] $param,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $type = PDO::PARAM_STR
    ): bool {}

/**
*<div id="pdostatement.rowcount" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::rowCount</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">PDOStatement::rowCount</span> &mdash; <span class="dc-title">   返回受上一个 SQL 语句影响的行数  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.rowcount-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::rowCount</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   <span class="methodname" style="color:#CC7832"><strong>PDOStatement::rowCount()</strong></span> 返回上一个由对应的 <span>PDOStatement</span> 对象执行 DELETE、INSERT 或 UPDATE 语句受影响的行数。  </p>  <p class="para">   对于生成结果集的语句，例如 <span>SELECT</span>，行为是未定义的，并且对于每个驱动程序可能不同。某些数据库可能会返回该语句生成的行数（例如缓冲模式下的   MySQL），但不能保证所有数据库都具有这种行为，并且对于可移植的应用不应依赖于此方式。  </p>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:      <p class="para">      对 SQLite 驱动程序，此方法始终返回“0”（零），并且 PostgreSQL 驱动程序仅当将 <strong><span>PDO::ATTR_CURSOR</span></strong> 语句属性设置为 <strong><span>PDO::CURSOR_SCROLL</span></strong> 时返回“0”（零）。     </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.rowcount-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.rowcount-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回行数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdostatement.rowcount-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_WARNING</span></strong>，则发出级别为 <strong><span>E_WARNING</span></strong> 的错误。</p><p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_EXCEPTION</span></strong>，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。</p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdostatement.rowcount-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3254">    <p><strong>示例 #1 返回删除的行数</strong></p>    <div class="example-contents"><p>     <span class="methodname" style="color:#CC7832"><strong>PDOStatement::rowCount()</strong></span> 返回受 DELETE、INSERT 或 UPDATE 语句影响的行数。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//  从 FRUIT 数据表中删除所有行 <br /></span><span style="color: #9876AA">$del </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'DELETE FROM fruit'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$del</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">//  返回被删除的行数 <br /></span><span style="color: #007700">print </span><span style="color: #DD0000">"Return number of rows that were deleted:\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$count </span><span style="color: #007700">= </span><span style="color: #9876AA">$del</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rowCount</span><span style="color: #007700">();<br />print </span><span style="color: #DD0000">"Deleted </span><span style="color: #9876AA">$count</span><span style="color: #DD0000"> rows.\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Return number of rows that were deleted:<br>Deleted 9 rows.<br></span></div>    </div>   </div>   <div class="example" id="example-3257">    <p><strong>示例 #2 计算由一个 SELECT 语句返回的行数</strong></p>    <div class="example-contents"><p>     对于大多数数据库，<span class="methodname" style="color:#CC7832"><strong>PDOStatement::rowCount()</strong></span> 不能返回受一条 SELECT 语句影响的行数。替代的方法是，使用 <span class="methodname" style="color:#CC7832">{@link PDO::query()}</span>     来发出一条和原打算中的 SELECT 语句有相同条件表达式的 SELECT COUNT(*) 语句，然后用 <span class="methodname" style="color:#CC7832">{@link PDOStatement::fetchColumn()}</span> 来取得匹配的行数。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$sql </span><span style="color: #007700">= </span><span style="color: #DD0000">"SELECT COUNT(*) FROM fruit WHERE calories &gt; 100"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$res </span><span style="color: #007700">= </span><span style="color: #9876AA">$conn</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">query</span><span style="color: #007700">(</span><span style="color: #9876AA">$sql</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$count </span><span style="color: #007700">= </span><span style="color: #9876AA">$res</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetchColumn</span><span style="color: #007700">();<br /><br />print </span><span style="color: #DD0000">"There are " </span><span style="color: #007700">.  </span><span style="color: #9876AA">$count </span><span style="color: #007700">. </span><span style="color: #DD0000">" matching records."</span><span style="color: #007700">;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>There are 2 matching records.<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdostatement.rowcount-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::columnCount()} - 返回结果集中的列数</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::fetchColumn()} - 从结果集中的下一行返回单独的一列</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::query()} - 预处理并执行没有占位符的 SQL 语句</span></li>   </ul>  </span> </div></div>
     * @return int the number of rows.*/
    public function rowCount(): int {}

/**
*<div id="pdostatement.fetchcolumn" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::fetchColumn</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.9.0)</p><p class="refpurpose"><span class="refname">PDOStatement::fetchColumn</span> &mdash; <span class="dc-title">  从结果集中的下一行返回单独的一列  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.fetchcolumn-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::fetchColumn</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$column</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   从结果集中的下一行返回单独的一列，如果没有了，则返回 <strong><span>false</span></strong> 。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="methodname" style="color:#CC7832"><strong>PDOStatement::fetchColumn()</strong></span> 不应该用于检索 boolean 列，因为无法区分 <strong><span>false</span></strong>    值和没有更多行可检索。请改用 <span class="methodname" style="color:#CC7832">{@link PDOStatement::fetch()}</span>。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.fetchcolumn-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">column</span></dt>     <dd>      <p class="para">       你想从行里取回的列的索引数字（以0开始的索引）。如果没有提供值，则 <span class="methodname" style="color:#CC7832"><strong>PDOStatement::fetchColumn()</strong></span> 获取第一列。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.fetchcolumn-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="methodname" style="color:#CC7832"><strong>PDOStatement::fetchColumn()</strong></span> 从结果集中的下一行返回单独的一列，如果没有更多行，则返回 <strong><span>false</span></strong>。  </p>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    如果使用 <span class="methodname" style="color:#CC7832"><strong>PDOStatement::fetchColumn()</strong></span> 取回数据，则没有办法返回同一行的另外一列。   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdostatement.fetchcolumn-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_WARNING</span></strong>，则发出级别为 <strong><span>E_WARNING</span></strong> 的错误。</p><p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_EXCEPTION</span></strong>，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdostatement.fetchcolumn-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3245"><p><strong>示例 #1 返回下一行的第一列</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">"SELECT name, colour FROM fruit"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /><br />print </span><span style="color: #DD0000">"Fetch the first column from the first row in the result set:\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetchColumn</span><span style="color: #007700">();<br />print </span><span style="color: #DD0000">"name = </span><span style="color: #9876AA">$result</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br /><br />print </span><span style="color: #DD0000">"Fetch the second column from the second row in the result set:\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetchColumn</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br />print </span><span style="color: #DD0000">"colour = </span><span style="color: #9876AA">$result</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Fetch the first column from the first row in the result set:<br>name = lemon<br>Fetch the second column from the second row in the result set:<br>colour = red<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdostatement.fetchcolumn-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::query()} - 预处理并执行没有占位符的 SQL 语句</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::fetch()} - 从结果集中获取下一行</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::fetchAll()} - 从结果集中获取剩余的行</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::prepare()} - 预处理要执行的语句，并返回语句对象</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::setFetchMode()} - 为语句设置默认的获取模式</span></li>   </ul>  </span> </div></div>
     * @return mixed Returns a single column from the next row of a result*/
    public function fetchColumn(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $column = 0): mixed {}

/**
*<div id="pdostatement.fetchall" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::fetchAll</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">PDOStatement::fetchAll</span> &mdash; <span class="dc-title">   从结果集中获取剩余的行  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.fetchall-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::fetchAll</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = PDO::FETCH_DEFAULT</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::fetchAll</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = PDO::FETCH_COLUMN</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$column</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::fetchAll</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = PDO::FETCH_CLASS</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$constructorArgs</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::fetchAll</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = PDO::FETCH_FUNC</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766">array</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.fetchall-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">mode</span></dt>     <dd>      <p class="para">       控制返回数组的内容如同 <span class="methodname" style="color:#CC7832">{@link PDOStatement::fetch()}</span> 文档中记载的一样。默认为 <strong><span>PDO::ATTR_DEFAULT_FETCH_MODE</span></strong> 的值（ 其缺省值为 <strong><span>PDO::FETCH_BOTH</span></strong> ）      </p>      <p class="para">       想要返回一个包含结果集中单独一列所有值的数组，需要指定 <strong><span>PDO::FETCH_COLUMN</span></strong> 。通过指定 <span class="parameter" style="color:#3A95FF">column</span> 参数获取想要的列。      </p>      <p class="para">      想要获取结果集中单独一列的唯一值，需要将 <strong><span>PDO::FETCH_COLUMN</span></strong> 和 <strong><span>PDO::FETCH_UNIQUE</span></strong> 按位或。      </p>      <p class="para">       想要返回一个根据指定列把值分组后的关联数组，需要将 <strong><span>PDO::FETCH_COLUMN</span></strong> 和 <strong><span>PDO::FETCH_GROUP</span></strong> 按位或。      </p>     </dd>       </dl>   以下是依赖获取模式的动态参数。它们不能与命名参数一起使用。   <dl>         <dt><span class="parameter" style="color:#3A95FF">column</span></dt>     <dd>      <p class="para">       与 <strong><span>PDO::FETCH_COLUMN</span></strong> 一起使用。返回指定以 0 开始索引的列。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       与 <strong><span>PDO::FETCH_CLASS</span></strong>一起使用。返回指定类的实例，映射每行的列到类中对应的属性名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">constructorArgs</span></dt>     <dd>      <p class="para">       当 <span class="parameter" style="color:#3A95FF">mode</span> 参数为 <strong><span>PDO::FETCH_CLASS</span></strong> 时自定义类构造方法的参数。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para">       与 <strong><span>PDO::FETCH_FUNC</span></strong>一起使用。将每行的列作为参数传递给指定的函数，并返回调用函数后的结果。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.fetchall-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="methodname" style="color:#CC7832"><strong>PDOStatement::fetchAll()</strong></span> 返回一个包含结果集中所有剩余行的数组。此数组的每一行要么是一个列值的数组，要么是属性对应每个列名的一个对象。如果获取到的结果为 0，则返回空数组。  </p>  <p class="para">   使用此方法获取大结果集将导致系统负担加重且可能占用大量网络资源。与其取回所有数据后用PHP来操作，倒不如考虑使用数据库服务来处理结果集。例如，在取回数据并通过PHP处理前，在 SQL 中使用 WHERE  和 ORDER BY 子句来限定结果。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdostatement.fetchall-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_WARNING</span></strong>，则发出级别为 <strong><span>E_WARNING</span></strong> 的错误。</p><p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_EXCEPTION</span></strong>，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-pdostatement.fetchall-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       现在此方法始终返回 <span class="type" style="color:#EAB766">array</span>，之前可能在失败时返回 <strong><span>false</span></strong>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdostatement.fetchall-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3230"><p><strong>示例 #1 获取结果集中所有剩余的行</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">"SELECT name, colour FROM fruit"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 获取结果集中所有剩余的行 <br /></span><span style="color: #007700">print </span><span style="color: #DD0000">"Fetch all of the remaining rows in the result set:\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetchAll</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Fetch all of the remaining rows in the result set:<br>Array<br>(<br>    [0] =&gt; Array<br>        (<br>            [name] =&gt; apple<br>            [0] =&gt; apple<br>            [colour] =&gt; red<br>            [1] =&gt; red<br>        )<br><br>    [1] =&gt; Array<br>        (<br>            [name] =&gt; pear<br>            [0] =&gt; pear<br>            [colour] =&gt; green<br>            [1] =&gt; green<br>        )<br><br>    [2] =&gt; Array<br>        (<br>            [name] =&gt; watermelon<br>            [0] =&gt; watermelon<br>            [colour] =&gt; pink<br>            [1] =&gt; pink<br>        )<br><br>)<br></span></div>    </div>   </div>   <div class="example" id="example-3233"><p><strong>示例 #2 获取结果集中单独一列的所有值</strong></p>    <div class="example-contents"><p>     下面例子演示了如何从一个结果集中返回单独一列所有的值，尽管 SQL 语句自身可能返回每行多列。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">"SELECT name, colour FROM fruit"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 获取第一列所有值 <br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetchAll</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_COLUMN</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array(3)<br>(<br>    [0] =&gt;<br>    string(5) =&gt; apple<br>    [1] =&gt;<br>    string(4) =&gt; pear<br>    [2] =&gt;<br>    string(10) =&gt; watermelon<br>)<br></span></div>    </div>   </div>   <div class="example" id="example-3236"><p><strong>示例 #3 根据单独的一列把所有值分组</strong></p>    <div class="example-contents"><p>     下面例子演示了如何返回一个根据结果集中指定列的值分组的关联数组。该数组包含三个键：返回的 <span>apple</span> 和 <span>pear</span> 数组包含了两种不同的颜色，而返回的 <span>watermelon</span> 数组仅包含一种颜色。     </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$insert </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">"INSERT INTO fruit(name, colour) VALUES (?, ?)"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$insert</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">, </span><span style="color: #DD0000">'green'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$insert</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'pear'</span><span style="color: #007700">, </span><span style="color: #DD0000">'yellow'</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">"SELECT name, colour FROM fruit"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 根据第一列分组  <br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetchAll</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_COLUMN</span><span style="color: #007700">|</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_GROUP</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(3) {<br>  [&quot;apple&quot;]=&gt;<br>  array(2) {<br>    [0]=&gt;<br>    string(5) &quot;green&quot;<br>    [1]=&gt;<br>    string(3) &quot;red&quot;<br>  }<br>  [&quot;pear&quot;]=&gt;<br>  array(2) {<br>    [0]=&gt;<br>    string(5) &quot;green&quot;<br>    [1]=&gt;<br>    string(6) &quot;yellow&quot;<br>  }<br>  [&quot;watermelon&quot;]=&gt;<br>  array(1) {<br>    [0]=&gt;<br>    string(5) &quot;pink&quot;<br>  }<br>}<br><br></span></div>    </div>   </div>   <div class="example" id="example-3239"><p><strong>示例 #4 每行结果实例化一个类</strong></p>    <div class="example-contents"><p>     下面列子演示了 <strong><span>PDO::FETCH_CLASS</span></strong> 获取风格的行为。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">fruit </span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">$name</span><span style="color: #007700">;<br />    public </span><span style="color: #9876AA">$colour</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">"SELECT name, colour FROM fruit"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetchAll</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_CLASS</span><span style="color: #007700">, </span><span style="color: #DD0000">"fruit"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(3) {<br>  [0]=&gt;<br>  object(fruit)#1 (2) {<br>    [&quot;name&quot;]=&gt;<br>    string(5) &quot;apple&quot;<br>    [&quot;colour&quot;]=&gt;<br>    string(5) &quot;green&quot;<br>  }<br>  [1]=&gt;<br>  object(fruit)#2 (2) {<br>    [&quot;name&quot;]=&gt;<br>    string(4) &quot;pear&quot;<br>    [&quot;colour&quot;]=&gt;<br>    string(6) &quot;yellow&quot;<br>  }<br>  [2]=&gt;<br>  object(fruit)#3 (2) {<br>    [&quot;name&quot;]=&gt;<br>    string(10) &quot;watermelon&quot;<br>    [&quot;colour&quot;]=&gt;<br>    string(4) &quot;pink&quot;<br>  }<br>  [3]=&gt;<br>  object(fruit)#4 (2) {<br>    [&quot;name&quot;]=&gt;<br>    string(5) &quot;apple&quot;<br>    [&quot;colour&quot;]=&gt;<br>    string(3) &quot;red&quot;<br>  }<br>  [4]=&gt;<br>  object(fruit)#5 (2) {<br>    [&quot;name&quot;]=&gt;<br>    string(4) &quot;pear&quot;<br>    [&quot;colour&quot;]=&gt;<br>    string(5) &quot;green&quot;<br>  }<br>}<br></span></div>    </div>   </div>   <div class="example" id="example-3242"><p><strong>示例 #5 每行调用一次函数</strong></p>    <div class="example-contents"><p>     下面列子演示了 <strong><span>PDO::FETCH_FUNC</span></strong> 获取风格的行为。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">fruit</span><span style="color: #007700">(</span><span style="color: #9876AA">$name</span><span style="color: #007700">, </span><span style="color: #9876AA">$colour</span><span style="color: #007700">) {<br />    return </span><span style="color: #DD0000">"</span><span style="color: #007700">{</span><span style="color: #9876AA">$name</span><span style="color: #007700">}</span><span style="color: #DD0000">: </span><span style="color: #007700">{</span><span style="color: #9876AA">$colour</span><span style="color: #007700">}</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">"SELECT name, colour FROM fruit"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetchAll</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_FUNC</span><span style="color: #007700">, </span><span style="color: #DD0000">"fruit"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(3) {<br>  [0]=&gt;<br>  string(12) &quot;apple: green&quot;<br>  [1]=&gt;<br>  string(12) &quot;pear: yellow&quot;<br>  [2]=&gt;<br>  string(16) &quot;watermelon: pink&quot;<br>  [3]=&gt;<br>  string(10) &quot;apple: red&quot;<br>  [4]=&gt;<br>  string(11) &quot;pear: green&quot;<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdostatement.fetchall-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::query()} - 预处理并执行没有占位符的 SQL 语句</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::fetch()} - 从结果集中获取下一行</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::fetchColumn()} - 从结果集中的下一行返回单独的一列</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::prepare()} - 预处理要执行的语句，并返回语句对象</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::setFetchMode()} - 为语句设置默认的获取模式</span></li>   </ul>  </span> </div></div>
     * @return array|false <b>PDOStatement::fetchAll</b> returns an array containing*/
    public function fetchAll(
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $mode = PDO::FETCH_DEFAULT,
        #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $fetch_argument = null,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] ...$args
    ): array {}

/**
*<div id="pdostatement.fetchobject" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::fetchObject</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.2.4)</p><p class="refpurpose"><span class="refname">PDOStatement::fetchObject</span> &mdash; <span class="dc-title">获取下一行并作为一个对象返回</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.fetchobject-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::fetchObject</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = &quot;stdClass&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$constructorArgs</span><span class="initializer"> = []</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   获取下一行并作为一个对象返回。此函数（方法）是使用 <strong><span>PDO::FETCH_CLASS</span></strong> 或 <strong><span>PDO::FETCH_OBJ</span></strong> 风格的 <span class="methodname" style="color:#CC7832">{@link PDOStatement::fetch()}</span> 的一种替代。  </p>  <p class="para">   当获取对象时，它的属性从各自的列值中分配，然后调用它的构造函数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.fetchobject-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       创建类的名称。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">constructorArgs</span></dt>     <dd>      <p class="para">       此数组的元素被传递给构造方法。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.fetchobject-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个属性名对应于列名的所要求类的实例，  或者在失败时返回 <strong><span>false</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdostatement.fetchobject-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_WARNING</span></strong>，则发出级别为 <strong><span>E_WARNING</span></strong> 的错误。</p><p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_EXCEPTION</span></strong>，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdostatement.fetchobject-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::fetch()} - 从结果集中获取下一行</span></li>   </ul>  </span> </div></div>
     * @return T|stdClass|null an instance of the required class with property names that*/
    public function fetchObject(
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $class = "stdClass",
        #[LanguageLevelTypeAware(['8.0' => 'array'], default: '')] $constructorArgs = []
    ): object|false {}

/**
*<div id="pdostatement.errorcode" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::errorCode</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">PDOStatement::errorCode</span> &mdash; <span class="dc-title">    获取跟上一次语句句柄操作相关的 SQLSTATE  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.errorcode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::errorCode</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">string</span></span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.errorcode-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.errorcode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   与 <span class="methodname" style="color:#CC7832">{@link PDO::errorCode()}</span> 相同，只是 <span class="methodname" style="color:#CC7832"><strong>PDOStatement::errorCode()</strong></span> 只取回 PDOStatement 对象执行操作中的错误码。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdostatement.errorcode-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3200"><p><strong>示例 #1 检索 SQLSTATE 码</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 引发一个错误 --  BONES 数据表不存在 <br /></span><span style="color: #9876AA">$err </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT skull FROM bones'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$err</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /><br />echo </span><span style="color: #DD0000">"\nPDOStatement::errorCode(): "</span><span style="color: #007700">;<br />print </span><span style="color: #9876AA">$err</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">errorCode</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>PDOStatement::errorCode(): 42S02<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdostatement.errorcode-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::errorCode()} - 获取跟数据库句柄上一次操作相关的 SQLSTATE</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::errorInfo()} - Fetch extended error information associated with the last operation on the database handle</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::errorInfo()} - 获取跟上一次语句句柄操作相关的扩展错误信息</span></li>   </ul>  </span> </div></div>
     * @return string Identical to <b>PDO::errorCode</b>, except that*/
    public function errorCode(): ?string {}

/**
*<div id="pdostatement.errorinfo" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::errorInfo</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">PDOStatement::errorInfo</span> &mdash; <span class="dc-title">   获取跟上一次语句句柄操作相关的扩展错误信息  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.errorinfo-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::errorInfo</strong></span>(): <span class="type" style="color:#EAB766">array</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.errorinfo-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.errorinfo-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="methodname" style="color:#CC7832"><strong>PDOStatement::errorInfo()</strong></span> 返回一个关于上一次语句句柄执行操作的错误信息的数组。该数组至少包含下列字段：   <table class="doctable informaltable">         <thead>      <tr>       <th>Element</th>       <th>Information</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>0</td>       <td>SQLSTATE 错误码（一个由5个字母或数字组成的在 ANSI SQL 标准中定义的标识符）。</td>      </tr>      <tr>       <td>1</td>       <td>具体驱动错误码。</td>      </tr>      <tr>       <td>2</td>       <td>具体驱动错误信息。</td>      </tr>     </tbody>       </table>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdostatement.errorinfo-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3203"><p><strong>示例 #1 显示连接到DB2数据库的 PDO_ODBC 连接的 errorInfo() 的字段</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 激发一个错误 --  BONES 数据表不存在 <br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT skull FROM bones'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /><br />echo </span><span style="color: #DD0000">"\nPDOStatement::errorInfo():\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$arr </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">errorInfo</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>PDOStatement::errorInfo():<br>Array<br>(<br>    [0] =&gt; 42S02<br>    [1] =&gt; -204<br>    [2] =&gt; [IBM][CLI Driver][DB2/LINUX] SQL0204N  &quot;DANIELS.BONES&quot; is an undefined name.  SQLSTATE=42704<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdostatement.errorinfo-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::errorCode()} - 获取跟数据库句柄上一次操作相关的 SQLSTATE</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::errorInfo()} - Fetch extended error information associated with the last operation on the database handle</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::errorCode()} - 获取跟上一次语句句柄操作相关的 SQLSTATE</span></li>   </ul>  </span> </div></div>
     * @return array <b>PDOStatement::errorInfo</b> returns an array of*/
    public function errorInfo(): array {}

/**
*<div id="pdostatement.setattribute" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::setAttribute</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">PDOStatement::setAttribute</span> &mdash; <span class="dc-title">   设置一个语句属性  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.setattribute-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::setAttribute</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$attribute</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   给语句设置一个属性。当前，没有通用的属性可以设置，只有驱动特定的属性：   <ul class="itemizedlist">    <li class="listitem"><p class="para"><span>PDO::ATTR_CURSOR_NAME</span>    （Firebird 和 ODBC 特性）：     为 <span>UPDATE ... WHERE CURRENT OF</span> 设置游标名称。    </p></li>   </ul>   请注意，驱动特定的属性<em>不得</em>与其他驱动程序一起使用。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.setattribute-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">attribute</span></dt>     <dd>      <p class="para">       要修改的属性。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       设置 <span class="parameter" style="color:#3A95FF">attribute</span> 的值，属性的不同导致需要的类型也会不同。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.setattribute-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdostatement.setattribute-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::getAttribute()} - 取回一个数据库连接的属性</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::setAttribute()} - 设置属性</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::getAttribute()} - 检索语句属性</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function setAttribute(
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $attribute,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value
    ): bool {}

/**
*<div id="pdostatement.getattribute" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::getAttribute</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">PDOStatement::getAttribute</span> &mdash; <span class="dc-title">   检索语句属性  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.getattribute-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::getAttribute</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   得到语句的属性。当前，不存在通用的属性，只有驱动特定的属性：   <ul class="itemizedlist">    <li class="listitem"><p class="para"><span>PDO::ATTR_CURSOR_NAME</span>     （Firebird 和 ODBC 特性）：     获取 <span>UPDATE ... WHERE CURRENT OF</span> 的游标名称。    </p></li>   </ul>   请注意，驱动特定的属性<em>不得</em>与其他驱动程序一起使用。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.getattribute-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       要查询的属性。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.getattribute-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回属性值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdostatement.getattribute-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::getAttribute()} - 取回一个数据库连接的属性</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::setAttribute()} - 设置属性</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::setAttribute()} - 设置一个语句属性</span></li>   </ul>  </span> </div></div>
     * @return mixed the attribute value.*/
    public function getAttribute(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $name): mixed {}

/**
*<div id="pdostatement.columncount" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::columnCount</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">PDOStatement::columnCount</span> &mdash; <span class="dc-title">   返回结果集中的列数  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.columncount-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::columnCount</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   使用 <span class="methodname" style="color:#CC7832"><strong>PDOStatement::columnCount()</strong></span> 返回由 PDOStatement 对象代表的结果集中的列数。  </p>  <p class="para">   如果是由 <span class="methodname" style="color:#CC7832">{@link PDO::query()}</span> 返回的 PDOStatement 对象，则列数计算立即可用。  </p>  <p class="para">  如果是由 <span class="methodname" style="color:#CC7832">{@link PDO::prepare()}</span> 返回的 PDOStatement 对象，则在调用 <span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()}</span> 之前都不能准确地计算出列数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.columncount-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.columncount-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回由 PDOStatement 对象代表的结果集中的列数，即便结果集为空。如果没有结果集，则 <span class="methodname" style="color:#CC7832"><strong>PDOStatement::columnCount()</strong></span> 返回 <span>0</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdostatement.columncount-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_WARNING</span></strong>，则发出级别为 <strong><span>E_WARNING</span></strong> 的错误。</p><p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_EXCEPTION</span></strong>，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdostatement.columncount-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3191">    <p><strong>示例 #1 计算列数</strong></p>    <div class="example-contents"><p>     下面例子演示如何使用 <span class="methodname" style="color:#CC7832"><strong>PDOStatement::columnCount()</strong></span> 操作一个结果集和一个空集。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$dbh </span><span style="color: #007700">= new </span><span style="color: #9876AA">PDO</span><span style="color: #007700">(</span><span style="color: #DD0000">'odbc:sample'</span><span style="color: #007700">, </span><span style="color: #DD0000">'db2inst1'</span><span style="color: #007700">, </span><span style="color: #DD0000">'ibmdb2'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">"SELECT name, colour FROM fruit"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//  计算一个（不存在）的结果集中的列数 <br /></span><span style="color: #9876AA">$colcount </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">columnCount</span><span style="color: #007700">();<br />print </span><span style="color: #DD0000">"Before execute(), result set has </span><span style="color: #9876AA">$colcount</span><span style="color: #DD0000"> columns (should be 0)\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 计算结果集中的列数 <br /></span><span style="color: #9876AA">$colcount </span><span style="color: #007700">= </span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">columnCount</span><span style="color: #007700">();<br />print </span><span style="color: #DD0000">"After execute(), result set has </span><span style="color: #9876AA">$colcount</span><span style="color: #DD0000"> columns (should be 2)\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Before execute(), result set has 0 columns (should be 0)<br>After execute(), result set has 2 columns (should be 2)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdostatement.columncount-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::prepare()} - 预处理要执行的语句，并返回语句对象</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()} - 执行预处理语句</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::rowCount()} - 返回受上一个 SQL 语句影响的行数</span></li>   </ul>  </span> </div></div>
     * @return int the number of columns in the result set represented by the*/
    public function columnCount(): int {}

    /**
     * (PHP 5 &gt;= 5.1.0, PHP 7, PECL pdo &gt;= 0.2.0)<br/>
     * Returns metadata for a column in a result set
     * @link https://php.net/manual/en/pdostatement.getcolumnmeta.php
     * @param int $column <p>
     * The 0-indexed column in the result set.
     * </p>
     * @return array|false an associative array containing the following values representing
     * the metadata for a single column:
     * </p>
     * <table>
     * Column metadata
     * <tr valign="top">
     * <td>Name</td>
     * <td>Value</td>
     * </tr>
     * <tr valign="top">
     * <td>native_type</td>
     * <td>The PHP native type used to represent the column value.</td>
     * </tr>
     * <tr valign="top">
     * <td>driver:decl_type</td>
     * <td>The SQL type used to represent the column value in the database.
     * If the column in the result set is the result of a function, this value
     * is not returned by <b>PDOStatement::getColumnMeta</b>.
     * </td>
     * </tr>
     * <tr valign="top">
     * <td>flags</td>
     * <td>Any flags set for this column.</td>
     * </tr>
     * <tr valign="top">
     * <td>name</td>
     * <td>The name of this column as returned by the database.</td>
     * </tr>
     * <tr valign="top">
     * <td>table</td>
     * <td>The name of this column's table as returned by the database.</td>
     * </tr>
     * <tr valign="top">
     * <td>len</td>
     * <td>The length of this column. Normally -1 for
     * types other than floating point decimals.</td>
     * </tr>
     * <tr valign="top">
     * <td>precision</td>
     * <td>The numeric precision of this column. Normally
     * 0 for types other than floating point
     * decimals.</td>
     * </tr>
     * <tr valign="top">
     * <td>pdo_type</td>
     * <td>The type of this column as represented by the
     * PDO::PARAM_* constants.</td>
     * </tr>
     * </table>
     * <p>
     * Returns <b>FALSE</b> if the requested column does not exist in the result set,
     * or if no result set exists.
     */
    #[TentativeType]
    #[ArrayShape([
        "name" => "string",
        "len" => "int",
        "precision" => "int",
        "oci:decl_type" => "int|string",
        "native_type" => "string",
        "scale" => "int",
        "flags" => "array",
        "pdo_type" => "int"
    ])]
/**
*<div id="pdostatement.getcolumnmeta" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::getColumnMeta</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">PDOStatement::getColumnMeta</span> &mdash; <span class="dc-title">   返回结果集中一列的元数据  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.getcolumnmeta-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::getColumnMeta</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$column</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>    <p class="para rdfs-comment">   检索一个在结果集中以0开始索引的列的元数据作为一个关联数组。  </p>  <div class="warning"><strong class="warning">警告</strong>   <p class="simpara">    一些驱动程序可能没有实现 <span class="methodname" style="color:#CC7832"><strong>PDOStatement::getColumnMeta()</strong></span>，因为它是可选的。但是，手册中记录的所有    <a href="https://www.php.net/manual/zh/pdo.drivers.php" class="link">PDO 驱动程序</a>都实现了此功能。   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.getcolumnmeta-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">column</span></dt>      <dd>       <p class="para">        结果集中以0开始索引的列。       </p>      </dd>        </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.getcolumnmeta-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  返回一个关联数组，它包含了下列表示一个单独列的元数据的值：  </p>   <table class="doctable table">    <caption><strong>列的元数据</strong></caption>         <col />      <col />      <thead>      <tr>       <th>名称</th>       <th>值</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td><span>native_type</span></td>       <td>用于表示列值的 PHP 原生类型。</td>      </tr>      <tr>       <td><span>driver:decl_type</span></td>       <td>在数据库中用于表示列值的 SQL 类型。如果结果集中的列是一个函数的结果，则该值不能被 <span class="methodname" style="color:#CC7832"><strong>PDOStatement::getColumnMeta()</strong></span> 返回。       </td>      </tr>      <tr>       <td><span>flags</span></td>       <td>任何设置于此列的标记。</td>      </tr>      <tr>       <td><span>name</span></td>       <td>通过数据库返回的列名。</td>      </tr>      <tr>       <td><span>table</span></td>       <td>通过数据库返回的该列的表名</td>      </tr>      <tr>       <td><span>len</span></td>       <td>该列的长度。除浮点小数外通常为 <span>-1</span></td>      </tr>      <tr>       <td><span>precision</span></td>       <td>该列的数值精度。除浮点小数外通常为 <span>0</span>。</td>      </tr>      <tr>       <td><span>pdo_type</span></td>       <td>以 {@link <code class="literal">PDO::PARAM_*</code> 常量}为代表的列类型。</td>       </tr>     </tbody>       </table>  <p class="para">  如果结果集不存在，或者是请求的列在结果集中不存在，则返回 <strong><span>false</span></strong>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdostatement.getcolumnmeta-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3248">    <p><strong>示例 #1 检索列的元数据</strong></p>    <div class="example-contents"><p>     下面例子展示了在 PDO_SQLITE 中，检索一个通过函数（COUNT）生成单独列的元数据的结果。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$select </span><span style="color: #007700">= </span><span style="color: #9876AA">$DB</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">query</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT COUNT(*) FROM fruit'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$meta </span><span style="color: #007700">= </span><span style="color: #9876AA">$select</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getColumnMeta</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$meta</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(6) {<br>  [&quot;native_type&quot;]=&gt;<br>  string(7) &quot;integer&quot;<br>  [&quot;flags&quot;]=&gt;<br>  array(0) {<br>  }<br>  [&quot;name&quot;]=&gt;<br>  string(8) &quot;COUNT(*)&quot;<br>  [&quot;len&quot;]=&gt;<br>  int(-1)<br>  [&quot;precision&quot;]=&gt;<br>  int(0)<br>  [&quot;pdo_type&quot;]=&gt;<br>  int(2)<br>}<br><br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdostatement.getcolumnmeta-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::columnCount()} - 返回结果集中的列数</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::rowCount()} - 返回受上一个 SQL 语句影响的行数</span></li>   </ul>  </span> </div></div>
*/
    public function getColumnMeta(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $column): array|false {}

/**
*<div id="pdostatement.setfetchmode" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::setFetchMode</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">PDOStatement::setFetchMode</span> &mdash; <span class="dc-title">   为语句设置默认的获取模式  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.setfetchmode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::setFetchMode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::setFetchMode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = PDO::FETCH_COLUMN</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$colno</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::setFetchMode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = PDO::FETCH_CLASS</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$constructorArgs</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::setFetchMode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = PDO::FETCH_INTO</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766">bool</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.setfetchmode-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">mode</span></dt>     <dd>      <p class="para">       获取模式必须是 {@link <strong><code>PDO::FETCH_<span class="replaceable">*</span></code></strong>} 常量中的一个。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">colno</span></dt>     <dd>      <p class="para">       列号。      </p>     </dd>            <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       类名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">constructorArgs</span></dt>     <dd>      <p class="para">       构造方法参数。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       对象。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.setfetchmode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdostatement.setfetchmode-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3260">    <p><strong>示例 #1 设置获取模式</strong></p>    <div class="example-contents"><p>     以下示例演示了 <span class="methodname" style="color:#CC7832"><strong>PDOStatement::setFetchMode()</strong></span> 如何更改 PDOStatement 对象的默认获取模式。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$stmt </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">query</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT name, colour, calories FROM fruit'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setFetchMode</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_NUM</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$stmt </span><span style="color: #007700">as </span><span style="color: #9876AA">$row</span><span style="color: #007700">) {<br />    print </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\t" </span><span style="color: #007700">. </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\t" </span><span style="color: #007700">. </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>apple   red     150<br>banana  yellow  250<br>orange  orange  300<br>kiwi    brown   75<br>lemon   yellow  25<br>pear    green   150<br></span></div>    </div>   </div>  </span> </div> </div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function setFetchMode($mode, $className = null, $params = []) {}

/**
*<div id="pdostatement.setfetchmode" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::setFetchMode</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">PDOStatement::setFetchMode</span> &mdash; <span class="dc-title">   为语句设置默认的获取模式  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.setfetchmode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::setFetchMode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::setFetchMode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = PDO::FETCH_COLUMN</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$colno</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::setFetchMode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = PDO::FETCH_CLASS</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$constructorArgs</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::setFetchMode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = PDO::FETCH_INTO</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766">bool</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.setfetchmode-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">mode</span></dt>     <dd>      <p class="para">       获取模式必须是 {@link <strong><code>PDO::FETCH_<span class="replaceable">*</span></code></strong>} 常量中的一个。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">colno</span></dt>     <dd>      <p class="para">       列号。      </p>     </dd>            <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       类名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">constructorArgs</span></dt>     <dd>      <p class="para">       构造方法参数。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       对象。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.setfetchmode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdostatement.setfetchmode-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3260">    <p><strong>示例 #1 设置获取模式</strong></p>    <div class="example-contents"><p>     以下示例演示了 <span class="methodname" style="color:#CC7832"><strong>PDOStatement::setFetchMode()</strong></span> 如何更改 PDOStatement 对象的默认获取模式。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$stmt </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">query</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT name, colour, calories FROM fruit'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setFetchMode</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_NUM</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$stmt </span><span style="color: #007700">as </span><span style="color: #9876AA">$row</span><span style="color: #007700">) {<br />    print </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\t" </span><span style="color: #007700">. </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\t" </span><span style="color: #007700">. </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>apple   red     150<br>banana  yellow  250<br>orange  orange  300<br>kiwi    brown   75<br>lemon   yellow  25<br>pear    green   150<br></span></div>    </div>   </div>  </span> </div> </div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function setFetchMode($mode, $className = null, ...$params) {}

/**
*<div id="pdostatement.nextrowset" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::nextRowset</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.2.0)</p><p class="refpurpose"><span class="refname">PDOStatement::nextRowset</span> &mdash; <span class="dc-title">   在一个多行集合语句句柄中推进到下一个行集合  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.nextrowset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::nextRowset</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   一些数据库服务支持返回一个以上行集合（也被称为结果集）的存储过程。<span class="methodname" style="color:#CC7832"><strong>PDOStatement::nextRowset()</strong></span> 使你能够结合一个 PDOStatement 对象访问第二个以及后续的行集合。上述的每个行集合可以有不同的列集合。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.nextrowset-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.nextrowset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdostatement.nextrowset-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3251">    <p><strong>示例 #1 获取由一个存储过程返回的多个行集合</strong></p>    <div class="example-contents"><p>     下面例子展示了怎样调用一个存储过程，返回三个行集合的 <span>MULTIPLE_ROWSETS</span>。用 <a href="https://www.php.net/manual/zh/control-structures.do.while.php" class="link">do-while</a>      循环来循环调用 <span class="methodname" style="color:#CC7832"><strong>PDOStatement::nextRowset()</strong></span> 方法，直到返回 <strong><span>false</span></strong> 并且不再有行集合可用时结束循环。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$sql </span><span style="color: #007700">= </span><span style="color: #DD0000">'CALL multiple_rowsets()'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$stmt </span><span style="color: #007700">= </span><span style="color: #9876AA">$conn</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">query</span><span style="color: #007700">(</span><span style="color: #9876AA">$sql</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$i </span><span style="color: #007700">= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />do {<br />    </span><span style="color: #9876AA">$rowset </span><span style="color: #007700">= </span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetchAll</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_NUM</span><span style="color: #007700">);<br />    if (</span><span style="color: #9876AA">$rowset</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">printResultSet</span><span style="color: #007700">(</span><span style="color: #9876AA">$rowset</span><span style="color: #007700">, </span><span style="color: #9876AA">$i</span><span style="color: #007700">);<br />    }<br />    </span><span style="color: #9876AA">$i</span><span style="color: #007700">++;<br />} while (</span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">nextRowset</span><span style="color: #007700">());<br /><br />function </span><span style="color: #9876AA">printResultSet</span><span style="color: #007700">(&amp;</span><span style="color: #9876AA">$rowset</span><span style="color: #007700">, </span><span style="color: #9876AA">$i</span><span style="color: #007700">) {<br />    print </span><span style="color: #DD0000">"Result set </span><span style="color: #9876AA">$i</span><span style="color: #DD0000">:\n"</span><span style="color: #007700">;<br />    foreach (</span><span style="color: #9876AA">$rowset </span><span style="color: #007700">as </span><span style="color: #9876AA">$row</span><span style="color: #007700">) {<br />        foreach (</span><span style="color: #9876AA">$row </span><span style="color: #007700">as </span><span style="color: #9876AA">$col</span><span style="color: #007700">) {<br />            print </span><span style="color: #9876AA">$col </span><span style="color: #007700">. </span><span style="color: #DD0000">"\t"</span><span style="color: #007700">;<br />        }<br />        print </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />    }<br />    print </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Result set 1:<br>apple    red<br>banana   yellow<br><br>Result set 2:<br>orange   orange    150<br>banana   yellow    175<br><br>Result set 3:<br>lime     green<br>apple    red<br>banana   yellow<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdostatement.nextrowset-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::columnCount()} - 返回结果集中的列数</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()} - 执行预处理语句</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::getColumnMeta()} - 返回结果集中一列的元数据</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::query()} - 预处理并执行没有占位符的 SQL 语句</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function nextRowset(): bool {}

/**
*<div id="pdostatement.closecursor" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::closeCursor</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.9.0)</p><p class="refpurpose"><span class="refname">PDOStatement::closeCursor</span> &mdash; <span class="dc-title">   关闭游标，使语句能再次被执行  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.closecursor-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::closeCursor</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="methodname" style="color:#CC7832"><strong>PDOStatement::closeCursor()</strong></span> 释放到数据库服务的连接，以便发出其他 SQL 语句，但使语句处于一个可以被再次执行的状态。  </p>  <p class="para">   当上一个执行的 PDOStatement 对象仍有未取行时，此方法对那些不支持再执行一个 PDOStatement 对象的数据库驱动非常有用。 如果数据库驱动受此限制，则可能出现失序错误的问题。  </p>  <p class="para">   <span class="methodname" style="color:#CC7832"><strong>PDOStatement::closeCursor()</strong></span> 要么是一个可选驱动的特有方法（效率最高）来实现，要么是在没有驱动特定的功能时作为一般的PDO 备用来实现。一般的备用语义上与下面的 PHP 代码相同：   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">do {<br />    while (</span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetch</span><span style="color: #007700">())<br />        ;<br />    if (!</span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">nextRowset</span><span style="color: #007700">())<br />        break;<br />} while (</span><span style="color: #9876AA">true</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.closecursor-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.closecursor-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pdostatement.closecursor-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_WARNING</span></strong>，则发出级别为 <strong><span>E_WARNING</span></strong> 的错误。</p><p class="para">如果属性 <strong><span>PDO::ATTR_ERRMODE</span></strong> 设置为 <strong><span>PDO::ERRMODE_EXCEPTION</span></strong>，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span>。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdostatement.closecursor-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-3188">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">PDOStatement::closeCursor()</strong></span> 示例</strong></p>    <div class="example-contents"><p>    在下面示例中，<var class="varname">$stmt</var> PDOStatement 对象返回多行，但应用程序只取第一行，让 PDOStatement    对象处于一个有未取行的状态。为确保应用程序对所有数据库驱动都能正常运行，在执行 <var class="varname">$otherStmt</var>    PDOStatement 对象前，在 <var class="varname">$stmt</var> 调用 <span class="methodname" style="color:#CC7832"><strong>PDOStatement::closeCursor()</strong></span>。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建一个 PDOStatement 对象 <br /></span><span style="color: #9876AA">$stmt </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT foo FROM bar'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 创建第二个 PDOStatement 对象 <br /></span><span style="color: #9876AA">$otherStmt </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT foobaz FROM foobar'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 执行第一条语句 <br /></span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">//  从结果集中只取出第一行 <br /></span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetch</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// The following call to closeCursor() may be required by some drivers <br /></span><span style="color: #9876AA">$stmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">closeCursor</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">//  现在可以执行第二条语句了 <br /></span><span style="color: #9876AA">$otherStmt</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdostatement.closecursor-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::execute()} - 执行预处理语句</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function closeCursor(): bool {}

/**
*<div id="pdostatement.debugdumpparams" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::debugDumpParams</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8, PECL pdo &gt;= 0.9.0)</p><p class="refpurpose"><span class="refname">PDOStatement::debugDumpParams</span> &mdash; <span class="dc-title">   打印一条 SQL 预处理命令  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.debugdumpparams-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::debugDumpParams</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">bool</span></span></div>  <p class="para rdfs-comment">   直接打印出一条预处理语句包含的信息。提供正在使用的 <span>SQL</span> 查询、所用参数（<span>Params</span>）的数目、参数列表及其键名或位置、名称以及查询中的位置（如果当前 POD 驱动不支持，则为 -1），类型（<span>param_type</span>）为整数且 <span>is_param</span> 为布尔值。  </p>  <p class="para">   这是调试函数，在正常输出的情况下直接输出数据。   <div class="tip"><strong class="tip">小技巧</strong><p class="simpara">和直接将结果输出到浏览器一样，可使用<a href="https://www.php.net/manual/zh/book.outcontrol.php" class="link">输出控制函数</a>来捕获当前函数的输出，然后(例如)保存到一个 <span class="type" style="color:#EAB766">string</span> 中。</p></div>  </p>  <p class="para">   只打印此时此刻语句中的参数。额外的参数不存储在语句中，也就不会被输出。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.debugdumpparams-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.debugdumpparams-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <strong><span>null</span></strong>, 或者错误时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-pdostatement.debugdumpparams-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.2.0</td>       <td>        <span class="methodname" style="color:#CC7832"><strong>PDOStatement::debugDumpParams()</strong></span> 现在返回发送到数据库的 SQL，包括完整的原始查询（包括替换的占位符及其边界值）。请注意，这仅在打开模拟预处理语句时才可用。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pdostatement.debugdumpparams-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-3194">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>PDOStatement::debugDumpParams()</strong></span> 使用命名参数的示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 通过绑定 PHP 变量执行一条预处理语句 <br /></span><span style="color: #9876AA">$calories </span><span style="color: #007700">= </span><span style="color: #9876AA">150</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$colour </span><span style="color: #007700">= </span><span style="color: #DD0000">'red'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT name, colour, calories<br />    FROM fruit<br />    WHERE calories &lt; :calories AND colour = :colour'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindParam</span><span style="color: #007700">(</span><span style="color: #DD0000">':calories'</span><span style="color: #007700">, </span><span style="color: #9876AA">$calories</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">PARAM_INT</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindValue</span><span style="color: #007700">(</span><span style="color: #DD0000">':colour'</span><span style="color: #007700">, </span><span style="color: #9876AA">$colour</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">PARAM_STR</span><span style="color: #007700">, </span><span style="color: #9876AA">12</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">debugDumpParams</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>SQL: [96] SELECT name, colour, calories<br>    FROM fruit<br>    WHERE calories &lt; :calories AND colour = :colour<br>Params:  2<br>Key: Name: [9] :calories<br>paramno=-1<br>name=[9] &quot;:calories&quot;<br>is_param=1<br>param_type=1<br>Key: Name: [7] :colour<br>paramno=-1<br>name=[7] &quot;:colour&quot;<br>is_param=1<br>param_type=2<br></span></div>   </div>  </div>  <div class="example" id="example-3197">   <p><strong>示例 #2 <span class="methodname" style="color:#CC7832"><strong>PDOStatement::debugDumpParams()</strong></span> 使用未命名参数的示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">// 通过绑定 PHP 变量执行一条预处理语句 <br /></span><span style="color: #9876AA">$calories </span><span style="color: #007700">= </span><span style="color: #9876AA">150</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$colour </span><span style="color: #007700">= </span><span style="color: #DD0000">'red'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$name </span><span style="color: #007700">= </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$sth </span><span style="color: #007700">= </span><span style="color: #9876AA">$dbh</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepare</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT name, colour, calories<br />    FROM fruit<br />    WHERE calories &lt; ? AND colour = ?'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindParam</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">$calories</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">PARAM_INT</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindValue</span><span style="color: #007700">(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">$colour</span><span style="color: #007700">, </span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">PARAM_STR</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">execute</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$sth</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">debugDumpParams</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>SQL: [82] SELECT name, colour, calories<br>    FROM fruit<br>    WHERE calories &lt; ? AND colour = ?<br>Params:  2<br>Key: Position #0:<br>paramno=0<br>name=[0] &quot;&quot;<br>is_param=1<br>param_type=1<br>Key: Position #1:<br>paramno=1<br>name=[0] &quot;&quot;<br>is_param=1<br>param_type=2<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pdostatement.debugdumpparams-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDO::prepare()} - 预处理要执行的语句，并返回语句对象</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::bindParam()} - 绑定一个参数到指定的变量名</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link PDOStatement::bindValue()} - 把一个值绑定到一个参数</span></li>   </ul>  </span> </div></div>
     * @return bool|null No value is returned.*/
    public function debugDumpParams(): ?bool {}

    final public function __wakeup() {}

    final public function __sleep() {}

/**
*<div id="pdostatement.getiterator" class="refentry"> <div class="refnamediv">  <h1 class="refname">PDOStatement::getIterator</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">PDOStatement::getIterator</span> &mdash; <span class="dc-title">Gets result set iterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pdostatement.getiterator-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PDOStatement::getIterator</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></div>  <p class="para rdfs-comment">  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pdostatement.getiterator-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pdostatement.getiterator-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">     </p> </div></div>
     * @return Iterator*/
    public function getIterator(): Iterator {}
}

final class PDORow
{
    #[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
    public $queryString;
}

/**
 * (PHP 5 &gt;= 5.1.3, PHP 7, PECL pdo &gt;= 1.0.3)<br/>
 * Return an array of available PDO drivers
 * @link https://php.net/manual/en/pdo.getavailabledrivers.php
 * @return array <b>PDO::getAvailableDrivers</b> returns an array of PDO driver names. If
 * no drivers are available, it returns an empty array.
 */
#[Pure]
function pdo_drivers(): array {}

// End of PDO v.1.0.4dev
