<?php

// The Event class
use JetBrains\PhpStorm\Immutable;
use JetBrains\PhpStorm\Pure;

/**
*<div id="class.event" class="reference"> <h1 class="title">The Event class</h1>  <div class="partintro"><p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p>  <div class="section" id="event.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">Event</strong></span>    class represents and event firing on a file descriptor being ready to read    from or write to; a file descriptor becoming ready to read from or write    to(edge-triggered I/O only); a timeout expiring; a signal occurring; a    user-triggered event.   </p>   <p class="para">    Every event is associated with    <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="classname">EventBase</a></span>    . However, event will never fire until it is    <em>added</em>    (via    <span class="methodname" style="color:#CC7832">{@link Event::add()}</span>    ). An added event remains in    <em>pending</em>    state until the registered event occurs, thus turning it to    <em>active</em>    state. To handle events user may register a callback which is called when    event becomes active. If event is configured    <em>persistent</em>    , it remains pending. If it is not persistent, it stops being pending when    it&#039;s callback runs.    <span class="methodname" style="color:#CC7832">{@link Event::del()}</span>    method    <em>deletes</em>    event, thus making it non-pending. By means of    <span class="methodname" style="color:#CC7832">{@link Event::add()}</span>    method it could be added again.   </p>  </div>  <div class="section" id="event.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">final</span>      <span class="modifier">class</span> <strong class="classname">Event</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.event.php#event.constants.et"><var class="varname">ET</var></a></var><span class="initializer"> = 32</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.event.php#event.constants.persist"><var class="varname">PERSIST</var></a></var><span class="initializer"> = 16</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.event.php#event.constants.read"><var class="varname">READ</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.event.php#event.constants.write"><var class="varname">WRITE</var></a></var><span class="initializer"> = 4</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.event.php#event.constants.signal"><var class="varname">SIGNAL</var></a></var><span class="initializer"> = 8</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.event.php#event.constants.timeout"><var class="varname">TIMEOUT</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">readonly</span>     <span class="type" style="color:#EAB766">bool</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.event.php#event.props.pending">$<var class="varname">pending</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.add.php" class="methodname" style="color:#CC7832">add</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$timeout</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$fd</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$what</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>    <span class="initializer"> = NULL</span>   </span><br>)</div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.del.php" class="methodname" style="color:#CC7832">del</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.free.php" class="methodname" style="color:#CC7832">free</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.getsupportedmethods.php" class="methodname" style="color:#CC7832">getSupportedMethods</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.pending.php" class="methodname" style="color:#CC7832">pending</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$flags</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.set.php" class="methodname" style="color:#CC7832">set</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$fd</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$what</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$cb</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>   <span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.setpriority.php" class="methodname" style="color:#CC7832">setPriority</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.settimer.php" class="methodname" style="color:#CC7832">setTimer</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.signal.php" class="methodname" style="color:#CC7832">signal</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$signum</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>   <span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.event.php" class="type Event" style="color:#EAB766">Event</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.timer.php" class="methodname" style="color:#CC7832">timer</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.event.php" class="type Event" style="color:#EAB766">Event</a></span></div>   }</div>  </div>  <div class="section" id="event.props">   <h2 class="title">属性</h2>   <dl>         <dt id="event.props.pending">      <var class="varname">pending</var>     </dt>     <dd>      <p class="para">       Whether event is pending. See       <a href="https://www.php.net/manual/zh/event.persistence.php" class="link">About event persistence</a>       .      </p>     </dd>       </dl>  </div>  <div class="section" id="event.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="event.constants.et">      <strong><span>Event::ET</span></strong>     </dt>     <dd>      <p class="para">       Indicates that the event should be edge-triggered, if the underlying       event base backend supports edge-triggered events. This affects the       semantics of       <strong><span>Event::READ</span></strong>       and       <strong><span>Event::WRITE</span></strong>       .      </p>     </dd>             <dt id="event.constants.persist">      <strong><span>Event::PERSIST</span></strong>     </dt>     <dd>      <p class="para">       Indicates that the event is persistent. See       <a href="https://www.php.net/manual/zh/event.persistence.php" class="link">About event persistence</a>       .      </p>     </dd>             <dt id="event.constants.read">      <strong><span>Event::READ</span></strong>     </dt>     <dd>      <p class="para">       This flag indicates an event that becomes active when the provided file       descriptor(usually a stream resource, or socket) is ready for reading.      </p>     </dd>             <dt id="event.constants.write">      <strong><span>Event::WRITE</span></strong>     </dt>     <dd>      <p class="para">       This flag indicates an event that becomes active when the provided file       descriptor(usually a stream resource, or socket) is ready for reading.      </p>     </dd>             <dt id="event.constants.signal">      <strong><span>Event::SIGNAL</span></strong>     </dt>     <dd>      <p class="para">       Used to implement signal detection. See &quot;Constructing signal events&quot;       below.      </p>     </dd>             <dt id="event.constants.timeout">      <strong><span>Event::TIMEOUT</span></strong>     </dt>     <dd>      <p class="para">       This flag indicates an event that becomes active after a timeout       elapses.      </p>      <p class="para">       The       <strong><span>Event::TIMEOUT</span></strong>       flag is ignored when constructing an event: one can either set a       timeout when event is       <em>added</em>       , or not. It is set in the       <span>$what</span>       argument to the callback function when a timeout has occurred.      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Event::add} — Makes event pending</li><li>{@link Event::addSignal} — 别名 Event::add</li><li>{@link Event::addTimer} — 别名 Event::add</li><li>{@link Event::__construct} — Constructs Event object</li><li>{@link Event::del} — Makes event non-pending</li><li>{@link Event::delSignal} — 别名 Event::del</li><li>{@link Event::delTimer} — 别名 Event::del</li><li>{@link Event::free} — Make event non-pending and free resources allocated for this  event</li><li>{@link Event::getSupportedMethods} — Returns array with of the names of the methods supported in this version of Libevent</li><li>{@link Event::pending} — Detects whether event is pending or scheduled</li><li>{@link Event::set} — Re-configures event</li><li>{@link Event::setPriority} — Set event priority</li><li>{@link Event::setTimer} — Re-configures timer event</li><li>{@link Event::signal} — Constructs signal event object</li><li>{@link Event::timer} — Constructs timer event object</li></ul></div>
*/
final class Event
{
    /**
     * @var bool
     */
    #[Immutable]
    public $pending;
    public const ET = 32;
    public const PERSIST = 16;
    public const READ = 2;
    public const WRITE = 4;
    public const SIGNAL = 8;
    public const TIMEOUT = 1;

    /**
     * __construct.
     * Constructs Event object.
     *
     * @param EventBase $base
     * @param mixed     $fd
     * @param int       $what
     * @param callable  $cb
     * @param mixed     $arg  = null
     *
     * @see https://php.net/manual/en/event.construct.php
     */
    #[Pure]
    public function __construct(EventBase $base, $fd, int $what, callable $cb, $arg = null) {}

/**
*<div id="event.add" class="refentry"> <div class="refnamediv">  <h1 class="refname">Event::add</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">Event::add</span> &mdash; <span class="dc-title">Makes event pending</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-event.add-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>Event::add</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$timeout</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Marks event pending. Non-pending event will never occur, and the event   callback will never be called. In conjunction with   <span class="methodname" style="color:#CC7832">{@link Event::del()}</span>   an event could be re-scheduled by user at any time.  </p>  <p class="para">   If   <span class="methodname" style="color:#CC7832"><strong>Event::add()</strong></span>   is called on an already pending event, libevent will leave it pending and   re-schedule it with the given timeout(if specified). If in this case   timeout is not specified,   <span class="methodname" style="color:#CC7832"><strong>Event::add()</strong></span>   has no effect.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-event.add-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">timeout</span>    </dt>    <dd>     <span>      Timeout in seconds.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-event.add-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-event.add-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 Adding a custom signal</strong></p>   <div class="example-contents">    <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//<br />Launch it in a terminal window:<br /><br />$ php examples/signal.php<br /><br />In another terminal window find out the pid and send SIGTERM, e.g.:<br /><br />$ ps aux | grep examp<br />ruslan    3976  0.2  0.0 139896 11256 pts/1    S+   10:25   0:00 php examples/signal.php<br />ruslan    3978  0.0  0.0   9572   864 pts/2    S+   10:26   0:00 grep --color=auto examp<br />$ kill -TERM 3976<br /><br />At the first terminal window you should catch the following:<br /><br />Caught signal 15<br /><br /></span><span style="color: #007700">class </span><span style="color: #9876AA">MyEventSignal </span><span style="color: #007700">{<br />    private </span><span style="color: #9876AA">$base</span><span style="color: #007700">, </span><span style="color: #9876AA">$ev</span><span style="color: #007700">;<br /><br />    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">base </span><span style="color: #007700">= </span><span style="color: #9876AA">$base</span><span style="color: #007700">;<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ev </span><span style="color: #007700">= </span><span style="color: #9876AA">Event</span><span style="color: #007700">::</span><span style="color: #9876AA">signal</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">, </span><span style="color: #9876AA">SIGTERM</span><span style="color: #007700">, array(</span><span style="color: #9876AA">$this</span><span style="color: #007700">, </span><span style="color: #DD0000">'eventSighandler'</span><span style="color: #007700">));<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">add</span><span style="color: #007700">();<br />    }<br /><br />    public function </span><span style="color: #9876AA">eventSighandler</span><span style="color: #007700">(</span><span style="color: #9876AA">$no</span><span style="color: #007700">, </span><span style="color: #9876AA">$c</span><span style="color: #007700">) {<br />        echo </span><span style="color: #DD0000">"Caught signal </span><span style="color: #9876AA">$no</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exit</span><span style="color: #007700">();<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$c    </span><span style="color: #007700">= new </span><span style="color: #9876AA">MyEventSignal</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">loop</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Caught signal 15<br></span></div>   </div>  </div>  <div class="example" id="">   <p><strong>示例 #2 Adding a timer</strong></p>   <div class="example-contents">    <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$n </span><span style="color: #007700">= </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$e </span><span style="color: #007700">= </span><span style="color: #9876AA">Event</span><span style="color: #007700">::</span><span style="color: #9876AA">timer</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">, function(</span><span style="color: #9876AA">$n</span><span style="color: #007700">) use (&amp;</span><span style="color: #9876AA">$e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$n</span><span style="color: #DD0000"> seconds elapsed\n"</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">delTimer</span><span style="color: #007700">();<br />}, </span><span style="color: #9876AA">$n</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">add</span><span style="color: #007700">(</span><span style="color: #9876AA">$n</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">loop</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">    <div class="cdata"><span>2 seconds elapsed<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-event.add-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="methodname" style="color:#CC7832"><strong>Event::add()</strong></span></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link Event::del()} - Makes event non-pending</span></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link Event::signal()} - Constructs signal event object</span></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link Event::timer()} - Constructs timer event object</span></li>  </ul> </div></div>
     * @return bool*/
    public function add(float $timeout = -1): bool {}

/**
*<div id="event.addsignal" class="refentry"> <div class="refnamediv">  <h1 class="refname">Event::addSignal</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">Event::addSignal</span> &mdash; <span class="dc-title">别名 <span class="methodname" style="color:#CC7832">{@link Event::add()}</span></span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-event.addsignal-description">  <h3 class="title">说明</h3>  <p class="para">   此方法是该方法的别名： <span class="methodname" style="color:#CC7832">{@link Event::add()}</span>  </p> </div></div>
     * @return bool*/
    public function addSignal(float $timeout = -1): bool {}

/**
*<div id="event.addtimer" class="refentry"> <div class="refnamediv">  <h1 class="refname">Event::addTimer</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">Event::addTimer</span> &mdash; <span class="dc-title">别名 <span class="methodname" style="color:#CC7832">{@link Event::add()}</span></span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-event.addtimer-description">  <h3 class="title">说明</h3>  <p class="para">   此方法是该方法的别名： <span class="methodname" style="color:#CC7832">{@link Event::add()}</span>  </p> </div></div>
     * @return bool*/
    public function addTimer(float $timeout = -1): bool {}

/**
*<div id="event.del" class="refentry"> <div class="refnamediv">  <h1 class="refname">Event::del</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">Event::del</span> &mdash; <span class="dc-title">Makes event non-pending</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-event.del-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>Event::del</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Removes an event from the set of monitored events, i.e. makes it   non-pending.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-event.del-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-event.del-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-event.del-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Event::add()} - Makes event pending</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function del(): bool {}

/**
*<div id="event.delsignal" class="refentry"> <div class="refnamediv">  <h1 class="refname">Event::delSignal</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">Event::delSignal</span> &mdash; <span class="dc-title">别名 <span class="methodname" style="color:#CC7832">{@link Event::del()}</span></span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-event.delsignal-description">  <h3 class="title">说明</h3>  <p class="para">   此方法是该方法的别名： <span class="methodname" style="color:#CC7832">{@link Event::del()}</span>  </p> </div></div>
     * @return bool*/
    public function delSignal(): bool {}

/**
*<div id="event.deltimer" class="refentry"> <div class="refnamediv">  <h1 class="refname">Event::delTimer</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">Event::delTimer</span> &mdash; <span class="dc-title">别名 <span class="methodname" style="color:#CC7832">{@link Event::del()}</span></span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-event.deltimer-description">  <h3 class="title">说明</h3>  <p class="para">   此方法是该方法的别名： <span class="methodname" style="color:#CC7832">{@link Event::del()}</span>  </p> </div></div>
     * @return bool*/
    public function delTimer(): bool {}

/**
*<div id="event.free" class="refentry"> <div class="refnamediv">  <h1 class="refname">Event::free</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">Event::free</span> &mdash; <span class="dc-title">Make event non-pending and free resources allocated for this  event</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-event.free-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>Event::free</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Removes event from the list of events monitored by libevent, and free   resources allocated for the event.  </p>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    The    <span class="methodname" style="color:#CC7832"><strong>Event::free()</strong></span>    method currently doesn&#039;t destruct the object itself. To destruct the    object completely call    <span class="function">{@link unset()}</span>    , or assign <strong><span>null</span></strong>.   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-event.free-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-event.free-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-event.free-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Event::__construct()} - Constructs Event object</span>   </li>  </ul> </div></div>
*/
    public function free(): void {}

/**
*<div id="event.getsupportedmethods" class="refentry"> <div class="refnamediv">  <h1 class="refname">Event::getSupportedMethods</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">Event::getSupportedMethods</span> &mdash; <span class="dc-title">Returns array with of the names of the methods supported in this version of Libevent</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-event.getsupportedmethods-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Event::getSupportedMethods</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Returns array with of the names of the methods(backends) supported in this   version of Libevent.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-event.getsupportedmethods-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-event.getsupportedmethods-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns array.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-event.getsupportedmethods-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="classname"><a href="https://www.php.net/manual/zh/class.eventconfig.php" class="classname">EventConfig</a></span>   </li>  </ul> </div></div>
     * @return array*/
    public static function getSupportedMethods(): array {}

/**
*<div id="event.pending" class="refentry"> <div class="refnamediv">  <h1 class="refname">Event::pending</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">Event::pending</span> &mdash; <span class="dc-title">Detects whether event is pending or scheduled</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-event.pending-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>Event::pending</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$flags</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Detects whether event is pending or scheduled  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-event.pending-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">flags</span>    </dt>    <dd>     <span>      One of, or a composition of the following constants:      <strong><span>Event::READ</span></strong>      ,      <strong><span>Event::WRITE</span></strong>      ,      <strong><span>Event::TIMEOUT</span></strong>      ,      <strong><span>Event::SIGNAL</span></strong>      .     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-event.pending-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if event is pending or scheduled. Otherwise <strong><span>false</span></strong>.  </p> </div></div>
     * @return bool*/
    public function pending(int $flags): bool {}

/**
*<div id="event.set" class="refentry"> <div class="refnamediv">  <h1 class="refname">Event::set</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">Event::set</span> &mdash; <span class="dc-title">Re-configures event</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-event.set-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>Event::set</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$fd</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$what</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$cb</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>   <span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Re-configures event. Note, this function doesn&#039;t invoke obsolete libevent&#039;s   event_set. It calls event_assign instead.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-event.set-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">base</span>    </dt>    <dd>     <span>      The event base to associate the event with.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">fd</span>    </dt>    <dd>     <p class="para">      Stream resource, socket resource, or numeric file descriptor. For timer      events pass      <strong><span>-1</span></strong>      . For signal events pass the signal number, e.g.      <strong><span>SIGHUP</span></strong>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">what</span>    </dt>    <dd>     <p class="para">      See      <a href="https://www.php.net/manual/zh/event.flags.php" class="link">Event flags</a>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">cb</span>    </dt>    <dd>     <p class="para">      The event callback. See      <a href="https://www.php.net/manual/zh/event.callbacks.php" class="link">Event callbacks</a>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">arg</span>    </dt>    <dd>     <p class="para">      Custom data associated with the event. It will be passed to the callback      when the event becomes active.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-event.set-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool*/
    public function set(EventBase $base, $fd, int $what, callable $cb, $arg): bool {}

/**
*<div id="event.setpriority" class="refentry"> <div class="refnamediv">  <h1 class="refname">Event::setPriority</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">Event::setPriority</span> &mdash; <span class="dc-title">Set event priority</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-event.setpriority-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>Event::setPriority</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Set event priority.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-event.setpriority-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">priority</span>    </dt>    <dd>     <span>      The event priority.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-event.setpriority-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool*/
    public function setPriority(int $priority): bool {}

/**
*<div id="event.settimer" class="refentry"> <div class="refnamediv">  <h1 class="refname">Event::setTimer</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">Event::setTimer</span> &mdash; <span class="dc-title">Re-configures timer event</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-event.settimer-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>Event::setTimer</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Re-configures timer event. Note, this function doesn&#039;t invoke obsolete   libevent&#039;s   <span>event_set</span>   . It calls   <span>event_assign</span>   instead.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-event.settimer-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">base</span>    </dt>    <dd>     <span>      The event base to associate with.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">cb</span>    </dt>    <dd>     <p class="para">      The timer event callback. See      <a href="https://www.php.net/manual/zh/event.callbacks.php" class="link">Event callbacks</a>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">arg</span>    </dt>    <dd>     <p class="para">      Custom data. If specified, it will be passed to the callback when event      triggers.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-event.settimer-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-event.settimer-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Event::__construct()} - Constructs Event object</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Event::timer()} - Constructs timer event object</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function setTimer(EventBase $base, callable $cb, $arg): bool {}

/**
*<div id="event.signal" class="refentry"> <div class="refnamediv">  <h1 class="refname">Event::signal</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">Event::signal</span> &mdash; <span class="dc-title">Constructs signal event object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-event.signal-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Event::signal</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$signum</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>   <span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.event.php" class="type Event" style="color:#EAB766">Event</a></span></div>  <p class="para rdfs-comment">   Constructs signal event object. This is a straightforward method to create   a signal event. Note, the generic   <span class="methodname" style="color:#CC7832">{@link Event::__construct()}</span>   method can contruct signal event objects too.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-event.signal-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">base</span>    </dt>    <dd>     <span>      The associated event base object.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">signum</span>    </dt>    <dd>     <p class="para">      The signal number.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">cb</span>    </dt>    <dd>     <p class="para">      The signal event callback. See      <a href="https://www.php.net/manual/zh/event.callbacks.php" class="link">Event callbacks</a>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">arg</span>    </dt>    <dd>     <p class="para">      Custom data. If specified, it will be passed to the callback when event      triggers.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-event.signal-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns Event object on success. Otherwise <strong><span>false</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-event.signal-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <a href="https://www.php.net/manual/zh/event.constructing.signal.events.php" class="link">Constructing signal events</a>   </li>  </ul> </div></div>
     * @return Event*/
    public static function signal(EventBase $base, int $signum, callable $cb, $arg): Event {}

/**
*<div id="event.timer" class="refentry"> <div class="refnamediv">  <h1 class="refname">Event::timer</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">Event::timer</span> &mdash; <span class="dc-title">Constructs timer event object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-event.timer-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>Event::timer</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.event.php" class="type Event" style="color:#EAB766">Event</a></span></div>  <p class="para rdfs-comment">   Constructs timer event object. This is a straightforward method to create a   timer event. Note, the generic   <span class="methodname" style="color:#CC7832">{@link Event::__construct()}</span>   method can contruct signal event objects too.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-event.timer-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">base</span>    </dt>    <dd>     <span>      The associated event base object.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">cb</span>    </dt>    <dd>     <p class="para">      The signal event callback. See      <a href="https://www.php.net/manual/zh/event.callbacks.php" class="link">Event callbacks</a>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">arg</span>    </dt>    <dd>     <p class="para">      Custom data. If specified, it will be passed to the callback when event      triggers.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-event.timer-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns Event object on success. Otherwise <strong><span>false</span></strong>.  </p> </div></div>
     * @return Event*/
    public static function timer(EventBase $base, callable $cb, $arg): Event {}
}

//  The EventBase class
/**
*<div id="class.eventbase" class="reference"> <h1 class="title">The EventBase class</h1>  <div class="partintro"><p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p>  <div class="section" id="eventbase.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">EventBase</strong></span>    class represents libevent&#039;s event base structure. It holds a set of events    and can poll to determine which events are active.   </p>   <p class="para">    Each event base has a    <em>method</em>    , or a    <em>backend</em>    that it uses to determine which events are ready. The recognized methods    are:    <span>select</span>    ,    <span>poll</span>    ,    <span>epoll</span>    ,    <span>kqueue</span>    ,    <span>devpoll</span>    ,    <span>evport</span>    and    <span>win32</span>    .   </p>   <p class="para">    To configure event base to use, or avoid specific backend    <span class="classname"><a href="https://www.php.net/manual/zh/class.eventconfig.php" class="classname">EventConfig</a></span>    class can be used.   </p>   <div class="warning"><strong class="warning">警告</strong>    <p class="para">     Do     <em>NOT</em>     destroy the     <span class="classname"><strong class="classname">EventBase</strong></span>     object as long as resources of the associated     <span>Event</span>     objects are not released. Otherwise, it will lead to unpredictable     results!    </p>   </div>  </div>  <div class="section" id="eventbase.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">final</span>      <span class="modifier">class</span> <strong class="classname">EventBase</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbase.php#eventbase.constants.loop-once"><var class="varname">LOOP_ONCE</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbase.php#eventbase.constants.loop-nonblock"><var class="varname">LOOP_NONBLOCK</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbase.php#eventbase.constants.nolock"><var class="varname">NOLOCK</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbase.php#eventbase.constants.startup-iocp"><var class="varname">STARTUP_IOCP</var></a></var><span class="initializer"> = 4</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbase.php#eventbase.constants.no-cache-time"><var class="varname">NO_CACHE_TIME</var></a></var><span class="initializer"> = 8</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbase.php#eventbase.constants.epoll-use-changelist"><var class="varname">EPOLL_USE_CHANGELIST</var></a></var><span class="initializer"> = 16</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbase.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventconfig.php" class="type EventConfig" style="color:#EAB766">EventConfig</a></span>     <span class="parameter" style="color:#3A95FF">$cfg</span>   <span class="initializer"> = ?</span></span>)</div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbase.dispatch.php" class="methodname" style="color:#CC7832">dispatch</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbase.exit.php" class="methodname" style="color:#CC7832">exit</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$timeout</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbase.free.php" class="methodname" style="color:#CC7832">free</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbase.getfeatures.php" class="methodname" style="color:#CC7832">getFeatures</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbase.getmethod.php" class="methodname" style="color:#CC7832">getMethod</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbase.gettimeofdaycached.php" class="methodname" style="color:#CC7832">getTimeOfDayCached</a></span>(): <span class="type" style="color:#EAB766">float</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbase.gotexit.php" class="methodname" style="color:#CC7832">gotExit</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbase.gotstop.php" class="methodname" style="color:#CC7832">gotStop</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbase.loop.php" class="methodname" style="color:#CC7832">loop</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$flags</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbase.priorityinit.php" class="methodname" style="color:#CC7832">priorityInit</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$n_priorities</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbase.reinit.php" class="methodname" style="color:#CC7832">reInit</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbase.stop.php" class="methodname" style="color:#CC7832">stop</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div>  <div class="section" id="eventbase.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="eventbase.constants.loop-once">      <strong><span>EventBase::LOOP_ONCE</span></strong>     </dt>     <dd>      <p class="para">       Flag used with       <span class="methodname" style="color:#CC7832">{@link EventBase::loop()}</span>       method which means: &quot;block until libevent has an active event, then       exit once all active events have had their callbacks run&quot;.      </p>     </dd>             <dt id="eventbase.constants.loop-nonblock">      <strong><span>EventBase::LOOP_NONBLOCK</span></strong>     </dt>     <dd>      <p class="para">       Flag used with       <span class="methodname" style="color:#CC7832">{@link EventBase::loop()}</span>       method which means: &quot;do not block: see which events are ready now, run       the callbacks of the highest-priority ones, then exit&quot;.      </p>     </dd>             <dt id="eventbase.constants.nolock">      <strong><span>EventBase::NOLOCK</span></strong>     </dt>     <dd>      <p class="para">       Configuration flag. Do not allocate a lock for the event base, even if       we have locking set up&quot;.      </p>     </dd>             <dt id="eventbase.constants.startup-iocp">      <strong><span>EventBase::STARTUP_IOCP</span></strong>     </dt>     <dd>      <p class="para">       Windows-only configuration flag. Enables the IOCP dispatcher at       startup.      </p>     </dd>             <dt id="eventbase.constants.no-cache-time">      <strong><span>EventBase::NO_CACHE_TIME</span></strong>     </dt>     <dd>      <p class="para">       Configuration flag. Instead of checking the current time every time the       event loop is ready to run timeout callbacks, check after each timeout       callback.      </p>     </dd>             <dt id="eventbase.constants.epoll-use-changelist">      <strong><span>EventBase::EPOLL_USE_CHANGELIST</span></strong>     </dt>     <dd>      <p class="para">       If we are using the       <span>epoll</span>       backend, this flag says that it is safe to use Libevent&#039;s internal       change-list code to batch up adds and deletes in order to try to do as       few syscalls as possible.      </p>      <p class="para">       Setting this flag can make code run faster, but it may trigger a Linux       bug: it is not safe to use this flag if one has any fds cloned by       dup(), or its variants. Doing so will produce strange and       hard-to-diagnose bugs.      </p>      <p class="para">       This flag can also be activated by settnig the       <span>EVENT_EPOLL_USE_CHANGELIST</span>       environment variable.      </p>      <p class="para">       This flag has no effect if one winds up using a backend other than       <span>epoll</span>       .      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EventBase::__construct} — 构造 EventBase 对象</li><li>{@link EventBase::dispatch} — Dispatch pending events</li><li>{@link EventBase::exit} — Stop dispatching events</li><li>{@link EventBase::free} — Free resources allocated for this event base</li><li>{@link EventBase::getFeatures} — Returns bitmask of features supported</li><li>{@link EventBase::getMethod} — Returns event method in use</li><li>{@link EventBase::getTimeOfDayCached} — Returns the current event base time</li><li>{@link EventBase::gotExit} — Checks if the event loop was told to exit</li><li>{@link EventBase::gotStop} — Checks if the event loop was told to exit</li><li>{@link EventBase::loop} — Dispatch pending events</li><li>{@link EventBase::priorityInit} — Sets number of priorities per event base</li><li>{@link EventBase::reInit} — Re-initialize event base(after a fork)</li><li>{@link EventBase::stop} — Tells event_base to stop dispatching events</li></ul></div>
*/
final class EventBase
{
    public const LOOP_ONCE = 1;
    public const LOOP_NONBLOCK = 2;
    public const NOLOCK = 1;
    public const STARTUP_IOCP = 4;
    public const NO_CACHE_TIME = 8;
    public const EPOLL_USE_CHANGELIST = 16;
    public const IGNORE_ENV = 2;
    public const PRECISE_TIMER = 32;

    /**
     * __construct.
     * Constructs EventBase object.
     *
     * @param null|EventConfig $cfg
     *
     * @see https://php.net/manual/en/eventbase.construct.php
     */
    public function __construct(?EventConfig $cfg = null) {}

/**
*<div id="eventbase.dispatch" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBase::dispatch</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBase::dispatch</span> &mdash; <span class="dc-title">Dispatch pending events</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbase.dispatch-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBase::dispatch</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Wait for events to become active, and run their callbacks. The same as   <span class="methodname" style="color:#CC7832">{@link EventBase::loop()}</span>   with no flags set.  </p>  <p class="para">   <div class="warning"><strong class="warning">警告</strong>    <p class="para">     Do     <em>NOT</em>     destroy the     <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="classname">EventBase</a></span>     object as long as resources of the associated     <span>Event</span>     objects are not released. Otherwise, it will lead to unpredictable     results!    </p>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbase.dispatch-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbase.dispatch-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbase.dispatch-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBase::loop()} - Dispatch pending events</span>   </li>  </ul> </div></div>
*/
    public function dispatch(): void {}

/**
*<div id="eventbase.exit" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBase::exit</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBase::exit</span> &mdash; <span class="dc-title">Stop dispatching events</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbase.exit-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBase::exit</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$timeout</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Tells event base to stop optionally after given number of seconds.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbase.exit-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">timeout</span>    </dt>    <dd>     <span>      Optional number of seconds after which the event base should stop      dispatching events.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbase.exit-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbase.exit-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBase::stop()} - Tells event_base to stop dispatching events</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function exit(float $timeout = 0.0): bool {}

/**
*<div id="eventbase.free" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBase::free</h1>  <p class="verinfo">(PECL event &gt;= 1.10.0)</p><p class="refpurpose"><span class="refname">EventBase::free</span> &mdash; <span class="dc-title">Free resources allocated for this event base</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbase.free-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBase::free</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Deallocates resources allocated by libevent for the <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="classname">EventBase</a></span> object.  </p>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    The    <span class="methodname" style="color:#CC7832"><strong>EventBase::free()</strong></span>    method doesn&#039;t destruct the object itself. To destruct the    object completely call    <span class="function">{@link unset()}</span>    , or assign <strong><span>null</span></strong>.   </p>   <p class="para">    This method does not deallocate or detach any of the events that are    currently associated with the <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="classname">EventBase</a></span> object, or    close any of their sockets - beware.   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbase.free-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbase.free-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbase.free-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBase::__construct()} - 构造 EventBase 对象</span>   </li>  </ul> </div></div>
*/
    public function free(): void {}

/**
*<div id="eventbase.getfeatures" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBase::getFeatures</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBase::getFeatures</span> &mdash; <span class="dc-title">Returns bitmask of features supported</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbase.getfeatures-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBase::getFeatures</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Returns bitmask of features supported.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbase.getfeatures-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbase.getfeatures-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns integer representing a bitmask of supported features. See   {@link EventConfig::FEATURE_* constants}   .  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-eventbase.getfeatures-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1     <span class="function"><strong style="color:#CC7832">EventBase::getFeatures()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Avoiding "select" method<br /></span><span style="color: #9876AA">$cfg </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventConfig</span><span style="color: #007700">();<br />if (</span><span style="color: #9876AA">$cfg</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">avoidMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">"select"</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"'select' method avoided\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">(</span><span style="color: #9876AA">$cfg</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #DD0000">"Features:\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$features </span><span style="color: #007700">= </span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFeatures</span><span style="color: #007700">();<br />(</span><span style="color: #9876AA">$features </span><span style="color: #007700">&amp; </span><span style="color: #9876AA">EventConfig</span><span style="color: #007700">::</span><span style="color: #9876AA">FEATURE_ET</span><span style="color: #007700">) and print </span><span style="color: #DD0000">"ET - edge-triggered IO\n"</span><span style="color: #007700">;<br />(</span><span style="color: #9876AA">$features </span><span style="color: #007700">&amp; </span><span style="color: #9876AA">EventConfig</span><span style="color: #007700">::</span><span style="color: #9876AA">FEATURE_O1</span><span style="color: #007700">) and print </span><span style="color: #DD0000">"O1 - O(1) operation for adding/deleting events\n"</span><span style="color: #007700">;<br />(</span><span style="color: #9876AA">$features </span><span style="color: #007700">&amp; </span><span style="color: #9876AA">EventConfig</span><span style="color: #007700">::</span><span style="color: #9876AA">FEATURE_FDS</span><span style="color: #007700">) and print </span><span style="color: #DD0000">"FDS - arbitrary file descriptor types, and not just sockets\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbase.getfeatures-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBase::getMethod()} - Returns event method in use</span>   </li>   <li class="member">    <span class="classname"><a href="https://www.php.net/manual/zh/class.eventconfig.php" class="classname">EventConfig</a></span>   </li>  </ul> </div></div>
     * @return int*/
    public function getFeatures(): int {}

/**
*<div id="eventbase.getmethod" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBase::getMethod</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBase::getMethod</span> &mdash; <span class="dc-title">Returns event method in use</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbase.getmethod-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBase::getMethod</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment"> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbase.getmethod-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbase.getmethod-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   String representing used event method(backend).  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-eventbase.getmethod-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1     <span class="function"><strong style="color:#CC7832">EventBase::getMethod()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$cfg </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventConfig</span><span style="color: #007700">();<br />if (</span><span style="color: #9876AA">$cfg</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">avoidMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">"select"</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"'select' method avoided\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// Create event_base associated with the config<br /></span><span style="color: #9876AA">$base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">(</span><span style="color: #9876AA">$cfg</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"Event method used: "</span><span style="color: #007700">, </span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMethod</span><span style="color: #007700">(), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>`select&#039; method avoided<br>Event method used: epoll<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbase.getmethod-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBase::getFeatures()} - Returns bitmask of features supported</span>   </li>  </ul> </div></div>
     * @return string*/
    public function getMethod(): string {}

/**
*<div id="eventbase.gettimeofdaycached" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBase::getTimeOfDayCached</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBase::getTimeOfDayCached</span> &mdash; <span class="dc-title">Returns the current event base time</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbase.gettimeofdaycached-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBase::getTimeOfDayCached</strong></span>(): <span class="type" style="color:#EAB766">float</span></div>  <p class="para rdfs-comment">   On success returns the current time(as returned by   <span>gettimeofday()</span>   ), looking at the cached value in   <em>base</em>   if possible, and calling   <span>gettimeofday()</span>   or   <span>clock_gettime()</span>   as appropriate if there is no cached time.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbase.gettimeofdaycached-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbase.gettimeofdaycached-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current   <em>event base</em>   time. On failure returns <strong><span>null</span></strong>.  </p> </div></div>
     * @return float*/
    public function getTimeOfDayCached(): float {}

/**
*<div id="eventbase.gotexit" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBase::gotExit</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBase::gotExit</span> &mdash; <span class="dc-title">Checks if the event loop was told to exit</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbase.gotexit-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBase::gotExit</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the event loop was told to exit by   <span class="methodname" style="color:#CC7832">{@link EventBase::exit()}</span>   .  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbase.gotexit-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbase.gotexit-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong>, event loop was told to exit by   <span class="methodname" style="color:#CC7832">{@link EventBase::exit()}</span>   . Otherwise <strong><span>false</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbase.gotexit-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBase::exit()} - Stop dispatching events</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBase::stop()} - Tells event_base to stop dispatching events</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBase::gotStop()} - Checks if the event loop was told to exit</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function gotExit(): bool {}

/**
*<div id="eventbase.gotstop" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBase::gotStop</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBase::gotStop</span> &mdash; <span class="dc-title">Checks if the event loop was told to exit</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbase.gotstop-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBase::gotStop</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the event loop was told to exit by   <span class="methodname" style="color:#CC7832">{@link EventBase::stop()}</span>   .  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbase.gotstop-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbase.gotstop-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong>, event loop was told to stop by   <span class="methodname" style="color:#CC7832">{@link EventBase::stop()}</span>   . Otherwise <strong><span>false</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbase.gotstop-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBase::exit()} - Stop dispatching events</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBase::stop()} - Tells event_base to stop dispatching events</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBase::gotExit()} - Checks if the event loop was told to exit</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function gotStop(): bool {}

/**
*<div id="eventbase.loop" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBase::loop</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBase::loop</span> &mdash; <span class="dc-title">Dispatch pending events</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbase.loop-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBase::loop</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$flags</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Wait for events to become active, and run their callbacks.  </p>  <p class="para">   <div class="warning"><strong class="warning">警告</strong>    <p class="para">     Do     <em>NOT</em>     destroy the     <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="classname">EventBase</a></span>     object as long as resources of the associated     <span>Event</span>     objects are not released. Otherwise, it will lead to unpredictable     results!    </p>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbase.loop-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">flags</span>    </dt>    <dd>     <span>      Optional flags. One of      <span>EventBase::LOOP_*</span>      constants. See      <a href="https://www.php.net/manual/zh/class.eventbase.php#eventbase.constants" class="link">EventBase constants</a>      .     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbase.loop-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbase.loop-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBase::dispatch()} - Dispatch pending events</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function loop(int $flags = -1): bool {}

/**
*<div id="eventbase.priorityinit" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBase::priorityInit</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBase::priorityInit</span> &mdash; <span class="dc-title">Sets number of priorities per event base</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbase.priorityinit-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBase::priorityInit</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$n_priorities</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Sets number of priorities per event base.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbase.priorityinit-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">n_priorities</span>    </dt>    <dd>     <span>      The number of priorities per event base.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbase.priorityinit-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbase.priorityinit-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Event::setPriority()} - Set event priority</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function priorityInit(int $n_priorities): bool {}

/**
*<div id="eventbase.reinit" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBase::reInit</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBase::reInit</span> &mdash; <span class="dc-title">Re-initialize event base(after a fork)</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbase.reinit-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBase::reInit</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Re-initialize event base. Should be called after a fork.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbase.reinit-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbase.reinit-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool*/
    public function reInit(): bool {}

    /**
     * Tells event_base to resume previously stopped event
     * @return bool
     * @since libevent version 2.1.2-alpha
     * @see https://bitbucket.org/osmanov/pecl-event/src/8e5ab7303f3ef7827b71f31904a51b3f26dd1ac2/php8/classes/base.c#lines-387
     */
    public function resume(): bool {}

/**
*<div id="eventbase.stop" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBase::stop</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBase::stop</span> &mdash; <span class="dc-title">Tells event_base to stop dispatching events</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbase.stop-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBase::stop</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Tells event_base to stop dispatching events  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbase.stop-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbase.stop-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbase.stop-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBase::exit()} - Stop dispatching events</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBase::gotStop()} - Checks if the event loop was told to exit</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function stop(): bool {}

    /**
     * Updates cache time
     * @return bool
     * @since libevent 2.1.1-alpha
     * @see https://bitbucket.org/osmanov/pecl-event/src/8e5ab7303f3ef7827b71f31904a51b3f26dd1ac2/php8/classes/base.c#lines-343
     */
    public function updateCacheTime(): bool {}
}

// The EventBuffer class
/**
*<div id="class.eventbuffer" class="reference"> <h1 class="title">The EventBuffer class</h1>  <div class="partintro"><p class="verinfo">(PECL event &gt;= 1.5.0)</p>  <div class="section" id="eventbuffer.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">EventBuffer</strong></span>    represents Libevent&#039;s &quot;evbuffer&quot;, an utility functionality for buffered    I/O.   </p>   <p class="para">    Event buffers are meant to be generally useful for doing the &quot;buffer&quot; part    of buffered network I/O.   </p>  </div>  <div class="section" id="eventbuffer.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">EventBuffer</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbuffer.php#eventbuffer.constants.eol-any"><var class="varname">EOL_ANY</var></a></var><span class="initializer"> = 0</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbuffer.php#eventbuffer.constants.eol-crlf"><var class="varname">EOL_CRLF</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbuffer.php#eventbuffer.constants.eol-crlf-strict"><var class="varname">EOL_CRLF_STRICT</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbuffer.php#eventbuffer.constants.eol-lf"><var class="varname">EOL_LF</var></a></var><span class="initializer"> = 3</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbuffer.php#eventbuffer.constants.ptr-set"><var class="varname">PTR_SET</var></a></var><span class="initializer"> = 0</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbuffer.php#eventbuffer.constants.ptr-add"><var class="varname">PTR_ADD</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">readonly</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.eventbuffer.php#eventbuffer.props.length">$<var class="varname">length</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">readonly</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.eventbuffer.php#eventbuffer.props.contiguous-space">$<var class="varname">contiguous_space</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.add.php" class="methodname" style="color:#CC7832">add</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$data</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.addbuffer.php" class="methodname" style="color:#CC7832">addBuffer</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span>     <span class="parameter" style="color:#3A95FF">$buf</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.appendfrom.php" class="methodname" style="color:#CC7832">appendFrom</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span>     <span class="parameter" style="color:#3A95FF">$buf</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$len</span>   </span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>()</div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.copyout.php" class="methodname" style="color:#CC7832">copyout</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">&$data</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$max_bytes</span>   </span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.drain.php" class="methodname" style="color:#CC7832">drain</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$len</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.enablelocking.php" class="methodname" style="color:#CC7832">enableLocking</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.expand.php" class="methodname" style="color:#CC7832">expand</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$len</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.freeze.php" class="methodname" style="color:#CC7832">freeze</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$at_front</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.lock.php" class="methodname" style="color:#CC7832">lock</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.prepend.php" class="methodname" style="color:#CC7832">prepend</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$data</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.prependbuffer.php" class="methodname" style="color:#CC7832">prependBuffer</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span>     <span class="parameter" style="color:#3A95FF">$buf</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.pullup.php" class="methodname" style="color:#CC7832">pullup</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$size</span>   </span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.read.php" class="methodname" style="color:#CC7832">read</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$max_bytes</span>   </span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.read.php" class="methodname" style="color:#CC7832">read</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$fd</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$howmuch</span>   </span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.readline.php" class="methodname" style="color:#CC7832">readLine</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$eol_style</span>   </span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.search.php" class="methodname" style="color:#CC7832">search</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$what</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$start</span>    <span class="initializer"> = -1</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$end</span>    <span class="initializer"> = -1</span>   </span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.searcheol.php" class="methodname" style="color:#CC7832">searchEol</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$start</span>    <span class="initializer"> = -1</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$eol_style</span>    <span class="initializer"> =      <strong><span>EventBuffer::EOL_ANY</span></strong>    </span>   </span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.substr.php" class="methodname" style="color:#CC7832">substr</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$start</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$length</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.unfreeze.php" class="methodname" style="color:#CC7832">unfreeze</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$at_front</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.unlock.php" class="methodname" style="color:#CC7832">unlock</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbuffer.write.php" class="methodname" style="color:#CC7832">write</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$fd</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$howmuch</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">int</span></div>   }</div>  </div>  <div class="section" id="eventbuffer.props">   <h2 class="title">属性</h2>   <dl>         <dt id="eventbuffer.props.length">      <var class="varname">length</var>     </dt>     <dd>      <p class="para">       The number of bytes stored in an event buffer.      </p>     </dd>             <dt id="eventbuffer.props.contiguous-space">      <var class="varname">contiguous_space</var>     </dt>     <dd>      <p class="para">       The number of bytes stored contiguously at the front of the buffer. The       bytes in a buffer may be stored in multiple separate chunks of memory;       the property returns the number of bytes currently stored in the first       chunk.      </p>     </dd>       </dl>  </div>  <div class="section" id="eventbuffer.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="eventbuffer.constants.eol-any">      <strong><span>EventBuffer::EOL_ANY</span></strong>     </dt>     <dd>      <p class="para">       The end of line is any sequence of any number of carriage return and       linefeed characters. This format is not very useful; it exists mainly       for backward compatibility.      </p>     </dd>             <dt id="eventbuffer.constants.eol-crlf">      <strong><span>EventBuffer::EOL_CRLF</span></strong>     </dt>     <dd>      <p class="para">       The end of the line is an optional carriage return, followed by a       linefeed. (In other words, it is either a       <span>&quot;\r\n&quot;</span>       or a       <span>&quot;\n&quot;</span>       .) This format is useful in parsing text-based Internet protocols,       since the standards generally prescribe a       <span>&quot;\r\n&quot;</span>       line-terminator, but nonconformant clients sometimes say just       <span>&quot;\n&quot;</span>       .      </p>     </dd>             <dt id="eventbuffer.constants.eol-crlf-strict">      <strong><span>EventBuffer::EOL_CRLF_STRICT</span></strong>     </dt>     <dd>      <p class="para">       The end of a line is a single carriage return, followed by a single       linefeed. (This is also known as       <span>&quot;\r\n&quot;</span>       . The ASCII values are       <strong><span>0x0D</span></strong>       <strong><span>0x0A</span></strong>       ).      </p>     </dd>             <dt id="eventbuffer.constants.eol-lf">      <strong><span>EventBuffer::EOL_LF</span></strong>     </dt>     <dd>      <p class="para">       The end of a line is a single linefeed character. (This is also known       as       <span>&quot;\n&quot;</span>       . It is ASCII value is       <strong><span>0x0A</span></strong>       .)      </p>     </dd>             <dt id="eventbuffer.constants.ptr-set">      <strong><span>EventBuffer::PTR_SET</span></strong>     </dt>     <dd>      <p class="para">       Flag used as argument of       <span class="methodname" style="color:#CC7832"><strong>EventBuffer::setPosition()</strong></span>       method. If this flag specified, the position pointer is moved to an       absolute position within the buffer.      </p>     </dd>             <dt id="eventbuffer.constants.ptr-add">      <strong><span>EventBuffer::PTR_ADD</span></strong>     </dt>     <dd>      <p class="para">       The same as       <strong><span>EventBuffer::PTR_SET</span></strong>       , except this flag causes       <span class="methodname" style="color:#CC7832"><strong>EventBuffer::setPosition()</strong></span>       method to move position forward up to the specified number of       bytes(instead of setting absolute position).      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EventBuffer::add} — Append data to the end of an event buffer</li><li>{@link EventBuffer::addBuffer} — Move all data from a buffer provided to the current instance of EventBuffer</li><li>{@link EventBuffer::appendFrom} — Moves the specified number of bytes from a source buffer to the  end of the current buffer</li><li>{@link EventBuffer::__construct} — Constructs EventBuffer object</li><li>{@link EventBuffer::copyout} — Copies out specified number of bytes from the front of the buffer</li><li>{@link EventBuffer::drain} — Removes specified number of bytes from the front of the buffer  without copying it anywhere</li><li>{@link EventBuffer::enableLocking} — 说明</li><li>{@link EventBuffer::expand} — Reserves space in buffer</li><li>{@link EventBuffer::freeze} — Prevent calls that modify an event buffer from succeeding</li><li>{@link EventBuffer::lock} — Acquires a lock on buffer</li><li>{@link EventBuffer::prepend} — Prepend data to the front of the buffer</li><li>{@link EventBuffer::prependBuffer} — Moves all data from source buffer to the front of current buffer</li><li>{@link EventBuffer::pullup} — Linearizes data within buffer  and returns it's contents as a string</li><li>{@link EventBuffer::read} — Read data from an evbuffer and drain the bytes read</li><li>{@link EventBuffer::readFrom} — Read data from a file onto the end of the buffer</li><li>{@link EventBuffer::readLine} — Extracts a line from the front of the buffer</li><li>{@link EventBuffer::search} — Scans the buffer for an occurrence of a string</li><li>{@link EventBuffer::searchEol} — Scans the buffer for an occurrence of an end of line</li><li>{@link EventBuffer::substr} — Substracts a portion of the buffer data</li><li>{@link EventBuffer::unfreeze} — Re-enable calls that modify an event buffer</li><li>{@link EventBuffer::unlock} — Releases lock acquired by EventBuffer::lock</li><li>{@link EventBuffer::write} — Write contents of the buffer to a file or socket</li></ul></div>
*/
class EventBuffer
{
    /**
     * @var int
     */
    #[Immutable]
    public $length;

    /**
     * @var int
     */
    #[Immutable]
    public $contiguous_space;
    public const EOL_ANY = 0;
    public const EOL_CRLF = 1;
    public const EOL_CRLF_STRICT = 2;
    public const EOL_LF = 3;
    public const EOL_NUL = 4;
    public const PTR_SET = 0;
    public const PTR_ADD = 1;

    /**
     * __construct.
     * Constructs EventBuffer object.
     *
     * @see https://php.net/manual/en/eventbuffer.construct.php
     */
    #[Pure]
    public function __construct() {}

/**
*<div id="eventbuffer.add" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::add</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBuffer::add</span> &mdash; <span class="dc-title">Append data to the end of an event buffer</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.add-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::add</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$data</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Append data to the end of an event buffer.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.add-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">data</span>    </dt>    <dd>     <span>      String to be appended to the end of the buffer.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.add-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.add-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::addBuffer()} - Move all data from a buffer provided to the current instance of EventBuffer</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function add(string $data): bool {}

/**
*<div id="eventbuffer.addbuffer" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::addBuffer</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBuffer::addBuffer</span> &mdash; <span class="dc-title">Move all data from a buffer provided to the current instance of EventBuffer</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.addbuffer-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::addBuffer</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span>     <span class="parameter" style="color:#3A95FF">$buf</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Move all data from the buffer provided in   <span class="parameter" style="color:#3A95FF">buf</span>   parameter to the end of current   <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="classname">EventBuffer</a></span>   . This is a destructive add. The data from one buffer moves into the other   buffer. However, no unnecessary memory copies occur.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.addbuffer-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">buf</span>    </dt>    <dd>     <span>      The source EventBuffer object.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.addbuffer-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.addbuffer-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::add()} - Append data to the end of an event buffer</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function addBuffer(EventBuffer $buf): bool {}

/**
*<div id="eventbuffer.appendfrom" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::appendFrom</h1>  <p class="verinfo">(PECL event &gt;= 1.6.0)</p><p class="refpurpose"><span class="refname">EventBuffer::appendFrom</span> &mdash; <span class="dc-title">Moves the specified number of bytes from a source buffer to the  end of the current buffer</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.appendfrom-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::appendFrom</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span>     <span class="parameter" style="color:#3A95FF">$buf</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$len</span>   </span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Moves the specified number of bytes from a source buffer to the end of the   current buffer. If there are fewer number of bytes, it moves all the bytes   available from the source buffer.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.appendfrom-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">buf</span>    </dt>    <dd>     <span>      Source buffer.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">len</span>    </dt>    <dd>     <p class="para"/>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.appendfrom-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the number of bytes read.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-eventbuffer.appendfrom-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>PECL event 1.6.0</td>       <td>        Renamed <span class="methodname" style="color:#CC7832"><strong>EventBuffer::appendFrom()</strong></span>(the old          method name) to <span class="methodname" style="color:#CC7832"><strong>EventBuffer::appendFrom()</strong></span>.       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.appendfrom-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::copyout()} - Copies out specified number of bytes from the front of the buffer</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::drain()} - Removes specified number of bytes from the front of the buffer  without copying it anywhere</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::pullup()} - Linearizes data within buffer  and returns it's contents as a string</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::readLine()} - Extracts a line from the front of the buffer</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::read()} - Read data from an evbuffer and drain the bytes read</span>   </li>  </ul> </div></div>
     * @return int*/
    public function appendFrom(EventBuffer $buf, int $len): int {}

/**
*<div id="eventbuffer.copyout" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::copyout</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBuffer::copyout</span> &mdash; <span class="dc-title">Copies out specified number of bytes from the front of the buffer</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.copyout-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::copyout</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">&$data</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$max_bytes</span>   </span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Behaves just like   <span class="methodname" style="color:#CC7832">{@link EventBuffer::read()}</span>   , but does not drain any data from the buffer. I.e. it copies the first   <span class="parameter" style="color:#3A95FF">max_bytes</span>   bytes from the front of the buffer into   <span class="parameter" style="color:#3A95FF">data</span>   . If there are fewer than   <span class="parameter" style="color:#3A95FF">max_bytes</span>   bytes available, the function copies all the bytes there are.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.copyout-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">data</span>    </dt>    <dd>     <span>      Output string.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">max_bytes</span>    </dt>    <dd>     <p class="para">      The number of bytes to copy.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.copyout-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the number of bytes copied, or   <strong><span>-1</span></strong>   on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.copyout-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::read()} - Read data from an evbuffer and drain the bytes read</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::appendFrom()} - Moves the specified number of bytes from a source buffer to the  end of the current buffer</span>   </li>  </ul> </div></div>
     * @return int*/
    public function copyout(string &$data, int $max_bytes): int {}

/**
*<div id="eventbuffer.drain" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::drain</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBuffer::drain</span> &mdash; <span class="dc-title">Removes specified number of bytes from the front of the buffer  without copying it anywhere</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.drain-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::drain</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$len</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Behaves as   <span class="methodname" style="color:#CC7832">{@link EventBuffer::read()}</span>   , except that it does not copy the data: it just removes it from the front   of the buffer.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.drain-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">len</span>    </dt>    <dd>     <span>      The number of bytes to remove from the buffer.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.drain-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.drain-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::read()} - Read data from an evbuffer and drain the bytes read</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::appendFrom()} - Moves the specified number of bytes from a source buffer to the  end of the current buffer</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function drain(int $len): bool {}

/**
*<div id="eventbuffer.enablelocking" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::enableLocking</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBuffer::enableLocking</span> &mdash; <span class="dc-title"> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.enablelocking-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::enableLocking</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Enable locking on an   <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="classname">EventBuffer</a></span>   so that it can safely be used by multiple threads at the same time. When   locking is enabled, the lock will be held when callbacks are invoked. This   could result in deadlock if you aren&#039;t careful. Plan accordingly!  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.enablelocking-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.enablelocking-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.enablelocking-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <a href="http://www.wangafu.net/~nickm/libevent-book/Ref7_evbuffer.html#_evbuffers_and_thread_safety" class="link external">&raquo;&nbsp;Evbuffers and Thread-safety</a>   </li>  </ul> </div></div>
*/
    public function enableLocking(): void {}

/**
*<div id="eventbuffer.expand" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::expand</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBuffer::expand</span> &mdash; <span class="dc-title">Reserves space in buffer</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.expand-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::expand</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$len</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Alters the last chunk of memory in the buffer, or adds a new chunk, such   that the buffer is now large enough to contain   <span class="parameter" style="color:#3A95FF">len</span>   bytes without any further allocations.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.expand-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">len</span>    </dt>    <dd>     <span>      The number of bytes to reserve for the buffer     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.expand-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool*/
    public function expand(int $len): bool {}

/**
*<div id="eventbuffer.freeze" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::freeze</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBuffer::freeze</span> &mdash; <span class="dc-title">Prevent calls that modify an event buffer from succeeding</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.freeze-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::freeze</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$at_front</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Prevent calls that modify an event buffer from succeeding  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.freeze-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">at_front</span>    </dt>    <dd>     <span>      Whether to disable changes to the front or end of the buffer.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.freeze-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.freeze-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::unfreeze()} - Re-enable calls that modify an event buffer</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function freeze(bool $at_front): bool {}

/**
*<div id="eventbuffer.lock" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::lock</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBuffer::lock</span> &mdash; <span class="dc-title">Acquires a lock on buffer</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.lock-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::lock</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Acquires a lock on buffer. Can be used in pair with   <span class="methodname" style="color:#CC7832">{@link EventBuffer::unlock()}</span>   to make a set of operations atomic, i.e. thread-safe. Note, it is not   needed to lock buffers for   <em>individual</em>   operations. When locking is enabled(see   <span class="methodname" style="color:#CC7832">{@link EventBuffer::enableLocking()}</span>   ), individual operations on event buffers are already atomic.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.lock-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.lock-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.lock-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::unlock()} - Releases lock acquired by EventBuffer::lock</span>   </li>  </ul> </div></div>
*/
    public function lock(): void {}

/**
*<div id="eventbuffer.prepend" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::prepend</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBuffer::prepend</span> &mdash; <span class="dc-title">Prepend data to the front of the buffer</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.prepend-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::prepend</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$data</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Prepend data to the front of the buffer.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.prepend-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">data</span>    </dt>    <dd>     <span>      String to be prepended to the front of the buffer.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.prepend-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.prepend-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::prependBuffer()} - Moves all data from source buffer to the front of current buffer</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::add()} - Append data to the end of an event buffer</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::addBuffer()} - Move all data from a buffer provided to the current instance of EventBuffer</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function prepend(string $data): bool {}

/**
*<div id="eventbuffer.prependbuffer" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::prependBuffer</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBuffer::prependBuffer</span> &mdash; <span class="dc-title">Moves all data from source buffer to the front of current buffer</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.prependbuffer-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::prependBuffer</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span>     <span class="parameter" style="color:#3A95FF">$buf</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Behaves as   <span class="methodname" style="color:#CC7832">{@link EventBuffer::addBuffer()}</span>   , except that it moves data to the front of the buffer.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.prependbuffer-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">buf</span>    </dt>    <dd>     <span>      Source buffer.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.prependbuffer-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.prependbuffer-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::add()} - Append data to the end of an event buffer</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::addBuffer()} - Move all data from a buffer provided to the current instance of EventBuffer</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::prepend()} - Prepend data to the front of the buffer</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function prependBuffer(EventBuffer $buf): bool {}

/**
*<div id="eventbuffer.pullup" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::pullup</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBuffer::pullup</span> &mdash; <span class="dc-title">Linearizes data within buffer  and returns it&#039;s contents as a string</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.pullup-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::pullup</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$size</span>   </span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   &quot;Linearizes&quot; the first   <span class="parameter" style="color:#3A95FF">size</span>   bytes of the buffer, copying or moving them as needed to ensure that they   are all contiguous and occupying the same chunk of memory. If size is   negative, the function linearizes the entire buffer.  </p>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    Calling    <span class="methodname" style="color:#CC7832"><strong>EventBuffer::pullup()</strong></span>    with a large size can be quite slow, since it potentially needs to copy    the entire buffer&#039;s contents.   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.pullup-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">size</span>    </dt>    <dd>     <span>      The number of bytes required to be contiguous within the buffer.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.pullup-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   If   <span class="parameter" style="color:#3A95FF">size</span>   is greater than the number of bytes in the buffer, the function returns   <strong><span>null</span></strong>. Otherwise,   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::pullup()</strong></span>   returns string.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.pullup-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::copyout()} - Copies out specified number of bytes from the front of the buffer</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::drain()} - Removes specified number of bytes from the front of the buffer  without copying it anywhere</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::read()} - Read data from an evbuffer and drain the bytes read</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::readLine()} - Extracts a line from the front of the buffer</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::appendFrom()} - Moves the specified number of bytes from a source buffer to the  end of the current buffer</span>   </li>  </ul> </div></div>
     * @return null|string*/
    public function pullup(int $size): ?string {}

/**
*<div id="eventbuffer.read" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::read</h1>  <p class="verinfo">(PECL event &gt;= 1.6.0)</p><p class="refpurpose"><span class="refname">EventBuffer::read</span> &mdash; <span class="dc-title">Read data from an evbuffer and drain the bytes read</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.read-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::read</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$max_bytes</span>   </span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Read the first   <span class="parameter" style="color:#3A95FF">max_bytes</span>   from the buffer and drain the bytes read. If more   <span class="parameter" style="color:#3A95FF">max_bytes</span>   are requested than are available in the buffer, it only extracts as many   bytes as available.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.read-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">max_bytes</span>    </dt>    <dd>     <span>      Maxmimum number of bytes to read from the buffer.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.read-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns string read, or <strong><span>false</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-eventbuffer.read-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>PECL event 1.6.0</td>       <td>        Renamed <span class="methodname" style="color:#CC7832"><strong>EventBuffer::read()</strong></span>(the old method        name) to <span class="methodname" style="color:#CC7832"><strong>EventBuffer::read()</strong></span>.        <span class="methodname" style="color:#CC7832"><strong>EventBuffer::read()</strong></span> now takes only        <span class="parameter" style="color:#3A95FF">max_bytes</span> argument; returns string instead of        integer.       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.read-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::copyout()} - Copies out specified number of bytes from the front of the buffer</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::drain()} - Removes specified number of bytes from the front of the buffer  without copying it anywhere</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::pullup()} - Linearizes data within buffer  and returns it's contents as a string</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::readLine()} - Extracts a line from the front of the buffer</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::appendFrom()} - Moves the specified number of bytes from a source buffer to the  end of the current buffer</span>   </li>  </ul> </div></div>
     * @return null | string*/
    public function read(int $max_bytes): ?string {}

/**
*<div id="eventbuffer.readfrom" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::readFrom</h1>  <p class="verinfo">(PECL event &gt;= 1.7.0)</p><p class="refpurpose"><span class="refname">EventBuffer::readFrom</span> &mdash; <span class="dc-title">Read data from a file onto the end of the buffer</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.readfrom-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EventBuffer::read}</span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$fd</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$howmuch</span>   </span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Read data from the file specified by   <span class="parameter" style="color:#3A95FF">fd</span>   onto the end of the buffer.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.readfrom-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">fd</span>    </dt>    <dd>     <span>      Socket resource, stream, or numeric file descriptor.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">howmuch</span>    </dt>    <dd>     <p class="para">      Maxmimum number of bytes to read.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.readfrom-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the number of bytes read, or <strong><span>false</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.readfrom-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::copyout()} - Copies out specified number of bytes from the front of the buffer</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::drain()} - Removes specified number of bytes from the front of the buffer  without copying it anywhere</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::pullup()} - Linearizes data within buffer  and returns it's contents as a string</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::readLine()} - Extracts a line from the front of the buffer</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::appendFrom()} - Moves the specified number of bytes from a source buffer to the  end of the current buffer</span>   </li>  </ul> </div></div>
     * @return int*/
    public function readFrom($fd, int $howmuch): int {}

/**
*<div id="eventbuffer.readline" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::readLine</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBuffer::readLine</span> &mdash; <span class="dc-title">Extracts a line from the front of the buffer</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.readline-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::readLine</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$eol_style</span>   </span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Extracts a line from the front of the buffer and returns it in a newly   allocated string. If there is not a whole line to read, the function   returns <strong><span>null</span></strong>. The line terminator is not included in the copied string.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.readline-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">eol_style</span>    </dt>    <dd>     <span>      One of      <a href="https://www.php.net/manual/zh/class.eventbuffer.php#eventbuffer.constants" class="link">EventBuffer:EOL_* constants</a>      .     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.readline-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   On success returns the line read from the buffer, otherwise <strong><span>null</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.readline-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::copyout()} - Copies out specified number of bytes from the front of the buffer</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::drain()} - Removes specified number of bytes from the front of the buffer  without copying it anywhere</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::pullup()} - Linearizes data within buffer  and returns it's contents as a string</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::read()} - Read data from an evbuffer and drain the bytes read</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::appendFrom()} - Moves the specified number of bytes from a source buffer to the  end of the current buffer</span>   </li>  </ul> </div></div>
     * @return null | string*/
    public function readLine(int $eol_style): ?string {}

/**
*<div id="eventbuffer.search" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::search</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBuffer::search</span> &mdash; <span class="dc-title">Scans the buffer for an occurrence of a string</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.search-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::search</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$what</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$start</span>    <span class="initializer"> = -1</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$end</span>    <span class="initializer"> = -1</span>   </span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Scans the buffer for an occurrence of the string   <span class="parameter" style="color:#3A95FF">what</span>   . It returns numeric position of the string, or <strong><span>false</span></strong> if the string was   not found.  </p>  <p class="para">   If the   <span class="parameter" style="color:#3A95FF">start</span>   argument is provided, it points to the position at which the search should   begin; otherwise, the search is performed from the start of the string. If   <span class="parameter" style="color:#3A95FF">end</span>   argument provided, the search is performed between start and end buffer   positions.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.search-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">what</span>    </dt>    <dd>     <span>      String to search.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">start</span>    </dt>    <dd>     <p class="para">      Start search position.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">end</span>    </dt>    <dd>     <p class="para">      End search position.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.search-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns numeric position of the first occurrence of the string in the   buffer, or <strong><span>false</span></strong> if string is not found.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数可能返回布尔值<strong><span>false</span></strong>，但也可能返回等同于 <strong><span>false</span></strong> 的非布尔值。请阅读 <a href="https://www.php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">===运算符</a>来测试此函数的返回值。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-eventbuffer.search-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1     <span class="function"><strong style="color:#CC7832">EventBuffer::search()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Count total occurrences of 'str' in 'buf'<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">count_instances</span><span style="color: #007700">(</span><span style="color: #9876AA">$buf</span><span style="color: #007700">, </span><span style="color: #9876AA">$str</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$total </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$p     </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$i     </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br /><br />    while (</span><span style="color: #9876AA">1</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">$p </span><span style="color: #007700">= </span><span style="color: #9876AA">$buf</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">search</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">, </span><span style="color: #9876AA">$p</span><span style="color: #007700">);<br />        if (</span><span style="color: #9876AA">$p </span><span style="color: #007700">=== </span><span style="color: #9876AA">FALSE</span><span style="color: #007700">) {<br />            break;<br />        }<br />        ++</span><span style="color: #9876AA">$total</span><span style="color: #007700">;<br />        ++</span><span style="color: #9876AA">$p</span><span style="color: #007700">;<br />    }<br /><br />    return </span><span style="color: #9876AA">$total</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$buf </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBuffer</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$buf</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">add</span><span style="color: #007700">(</span><span style="color: #DD0000">"Some string within a string inside another string"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count_instances</span><span style="color: #007700">(</span><span style="color: #9876AA">$buf</span><span style="color: #007700">, </span><span style="color: #DD0000">"str"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(3)<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.search-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::searchEol()} - Scans the buffer for an occurrence of an end of line</span>   </li>  </ul> </div></div>
     * @return int|false*/
    public function search(string $what, int $start = 1, int $end = 1): int|false {}

/**
*<div id="eventbuffer.searcheol" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::searchEol</h1>  <p class="verinfo">(PECL event &gt;= 1.5.0)</p><p class="refpurpose"><span class="refname">EventBuffer::searchEol</span> &mdash; <span class="dc-title">Scans the buffer for an occurrence of an end of line</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.searcheol-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::searchEol</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$start</span>    <span class="initializer"> = -1</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$eol_style</span>    <span class="initializer"> =      <strong><span>EventBuffer::EOL_ANY</span></strong>    </span>   </span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Scans the buffer for an occurrence of an end of line specified by   <span class="parameter" style="color:#3A95FF">eol_style</span>   parameter . It returns numeric position of the string, or <strong><span>false</span></strong> if the   string was not found.  </p>  <p class="para">   If the   <span class="parameter" style="color:#3A95FF">start</span>   argument is provided, it represents the position at which the search should   begin; otherwise, the search is performed from the start of the string. If   <span class="parameter" style="color:#3A95FF">end</span>   argument provided, the search is performed between start and end buffer   positions.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.searcheol-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">start</span>    </dt>    <dd>     <span>      Start search position.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">eol_style</span>    </dt>    <dd>     <p class="para">      One of      <a href="https://www.php.net/manual/zh/class.eventbuffer.php#eventbuffer.constants" class="link">EventBuffer:EOL_* constants</a>      .     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.searcheol-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns numeric position of the first occurrence of end-of-line symbol in   the buffer, or <strong><span>false</span></strong> if not found.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数可能返回布尔值<strong><span>false</span></strong>，但也可能返回等同于 <strong><span>false</span></strong> 的非布尔值。请阅读 <a href="https://www.php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">===运算符</a>来测试此函数的返回值。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.searcheol-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::search()} - Scans the buffer for an occurrence of a string</span>   </li>  </ul> </div></div>
     * @return int|false*/
    public function searchEol(int $start = 1, int $eol_style = EventBuffer::EOL_ANY): int|false {}

/**
*<div id="eventbuffer.substr" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::substr</h1>  <p class="verinfo">(PECL event &gt;= 1.6.0)</p><p class="refpurpose"><span class="refname">EventBuffer::substr</span> &mdash; <span class="dc-title">Substracts a portion of the buffer data</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.substr-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::substr</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$start</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$length</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Substracts up to   <span class="parameter" style="color:#3A95FF">length</span>   bytes of the buffer data beginning at   <span class="parameter" style="color:#3A95FF">start</span>   position.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.substr-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">start</span>    </dt>    <dd>     <span>      The start position of data to be substracted.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">length</span>    </dt>    <dd>     <p class="para">      Maximum number of bytes to substract.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.substr-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the data substracted as a   <span class="type" style="color:#EAB766">string</span>   on success, or <strong><span>false</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.substr-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::read()} - Read data from an evbuffer and drain the bytes read</span>   </li>  </ul> </div></div>
     * @return string*/
    public function substr(int $start, int $length): string {}

/**
*<div id="eventbuffer.unfreeze" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::unfreeze</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBuffer::unfreeze</span> &mdash; <span class="dc-title">Re-enable calls that modify an event buffer</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.unfreeze-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::unfreeze</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$at_front</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Re-enable calls that modify an event buffer.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.unfreeze-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">at_front</span>    </dt>    <dd>     <span>      Whether to enable events at the front or at the end of the buffer.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.unfreeze-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.unfreeze-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::freeze()} - Prevent calls that modify an event buffer from succeeding</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function unfreeze(bool $at_front): bool {}

/**
*<div id="eventbuffer.unlock" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::unlock</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBuffer::unlock</span> &mdash; <span class="dc-title">Releases lock acquired by EventBuffer::lock</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.unlock-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::unlock</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Releases lock acquired by   <span class="methodname" style="color:#CC7832">{@link EventBuffer::lock()}</span>   .  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.unlock-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.unlock-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.unlock-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::lock()} - Acquires a lock on buffer</span>   </li>  </ul> </div></div>
     * @return void*/
    public function unlock(): void {}

/**
*<div id="eventbuffer.write" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBuffer::write</h1>  <p class="verinfo">(PECL event &gt;= 1.6.0)</p><p class="refpurpose"><span class="refname">EventBuffer::write</span> &mdash; <span class="dc-title">Write contents of the buffer to a file or socket</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbuffer.write-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBuffer::write</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$fd</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$howmuch</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Write contents of the buffer to a file descriptor. The buffer will be   drained after the bytes have been successfully written.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbuffer.write-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">fd</span>    </dt>    <dd>     <span>      Socket resource, stream or numeric file descriptor associated normally      associated with a socket.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">howmuch</span>    </dt>    <dd>     <p class="para">      The maximum number of bytes to write.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbuffer.write-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the number of bytes written, or <strong><span>false</span></strong> on error.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbuffer.write-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBuffer::read()} - Read data from an evbuffer and drain the bytes read</span>   </li>  </ul> </div></div>
     * @return int|false*/
    public function write(mixed $fd, int $howmuch): int|false {}
}

// The EventBufferEvent class
/**
*<div id="class.eventbufferevent" class="reference"> <h1 class="title">The EventBufferEvent class</h1>  <div class="partintro"><p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p>  <div class="section" id="eventbufferevent.intro">   <h2 class="title">简介</h2>   <p class="para">    Represents Libevent&#039;s buffer event.   </p>   <p class="para">    Usually an application wants to perform some amount of data buffering in    addition to just responding to events. When we want to write data, for    example, the usual pattern looks like:   </p>   <ol type="1">    <li class="listitem">     <p class="para">      Decide that we want to write some data to a connection; put that data in      a buffer.     </p>    </li>    <li class="listitem">     <p class="para">      Wait for the connection to become writable     </p>    </li>    <li class="listitem">     <p class="para">      Write as much of the data as we can     </p>    </li>    <li class="listitem">     <p class="para">      Remember how much we wrote, and if we still have more data to write,      wait for the connection to become writable again.     </p>    </li>   </ol>   <p class="para">    This buffered I/O pattern is common enough that Libevent provides a    generic mechanism for it. A &quot;buffer event&quot; consists of an underlying    transport (like a socket), a read buffer, and a write buffer. Instead of    regular events, which give callbacks when the underlying transport is    ready to be read or written, a buffer event invokes its user-supplied    callbacks when it has read or written enough data.   </p>  </div>  <div class="section" id="eventbufferevent.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">final</span>      <span class="modifier">class</span> <strong class="classname">EventBufferEvent</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php#eventbufferevent.constants.reading"><var class="varname">READING</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php#eventbufferevent.constants.writing"><var class="varname">WRITING</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php#eventbufferevent.constants.eof"><var class="varname">EOF</var></a></var><span class="initializer"> = 16</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php#eventbufferevent.constants.error"><var class="varname">ERROR</var></a></var><span class="initializer"> = 32</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php#eventbufferevent.constants.timeout"><var class="varname">TIMEOUT</var></a></var><span class="initializer"> = 64</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php#eventbufferevent.constants.connected"><var class="varname">CONNECTED</var></a></var><span class="initializer"> = 128</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php#eventbufferevent.constants.opt-close-on-free"><var class="varname">OPT_CLOSE_ON_FREE</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php#eventbufferevent.constants.opt-threadsafe"><var class="varname">OPT_THREADSAFE</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php#eventbufferevent.constants.opt-defer-callbacks"><var class="varname">OPT_DEFER_CALLBACKS</var></a></var><span class="initializer"> = 4</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php#eventbufferevent.constants.opt-unlock-callbacks"><var class="varname">OPT_UNLOCK_CALLBACKS</var></a></var><span class="initializer"> = 8</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php#eventbufferevent.constants.ssl-open"><var class="varname">SSL_OPEN</var></a></var><span class="initializer"> = 0</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php#eventbufferevent.constants.ssl-connecting"><var class="varname">SSL_CONNECTING</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php#eventbufferevent.constants.ssl-accepting"><var class="varname">SSL_ACCEPTING</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php#eventbufferevent.props.fd">$<var class="varname">fd</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php#eventbufferevent.props.priority">$<var class="varname">priority</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">readonly</span>     <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php#eventbufferevent.props.input">$<var class="varname">input</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">readonly</span>     <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php#eventbufferevent.props.output">$<var class="varname">output</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.close.php" class="methodname" style="color:#CC7832">close</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.connect.php" class="methodname" style="color:#CC7832">connect</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$addr</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.connecthost.php" class="methodname" style="color:#CC7832">connectHost</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventdnsbase.php" class="type EventDnsBase" style="color:#EAB766">EventDnsBase</a></span>     <span class="parameter" style="color:#3A95FF">$dns_base</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$hostname</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$port</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$family</span>    <span class="initializer"> = EventUtil::AF_UNSPEC</span>   </span><br>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$socket</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$options</span>    <span class="initializer"> = 0</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$readcb</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$writecb</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$eventcb</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span><br>)</div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.createpair.php" class="methodname" style="color:#CC7832">createPair</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$options</span>    <span class="initializer"> = 0</span>   </span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.disable.php" class="methodname" style="color:#CC7832">disable</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$events</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.enable.php" class="methodname" style="color:#CC7832">enable</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$events</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.free.php" class="methodname" style="color:#CC7832">free</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.getdnserrorstring.php" class="methodname" style="color:#CC7832">getDnsErrorString</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.getenabled.php" class="methodname" style="color:#CC7832">getEnabled</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.getinput.php" class="methodname" style="color:#CC7832">getInput</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.getoutput.php" class="methodname" style="color:#CC7832">getOutput</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.read.php" class="methodname" style="color:#CC7832">read</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$size</span>   </span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.readbuffer.php" class="methodname" style="color:#CC7832">readBuffer</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span>     <span class="parameter" style="color:#3A95FF">$buf</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.setcallbacks.php" class="methodname" style="color:#CC7832">setCallbacks</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$readcb</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$writecb</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$eventcb</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>   <span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.setpriority.php" class="methodname" style="color:#CC7832">setPriority</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.settimeouts.php" class="methodname" style="color:#CC7832">setTimeouts</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$timeout_read</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$timeout_write</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.setwatermark.php" class="methodname" style="color:#CC7832">setWatermark</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$events</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$lowmark</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$highmark</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.sslerror.php" class="methodname" style="color:#CC7832">sslError</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.sslfilter.php" class="methodname" style="color:#CC7832">sslFilter</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php" class="type EventBufferEvent" style="color:#EAB766">EventBufferEvent</a></span>     <span class="parameter" style="color:#3A95FF">$underlying</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php" class="type EventSslContext" style="color:#EAB766">EventSslContext</a></span>     <span class="parameter" style="color:#3A95FF">$ctx</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$state</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$options</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php" class="type EventBufferEvent" style="color:#EAB766">EventBufferEvent</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.sslgetcipherinfo.php" class="methodname" style="color:#CC7832">sslGetCipherInfo</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.sslgetciphername.php" class="methodname" style="color:#CC7832">sslGetCipherName</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.sslgetcipherversion.php" class="methodname" style="color:#CC7832">sslGetCipherVersion</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.sslgetprotocol.php" class="methodname" style="color:#CC7832">sslGetProtocol</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.sslrenegotiate.php" class="methodname" style="color:#CC7832">sslRenegotiate</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.sslsocket.php" class="methodname" style="color:#CC7832">sslSocket</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$socket</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php" class="type EventSslContext" style="color:#EAB766">EventSslContext</a></span>     <span class="parameter" style="color:#3A95FF">$ctx</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$state</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$options</span>   <span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php" class="type EventBufferEvent" style="color:#EAB766">EventBufferEvent</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.write.php" class="methodname" style="color:#CC7832">write</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$data</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventbufferevent.writebuffer.php" class="methodname" style="color:#CC7832">writeBuffer</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span>     <span class="parameter" style="color:#3A95FF">$buf</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div>  <div class="section" id="eventbufferevent.props">   <h2 class="title">属性</h2>   <dl>         <dt id="eventbufferevent.props.fd">      <var class="varname">fd</var>     </dt>     <dd>      <p class="para">       Numeric file descriptor associated with the buffer event. Normally       represents a bound socket. Equals to <strong><span>null</span></strong>, if there is no file       descriptor(socket) associated with the buffer event.      </p>     </dd>             <dt id="eventbufferevent.props.priority">      <var class="varname">priority</var>     </dt>     <dd>      <p class="para">       The priority of the events used to implement the buffer event.      </p>     </dd>             <dt id="eventbufferevent.props.input">      <var class="varname">input</var>     </dt>     <dd>      <p class="para">       Underlying input buffer object(       <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="classname">EventBuffer</a></span>       )      </p>     </dd>             <dt id="eventbufferevent.props.output">      <var class="varname">output</var>     </dt>     <dd>      <p class="para">       Underlying output buffer object(       <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="classname">EventBuffer</a></span>       )      </p>     </dd>       </dl>  </div>  <div class="section" id="eventbufferevent.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="eventbufferevent.constants.reading">      <strong><span>EventBufferEvent::READING</span></strong>     </dt>     <dd>      <p class="para">       An event occurred during a read operation on the bufferevent. See the       other flags for which event it was.      </p>     </dd>             <dt id="eventbufferevent.constants.writing">      <strong><span>EventBufferEvent::WRITING</span></strong>     </dt>     <dd>      <p class="para">       An event occurred during a write operation on the bufferevent. See the       other flags for which event it was.      </p>     </dd>             <dt id="eventbufferevent.constants.eof">      <strong><span>EventBufferEvent::EOF</span></strong>     </dt>     <dd>      <p class="para">       Got an end-of-file indication on the buffer event.      </p>     </dd>             <dt id="eventbufferevent.constants.error">      <strong><span>EventBufferEvent::ERROR</span></strong>     </dt>     <dd>      <p class="para">       An error occurred during a bufferevent operation. For more information       on what the error was, call       <span class="methodname" style="color:#CC7832">{@link EventUtil::getLastSocketErrno()}</span>       and/or       <span class="methodname" style="color:#CC7832">{@link EventUtil::getLastSocketError()}</span>       .      </p>     </dd>             <dt id="eventbufferevent.constants.timeout">      <strong><span>EventBufferEvent::TIMEOUT</span></strong>     </dt>     <dd>      <p class="para"/>     </dd>             <dt id="eventbufferevent.constants.connected">      <strong><span>EventBufferEvent::CONNECTED</span></strong>     </dt>     <dd>      <p class="para">       Finished a requested connection on the bufferevent.      </p>     </dd>             <dt id="eventbufferevent.constants.opt-close-on-free">      <strong><span>EventBufferEvent::OPT_CLOSE_ON_FREE</span></strong>     </dt>     <dd>      <p class="para">       When the buffer event is freed, close the underlying transport. This       will close an underlying socket, free an underlying buffer event, etc.      </p>     </dd>             <dt id="eventbufferevent.constants.opt-threadsafe">      <strong><span>EventBufferEvent::OPT_THREADSAFE</span></strong>     </dt>     <dd>      <p class="para">       Automatically allocate locks for the bufferevent, so that it’s safe       to use from multiple threads.      </p>     </dd>             <dt id="eventbufferevent.constants.opt-defer-callbacks">      <strong><span>EventBufferEvent::OPT_DEFER_CALLBACKS</span></strong>     </dt>     <dd>      <p class="para">       When this flag is set, the bufferevent defers all of its callbacks. See       <a href="http://www.wangafu.net/~nickm/libevent-book/Ref6_bufferevent.html#_deferred_callbacks" class="link external">&raquo;&nbsp;Fast      portable non-blocking network programming with Libevent, Deferred callbacks</a>       .      </p>     </dd>             <dt id="eventbufferevent.constants.opt-unlock-callbacks">      <strong><span>EventBufferEvent::OPT_UNLOCK_CALLBACKS</span></strong>     </dt>     <dd>      <p class="para">       By default, when the bufferevent is set up to be threadsafe, the buffer       event’s locks are held whenever the any user-provided callback is       invoked. Setting this option makes Libevent release the buffer       event’s lock when it’s invoking the callbacks.      </p>     </dd>             <dt id="eventbufferevent.constants.ssl-open">      <strong><span>EventBufferEvent::SSL_OPEN</span></strong>     </dt>     <dd>      <p class="para">       The SSL handshake is done      </p>     </dd>             <dt id="eventbufferevent.constants.ssl-connecting">      <strong><span>EventBufferEvent::SSL_CONNECTING</span></strong>     </dt>     <dd>      <p class="para">       SSL is currently performing negotiation as a client      </p>     </dd>             <dt id="eventbufferevent.constants.ssl-accepting">      <strong><span>EventBufferEvent::SSL_ACCEPTING</span></strong>     </dt>     <dd>      <p class="para">       SSL is currently performing negotiation as a server      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EventBufferEvent::close} — Closes file descriptor associated with the current buffer event</li><li>{@link EventBufferEvent::connect} — Connect buffer event's file descriptor to given address or  UNIX socket</li><li>{@link EventBufferEvent::connectHost} — Connects to a hostname with optionally asyncronous DNS resolving</li><li>{@link EventBufferEvent::__construct} — Constructs EventBufferEvent object</li><li>{@link EventBufferEvent::createPair} — Creates two buffer events connected to each other</li><li>{@link EventBufferEvent::disable} — Disable events read, write, or both on a buffer event</li><li>{@link EventBufferEvent::enable} — Enable events read, write, or both on a buffer event</li><li>{@link EventBufferEvent::free} — Free a buffer event</li><li>{@link EventBufferEvent::getDnsErrorString} — Returns string describing the last failed DNS lookup attempt</li><li>{@link EventBufferEvent::getEnabled} — Returns bitmask of events currently enabled on the buffer event</li><li>{@link EventBufferEvent::getInput} — Returns underlying input buffer associated with current buffer  event</li><li>{@link EventBufferEvent::getOutput} — Returns underlying output buffer associated with current buffer  event</li><li>{@link EventBufferEvent::read} — Read buffer's data</li><li>{@link EventBufferEvent::readBuffer} — Drains the entire contents of the input buffer and places them into buf</li><li>{@link EventBufferEvent::setCallbacks} — Assigns read, write and event(status) callbacks</li><li>{@link EventBufferEvent::setPriority} — Assign a priority to a bufferevent</li><li>{@link EventBufferEvent::setTimeouts} — Set the read and write timeout for a buffer event</li><li>{@link EventBufferEvent::setWatermark} — Adjusts read and/or write watermarks</li><li>{@link EventBufferEvent::sslError} — Returns most recent OpenSSL error reported on the buffer event</li><li>{@link EventBufferEvent::sslFilter} — Create a new SSL buffer event to send its data over another buffer event</li><li>{@link EventBufferEvent::sslGetCipherInfo} — Returns a textual description of the cipher</li><li>{@link EventBufferEvent::sslGetCipherName} — Returns the current cipher name of the SSL connection</li><li>{@link EventBufferEvent::sslGetCipherVersion} — Returns version of cipher used by current SSL connection</li><li>{@link EventBufferEvent::sslGetProtocol} — Returns the name of the protocol used for current SSL connection</li><li>{@link EventBufferEvent::sslRenegotiate} — Tells a bufferevent to begin SSL renegotiation</li><li>{@link EventBufferEvent::sslSocket} — Creates a new SSL buffer event to send its data over an SSL on a socket</li><li>{@link EventBufferEvent::write} — Adds data to a buffer event's output buffer</li><li>{@link EventBufferEvent::writeBuffer} — Adds contents of the entire buffer to a buffer event's output  buffer</li></ul></div>
*/
final class EventBufferEvent
{
    /** @var int */
    public $fd;

    /** @var int */
    public $priority;

    /**
     * @var EventBuffer
     */
    #[Immutable]
    public $input;

    /**
     * @var EventBuffer
     */
    #[Immutable]
    public $output;
    public const READING = 1;
    public const WRITING = 2;
    public const EOF = 16;
    public const ERROR = 32;
    public const TIMEOUT = 64;
    public const CONNECTED = 128;
    public const OPT_CLOSE_ON_FREE = 1;
    public const OPT_THREADSAFE = 2;
    public const OPT_DEFER_CALLBACKS = 4;
    public const OPT_UNLOCK_CALLBACKS = 8;
    public const SSL_OPEN = 0;
    public const SSL_CONNECTING = 1;
    public const SSL_ACCEPTING = 2;

    /**
     * __construct.
     * Constructs EventBufferEvent object.
     *
     * @param EventBase $base
     * @param mixed     $socket  = null
     * @param int       $options = 0
     * @param null|callable $readcb  = null
     * @param null|callable $writecb = null
     * @param null|callable $eventcb = null
     *
     * @see https://php.net/manual/en/eventbufferevent.construct.php
     */
    #[Pure]
    public function __construct(EventBase $base, $socket = null, int $options = 0, ?callable $readcb = null, ?callable $writecb = null, ?callable $eventcb = null) {}

/**
*<div id="eventbufferevent.close" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::close</h1>  <p class="verinfo">(PECL event &gt;= 1.10.0)</p><p class="refpurpose"><span class="refname">EventBufferEvent::close</span> &mdash; <span class="dc-title">Closes file descriptor associated with the current buffer event</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.close-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::close</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Closes file descriptor associated with the current buffer event.  </p>  <p class="para">   This method may be used in cases when the   <strong><span>EventBufferEvent::OPT_CLOSE_ON_FREE</span></strong> option is not appropriate.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.close-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.close-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return bool*/
    public function close(): bool {}

/**
*<div id="eventbufferevent.connect" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::connect</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::connect</span> &mdash; <span class="dc-title">Connect buffer event&#039;s file descriptor to given address or  UNIX socket</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.connect-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::connect</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$addr</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Connect buffer event&#039;s file descriptor to given address(optionally   with port), or a UNIX domain socket.  </p>  <p class="para">   If socket is not assigned to the buffer event, this function allocates a   new socket and makes it non-blocking internally.  </p>  <p class="para">   To resolve DNS names(asyncronously), use   <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::connectHost()}</span>   method.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.connect-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">addr</span>    </dt>    <dd>     <span>      Should contain an IP address with optional port number, or a path to      UNIX domain socket. Recognized formats are:<div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="parameterscode"><span>[IPv6Address]:port<br>[IPv6Address]<br>IPv6Address<br>IPv4Address:port<br>IPv4Address<br>unix:path</span></div>      </div>      Note,      <span>&#039;unix:&#039;</span>      prefix is currently not case sensitive.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.connect-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-eventbufferevent.connect-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1     <span class="function"><strong style="color:#CC7832">EventBufferEvent::connect()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//<br /> * 1. Connect to 127.0.0.1 at port 80<br /> * by means of EventBufferEvent::connect().<br /> *<br /> * 2. Request /index.cphp via HTTP/1.0<br /> * using the output buffer.<br /> *<br /> * 3. Asyncronously read the response and print it to stdout.<br /> <br /><br />// Read callback <br /></span><span style="color: #007700">function </span><span style="color: #9876AA">readcb</span><span style="color: #007700">(</span><span style="color: #9876AA">$bev</span><span style="color: #007700">, </span><span style="color: #9876AA">$base</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$input </span><span style="color: #007700">= </span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getInput</span><span style="color: #007700">();<br /><br />    while ((</span><span style="color: #9876AA">$n </span><span style="color: #007700">= </span><span style="color: #9876AA">$input</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">remove</span><span style="color: #007700">(</span><span style="color: #9876AA">$buf</span><span style="color: #007700">, </span><span style="color: #9876AA">1024</span><span style="color: #007700">)) &gt; </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br />        echo </span><span style="color: #9876AA">$buf</span><span style="color: #007700">;<br />    }<br />}<br /><br /></span><span style="color: #FF8000">// Event callback <br /></span><span style="color: #007700">function </span><span style="color: #9876AA">eventcb</span><span style="color: #007700">(</span><span style="color: #9876AA">$bev</span><span style="color: #007700">, </span><span style="color: #9876AA">$events</span><span style="color: #007700">, </span><span style="color: #9876AA">$base</span><span style="color: #007700">) {<br />    if (</span><span style="color: #9876AA">$events </span><span style="color: #007700">&amp; </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">CONNECTED</span><span style="color: #007700">) {<br />        echo </span><span style="color: #DD0000">"Connected.\n"</span><span style="color: #007700">;<br />    } elseif (</span><span style="color: #9876AA">$events </span><span style="color: #007700">&amp; (</span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">ERROR </span><span style="color: #007700">| </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">EOF</span><span style="color: #007700">)) {<br />        if (</span><span style="color: #9876AA">$events </span><span style="color: #007700">&amp; </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">ERROR</span><span style="color: #007700">) {<br />            echo </span><span style="color: #DD0000">"DNS error: "</span><span style="color: #007700">, </span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDnsErrorString</span><span style="color: #007700">(), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />        }<br /><br />        echo </span><span style="color: #DD0000">"Closing\n"</span><span style="color: #007700">;<br />        </span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exit</span><span style="color: #007700">();<br />        exit(</span><span style="color: #DD0000">"Done\n"</span><span style="color: #007700">);<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">();<br /><br />echo </span><span style="color: #DD0000">"step 1\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$bev </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">, </span><span style="color: #FF8000">// use internal socket  </span><span style="color: #9876AA">NULL</span><span style="color: #007700">,<br />    </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_CLOSE_ON_FREE </span><span style="color: #007700">| </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_DEFER_CALLBACKS</span><span style="color: #007700">);<br />if (!</span><span style="color: #9876AA">$bev</span><span style="color: #007700">) {<br />    exit(</span><span style="color: #DD0000">"Failed creating bufferevent socket\n"</span><span style="color: #007700">);<br />}<br /><br />echo </span><span style="color: #DD0000">"step 2\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setCallbacks</span><span style="color: #007700">(</span><span style="color: #DD0000">"readcb"</span><span style="color: #007700">, </span><span style="color: #FF8000">// writecb  </span><span style="color: #9876AA">NULL</span><span style="color: #007700">, </span><span style="color: #DD0000">"eventcb"</span><span style="color: #007700">, </span><span style="color: #9876AA">$base</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">enable</span><span style="color: #007700">(</span><span style="color: #9876AA">Event</span><span style="color: #007700">::</span><span style="color: #9876AA">READ </span><span style="color: #007700">| </span><span style="color: #9876AA">Event</span><span style="color: #007700">::</span><span style="color: #9876AA">WRITE</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #DD0000">"step 3\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// Send request <br /></span><span style="color: #9876AA">$output </span><span style="color: #007700">= </span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getOutput</span><span style="color: #007700">();<br />if (!</span><span style="color: #9876AA">$output</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">add</span><span style="color: #007700">(<br />    </span><span style="color: #DD0000">"GET /index.cphp HTTP/1.0\r\n"</span><span style="color: #007700">.<br />    </span><span style="color: #DD0000">"Connection: Close\r\n\r\n"<br /></span><span style="color: #007700">)) {<br />    exit(</span><span style="color: #DD0000">"Failed adding request to output buffer\n"</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #FF8000">// Connect to the host syncronously.<br /> * We know the IP, and don't need to resolve DNS. <br /></span><span style="color: #007700">if (!</span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connect</span><span style="color: #007700">(</span><span style="color: #DD0000">"127.0.0.1:80"</span><span style="color: #007700">)) {<br />    exit(</span><span style="color: #DD0000">"Can't connect to host\n"</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #FF8000">// Dispatch pending events <br /></span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">dispatch</span><span style="color: #007700">();</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>step 1<br>step 2<br>step 3<br>Connected.<br>HTTP/1.1 200 OK<br>Server: nginx/1.2.6<br>Date: Sat, 09 Mar 2013 10:06:58 GMT<br>Content-Type: text/html; charset=utf-8<br>Connection: close<br>X-Powered-By: PHP/5.4.11--pl2-gentoo<br><br>sdfsdfsf<br>Closing<br>Done<br></span></div>   </div>  </div>  <div class="example" id="">   <p><strong>示例 #2 Connect to UNIX domain socket which presumably is served by a server, read response from   the server and output it to the console</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">MyUnixSocketClient </span><span style="color: #007700">{<br />    private </span><span style="color: #9876AA">$base</span><span style="color: #007700">, </span><span style="color: #9876AA">$bev</span><span style="color: #007700">;<br /><br />    function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">, </span><span style="color: #9876AA">$sock_path</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">base </span><span style="color: #007700">= </span><span style="color: #9876AA">$base</span><span style="color: #007700">;<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bev </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">, </span><span style="color: #9876AA">NULL</span><span style="color: #007700">, </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_CLOSE_ON_FREE</span><span style="color: #007700">,<br />            array (</span><span style="color: #9876AA">$this</span><span style="color: #007700">, </span><span style="color: #DD0000">"read_cb"</span><span style="color: #007700">), </span><span style="color: #9876AA">NULL</span><span style="color: #007700">, array (</span><span style="color: #9876AA">$this</span><span style="color: #007700">, </span><span style="color: #DD0000">"event_cb"</span><span style="color: #007700">));<br /><br />        if (!</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connect</span><span style="color: #007700">(</span><span style="color: #DD0000">"unix:</span><span style="color: #9876AA">$sock_path</span><span style="color: #DD0000">"</span><span style="color: #007700">)) {<br />            </span><span style="color: #9876AA">trigger_error</span><span style="color: #007700">(</span><span style="color: #DD0000">"Failed to connect to socket `</span><span style="color: #9876AA">$sock_path</span><span style="color: #DD0000">'"</span><span style="color: #007700">, </span><span style="color: #9876AA">E_USER_ERROR</span><span style="color: #007700">);<br />        }<br /><br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">enable</span><span style="color: #007700">(</span><span style="color: #9876AA">Event</span><span style="color: #007700">::</span><span style="color: #9876AA">READ</span><span style="color: #007700">);<br />    }<br /><br />    function </span><span style="color: #9876AA">__destruct</span><span style="color: #007700">() {<br />        if (</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bev</span><span style="color: #007700">) {<br />            </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">free</span><span style="color: #007700">();<br />            </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bev </span><span style="color: #007700">= </span><span style="color: #9876AA">NULL</span><span style="color: #007700">;<br />        }<br />    }<br /><br />    function </span><span style="color: #9876AA">dispatch</span><span style="color: #007700">() {<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">dispatch</span><span style="color: #007700">();<br />    }<br /><br />    function </span><span style="color: #9876AA">read_cb</span><span style="color: #007700">(</span><span style="color: #9876AA">$bev</span><span style="color: #007700">, </span><span style="color: #9876AA">$unused</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">$in </span><span style="color: #007700">= </span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">input</span><span style="color: #007700">;<br /><br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"Received %ld bytes\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$in</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">length</span><span style="color: #007700">);<br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"----- data ----\n"</span><span style="color: #007700">);<br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%ld:\t%s\n"</span><span style="color: #007700">, (int) </span><span style="color: #9876AA">$in</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">length</span><span style="color: #007700">, </span><span style="color: #9876AA">$in</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">pullup</span><span style="color: #007700">(-</span><span style="color: #9876AA">1</span><span style="color: #007700">));<br /><br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">free</span><span style="color: #007700">();<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bev </span><span style="color: #007700">= </span><span style="color: #9876AA">NULL</span><span style="color: #007700">;<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exit</span><span style="color: #007700">(</span><span style="color: #9876AA">NULL</span><span style="color: #007700">);<br />    }<br /><br />    function </span><span style="color: #9876AA">event_cb</span><span style="color: #007700">(</span><span style="color: #9876AA">$bev</span><span style="color: #007700">, </span><span style="color: #9876AA">$events</span><span style="color: #007700">, </span><span style="color: #9876AA">$unused</span><span style="color: #007700">) {<br />        if (</span><span style="color: #9876AA">$events </span><span style="color: #007700">&amp; </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">ERROR</span><span style="color: #007700">) {<br />            echo </span><span style="color: #DD0000">"Error from bufferevent\n"</span><span style="color: #007700">;<br />        }<br /><br />        if (</span><span style="color: #9876AA">$events </span><span style="color: #007700">&amp; (</span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">EOF </span><span style="color: #007700">| </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">ERROR</span><span style="color: #007700">)) {<br />            </span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">free</span><span style="color: #007700">();<br />            </span><span style="color: #9876AA">$bev </span><span style="color: #007700">= </span><span style="color: #9876AA">NULL</span><span style="color: #007700">;<br />        } elseif (</span><span style="color: #9876AA">$events </span><span style="color: #007700">&amp; </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">CONNECTED</span><span style="color: #007700">) {<br />            </span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">output</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">add</span><span style="color: #007700">(</span><span style="color: #DD0000">"test\n"</span><span style="color: #007700">);<br />        }<br />    }<br />}<br /><br />if (</span><span style="color: #9876AA">$argc </span><span style="color: #007700">&lt;= </span><span style="color: #9876AA">1</span><span style="color: #007700">) {<br />    exit(</span><span style="color: #DD0000">"Socket path is not provided\n"</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">$sock_path </span><span style="color: #007700">= </span><span style="color: #9876AA">$argv</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">];<br /><br /></span><span style="color: #9876AA">$base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$cl </span><span style="color: #007700">= new </span><span style="color: #9876AA">MyUnixSocketClient</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">, </span><span style="color: #9876AA">$sock_path</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$cl</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">dispatch</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Received 5 bytes<br>----- data ----<br>5:  test<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbufferevent.connect-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::connectHost()} - Connects to a hostname with optionally asyncronous DNS resolving</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function connect(string $addr): bool {}

/**
*<div id="eventbufferevent.connecthost" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::connectHost</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::connectHost</span> &mdash; <span class="dc-title">Connects to a hostname with optionally asyncronous DNS resolving</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.connecthost-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::connectHost</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventdnsbase.php" class="type EventDnsBase" style="color:#EAB766">EventDnsBase</a></span>     <span class="parameter" style="color:#3A95FF">$dns_base</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$hostname</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$port</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$family</span>    <span class="initializer"> = EventUtil::AF_UNSPEC</span>   </span><br>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Resolves the DNS name hostname, looking for addresses of type   <span class="parameter" style="color:#3A95FF">family</span>   (   <span>EventUtil::AF_*</span>   constants). If the name resolution fails, it invokes the event callback   with an error event. If it succeeds, it launches a connection attempt just   as   <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::connect()}</span>   would.  </p>  <p class="para">   <span class="parameter" style="color:#3A95FF">dns_base</span>   is optional. May be <strong><span>null</span></strong>, or an object created with   <span class="methodname" style="color:#CC7832">{@link EventDnsBase::__construct()}</span>   . For asyncronous hostname resolving pass a valid event dns base resource.   Otherwise the hostname resolving will block.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="classname"><a href="https://www.php.net/manual/zh/class.eventdnsbase.php" class="classname">EventDnsBase</a></span>    is available only if    <span>Event</span>    configured    <strong class="option configure">--with-event-extra</strong>    (    <span>event_extra</span>    library,    <em>libevent protocol-specific functionality support including HTTP, DNS, and RPC</em>    ).   </p>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::connectHost()</strong></span>    requires    <span>libevent-2.0.3-alpha</span>    or greater.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.connecthost-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">dns_base</span>    </dt>    <dd>     <span>      Object of      <span class="classname"><a href="https://www.php.net/manual/zh/class.eventdnsbase.php" class="classname">EventDnsBase</a></span>      in case if DNS is to be resolved asyncronously. Otherwise <strong><span>null</span></strong>.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">hostname</span>    </dt>    <dd>     <p class="para">      Hostname to connect to. Recognized formats are:<div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="parameterscode"><span>www.example.com (hostname)<br> 1.2.3.4 (ipv4address)<br> ::1 (ipv6address)<br>[::1] ([ipv6address])</span></div>      </div>     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">port</span>    </dt>    <dd>     <p class="para">      Port number     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">family</span>    </dt>    <dd>     <p class="para">      Address family.      <strong><span>EventUtil::AF_UNSPEC</span></strong>      ,      <strong><span>EventUtil::AF_INET</span></strong>      , or      <strong><span>EventUtil::AF_INET6</span></strong>      . See      <a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants" class="link">EventUtil constants</a>      .     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.connecthost-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-eventbufferevent.connecthost-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1     <span class="function"><strong style="color:#CC7832">EventBufferEvent::connectHost()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Read callback <br /></span><span style="color: #007700">function </span><span style="color: #9876AA">readcb</span><span style="color: #007700">(</span><span style="color: #9876AA">$bev</span><span style="color: #007700">, </span><span style="color: #9876AA">$base</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">//$input = $bev-&gt;input; //$bev-&gt;getInput();<br /><br />    //$pos = $input-&gt;search("TTP");<br />    </span><span style="color: #9876AA">$pos </span><span style="color: #007700">= </span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">input</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">search</span><span style="color: #007700">(</span><span style="color: #DD0000">"TTP"</span><span style="color: #007700">);<br /><br />    while ((</span><span style="color: #9876AA">$n </span><span style="color: #007700">= </span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">input</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">remove</span><span style="color: #007700">(</span><span style="color: #9876AA">$buf</span><span style="color: #007700">, </span><span style="color: #9876AA">1024</span><span style="color: #007700">)) &gt; </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br />        echo </span><span style="color: #9876AA">$buf</span><span style="color: #007700">;<br />    }<br />}<br /><br /></span><span style="color: #FF8000">// Event callback <br /></span><span style="color: #007700">function </span><span style="color: #9876AA">eventcb</span><span style="color: #007700">(</span><span style="color: #9876AA">$bev</span><span style="color: #007700">, </span><span style="color: #9876AA">$events</span><span style="color: #007700">, </span><span style="color: #9876AA">$base</span><span style="color: #007700">) {<br />    if (</span><span style="color: #9876AA">$events </span><span style="color: #007700">&amp; </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">CONNECTED</span><span style="color: #007700">) {<br />        echo </span><span style="color: #DD0000">"Connected.\n"</span><span style="color: #007700">;<br />    } elseif (</span><span style="color: #9876AA">$events </span><span style="color: #007700">&amp; (</span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">ERROR </span><span style="color: #007700">| </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">EOF</span><span style="color: #007700">)) {<br />        if (</span><span style="color: #9876AA">$events </span><span style="color: #007700">&amp; </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">ERROR</span><span style="color: #007700">) {<br />            echo </span><span style="color: #DD0000">"DNS error: "</span><span style="color: #007700">, </span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDnsErrorString</span><span style="color: #007700">(), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />        }<br /><br />        echo </span><span style="color: #DD0000">"Closing\n"</span><span style="color: #007700">;<br />        </span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exit</span><span style="color: #007700">();<br />        exit(</span><span style="color: #DD0000">"Done\n"</span><span style="color: #007700">);<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$dns_base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventDnsBase</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">, </span><span style="color: #9876AA">TRUE</span><span style="color: #007700">); </span><span style="color: #FF8000">// We'll use async DNS resolving<br /></span><span style="color: #007700">if (!</span><span style="color: #9876AA">$dns_base</span><span style="color: #007700">) {<br />    exit(</span><span style="color: #DD0000">"Failed to init DNS Base\n"</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">$bev </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">, </span><span style="color: #FF8000">// use internal socket  </span><span style="color: #9876AA">NULL</span><span style="color: #007700">,<br />    </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_CLOSE_ON_FREE </span><span style="color: #007700">| </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_DEFER_CALLBACKS</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">"readcb"</span><span style="color: #007700">, </span><span style="color: #FF8000">// writecb  </span><span style="color: #9876AA">NULL</span><span style="color: #007700">, </span><span style="color: #DD0000">"eventcb"</span><span style="color: #007700">, </span><span style="color: #9876AA">$base<br /></span><span style="color: #007700">);<br />if (!</span><span style="color: #9876AA">$bev</span><span style="color: #007700">) {<br />    exit(</span><span style="color: #DD0000">"Failed creating bufferevent socket\n"</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #FF8000">//$bev-&gt;setCallbacks("readcb", // writecb  NULL, "eventcb", $base);<br /></span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">enable</span><span style="color: #007700">(</span><span style="color: #9876AA">Event</span><span style="color: #007700">::</span><span style="color: #9876AA">READ </span><span style="color: #007700">| </span><span style="color: #9876AA">Event</span><span style="color: #007700">::</span><span style="color: #9876AA">WRITE</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$output </span><span style="color: #007700">= </span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">output</span><span style="color: #007700">; </span><span style="color: #FF8000">//$bev-&gt;getOutput();<br /></span><span style="color: #007700">if (!</span><span style="color: #9876AA">$output</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">add</span><span style="color: #007700">(<br />    </span><span style="color: #DD0000">"GET </span><span style="color: #007700">{</span><span style="color: #9876AA">$argv</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">]}</span><span style="color: #DD0000"> HTTP/1.0\r\n"</span><span style="color: #007700">.<br />    </span><span style="color: #DD0000">"Host: </span><span style="color: #007700">{</span><span style="color: #9876AA">$argv</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]}</span><span style="color: #DD0000">\r\n"</span><span style="color: #007700">.<br />    </span><span style="color: #DD0000">"Connection: Close\r\n\r\n"<br /></span><span style="color: #007700">)) {<br />    exit(</span><span style="color: #DD0000">"Failed adding request to output buffer\n"</span><span style="color: #007700">);<br />}<br /><br />if (!</span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connectHost</span><span style="color: #007700">(</span><span style="color: #9876AA">$dns_base</span><span style="color: #007700">, </span><span style="color: #9876AA">$argv</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">], </span><span style="color: #9876AA">80</span><span style="color: #007700">, </span><span style="color: #9876AA">EventUtil</span><span style="color: #007700">::</span><span style="color: #9876AA">AF_UNSPEC</span><span style="color: #007700">)) {<br />    exit(</span><span style="color: #DD0000">"Can't connect to host </span><span style="color: #007700">{</span><span style="color: #9876AA">$argv</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]}</span><span style="color: #DD0000">\n"</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">dispatch</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Connected.<br>HTTP/1.0 301 Moved Permanently<br>Location: http://www.google.co.uk/<br>Content-Type: text/html; charset=UTF-8<br>Date: Sat, 09 Mar 2013 12:21:19 GMT<br>Expires: Mon, 08 Apr 2013 12:21:19 GMT<br>Cache-Control: public, max-age=2592000<br>Server: gws<br>Content-Length: 221<br>X-XSS-Protection: 1; mode=block<br>X-Frame-Options: SAMEORIGIN<br><br>&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;<br>&lt;TITLE&gt;301 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;<br>&lt;H1&gt;301 Moved&lt;/H1&gt;<br>The document has moved<br>&lt;A HREF=&quot;http://www.google.co.uk/&quot;&gt;here&lt;/A&gt;.<br>&lt;/BODY&gt;&lt;/HTML&gt;<br>Closing<br>Done<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbufferevent.connecthost-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::connect()} - Connect buffer event's file descriptor to given address or  UNIX socket</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function connectHost(?EventDnsBase $dns_base, string $hostname, int $port, int $family = EventUtil::AF_UNSPEC): bool {}

    /**
     * createSslFilter
     *
     * @param EventBufferEvent $underlying
     * @param EventSslContext $ctx
     * @param int $state
     * @param int $options
     * @return EventBufferEvent
     * @see https://bitbucket.org/osmanov/pecl-event/src/8e5ab7303f3ef7827b71f31904a51b3f26dd1ac2/php8/classes/buffer_event.c#lines-1025
     */
    public function createSslFilter(EventBufferEvent $underlying, EventSslContext $ctx, int $state, int $options = 0): EventBufferEvent {}

/**
*<div id="eventbufferevent.createpair" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::createPair</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::createPair</span> &mdash; <span class="dc-title">Creates two buffer events connected to each other</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.createpair-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::createPair</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$options</span>    <span class="initializer"> = 0</span>   </span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Returns array of two   <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php" class="classname">EventBufferEvent</a></span>   objects connected to each other. All the usual options are supported,   except for   <strong><span>EventBufferEvent::OPT_CLOSE_ON_FREE</span></strong>   , which has no effect, and   <strong><span>EventBufferEvent::OPT_DEFER_CALLBACKS</span></strong>   , which is always on.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.createpair-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">base</span>    </dt>    <dd>     <span>      Associated event base     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">options</span>    </dt>    <dd>     <p class="para">      {@link EventBufferEvent::OPT_* constants}      combined with bitwise      <span>OR</span>      operator.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.createpair-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns array of two   <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php" class="classname">EventBufferEvent</a></span>   objects connected to each other.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-eventbufferevent.createpair-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>PECL event 1.9.0</td>       <td>        Method made static.       </td>      </tr>     </tbody>       </table>  </span> </div></div>
     * @return array*/
    public static function createPair(EventBase $base, int $options = 0): array {}

/**
*<div id="eventbufferevent.disable" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::disable</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::disable</span> &mdash; <span class="dc-title">Disable events read, write, or both on a buffer event</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.disable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::disable</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$events</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Disable events   <strong><span>Event::READ</span></strong>   ,   <strong><span>Event::WRITE</span></strong>   , or   <strong><span>Event::READ</span></strong>   <span>|</span>   <strong><span>Event::WRITE</span></strong>   on a buffer event.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.disable-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">events</span>    </dt>    <dd>     <span></span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.disable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbufferevent.disable-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::enable()} - Enable events read, write, or both on a buffer event</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function disable(int $events): bool {}

/**
*<div id="eventbufferevent.enable" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::enable</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::enable</span> &mdash; <span class="dc-title">Enable events read, write, or both on a buffer event</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.enable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::enable</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$events</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Enable events   <strong><span>Event::READ</span></strong>   ,   <strong><span>Event::WRITE</span></strong>   , or   <strong><span>Event::READ</span></strong>   <span>|</span>   <strong><span>Event::WRITE</span></strong>   on a buffer event.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.enable-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">events</span>    </dt>    <dd>     <span>      <strong><span>Event::READ</span></strong>      ,      <strong><span>Event::WRITE</span></strong>      , or      <strong><span>Event::READ</span></strong>      <span>|</span>      <strong><span>Event::WRITE</span></strong>      on a buffer event.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.enable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbufferevent.enable-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::disable()} - Disable events read, write, or both on a buffer event</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function enable(int $events): bool {}

/**
*<div id="eventbufferevent.free" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::free</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::free</span> &mdash; <span class="dc-title">Free a buffer event</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.free-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::free</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Free resources allocated by buffer event.  </p>  <p class="para">   Usually there is no need to call this method, since normally it is done   within internal object destructors. However, sometimes we have a long-time   script allocating lots of instances, or a script with a heavy memory usage,   where we need to free resources as soon as possible. In such cases   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::free()</strong></span>   may be used to protect the script against running up to the   <span>memory_limit</span>   .  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.free-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.free-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function free(): void {}

/**
*<div id="eventbufferevent.getdnserrorstring" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::getDnsErrorString</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::getDnsErrorString</span> &mdash; <span class="dc-title">Returns string describing the last failed DNS lookup attempt</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.getdnserrorstring-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::getDnsErrorString</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Returns string describing the last failed DNS lookup attempt made by   <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::connectHost()}</span>   , or an empty string, if there is no DNS error detected.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.getdnserrorstring-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.getdnserrorstring-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a string describing DNS lookup error, or an empty string for no   error.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbufferevent.getdnserrorstring-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::connectHost()} - Connects to a hostname with optionally asyncronous DNS resolving</span>   </li>  </ul> </div></div>
     * @return string*/
    public function getDnsErrorString(): string {}

/**
*<div id="eventbufferevent.getenabled" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::getEnabled</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::getEnabled</span> &mdash; <span class="dc-title">Returns bitmask of events currently enabled on the buffer event</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.getenabled-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::getEnabled</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Returns bitmask of events currently enabled on the buffer event  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.getenabled-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.getenabled-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns integer representing a bitmask of events currently enabled on the   buffer event  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbufferevent.getenabled-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::enable()} - Enable events read, write, or both on a buffer event</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::disable()} - Disable events read, write, or both on a buffer event</span>   </li>  </ul> </div></div>
     * @return int*/
    public function getEnabled(): int {}

/**
*<div id="eventbufferevent.getinput" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::getInput</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::getInput</span> &mdash; <span class="dc-title">Returns underlying input buffer associated with current buffer  event</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.getinput-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::getInput</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span></div>  <p class="para rdfs-comment">   Returns underlying input buffer associated with current buffer event. An   input buffer is a storage for data to read.  </p>  <p class="para">   Note, there is also   <span>    <a href="class.eventbufferevent.html#eventbufferevent.props.input" class="link">input</a>   </span>   property of   <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php" class="classname">EventBufferEvent</a></span>   class.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.getinput-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.getinput-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns instance of   <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="classname">EventBuffer</a></span>   input buffer associated with current buffer event.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-eventbufferevent.getinput-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 Buffer event&#039;s read callback</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">readcb</span><span style="color: #007700">(</span><span style="color: #9876AA">$bev</span><span style="color: #007700">, </span><span style="color: #9876AA">$base</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$input </span><span style="color: #007700">= </span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">input</span><span style="color: #007700">; </span><span style="color: #FF8000">//$bev-&gt;getInput();<br /><br />    </span><span style="color: #007700">while ((</span><span style="color: #9876AA">$n </span><span style="color: #007700">= </span><span style="color: #9876AA">$input</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">remove</span><span style="color: #007700">(</span><span style="color: #9876AA">$buf</span><span style="color: #007700">, </span><span style="color: #9876AA">1024</span><span style="color: #007700">)) &gt; </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br />        echo </span><span style="color: #9876AA">$buf</span><span style="color: #007700">;<br />    }<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbufferevent.getinput-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::getOutput()} - Returns underlying output buffer associated with current buffer  event</span>   </li>  </ul> </div></div>
     * @return EventBuffer*/
    public function getInput(): EventBuffer {}

/**
*<div id="eventbufferevent.getoutput" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::getOutput</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::getOutput</span> &mdash; <span class="dc-title">Returns underlying output buffer associated with current buffer  event</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.getoutput-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::getOutput</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span></div>  <p class="para rdfs-comment">   Returns underlying output buffer associated with current buffer event. An   output buffer is a storage for data to be written.  </p>  <p class="para">   Note, there is also   <span>    <a href="class.eventbufferevent.html#eventbufferevent.props.output" class="link">output</a>   </span>   property of   <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php" class="classname">EventBufferEvent</a></span>   class.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.getoutput-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.getoutput-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns instance of   <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="classname">EventBuffer</a></span>   output buffer associated with current buffer event.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-eventbufferevent.getoutput-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1     <span class="function"><strong style="color:#CC7832">EventBufferEvent::getOutput()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$dns_base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventDnsBase</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">, </span><span style="color: #9876AA">TRUE</span><span style="color: #007700">); </span><span style="color: #FF8000">// Use async DNS resolving<br /></span><span style="color: #007700">if (!</span><span style="color: #9876AA">$dns_base</span><span style="color: #007700">) {<br />    exit(</span><span style="color: #DD0000">"Failed to init DNS Base\n"</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">$bev </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">, </span><span style="color: #FF8000">// use internal socket  </span><span style="color: #9876AA">NULL</span><span style="color: #007700">,<br />    </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_CLOSE_ON_FREE </span><span style="color: #007700">| </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_DEFER_CALLBACKS</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">"readcb"</span><span style="color: #007700">, </span><span style="color: #FF8000">// writecb  </span><span style="color: #9876AA">NULL</span><span style="color: #007700">, </span><span style="color: #DD0000">"eventcb"</span><span style="color: #007700">, </span><span style="color: #9876AA">$base<br /></span><span style="color: #007700">);<br />if (!</span><span style="color: #9876AA">$bev</span><span style="color: #007700">) {<br />    exit(</span><span style="color: #DD0000">"Failed creating bufferevent socket\n"</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">enable</span><span style="color: #007700">(</span><span style="color: #9876AA">Event</span><span style="color: #007700">::</span><span style="color: #9876AA">READ </span><span style="color: #007700">| </span><span style="color: #9876AA">Event</span><span style="color: #007700">::</span><span style="color: #9876AA">WRITE</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$output </span><span style="color: #007700">= </span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getOutput</span><span style="color: #007700">();<br />if (!</span><span style="color: #9876AA">$output</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">add</span><span style="color: #007700">(<br />    </span><span style="color: #DD0000">"GET </span><span style="color: #007700">{</span><span style="color: #9876AA">$argv</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">]}</span><span style="color: #DD0000"> HTTP/1.0\r\n"</span><span style="color: #007700">.<br />    </span><span style="color: #DD0000">"Host: </span><span style="color: #007700">{</span><span style="color: #9876AA">$argv</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]}</span><span style="color: #DD0000">\r\n"</span><span style="color: #007700">.<br />    </span><span style="color: #DD0000">"Connection: Close\r\n\r\n"<br /></span><span style="color: #007700">)) {<br />    exit(</span><span style="color: #DD0000">"Failed adding request to output buffer\n"</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #FF8000">// ... <br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbufferevent.getoutput-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::getInput()} - Returns underlying input buffer associated with current buffer  event</span>   </li>  </ul> </div></div>
     * @return EventBuffer*/
    public function getOutput(): EventBuffer {}

/**
*<div id="eventbufferevent.read" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::read</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::read</span> &mdash; <span class="dc-title">Read buffer&#039;s data</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.read-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::read</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$size</span>   </span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Removes up to   <span class="parameter" style="color:#3A95FF">size</span>   bytes from the input buffer. Returns a string of data read from the input   buffer.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.read-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">size</span>    </dt>    <dd>     <span>      Maximum number of bytes to read     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.read-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns string of data read from the input buffer.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbufferevent.read-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::readBuffer()} - Drains the entire contents of the input buffer and places them into buf</span>   </li>  </ul> </div></div>
     * @return null|string*/
    public function read(int $size): ?string {}

/**
*<div id="eventbufferevent.readbuffer" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::readBuffer</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::readBuffer</span> &mdash; <span class="dc-title">Drains the entire contents of the input buffer and places them into buf</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.readbuffer-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::readBuffer</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span>     <span class="parameter" style="color:#3A95FF">$buf</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Drains the entire contents of the input buffer and places them into   <span class="parameter" style="color:#3A95FF">buf</span>   .  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.readbuffer-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">buf</span>    </dt>    <dd>     <span>      Target buffer     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.readbuffer-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbufferevent.readbuffer-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::read()} - Read buffer's data</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function readBuffer(EventBuffer $buf): bool {}

/**
*<div id="eventbufferevent.setcallbacks" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::setCallbacks</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::setCallbacks</span> &mdash; <span class="dc-title">Assigns read, write and event(status) callbacks</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.setcallbacks-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::setCallbacks</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$readcb</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$writecb</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$eventcb</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>   <span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Assigns read, write and event(status) callbacks.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.setcallbacks-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">readcb</span>    </dt>    <dd>     <span>      Read event callback. See      <a href="https://www.php.net/manual/zh/eventbufferevent.about.callbacks.php" class="link">About buffer event     callbacks</a>      .     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">writecb</span>    </dt>    <dd>     <p class="para">      Write event callback. See      <a href="https://www.php.net/manual/zh/eventbufferevent.about.callbacks.php" class="link">About buffer event     callbacks</a>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">eventcb</span>    </dt>    <dd>     <p class="para">      Status-change event callback. See      <a href="https://www.php.net/manual/zh/eventbufferevent.about.callbacks.php" class="link">About buffer event     callbacks</a>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">arg</span>    </dt>    <dd>     <p class="para">      A variable that will be passed to all the callbacks.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.setcallbacks-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbufferevent.setcallbacks-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::__construct()} - Constructs EventBufferEvent object</span>   </li>  </ul> </div></div>
*/
    public function setCallbacks(callable $readcb, callable $writecb, callable $eventcb, mixed $arg = null): void {}

/**
*<div id="eventbufferevent.setpriority" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::setPriority</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::setPriority</span> &mdash; <span class="dc-title">Assign a priority to a bufferevent</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.setpriority-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::setPriority</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Assign a priority to a bufferevent  </p>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    Only supported for socket buffer events   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.setpriority-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">priority</span>    </dt>    <dd>     <span>      Priority value.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.setpriority-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool*/
    public function setPriority(int $priority): bool {}

/**
*<div id="eventbufferevent.settimeouts" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::setTimeouts</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::setTimeouts</span> &mdash; <span class="dc-title">Set the read and write timeout for a buffer event</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.settimeouts-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::setTimeouts</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$timeout_read</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$timeout_write</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Set the read and write timeout for a buffer event  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.settimeouts-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">timeout_read</span>    </dt>    <dd>     <span>      Read timeout     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">timeout_write</span>    </dt>    <dd>     <p class="para">      Write timeout     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.settimeouts-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool*/
    public function setTimeouts(float $timeout_read, float $timeout_write): bool {}

/**
*<div id="eventbufferevent.setwatermark" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::setWatermark</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::setWatermark</span> &mdash; <span class="dc-title">Adjusts read and/or write watermarks</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.setwatermark-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::setWatermark</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$events</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$lowmark</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$highmark</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Adjusts the read watermarks, the write   <em>watermarks</em>   , or both, of a single buffer event.  </p>  <p class="para">   A buffer event watermark is an edge, a value specifying number of bytes to   be read or written before callback is invoked. By default every read/write   event triggers a callback invokation. See   <a href="http://www.wangafu.net/~nickm/libevent-book/Ref6_bufferevent.html#_callbacks_and_watermarks" class="link external">&raquo;&nbsp;Fast portable non-blocking network programming with Libevent: Callbacks and watermarks</a>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.setwatermark-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">events</span>    </dt>    <dd>     <span>      Bitmask of      <strong><span>Event::READ</span></strong>      ,      <strong><span>Event::WRITE</span></strong>      , or both.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">lowmark</span>    </dt>    <dd>     <p class="para">      Minimum watermark value.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">highmark</span>    </dt>    <dd>     <p class="para">      Maximum watermark value.      <strong><span>0</span></strong>      means &quot;unlimited&quot;.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.setwatermark-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function setWatermark(int $events, int $lowmark, int $highmark): void {}

/**
*<div id="eventbufferevent.sslerror" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::sslError</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::sslError</span> &mdash; <span class="dc-title">Returns most recent OpenSSL error reported on the buffer event</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.sslerror-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::sslError</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Returns most recent OpenSSL error reported on the buffer event.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    This function is available only if    <span>Event</span>    is compiled with OpenSSL support.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.sslerror-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.sslerror-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns OpenSSL error string reported on the buffer event, or <strong><span>false</span></strong>, if   there is no more error to return.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-eventbufferevent.sslerror-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1     <span class="function"><strong style="color:#CC7832">EventBufferEvent::sslError()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// This callback is invoked when some even occurs on the event listener,<br />// e.g. connection closed, or an error occurred<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">ssl_event_cb</span><span style="color: #007700">(</span><span style="color: #9876AA">$bev</span><span style="color: #007700">, </span><span style="color: #9876AA">$events</span><span style="color: #007700">, </span><span style="color: #9876AA">$ctx</span><span style="color: #007700">) {<br />    if (</span><span style="color: #9876AA">$events </span><span style="color: #007700">&amp; </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">ERROR</span><span style="color: #007700">) {<br />        </span><span style="color: #FF8000">// Fetch errors from the SSL error stack<br />        </span><span style="color: #007700">while (</span><span style="color: #9876AA">$err </span><span style="color: #007700">= </span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">sslError</span><span style="color: #007700">()) {<br />            </span><span style="color: #9876AA">fprintf</span><span style="color: #007700">(</span><span style="color: #9876AA">STDERR</span><span style="color: #007700">, </span><span style="color: #DD0000">"Bufferevent error %s.\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$err</span><span style="color: #007700">);<br />        }<br />    }<br /><br />    if (</span><span style="color: #9876AA">$events </span><span style="color: #007700">&amp; (</span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">EOF </span><span style="color: #007700">| </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">ERROR</span><span style="color: #007700">)) {<br />        </span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">free</span><span style="color: #007700">();<br />    }<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbufferevent.sslerror-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::sslRenegotiate()} - Tells a bufferevent to begin SSL renegotiation</span>   </li>  </ul> </div></div>
     * @return false|string*/
    public function sslError(): false|string {}

/**
*<div id="eventbufferevent.sslfilter" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::sslFilter</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::sslFilter</span> &mdash; <span class="dc-title">Create a new SSL buffer event to send its data over another buffer event</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.sslfilter-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::sslFilter</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php" class="type EventBufferEvent" style="color:#EAB766">EventBufferEvent</a></span>     <span class="parameter" style="color:#3A95FF">$underlying</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php" class="type EventSslContext" style="color:#EAB766">EventSslContext</a></span>     <span class="parameter" style="color:#3A95FF">$ctx</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$state</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$options</span>    <span class="initializer"> = 0</span>   </span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php" class="type EventBufferEvent" style="color:#EAB766">EventBufferEvent</a></span></div>  <p class="para rdfs-comment">   Create a new SSL buffer event to send its data over another buffer event  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    This function is available only if    <span>Event</span>    is compiled with OpenSSL support.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.sslfilter-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">base</span>    </dt>    <dd>     <span>      Associated event base.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">underlying</span>    </dt>    <dd>     <p class="para">      A socket buffer event to use for this SSL.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">ctx</span>    </dt>    <dd>     <p class="para">      Object of      <span class="classname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php" class="classname">EventSslContext</a></span>      class.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">state</span>    </dt>    <dd>     <p class="para">      The current state of SSL connection:      <strong><span>EventBufferEvent::SSL_OPEN</span></strong>      ,      <strong><span>EventBufferEvent::SSL_ACCEPTING</span></strong>      or      <strong><span>EventBufferEvent::SSL_CONNECTING</span></strong>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">options</span>    </dt>    <dd>     <p class="para">      One or more buffer event options.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.sslfilter-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a new SSL   <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php" class="classname">EventBufferEvent</a></span>   object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-eventbufferevent.sslfilter-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Simple SMTP server</strong></p><div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /> </span><span style="color: #FF8000">//<br /> * Author: Andrew Rose &lt;hello at andrewrose dot co dot uk&gt;<br /> *<br /> * Usage:<br /> * 1) Prepare cert.pem certificate and privkey.pem private key files.<br /> * 2) Launch the server script<br /> * 3) Open TLS connection, e.g.:<br /> *      $ openssl s_client -connect localhost:25 -starttls smtp -crlf<br /> * 4) Start testing the commands listed in `cmd` method below.<br /> <br /><br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Handler </span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">$domainName </span><span style="color: #007700">= </span><span style="color: #9876AA">FALSE</span><span style="color: #007700">;<br />    public </span><span style="color: #9876AA">$connections </span><span style="color: #007700">= [];<br />    public </span><span style="color: #9876AA">$buffers </span><span style="color: #007700">= [];<br />    public </span><span style="color: #9876AA">$maxRead </span><span style="color: #007700">= </span><span style="color: #9876AA">256000</span><span style="color: #007700">;<br /><br />    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">() {<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ctx </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventSslContext</span><span style="color: #007700">(</span><span style="color: #9876AA">EventSslContext</span><span style="color: #007700">::</span><span style="color: #9876AA">SSLv3_SERVER_METHOD</span><span style="color: #007700">, [<br />            </span><span style="color: #9876AA">EventSslContext</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_LOCAL_CERT  </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'cert.pem'</span><span style="color: #007700">,<br />            </span><span style="color: #9876AA">EventSslContext</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_LOCAL_PK    </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'privkey.pem'</span><span style="color: #007700">,<br />            </span><span style="color: #FF8000">//EventSslContext::OPT_PASSPHRASE  =&gt; '',<br />            </span><span style="color: #9876AA">EventSslContext</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_VERIFY_PEER </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">false</span><span style="color: #007700">, </span><span style="color: #FF8000">// change to true with authentic cert<br />            </span><span style="color: #9876AA">EventSslContext</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_ALLOW_SELF_SIGNED </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">true </span><span style="color: #FF8000">// change to false with authentic cert<br />        </span><span style="color: #007700">]);<br /><br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">();<br />        if (!</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">base</span><span style="color: #007700">) {<br />            exit(</span><span style="color: #DD0000">"Couldn't open event base\n"</span><span style="color: #007700">);<br />        }<br /><br />        if (!</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">listener </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventListener</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">base</span><span style="color: #007700">,<br />            [</span><span style="color: #9876AA">$this</span><span style="color: #007700">, </span><span style="color: #DD0000">'ev_accept'</span><span style="color: #007700">],<br />            </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ctx</span><span style="color: #007700">,<br />            </span><span style="color: #9876AA">EventListener</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_CLOSE_ON_FREE </span><span style="color: #007700">| </span><span style="color: #9876AA">EventListener</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_REUSEABLE</span><span style="color: #007700">,<br />            -</span><span style="color: #9876AA">1</span><span style="color: #007700">,<br />            </span><span style="color: #DD0000">'0.0.0.0:25'</span><span style="color: #007700">))<br />        {<br />            exit(</span><span style="color: #DD0000">"Couldn't create listener\n"</span><span style="color: #007700">);<br />        }<br /><br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">listener</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setErrorCallback</span><span style="color: #007700">([</span><span style="color: #9876AA">$this</span><span style="color: #007700">, </span><span style="color: #DD0000">'ev_error'</span><span style="color: #007700">]);<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">dispatch</span><span style="color: #007700">();<br />    }<br /><br />    public function </span><span style="color: #9876AA">ev_accept</span><span style="color: #007700">(</span><span style="color: #9876AA">$listener</span><span style="color: #007700">, </span><span style="color: #9876AA">$fd</span><span style="color: #007700">, </span><span style="color: #9876AA">$address</span><span style="color: #007700">, </span><span style="color: #9876AA">$ctx</span><span style="color: #007700">) {<br />        static </span><span style="color: #9876AA">$id </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />        </span><span style="color: #9876AA">$id </span><span style="color: #007700">+= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br /><br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connections</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">][</span><span style="color: #DD0000">'clientData'</span><span style="color: #007700">] = </span><span style="color: #DD0000">''</span><span style="color: #007700">;<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connections</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">][</span><span style="color: #DD0000">'cnx'</span><span style="color: #007700">] = new </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">base</span><span style="color: #007700">, </span><span style="color: #9876AA">$fd</span><span style="color: #007700">,<br />            </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_CLOSE_ON_FREE</span><span style="color: #007700">);<br /><br />        if (!</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connections</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">][</span><span style="color: #DD0000">'cnx'</span><span style="color: #007700">]) {<br />            echo </span><span style="color: #DD0000">"Failed creating buffer\n"</span><span style="color: #007700">;<br />            </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exit</span><span style="color: #007700">(</span><span style="color: #9876AA">NULL</span><span style="color: #007700">);<br />            exit(</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br />        }<br /><br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connections</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">][</span><span style="color: #DD0000">'cnx'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">setCallbacks</span><span style="color: #007700">([</span><span style="color: #9876AA">$this</span><span style="color: #007700">, </span><span style="color: #DD0000">"ev_read"</span><span style="color: #007700">], </span><span style="color: #9876AA">NULL</span><span style="color: #007700">,<br />            [</span><span style="color: #9876AA">$this</span><span style="color: #007700">, </span><span style="color: #DD0000">'ev_error'</span><span style="color: #007700">], </span><span style="color: #9876AA">$id</span><span style="color: #007700">);<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connections</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">][</span><span style="color: #DD0000">'cnx'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">enable</span><span style="color: #007700">(</span><span style="color: #9876AA">Event</span><span style="color: #007700">::</span><span style="color: #9876AA">READ </span><span style="color: #007700">| </span><span style="color: #9876AA">Event</span><span style="color: #007700">::</span><span style="color: #9876AA">WRITE</span><span style="color: #007700">);<br /><br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ev_write</span><span style="color: #007700">(</span><span style="color: #9876AA">$id</span><span style="color: #007700">, </span><span style="color: #DD0000">'220 '</span><span style="color: #007700">.</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">domainName</span><span style="color: #007700">.</span><span style="color: #DD0000">" wazzzap?\r\n"</span><span style="color: #007700">);<br />    }<br /><br />    function </span><span style="color: #9876AA">ev_error</span><span style="color: #007700">(</span><span style="color: #9876AA">$listener</span><span style="color: #007700">, </span><span style="color: #9876AA">$ctx</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">$errno </span><span style="color: #007700">= </span><span style="color: #9876AA">EventUtil</span><span style="color: #007700">::</span><span style="color: #9876AA">getLastSocketErrno</span><span style="color: #007700">();<br /><br />        </span><span style="color: #9876AA">fprintf</span><span style="color: #007700">(</span><span style="color: #9876AA">STDERR</span><span style="color: #007700">, </span><span style="color: #DD0000">"Got an error %d (%s) on the listener. Shutting down.\n"</span><span style="color: #007700">,<br />            </span><span style="color: #9876AA">$errno</span><span style="color: #007700">, </span><span style="color: #9876AA">EventUtil</span><span style="color: #007700">::</span><span style="color: #9876AA">getLastSocketError</span><span style="color: #007700">());<br /><br />        if (</span><span style="color: #9876AA">$errno </span><span style="color: #007700">!= </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br />            </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exit</span><span style="color: #007700">(</span><span style="color: #9876AA">NULL</span><span style="color: #007700">);<br />            exit();<br />        }<br />    }<br /><br />    public function </span><span style="color: #9876AA">ev_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$id</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connections</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">][</span><span style="color: #DD0000">'cnx'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">disable</span><span style="color: #007700">(</span><span style="color: #9876AA">Event</span><span style="color: #007700">::</span><span style="color: #9876AA">READ </span><span style="color: #007700">| </span><span style="color: #9876AA">Event</span><span style="color: #007700">::</span><span style="color: #9876AA">WRITE</span><span style="color: #007700">);<br />        unset(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connections</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">]);<br />    }<br /><br />    protected function </span><span style="color: #9876AA">ev_write</span><span style="color: #007700">(</span><span style="color: #9876AA">$id</span><span style="color: #007700">, </span><span style="color: #9876AA">$string</span><span style="color: #007700">) {<br />        echo </span><span style="color: #DD0000">'S('</span><span style="color: #007700">.</span><span style="color: #9876AA">$id</span><span style="color: #007700">.</span><span style="color: #DD0000">'): '</span><span style="color: #007700">.</span><span style="color: #9876AA">$string</span><span style="color: #007700">;<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connections</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">][</span><span style="color: #DD0000">'cnx'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">write</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">);<br />    }<br /><br />    public function </span><span style="color: #9876AA">ev_read</span><span style="color: #007700">(</span><span style="color: #9876AA">$buffer</span><span style="color: #007700">, </span><span style="color: #9876AA">$id</span><span style="color: #007700">) {<br />        while(</span><span style="color: #9876AA">$buffer</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">input</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">length </span><span style="color: #007700">&gt; </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br />            </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connections</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">][</span><span style="color: #DD0000">'clientData'</span><span style="color: #007700">] .= </span><span style="color: #9876AA">$buffer</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">input</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">read</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">maxRead</span><span style="color: #007700">);<br />            </span><span style="color: #9876AA">$clientDataLen </span><span style="color: #007700">= </span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connections</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">][</span><span style="color: #DD0000">'clientData'</span><span style="color: #007700">]);<br /><br />            if(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connections</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">][</span><span style="color: #DD0000">'clientData'</span><span style="color: #007700">][</span><span style="color: #9876AA">$clientDataLen</span><span style="color: #007700">-</span><span style="color: #9876AA">1</span><span style="color: #007700">] == </span><span style="color: #DD0000">"\n"<br />                </span><span style="color: #007700">&amp;&amp; </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connections</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">][</span><span style="color: #DD0000">'clientData'</span><span style="color: #007700">][</span><span style="color: #9876AA">$clientDataLen</span><span style="color: #007700">-</span><span style="color: #9876AA">2</span><span style="color: #007700">] == </span><span style="color: #DD0000">"\r"</span><span style="color: #007700">)<br />            {<br />                </span><span style="color: #FF8000">// remove the trailing \r\n<br />                </span><span style="color: #9876AA">$line </span><span style="color: #007700">= </span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connections</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">][</span><span style="color: #DD0000">'clientData'</span><span style="color: #007700">], </span><span style="color: #9876AA">0</span><span style="color: #007700">,<br />                    </span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connections</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">][</span><span style="color: #DD0000">'clientData'</span><span style="color: #007700">]) - </span><span style="color: #9876AA">2</span><span style="color: #007700">);<br /><br />                </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connections</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">][</span><span style="color: #DD0000">'clientData'</span><span style="color: #007700">] = </span><span style="color: #DD0000">''</span><span style="color: #007700">;<br />                </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">cmd</span><span style="color: #007700">(</span><span style="color: #9876AA">$buffer</span><span style="color: #007700">, </span><span style="color: #9876AA">$id</span><span style="color: #007700">, </span><span style="color: #9876AA">$line</span><span style="color: #007700">);<br />            }<br />        }<br />    }<br /><br />    protected function </span><span style="color: #9876AA">cmd</span><span style="color: #007700">(</span><span style="color: #9876AA">$buffer</span><span style="color: #007700">, </span><span style="color: #9876AA">$id</span><span style="color: #007700">, </span><span style="color: #9876AA">$line</span><span style="color: #007700">) {<br />        switch (</span><span style="color: #9876AA">$line</span><span style="color: #007700">) {<br />            case </span><span style="color: #9876AA">strncmp</span><span style="color: #007700">(</span><span style="color: #DD0000">'EHLO '</span><span style="color: #007700">, </span><span style="color: #9876AA">$line</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">):<br />                </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ev_write</span><span style="color: #007700">(</span><span style="color: #9876AA">$id</span><span style="color: #007700">, </span><span style="color: #DD0000">"250-STARTTLS\r\n"</span><span style="color: #007700">);<br />                </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ev_write</span><span style="color: #007700">(</span><span style="color: #9876AA">$id</span><span style="color: #007700">, </span><span style="color: #DD0000">"250 OK ehlo\r\n"</span><span style="color: #007700">);<br />                break;<br /><br />            case </span><span style="color: #9876AA">strncmp</span><span style="color: #007700">(</span><span style="color: #DD0000">'HELO '</span><span style="color: #007700">, </span><span style="color: #9876AA">$line</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">):<br />                </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ev_write</span><span style="color: #007700">(</span><span style="color: #9876AA">$id</span><span style="color: #007700">, </span><span style="color: #DD0000">"250-STARTTLS\r\n"</span><span style="color: #007700">);<br />                </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ev_write</span><span style="color: #007700">(</span><span style="color: #9876AA">$id</span><span style="color: #007700">, </span><span style="color: #DD0000">"250 OK helo\r\n"</span><span style="color: #007700">);<br />                break;<br /><br />            case </span><span style="color: #9876AA">strncmp</span><span style="color: #007700">(</span><span style="color: #DD0000">'QUIT'</span><span style="color: #007700">, </span><span style="color: #9876AA">$line</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">):<br />                </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ev_write</span><span style="color: #007700">(</span><span style="color: #9876AA">$id</span><span style="color: #007700">, </span><span style="color: #DD0000">"250 OK quit\r\n"</span><span style="color: #007700">);<br />                </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ev_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$id</span><span style="color: #007700">);<br />                break;<br /><br />            case </span><span style="color: #9876AA">strncmp</span><span style="color: #007700">(</span><span style="color: #DD0000">'STARTTLS'</span><span style="color: #007700">, </span><span style="color: #9876AA">$line</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">):<br />                </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ev_write</span><span style="color: #007700">(</span><span style="color: #9876AA">$id</span><span style="color: #007700">, </span><span style="color: #DD0000">"220 Ready to start TLS\r\n"</span><span style="color: #007700">);<br />                </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connections</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">][</span><span style="color: #DD0000">'cnx'</span><span style="color: #007700">] = </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">sslFilter</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">base</span><span style="color: #007700">,<br />                    </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connections</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">][</span><span style="color: #DD0000">'cnx'</span><span style="color: #007700">], </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ctx</span><span style="color: #007700">,<br />                    </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">SSL_ACCEPTING</span><span style="color: #007700">,<br />                    </span><span style="color: #9876AA">EventBufferEvent</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_CLOSE_ON_FREE</span><span style="color: #007700">);<br />                </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connections</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">][</span><span style="color: #DD0000">'cnx'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">setCallbacks</span><span style="color: #007700">([</span><span style="color: #9876AA">$this</span><span style="color: #007700">, </span><span style="color: #DD0000">"ev_read"</span><span style="color: #007700">], </span><span style="color: #9876AA">NULL</span><span style="color: #007700">, [</span><span style="color: #9876AA">$this</span><span style="color: #007700">, </span><span style="color: #DD0000">'ev_error'</span><span style="color: #007700">], </span><span style="color: #9876AA">$id</span><span style="color: #007700">);<br />                </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connections</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">][</span><span style="color: #DD0000">'cnx'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">enable</span><span style="color: #007700">(</span><span style="color: #9876AA">Event</span><span style="color: #007700">::</span><span style="color: #9876AA">READ </span><span style="color: #007700">| </span><span style="color: #9876AA">Event</span><span style="color: #007700">::</span><span style="color: #9876AA">WRITE</span><span style="color: #007700">);<br />                break;<br /><br />            default:<br />                echo </span><span style="color: #DD0000">'unknown command: '</span><span style="color: #007700">.</span><span style="color: #9876AA">$line</span><span style="color: #007700">.</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />                break;<br />        }<br />    }<br />}<br /><br />new </span><span style="color: #9876AA">Handler</span><span style="color: #007700">();</span></span></span></div>  </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbufferevent.sslfilter-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::sslSocket()} - Creates a new SSL buffer event to send its data over an SSL on a socket</span>   </li>  </ul> </div></div>
     * @return EventBufferEvent*/
    public static function sslFilter(EventBase $base, EventBufferEvent $underlying, EventSslContext $ctx, int $state, int $options = 0): EventBufferEvent {}

/**
*<div id="eventbufferevent.sslgetcipherinfo" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::sslGetCipherInfo</h1>  <p class="verinfo">(PECL event &gt;= 1.10.0)</p><p class="refpurpose"><span class="refname">EventBufferEvent::sslGetCipherInfo</span> &mdash; <span class="dc-title">Returns a textual description of the cipher</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.sslgetcipherinfo-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::sslGetCipherInfo</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Retrieves description of the current cipher by means of the   <span>SSL_CIPHER_description</span> SSL API function (see   <em>SSL_CIPHER_get_name(3)</em> man page).  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    This function is available only if    <span>Event</span>    is compiled with OpenSSL support.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.sslgetcipherinfo-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.sslgetcipherinfo-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a textual description of the cipher on success, or <strong><span>false</span></strong> on error.  </p> </div></div>
     * @return string|false*/
    public function sslGetCipherInfo(): string|false {}

/**
*<div id="eventbufferevent.sslgetciphername" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::sslGetCipherName</h1>  <p class="verinfo">(PECL event &gt;= 1.10.0)</p><p class="refpurpose"><span class="refname">EventBufferEvent::sslGetCipherName</span> &mdash; <span class="dc-title">Returns the current cipher name of the SSL connection</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.sslgetciphername-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::sslGetCipherName</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Retrieves name of cipher used by current SSL connection.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    This function is available only if    <span>Event</span>    is compiled with OpenSSL support.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.sslgetciphername-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.sslgetciphername-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current cipher name of the SSL connection, or <strong><span>false</span></strong> on error.  </p> </div></div>
     * @return string|false*/
    public function sslGetCipherName(): string|false {}

/**
*<div id="eventbufferevent.sslgetcipherversion" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::sslGetCipherVersion</h1>  <p class="verinfo">(PECL event &gt;= 1.10.0)</p><p class="refpurpose"><span class="refname">EventBufferEvent::sslGetCipherVersion</span> &mdash; <span class="dc-title">Returns version of cipher used by current SSL connection</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.sslgetcipherversion-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::sslGetCipherVersion</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Retrieves version of cipher used by current SSL connection.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    This function is available only if    <span>Event</span>    is compiled with OpenSSL support.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.sslgetcipherversion-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.sslgetcipherversion-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current cipher version of the SSL connection, or <strong><span>false</span></strong> on error.  </p> </div></div>
     * @return string|false*/
    public function sslGetCipherVersion(): string|false {}

/**
*<div id="eventbufferevent.sslgetprotocol" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::sslGetProtocol</h1>  <p class="verinfo">(PECL event &gt;= 1.10.0)</p><p class="refpurpose"><span class="refname">EventBufferEvent::sslGetProtocol</span> &mdash; <span class="dc-title">Returns the name of the protocol used for current SSL connection</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.sslgetprotocol-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::sslGetProtocol</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Returns the name of the protocol used for current SSL connection.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    This function is available only if    <span>Event</span>    is compiled with OpenSSL support.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.sslgetprotocol-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.sslgetprotocol-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the name of the protocol used for current SSL connection.  </p> </div></div>
     * @return string*/
    public function sslGetProtocol(): string {}

/**
*<div id="eventbufferevent.sslrenegotiate" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::sslRenegotiate</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::sslRenegotiate</span> &mdash; <span class="dc-title">Tells a bufferevent to begin SSL renegotiation</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.sslrenegotiate-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::sslRenegotiate</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Tells a bufferevent to begin SSL renegotiation.  </p>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    Calling this function tells the SSL to renegotiate, and the buffer event    to invoke appropriate callbacks. This is an advanced topic; this should be    generally avoided unless one really knows what he/she does, especially    since many SSL versions have had known security issues related to    renegotiation.   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.sslrenegotiate-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.sslrenegotiate-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function sslRenegotiate(): void {}

/**
*<div id="eventbufferevent.sslsocket" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::sslSocket</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::sslSocket</span> &mdash; <span class="dc-title">Creates a new SSL buffer event to send its data over an SSL on a socket</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.sslsocket-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::sslSocket</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$socket</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php" class="type EventSslContext" style="color:#EAB766">EventSslContext</a></span>     <span class="parameter" style="color:#3A95FF">$ctx</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$state</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$options</span>   <span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php" class="type EventBufferEvent" style="color:#EAB766">EventBufferEvent</a></span></div>  <p class="para rdfs-comment">   Creates a new SSL buffer event to send its data over an SSL on a socket.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.sslsocket-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">base</span>    </dt>    <dd>     <span>      Associated event base.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">socket</span>    </dt>    <dd>     <p class="para">      Socket to use for this SSL. Can be stream or socket resource, numeric      file descriptor, or <strong><span>null</span></strong>. If      <span class="parameter" style="color:#3A95FF">socket</span>      is <strong><span>null</span></strong>, it is assumed that the file descriptor for the socket will be      assigned later, for instance, by means of      <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::connectHost()}</span>      method.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">ctx</span>    </dt>    <dd>     <p class="para">      Object of      <span class="classname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php" class="classname">EventSslContext</a></span>      class.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">state</span>    </dt>    <dd>     <p class="para">      The current state of SSL connection:      <strong><span>EventBufferEvent::SSL_OPEN</span></strong>      ,      <strong><span>EventBufferEvent::SSL_ACCEPTING</span></strong>      or      <strong><span>EventBufferEvent::SSL_CONNECTING</span></strong>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">options</span>    </dt>    <dd>     <p class="para">      The buffer event options.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.sslsocket-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns   <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php" class="classname">EventBufferEvent</a></span>   object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbufferevent.sslsocket-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::sslFilter()} - Create a new SSL buffer event to send its data over another buffer event</span>   </li>  </ul> </div></div>
     * @return EventBufferEvent*/
    public static function sslSocket(EventBase $base, mixed $socket, EventSslContext $ctx, int $state, int $options = 0): EventBufferEvent {}

/**
*<div id="eventbufferevent.write" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::write</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::write</span> &mdash; <span class="dc-title">Adds data to a buffer event&#039;s output buffer</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.write-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::write</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$data</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Adds   <span class="parameter" style="color:#3A95FF">data</span>   to a buffer event&#039;s output buffer  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.write-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">data</span>    </dt>    <dd>     <span>      Data to be added to the underlying buffer.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.write-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbufferevent.write-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::writeBuffer()} - Adds contents of the entire buffer to a buffer event's output  buffer</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function write(string $data): bool {}

/**
*<div id="eventbufferevent.writebuffer" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventBufferEvent::writeBuffer</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventBufferEvent::writeBuffer</span> &mdash; <span class="dc-title">Adds contents of the entire buffer to a buffer event&#039;s output  buffer</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventbufferevent.writebuffer-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventBufferEvent::writeBuffer</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span>     <span class="parameter" style="color:#3A95FF">$buf</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Adds contents of the entire buffer to a buffer event&#039;s output buffer  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventbufferevent.writebuffer-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">buf</span>    </dt>    <dd>     <span>      Source      <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="classname">EventBuffer</a></span>      object.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventbufferevent.writebuffer-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventbufferevent.writebuffer-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBufferEvent::write()} - Adds data to a buffer event's output buffer</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function writeBuffer(EventBuffer $buf): bool {}
}

// The EventConfig class
/**
*<div id="class.eventconfig" class="reference"> <h1 class="title">EventConfig 类</h1>  <div class="partintro"><p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p>  <div class="section" id="eventconfig.intro">   <h2 class="title">简介</h2>   <p class="para">    表示可以实例化 <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="classname">EventBase</a></span> 的配置结构。   </p>  </div>  <div class="section" id="eventconfig.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">final</span>      <span class="modifier">class</span> <strong class="classname">EventConfig</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// Constants </div>    <div class="fieldsynopsis">     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventconfig.php#eventconfig.constants.feature-et"><var class="varname">FEATURE_ET</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventconfig.php#eventconfig.constants.feature-o1"><var class="varname">FEATURE_O1</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventconfig.php#eventconfig.constants.feature-fds"><var class="varname">FEATURE_FDS</var></a></var><span class="initializer"> = 4</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventconfig.avoidmethod.php" class="methodname" style="color:#CC7832">avoidMethod</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$method</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventconfig.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>()</div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventconfig.requirefeatures.php" class="methodname" style="color:#CC7832">requireFeatures</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$feature</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventconfig.setflags.php" class="methodname" style="color:#CC7832">setFlags</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$flags</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventconfig.setmaxdispatchinterval.php" class="methodname" style="color:#CC7832">setMaxDispatchInterval</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$max_interval</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$max_callbacks</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$min_priority</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>  <div class="section" id="eventconfig.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="eventconfig.constants.feature-et">      <strong><span>EventConfig::FEATURE_ET</span></strong>     </dt>     <dd>      <p class="para">       需要支持边缘触发 I/O 的后端方法。      </p>     </dd>             <dt id="eventconfig.constants.feature-o1">      <strong><span>EventConfig::FEATURE_O1</span></strong>     </dt>     <dd>      <p class="para">       要求添加/删除 event 或者使 event 成为活跃的后端方法是O(1)操作。      </p>     </dd>             <dt id="eventconfig.constants.feature-fds">      <strong><span>EventConfig::FEATURE_FDS</span></strong>     </dt>     <dd>      <p class="para">       需要一个可以支持任何文件描述符类型的后端方法，而不仅仅是 socket 。      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EventConfig::avoidMethod} — 告诉 libevent 避免使用指定 event 方法</li><li>{@link EventConfig::__construct} — EventConfig 构造函数</li><li>{@link EventConfig::requireFeatures} — 输入应用程序要求的必需 event 方法功能</li><li>{@link EventConfig::setFlags} — EventBase 初始化需设置的一个或者多个 flag</li><li>{@link EventConfig::setMaxDispatchInterval} — 防止优先级反转</li></ul></div>
*/
final class EventConfig
{
    public const FEATURE_ET = 1;
    public const FEATURE_O1 = 2;
    public const FEATURE_FDS = 4;

    /**
     * __construct.
     * Constructs EventConfig object.
     *
     * @see https://secure.php.net/manual/en/eventconfig.construct.php
     */
    #[Pure]
    public function __construct() {}

/**
*<div id="eventconfig.avoidmethod" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventConfig::avoidMethod</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventConfig::avoidMethod</span> &mdash; <span class="dc-title">告诉 libevent 避免使用指定 event 方法</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventconfig.avoidmethod-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventConfig::avoidMethod</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$method</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   告诉 libevent 避免使用指定 event 方法(后端)。参考   <a href="http://www.wangafu.net/~nickm/libevent-book/Ref2_eventbase.html#_creating_an_event_base" class="link external">&raquo;&nbsp;创建 event_base</a>   。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventconfig.avoidmethod-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">method</span>    </dt>    <dd>     <span>      要避免的后端方法。 参考      <a href="https://www.php.net/manual/zh/class.eventconfig.php#eventconfig.constants" class="link">EventConfig 常量</a>      。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventconfig.avoidmethod-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-eventconfig.avoidmethod-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1     <span class="function"><strong style="color:#CC7832">EventConfig::avoidMethod()</strong></span> 示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$cfg </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventConfig</span><span style="color: #007700">();<br />if (</span><span style="color: #9876AA">$cfg</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">avoidMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">"select"</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"'select' 方法失效\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventconfig.avoidmethod-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBase::__construct()} - 构造 EventBase 对象</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function avoidMethod(string $method): bool {}

/**
*<div id="eventconfig.requirefeatures" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventConfig::requireFeatures</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventConfig::requireFeatures</span> &mdash; <span class="dc-title">输入应用程序要求的必需 event 方法功能</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventconfig.requirefeatures-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventConfig::requireFeatures</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$feature</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   输入应用程序要求的必需 event 方法功能。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventconfig.requirefeatures-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">feature</span>    </dt>    <dd>     <span>      所需功能的位掩码。参考 {@link           <code class="literal">EventConfig::FEATURE_*</code> 常量       }     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventconfig.requirefeatures-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-eventconfig.requirefeatures-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1     <span class="function"><strong style="color:#CC7832">EventConfig::requireFeatures()</strong></span> 示例 </strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$cfg </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventConfig</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 创建跟 config 关联的 event_base<br /></span><span style="color: #9876AA">$base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">(</span><span style="color: #9876AA">$cfg</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 需要 FDS 功能<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">$cfg</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">requireFeatures</span><span style="color: #007700">(</span><span style="color: #9876AA">EventConfig</span><span style="color: #007700">::</span><span style="color: #9876AA">FEATURE_FDS</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"FDS feature is now required\n"</span><span style="color: #007700">;<br /><br />    </span><span style="color: #9876AA">$base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">(</span><span style="color: #9876AA">$cfg</span><span style="color: #007700">);<br />    (</span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFeatures</span><span style="color: #007700">() &amp; </span><span style="color: #9876AA">EventConfig</span><span style="color: #007700">::</span><span style="color: #9876AA">FEATURE_FDS</span><span style="color: #007700">)<br />        and print </span><span style="color: #DD0000">"FDS - arbitrary file descriptor types, and not just sockets\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>FDS feature is now required<br>FDS - arbitrary file descriptor types, and not just sockets<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventconfig.requirefeatures-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBase::getFeatures()} - Returns bitmask of features supported</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function requireFeatures(int $feature): bool {}

/**
*<div id="eventconfig.setflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventConfig::setFlags</h1>  <p class="verinfo">(PECL event &gt;= 2.0.2-alpha)</p><p class="refpurpose"><span class="refname">EventConfig::setFlags</span> &mdash; <span class="dc-title">EventBase 初始化需设置的一个或者多个 flag</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventconfig.setflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventConfig::setFlags</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$flags</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   EventBase 初始化需设置的一个或者多个 flag 部分，以及它们如何工作。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventconfig.setflags-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">flags</span>    </dt>    <dd>     <span>      <span>EventBase::LOOP_*</span> 常量之一。      参考 <a href="https://www.php.net/manual/zh/class.eventbase.php#eventbase.constants" class="link">EventBase 常量</a>。     </span>    </dd>     </dl> </div><br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventconfig.setflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventconfig.setflags-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventBase::getFeatures()} - Returns bitmask of features supported</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function setFlags(int $flags): bool {}

/**
*<div id="eventconfig.setmaxdispatchinterval" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventConfig::setMaxDispatchInterval</h1>  <p class="verinfo">(PECL event &gt;= 2.1.0-alpha)</p><p class="refpurpose"><span class="refname">EventConfig::setMaxDispatchInterval</span> &mdash; <span class="dc-title">防止优先级反转</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventconfig.setmaxdispatchinterval-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventConfig::setMaxDispatchInterval</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$max_interval</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$max_callbacks</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$min_priority</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   在检查更多高优先级事件之前，通过限制可调用低优先级事件的数量来防止优先级反转。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    自    <span>libevent 2.1.0-alpha</span>    起可用。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventconfig.setmaxdispatchinterval-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">max_interval</span>    </dt>    <dd>     <span>      Libevent 应该停止运行回调并检查更多时间的间隔，如果为      <strong><span>0</span></strong>，则没有这样的间隔。     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">max_callbacks</span>    </dt>    <dd>     <p class="para">      多次回调之后 Libevent 应停止运行并检查更多事件，如果为       <strong><span>-1</span></strong>，则表示不会有这个限制。     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">min_priority</span>    </dt>    <dd>     <p class="para">      不应执行低于 <span class="parameter" style="color:#3A95FF">max_interval</span> 和       <span class="parameter" style="color:#3A95FF">max_callbacks</span> 优先级的事件。如果设置为       <strong><span>0</span></strong>，它适用于每个优先级事件；如果设置为       <strong><span>1</span></strong>，它适用于优先级在       <strong><span>1</span></strong>及其以上的事件，以此类推。     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventconfig.setmaxdispatchinterval-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
*/
    public function setMaxDispatchInterval(int $max_interval, int $max_callbacks, int $min_priority): void {}
}

// The EventDnsBase class
/**
*<div id="class.eventdnsbase" class="reference"> <h1 class="title">The EventDnsBase class</h1>  <div class="partintro"><p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p>  <div class="section" id="eventdnsbase.intro">   <h2 class="title">简介</h2>   <p class="para">    Represents Libevent&#039;s DNS base structure. Used to resolve DNS    asyncronously, parse configuration files like resolv.conf etc.   </p>  </div>  <div class="section" id="eventdnsbase.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">final</span>      <span class="modifier">class</span> <strong class="classname">EventDnsBase</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventdnsbase.php#eventdnsbase.constants.option-search"><var class="varname">OPTION_SEARCH</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventdnsbase.php#eventdnsbase.constants.option-nameservers"><var class="varname">OPTION_NAMESERVERS</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventdnsbase.php#eventdnsbase.constants.option-misc"><var class="varname">OPTION_MISC</var></a></var><span class="initializer"> = 4</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventdnsbase.php#eventdnsbase.constants.option-hostsfile"><var class="varname">OPTION_HOSTSFILE</var></a></var><span class="initializer"> = 8</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventdnsbase.php#eventdnsbase.constants.options-all"><var class="varname">OPTIONS_ALL</var></a></var><span class="initializer"> = 15</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventdnsbase.addnameserverip.php" class="methodname" style="color:#CC7832">addNameserverIp</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$ip</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventdnsbase.addsearch.php" class="methodname" style="color:#CC7832">addSearch</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$domain</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventdnsbase.clearsearch.php" class="methodname" style="color:#CC7832">clearSearch</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventdnsbase.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">bool</span>     <span class="parameter" style="color:#3A95FF">$initialize</span>   </span>)</div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventdnsbase.countnameservers.php" class="methodname" style="color:#CC7832">countNameservers</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventdnsbase.loadhosts.php" class="methodname" style="color:#CC7832">loadHosts</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$hosts</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventdnsbase.parseresolvconf.php" class="methodname" style="color:#CC7832">parseResolvConf</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$flags</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$filename</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventdnsbase.setoption.php" class="methodname" style="color:#CC7832">setOption</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$option</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$value</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventdnsbase.setsearchndots.php" class="methodname" style="color:#CC7832">setSearchNdots</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$ndots</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div>  <div class="section" id="eventdnsbase.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="eventdnsbase.constants.option-search">      <strong><span>EventDnsBase::OPTION_SEARCH</span></strong>     </dt>     <dd>      <p class="para">       Tells to read the domain and search fields from the       <span>resolv.conf</span>       file and the       <span>ndots</span>       option, and use them to decide which domains(if any) to search for       hostnames that aren’t fully-qualified.      </p>     </dd>             <dt id="eventdnsbase.constants.option-nameservers">      <strong><span>EventDnsBase::OPTION_NAMESERVERS</span></strong>     </dt>     <dd>      <p class="para">       Tells to learn the nameservers from the       <span>resolv.conf</span>       file.      </p>     </dd>             <dt id="eventdnsbase.constants.option-misc">      <strong><span>EventDnsBase::OPTION_MISC</span></strong>     </dt>     <dd>      <p class="para"/>     </dd>             <dt id="eventdnsbase.constants.option-hostsfile">      <strong><span>EventDnsBase::OPTION_HOSTSFILE</span></strong>     </dt>     <dd>      <p class="para">       Tells to read a list of hosts from       <span>/etc/hosts</span>       as part of loading the       <span>resolv.conf</span>       file.      </p>     </dd>             <dt id="eventdnsbase.constants.options-all">      <strong><span>EventDnsBase::OPTIONS_ALL</span></strong>     </dt>     <dd>      <p class="para">       Tells to learn as much as it can from the       <span>resolv.conf</span>       file.      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EventDnsBase::addNameserverIp} — Adds a nameserver to the DNS base</li><li>{@link EventDnsBase::addSearch} — Adds a domain to the list of search domains</li><li>{@link EventDnsBase::clearSearch} — Removes all current search suffixes</li><li>{@link EventDnsBase::__construct} — Constructs EventDnsBase object</li><li>{@link EventDnsBase::countNameservers} — Gets the number of configured nameservers</li><li>{@link EventDnsBase::loadHosts} — Loads a hosts file (in the same format as /etc/hosts) from hosts file</li><li>{@link EventDnsBase::parseResolvConf} — Scans the resolv.conf-formatted file</li><li>{@link EventDnsBase::setOption} — Set the value of a configuration option</li><li>{@link EventDnsBase::setSearchNdots} — Set the 'ndots' parameter for searches</li></ul></div>
*/
final class EventDnsBase
{
    public const OPTION_SEARCH = 1;
    public const OPTION_NAMESERVERS = 2;
    public const OPTION_MISC = 4;
    public const OPTION_HOSTSFILE = 8;
    public const OPTIONS_ALL = 15;

    /**
     * __construct.
     * Constructs EventDnsBase object.
     *
     * @param EventBase $base
     * @param bool      $initialize
     *
     * @see https://secure.php.net/manual/en/eventdnsbase.construct.php
     */
    #[Pure]
    public function __construct(EventBase $base, bool $initialize) {}

/**
*<div id="eventdnsbase.addnameserverip" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventDnsBase::addNameserverIp</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventDnsBase::addNameserverIp</span> &mdash; <span class="dc-title">Adds a nameserver to the DNS base</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventdnsbase.addnameserverip-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventDnsBase::addNameserverIp</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$ip</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Adds a nameserver to the evdns_base.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventdnsbase.addnameserverip-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">ip</span>    </dt>    <dd>     <span>      The nameserver string, either as an IPv4 address, an IPv6 address, an      IPv4 address with a port (      <span>IPv4:Port</span>      ), or an IPv6 address with a port (      <span>[IPv6]:Port</span>      ).     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventdnsbase.addnameserverip-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool*/
    public function addNameserverIp(string $ip): bool {}

/**
*<div id="eventdnsbase.addsearch" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventDnsBase::addSearch</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventDnsBase::addSearch</span> &mdash; <span class="dc-title">Adds a domain to the list of search domains</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventdnsbase.addsearch-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventDnsBase::addSearch</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$domain</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Adds a domain to the list of search domains  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventdnsbase.addsearch-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">domain</span>    </dt>    <dd>     <span>      Search domain.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventdnsbase.addsearch-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function addSearch(string $domain): void {}

/**
*<div id="eventdnsbase.clearsearch" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventDnsBase::clearSearch</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventDnsBase::clearSearch</span> &mdash; <span class="dc-title">Removes all current search suffixes</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventdnsbase.clearsearch-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventDnsBase::clearSearch</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Removes all current search suffixes from the DNS base; the   <span class="methodname" style="color:#CC7832">{@link EventDnsBase::addSearch()}</span>   function adds a suffix.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventdnsbase.clearsearch-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventdnsbase.clearsearch-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventdnsbase.clearsearch-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventDnsBase::addSearch()} - Adds a domain to the list of search domains</span>   </li>  </ul> </div></div>
*/
    public function clearSearch(): void {}

/**
*<div id="eventdnsbase.countnameservers" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventDnsBase::countNameservers</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventDnsBase::countNameservers</span> &mdash; <span class="dc-title">Gets the number of configured nameservers</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventdnsbase.countnameservers-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventDnsBase::countNameservers</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Gets the number of configured nameservers  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventdnsbase.countnameservers-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventdnsbase.countnameservers-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the number of configured nameservers(not necessarily the number of   running nameservers). This is useful for double-checking whether our calls   to the various nameserver configuration functions have been successful.  </p> </div></div>
     * @return int*/
    public function countNameservers(): int {}

/**
*<div id="eventdnsbase.loadhosts" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventDnsBase::loadHosts</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventDnsBase::loadHosts</span> &mdash; <span class="dc-title">Loads a hosts file (in the same format as /etc/hosts) from hosts file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventdnsbase.loadhosts-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventDnsBase::loadHosts</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$hosts</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Loads a hosts file (in the same format as   <span>/etc/hosts</span>   ) from hosts file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventdnsbase.loadhosts-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">hosts</span>    </dt>    <dd>     <span>      Path to the hosts&#039; file.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventdnsbase.loadhosts-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool*/
    public function loadHosts(string $hosts): bool {}

/**
*<div id="eventdnsbase.parseresolvconf" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventDnsBase::parseResolvConf</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventDnsBase::parseResolvConf</span> &mdash; <span class="dc-title">Scans the resolv.conf-formatted file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventdnsbase.parseresolvconf-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventDnsBase::parseResolvConf</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$flags</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$filename</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Scans the resolv.conf-formatted file stored in filename, and read in all   the options from it that are listed in flags  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventdnsbase.parseresolvconf-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">flags</span>    </dt>    <dd>     <span>      Determines what information is parsed from the      <span>resolv.conf</span>      file. See the man page for      <span>resolv.conf</span>      for the format of this file.     </span>     <p class="para">      The following directives are not parsed from the file:      <span>sortlist, rotate, no-check-names, inet6, debug</span>      .     </p>     <p class="para">      If this function encounters an error, the possible return values are:      <ul class="simplelist">       <li class="member">        <strong><span>1</span></strong> = failed to open file</li>       <li class="member">        <strong><span>2</span></strong> = failed to stat file</li>       <li class="member">        <strong><span>3</span></strong> = file too large</li>       <li class="member">        <strong><span>4</span></strong> = out of memory</li>       <li class="member">        <strong><span>5</span></strong> = short read from file</li>       <li class="member">        <strong><span>6</span></strong> = no nameservers listed in the file</li>      </ul>     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">filename</span>    </dt>    <dd>     <p class="para">      Path to      <span>resolv.conf</span>      file.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventdnsbase.parseresolvconf-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool*/
    public function parseResolvConf(int $flags, string $filename): bool {}

/**
*<div id="eventdnsbase.setoption" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventDnsBase::setOption</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventDnsBase::setOption</span> &mdash; <span class="dc-title">Set the value of a configuration option</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventdnsbase.setoption-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventDnsBase::setOption</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$option</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$value</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Set the value of a configuration option.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventdnsbase.setoption-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">option</span>    </dt>    <dd>     <span>      The currently available configuration options are:      <span>&quot;ndots&quot;</span>      ,      <span>&quot;timeout&quot;</span>      ,      <span>&quot;max-timeouts&quot;</span>      ,      <span>&quot;max-inflight&quot;</span>      , and      <span>&quot;attempts&quot;</span>      .     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">value</span>    </dt>    <dd>     <p class="para">      Option value.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventdnsbase.setoption-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool*/
    public function setOption(string $option, string $value): bool {}

/**
*<div id="eventdnsbase.setsearchndots" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventDnsBase::setSearchNdots</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventDnsBase::setSearchNdots</span> &mdash; <span class="dc-title">Set the &#039;ndots&#039; parameter for searches</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventdnsbase.setsearchndots-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventDnsBase::setSearchNdots</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$ndots</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Set the   <strong><span>&#039;ndots&#039;</span></strong>   parameter for searches. Sets the number of dots which, when found in a   name, causes the first query to be without any search domain.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventdnsbase.setsearchndots-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">ndots</span>    </dt>    <dd>     <span>      The number of dots.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventdnsbase.setsearchndots-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return void*/
    public function setSearchNdots(int $ndots): void {}
}

// The EventHttp class
/**
*<div id="class.eventhttp" class="reference"> <h1 class="title">The EventHttp class</h1>  <div class="partintro"><p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p>  <div class="section" id="eventhttp.intro">   <h2 class="title">简介</h2>   <p class="para">    Represents HTTP server.   </p>  </div>  <div class="section" id="eventhttp.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">final</span>      <span class="modifier">class</span> <strong class="classname">EventHttp</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttp.accept.php" class="methodname" style="color:#CC7832">accept</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$socket</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttp.addserveralias.php" class="methodname" style="color:#CC7832">addServerAlias</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$alias</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttp.bind.php" class="methodname" style="color:#CC7832">bind</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$address</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$port</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttp.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php" class="type EventSslContext" style="color:#EAB766">EventSslContext</a></span>     <span class="parameter" style="color:#3A95FF">$ctx</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>)</div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttp.removeserveralias.php" class="methodname" style="color:#CC7832">removeServerAlias</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$alias</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttp.setallowedmethods.php" class="methodname" style="color:#CC7832">setAllowedMethods</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$methods</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttp.setcallback.php" class="methodname" style="color:#CC7832">setCallback</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$path</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$arg</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttp.setdefaultcallback.php" class="methodname" style="color:#CC7832">setDefaultCallback</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$arg</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttp.setmaxbodysize.php" class="methodname" style="color:#CC7832">setMaxBodySize</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$value</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttp.setmaxheaderssize.php" class="methodname" style="color:#CC7832">setMaxHeadersSize</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$value</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttp.settimeout.php" class="methodname" style="color:#CC7832">setTimeout</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$value</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EventHttp::accept} — Makes an HTTP server accept connections on the specified socket stream or resource</li><li>{@link EventHttp::addServerAlias} — Adds a server alias to the HTTP server object</li><li>{@link EventHttp::bind} — Binds an HTTP server on the specified address and port</li><li>{@link EventHttp::__construct} — Constructs EventHttp object(the HTTP server)</li><li>{@link EventHttp::removeServerAlias} — Removes server alias</li><li>{@link EventHttp::setAllowedMethods} — Sets the what HTTP methods are supported in requests accepted by this server, and passed to user callbacks</li><li>{@link EventHttp::setCallback} — Sets a callback for specified URI</li><li>{@link EventHttp::setDefaultCallback} — Sets default callback to handle requests that are not caught by specific callbacks</li><li>{@link EventHttp::setMaxBodySize} — Sets maximum request body size</li><li>{@link EventHttp::setMaxHeadersSize} — Sets maximum HTTP header size</li><li>{@link EventHttp::setTimeout} — Sets the timeout for an HTTP request</li></ul></div>
*/
final class EventHttp
{
    /**
     * __construct.
     * Constructs EventHttp object(the HTTP server).
     *
     * @param EventBase       $base
     * @param null|EventSslContext $ctx
     *
     * @see https://secure.php.net/manual/en/eventhttp.construct.php
     */
    public function __construct(EventBase $base, ?EventSslContext $ctx = null) {}

/**
*<div id="eventhttp.accept" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttp::accept</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventHttp::accept</span> &mdash; <span class="dc-title">Makes an HTTP server accept connections on the specified socket stream or resource</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttp.accept-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttp::accept</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$socket</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Makes an HTTP server accept connections on the specified socket stream or   resource. The socket should be ready to accept connections.  </p>  <p class="para">   Can be called multiple times to accept connections on different sockets.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    To bind a socket,    <span>listen</span>    , and    <span>     accept</span>    connections on the socket in s single call use    <span class="methodname" style="color:#CC7832">{@link EventHttp::bind()}</span>    .    <span class="methodname" style="color:#CC7832"><strong>EventHttp::accept()</strong></span>    is needed only if one already has a socket ready to accept connections.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttp.accept-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">socket</span>    </dt>    <dd>     <span>      Socket resource, stream or numeric file descriptor representing a socket      ready to accept connections.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttp.accept-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-eventhttp.accept-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1     <span class="function"><strong style="color:#CC7832">EventHttp::accept()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$http </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventHttp</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$addresses </span><span style="color: #007700">= array (<br />     </span><span style="color: #9876AA">8091 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"127.0.0.1"</span><span style="color: #007700">,<br />     </span><span style="color: #9876AA">8092 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"127.0.0.2"</span><span style="color: #007700">,<br />);<br /></span><span style="color: #9876AA">$i </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$socket </span><span style="color: #007700">= array();<br /><br />foreach (</span><span style="color: #9876AA">$addresses </span><span style="color: #007700">as </span><span style="color: #9876AA">$port </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$ip</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$ip</span><span style="color: #007700">, </span><span style="color: #DD0000">" "</span><span style="color: #007700">, </span><span style="color: #9876AA">$port</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$socket</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">] = </span><span style="color: #9876AA">socket_create</span><span style="color: #007700">(</span><span style="color: #9876AA">AF_INET</span><span style="color: #007700">, </span><span style="color: #9876AA">SOCK_STREAM</span><span style="color: #007700">, </span><span style="color: #9876AA">SOL_TCP</span><span style="color: #007700">);<br />    if (!</span><span style="color: #9876AA">socket_bind</span><span style="color: #007700">(</span><span style="color: #9876AA">$socket</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">], </span><span style="color: #9876AA">$ip</span><span style="color: #007700">, </span><span style="color: #9876AA">$port</span><span style="color: #007700">)) {<br />        exit(</span><span style="color: #DD0000">"socket_bind failed\n"</span><span style="color: #007700">);<br />    }<br />    </span><span style="color: #9876AA">socket_listen</span><span style="color: #007700">(</span><span style="color: #9876AA">$socket</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">], </span><span style="color: #9876AA">0</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">socket_set_nonblock</span><span style="color: #007700">(</span><span style="color: #9876AA">$socket</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">]);<br /><br />    if (!</span><span style="color: #9876AA">$http</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">accept</span><span style="color: #007700">(</span><span style="color: #9876AA">$socket</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">])) {<br />        echo </span><span style="color: #DD0000">"Accept failed\n"</span><span style="color: #007700">;<br />        exit(</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br />    }<br /><br />    ++</span><span style="color: #9876AA">$i</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$http</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setCallback</span><span style="color: #007700">(</span><span style="color: #DD0000">"/some-page"</span><span style="color: #007700">, function() {<br /> echo </span><span style="color: #DD0000">"(some-page)\n"</span><span style="color: #007700">;<br />    echo </span><span style="color: #DD0000">"URI: "</span><span style="color: #007700">, </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getUri</span><span style="color: #007700">(), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">sendReply</span><span style="color: #007700">(</span><span style="color: #9876AA">200</span><span style="color: #007700">, </span><span style="color: #DD0000">"OK"</span><span style="color: #007700">);<br />    echo </span><span style="color: #DD0000">"OK\n"</span><span style="color: #007700">;<br />});<br /><br /></span><span style="color: #9876AA">$http</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setDefaultCallback</span><span style="color: #007700">(function(</span><span style="color: #9876AA">$req</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"URI: "</span><span style="color: #007700">, </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getUri</span><span style="color: #007700">(), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">sendReply</span><span style="color: #007700">(</span><span style="color: #9876AA">200</span><span style="color: #007700">, </span><span style="color: #DD0000">"OK"</span><span style="color: #007700">);<br />    echo </span><span style="color: #DD0000">"OK\n"</span><span style="color: #007700">;<br />});<br /><br /></span><span style="color: #9876AA">$signal </span><span style="color: #007700">= </span><span style="color: #9876AA">Event</span><span style="color: #007700">::</span><span style="color: #9876AA">signal</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">, </span><span style="color: #9876AA">SIGINT</span><span style="color: #007700">, function () use (</span><span style="color: #9876AA">$base</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"Caught SIGINT. Stopping...\n"</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">stop</span><span style="color: #007700">();<br />});<br /></span><span style="color: #9876AA">$signal</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">add</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">dispatch</span><span style="color: #007700">();<br />echo </span><span style="color: #DD0000">"END\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// We didn't close sockets, since Libevent already sets<br />// CLOSE_ON_FREE and CLOSE_ON_EXEC flags on the file <br />// descriptor associated with the sockets.<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Client:<br>$ nc 127.0.0.1 8091<br>GET /about HTTP/1.0<br>Connection: close<br><br>HTTP/1.0 200 OK<br>Content-Type: text/html; charset=ISO-8859-1<br>Connection: close<br><br>Server:<br>127.0.0.1 8091<br>127.0.0.2 8092<br>URI: /about<br>OK<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttp.accept-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttp::bind()} - Binds an HTTP server on the specified address and port</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function accept(mixed $socket): bool {}

/**
*<div id="eventhttp.addserveralias" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttp::addServerAlias</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttp::addServerAlias</span> &mdash; <span class="dc-title">Adds a server alias to the HTTP server object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttp.addserveralias-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttp::addServerAlias</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$alias</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Adds a server alias to the HTTP server object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttp.addserveralias-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">alias</span>    </dt>    <dd>     <span>      The alias to add.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttp.addserveralias-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-eventhttp.addserveralias-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1     <span class="function"><strong style="color:#CC7832">EventHttp::addServerAlias()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$http </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventHttp</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$socket </span><span style="color: #007700">= </span><span style="color: #9876AA">socket_create</span><span style="color: #007700">(</span><span style="color: #9876AA">AF_INET</span><span style="color: #007700">, </span><span style="color: #9876AA">SOCK_STREAM</span><span style="color: #007700">, </span><span style="color: #9876AA">SOL_TCP</span><span style="color: #007700">);<br /><br />if (!</span><span style="color: #9876AA">$http</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bind</span><span style="color: #007700">(</span><span style="color: #DD0000">"127.0.0.1"</span><span style="color: #007700">, </span><span style="color: #9876AA">8088</span><span style="color: #007700">)) {<br />    exit(</span><span style="color: #DD0000">"bind(1) failed\n"</span><span style="color: #007700">);<br />};<br /><br />if (!</span><span style="color: #9876AA">$http</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServerAlias</span><span style="color: #007700">(</span><span style="color: #DD0000">"local.net"</span><span style="color: #007700">)) {<br />    exit(</span><span style="color: #DD0000">"Failed to add server alias\n"</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">$http</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setCallback</span><span style="color: #007700">(</span><span style="color: #DD0000">"/about"</span><span style="color: #007700">, function(</span><span style="color: #9876AA">$req</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"URI: "</span><span style="color: #007700">, </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getUri</span><span style="color: #007700">(), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">sendReply</span><span style="color: #007700">(</span><span style="color: #9876AA">200</span><span style="color: #007700">, </span><span style="color: #DD0000">"OK"</span><span style="color: #007700">);<br />});<br /></span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">dispatch</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttp.addserveralias-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttp::removeServerAlias()} - Removes server alias</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function addServerAlias(string $alias): bool {}

/**
*<div id="eventhttp.bind" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttp::bind</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventHttp::bind</span> &mdash; <span class="dc-title">Binds an HTTP server on the specified address and port</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttp.bind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttp::bind</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$address</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$port</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Binds an HTTP server on the specified address and port.  </p>  <p class="para">   Can be called multiple times to bind the same HTTP server to multiple   different ports.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttp.bind-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">address</span>    </dt>    <dd>     <span>      A string containing the IP address to      <span>listen(2)</span>      on.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">port</span>    </dt>    <dd>     <p class="para">      The port number to listen on.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttp.bind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-eventhttp.bind-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1     <span class="function"><strong style="color:#CC7832">EventHttp::bind()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$http </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventHttp</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$socket </span><span style="color: #007700">= </span><span style="color: #9876AA">socket_create</span><span style="color: #007700">(</span><span style="color: #9876AA">AF_INET</span><span style="color: #007700">, </span><span style="color: #9876AA">SOCK_STREAM</span><span style="color: #007700">, </span><span style="color: #9876AA">SOL_TCP</span><span style="color: #007700">);<br /><br />if (!</span><span style="color: #9876AA">$http</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bind</span><span style="color: #007700">(</span><span style="color: #DD0000">"127.0.0.1"</span><span style="color: #007700">, </span><span style="color: #9876AA">8088</span><span style="color: #007700">)) {<br />    exit(</span><span style="color: #DD0000">"bind(1) failed\n"</span><span style="color: #007700">);<br />};<br />if (!</span><span style="color: #9876AA">$http</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bind</span><span style="color: #007700">(</span><span style="color: #DD0000">"127.0.0.1"</span><span style="color: #007700">, </span><span style="color: #9876AA">8089</span><span style="color: #007700">)) {<br />    exit(</span><span style="color: #DD0000">"bind(2) failed\n"</span><span style="color: #007700">);<br />};<br /><br /></span><span style="color: #9876AA">$http</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setCallback</span><span style="color: #007700">(</span><span style="color: #DD0000">"/about"</span><span style="color: #007700">, function(</span><span style="color: #9876AA">$req</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"URI: "</span><span style="color: #007700">, </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getUri</span><span style="color: #007700">(), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">sendReply</span><span style="color: #007700">(</span><span style="color: #9876AA">200</span><span style="color: #007700">, </span><span style="color: #DD0000">"OK"</span><span style="color: #007700">);<br />    echo </span><span style="color: #DD0000">"OK\n"</span><span style="color: #007700">;<br />});<br /><br /></span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">dispatch</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Client:<br><br>$ nc 127.0.0.1 8088<br>GET /about HTTP/1.0<br>Connection: close<br><br>HTTP/1.0 200 OK<br>Content-Type: text/html; charset=ISO-8859-1<br>Connection: close<br><br>$ nc 127.0.0.1 8089<br>GET /unknown HTTP/1.0<br>Connection: close<br><br>HTTP/1.1 404 Not Found<br>Content-Type: text/html<br>Date: Wed, 13 Mar 2013 04:14:41 GMT<br>Content-Length: 149<br>Connection: close<br><br>&lt;html&gt;&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Not Found&lt;/h1&gt;&lt;p&gt;The requested URL /unknown was not found on this server.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;<br><br>Server:<br>URI: /about<br>OK<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttp.bind-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttp::accept()} - Makes an HTTP server accept connections on the specified socket stream or resource</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function bind(string $address, int $port): bool {}

/**
*<div id="eventhttp.removeserveralias" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttp::removeServerAlias</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttp::removeServerAlias</span> &mdash; <span class="dc-title">Removes server alias</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttp.removeserveralias-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttp::removeServerAlias</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$alias</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Removes server alias added with   <span class="methodname" style="color:#CC7832">{@link EventHttp::addServerAlias()}</span>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttp.removeserveralias-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">alias</span>    </dt>    <dd>     <span>      The alias to remove.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttp.removeserveralias-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttp.removeserveralias-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttp::addServerAlias()} - Adds a server alias to the HTTP server object</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function removeServerAlias(string $alias): bool {}

/**
*<div id="eventhttp.setallowedmethods" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttp::setAllowedMethods</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttp::setAllowedMethods</span> &mdash; <span class="dc-title">Sets the what HTTP methods are supported in requests accepted by this server, and passed to user callbacks</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttp.setallowedmethods-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttp::setAllowedMethods</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$methods</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets the what HTTP methods are supported in requests accepted by this   server, and passed to user callbacks  </p>  <p class="para">   If not supported they will generate a   <span>&quot;405 Method not  allowed&quot;</span>   response.  </p>  <p class="para">   By default this includes the following methods:   <span>GET</span>   ,   <span>POST</span>   ,   <span>HEAD</span>   ,   <span>PUT</span>   ,   <span>DELETE</span>   . See   <span>EventHttpRequest::CMD_*</span>   constants.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttp.setallowedmethods-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">methods</span>    </dt>    <dd>     <span>      A bit mask of      {@link        <code class="literal">EventHttpRequest::CMD_*</code>     constants}      .     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttp.setallowedmethods-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function setAllowedMethods(int $methods): void {}

/**
*<div id="eventhttp.setcallback" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttp::setCallback</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttp::setCallback</span> &mdash; <span class="dc-title">Sets a callback for specified URI</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttp.setcallback-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttp::setCallback</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$path</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$arg</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets a callback for specified URI.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttp.setcallback-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">path</span>    </dt>    <dd>     <span>      The path for which to invoke the callback.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">cb</span>    </dt>    <dd>     <p class="para">      The callback      <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>      that gets invoked on requested      <span class="parameter" style="color:#3A95FF">path</span>      . It should match the following prototype:     </p>     <div class="methodsynopsis dc-description">      <span class="methodname" style="color:#CC7832"><strong>callback</strong></span>(<span class="methodparam">       <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventhttprequest.php" class="type EventHttpRequest" style="color:#EAB766">EventHttpRequest</a></span>        <span class="parameter" style="color:#3A95FF">$req</span>       <span class="initializer"> = NULL</span>      </span>, <span class="methodparam">       <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>        <span class="parameter" style="color:#3A95FF">$arg</span>       <span class="initializer"> = NULL</span>      </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>     <p class="para">      <dl>               <dt>         <span class="parameter" style="color:#3A95FF">req</span>        </dt>        <dd>         <p class="para">          <span class="classname"><a href="https://www.php.net/manual/zh/class.eventhttprequest.php" class="classname">EventHttpRequest</a></span>          object.         </p>        </dd>                      <dt>         <span class="parameter" style="color:#3A95FF">arg</span>        </dt>        <dd>         <p class="para">          Custom data.         </p>        </dd>             </dl>     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">arg</span>    </dt>    <dd>     <p class="para">      Custom data.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttp.setcallback-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-eventhttp.setcallback-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1     <span class="function"><strong style="color:#CC7832">EventHttp::setCallback()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//<br /> * Simple HTTP server.<br /> *<br /> * To test it:<br /> * 1) Run it on a port of your choice, e.g.:<br /> * $ php examples/http.php 8010<br /> * 2) In another terminal connect to some address on this port<br /> * and make GET or POST request(others are turned off here), e.g.:<br /> * $ nc -t 127.0.0.1 8010<br /> * POST /about HTTP/1.0<br /> * Content-Type: text/plain<br /> * Content-Length: 4<br /> * Connection: close<br /> * (press Enter)<br /> *<br /> * It will output<br /> * a=12<br /> * HTTP/1.0 200 OK<br /> * Content-Type: text/html; charset=ISO-8859-1<br /> * Connection: close<br /> *<br /> * 3) See what the server outputs on the previous terminal window.<br /> <br /><br /></span><span style="color: #007700">function </span><span style="color: #9876AA">_http_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$req</span><span style="color: #007700">, </span><span style="color: #9876AA">$data</span><span style="color: #007700">) {<br />    static </span><span style="color: #9876AA">$counter      </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />    static </span><span style="color: #9876AA">$max_requests </span><span style="color: #007700">= </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br /><br />    if (++</span><span style="color: #9876AA">$counter </span><span style="color: #007700">&gt;= </span><span style="color: #9876AA">$max_requests</span><span style="color: #007700">)  {<br />        echo </span><span style="color: #DD0000">"Counter reached max requests </span><span style="color: #9876AA">$max_requests</span><span style="color: #DD0000">. Exiting\n"</span><span style="color: #007700">;<br />        exit();<br />    }<br /><br />    echo </span><span style="color: #9876AA">__METHOD__</span><span style="color: #007700">, </span><span style="color: #DD0000">" called\n"</span><span style="color: #007700">;<br />    echo </span><span style="color: #DD0000">"request:"</span><span style="color: #007700">; </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$req</span><span style="color: #007700">);<br />    echo </span><span style="color: #DD0000">"data:"</span><span style="color: #007700">; </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">);<br /><br />    echo </span><span style="color: #DD0000">"\n===== DUMP =====\n"</span><span style="color: #007700">;<br />    echo </span><span style="color: #DD0000">"Command:"</span><span style="color: #007700">, </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getCommand</span><span style="color: #007700">(), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    echo </span><span style="color: #DD0000">"URI:"</span><span style="color: #007700">, </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getUri</span><span style="color: #007700">(), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    echo </span><span style="color: #DD0000">"Input headers:"</span><span style="color: #007700">; </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getInputHeaders</span><span style="color: #007700">());<br />    echo </span><span style="color: #DD0000">"Output headers:"</span><span style="color: #007700">; </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getOutputHeaders</span><span style="color: #007700">());<br /><br />    echo </span><span style="color: #DD0000">"\n &gt;&gt; Sending reply ..."</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">sendReply</span><span style="color: #007700">(</span><span style="color: #9876AA">200</span><span style="color: #007700">, </span><span style="color: #DD0000">"OK"</span><span style="color: #007700">);<br />    echo </span><span style="color: #DD0000">"OK\n"</span><span style="color: #007700">;<br /><br />    echo </span><span style="color: #DD0000">"\n &gt;&gt; Reading input buffer ...\n"</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$buf </span><span style="color: #007700">= </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getInputBuffer</span><span style="color: #007700">();<br />    while (</span><span style="color: #9876AA">$s </span><span style="color: #007700">= </span><span style="color: #9876AA">$buf</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">readLine</span><span style="color: #007700">(</span><span style="color: #9876AA">EventBuffer</span><span style="color: #007700">::</span><span style="color: #9876AA">EOL_ANY</span><span style="color: #007700">)) {<br />        echo </span><span style="color: #9876AA">$s</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    }<br />    echo </span><span style="color: #DD0000">"No more data in the buffer\n"</span><span style="color: #007700">;<br />}<br /><br />function </span><span style="color: #9876AA">_http_about</span><span style="color: #007700">(</span><span style="color: #9876AA">$req</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">__METHOD__</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    echo </span><span style="color: #DD0000">"URI: "</span><span style="color: #007700">, </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getUri</span><span style="color: #007700">(), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    echo </span><span style="color: #DD0000">"\n &gt;&gt; Sending reply ..."</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">sendReply</span><span style="color: #007700">(</span><span style="color: #9876AA">200</span><span style="color: #007700">, </span><span style="color: #DD0000">"OK"</span><span style="color: #007700">);<br />    echo </span><span style="color: #DD0000">"OK\n"</span><span style="color: #007700">;<br />}<br /><br />function </span><span style="color: #9876AA">_http_default</span><span style="color: #007700">(</span><span style="color: #9876AA">$req</span><span style="color: #007700">, </span><span style="color: #9876AA">$data</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">__METHOD__</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    echo </span><span style="color: #DD0000">"URI: "</span><span style="color: #007700">, </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getUri</span><span style="color: #007700">(), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    echo </span><span style="color: #DD0000">"\n &gt;&gt; Sending reply ..."</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">sendReply</span><span style="color: #007700">(</span><span style="color: #9876AA">200</span><span style="color: #007700">, </span><span style="color: #DD0000">"OK"</span><span style="color: #007700">);<br />    echo </span><span style="color: #DD0000">"OK\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$port </span><span style="color: #007700">= </span><span style="color: #9876AA">8010</span><span style="color: #007700">;<br />if (</span><span style="color: #9876AA">$argc </span><span style="color: #007700">&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$port </span><span style="color: #007700">= (int) </span><span style="color: #9876AA">$argv</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">];<br />}<br />if (</span><span style="color: #9876AA">$port </span><span style="color: #007700">&lt;= </span><span style="color: #9876AA">0 </span><span style="color: #007700">|| </span><span style="color: #9876AA">$port </span><span style="color: #007700">&gt; </span><span style="color: #9876AA">65535</span><span style="color: #007700">) {<br />    exit(</span><span style="color: #DD0000">"Invalid port"</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">$base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$http </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventHttp</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$http</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setAllowedMethods</span><span style="color: #007700">(</span><span style="color: #9876AA">EventHttpRequest</span><span style="color: #007700">::</span><span style="color: #9876AA">CMD_GET </span><span style="color: #007700">| </span><span style="color: #9876AA">EventHttpRequest</span><span style="color: #007700">::</span><span style="color: #9876AA">CMD_POST</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$http</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setCallback</span><span style="color: #007700">(</span><span style="color: #DD0000">"/dump"</span><span style="color: #007700">, </span><span style="color: #DD0000">"_http_dump"</span><span style="color: #007700">, array(</span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #9876AA">8</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$http</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setCallback</span><span style="color: #007700">(</span><span style="color: #DD0000">"/about"</span><span style="color: #007700">, </span><span style="color: #DD0000">"_http_about"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$http</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setDefaultCallback</span><span style="color: #007700">(</span><span style="color: #DD0000">"_http_default"</span><span style="color: #007700">, </span><span style="color: #DD0000">"custom data value"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$http</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bind</span><span style="color: #007700">(</span><span style="color: #DD0000">"0.0.0.0"</span><span style="color: #007700">, </span><span style="color: #9876AA">8010</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">loop</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>a=12<br>HTTP/1.0 200 OK<br>Content-Type: text/html; charset=ISO-8859-1<br>Connection: close<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttp.setcallback-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttp::setDefaultCallback()} - Sets default callback to handle requests that are not caught by specific callbacks</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function setCallback(string $path, string $cb, ?string $arg = null): bool {}

/**
*<div id="eventhttp.setdefaultcallback" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttp::setDefaultCallback</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttp::setDefaultCallback</span> &mdash; <span class="dc-title">Sets default callback to handle requests that are not caught by specific callbacks</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttp.setdefaultcallback-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttp::setDefaultCallback</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$arg</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets default callback to handle requests that are not caught by specific   callbacks  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttp.setdefaultcallback-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">cb</span>    </dt>    <dd>     <span>      The callback      <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>      . It should match the following prototype:     </span>     <div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><strong>callback</strong></span>(<span class="methodparam">       <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventhttprequest.php" class="type EventHttpRequest" style="color:#EAB766">EventHttpRequest</a></span>        <span class="parameter" style="color:#3A95FF">$req</span>       <span class="initializer"> = NULL</span>      </span>, <span class="methodparam">       <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>        <span class="parameter" style="color:#3A95FF">$arg</span>       <span class="initializer"> = NULL</span>      </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>     <p class="para">      <dl>               <dt>         <span class="parameter" style="color:#3A95FF">req</span>        </dt>        <dd>         <p class="para">          <span class="classname"><a href="https://www.php.net/manual/zh/class.eventhttprequest.php" class="classname">EventHttpRequest</a></span>          object.         </p>        </dd>                      <dt>         <span class="parameter" style="color:#3A95FF">arg</span>        </dt>        <dd>         <p class="para">          Custom data.         </p>        </dd>             </dl>     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">arg</span>    </dt>    <dd>     <p class="para">      User custom data passed to the callback.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttp.setdefaultcallback-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-eventhttp.setdefaultcallback-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1     <span class="function"><strong style="color:#CC7832">EventHttp::setDefaultCallback()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$http </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventHttp</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$socket </span><span style="color: #007700">= </span><span style="color: #9876AA">socket_create</span><span style="color: #007700">(</span><span style="color: #9876AA">AF_INET</span><span style="color: #007700">, </span><span style="color: #9876AA">SOCK_STREAM</span><span style="color: #007700">, </span><span style="color: #9876AA">SOL_TCP</span><span style="color: #007700">);<br /><br />if (!</span><span style="color: #9876AA">$http</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bind</span><span style="color: #007700">(</span><span style="color: #DD0000">"127.0.0.1"</span><span style="color: #007700">, </span><span style="color: #9876AA">8088</span><span style="color: #007700">)) {<br />    exit(</span><span style="color: #DD0000">"bind(1) failed\n"</span><span style="color: #007700">);<br />};<br /><br /></span><span style="color: #9876AA">$http</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setDefaultCallback</span><span style="color: #007700">(function(</span><span style="color: #9876AA">$req</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"URI: "</span><span style="color: #007700">, </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getUri</span><span style="color: #007700">(), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">sendReply</span><span style="color: #007700">(</span><span style="color: #9876AA">200</span><span style="color: #007700">, </span><span style="color: #DD0000">"OK"</span><span style="color: #007700">);<br />});<br /><br /></span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">dispatch</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttp.setdefaultcallback-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttp::setCallback()} - Sets a callback for specified URI</span>   </li>  </ul> </div></div>
*/
    public function setDefaultCallback(string $cb, ?string $arg = null): void {}

/**
*<div id="eventhttp.setmaxbodysize" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttp::setMaxBodySize</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttp::setMaxBodySize</span> &mdash; <span class="dc-title">Sets maximum request body size</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttp.setmaxbodysize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttp::setMaxBodySize</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$value</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets maximum request body size.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttp.setmaxbodysize-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">value</span>    </dt>    <dd>     <span>      The body size in bytes.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttp.setmaxbodysize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttp.setmaxbodysize-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttp::setMaxHeadersSize()} - Sets maximum HTTP header size</span>   </li>  </ul> </div></div>
*/
    public function setMaxBodySize(int $value): void {}

/**
*<div id="eventhttp.setmaxheaderssize" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttp::setMaxHeadersSize</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttp::setMaxHeadersSize</span> &mdash; <span class="dc-title">Sets maximum HTTP header size</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttp.setmaxheaderssize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttp::setMaxHeadersSize</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$value</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets maximum HTTP header size.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttp.setmaxheaderssize-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">value</span>    </dt>    <dd>     <span>      The header size in bytes.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttp.setmaxheaderssize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttp.setmaxheaderssize-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832"><strong>EventHttp::setMaxHeadersSize()</strong></span>   </li>  </ul> </div></div>
*/
    public function setMaxHeadersSize(int $value): void {}

/**
*<div id="eventhttp.settimeout" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttp::setTimeout</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttp::setTimeout</span> &mdash; <span class="dc-title">Sets the timeout for an HTTP request</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttp.settimeout-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttp::setTimeout</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$value</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets the timeout for an HTTP request.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttp.settimeout-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">value</span>    </dt>    <dd>     <span>      The timeout in seconds.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttp.settimeout-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function setTimeout(int $value): void {}
}

// The EventHttpConnection class
/**
*<div id="class.eventhttpconnection" class="reference"> <h1 class="title">The EventHttpConnection class</h1>  <div class="partintro"><p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p>  <div class="section" id="eventhttpconnection.intro">   <h2 class="title">简介</h2>   <p class="para">    Represents an HTTP connection.   </p>  </div>  <div class="section" id="eventhttpconnection.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">EventHttpConnection</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttpconnection.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventdnsbase.php" class="type EventDnsBase" style="color:#EAB766">EventDnsBase</a></span>     <span class="parameter" style="color:#3A95FF">$dns_base</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$address</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$port</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php" class="type EventSslContext" style="color:#EAB766">EventSslContext</a></span>     <span class="parameter" style="color:#3A95FF">$ctx</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span><br>)</div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttpconnection.getbase.php" class="methodname" style="color:#CC7832">getBase</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttpconnection.getpeer.php" class="methodname" style="color:#CC7832">getPeer</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">&$address</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">&$port</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttpconnection.makerequest.php" class="methodname" style="color:#CC7832">makeRequest</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventhttprequest.php" class="type EventHttpRequest" style="color:#EAB766">EventHttpRequest</a></span>     <span class="parameter" style="color:#3A95FF">$req</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$type</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$uri</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttpconnection.setclosecallback.php" class="methodname" style="color:#CC7832">setCloseCallback</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttpconnection.setlocaladdress.php" class="methodname" style="color:#CC7832">setLocalAddress</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$address</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttpconnection.setlocalport.php" class="methodname" style="color:#CC7832">setLocalPort</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$port</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttpconnection.setmaxbodysize.php" class="methodname" style="color:#CC7832">setMaxBodySize</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$max_size</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttpconnection.setmaxheaderssize.php" class="methodname" style="color:#CC7832">setMaxHeadersSize</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$max_size</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttpconnection.setretries.php" class="methodname" style="color:#CC7832">setRetries</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$retries</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttpconnection.settimeout.php" class="methodname" style="color:#CC7832">setTimeout</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$timeout</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EventHttpConnection::__construct} — Constructs EventHttpConnection object</li><li>{@link EventHttpConnection::getBase} — Returns event base associated with the connection</li><li>{@link EventHttpConnection::getPeer} — Gets the remote address and port associated with the connection</li><li>{@link EventHttpConnection::makeRequest} — Makes an HTTP request over the specified connection</li><li>{@link EventHttpConnection::setCloseCallback} — Set callback for connection close</li><li>{@link EventHttpConnection::setLocalAddress} — Sets the IP address from which HTTP connections are made</li><li>{@link EventHttpConnection::setLocalPort} — Sets the local port from which connections are made</li><li>{@link EventHttpConnection::setMaxBodySize} — Sets maximum body size for the connection</li><li>{@link EventHttpConnection::setMaxHeadersSize} — Sets maximum header size</li><li>{@link EventHttpConnection::setRetries} — Sets the retry limit for the connection</li><li>{@link EventHttpConnection::setTimeout} — Sets the timeout for the connection</li></ul></div>
*/
class EventHttpConnection
{
    /**
     * __construct.
     * Constructs EventHttpConnection object.
     *
     * @param EventBase       $base
     * @param EventDnsBase    $dns_base
     * @param string          $address
     * @param int             $port
     * @param null|EventSslContext $ctx
     *
     * @see https://secure.php.net/manual/en/eventhttpconnection.construct.php
     */
    #[Pure]
    public function __construct(EventBase $base, EventDnsBase $dns_base, string $address, int $port, ?EventSslContext $ctx = null) {}

/**
*<div id="eventhttpconnection.getbase" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpConnection::getBase</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventHttpConnection::getBase</span> &mdash; <span class="dc-title">Returns event base associated with the connection</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttpconnection.getbase-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpConnection::getBase</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span></div>  <p class="para rdfs-comment">   Returns event base associated with the connection.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttpconnection.getbase-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttpconnection.getbase-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   On success returns   <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="classname">EventBase</a></span>   object associated with the connection. Otherwise <strong><span>false</span></strong>.  </p> </div></div>
     * @return false|EventBase*/
    public function getBase(): false|EventBase {}

/**
*<div id="eventhttpconnection.getpeer" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpConnection::getPeer</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventHttpConnection::getPeer</span> &mdash; <span class="dc-title">Gets the remote address and port associated with the connection</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttpconnection.getpeer-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpConnection::getPeer</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">&$address</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">&$port</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Gets the remote address and port associated with the connection  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttpconnection.getpeer-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">address</span>    </dt>    <dd>     <span>      Address of the peer.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">port</span>    </dt>    <dd>     <p class="para">      Port of the peer.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttpconnection.getpeer-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function getPeer(string &$address, int &$port): void {}

/**
*<div id="eventhttpconnection.makerequest" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpConnection::makeRequest</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpConnection::makeRequest</span> &mdash; <span class="dc-title">Makes an HTTP request over the specified connection</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttpconnection.makerequest-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpConnection::makeRequest</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventhttprequest.php" class="type EventHttpRequest" style="color:#EAB766">EventHttpRequest</a></span>     <span class="parameter" style="color:#3A95FF">$req</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$type</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$uri</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Makes an HTTP request over the specified connection.   <span class="parameter" style="color:#3A95FF">type</span>   is one of   <span>EventHttpRequest::CMD_*</span>   constants.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttpconnection.makerequest-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">req</span>    </dt>    <dd>     <span>      The connection object over which to send the request.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">type</span>    </dt>    <dd>     <p class="para">      One of      {@link        <code class="literal">EventHttpRequest::CMD_*</code> constants}      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">uri</span>    </dt>    <dd>     <p class="para">      The URI associated with the request.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttpconnection.makerequest-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-eventhttpconnection.makerequest-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1     <span class="function"><strong style="color:#CC7832">EventHttpConnection::makeRequest()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">_request_handler</span><span style="color: #007700">(</span><span style="color: #9876AA">$req</span><span style="color: #007700">, </span><span style="color: #9876AA">$base</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">__FUNCTION__</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /><br />    if (</span><span style="color: #9876AA">is_null</span><span style="color: #007700">(</span><span style="color: #9876AA">$req</span><span style="color: #007700">)) {<br />        echo </span><span style="color: #DD0000">"Timed out\n"</span><span style="color: #007700">;<br />    } else {<br />        </span><span style="color: #9876AA">$response_code </span><span style="color: #007700">= </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getResponseCode</span><span style="color: #007700">();<br /><br />        if (</span><span style="color: #9876AA">$response_code </span><span style="color: #007700">== </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br />            echo </span><span style="color: #DD0000">"Connection refused\n"</span><span style="color: #007700">;<br />        } elseif (</span><span style="color: #9876AA">$response_code </span><span style="color: #007700">!= </span><span style="color: #9876AA">200</span><span style="color: #007700">) {<br />            echo </span><span style="color: #DD0000">"Unexpected response: </span><span style="color: #9876AA">$response_code</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />        } else {<br />            echo </span><span style="color: #DD0000">"Success: </span><span style="color: #9876AA">$response_code</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />            </span><span style="color: #9876AA">$buf </span><span style="color: #007700">= </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getInputBuffer</span><span style="color: #007700">();<br />            echo </span><span style="color: #DD0000">"Body:\n"</span><span style="color: #007700">;<br />            while (</span><span style="color: #9876AA">$s </span><span style="color: #007700">= </span><span style="color: #9876AA">$buf</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">readLine</span><span style="color: #007700">(</span><span style="color: #9876AA">EventBuffer</span><span style="color: #007700">::</span><span style="color: #9876AA">EOL_ANY</span><span style="color: #007700">)) {<br />                echo </span><span style="color: #9876AA">$s</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />            }<br />        }<br />    }<br /><br />    </span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exit</span><span style="color: #007700">(</span><span style="color: #9876AA">NULL</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">$address </span><span style="color: #007700">= </span><span style="color: #DD0000">"127.0.0.1"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$port </span><span style="color: #007700">= </span><span style="color: #9876AA">80</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$conn </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventHttpConnection</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">, </span><span style="color: #9876AA">NULL</span><span style="color: #007700">, </span><span style="color: #9876AA">$address</span><span style="color: #007700">, </span><span style="color: #9876AA">$port</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$conn</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setTimeout</span><span style="color: #007700">(</span><span style="color: #9876AA">5</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$req </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventHttpRequest</span><span style="color: #007700">(</span><span style="color: #DD0000">"_request_handler"</span><span style="color: #007700">, </span><span style="color: #9876AA">$base</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addHeader</span><span style="color: #007700">(</span><span style="color: #DD0000">"Host"</span><span style="color: #007700">, </span><span style="color: #9876AA">$address</span><span style="color: #007700">, </span><span style="color: #9876AA">EventHttpRequest</span><span style="color: #007700">::</span><span style="color: #9876AA">OUTPUT_HEADER</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addHeader</span><span style="color: #007700">(</span><span style="color: #DD0000">"Content-Length"</span><span style="color: #007700">, </span><span style="color: #DD0000">"0"</span><span style="color: #007700">, </span><span style="color: #9876AA">EventHttpRequest</span><span style="color: #007700">::</span><span style="color: #9876AA">OUTPUT_HEADER</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$conn</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">makeRequest</span><span style="color: #007700">(</span><span style="color: #9876AA">$req</span><span style="color: #007700">, </span><span style="color: #9876AA">EventHttpRequest</span><span style="color: #007700">::</span><span style="color: #9876AA">CMD_GET</span><span style="color: #007700">, </span><span style="color: #DD0000">"/index.cphp"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">loop</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>_request_handler<br>Success: 200<br>Body:<br>PHP, date:<br>2013-03-13T20:27:52+05:00<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttpconnection.makerequest-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::addHeader()} - Adds an HTTP header to the headers of the request</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function makeRequest(EventHttpRequest $req, int $type, string $uri): bool {}

/**
*<div id="eventhttpconnection.setclosecallback" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpConnection::setCloseCallback</h1>  <p class="verinfo">(PECL event &gt;= 1.8.0)</p><p class="refpurpose"><span class="refname">EventHttpConnection::setCloseCallback</span> &mdash; <span class="dc-title">Set callback for connection close</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttpconnection.setclosecallback-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpConnection::setCloseCallback</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets callback for connection close.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttpconnection.setclosecallback-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">callback</span>    </dt>    <dd>     <span>      Callback which is called when connection is closed. Should match the      following prototype:     </span>     <div class="methodsynopsis dc-description">      <span class="methodname" style="color:#CC7832"><strong>callback</strong></span>(<span class="methodparam">       <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventhttpconnection.php" class="type EventHttpConnection" style="color:#EAB766">EventHttpConnection</a></span>        <span class="parameter" style="color:#3A95FF">$conn</span>       <span class="initializer"> = <strong><span>null</span></strong></span>      </span>, <span class="methodparam">       <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>        <span class="parameter" style="color:#3A95FF">$arg</span>       <span class="initializer"> = <strong><span>null</span></strong></span>      </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttpconnection.setclosecallback-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-eventhttpconnection.setclosecallback-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1     <span class="methodname" style="color:#CC7832"><strong>EventHttpConnection::setCloseCallback()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//<br /> * Setting up close-connection callback<br /> *<br /> * The script handles closed connections using HTTP API.<br /> *<br /> * Usage:<br /> * 1) Launch the server:<br /> * $ php examples/http_closecb.php 4242<br /> *<br /> * 2) Launch a client in another terminal. Telnet-like<br /> * session should look like the following:<br /> *<br /> * $ nc -t 127.0.0.1 4242<br /> * GET / HTTP/1.0<br /> * Connection: close<br /> *<br /> * The server will output something similar to the following:<br /> *<br /> * HTTP/1.0 200 OK<br /> * Content-Type: multipart/x-mixed-replace;boundary=boundarydonotcross<br /> * Connection: close<br /> *<br /> * &lt;html&gt;<br /> *<br /> * 3) Terminate the client connection abruptly,<br /> * i.e. kill the process, or just press Ctrl-C.<br /> *<br /> * 4) Check if the server called _close_callback.<br /> * The script should output "_close_callback" string to standard output.<br /> *<br /> * 5) Check if the server's process has no orphaned connections,<br /> * e.g. with `lsof` utility.<br /> <br /><br /></span><span style="color: #007700">function </span><span style="color: #9876AA">_close_callback</span><span style="color: #007700">(</span><span style="color: #9876AA">$conn</span><span style="color: #007700">)<br />{<br />    echo </span><span style="color: #9876AA">__FUNCTION__</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /><br />function </span><span style="color: #9876AA">_http_default</span><span style="color: #007700">(</span><span style="color: #9876AA">$req</span><span style="color: #007700">, </span><span style="color: #9876AA">$dummy</span><span style="color: #007700">)<br />{<br />    </span><span style="color: #9876AA">$conn </span><span style="color: #007700">= </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getConnection</span><span style="color: #007700">();<br />    </span><span style="color: #9876AA">$conn</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setCloseCallback</span><span style="color: #007700">(</span><span style="color: #DD0000">'_close_callback'</span><span style="color: #007700">, </span><span style="color: #9876AA">NULL</span><span style="color: #007700">);<br /><br />    </span><span style="color: #FF8000">//<br />    By enabling Event::READ we protect the server against unclosed conections.<br />    This is a peculiarity of Libevent. The library disables Event::READ events<br />     on this connection, and the server is not notified about terminated<br />    connections.<br /><br />    So each time client terminates connection abruptly, we get an orphaned<br />    connection. For instance, the following is a part of `lsof -p $PID | grep TCP`<br />    command after client has terminated connection:<br /><br />    57-php     15057 ruslan  6u  unix 0xffff8802fb59c780   0t0  125187 socket<br />    58:php     15057 ruslan  7u  IPv4             125189   0t0     TCP *:4242 (LISTEN)<br />    59:php     15057 ruslan  8u  IPv4             124342   0t0     TCP localhost:4242-&gt;localhost:37375 (CLOSE_WAIT)<br /><br />    where $PID is our process ID.<br /><br />    The following block of code fixes such kind of orphaned connections.<br />     <br />    </span><span style="color: #9876AA">$bev </span><span style="color: #007700">= </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getBufferEvent</span><span style="color: #007700">();<br />    </span><span style="color: #9876AA">$bev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">enable</span><span style="color: #007700">(</span><span style="color: #9876AA">Event</span><span style="color: #007700">::</span><span style="color: #9876AA">READ</span><span style="color: #007700">);<br />    </span><span style="color: #FF8000">// We have to free it explicitly. See</span></span></span></div>    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::getConnection()}</span><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000">$bev-&gt;free(); // we have to free it explicitly<br /><br />    $req-&gt;addHeader(<br />        'Content-Type',<br />        'multipart/x-mixed-replace;boundary=boundarydonotcross',<br />        EventHttpRequest::OUTPUT_HEADER<br />    );<br /><br />    $buf = new EventBuffer();<br />    $buf-&gt;add('&lt;html&gt;');<br /><br />    $req-&gt;sendReply(200, "OK");<br />    $req-&gt;sendReplyChunk($buf);<br />}<br /><br />$port = 4242;<br />if ($argc &gt; 1) {<br />    $port = (int) $argv[1];<br />}<br />if ($port &lt;= 0 || $port &gt; 65535) {<br />    exit("Invalid port");<br />}<br /><br />$base = new EventBase();<br />$http = new EventHttp($base);<br /><br />$http-&gt;setDefaultCallback("_http_default", NULL);<br />$http-&gt;bind("0.0.0.0", $port);<br />$base-&gt;loop();<br /><br />?&gt;</span></span></div>   </div>  </div> </div></div>
*/
    public function setCloseCallback(callable $callback, mixed $data = null): void {}

/**
*<div id="eventhttpconnection.setlocaladdress" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpConnection::setLocalAddress</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventHttpConnection::setLocalAddress</span> &mdash; <span class="dc-title">Sets the IP address from which HTTP connections are made</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttpconnection.setlocaladdress-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpConnection::setLocalAddress</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$address</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets the IP address from which http connections are made.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttpconnection.setlocaladdress-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">address</span>    </dt>    <dd>     <span>      The IP address from which HTTP connections are made.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttpconnection.setlocaladdress-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttpconnection.setlocaladdress-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpConnection::setLocalPort()} - Sets the local port from which connections are made</span>   </li>  </ul> </div></div>
*/
    public function setLocalAddress(string $address): void {}

/**
*<div id="eventhttpconnection.setlocalport" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpConnection::setLocalPort</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventHttpConnection::setLocalPort</span> &mdash; <span class="dc-title">Sets the local port from which connections are made</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttpconnection.setlocalport-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpConnection::setLocalPort</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$port</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets the local port from which connections are made.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttpconnection.setlocalport-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">port</span>    </dt>    <dd>     <span>      The port number.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttpconnection.setlocalport-returnvalues">  <h3 class="title">返回值</h3>  <p class="para"> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttpconnection.setlocalport-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpConnection::setLocalAddress()} - Sets the IP address from which HTTP connections are made</span>   </li>  </ul> </div></div>
*/
    public function setLocalPort(int $port): void {}

/**
*<div id="eventhttpconnection.setmaxbodysize" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpConnection::setMaxBodySize</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventHttpConnection::setMaxBodySize</span> &mdash; <span class="dc-title">Sets maximum body size for the connection</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttpconnection.setmaxbodysize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpConnection::setMaxBodySize</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$max_size</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets maximum body size for the connection.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttpconnection.setmaxbodysize-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">max_size</span>    </dt>    <dd>     <span>      The maximum body size in bytes.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttpconnection.setmaxbodysize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttpconnection.setmaxbodysize-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpConnection::setMaxHeadersSize()} - Sets maximum header size</span>   </li>  </ul> </div></div>
*/
    public function setMaxBodySize(string $max_size): void {}

/**
*<div id="eventhttpconnection.setmaxheaderssize" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpConnection::setMaxHeadersSize</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventHttpConnection::setMaxHeadersSize</span> &mdash; <span class="dc-title">Sets maximum header size</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttpconnection.setmaxheaderssize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpConnection::setMaxHeadersSize</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$max_size</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets maximum header size for the connection.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttpconnection.setmaxheaderssize-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">max_size</span>    </dt>    <dd>     <span>      The maximum header size in bytes.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttpconnection.setmaxheaderssize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttpconnection.setmaxheaderssize-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpConnection::setMaxBodySize()} - Sets maximum body size for the connection</span>   </li>  </ul> </div></div>
*/
    public function setMaxHeadersSize(string $max_size): void {}

/**
*<div id="eventhttpconnection.setretries" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpConnection::setRetries</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventHttpConnection::setRetries</span> &mdash; <span class="dc-title">Sets the retry limit for the connection</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttpconnection.setretries-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpConnection::setRetries</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$retries</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets the retry limit for the connection  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttpconnection.setretries-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">retries</span>    </dt>    <dd>     <span>      The retry limit.      <strong><span>-1</span></strong>      means infinity.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttpconnection.setretries-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function setRetries(int $retries): void {}

/**
*<div id="eventhttpconnection.settimeout" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpConnection::setTimeout</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventHttpConnection::setTimeout</span> &mdash; <span class="dc-title">Sets the timeout for the connection</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttpconnection.settimeout-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpConnection::setTimeout</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$timeout</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets the timeout for the connection  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttpconnection.settimeout-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">timeout</span>    </dt>    <dd>     <span>      Timeout in seconds.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttpconnection.settimeout-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function setTimeout(int $timeout): void {}
}

// The EventHttpRequest class
/**
*<div id="class.eventhttprequest" class="reference"> <h1 class="title">The EventHttpRequest class</h1>  <div class="partintro"><p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p>  <div class="section" id="eventhttprequest.intro">   <h2 class="title">简介</h2>   <p class="para">    Represents an HTTP request.   </p>  </div>  <div class="section" id="eventhttprequest.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">EventHttpRequest</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventhttprequest.php#eventhttprequest.constants.cmd-get"><var class="varname">CMD_GET</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventhttprequest.php#eventhttprequest.constants.cmd-post"><var class="varname">CMD_POST</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventhttprequest.php#eventhttprequest.constants.cmd-head"><var class="varname">CMD_HEAD</var></a></var><span class="initializer"> = 4</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventhttprequest.php#eventhttprequest.constants.cmd-put"><var class="varname">CMD_PUT</var></a></var><span class="initializer"> = 8</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventhttprequest.php#eventhttprequest.constants.cmd-delete"><var class="varname">CMD_DELETE</var></a></var><span class="initializer"> = 16</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventhttprequest.php#eventhttprequest.constants.cmd-options"><var class="varname">CMD_OPTIONS</var></a></var><span class="initializer"> = 32</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventhttprequest.php#eventhttprequest.constants.cmd-trace"><var class="varname">CMD_TRACE</var></a></var><span class="initializer"> = 64</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventhttprequest.php#eventhttprequest.constants.cmd-connect"><var class="varname">CMD_CONNECT</var></a></var><span class="initializer"> = 128</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventhttprequest.php#eventhttprequest.constants.cmd-patch"><var class="varname">CMD_PATCH</var></a></var><span class="initializer"> = 256</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventhttprequest.php#eventhttprequest.constants.input-header"><var class="varname">INPUT_HEADER</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventhttprequest.php#eventhttprequest.constants.output-header"><var class="varname">OUTPUT_HEADER</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.addheader.php" class="methodname" style="color:#CC7832">addHeader</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$key</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$value</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$type</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.cancel.php" class="methodname" style="color:#CC7832">cancel</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.clearheaders.php" class="methodname" style="color:#CC7832">clearHeaders</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.closeconnection.php" class="methodname" style="color:#CC7832">closeConnection</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$callback</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>)</div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.findheader.php" class="methodname" style="color:#CC7832">findHeader</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$key</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$type</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.free.php" class="methodname" style="color:#CC7832">free</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.closeconnection.php" class="methodname" style="color:#CC7832">closeConnection</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbufferevent.php" class="type EventBufferEvent" style="color:#EAB766">EventBufferEvent</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.getcommand.php" class="methodname" style="color:#CC7832">getCommand</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.closeconnection.php" class="methodname" style="color:#CC7832">closeConnection</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventhttpconnection.php" class="type EventHttpConnection" style="color:#EAB766">EventHttpConnection</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.gethost.php" class="methodname" style="color:#CC7832">getHost</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.getinputbuffer.php" class="methodname" style="color:#CC7832">getInputBuffer</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.getinputheaders.php" class="methodname" style="color:#CC7832">getInputHeaders</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.getoutputbuffer.php" class="methodname" style="color:#CC7832">getOutputBuffer</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.getoutputheaders.php" class="methodname" style="color:#CC7832">getOutputHeaders</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.getresponsecode.php" class="methodname" style="color:#CC7832">getResponseCode</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.geturi.php" class="methodname" style="color:#CC7832">getUri</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.removeheader.php" class="methodname" style="color:#CC7832">removeHeader</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$key</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$type</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.senderror.php" class="methodname" style="color:#CC7832">sendError</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$error</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$reason</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.sendreply.php" class="methodname" style="color:#CC7832">sendReply</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$code</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$reason</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span>     <span class="parameter" style="color:#3A95FF">$buf</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.sendreplychunk.php" class="methodname" style="color:#CC7832">sendReplyChunk</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span>     <span class="parameter" style="color:#3A95FF">$buf</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.sendreplyend.php" class="methodname" style="color:#CC7832">sendReplyEnd</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventhttprequest.sendreplystart.php" class="methodname" style="color:#CC7832">sendReplyStart</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$code</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$reason</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>  <div class="section" id="eventhttprequest.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="eventhttprequest.constants.cmd-get">      <strong><span>EventHttpRequest::CMD_GET</span></strong>     </dt>     <dd>      <p class="para">       GET method(command)      </p>     </dd>             <dt id="eventhttprequest.constants.cmd-post">      <strong><span>EventHttpRequest::CMD_POST</span></strong>     </dt>     <dd>      <p class="para">       POST method(command)      </p>     </dd>             <dt id="eventhttprequest.constants.cmd-head">      <strong><span>EventHttpRequest::CMD_HEAD</span></strong>     </dt>     <dd>      <p class="para">       HEAD method(command)      </p>     </dd>             <dt id="eventhttprequest.constants.cmd-put">      <strong><span>EventHttpRequest::CMD_PUT</span></strong>     </dt>     <dd>      <p class="para">       PUT method(command)      </p>     </dd>             <dt id="eventhttprequest.constants.cmd-delete">      <strong><span>EventHttpRequest::CMD_DELETE</span></strong>     </dt>     <dd>      <p class="para">       DELETE command(method)      </p>     </dd>             <dt id="eventhttprequest.constants.cmd-options">      <strong><span>EventHttpRequest::CMD_OPTIONS</span></strong>     </dt>     <dd>      <p class="para">       OPTIONS method(command)      </p>     </dd>             <dt id="eventhttprequest.constants.cmd-trace">      <strong><span>EventHttpRequest::CMD_TRACE</span></strong>     </dt>     <dd>      <p class="para">       TRACE method(command)      </p>     </dd>             <dt id="eventhttprequest.constants.cmd-connect">      <strong><span>EventHttpRequest::CMD_CONNECT</span></strong>     </dt>     <dd>      <p class="para">       CONNECT method(command)      </p>     </dd>             <dt id="eventhttprequest.constants.cmd-patch">      <strong><span>EventHttpRequest::CMD_PATCH</span></strong>     </dt>     <dd>      <p class="para">       PATCH method(command)      </p>     </dd>             <dt id="eventhttprequest.constants.input-header">      <strong><span>EventHttpRequest::INPUT_HEADER</span></strong>     </dt>     <dd>      <p class="para">       Request input header type.      </p>     </dd>             <dt id="eventhttprequest.constants.output-header">      <strong><span>EventHttpRequest::OUTPUT_HEADER</span></strong>     </dt>     <dd>      <p class="para">       Request output header type.      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EventHttpRequest::addHeader} — Adds an HTTP header to the headers of the request</li><li>{@link EventHttpRequest::cancel} — Cancels a pending HTTP request</li><li>{@link EventHttpRequest::clearHeaders} — Removes all output headers from the header list of the request</li><li>{@link EventHttpRequest::closeConnection} — Closes associated HTTP connection</li><li>{@link EventHttpRequest::__construct} — Constructs EventHttpRequest object</li><li>{@link EventHttpRequest::findHeader} — Finds the value belonging a header</li><li>{@link EventHttpRequest::free} — Frees the object and removes associated events</li><li>{@link EventHttpRequest::getBufferEvent} — Returns EventBufferEvent object</li><li>{@link EventHttpRequest::getCommand} — Returns the request command(method)</li><li>{@link EventHttpRequest::getConnection} — Returns EventHttpConnection object</li><li>{@link EventHttpRequest::getHost} — Returns the request host</li><li>{@link EventHttpRequest::getInputBuffer} — Returns the input buffer</li><li>{@link EventHttpRequest::getInputHeaders} — Returns associative array of the input headers</li><li>{@link EventHttpRequest::getOutputBuffer} — Returns the output buffer of the request</li><li>{@link EventHttpRequest::getOutputHeaders} — Returns associative array of the output headers</li><li>{@link EventHttpRequest::getResponseCode} — Returns the response code</li><li>{@link EventHttpRequest::getUri} — Returns the request URI</li><li>{@link EventHttpRequest::removeHeader} — Removes an HTTP header from the headers of the request</li><li>{@link EventHttpRequest::sendError} — Send an HTML error message to the client</li><li>{@link EventHttpRequest::sendReply} — Send an HTML reply to the client</li><li>{@link EventHttpRequest::sendReplyChunk} — Send another data chunk as part of an ongoing chunked reply</li><li>{@link EventHttpRequest::sendReplyEnd} — Complete a chunked reply, freeing the request as appropriate</li><li>{@link EventHttpRequest::sendReplyStart} — Initiate a chunked reply</li></ul></div>
*/
class EventHttpRequest
{
    public const CMD_GET = 1;
    public const CMD_POST = 2;
    public const CMD_HEAD = 4;
    public const CMD_PUT = 8;
    public const CMD_DELETE = 16;
    public const CMD_OPTIONS = 32;
    public const CMD_TRACE = 64;
    public const CMD_CONNECT = 128;
    public const CMD_PATCH = 256;
    public const INPUT_HEADER = 1;
    public const OUTPUT_HEADER = 2;

    /**
     * EventHttpRequest constructor.
     * @param callable $callback
     * @param mixed $data
     */
    #[Pure]
    public function __construct(
        callable $callback,
        $data = null
    ) {}

/**
*<div id="eventhttprequest.addheader" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::addHeader</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpRequest::addHeader</span> &mdash; <span class="dc-title">Adds an HTTP header to the headers of the request</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.addheader-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::addHeader</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$key</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$value</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$type</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Adds an HTTP header to the headers of the request.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.addheader-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">key</span>    </dt>    <dd>     <span>      Header name.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">value</span>    </dt>    <dd>     <p class="para">      Header value.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">type</span>    </dt>    <dd>     <p class="para">      One of      {@link        <code class="literal">EventHttpRequest::*_HEADER</code> constants}      .     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.addheader-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttprequest.addheader-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::removeHeader()} - Removes an HTTP header from the headers of the request</span>   </li>  </ul> </div></div>
*/
    public function addHeader(string $key, string $value, int $type): bool {}

/**
*<div id="eventhttprequest.cancel" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::cancel</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpRequest::cancel</span> &mdash; <span class="dc-title">Cancels a pending HTTP request</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.cancel-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::cancel</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Cancels a pending HTTP request.  </p>  <p class="para">   Cancels an ongoing HTTP request. The callback associated with this request   is not executed and the request object is freed. If the request is   currently being processed, e.g. it is ongoing, the corresponding   <span class="classname"><a href="https://www.php.net/manual/zh/class.eventhttpconnection.php" class="classname">EventHttpConnection</a></span>   object is going to get reset.  </p>  <p class="para">   A request cannot be canceled if its callback has executed already. A   request may be canceled reentrantly from its chunked callback.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.cancel-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.cancel-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function cancel(): void {}

/**
*<div id="eventhttprequest.clearheaders" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::clearHeaders</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpRequest::clearHeaders</span> &mdash; <span class="dc-title">Removes all output headers from the header list of the request</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.clearheaders-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::clearHeaders</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Removes all output headers from the header list of the request.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.clearheaders-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.clearheaders-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttprequest.clearheaders-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::addHeader()} - Adds an HTTP header to the headers of the request</span>   </li>  </ul> </div></div>
*/
    public function clearHeaders(): void {}

/**
*<div id="eventhttprequest.closeconnection" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::closeConnection</h1>  <p class="verinfo">(PECL event &gt;= 1.8.0)</p><p class="refpurpose"><span class="refname">EventHttpRequest::closeConnection</span> &mdash; <span class="dc-title">Closes associated HTTP connection</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.closeconnection-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::closeConnection</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Closes HTTP connection associated with the request.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.closeconnection-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.closeconnection-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function closeConnection(): void {}

/**
*<div id="eventhttprequest.findheader" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::findHeader</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpRequest::findHeader</span> &mdash; <span class="dc-title">Finds the value belonging a header</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.findheader-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::findHeader</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$key</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$type</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Finds the value belonging a header.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.findheader-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">key</span>    </dt>    <dd>     <span>      The header name.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">type</span>    </dt>    <dd>     <p class="para">      One of      {@link        <code class="literal">EventHttpRequest::*_HEADER</code> constants}      .     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.findheader-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>null</span></strong> if header not found.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttprequest.findheader-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::addHeader()} - Adds an HTTP header to the headers of the request</span>   </li>  </ul> </div></div>
*/
    public function findHeader(string $key, string $type): ?string {}

/**
*<div id="eventhttprequest.free" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::free</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpRequest::free</span> &mdash; <span class="dc-title">Frees the object and removes associated events</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.free-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::free</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Frees the object and removes associated events.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.free-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.free-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function free() {}

/**
*<div id="eventhttprequest.getcommand" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::getCommand</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpRequest::getCommand</span> &mdash; <span class="dc-title">Returns the request command(method)</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.getcommand-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::getCommand</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Returns the request command, one of   {@link     <code class="literal">EventHttpRequest::CMD_*</code>   }   constants.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.getcommand-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.getcommand-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the request command, one of   {@link     <code class="literal">EventHttpRequest::CMD_*</code>   }   constants.  </p> </div></div>
*/
    public function getCommand(): int {}

/**
*<div id="eventhttprequest.getconnection" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::getConnection</h1>  <p class="verinfo">(PECL event &gt;= 1.8.0)</p><p class="refpurpose"><span class="refname">EventHttpRequest::getConnection</span> &mdash; <span class="dc-title">Returns EventHttpConnection object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.getconnection-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::closeConnection}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventhttpconnection.php" class="type EventHttpConnection" style="color:#EAB766">EventHttpConnection</a></span></div>  <p class="para rdfs-comment">   Returns   <span class="classname"><a href="https://www.php.net/manual/zh/class.eventhttpconnection.php" class="classname">EventHttpConnection</a></span>   object which represents HTTP connection associated with the request.  </p>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    Libevent API allows HTTP request objects to be not bound to any HTTP    connection. Therefore we can&#039;t unambiguously associate    <span class="classname"><a href="https://www.php.net/manual/zh/class.eventhttprequest.php" class="classname">EventHttpRequest</a></span>    with    <span class="classname"><a href="https://www.php.net/manual/zh/class.eventhttpconnection.php" class="classname">EventHttpConnection</a></span>    . Thus, we construct    <span class="classname"><a href="https://www.php.net/manual/zh/class.eventhttpconnection.php" class="classname">EventHttpConnection</a></span>    object on-the-fly. Having no information about the event base, DNS base    and connection-close callback, we just leave these fields unset.   </p>  </div>  <p class="para">   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::getConnection()</strong></span>   method is usually useful when we need to set up a callback on connection   close. See   <span class="methodname" style="color:#CC7832">{@link EventHttpConnection::setCloseCallback()}</span>   .  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.getconnection-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.getconnection-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns   <span class="classname"><a href="https://www.php.net/manual/zh/class.eventhttpconnection.php" class="classname">EventHttpConnection</a></span>   object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttprequest.getconnection-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpConnection::setCloseCallback()} - Set callback for connection close</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::getBufferEvent()} - Returns EventBufferEvent object</span>   </li>  </ul> </div></div>
*/
    public function getConnection(): ?EventHttpConnection {}

/**
*<div id="eventhttprequest.gethost" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::getHost</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpRequest::getHost</span> &mdash; <span class="dc-title">Returns the request host</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.gethost-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::getHost</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Returns the request host.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.gethost-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.gethost-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the request host.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttprequest.gethost-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::getUri()} - Returns the request URI</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::getCommand()} - Returns the request command(method)</span>   </li>  </ul> </div></div>
*/
    public function getHost(): string {}

/**
*<div id="eventhttprequest.getinputbuffer" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::getInputBuffer</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpRequest::getInputBuffer</span> &mdash; <span class="dc-title">Returns the input buffer</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.getinputbuffer-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::getInputBuffer</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span></div>  <p class="para rdfs-comment">   Returns the input buffer.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.getinputbuffer-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.getinputbuffer-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the input buffer.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttprequest.getinputbuffer-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::getOutputBuffer()} - Returns the output buffer of the request</span>   </li>  </ul> </div></div>
*/
    public function getInputBuffer(): EventBuffer {}

/**
*<div id="eventhttprequest.getinputheaders" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::getInputHeaders</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpRequest::getInputHeaders</span> &mdash; <span class="dc-title">Returns associative array of the input headers</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.getinputheaders-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::getInputHeaders</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Returns associative array of the input headers.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.getinputheaders-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.getinputheaders-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns associative array of the input headers.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttprequest.getinputheaders-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::getOutputHeaders()} - Returns associative array of the output headers</span>   </li>  </ul> </div></div>
*/
    public function getInputHeaders(): array {}

/**
*<div id="eventhttprequest.getoutputbuffer" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::getOutputBuffer</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpRequest::getOutputBuffer</span> &mdash; <span class="dc-title">Returns the output buffer of the request</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.getoutputbuffer-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::getOutputBuffer</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span></div>  <p class="para rdfs-comment">   Returns the output buffer of the request.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.getoutputbuffer-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.getoutputbuffer-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the output buffer of the request.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttprequest.getoutputbuffer-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::getInputBuffer()} - Returns the input buffer</span>   </li>  </ul> </div></div>
*/
    public function getOutputBuffer(): EventBuffer {}

/**
*<div id="eventhttprequest.getoutputheaders" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::getOutputHeaders</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpRequest::getOutputHeaders</span> &mdash; <span class="dc-title">Returns associative array of the output headers</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.getoutputheaders-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::getOutputHeaders</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Returns associative array of the output headers.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.getoutputheaders-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.getoutputheaders-returnvalues">  <h3 class="title">返回值</h3>  <p class="para"> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttprequest.getoutputheaders-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::getInputHeaders()} - Returns associative array of the input headers</span>   </li>  </ul> </div></div>
*/
    public function getOutputHeaders(): array {}

/**
*<div id="eventhttprequest.getresponsecode" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::getResponseCode</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpRequest::getResponseCode</span> &mdash; <span class="dc-title">Returns the response code</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.getresponsecode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::getResponseCode</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Returns the response code.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.getresponsecode-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.getresponsecode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the response code of the request.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttprequest.getresponsecode-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::getCommand()} - Returns the request command(method)</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::getHost()} - Returns the request host</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::getUri()} - Returns the request URI</span>   </li>  </ul> </div></div>
*/
    public function getResponseCode(): int {}

/**
*<div id="eventhttprequest.geturi" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::getUri</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpRequest::getUri</span> &mdash; <span class="dc-title">Returns the request URI</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.geturi-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::getUri</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Returns the request URI  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.geturi-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.geturi-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the request URI  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttprequest.geturi-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::getCommand()} - Returns the request command(method)</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::getHost()} - Returns the request host</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::getResponseCode()} - Returns the response code</span>   </li>  </ul> </div></div>
*/
    public function getUri(): string {}

/**
*<div id="eventhttprequest.removeheader" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::removeHeader</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpRequest::removeHeader</span> &mdash; <span class="dc-title">Removes an HTTP header from the headers of the request</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.removeheader-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::removeHeader</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$key</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$type</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Removes an HTTP header from the headers of the request.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.removeheader-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">key</span>    </dt>    <dd>     <span>      The header name.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">type</span>    </dt>    <dd>     <p class="para">      <span class="parameter" style="color:#3A95FF">type</span>      is one of      <span>EventHttpRequest::*_HEADER</span>      constants.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.removeheader-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Removes an HTTP header from the headers of the request.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttprequest.removeheader-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::addHeader()} - Adds an HTTP header to the headers of the request</span>   </li>  </ul> </div></div>
*/
    public function removeHeader(string $key, int $type): bool {}

/**
*<div id="eventhttprequest.senderror" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::sendError</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpRequest::sendError</span> &mdash; <span class="dc-title">Send an HTML error message to the client</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.senderror-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::sendError</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$error</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$reason</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Send an HTML error message to the client.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.senderror-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">error</span>    </dt>    <dd>     <span>      The HTTP error code.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">reason</span>    </dt>    <dd>     <p class="para">      A brief explanation ofthe error. If <strong><span>null</span></strong>, the standard meaning of the      error code will be used.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.senderror-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-eventhttprequest.senderror-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1     <span class="function"><strong style="color:#CC7832">EventHttpRequest::sendError()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">_http_400</span><span style="color: #007700">(</span><span style="color: #9876AA">$req</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$req</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">sendError</span><span style="color: #007700">(</span><span style="color: #9876AA">400</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">$base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$http </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventHttp</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$http</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setCallback</span><span style="color: #007700">(</span><span style="color: #DD0000">"/err400"</span><span style="color: #007700">, </span><span style="color: #DD0000">"_http_400"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$http</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bind</span><span style="color: #007700">(</span><span style="color: #DD0000">"0.0.0.0"</span><span style="color: #007700">, </span><span style="color: #9876AA">8010</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">loop</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttprequest.senderror-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::sendReply()} - Send an HTML reply to the client</span>   </li>  </ul> </div></div>
*/
    public function sendError(int $error, ?string $reason = null) {}

/**
*<div id="eventhttprequest.sendreply" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::sendReply</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpRequest::sendReply</span> &mdash; <span class="dc-title">Send an HTML reply to the client</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.sendreply-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::sendReply</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$code</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$reason</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span>     <span class="parameter" style="color:#3A95FF">$buf</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Send an HTML reply to the client. The body of the reply consists of data in   optional   <span class="parameter" style="color:#3A95FF">buf</span>   parameter.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.sendreply-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">code</span>    </dt>    <dd>     <span>      The HTTP response code to send.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">reason</span>    </dt>    <dd>     <p class="para">      A brief message to send with the response code.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">buf</span>    </dt>    <dd>     <p class="para">      The body of the response.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.sendreply-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttprequest.sendreply-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::sendError()} - Send an HTML error message to the client</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::sendReplyChunk()} - Send another data chunk as part of an ongoing chunked reply</span>   </li>  </ul> </div></div>
*/
    public function sendReply(int $code, string $reason, ?EventBuffer $buf = null) {}

/**
*<div id="eventhttprequest.sendreplychunk" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::sendReplyChunk</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpRequest::sendReplyChunk</span> &mdash; <span class="dc-title">Send another data chunk as part of an ongoing chunked reply</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.sendreplychunk-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::sendReplyChunk</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbuffer.php" class="type EventBuffer" style="color:#EAB766">EventBuffer</a></span>     <span class="parameter" style="color:#3A95FF">$buf</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Send another data chunk as part of an ongoing chunked reply. After calling   this method   <span class="parameter" style="color:#3A95FF">buf</span>   will be empty.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.sendreplychunk-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">buf</span>    </dt>    <dd>     <span>      The data chunk to send as part of the reply.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.sendreplychunk-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttprequest.sendreplychunk-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::sendReplyStart()} - Initiate a chunked reply</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::sendReplyEnd()} - Complete a chunked reply, freeing the request as appropriate</span>   </li>  </ul> </div></div>
*/
    public function sendReplyChunk(EventBuffer $buf) {}

/**
*<div id="eventhttprequest.sendreplyend" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::sendReplyEnd</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpRequest::sendReplyEnd</span> &mdash; <span class="dc-title">Complete a chunked reply, freeing the request as appropriate</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.sendreplyend-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::sendReplyEnd</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Complete a chunked reply, freeing the request as appropriate.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.sendreplyend-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.sendreplyend-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttprequest.sendreplyend-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::sendReplyStart()} - Initiate a chunked reply</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::sendReplyChunk()} - Send another data chunk as part of an ongoing chunked reply</span>   </li>  </ul> </div></div>
*/
    public function sendReplyEnd(): void {}

/**
*<div id="eventhttprequest.sendreplystart" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventHttpRequest::sendReplyStart</h1>  <p class="verinfo">(PECL event &gt;= 1.4.0-beta)</p><p class="refpurpose"><span class="refname">EventHttpRequest::sendReplyStart</span> &mdash; <span class="dc-title">Initiate a chunked reply</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventhttprequest.sendreplystart-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventHttpRequest::sendReplyStart</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$code</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$reason</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Initiate a reply that uses   <span>Transfer-Encoding</span>   <span>chunked</span>   .  </p>  <p class="para">   This allows the caller to stream the reply back to the client and is useful   when either not all of the reply data is immediately available or when   sending very large replies.  </p>  <p class="para">   The caller needs to supply data chunks with   <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::sendReplyChunk()}</span>   and complete the reply by calling   <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::sendReplyEnd()}</span>   .  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventhttprequest.sendreplystart-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">code</span>    </dt>    <dd>     <span>      The HTTP response code to send.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">reason</span>    </dt>    <dd>     <p class="para">      A brief message to send with the response code.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventhttprequest.sendreplystart-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventhttprequest.sendreplystart-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::sendReplyChunk()} - Send another data chunk as part of an ongoing chunked reply</span>   </li>   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventHttpRequest::sendReplyEnd()} - Complete a chunked reply, freeing the request as appropriate</span>   </li>  </ul> </div></div>
*/
    public function sendReplyStart(int $code, string $reason): void {}
}

//  The EventListener class
/**
*<div id="class.eventlistener" class="reference"> <h1 class="title">The EventListener class</h1>  <div class="partintro"><p class="verinfo">(PECL event &gt;= 1.5.0)</p>  <div class="section" id="eventlistener.intro">   <h2 class="title">简介</h2>   <p class="para">    Represents a connection listener.   </p>  </div>  <div class="section" id="eventlistener.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">final</span>      <span class="modifier">class</span> <strong class="classname">EventListener</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventlistener.php#eventlistener.constants.opt-leave-sockets-blocking"><var class="varname">OPT_LEAVE_SOCKETS_BLOCKING</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventlistener.php#eventlistener.constants.opt-close-on-free"><var class="varname">OPT_CLOSE_ON_FREE</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventlistener.php#eventlistener.constants.opt-close-on-exec"><var class="varname">OPT_CLOSE_ON_EXEC</var></a></var><span class="initializer"> = 4</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventlistener.php#eventlistener.constants.opt-reuseable"><var class="varname">OPT_REUSEABLE</var></a></var><span class="initializer"> = 8</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventlistener.php#eventlistener.constants.opt-threadsafe"><var class="varname">OPT_THREADSAFE</var></a></var><span class="initializer"> = 16</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">readonly</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.eventlistener.php#eventlistener.props.fd">$<var class="varname">fd</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventlistener.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$data</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$flags</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$backlog</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$target</span>   </span><br>)</div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventlistener.disable.php" class="methodname" style="color:#CC7832">disable</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventlistener.enable.php" class="methodname" style="color:#CC7832">enable</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventlistener.getbase.php" class="methodname" style="color:#CC7832">getBase</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventlistener.getsocketname.php" class="methodname" style="color:#CC7832">getSocketName</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">&$address</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">&$port</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventlistener.setcallback.php" class="methodname" style="color:#CC7832">setCallback</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventlistener.seterrorcallback.php" class="methodname" style="color:#CC7832">setErrorCallback</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>  <div class="section" id="eventlistener.props">   <h2 class="title">属性</h2>   <dl>         <dt id="eventlistener.props.fd">      <var class="varname">fd</var>     </dt>     <dd>      <p class="para">       Numeric file descriptor of the underlying socket. (Added in       <span>event-1.6.0</span>       .)      </p>     </dd>       </dl>  </div>  <div class="section" id="eventlistener.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="eventlistener.constants.opt-leave-sockets-blocking">      <strong><span>EventListener::OPT_LEAVE_SOCKETS_BLOCKING</span></strong>     </dt>     <dd>      <p class="para">       By default Libevent turns underlying file descriptors, or sockets, to       non-blocking mode. This flag tells Libevent to leave them in blocking       mode.      </p>     </dd>             <dt id="eventlistener.constants.opt-close-on-free">      <strong><span>EventListener::OPT_CLOSE_ON_FREE</span></strong>     </dt>     <dd>      <p class="para">       If this option is set, the connection listener closes its underlying       socket when the       <span class="classname"><strong class="classname">EventListener</strong></span>       object is freed.      </p>     </dd>             <dt id="eventlistener.constants.opt-close-on-exec">      <strong><span>EventListener::OPT_CLOSE_ON_EXEC</span></strong>     </dt>     <dd>      <p class="para">       If this option is set, the connection listener sets the close-on-exec       flag on the underlying listener socket. See platform documentation for       <span>fcntl</span>       and       <strong><span>FD_CLOEXEC</span></strong>       for more information.      </p>     </dd>             <dt id="eventlistener.constants.opt-reuseable">      <strong><span>EventListener::OPT_REUSEABLE</span></strong>     </dt>     <dd>      <p class="para">       By default on some platforms, once a listener socket is closed, no       other socket can bind to the same port until a while has passed.       Setting this option makes Libevent mark the socket as reusable, so that       once it is closed, another socket can be opened to listen on the same       port.      </p>     </dd>             <dt id="eventlistener.constants.opt-threadsafe">      <strong><span>EventListener::OPT_THREADSAFE</span></strong>     </dt>     <dd>      <p class="para">       Allocate locks for the listener, so that it’s safe to use it from       multiple threads.      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EventListener::__construct} — Creates new connection listener associated with an event base</li><li>{@link EventListener::disable} — Disables an event connect listener object</li><li>{@link EventListener::enable} — Enables an event connect listener object</li><li>{@link EventListener::getBase} — Returns event base associated with the event listener</li><li>{@link EventListener::getSocketName} — Retreives the current address to which the  listener's socket is bound</li><li>{@link EventListener::setCallback} — The setCallback purpose</li><li>{@link EventListener::setErrorCallback} — Set event listener's error callback</li></ul></div>
*/
final class EventListener
{
    /**
     * @var int
     */
    #[Immutable]
    public $fd;
    public const OPT_LEAVE_SOCKETS_BLOCKING = 1;
    public const OPT_CLOSE_ON_FREE = 2;
    public const OPT_CLOSE_ON_EXEC = 4;
    public const OPT_REUSEABLE = 8;
    public const OPT_THREADSAFE = 16;
    public const OPT_DISABLED = 32;
    public const OPT_DEFERRED_ACCEPT = 64;

    /**
     * __construct.
     * Creates new connection listener associated with an event base.
     *
     * @param EventBase $base
     * @param callable  $cb
     * @param mixed     $data
     * @param int       $flags
     * @param int       $backlog
     * @param mixed     $target
     *
     * @see https://secure.php.net/manual/en/eventlistener.construct.php
     */
    public function __construct(EventBase $base, callable $cb, mixed $data, int $flags, int $backlog, mixed $target) {}

/**
*<div id="eventlistener.disable" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventListener::disable</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventListener::disable</span> &mdash; <span class="dc-title">Disables an event connect listener object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventlistener.disable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventListener::disable</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Disables an event connect listener object  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventlistener.disable-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventlistener.disable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventlistener.disable-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventListener::enable()} - Enables an event connect listener object</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function disable(): bool {}

/**
*<div id="eventlistener.enable" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventListener::enable</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventListener::enable</span> &mdash; <span class="dc-title">Enables an event connect listener object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventlistener.enable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventListener::enable</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Enables an event connect listener object  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventlistener.enable-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventlistener.enable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventlistener.enable-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventListener::disable()} - Disables an event connect listener object</span>   </li>  </ul> </div></div>
     * @return bool*/
    public function enable(): bool {}

    public function free(): void {}

/**
*<div id="eventlistener.getbase" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventListener::getBase</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventListener::getBase</span> &mdash; <span class="dc-title">Returns event base associated with the event listener</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventlistener.getbase-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventListener::getBase</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Returns event base associated with the event listener.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventlistener.getbase-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventlistener.getbase-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns event base associated with the event listener.  </p> </div></div>
*/
    public function getBase(): void {}

/**
*<div id="eventlistener.getsocketname" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventListener::getSocketName</h1>  <p class="verinfo">(PECL event &gt;= 1.5.0)</p><p class="refpurpose"><span class="refname">EventListener::getSocketName</span> &mdash; <span class="dc-title">Retreives the current address to which the  listener&#039;s socket is bound</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventlistener.getsocketname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EventListener::getSocketName</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">&$address</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">&$port</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Retreives the current address to which the listener&#039;s socket is bound.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventlistener.getsocketname-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">address</span>    </dt>    <dd>     <span>      Output parameter. IP-address depending on the socket address family.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">port</span>    </dt>    <dd>     <p class="para">      Output parameter. The port the socket is bound to.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventlistener.getsocketname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool*/
    public static function getSocketName(string &$address, int &$port): bool {}

/**
*<div id="eventlistener.setcallback" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventListener::setCallback</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventListener::setCallback</span> &mdash; <span class="dc-title">The setCallback purpose</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventlistener.setcallback-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventListener::setCallback</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Adjust event connect listener&#039;s callback and optionally the callback   argument.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventlistener.setcallback-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">cb</span>    </dt>    <dd>     <span>      The new callback for new connections. Ignored if <strong><span>null</span></strong>.     </span>     <p class="para">      Should match the following prototype:     </p>     <div class="methodsynopsis dc-description">      <span class="methodname" style="color:#CC7832"><strong>callback</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">       <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventlistener.php" class="type EventListener" style="color:#EAB766">EventListener</a></span>        <span class="parameter" style="color:#3A95FF">$listener</span>       <span class="initializer"> = <strong><span>null</span></strong></span>      </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">       <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>        <span class="parameter" style="color:#3A95FF">$fd</span>       <span class="initializer"> = <strong><span>null</span></strong></span>      </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">       <span class="type" style="color:#EAB766">array</span>        <span class="parameter" style="color:#3A95FF">$address</span>       <span class="initializer"> = <strong><span>null</span></strong></span>      </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">       <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>        <span class="parameter" style="color:#3A95FF">$arg</span>       <span class="initializer"> = <strong><span>null</span></strong></span>      </span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>     <p class="para">      <dl>               <dt>         <span class="parameter" style="color:#3A95FF">listener</span>        </dt>        <dd>         <p class="para">          The          <span class="classname"><a href="https://www.php.net/manual/zh/class.eventlistener.php" class="classname">EventListener</a></span>          object.         </p>        </dd>                      <dt>         <span class="parameter" style="color:#3A95FF">fd</span>        </dt>        <dd>         <p class="para">          The file descriptor or a resource associated with the listener.         </p>        </dd>                      <dt>         <span class="parameter" style="color:#3A95FF">address</span>        </dt>        <dd>         <p class="para">          Array of two elements: IP address and the          <em>server</em>          port.         </p>        </dd>                      <dt>         <span class="parameter" style="color:#3A95FF">arg</span>        </dt>        <dd>         <p class="para">          User custom data attached to the callback.         </p>        </dd>             </dl>     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">arg</span>    </dt>    <dd>     <p class="para">      Custom user data attached to the callback. Ignored if <strong><span>null</span></strong>.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventlistener.setcallback-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function setCallback(callable $cb, mixed $arg = null): void {}

/**
*<div id="eventlistener.seterrorcallback" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventListener::setErrorCallback</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventListener::setErrorCallback</span> &mdash; <span class="dc-title">Set event listener&#039;s error callback</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventlistener.seterrorcallback-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>EventListener::setErrorCallback</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Set event listener&#039;s error callback  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventlistener.seterrorcallback-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">cb</span>    </dt>    <dd>     <span>      The error callback. Should match the following prototype:     </span>     <div class="methodsynopsis dc-description">      <span class="methodname" style="color:#CC7832"><strong>callback</strong></span>(<span class="methodparam">       <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventlistener.php" class="type EventListener" style="color:#EAB766">EventListener</a></span>        <span class="parameter" style="color:#3A95FF">$listener</span>       <span class="initializer"> = <strong><span>null</span></strong></span>      </span>, <span class="methodparam">       <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>        <span class="parameter" style="color:#3A95FF">$data</span>       <span class="initializer"> = <strong><span>null</span></strong></span>      </span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>     <p class="para">      <dl>               <dt>         <span class="parameter" style="color:#3A95FF">listener</span>        </dt>        <dd>         <p class="para">          The          <span class="classname"><a href="https://www.php.net/manual/zh/class.eventlistener.php" class="classname">EventListener</a></span>          object.         </p>        </dd>                      <dt>         <span class="parameter" style="color:#3A95FF">data</span>        </dt>        <dd>         <p class="para">          User custom data attached to the callback.         </p>        </dd>             </dl>     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventlistener.seterrorcallback-returnvalues">  <h3 class="title">返回值</h3>  <p class="para"> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventlistener.seterrorcallback-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventListener::setCallback()} - The setCallback purpose</span>   </li>  </ul> </div></div>
*/
    public function setErrorCallback(string $cb): void {}
}

//  The EventSslContext class
/**
*<div id="class.eventsslcontext" class="reference"> <h1 class="title">The EventSslContext class</h1>  <div class="partintro"><p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p>  <div class="section" id="eventsslcontext.intro">   <h2 class="title">简介</h2>   <p class="para">    Represents    <span>SSL_CTX</span>    structure. Provides methods and properties to configure the SSL context.   </p>  </div>  <div class="section" id="eventsslcontext.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">final</span>      <span class="modifier">class</span> <strong class="classname">EventSslContext</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php#eventsslcontext.constants.sslv2-client-method"><var class="varname">SSLv2_CLIENT_METHOD</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php#eventsslcontext.constants.sslv3-client-method"><var class="varname">SSLv3_CLIENT_METHOD</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php#eventsslcontext.constants.sslv23-client-method"><var class="varname">SSLv23_CLIENT_METHOD</var></a></var><span class="initializer"> = 3</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php#eventsslcontext.constants.tls-client-method"><var class="varname">TLS_CLIENT_METHOD</var></a></var><span class="initializer"> = 4</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php#eventsslcontext.constants.sslv2-server-method"><var class="varname">SSLv2_SERVER_METHOD</var></a></var><span class="initializer"> = 5</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php#eventsslcontext.constants.sslv3-server-method"><var class="varname">SSLv3_SERVER_METHOD</var></a></var><span class="initializer"> = 6</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php#eventsslcontext.constants.sslv23-server-method"><var class="varname">SSLv23_SERVER_METHOD</var></a></var><span class="initializer"> = 7</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php#eventsslcontext.constants.tls-server-method"><var class="varname">TLS_SERVER_METHOD</var></a></var><span class="initializer"> = 8</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php#eventsslcontext.constants.opt-local-cert"><var class="varname">OPT_LOCAL_CERT</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php#eventsslcontext.constants.opt-local-pk"><var class="varname">OPT_LOCAL_PK</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php#eventsslcontext.constants.opt-passphrase"><var class="varname">OPT_PASSPHRASE</var></a></var><span class="initializer"> = 3</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php#eventsslcontext.constants.opt-ca-file"><var class="varname">OPT_CA_FILE</var></a></var><span class="initializer"> = 4</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php#eventsslcontext.constants.opt-ca-path"><var class="varname">OPT_CA_PATH</var></a></var><span class="initializer"> = 5</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php#eventsslcontext.constants.opt-allow-self-signed"><var class="varname">OPT_ALLOW_SELF_SIGNED</var></a></var><span class="initializer"> = 6</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php#eventsslcontext.constants.opt-verify-peer"><var class="varname">OPT_VERIFY_PEER</var></a></var><span class="initializer"> = 7</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php#eventsslcontext.constants.opt-verify-depth"><var class="varname">OPT_VERIFY_DEPTH</var></a></var><span class="initializer"> = 8</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php#eventsslcontext.constants.opt-ciphers"><var class="varname">OPT_CIPHERS</var></a></var><span class="initializer"> = 9</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php#eventsslcontext.props.local-cert">$<var class="varname">local_cert</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.eventsslcontext.php#eventsslcontext.props.local-pk">$<var class="varname">local_pk</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventsslcontext.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$method</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">$options</span>   </span>)</div>   }</div>  </div>  <div class="section" id="eventsslcontext.props">   <h2 class="title">属性</h2>   <dl>         <dt id="eventsslcontext.props.local-cert">      <var class="varname">local_cert</var>     </dt>     <dd>      <p class="para">       Path to local certificate file on filesystem. It must be a <abbr title="Privacy-Enhanced Mail">PEM</abbr>-encoded       file which contains certificate. It can optionally contain the       certificate chain of issuers.      </p>     </dd>             <dt id="eventsslcontext.props.local-pk">      <var class="varname">local_pk</var>     </dt>     <dd>      <p class="para">       Path to local private key file      </p>     </dd>       </dl>  </div>  <div class="section" id="eventsslcontext.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="eventsslcontext.constants.sslv2-client-method">      <strong><span>EventSslContext::SSLv2_CLIENT_METHOD</span></strong>     </dt>     <dd>      <p class="para">       SSLv2 client method. See       <span>SSL_CTX_new(3)</span>       man page.      </p>     </dd>             <dt id="eventsslcontext.constants.sslv3-client-method">      <strong><span>EventSslContext::SSLv3_CLIENT_METHOD</span></strong>     </dt>     <dd>      <p class="para">       SSLv3 client method. See       <span>SSL_CTX_new(3)</span>       man page.      </p>     </dd>             <dt id="eventsslcontext.constants.sslv23-client-method">      <strong><span>EventSslContext::SSLv23_CLIENT_METHOD</span></strong>     </dt>     <dd>      <p class="para">       SSLv23 client method. See       <span>SSL_CTX_new(3)</span>       man page.      </p>     </dd>             <dt id="eventsslcontext.constants.tls-client-method">      <strong><span>EventSslContext::TLS_CLIENT_METHOD</span></strong>     </dt>     <dd>      <p class="para">       TLS client method. See       <span>SSL_CTX_new(3)</span>       man page.      </p>     </dd>             <dt id="eventsslcontext.constants.sslv2-server-method">      <strong><span>EventSslContext::SSLv2_SERVER_METHOD</span></strong>     </dt>     <dd>      <p class="para">       SSLv2 server method. See       <span>SSL_CTX_new(3)</span>       man page.      </p>     </dd>             <dt id="eventsslcontext.constants.sslv3-server-method">      <strong><span>EventSslContext::SSLv3_SERVER_METHOD</span></strong>     </dt>     <dd>      <p class="para">       SSLv3 server method. See       <span>SSL_CTX_new(3)</span>       man page.      </p>     </dd>             <dt id="eventsslcontext.constants.sslv23-server-method">      <strong><span>EventSslContext::SSLv23_SERVER_METHOD</span></strong>     </dt>     <dd>      <p class="para">       SSLv23 server method. See       <span>SSL_CTX_new(3)</span>       man page.      </p>     </dd>             <dt id="eventsslcontext.constants.tls-server-method">      <strong><span>EventSslContext::TLS_SERVER_METHOD</span></strong>     </dt>     <dd>      <p class="para">       TLS server method. See       <span>SSL_CTX_new(3)</span>       man page.      </p>     </dd>             <dt id="eventsslcontext.constants.opt-local-cert">      <strong><span>EventSslContext::OPT_LOCAL_CERT</span></strong>     </dt>     <dd>      <p class="para">       Key for an item of the options&#039; array used in       <span class="methodname" style="color:#CC7832">{@link EventSslContext::__construct()}</span>       . The option points to path of local certificate.      </p>     </dd>             <dt id="eventsslcontext.constants.opt-local-pk">      <strong><span>EventSslContext::OPT_LOCAL_PK</span></strong>     </dt>     <dd>      <p class="para">       Key for an item of the options&#039; array used in       <span class="methodname" style="color:#CC7832">{@link EventSslContext::__construct()}</span>       . The option points to path of the private key.      </p>     </dd>             <dt id="eventsslcontext.constants.opt-passphrase">      <strong><span>EventSslContext::OPT_PASSPHRASE</span></strong>     </dt>     <dd>      <p class="para">       Key for an item of the options&#039; array used in       <span class="methodname" style="color:#CC7832">{@link EventSslContext::__construct()}</span>       . Represents passphrase of the certificate.      </p>     </dd>             <dt id="eventsslcontext.constants.opt-ca-file">      <strong><span>EventSslContext::OPT_CA_FILE</span></strong>     </dt>     <dd>      <p class="para">       Key for an item of the options&#039; array used in       <span class="methodname" style="color:#CC7832">{@link EventSslContext::__construct()}</span>       . Represents path of the certificate authority file.      </p>     </dd>             <dt id="eventsslcontext.constants.opt-ca-path">      <strong><span>EventSslContext::OPT_CA_PATH</span></strong>     </dt>     <dd>      <p class="para">       Key for an item of the options&#039; array used in       <span class="methodname" style="color:#CC7832">{@link EventSslContext::__construct()}</span>       . Represents path where the certificate authority file should be       searched for.      </p>     </dd>             <dt id="eventsslcontext.constants.opt-allow-self-signed">      <strong><span>EventSslContext::OPT_ALLOW_SELF_SIGNED</span></strong>     </dt>     <dd>      <p class="para">       Key for an item of the options&#039; array used in       <span class="methodname" style="color:#CC7832">{@link EventSslContext::__construct()}</span>       . Represents option that allows self-signed certificates.      </p>     </dd>             <dt id="eventsslcontext.constants.opt-verify-peer">      <strong><span>EventSslContext::OPT_VERIFY_PEER</span></strong>     </dt>     <dd>      <p class="para">       Key for an item of the options&#039; array used in       <span class="methodname" style="color:#CC7832">{@link EventSslContext::__construct()}</span>       . Represents option that tells Event to verify peer.      </p>     </dd>             <dt id="eventsslcontext.constants.opt-verify-depth">      <strong><span>EventSslContext::OPT_VERIFY_DEPTH</span></strong>     </dt>     <dd>      <p class="para">       Key for an item of the options&#039; array used in       <span class="methodname" style="color:#CC7832">{@link EventSslContext::__construct()}</span>       . Represents maximum depth for the certificate chain verification that       shall be allowed for the SSL context.      </p>     </dd>             <dt id="eventsslcontext.constants.opt-ciphers">      <strong><span>EventSslContext::OPT_CIPHERS</span></strong>     </dt>     <dd>      <p class="para">       Key for an item of the options&#039; array used in       <span class="methodname" style="color:#CC7832">{@link EventSslContext::__construct()}</span>       . Represents the cipher list for the SSL context.      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EventSslContext::__construct} — Constructs an OpenSSL context for use with Event classes</li></ul></div>
*/
final class EventSslContext
{
    public const SSLv2_CLIENT_METHOD = 1;
    public const SSLv3_CLIENT_METHOD = 2;
    public const SSLv23_CLIENT_METHOD = 3;
    public const TLS_CLIENT_METHOD = 4;
    public const SSLv2_SERVER_METHOD = 5;
    public const SSLv3_SERVER_METHOD = 6;
    public const SSLv23_SERVER_METHOD = 7;
    public const TLS_SERVER_METHOD = 8;
    public const TLSv11_CLIENT_METHOD = 9;
    public const TLSv11_SERVER_METHOD = 10;
    public const TLSv12_CLIENT_METHOD = 11;
    public const TLSv12_SERVER_METHOD = 12;
    public const OPT_LOCAL_CERT = 1;
    public const OPT_LOCAL_PK = 2;
    public const OPT_PASSPHRASE = 3;
    public const OPT_CA_FILE = 4;
    public const OPT_CA_PATH = 5;
    public const OPT_ALLOW_SELF_SIGNED = 6;
    public const OPT_VERIFY_PEER = 7;
    public const OPT_VERIFY_DEPTH = 8;
    public const OPT_CIPHERS = 9;
    public const OPT_NO_SSLv2 = 10;
    public const OPT_NO_SSLv3 = 11;
    public const OPT_NO_TLSv1 = 12;
    public const OPT_NO_TLSv1_1 = 13;
    public const OPT_NO_TLSv1_2 = 14;
    public const OPT_CIPHER_SERVER_PREFERENCE = 15;
    public const OPT_REQUIRE_CLIENT_CERT = 16;
    public const OPT_VERIFY_CLIENT_ONCE = 17;

    /**
     * @var string
     */
    public $local_cert;

    /**
     * @var string
     */
    public $local_pk;

    /**
     * __construct.
     * Constructs an OpenSSL context for use with Event classes.
     *
     * @param int $method
     * @param array $options
     *
     * @see https://secure.php.net/manual/en/eventsslcontext.construct.php
     */
    #[Pure]
    public function __construct(int $method, array $options) {}

    /**
     * Sets minimum supported protocol version for the SSL context
     * @param int $proto
     * @return bool
     */
    public function setMinProtoVersion(int $proto): bool {}

    /**
     * Sets max supported protocol version for the SSL context.
     * @param int $proto
     * @return bool
     */
    public function setMaxProtoVersion(int $proto): bool {}
}

// The EventUtil class
/**
*<div id="class.eventutil" class="reference"> <h1 class="title">The EventUtil class</h1>  <div class="partintro"><p class="verinfo">(PECL event &gt;= 1.5.0)</p>  <div class="section" id="eventutil.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">EventUtil</strong></span>    is a singleton with supplimentary methods and constants.   </p>  </div>  <div class="section" id="eventutil.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">final</span>      <span class="modifier">class</span> <strong class="classname">EventUtil</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.af-inet"><var class="varname">AF_INET</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.af-inet6"><var class="varname">AF_INET6</var></a></var><span class="initializer"> = 10</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.af-unspec"><var class="varname">AF_UNSPEC</var></a></var><span class="initializer"> = 0</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.libevent-version-number"><var class="varname">LIBEVENT_VERSION_NUMBER</var></a></var><span class="initializer"> = 33559808</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.so-debug"><var class="varname">SO_DEBUG</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.so-reuseaddr"><var class="varname">SO_REUSEADDR</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.so-keepalive"><var class="varname">SO_KEEPALIVE</var></a></var><span class="initializer"> = 9</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.so-dontroute"><var class="varname">SO_DONTROUTE</var></a></var><span class="initializer"> = 5</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.so-linger"><var class="varname">SO_LINGER</var></a></var><span class="initializer"> = 13</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.so-broadcast"><var class="varname">SO_BROADCAST</var></a></var><span class="initializer"> = 6</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.so-oobinline"><var class="varname">SO_OOBINLINE</var></a></var><span class="initializer"> = 10</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.so-sndbuf"><var class="varname">SO_SNDBUF</var></a></var><span class="initializer"> = 7</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.so-rcvbuf"><var class="varname">SO_RCVBUF</var></a></var><span class="initializer"> = 8</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.so-sndlowat"><var class="varname">SO_SNDLOWAT</var></a></var><span class="initializer"> = 19</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.so-rcvlowat"><var class="varname">SO_RCVLOWAT</var></a></var><span class="initializer"> = 18</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.so-sndtimeo"><var class="varname">SO_SNDTIMEO</var></a></var><span class="initializer"> = 21</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.so-rcvtimeo"><var class="varname">SO_RCVTIMEO</var></a></var><span class="initializer"> = 20</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.so-type"><var class="varname">SO_TYPE</var></a></var><span class="initializer"> = 3</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.so-error"><var class="varname">SO_ERROR</var></a></var><span class="initializer"> = 4</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.sol-socket"><var class="varname">SOL_SOCKET</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.sol-tcp"><var class="varname">SOL_TCP</var></a></var><span class="initializer"> = 6</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.sol-udp"><var class="varname">SOL_UDP</var></a></var><span class="initializer"> = 17</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.ipproto-ip"><var class="varname">IPPROTO_IP</var></a></var><span class="initializer"> = 0</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants.ipproto-ipv6"><var class="varname">IPPROTO_IPV6</var></a></var><span class="initializer"> = 41</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">abstract</span>   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventutil.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>()</div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventutil.getlastsocketerrno.php" class="methodname" style="color:#CC7832">getLastSocketErrno</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$socket</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventutil.getlastsocketerror.php" class="methodname" style="color:#CC7832">getLastSocketError</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$socket</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventutil.getsocketfd.php" class="methodname" style="color:#CC7832">getSocketFd</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$socket</span>   </span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventutil.getsocketname.php" class="methodname" style="color:#CC7832">getSocketName</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$socket</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">&$address</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">&$port</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventutil.setsocketoption.php" class="methodname" style="color:#CC7832">setSocketOption</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$socket</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$level</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$optname</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$optval</span>   </span><br>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/eventutil.sslrandpoll.php" class="methodname" style="color:#CC7832">sslRandPoll</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>  <div class="section" id="eventutil.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="eventutil.constants.af-inet">      <strong><span>EventUtil::AF_INET</span></strong>     </dt>     <dd>      <p class="para">       IPv4 address family      </p>     </dd>             <dt id="eventutil.constants.af-inet6">      <strong><span>EventUtil::AF_INET6</span></strong>     </dt>     <dd>      <p class="para">       IPv6 address family      </p>     </dd>             <dt id="eventutil.constants.af-unspec">      <strong><span>EventUtil::AF_UNSPEC</span></strong>     </dt>     <dd>      <p class="para">       Unspecified IP address family      </p>     </dd>             <dt id="eventutil.constants.so-debug">      <strong><span>EventUtil::SO_DEBUG</span></strong>     </dt>     <dd>      <p class="para">       Socket option. Enable socket debugging. Only allowed for processes with       the       <span>CAP_NET_ADMIN</span>       capability or an effective user ID of       <strong><span>0</span></strong>       . (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.so-reuseaddr">      <strong><span>EventUtil::SO_REUSEADDR</span></strong>     </dt>     <dd>      <p class="para">       Socket option. Indicates that the rules used in validating addresses       supplied in a       <span>bind(2)</span>       call should allow reuse of local addresses. See the       <span>socket(7)</span>       manual page. (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.so-keepalive">      <strong><span>EventUtil::SO_KEEPALIVE</span></strong>     </dt>     <dd>      <p class="para">       Socket option. Enable sending of keep-alive messages on       connection-oriented sockets. Expects an integer boolean flag. See the       <span>socket(7)</span>       manual page. (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.so-dontroute">      <strong><span>EventUtil::SO_DONTROUTE</span></strong>     </dt>     <dd>      <p class="para">       Socket option. See the       <span>socket(7)</span>       manual page. (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.so-linger">      <strong><span>EventUtil::SO_LINGER</span></strong>     </dt>     <dd>      <p class="para">       Socket option. When enabled, a       <span>close(2)</span>       or       <span>shutdown(2)</span>       will not return until all queued messages for the socket have been       successfully sent or the linger timeout has been reached. Otherwise,       the call returns immediately and the closing is done in the background.       See the       <span>socket(7)</span>       manual page. (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.so-broadcast">      <strong><span>EventUtil::SO_BROADCAST</span></strong>     </dt>     <dd>      <p class="para">       Socket option. Reports whether transmission of broadcast messages is       supported. See the       <span>socket(7)</span>       manual page. (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.so-oobinline">      <strong><span>EventUtil::SO_OOBINLINE</span></strong>     </dt>     <dd>      <p class="para">       Socket option. See the       <span>socket(7)</span>       manual page. (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.so-sndbuf">      <strong><span>EventUtil::SO_SNDBUF</span></strong>     </dt>     <dd>      <p class="para">       Socket option. See the       <span>socket(7)</span>       manual page. (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.so-rcvbuf">      <strong><span>EventUtil::SO_RCVBUF</span></strong>     </dt>     <dd>      <p class="para">       Socket option. See the       <span>socket(7)</span>       manual page. (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.so-sndlowat">      <strong><span>EventUtil::SO_SNDLOWAT</span></strong>     </dt>     <dd>      <p class="para">       Socket option. See the       <span>socket(7)</span>       manual page. (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.so-rcvlowat">      <strong><span>EventUtil::SO_RCVLOWAT</span></strong>     </dt>     <dd>      <p class="para">       Socket option. See the       <span>socket(7)</span>       manual page. (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.so-sndtimeo">      <strong><span>EventUtil::SO_SNDTIMEO</span></strong>     </dt>     <dd>      <p class="para">       Socket option. See the       <span>socket(7)</span>       manual page. (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.so-rcvtimeo">      <strong><span>EventUtil::SO_RCVTIMEO</span></strong>     </dt>     <dd>      <p class="para">       Socket option. See the       <span>socket(7)</span>       manual page. (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.so-type">      <strong><span>EventUtil::SO_TYPE</span></strong>     </dt>     <dd>      <p class="para">       Socket option. See the       <span>socket(7)</span>       manual page. (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.so-error">      <strong><span>EventUtil::SO_ERROR</span></strong>     </dt>     <dd>      <p class="para">       Socket option. See the       <span>socket(7)</span>       manual page. (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.sol-socket">      <strong><span>EventUtil::SOL_SOCKET</span></strong>     </dt>     <dd>      <p class="para">       Socket option level. See the       <span>socket(7)</span>       manual page. (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.sol-tcp">      <strong><span>EventUtil::SOL_TCP</span></strong>     </dt>     <dd>      <p class="para">       Socket option level. See the       <span>socket(7)</span>       manual page. (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.sol-udp">      <strong><span>EventUtil::SOL_UDP</span></strong>     </dt>     <dd>      <p class="para">       Socket option level. See the       <span>socket(7)</span>       manual page. (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.ipproto-ip">      <strong><span>EventUtil::IPPROTO_IP</span></strong>     </dt>     <dd>      <p class="para">       See the       <span>socket(7)</span>       manual page. (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.ipproto-ipv6">      <strong><span>EventUtil::IPPROTO_IPV6</span></strong>     </dt>     <dd>      <p class="para">       See the       <span>socket(7)</span>       manual page. (Added in event-1.6.0.)      </p>     </dd>             <dt id="eventutil.constants.libevent-version-number">      <strong><span>EventUtil::LIBEVENT_VERSION_NUMBER</span></strong>     </dt>     <dd>      <p class="para">       Libevent&#039; version number at the time when Event extension had been       compiled with the library.      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EventUtil::__construct} — The abstract constructor</li><li>{@link EventUtil::getLastSocketErrno} — Returns the most recent socket error number</li><li>{@link EventUtil::getLastSocketError} — Returns the most recent socket error</li><li>{@link EventUtil::getSocketFd} — Returns numeric file descriptor of a socket, or stream</li><li>{@link EventUtil::getSocketName} — Retreives the current address to which the  socket is bound</li><li>{@link EventUtil::setSocketOption} — Sets socket options</li><li>{@link EventUtil::sslRandPoll} — Generates entropy by means of OpenSSL's RAND_poll()</li></ul></div>
*/
final class EventUtil
{
    public const AF_INET = 2;
    public const AF_INET6 = 10;
    public const AF_UNIX = 1;
    public const AF_UNSPEC = 0;
    public const LIBEVENT_VERSION_NUMBER = 33559808;
    public const SO_DEBUG = 1;
    public const SO_REUSEADDR = 2;
    public const SO_KEEPALIVE = 9;
    public const SO_DONTROUTE = 5;
    public const SO_LINGER = 13;
    public const SO_BROADCAST = 6;
    public const SO_OOBINLINE = 10;
    public const SO_SNDBUF = 7;
    public const SO_RCVBUF = 8;
    public const SO_SNDLOWAT = 19;
    public const SO_RCVLOWAT = 18;
    public const SO_SNDTIMEO = 21;
    public const SO_RCVTIMEO = 20;
    public const SO_TYPE = 3;
    public const SO_ERROR = 4;
    public const SOL_SOCKET = 1;
    public const SOL_TCP = 6;
    public const SOL_UDP = 17;
    public const SOCK_RAW = 3;
    public const TCP_NODELAY = 1;
    public const IPPROTO_IP = 0;
    public const IPPROTO_IPV6 = 41;

    /**
     * __construct.
     * The abstract constructor.
     *
     * @see https://secure.php.net/manual/en/eventutil.construct.php
     */
    abstract public function __construct();

    /**
     * @param mixed $socket
     * @return resource
     */
    public function createSocket(mixed $socket) {}

/**
*<div id="eventutil.getlastsocketerrno" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventUtil::getLastSocketErrno</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventUtil::getLastSocketErrno</span> &mdash; <span class="dc-title">Returns the most recent socket error number</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventutil.getlastsocketerrno-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EventUtil::getLastSocketErrno</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$socket</span>    <span class="initializer"> = <strong><span>null</span></strong></span>   </span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Returns the most recent socket error number(   <span>errno</span>   ).  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventutil.getlastsocketerrno-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">socket</span>    </dt>    <dd>     <span>      Socket resource, stream or a file descriptor of a socket.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventutil.getlastsocketerrno-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the most recent socket error number(   <span>errno</span>   ).  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventutil.getlastsocketerrno-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventUtil::getLastSocketError()} - Returns the most recent socket error</span>   </li>  </ul> </div></div>
     * @return int|false*/
    public static function getLastSocketErrno($socket = null): int|false {}

/**
*<div id="eventutil.getlastsocketerror" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventUtil::getLastSocketError</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventUtil::getLastSocketError</span> &mdash; <span class="dc-title">Returns the most recent socket error</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventutil.getlastsocketerror-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EventUtil::getLastSocketError</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$socket</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Returns the most recent socket error.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventutil.getlastsocketerror-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">socket</span>    </dt>    <dd>     <span>      Socket resource, stream or a file descriptor of a socket.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventutil.getlastsocketerror-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the most recent socket error.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventutil.getlastsocketerror-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link EventUtil::getLastSocketErrno()} - Returns the most recent socket error number</span>   </li>  </ul> </div></div>
     * @return string|false*/
    public static function getLastSocketError(mixed $socket): string|false {}

/**
*<div id="eventutil.getsocketfd" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventUtil::getSocketFd</h1>  <p class="verinfo">(PECL event &gt;= 1.7.0)</p><p class="refpurpose"><span class="refname">EventUtil::getSocketFd</span> &mdash; <span class="dc-title">Returns numeric file descriptor of a socket, or stream</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventutil.getsocketfd-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EventUtil::getSocketFd</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$socket</span>   </span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Returns numeric file descriptor of a socket or stream specified by   <span class="parameter" style="color:#3A95FF">socket</span>   argument just like the   <span>Event</span>   extension does it internally for all methods accepting socket resource or   stream.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventutil.getsocketfd-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">socket</span>    </dt>    <dd>     <span>      Socket resource or stream.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventutil.getsocketfd-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns numeric file descriptor of a socket, or stream.   <span class="methodname" style="color:#CC7832"><strong>EventUtil::getSocketFd()</strong></span>   returns <strong><span>false</span></strong> in case if it is whether failed to recognize the type of   the underlying file, or detected that the file descriptor associated with   <span class="parameter" style="color:#3A95FF">socket</span>   is not valid.  </p> </div></div>
     * @return int*/
    public static function getSocketFd(mixed $socket): int {}

/**
*<div id="eventutil.getsocketname" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventUtil::getSocketName</h1>  <p class="verinfo">(PECL event &gt;= 1.5.0)</p><p class="refpurpose"><span class="refname">EventUtil::getSocketName</span> &mdash; <span class="dc-title">Retreives the current address to which the  socket is bound</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventutil.getsocketname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EventUtil::getSocketName</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$socket</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766">string</span>     <span class="parameter" style="color:#3A95FF">&$address</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">&$port</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Retreives the current address to which the   <span class="parameter" style="color:#3A95FF">socket</span>   is bound.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventutil.getsocketname-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">socket</span>    </dt>    <dd>     <span>      Socket resource, stream or a file descriptor of a socket.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">address</span>    </dt>    <dd>     <p class="para">      Output parameter. IP-address, or the UNIX domain socket path depending      on the socket address family.     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">port</span>    </dt>    <dd>     <p class="para">      Output parameter. The port the socket is bound to. Has no meaning for      UNIX domain sockets.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventutil.getsocketname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool*/
    public static function getSocketName(mixed $socket, string &$address, int &$port): bool {}

/**
*<div id="eventutil.setsocketoption" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventUtil::setSocketOption</h1>  <p class="verinfo">(PECL event &gt;= 1.6.0)</p><p class="refpurpose"><span class="refname">EventUtil::setSocketOption</span> &mdash; <span class="dc-title">Sets socket options</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventutil.setsocketoption-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EventUtil::setSocketOption</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$socket</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$level</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$optname</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$optval</span>   </span><br>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Sets socket options.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventutil.setsocketoption-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">socket</span>    </dt>    <dd>     <span>      Socket resource, stream, or numeric file descriptor associated with the      socket.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">level</span>    </dt>    <dd>     <p class="para">      One of      <span>EventUtil::SOL_*</span>      constants. Specifies the protocol level at which the option resides. For      example, to retrieve options at the socket level, a      <span class="parameter" style="color:#3A95FF">level</span>      parameter of      <strong><span>EventUtil::SOL_SOCKET</span></strong>      would be used. Other levels, such as TCP, can be used by specifying the      protocol number of that level. Protocol numbers can be found by using      the      <span class="function">{@link getprotobyname()}</span>      function. See      <a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants" class="link">EventUtil constants</a>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">optname</span>    </dt>    <dd>     <p class="para">      Option name(type). Has the same meaning as corresponding parameter of      <span class="function">{@link socket_get_option()}</span>      function. See      <a href="https://www.php.net/manual/zh/class.eventutil.php#eventutil.constants" class="link">EventUtil constants</a>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">optval</span>    </dt>    <dd>     <p class="para">      Accepts the same values as      <span class="parameter" style="color:#3A95FF">optval</span>      parameter of the      <span class="function">{@link socket_get_option()}</span>      function.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventutil.setsocketoption-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-eventutil.setsocketoption-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="function">{@link socket_get_option()} - 获取套接字的套接字选项</span>   </li>   <li class="member">    <span class="function">{@link socket_set_option()} - 为套接字设置套接字选项</span>   </li>  </ul> </div></div>
     * @return bool*/
    public static function setSocketOption(mixed $socket, int $level, int $optname, int|array $optval): bool {}

/**
*<div id="eventutil.sslrandpoll" class="refentry"> <div class="refnamediv">  <h1 class="refname">EventUtil::sslRandPoll</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">EventUtil::sslRandPoll</span> &mdash; <span class="dc-title">Generates entropy by means of OpenSSL&#039;s RAND_poll()</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-eventutil.sslrandpoll-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><strong>EventUtil::sslRandPoll</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Generates entropy by means of OpenSSL&#039;s   <span>RAND_poll()</span>   (see the system manual).  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-eventutil.sslrandpoll-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-eventutil.sslrandpoll-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public static function sslRandPoll(): bool {}
}
