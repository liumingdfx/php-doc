<?php
/**
*<div id="class.zmq" class="reference"> <h1 class="title">The ZMQ class</h1>  <div class="partintro"><p class="verinfo">(PECL zmq &gt;= 0.5.0)</p>  <div class="section" id="zmq.intro">   <h2 class="title">简介</h2>   <p class="para">   </p>  </div>  <div class="section" id="zmq.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">ZMQ</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.socket-pair"><var class="varname">SOCKET_PAIR</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.socket-pub"><var class="varname">SOCKET_PUB</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.socket-sub"><var class="varname">SOCKET_SUB</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.socket-req"><var class="varname">SOCKET_REQ</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.socket-rep"><var class="varname">SOCKET_REP</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.socket-xreq"><var class="varname">SOCKET_XREQ</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.socket-xrep"><var class="varname">SOCKET_XREP</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.socket-push"><var class="varname">SOCKET_PUSH</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.socket-pull"><var class="varname">SOCKET_PULL</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.socket-router"><var class="varname">SOCKET_ROUTER</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.socket-dealer"><var class="varname">SOCKET_DEALER</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.socket-xpub"><var class="varname">SOCKET_XPUB</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.socket-xsub"><var class="varname">SOCKET_XSUB</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.socket-stream"><var class="varname">SOCKET_STREAM</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-hwm"><var class="varname">SOCKOPT_HWM</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-sndhwm"><var class="varname">SOCKOPT_SNDHWM</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-rcvhwm"><var class="varname">SOCKOPT_RCVHWM</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-affinity"><var class="varname">SOCKOPT_AFFINITY</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-identity"><var class="varname">SOCKOPT_IDENTITY</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-subscribe"><var class="varname">SOCKOPT_SUBSCRIBE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-unsubscribe"><var class="varname">SOCKOPT_UNSUBSCRIBE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-rate"><var class="varname">SOCKOPT_RATE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-recovery-ivl"><var class="varname">SOCKOPT_RECOVERY_IVL</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-reconnect-ivl"><var class="varname">SOCKOPT_RECONNECT_IVL</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-reconnect-ivl-max"><var class="varname">SOCKOPT_RECONNECT_IVL_MAX</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-mcast-loop"><var class="varname">SOCKOPT_MCAST_LOOP</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-sndbuf"><var class="varname">SOCKOPT_SNDBUF</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-rcvbuf"><var class="varname">SOCKOPT_RCVBUF</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-rcvmore"><var class="varname">SOCKOPT_RCVMORE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-type"><var class="varname">SOCKOPT_TYPE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-linger"><var class="varname">SOCKOPT_LINGER</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-backlog"><var class="varname">SOCKOPT_BACKLOG</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-maxmsgsize"><var class="varname">SOCKOPT_MAXMSGSIZE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-sndtimeo"><var class="varname">SOCKOPT_SNDTIMEO</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-rcvtimeo"><var class="varname">SOCKOPT_RCVTIMEO</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-ipv4only"><var class="varname">SOCKOPT_IPV4ONLY</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-last-endpoint"><var class="varname">SOCKOPT_LAST_ENDPOINT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-tcp-keepalive-idle"><var class="varname">SOCKOPT_TCP_KEEPALIVE_IDLE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-tcp-keepalive-cnt"><var class="varname">SOCKOPT_TCP_KEEPALIVE_CNT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-tcp-keepalive-intvl"><var class="varname">SOCKOPT_TCP_KEEPALIVE_INTVL</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-tcp-accept-filter"><var class="varname">SOCKOPT_TCP_ACCEPT_FILTER</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-tcp-accept-filter"><var class="varname">SOCKOPT_TCP_ACCEPT_FILTER</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-delay-attach-on-connect"><var class="varname">SOCKOPT_DELAY_ATTACH_ON_CONNECT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-xpub-verbose"><var class="varname">SOCKOPT_XPUB_VERBOSE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-router-raw"><var class="varname">SOCKOPT_ROUTER_RAW</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.sockopt-ipv6"><var class="varname">SOCKOPT_IPV6</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.ctxopt-max-sockets"><var class="varname">CTXOPT_MAX_SOCKETS</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.poll-in"><var class="varname">POLL_IN</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.poll-out"><var class="varname">POLL_OUT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.mode-noblock"><var class="varname">MODE_NOBLOCK</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.mode-dontwait"><var class="varname">MODE_DONTWAIT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.mode-sndmore"><var class="varname">MODE_SNDMORE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.err-internal"><var class="varname">ERR_INTERNAL</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.err-eagain"><var class="varname">ERR_EAGAIN</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.err-enotsup"><var class="varname">ERR_ENOTSUP</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.err-efsm"><var class="varname">ERR_EFSM</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants.err-eterm"><var class="varname">ERR_ETERM</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">private</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmq.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>()</div>   }</div>  </div>  <div class="section" id="zmq.constants">   <h2 class="title">预定义常量</h2>   <div class="section" id="zmq.constants.types">    <h2 class="title">ZMQ Constant Types</h2>    <dl>           <dt id="zmq.constants.socket-pair"><strong><span>ZMQ::SOCKET_PAIR</span></strong></dt>      <dd>       <p class="para">Exclusive pair pattern</p>      </dd>                <dt id="zmq.constants.socket-pub"><strong><span>ZMQ::SOCKET_PUB</span></strong></dt>      <dd>       <p class="para">Publisher socket</p>      </dd>                <dt id="zmq.constants.socket-sub"><strong><span>ZMQ::SOCKET_SUB</span></strong></dt>      <dd>       <p class="para">Subscriber socket</p>      </dd>                <dt id="zmq.constants.socket-req"><strong><span>ZMQ::SOCKET_REQ</span></strong></dt>      <dd>       <p class="para">Request socket</p>      </dd>                <dt id="zmq.constants.socket-rep"><strong><span>ZMQ::SOCKET_REP</span></strong></dt>      <dd>       <p class="para">Reply socket</p>      </dd>                <dt id="zmq.constants.socket-xreq"><strong><span>ZMQ::SOCKET_XREQ</span></strong></dt>      <dd>       <p class="para">Alias for SOCKET_DEALER</p>      </dd>                <dt id="zmq.constants.socket-xrep"><strong><span>ZMQ::SOCKET_XREP</span></strong></dt>      <dd>       <p class="para">Alias for SOCKET_ROUTER</p>      </dd>                <dt id="zmq.constants.socket-push"><strong><span>ZMQ::SOCKET_PUSH</span></strong></dt>      <dd>       <p class="para">Pipeline upstream push socket</p>      </dd>                <dt id="zmq.constants.socket-pull"><strong><span>ZMQ::SOCKET_PULL</span></strong></dt>      <dd>       <p class="para">Pipeline downstream pull socket</p>      </dd>                <dt id="zmq.constants.socket-router"><strong><span>ZMQ::SOCKET_ROUTER</span></strong></dt>      <dd>       <p class="para">Extended REP socket that can route replies to requesters</p>      </dd>                <dt id="zmq.constants.socket-dealer"><strong><span>ZMQ::SOCKET_DEALER</span></strong></dt>      <dd>       <p class="para">Extended REQ socket that load balances to all connected peers</p>      </dd>                <dt id="zmq.constants.socket-xpub"><strong><span>ZMQ::SOCKET_XPUB</span></strong></dt>      <dd>       <p class="para">Similar to SOCKET_PUB, except you can receive subscriptions as messages.             The subscription message is 0 (unsubscribe) or 1 (subscribe) followed by the topic.</p>      </dd>                <dt id="zmq.constants.socket-xsub"><strong><span>ZMQ::SOCKET_XSUB</span></strong></dt>      <dd>       <p class="para">Similar to SOCKET_SUB, except you can send subscriptions as messages. See SOCKET_XPUB for format.</p>      </dd>                <dt id="zmq.constants.socket-stream"><strong><span>ZMQ::SOCKET_STREAM</span></strong></dt>      <dd>       <p class="para">Used to send and receive TCP data from a non-ØMQ peer. Available if compiled against ZeroMQ 4.x or higher (Value: <span class="type" style="color:#EAB766">int</span>).</p>      </dd>                <dt id="zmq.constants.sockopt-hwm"><strong><span>ZMQ::SOCKOPT_HWM</span></strong></dt>      <dd>       <p class="para">The high water mark for inbound and outbound messages is a hard limit on the maximum number of outstanding messages ØMQ shall queue in memory for any single peer that the specified socket is communicating with. Setting this option on a socket will only affect connections made after the option has been set. On ZeroMQ 3.x this is a wrapper for setting both SNDHWM and RCVHWM. (Value: <span class="type" style="color:#EAB766">int</span>).</p>      </dd>                <dt id="zmq.constants.sockopt-sndhwm"><strong><span>ZMQ::SOCKOPT_SNDHWM</span></strong></dt>      <dd>       <p class="para">The ZMQ_SNDHWM option shall set the high water mark for outbound messages on the specified socket. Available if compiled against ZeroMQ 3.x or higher (Value: <span class="type" style="color:#EAB766">int</span>).</p>      </dd>                <dt id="zmq.constants.sockopt-rcvhwm"><strong><span>ZMQ::SOCKOPT_RCVHWM</span></strong></dt>      <dd>       <p class="para">The SOCKOPT_RCVHWM option shall set the high water mark for inbound messages on the specified socket. Available if compiled against ZeroMQ 3.x or higher (Value: <span class="type" style="color:#EAB766">int</span>).</p>      </dd>                <dt id="zmq.constants.sockopt-affinity"><strong><span>ZMQ::SOCKOPT_AFFINITY</span></strong></dt>      <dd>       <p class="para"> Set I/O thread affinity (Value: <span class="type" style="color:#EAB766">int</span>)</p>      </dd>                <dt id="zmq.constants.sockopt-identity"><strong><span>ZMQ::SOCKOPT_IDENTITY</span></strong></dt>      <dd>       <p class="para">Set socket identity (Value: <span class="type" style="color:#EAB766">string</span>)</p>      </dd>                <dt id="zmq.constants.sockopt-subscribe"><strong><span>ZMQ::SOCKOPT_SUBSCRIBE</span></strong></dt>      <dd>       <p class="para">Establish message filter. Valid for subscriber socket (Value: <span class="type" style="color:#EAB766">string</span>)</p>      </dd>                <dt id="zmq.constants.sockopt-unsubscribe"><strong><span>ZMQ::SOCKOPT_UNSUBSCRIBE</span></strong></dt>      <dd>       <p class="para">Remove message filter. Valid for subscriber socket (Value: <span class="type" style="color:#EAB766">string</span>)</p>      </dd>                <dt id="zmq.constants.sockopt-rate"><strong><span>ZMQ::SOCKOPT_RATE</span></strong></dt>      <dd>       <p class="para">Set rate for multicast sockets (pgm) (Value: <span class="type" style="color:#EAB766">int</span> &gt;= 0)</p>      </dd>                <dt id="zmq.constants.sockopt-recovery-ivl"><strong><span>ZMQ::SOCKOPT_RECOVERY_IVL</span></strong></dt>      <dd>       <p class="para"> Set multicast recovery interval (Value: <span class="type" style="color:#EAB766">int</span> &gt;= 0)</p>      </dd>                <dt id="zmq.constants.sockopt-reconnect-ivl"><strong><span>ZMQ::SOCKOPT_RECONNECT_IVL</span></strong></dt>      <dd>       <p class="para"> Set the initial reconnection interval (Value: <span class="type" style="color:#EAB766">int</span> &gt;= 0)</p>      </dd>                <dt id="zmq.constants.sockopt-reconnect-ivl-max"><strong><span>ZMQ::SOCKOPT_RECONNECT_IVL_MAX</span></strong></dt>      <dd>       <p class="para"> Set the max reconnection interval (Value: <span class="type" style="color:#EAB766">int</span> &gt;= 0)</p>      </dd>                <dt id="zmq.constants.sockopt-mcast-loop"><strong><span>ZMQ::SOCKOPT_MCAST_LOOP</span></strong></dt>      <dd>       <p class="para"> Control multicast loopback (Value: <span class="type" style="color:#EAB766">int</span> &gt;= 0)</p>      </dd>                <dt id="zmq.constants.sockopt-sndbuf"><strong><span>ZMQ::SOCKOPT_SNDBUF</span></strong></dt>      <dd>       <p class="para">Set kernel transmit buffer size (Value: <span class="type" style="color:#EAB766">int</span> &gt;= 0)</p>      </dd>                <dt id="zmq.constants.sockopt-rcvbuf"><strong><span>ZMQ::SOCKOPT_RCVBUF</span></strong></dt>      <dd>       <p class="para"> Set kernel receive buffer size (Value: <span class="type" style="color:#EAB766">int</span> &gt;= 0)</p>      </dd>                <dt id="zmq.constants.sockopt-rcvmore"><strong><span>ZMQ::SOCKOPT_RCVMORE</span></strong></dt>      <dd>       <p class="para">Receive multi-part messages (Value: <span class="type" style="color:#EAB766">int</span>)</p>      </dd>                <dt id="zmq.constants.sockopt-type"><strong><span>ZMQ::SOCKOPT_TYPE</span></strong></dt>      <dd>       <p class="para">Get the socket type. Valid for getSockOpt (Value: <span class="type" style="color:#EAB766">int</span>)</p>      </dd>                <dt id="zmq.constants.sockopt-linger"><strong><span>ZMQ::SOCKOPT_LINGER</span></strong></dt>      <dd>       <p class="para">The linger value of the socket. Specifies how long the socket blocks             trying flush messages after it has been closed (Value: <span class="type" style="color:#EAB766">int</span>)</p>      </dd>                <dt id="zmq.constants.sockopt-backlog"><strong><span>ZMQ::SOCKOPT_BACKLOG</span></strong></dt>      <dd>       <p class="para">The SOCKOPT_BACKLOG option shall set the maximum length of the queue of outstanding peer connections for the specified socket; this only applies to connection-oriented transports. (Value: <span class="type" style="color:#EAB766">int</span>)</p>      </dd>                <dt id="zmq.constants.sockopt-maxmsgsize"><strong><span>ZMQ::SOCKOPT_MAXMSGSIZE</span></strong></dt>      <dd>       <p class="para">Limits the maximum size of the inbound message. Value -1 means no limit. Available if compiled against ZeroMQ 3.x or higher (Value: <span class="type" style="color:#EAB766">int</span>)</p>      </dd>                <dt id="zmq.constants.sockopt-sndtimeo"><strong><span>ZMQ::SOCKOPT_SNDTIMEO</span></strong></dt>      <dd>       <p class="para">Sets the timeout for send operation on the socket. Value -1 means no limit. Available if compiled against ZeroMQ 3.x or higher (Value: <span class="type" style="color:#EAB766">int</span>)</p>      </dd>                <dt id="zmq.constants.sockopt-rcvtimeo"><strong><span>ZMQ::SOCKOPT_RCVTIMEO</span></strong></dt>      <dd>       <p class="para">Sets the timeout for receive operation on the socket. Value -1 means no limit. Available if compiled against ZeroMQ 3.x or higher (Value: <span class="type" style="color:#EAB766">int</span>)</p>      </dd>                <dt id="zmq.constants.sockopt-ipv4only"><strong><span>ZMQ::SOCKOPT_IPV4ONLY</span></strong></dt>      <dd>       <p class="para">Disable IPV6 support if 1. Available if compiled against ZeroMQ 3.x (Value: <span class="type" style="color:#EAB766">int</span>)</p>      </dd>                <dt id="zmq.constants.sockopt-last-endpoint"><strong><span>ZMQ::SOCKOPT_LAST_ENDPOINT</span></strong></dt>      <dd>       <p class="para">Retrieve the last connected endpoint - for use with * wildcard ports. Available if compiled against ZeroMQ 3.x or higher (Value: <span class="type" style="color:#EAB766">string</span>)</p>      </dd>                <dt id="zmq.constants.sockopt-tcp-keepalive-idle"><strong><span>ZMQ::SOCKOPT_TCP_KEEPALIVE_IDLE</span></strong></dt>      <dd>       <p class="para">Idle time for TCP keepalive. Available if compiled against ZeroMQ 3.x or higher (Value: <span class="type" style="color:#EAB766">int</span>)</p>      </dd>                <dt id="zmq.constants.sockopt-tcp-keepalive-cnt"><strong><span>ZMQ::SOCKOPT_TCP_KEEPALIVE_CNT</span></strong></dt>      <dd>       <p class="para">Count time for TCP keepalive. Available if compiled against ZeroMQ 3.x or higher (Value: <span class="type" style="color:#EAB766">int</span>)</p>      </dd>                <dt id="zmq.constants.sockopt-tcp-keepalive-intvl"><strong><span>ZMQ::SOCKOPT_TCP_KEEPALIVE_INTVL</span></strong></dt>      <dd>       <p class="para">Interval for TCP keepalive. Available if compiled against ZeroMQ 3.x or higher (Value: <span class="type" style="color:#EAB766">int</span>)</p>      </dd>                <dt id="zmq.constants.sockopt-delay-attach-on-connect"><strong><span>ZMQ::SOCKOPT_DELAY_ATTACH_ON_CONNECT</span></strong></dt>      <dd>       <p class="para">Set a CIDR string to match against incoming TCP connections. Available if compiled against ZeroMQ 3.x or higher (Value: <span class="type" style="color:#EAB766">string</span>)</p>      </dd>                  <dt id="zmq.constants.sockopt-tcp-accept-filter"><strong><span>ZMQ::SOCKOPT_TCP_ACCEPT_FILTER</span></strong></dt>       <dd>        <p class="para">Set a CIDR string to match against incoming TCP connections. Available if compiled against ZeroMQ 3.x or higher (Value: <span class="type" style="color:#EAB766">string</span>)</p>       </dd>                 <dt id="zmq.constants.sockopt-xpub-verbose"><strong><span>ZMQ::SOCKOPT_XPUB_VERBOSE</span></strong></dt>      <dd>       <p class="para">Set the XPUB to receive an application message on each instance of a subscription. Available if compiled against ZeroMQ 3.x or higher (Value: <span class="type" style="color:#EAB766">string</span>)</p>      </dd>                <dt id="zmq.constants.sockopt-router-raw"><strong><span>ZMQ::SOCKOPT_ROUTER_RAW</span></strong></dt>      <dd>       <p class="para">Sets the raw mode on the ROUTER, when set to 1. In raw mode when using tcp:// transport the socket will read and write without ZeroMQ framing.               Available if compiled against ZeroMQ 4.0 or higher (Value: <span class="type" style="color:#EAB766">string</span>)</p>      </dd>                <dt id="zmq.constants.sockopt-ipv6"><strong><span>ZMQ::SOCKOPT_IPV6</span></strong></dt>      <dd>       <p class="para">Enable IPV6. Available if compiled against ZeroMQ 4.0 or higher (Value: <span class="type" style="color:#EAB766">string</span>)</p>      </dd>                <dt id="zmq.constants.ctxopt-max-sockets"><strong><span>ZMQ::CTXOPT_MAX_SOCKETS</span></strong></dt>      <dd>       <p class="para">The socket limit for this context. Available if compiled against ZeroMQ 3.x or higher (Value: <span class="type" style="color:#EAB766">int</span>)</p>      </dd>                <dt id="zmq.constants.poll-in"><strong><span>ZMQ::POLL_IN</span></strong></dt>      <dd>       <p class="para">Poll for incoming data</p>      </dd>                <dt id="zmq.constants.poll-out"><strong><span>ZMQ::POLL_OUT</span></strong></dt>      <dd>       <p class="para">Poll for outgoing data</p>      </dd>                <dt id="zmq.constants.mode-noblock"><strong><span>ZMQ::MODE_NOBLOCK</span></strong></dt>      <dd>       <p class="para">Non-blocking operation. Deprecated, use ZMQ::MODE_DONTWAIT instead</p>      </dd>                <dt id="zmq.constants.mode-dontwait"><strong><span>ZMQ::MODE_DONTWAIT</span></strong></dt>      <dd>       <p class="para">Non-blocking operation</p>      </dd>                <dt id="zmq.constants.mode-sndmore"><strong><span>ZMQ::MODE_SNDMORE</span></strong></dt>      <dd>       <p class="para">Send multi-part message</p>      </dd>                <dt id="zmq.constants.device-forwarder"><strong><span>ZMQ::DEVICE_FORWARDER</span></strong></dt>      <dd>       <p class="para">Forwarder device</p>      </dd>                <dt id="zmq.constants.device-queue"><strong><span>ZMQ::DEVICE_QUEUE</span></strong></dt>      <dd>       <p class="para">Queue device</p>      </dd>                <dt id="zmq.constants.device-streamer"><strong><span>ZMQ::DEVICE_STREAMER</span></strong></dt>      <dd>       <p class="para">Streamer device</p>      </dd>                <dt id="zmq.constants.err-internal"><strong><span>ZMQ::ERR_INTERNAL</span></strong></dt>      <dd>       <p class="para">ZMQ extension internal error</p>      </dd>                <dt id="zmq.constants.err-eagain"><strong><span>ZMQ::ERR_EAGAIN</span></strong></dt>      <dd>       <p class="para">Implies that the operation would block when ZMQ::MODE_DONTWAIT is used</p>      </dd>                <dt id="zmq.constants.err-enotsup"><strong><span>ZMQ::ERR_ENOTSUP</span></strong></dt>      <dd>       <p class="para">The operation is not supported by the socket type</p>      </dd>                <dt id="zmq.constants.err-efsm"><strong><span>ZMQ::ERR_EFSM</span></strong></dt>      <dd>       <p class="para">The operation can not be executed because the socket is not in correct state</p>      </dd>                <dt id="zmq.constants.err-eterm"><strong><span>ZMQ::ERR_ETERM</span></strong></dt>      <dd>       <p class="para">The context has been terminated</p>      </dd>         </dl>   </div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ZMQ::__construct} — ZMQ constructor</li></ul></div>
*/
class ZMQ
{
    /**
     * Exclusive pair pattern
     */
    public const SOCKET_PAIR = 0;

    /**
     * Publisher socket
     */
    public const SOCKET_PUB = 1;

    /**
     * Subscriber socket
     */
    public const SOCKET_SUB = 2;

    /**
     * Request socket
     */
    public const SOCKET_REQ = 3;

    /**
     * Reply socket
     */
    public const SOCKET_REP = 4;

    /**
     * Alias for SOCKET_DEALER
     */
    public const SOCKET_XREQ = 5;

    /**
     * Alias for SOCKET_ROUTER
     */
    public const SOCKET_XREP = 6;

    /**
     * Pipeline upstream push socket
     */
    public const SOCKET_PUSH = 8;

    /**
     * Pipeline downstream pull socket
     */
    public const SOCKET_PULL = 7;

    /**
     * Extended REP socket that can route replies to requesters
     */
    public const SOCKET_ROUTER = 6;

    /**
     * Extended REQ socket that load balances to all connected peers
     */
    public const SOCKET_DEALER = 5;

    /**
     * Similar to SOCKET_PUB, except you can receive subscriptions as messages.
     * The subscription message is 0 (unsubscribe) or 1 (subscribe) followed by the topic.
     */
    public const SOCKET_XPUB = 9;

    /**
     * Similar to SOCKET_SUB, except you can send subscriptions as messages. See SOCKET_XPUB for format.
     */
    public const SOCKET_XSUB = 10;

    /**
     * Used to send and receive TCP data from a non-ØMQ peer.
     * Available if compiled against ZeroMQ 4.x or higher.
     */
    public const SOCKET_STREAM = 11;

    /**
     * The high water mark for inbound and outbound messages is a hard
     * limit on the maximum number of outstanding messages ØMQ shall queue in memory
     * for any single peer that the specified socket is communicating with.
     * Setting this option on a socket will only affect connections made after the option has been set.
     * On ZeroMQ 3.x this is a wrapper for setting both SNDHWM and RCVHWM.
     */
    public const SOCKOPT_HWM = 1;

    /**
     * The ZMQ_SNDHWM option shall set the high water mark for outbound messages on the specified socket.
     * Available if compiled against ZeroMQ 3.x or higher.
     */
    public const SOCKOPT_SNDHWM = 23;

    /**
     * The ZMQ_SNDHWM option shall set the high water mark for inbound messages on the specified socket.
     * Available if compiled against ZeroMQ 3.x or higher.
     */
    public const SOCKOPT_RCVHWM = 24;

    /**
     * Set I/O thread affinity
     */
    public const SOCKOPT_AFFINITY = 4;

    /**
     * Set socket identity
     */
    public const SOCKOPT_IDENTITY = 5;

    /**
     * Establish message filter. Valid for subscriber socket
     */
    public const SOCKOPT_SUBSCRIBE = 6;

    /**
     * Remove message filter. Valid for subscriber socket
     */
    public const SOCKOPT_UNSUBSCRIBE = 7;

    /**
     * Set rate for multicast sockets (pgm) (Value: int >= 0)
     */
    public const SOCKOPT_RATE = 8;

    /**
     * Set multicast recovery interval (Value: int >= 0)
     */
    public const SOCKOPT_RECOVERY_IVL = 9;

    /**
     * Set the initial reconnection interval (Value: int >= 0)
     */
    public const SOCKOPT_RECONNECT_IVL = 18;

    /**
     * Set the max reconnection interval (Value: int >= 0)
     */
    public const SOCKOPT_RECONNECT_IVL_MAX = 21;

    /**
     * Control multicast loopback (Value: int >= 0)
     */
    public const SOCKOPT_MCAST_LOOP = 10;

    /**
     * Set kernel transmit buffer size (Value: int >= 0)
     */
    public const SOCKOPT_SNDBUF = 11;

    /**
     * Set kernel receive buffer size (Value: int >= 0)
     */
    public const SOCKOPT_RCVBUF = 12;

    /**
     * Receive multi-part messages
     */
    public const SOCKOPT_RCVMORE = 13;

    /**
     * Get the socket type. Valid for getSockOpt
     */
    public const SOCKOPT_TYPE = 16;

    /**
     * The linger value of the socket.
     * Specifies how long the socket blocks trying flush messages after it has been closed
     */
    public const SOCKOPT_LINGER = 17;

    /**
     * The SOCKOPT_BACKLOG option shall set the maximum length of the queue of outstanding peer connections
     * for the specified socket; this only applies to connection-oriented transports.
     */
    public const SOCKOPT_BACKLOG = 19;

    /**
     * Limits the maximum size of the inbound message. Value -1 means no limit.
     * Available if compiled against ZeroMQ 3.x or higher
     */
    public const SOCKOPT_MAXMSGSIZE = 22;

    /**
     * Sets the timeout for send operation on the socket. Value -1 means no limit.
     * Available if compiled against ZeroMQ 3.x or higher
     */
    public const SOCKOPT_SNDTIMEO = 28;

    /**
     * Sets the timeout for receive operation on the socket. Value -1 means no limit.
     * Available if compiled against ZeroMQ 3.x or higher
     */
    public const SOCKOPT_RCVTIMEO = 27;

    /**
     * Disable IPV6 support if 1.
     * Available if compiled against ZeroMQ 3.x
     */
    public const SOCKOPT_IPV4ONLY = 31;

    /**
     * Retrieve the last connected endpoint - for use with * wildcard ports.
     * Available if compiled against ZeroMQ 3.x or higher
     */
    public const SOCKOPT_LAST_ENDPOINT = 32;

    /**
     * Idle time for TCP keepalive.
     * Available if compiled against ZeroMQ 3.x or higher
     */
    public const SOCKOPT_TCP_KEEPALIVE_IDLE = 36;

    /**
     * Count time for TCP keepalive.
     * Available if compiled against ZeroMQ 3.x or higher
     */
    public const SOCKOPT_TCP_KEEPALIVE_CNT = 35;

    /**
     * Interval for TCP keepalive.
     * Available if compiled against ZeroMQ 3.x or higher
     */
    public const SOCKOPT_TCP_KEEPALIVE_INTVL = 37;

    /**
     * Set a CIDR string to match against incoming TCP connections.
     * Available if compiled against ZeroMQ 3.x or higher
     */
    public const SOCKOPT_DELAY_ATTACH_ON_CONNECT = 39;

    /**
     * Set a CIDR string to match against incoming TCP connections.
     * Available if compiled against ZeroMQ 3.x or higher
     */
    public const SOCKOPT_TCP_ACCEPT_FILTER = 38;

    /**
     * Set the XPUB to receive an application message on each instance of a subscription.
     * Available if compiled against ZeroMQ 3.x or higher
     */
    public const SOCKOPT_XPUB_VERBOSE = 40;

    /**
     * Sets the raw mode on the ROUTER, when set to 1.
     * In raw mode when using tcp:// transport the socket will read and write without ZeroMQ framing.
     * Available if compiled against ZeroMQ 4.0 or higher
     */
    public const SOCKOPT_ROUTER_RAW = 41;

    /**
     * Enable IPV6.
     * Available if compiled against ZeroMQ 4.0 or higher
     */
    public const SOCKOPT_IPV6 = 42;

    /**
     * The socket limit for this context.
     * Available if compiled against ZeroMQ 3.x or higher
     */
    public const CTXOPT_MAX_SOCKETS = 2;

    /**
     * Poll for incoming data
     */
    public const POLL_IN = 1;

    /**
     * Poll for outgoing data
     */
    public const POLL_OUT = 2;

    /**
     * Non-blocking operation.
     * @deprecated use ZMQ::MODE_DONTWAIT instead
     */
    public const MODE_NOBLOCK = 1;

    /**
     * Non-blocking operation
     */
    public const MODE_DONTWAIT = 1;

    /**
     * Send multi-part message
     */
    public const MODE_SNDMORE = 2;

    /**
     * Forwarder device
     */
    public const DEVICE_FORWARDER = 2;

    /**
     * Queue device
     */
    public const DEVICE_QUEUE = 3;

    /**
     * Streamer device
     */
    public const DEVICE_STREAMER = 1;

    /**
     * ZMQ extension internal error
     */
    public const ERR_INTERNAL = -99;

    /**
     * Implies that the operation would block when ZMQ::MODE_DONTWAIT is used
     */
    public const ERR_EAGAIN = 11;

    /**
     * The operation is not supported by the socket type
     */
    public const ERR_ENOTSUP = 156384713;

    /**
     * The operation can not be executed because the socket is not in correct state
     */
    public const ERR_EFSM = 156384763;

    /**
     * The context has been terminated
     */
    public const ERR_ETERM = 156384765;

    /**
     * Private constructor to prevent direct initialization. This class holds the constants for ZMQ extension.
     * @link https://secure.php.net/manual/en/zmq.construct.php
     */
    private function __construct() {}
}
/**
*<div id="class.zmqcontext" class="reference"> <h1 class="title">The ZMQContext class</h1>  <div class="partintro"><p class="verinfo">(PECL zmq &gt;= 0.5.0)</p>  <div class="section" id="zmqcontext.intro">   <h2 class="title">简介</h2>   <p class="para">   </p>  </div>  <div class="section" id="zmqcontext.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">ZMQContext</strong>     </span>     {</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqcontext.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$io_threads</span><span class="initializer"> = 1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$is_persistent</span><span class="initializer"> = <strong><span>true</span></strong></span></span>)</div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqcontext.getopt.php" class="methodname" style="color:#CC7832">getOpt</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqcontext.getsocket.php" class="methodname" style="color:#CC7832">getSocket</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$type</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$persistent_id</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$on_new_socket</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="type ZMQSocket" style="color:#EAB766">ZMQSocket</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqcontext.ispersistent.php" class="methodname" style="color:#CC7832">isPersistent</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqcontext.setopt.php" class="methodname" style="color:#CC7832">setOpt</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqcontext.php" class="type ZMQContext" style="color:#EAB766">ZMQContext</a></span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ZMQContext::__construct} — Construct a new ZMQContext object</li><li>{@link ZMQContext::getOpt} — Get context option</li><li>{@link ZMQContext::getSocket} — Create a new socket</li><li>{@link ZMQContext::isPersistent} — Whether the context is persistent</li><li>{@link ZMQContext::setOpt} — Set a socket option</li></ul></div>
*/
class ZMQContext
{
    /**
     * Constructs a new ZMQ context. The context is used to initialize sockets.
     * A persistent context is required to initialize persistent sockets.
     *
     * @link https://secure.php.net/manual/en/zmqcontext.construct.php
     *
     * @param int $io_threads Number of io-threads in the context
     * @param bool $is_persistent Whether the context is persistent. Persistent context is stored over multiple requests and is a requirement for persistent sockets.
     */
    public function __construct($io_threads = 1, $is_persistent = true) {}

/**
*<div id="zmqcontext.getopt" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQContext::getOpt</h1>  <p class="verinfo">(PECL zmq &gt;= 1.0.4)</p><p class="refpurpose"><span class="refname">ZMQContext::getOpt</span> &mdash; <span class="dc-title">Get context option</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqcontext.getopt-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQContext::getOpt</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Returns the value of a context option.   </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqcontext.getopt-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       An integer representing the option.       See the <strong><span>ZMQ::CTXOPT_*</span></strong> constants.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqcontext.getopt-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns either a <span class="type" style="color:#EAB766">string</span> or an <span class="type" style="color:#EAB766">int</span> depending on <span class="parameter" style="color:#3A95FF">key</span>. Throws   ZMQContextException on error.   </p> </div></div>
     * @return string|int Returns either a string or an integer depending on key. Throws ZMQContextException on error.*/
    public function getOpt($key) {}

/**
*<div id="zmqcontext.getsocket" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQContext::getSocket</h1>  <p class="verinfo">(PECL zmq &gt;= 0.5.0)</p><p class="refpurpose"><span class="refname">ZMQContext::getSocket</span> &mdash; <span class="dc-title">Create a new socket</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqcontext.getsocket-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQContext::getSocket</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$type</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$persistent_id</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$on_new_socket</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="type ZMQSocket" style="color:#EAB766">ZMQSocket</a></span></div>  <p class="para rdfs-comment">   Shortcut for creating new sockets from the context. If the context is not persistent the <span class="parameter" style="color:#3A95FF">persistent_id</span>    parameter is ignored and the socket falls back to being non-persistent. The <span class="parameter" style="color:#3A95FF">on_new_socket</span> is called only   when a new underlying socket structure is created.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqcontext.getsocket-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">type</span></dt>     <dd>      <p class="para">       <strong><span>ZMQ::SOCKET_*</span></strong> constant to specify socket type.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">persistent_id</span></dt>     <dd>      <p class="para">       If <span class="parameter" style="color:#3A95FF">persistent_id</span> is specified the socket will be persisted over multiple requests.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">on_new_socket</span></dt>     <dd>      <p class="para">       Callback function, which is executed when a new socket structure is created. This function does not get invoked       if the underlying persistent connection is re-used. The callback takes ZMQSocket and persistent_id as two arguments.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqcontext.getsocket-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <span class="classname"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="classname">ZMQSocket</a></span> object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-zmqcontext.getsocket-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><strong class="classname">ZMQSocketException</strong></span> on error.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-zmqcontext.getsocket-examples"> <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">ZMQContext()</strong></span> example</strong></p>    <div class="example-contents"><p>     Basic usage    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Allocate a new context <br /></span><span style="color: #9876AA">$context </span><span style="color: #007700">= new </span><span style="color: #9876AA">ZMQContext</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// Create a new socket <br /></span><span style="color: #9876AA">$socket </span><span style="color: #007700">= </span><span style="color: #9876AA">$context</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getSocket</span><span style="color: #007700">(</span><span style="color: #9876AA">ZMQ</span><span style="color: #007700">::</span><span style="color: #9876AA">SOCKET_REQ</span><span style="color: #007700">, </span><span style="color: #DD0000">'my sock'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Connect the socket <br /></span><span style="color: #9876AA">$socket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connect</span><span style="color: #007700">(</span><span style="color: #DD0000">"tcp://example.com:1234"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Send a request <br /></span><span style="color: #9876AA">$socket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">send</span><span style="color: #007700">(</span><span style="color: #DD0000">"Hello there"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Receive back the response <br /></span><span style="color: #9876AA">$message </span><span style="color: #007700">= </span><span style="color: #9876AA">$socket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">recv</span><span style="color: #007700">();<br />echo </span><span style="color: #DD0000">"Received message: </span><span style="color: #007700">{</span><span style="color: #9876AA">$message</span><span style="color: #007700">}</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div></div>
     * @return ZMQSocket*/
    public function getSocket($type, $persistent_id = null, $on_new_socket = null) {}

/**
*<div id="zmqcontext.ispersistent" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQContext::isPersistent</h1>  <p class="verinfo">(PECL zmq &gt;= 0.5.0)</p><p class="refpurpose"><span class="refname">ZMQContext::isPersistent</span> &mdash; <span class="dc-title">Whether the context is persistent</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqcontext.ispersistent-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQContext::isPersistent</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">    Whether the context is persistent. Persistent context is needed for persistent connections as each    socket is allocated from a context.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqcontext.ispersistent-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqcontext.ispersistent-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the context is persistent and <strong><span>false</span></strong> if the context is non-persistent.  </p> </div></div>
     * @return bool Returns <b>TRUE</b> if the context is persistent and <b>FALSE</b> if the context is non-persistent.*/
    public function isPersistent() {}

/**
*<div id="zmqcontext.setopt" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQContext::setOpt</h1>  <p class="verinfo">(PECL zmq &gt;= 1.0.4)</p><p class="refpurpose"><span class="refname">ZMQContext::setOpt</span> &mdash; <span class="dc-title">Set a socket option</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqcontext.setopt-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQContext::setOpt</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqcontext.php" class="type ZMQContext" style="color:#EAB766">ZMQContext</a></span></div>  <p class="para rdfs-comment">   Sets a ZMQ context option. The type of the <span class="parameter" style="color:#3A95FF">value</span> depends on the <span class="parameter" style="color:#3A95FF">key</span>.   See <a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants" class="link">ZMQ Constant Types</a> for more information.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqcontext.setopt-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       One of the <strong><span>ZMQ::CTXOPT_*</span></strong> constants.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The value of the parameter.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqcontext.setopt-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current object. Throws ZMQContextException on error.  </p> </div></div>
     * @return ZMQContext*/
    public function setOpt($key, $value) {}
}
/**
*<div id="class.zmqsocket" class="reference"> <h1 class="title">The ZMQSocket class</h1>  <div class="partintro"><p class="verinfo">(PECL zmq &gt;= 0.5.0)</p>  <div class="section" id="zmqsocket.intro">   <h2 class="title">简介</h2>   <p class="para">   </p>  </div>  <div class="section" id="zmqsocket.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">ZMQSocket</strong>     </span>     {</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqsocket.bind.php" class="methodname" style="color:#CC7832">bind</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$dsn</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$force</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="type ZMQSocket" style="color:#EAB766">ZMQSocket</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqsocket.connect.php" class="methodname" style="color:#CC7832">connect</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$dsn</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$force</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="type ZMQSocket" style="color:#EAB766">ZMQSocket</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqsocket.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqcontext.php" class="type ZMQContext" style="color:#EAB766">ZMQContext</a></span> <span class="parameter" style="color:#3A95FF">$context</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$type</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$persistent_id</span><span class="initializer"> = <strong><span>null</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$on_new_socket</span><span class="initializer"> = <strong><span>null</span></strong></span></span><br>)</div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqsocket.disconnect.php" class="methodname" style="color:#CC7832">disconnect</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$dsn</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="type ZMQSocket" style="color:#EAB766">ZMQSocket</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqsocket.getendpoints.php" class="methodname" style="color:#CC7832">getEndpoints</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqsocket.getpersistentid.php" class="methodname" style="color:#CC7832">getPersistentId</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqsocket.getsockettype.php" class="methodname" style="color:#CC7832">getSocketType</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqsocket.getsockopt.php" class="methodname" style="color:#CC7832">getSockOpt</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqsocket.ispersistent.php" class="methodname" style="color:#CC7832">isPersistent</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqsocket.recv.php" class="methodname" style="color:#CC7832">recv</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqsocket.recvmulti.php" class="methodname" style="color:#CC7832">recvMulti</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqsocket.send.php" class="methodname" style="color:#CC7832">send</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="type ZMQSocket" style="color:#EAB766">ZMQSocket</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqsocket.sendmulti.php" class="methodname" style="color:#CC7832">sendmulti</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$message</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="type ZMQSocket" style="color:#EAB766">ZMQSocket</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqsocket.setsockopt.php" class="methodname" style="color:#CC7832">setSockOpt</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="type ZMQSocket" style="color:#EAB766">ZMQSocket</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqsocket.unbind.php" class="methodname" style="color:#CC7832">unbind</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$dsn</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="type ZMQSocket" style="color:#EAB766">ZMQSocket</a></span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ZMQSocket::bind} — Bind the socket</li><li>{@link ZMQSocket::connect} — Connect the socket</li><li>{@link ZMQSocket::__construct} — Construct a new ZMQSocket</li><li>{@link ZMQSocket::disconnect} — Disconnect a socket</li><li>{@link ZMQSocket::getEndpoints} — Get list of endpoints</li><li>{@link ZMQSocket::getPersistentId} — Get the persistent id</li><li>{@link ZMQSocket::getSocketType} — Get the socket type</li><li>{@link ZMQSocket::getSockOpt} — Get socket option</li><li>{@link ZMQSocket::isPersistent} — Whether the socket is persistent</li><li>{@link ZMQSocket::recv} — Receives a message</li><li>{@link ZMQSocket::recvMulti} — Receives a multipart message</li><li>{@link ZMQSocket::send} — Sends a message</li><li>{@link ZMQSocket::sendmulti} — Sends a multipart message</li><li>{@link ZMQSocket::setSockOpt} — Set a socket option</li><li>{@link ZMQSocket::unbind} — Unbind the socket</li></ul></div>
*/
class ZMQSocket
{
    /**
     * (PECL zmq &gt;= 0.5.0)
     * Constructs a ZMQSocket object.
     * The persistent_id parameter can be used to allocated a persistent socket.
     * A persistent socket has to be allocated from a persistent context and it stays connected over multiple requests.
     * The persistent_id parameter can be used to recall the same socket over multiple requests.
     * The on_new_socket is called only when a new underlying socket structure is created.
     *
     * @link https://secure.php.net/manual/en/zmqsocket.construct.php
     *
     * @param ZMQContext $context <p>ZMQContext to build this object</p>
     * @param int $type <p>The type of the socket. See ZMQ::SOCKET_* constants.</p>
     * @param string $persistent_id [optional] <p>If persistent_id is specified the socket will be persisted over multiple requests. If context is not persistent the socket falls back to non-persistent mode.</p>
     * @param callable $on_new_socket [optional] <p>Callback function, which is executed when a new socket structure is created. This function does not get invoked if the underlying persistent connection is re-used.</p>
     *
     * @throws ZMQSocketException
     */
    public function __construct(ZMQContext $context, $type, $persistent_id = null, $on_new_socket = null) {}

/**
*<div id="zmqsocket.bind" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQSocket::bind</h1>  <p class="verinfo">(PECL zmq &gt;= 0.5.0)</p><p class="refpurpose"><span class="refname">ZMQSocket::bind</span> &mdash; <span class="dc-title">Bind the socket</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqsocket.bind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQSocket::bind</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$dsn</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$force</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="type ZMQSocket" style="color:#EAB766">ZMQSocket</a></span></div>  <p class="para rdfs-comment">   Bind the socket to an endpoint. The endpoint is defined in format <span>transport://address</span> where    transport is one of the following: inproc, ipc, tcp, pgm or epgm.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqsocket.bind-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">dsn</span></dt>     <dd>      <p class="para">       The bind dsn, for example <span>transport://address</span>.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">force</span></dt>     <dd>      <p class="para">       Tries to bind even if the socket has already been bound to the given endpoint.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqsocket.bind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current object. Throws ZMQSocketException on error.  </p> </div></div>
     * @return ZMQSocket*/
    public function bind($dsn, $force = false) {}

/**
*<div id="zmqsocket.connect" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQSocket::connect</h1>  <p class="verinfo">(PECL zmq &gt;= 0.5.0)</p><p class="refpurpose"><span class="refname">ZMQSocket::connect</span> &mdash; <span class="dc-title">Connect the socket</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqsocket.connect-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQSocket::connect</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$dsn</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$force</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="type ZMQSocket" style="color:#EAB766">ZMQSocket</a></span></div>  <p class="para rdfs-comment">   Connect the socket to a remote endpoint. The endpoint is defined in format <span>transport://address</span> where    transport is one of the following: inproc, ipc, tcp, pgm or epgm.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqsocket.connect-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">dsn</span></dt>     <dd>      <p class="para">       The connect dsn, for example <span>transport://address</span>.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">force</span></dt>     <dd>      <p class="para">       Tries to connect even if the socket has already been connected to given endpoint.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqsocket.connect-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-zmqsocket.connect-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><strong class="classname">ZMQSocketException</strong></span> on error.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-zmqsocket.connect-examples"> <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">ZMQContext()</strong></span> example</strong></p>    <div class="example-contents"><p>     Construct a new context and allocate request socket from it    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Server hostname <br /></span><span style="color: #9876AA">$dsn </span><span style="color: #007700">= </span><span style="color: #DD0000">"tcp://127.0.0.1:5555"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// Create a socket <br /></span><span style="color: #9876AA">$socket </span><span style="color: #007700">= new </span><span style="color: #9876AA">ZMQSocket</span><span style="color: #007700">(new </span><span style="color: #9876AA">ZMQContext</span><span style="color: #007700">(), </span><span style="color: #9876AA">ZMQ</span><span style="color: #007700">::</span><span style="color: #9876AA">SOCKET_REQ</span><span style="color: #007700">, </span><span style="color: #DD0000">'my socket'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Get list of connected endpoints <br /></span><span style="color: #9876AA">$endpoints </span><span style="color: #007700">= </span><span style="color: #9876AA">$socket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getEndpoints</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// Check if the socket is connected <br /></span><span style="color: #007700">if (!</span><span style="color: #9876AA">in_array</span><span style="color: #007700">(</span><span style="color: #9876AA">$dsn</span><span style="color: #007700">, </span><span style="color: #9876AA">$endpoints</span><span style="color: #007700">[</span><span style="color: #DD0000">'connect'</span><span style="color: #007700">])) {<br />    echo </span><span style="color: #DD0000">"&lt;p&gt;Connecting to </span><span style="color: #9876AA">$dsn</span><span style="color: #DD0000">&lt;/p&gt;"</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$socket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connect</span><span style="color: #007700">(</span><span style="color: #9876AA">$dsn</span><span style="color: #007700">);<br />} else {<br />    echo </span><span style="color: #DD0000">"&lt;p&gt;Already connected to </span><span style="color: #9876AA">$dsn</span><span style="color: #DD0000">&lt;/p&gt;"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// Send and receive <br /></span><span style="color: #9876AA">$socket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">send</span><span style="color: #007700">(</span><span style="color: #DD0000">"Hello!"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$message </span><span style="color: #007700">= </span><span style="color: #9876AA">$socket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">recv</span><span style="color: #007700">();<br /><br />echo </span><span style="color: #DD0000">"&lt;p&gt;Server said: </span><span style="color: #007700">{</span><span style="color: #9876AA">$message</span><span style="color: #007700">}</span><span style="color: #DD0000">&lt;/p&gt;"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div></div>
     * @return ZMQSocket*/
    public function connect($dsn, $force = false) {}

/**
*<div id="zmqsocket.disconnect" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQSocket::disconnect</h1>  <p class="verinfo">(PECL zmq &gt;= 1.0.4)</p><p class="refpurpose"><span class="refname">ZMQSocket::disconnect</span> &mdash; <span class="dc-title">Disconnect a socket</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqsocket.disconnect-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQSocket::disconnect</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$dsn</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="type ZMQSocket" style="color:#EAB766">ZMQSocket</a></span></div>  <p class="para rdfs-comment">   Disconnect the socket from a previously connected remote endpoint. The endpoint is defined in format   <span>transport://address</span> where transport is one of the following: inproc, ipc, tcp, pgm or epgm.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqsocket.disconnect-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">dsn</span></dt>     <dd>      <p class="para">       The connect dsn, for example <span>transport://address</span>.      </p>     </dd>        </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqsocket.disconnect-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current object. Throws ZMQSocketException on error.  </p> </div></div>
     * @return ZMQSocket*/
    public function disconnect($dsn) {}

/**
*<div id="zmqsocket.getendpoints" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQSocket::getEndpoints</h1>  <p class="verinfo">(PECL zmq &gt;= 0.5.0)</p><p class="refpurpose"><span class="refname">ZMQSocket::getEndpoints</span> &mdash; <span class="dc-title">Get list of endpoints</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqsocket.getendpoints-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQSocket::getEndpoints</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Returns a list of endpoints where the socket is connected or bound to.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqsocket.getendpoints-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqsocket.getendpoints-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an array containing elements &#039;bind&#039; and &#039;connect&#039;.   </p> </div></div>
     * @return array contains two sub-arrays: 'connect' and 'bind'*/
    public function getEndpoints() {}

/**
*<div id="zmqsocket.getpersistentid" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQSocket::getPersistentId</h1>  <p class="verinfo">(PECL zmq &gt;= 0.5.0)</p><p class="refpurpose"><span class="refname">ZMQSocket::getPersistentId</span> &mdash; <span class="dc-title">Get the persistent id</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqsocket.getpersistentid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQSocket::getPersistentId</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Returns the persistent id of the socket.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqsocket.getpersistentid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqsocket.getpersistentid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the persistent id string assigned of the object and <strong><span>null</span></strong> if socket is not persistent.  </p> </div></div>
     * @return string|null <p>*/
    public function getPersistentId() {}

/**
*<div id="zmqsocket.getsockopt" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQSocket::getSockOpt</h1>  <p class="verinfo">(PECL zmq &gt;= 0.5.0)</p><p class="refpurpose"><span class="refname">ZMQSocket::getSockOpt</span> &mdash; <span class="dc-title">Get socket option</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqsocket.getsockopt-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQSocket::getSockOpt</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Returns the value of a socket option.   </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqsocket.getsockopt-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       An integer representing the option.       See the <strong><span>ZMQ::SOCKOPT_*</span></strong> constants.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqsocket.getsockopt-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns either a <span class="type" style="color:#EAB766">string</span> or an <span class="type" style="color:#EAB766">int</span> depending on <span class="parameter" style="color:#3A95FF">key</span>. Throws   ZMQSocketException on error.   </p> </div></div>
     * @return string|int <p>*/
    public function getSockOpt($key) {}

/**
*<div id="zmqsocket.getsockettype" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQSocket::getSocketType</h1>  <p class="verinfo">(PECL zmq &gt;= 0.5.0)</p><p class="refpurpose"><span class="refname">ZMQSocket::getSocketType</span> &mdash; <span class="dc-title">Get the socket type</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqsocket.getsockettype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQSocket::getSocketType</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Gets the socket type.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqsocket.getsockettype-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqsocket.getsockettype-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an integer representing the socket type. The integer can be compared against   <strong><span>ZMQ::SOCKET_*</span></strong> constants.  </p> </div></div>
     * @return int <p>*/
    public function getSocketType() {}

/**
*<div id="zmqsocket.ispersistent" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQSocket::isPersistent</h1>  <p class="verinfo">(PECL zmq &gt;= 0.5.0)</p><p class="refpurpose"><span class="refname">ZMQSocket::isPersistent</span> &mdash; <span class="dc-title">Whether the socket is persistent</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqsocket.ispersistent-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQSocket::isPersistent</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Check whether the socket is persistent.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqsocket.ispersistent-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqsocket.ispersistent-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <span class="type" style="color:#EAB766">bool</span> based on whether the socket is persistent or not.  </p> </div></div>
     * @return bool <p>Returns a boolean based on whether the socket is persistent or not.</p>*/
    public function isPersistent() {}

/**
*<div id="zmqsocket.recv" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQSocket::recv</h1>  <p class="verinfo">(PECL zmq &gt;= 0.5.0)</p><p class="refpurpose"><span class="refname">ZMQSocket::recv</span> &mdash; <span class="dc-title">Receives a message</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqsocket.recv-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQSocket::recv</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Receive a message from a socket. By default receiving will block until a message is available unless   <strong><span>ZMQ::MODE_DONTWAIT</span></strong> flag is used. <strong><span>ZMQ::SOCKOPT_RCVMORE</span></strong>   socket option can be used for receiving multi-part messages. See <span class="function">{@link ZMQSocket::setSockOpt()}</span>    for more information.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqsocket.recv-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">mode</span></dt>     <dd>      <p class="para">       Pass mode flags to receive multipart messages or non-blocking operation.        See <strong><span>ZMQ::MODE_*</span></strong> constants.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqsocket.recv-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the message. If <strong><span>ZMQ::MODE_DONTWAIT</span></strong>    is used and the operation would block <strong><span>false</span></strong> shall be returned.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-zmqsocket.recv-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><strong class="classname">ZMQSocketException</strong></span> on error.   </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-zmqsocket.recv-examples"> <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 A send/recv example</strong></p>    <div class="example-contents"><p>     Non-blocking send / receive    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">// Create new queue object, there needs to be a server at the other end <br /></span><span style="color: #9876AA">$queue </span><span style="color: #007700">= new </span><span style="color: #9876AA">ZMQSocket</span><span style="color: #007700">(new </span><span style="color: #9876AA">ZMQContext</span><span style="color: #007700">(), </span><span style="color: #9876AA">ZMQ</span><span style="color: #007700">::</span><span style="color: #9876AA">SOCKET_REQ</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$queue</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">connect</span><span style="color: #007700">(</span><span style="color: #DD0000">"tcp://127.0.0.1:5555"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Assign socket 1 to the queue, send and receive <br /></span><span style="color: #9876AA">$retries </span><span style="color: #007700">= </span><span style="color: #9876AA">5</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$sending </span><span style="color: #007700">= </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// Start a loop <br /></span><span style="color: #007700">do {<br />    try {<br />        </span><span style="color: #FF8000">// Try to send / receive <br />        </span><span style="color: #007700">if (</span><span style="color: #9876AA">$sending</span><span style="color: #007700">) {<br />            echo </span><span style="color: #DD0000">"Sending message\n"</span><span style="color: #007700">;<br />            </span><span style="color: #9876AA">$queue</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">send</span><span style="color: #007700">(</span><span style="color: #DD0000">"This is a message"</span><span style="color: #007700">, </span><span style="color: #9876AA">ZMQ</span><span style="color: #007700">::</span><span style="color: #9876AA">MODE_DONTWAIT</span><span style="color: #007700">);<br />            </span><span style="color: #9876AA">$sending </span><span style="color: #007700">= </span><span style="color: #9876AA">false</span><span style="color: #007700">;<br />        } else {<br />            echo </span><span style="color: #DD0000">"Got response: " </span><span style="color: #007700">. </span><span style="color: #9876AA">$queue</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">recv</span><span style="color: #007700">(</span><span style="color: #9876AA">ZMQ</span><span style="color: #007700">::</span><span style="color: #9876AA">MODE_DONTWAIT</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />            break;<br />        }<br />    } catch (</span><span style="color: #9876AA">ZMQSocketException $e</span><span style="color: #007700">) {<br />        </span><span style="color: #FF8000">// EAGAIN means that the operation would have blocked, retry <br />        </span><span style="color: #007700">if (</span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getCode</span><span style="color: #007700">() === </span><span style="color: #9876AA">ZMQ</span><span style="color: #007700">::</span><span style="color: #9876AA">ERR_EAGAIN</span><span style="color: #007700">) {<br />            echo </span><span style="color: #DD0000">" - Got EAGAIN, retrying (</span><span style="color: #9876AA">$retries</span><span style="color: #DD0000">)\n"</span><span style="color: #007700">;<br />        } else {<br />            die(</span><span style="color: #DD0000">" - Error: " </span><span style="color: #007700">. </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">());<br />        }<br />    }<br />    </span><span style="color: #FF8000">// Sleep a bit between operations <br />    </span><span style="color: #9876AA">usleep</span><span style="color: #007700">(</span><span style="color: #9876AA">5</span><span style="color: #007700">);<br />} while (--</span><span style="color: #9876AA">$retries</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Sending message<br> - Unable to execute operation, retrying (4)<br>Got response: This is a message<br></span></div>    </div>       </div>  </span> </div></div>
     * @return string|false <p>Returns the message. Throws ZMQSocketException in error. If <b>ZMQ::MODE_NOBLOCK</b> is used and the operation would block boolean false shall be returned.</p>*/
    public function recv($mode = 0) {}

/**
*<div id="zmqsocket.recvmulti" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQSocket::recvMulti</h1>  <p class="verinfo">(PECL zmq &gt;= 0.8.0)</p><p class="refpurpose"><span class="refname">ZMQSocket::recvMulti</span> &mdash; <span class="dc-title">Receives a multipart message</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqsocket.recvmulti-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQSocket::recvMulti</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Receive an array multipart message from a socket. By default receiving will block until a message is available unless   <strong><span>ZMQ::MODE_NOBLOCK</span></strong> flag is used.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqsocket.recvmulti-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">mode</span></dt>     <dd>      <p class="para">       Pass mode flags to receive multipart messages or non-blocking operation.        See <strong><span>ZMQ::MODE_*</span></strong> constants.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqsocket.recvmulti-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the array of message parts. Throws ZMQSocketException in error.    If <strong><span>ZMQ::MODE_NOBLOCK</span></strong> is used and the operation would    block <span class="type" style="color:#EAB766">bool</span> false shall be returned.  </p> </div></div>
     * @return string[] Returns the array of message parts. Throws ZMQSocketException in error. If ZMQ::MODE_NOBLOCK is used and the operation would block boolean false shall be returned.*/
    public function recvMulti($mode = 0) {}

/**
*<div id="zmqsocket.send" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQSocket::send</h1>  <p class="verinfo">(PECL zmq &gt;= 0.5.0)</p><p class="refpurpose"><span class="refname">ZMQSocket::send</span> &mdash; <span class="dc-title">Sends a message</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqsocket.send-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQSocket::send</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="type ZMQSocket" style="color:#EAB766">ZMQSocket</a></span></div>  <p class="para rdfs-comment">   Send a message using the socket. The operation can block unless <strong><span>ZMQ::MODE_NOBLOCK</span></strong> is used.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqsocket.send-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">message</span></dt>     <dd>      <p class="para">       The message to send.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">mode</span></dt>     <dd>      <p class="para">       Pass mode flags to receive multipart messages or non-blocking operation.        See <strong><span>ZMQ::MODE_*</span></strong> constants.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqsocket.send-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current object. Throws ZMQSocketException on error.    If <strong><span>ZMQ::MODE_NOBLOCK</span></strong> is used and the operation would    block <span class="type" style="color:#EAB766">bool</span> false shall be returned.  </p> </div></div>
     * @return ZMQSocket*/
    public function send($message, $mode = 0) {}

/**
*<div id="zmqsocket.sendmulti" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQSocket::sendmulti</h1>  <p class="verinfo">(PECL zmq &gt;= 0.8.0)</p><p class="refpurpose"><span class="refname">ZMQSocket::sendmulti</span> &mdash; <span class="dc-title">Sends a multipart message</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqsocket.sendmulti-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQSocket::sendmulti</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$message</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="type ZMQSocket" style="color:#EAB766">ZMQSocket</a></span></div>  <p class="para rdfs-comment">   Send a multipart message using the socket. The operation can block unless <strong><span>ZMQ::MODE_NOBLOCK</span></strong> is used.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqsocket.sendmulti-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">message</span></dt>     <dd>      <p class="para">       The message to send - an array of strings      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">mode</span></dt>     <dd>      <p class="para">       Pass mode flags to receive multipart messages or non-blocking operation.        See <strong><span>ZMQ::MODE_*</span></strong> constants.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqsocket.sendmulti-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current object. Throws ZMQSocketException on error.    If <strong><span>ZMQ::MODE_NOBLOCK</span></strong> is used and the operation would    block <span class="type" style="color:#EAB766">bool</span> false shall be returned.  </p> </div></div>
     * @return ZMQSocket*/
    public function sendmulti(array $message, $mode = 0) {}

/**
*<div id="zmqsocket.setsockopt" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQSocket::setSockOpt</h1>  <p class="verinfo">(PECL zmq &gt;= 0.5.0)</p><p class="refpurpose"><span class="refname">ZMQSocket::setSockOpt</span> &mdash; <span class="dc-title">Set a socket option</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqsocket.setsockopt-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQSocket::setSockOpt</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="type ZMQSocket" style="color:#EAB766">ZMQSocket</a></span></div>  <p class="para rdfs-comment">   Sets a ZMQ socket option. The type of the <span class="parameter" style="color:#3A95FF">value</span> depends on the <span class="parameter" style="color:#3A95FF">key</span>.   See <a href="https://www.php.net/manual/zh/class.zmq.php#zmq.constants" class="link">ZMQ Constant Types</a> for more information.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqsocket.setsockopt-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       One of the <strong><span>ZMQ::SOCKOPT_*</span></strong> constants.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The value of the parameter.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqsocket.setsockopt-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current object. Throws ZMQSocketException on error.  </p> </div></div>
     * @return ZMQSocket*/
    public function setSockOpt($key, $value) {}

/**
*<div id="zmqsocket.unbind" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQSocket::unbind</h1>  <p class="verinfo">(PECL zmq &gt;= 1.0.4)</p><p class="refpurpose"><span class="refname">ZMQSocket::unbind</span> &mdash; <span class="dc-title">Unbind the socket</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqsocket.unbind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQSocket::unbind</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$dsn</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="type ZMQSocket" style="color:#EAB766">ZMQSocket</a></span></div>  <p class="para rdfs-comment">   Unbind the socket from an endpoint. The endpoint is defined in format <span>transport://address</span> where    transport is one of the following: inproc, ipc, tcp, pgm or epgm.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqsocket.unbind-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">dsn</span></dt>     <dd>      <p class="para">       The previously bound dsn, for example <span>transport://address</span>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqsocket.unbind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current object. Throws ZMQSocketException on error.  </p> </div></div>
     * @return ZMQSocket*/
    public function unbind($dsn) {}
}
/**
*<div id="class.zmqpoll" class="reference"> <h1 class="title">The ZMQPoll class</h1>  <div class="partintro"><p class="verinfo">(PECL zmq &gt;= 0.5.0)</p>  <div class="section" id="zmqpoll.intro">   <h2 class="title">简介</h2>   <p class="para">   </p>  </div>  <div class="section" id="zmqpoll.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">ZMQPoll</strong>     </span>     {</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqpoll.add.php" class="methodname" style="color:#CC7832">add</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$entry</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$type</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqpoll.clear.php" class="methodname" style="color:#CC7832">clear</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqpoll.php" class="type ZMQPoll" style="color:#EAB766">ZMQPoll</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqpoll.count.php" class="methodname" style="color:#CC7832">count</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqpoll.getlasterrors.php" class="methodname" style="color:#CC7832">getLastErrors</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqpoll.poll.php" class="methodname" style="color:#CC7832">poll</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$readable</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$writable</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$timeout</span><span class="initializer"> = -1</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqpoll.remove.php" class="methodname" style="color:#CC7832">remove</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$item</span></span>): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ZMQPoll::add} — Add item to the poll set</li><li>{@link ZMQPoll::clear} — Clear the poll set</li><li>{@link ZMQPoll::count} — Count items in the poll set</li><li>{@link ZMQPoll::getLastErrors} — Get poll errors</li><li>{@link ZMQPoll::poll} — Poll the items</li><li>{@link ZMQPoll::remove} — Remove item from poll set</li></ul></div>
*/
class ZMQPoll
{
/**
*<div id="zmqpoll.add" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQPoll::add</h1>  <p class="verinfo">(PECL zmq &gt;= 0.5.0)</p><p class="refpurpose"><span class="refname">ZMQPoll::add</span> &mdash; <span class="dc-title">Add item to the poll set</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqpoll.add-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQPoll::add</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$entry</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$type</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Adds a new item to the poll set and returns the internal id of the added item. The item can be removed   from the poll set using the returned string id.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqpoll.add-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">entry</span></dt>     <dd>      <p class="para">       ZMQSocket object or a PHP stream resource      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">type</span></dt>     <dd>      <p class="para">       Defines what activity the socket is polled for.        See <strong><span>ZMQ::POLL_IN</span></strong> and <strong><span>ZMQ::POLL_OUT</span></strong> constants.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqpoll.add-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a string id of the added item which can be later used to remove the item.    Throws ZMQPollException on error.  </p> </div></div>
     * @return int Returns a string id of the added item which can be later used to remove the item. Throws ZMQPollException on error.*/
    public function add(ZMQSocket $entry, $type) {}

/**
*<div id="zmqpoll.clear" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQPoll::clear</h1>  <p class="verinfo">(PECL zmq &gt;= 0.5.0)</p><p class="refpurpose"><span class="refname">ZMQPoll::clear</span> &mdash; <span class="dc-title">Clear the poll set</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqpoll.clear-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQPoll::clear</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqpoll.php" class="type ZMQPoll" style="color:#EAB766">ZMQPoll</a></span></div>  <p class="para rdfs-comment">   Clears all elements from the poll set.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqpoll.clear-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqpoll.clear-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current object.  </p> </div></div>
     * @return ZMQPoll Returns the current object.*/
    public function clear() {}

/**
*<div id="zmqpoll.count" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQPoll::count</h1>  <p class="verinfo">(PECL zmq &gt;= 0.5.0)</p><p class="refpurpose"><span class="refname">ZMQPoll::count</span> &mdash; <span class="dc-title">Count items in the poll set</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqpoll.count-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQPoll::count</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Count the items in the poll set.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqpoll.count-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqpoll.count-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an <span class="type" style="color:#EAB766">int</span> representing the amount of items in the poll set.  </p> </div></div>
     * @return int Returns an integer representing the amount of items in the poll set.*/
    public function count() {}

/**
*<div id="zmqpoll.getlasterrors" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQPoll::getLastErrors</h1>  <p class="verinfo">(PECL zmq &gt;= 0.5.0)</p><p class="refpurpose"><span class="refname">ZMQPoll::getLastErrors</span> &mdash; <span class="dc-title">Get poll errors</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqpoll.getlasterrors-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQPoll::getLastErrors</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Returns the ids of the objects that had errors in the last poll.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqpoll.getlasterrors-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqpoll.getlasterrors-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an array containing ids for the items that had errors in the last poll. Empty array is    returned if there were no errors.  </p> </div></div>
     * @return int[]*/
    public function getLastErrors() {}

/**
*<div id="zmqpoll.poll" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQPoll::poll</h1>  <p class="verinfo">(PECL zmq &gt;= 0.5.0)</p><p class="refpurpose"><span class="refname">ZMQPoll::poll</span> &mdash; <span class="dc-title">Poll the items</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqpoll.poll-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQPoll::poll</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$readable</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$writable</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$timeout</span><span class="initializer"> = -1</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Polls the items in the current poll set. The readable and writable items are returned in the    <span class="parameter" style="color:#3A95FF">readable</span> and <span class="parameter" style="color:#3A95FF">writable</span> parameters.    <span class="function">{@link ZMQPoll::getLastErrors()}</span> can be used to check if there were errors.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqpoll.poll-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">readable</span></dt>     <dd>      <p class="para">       Array where readable ZMQSockets/PHP streams are returned. The array       will be cleared at the beginning of the operation.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">writable</span></dt>     <dd>      <p class="para">       Array where writable ZMQSockets/PHP streams are returned. The array       will be cleared at the beginning of the operation.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">timeout</span></dt>     <dd>      <p class="para">       Timeout for the operation. -1 means that poll waits until       at least one item has activity. Please note that starting from        version 1.0.0 the poll timeout is defined in milliseconds, rather       than microseconds.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqpoll.poll-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an integer representing the amount of items with activity.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-zmqpoll.poll-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><strong class="classname">ZMQPollException</strong></span> on error.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-zmqpoll.poll-examples"> <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">ZMQPoll()</strong></span> example</strong></p>    <div class="example-contents"><p>     Create a simple poll server    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">// Create socket, request-reply pattern (reply socket) <br /></span><span style="color: #9876AA">$context </span><span style="color: #007700">= new </span><span style="color: #9876AA">ZMQContext</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$server  </span><span style="color: #007700">= </span><span style="color: #9876AA">$context</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getSocket</span><span style="color: #007700">(</span><span style="color: #9876AA">ZMQ</span><span style="color: #007700">::</span><span style="color: #9876AA">SOCKET_REP</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Bind to port 5555 on 127.0.0.1 <br /></span><span style="color: #9876AA">$server</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bind</span><span style="color: #007700">(</span><span style="color: #DD0000">"tcp://127.0.0.1:5555"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Create new pollset for incoming/outgoing message <br /></span><span style="color: #9876AA">$poll </span><span style="color: #007700">= new </span><span style="color: #9876AA">ZMQPoll</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// Add the object and listen for poll in/out <br /></span><span style="color: #9876AA">$id </span><span style="color: #007700">= </span><span style="color: #9876AA">$poll</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">add</span><span style="color: #007700">(</span><span style="color: #9876AA">$server</span><span style="color: #007700">, </span><span style="color: #9876AA">ZMQ</span><span style="color: #007700">::</span><span style="color: #9876AA">POLL_IN </span><span style="color: #007700">| </span><span style="color: #9876AA">ZMQ</span><span style="color: #007700">::</span><span style="color: #9876AA">POLL_OUT</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"Added object with id " </span><span style="color: #007700">. </span><span style="color: #9876AA">$id </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// Initialise readable and writable arrays <br /></span><span style="color: #9876AA">$readable </span><span style="color: #007700">= array();<br /></span><span style="color: #9876AA">$writable </span><span style="color: #007700">= array();<br /><br />while (</span><span style="color: #9876AA">true</span><span style="color: #007700">) {<br />   </span><span style="color: #FF8000">// Amount of events retrieved <br />   </span><span style="color: #9876AA">$events </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br /><br />   try {<br />       </span><span style="color: #FF8000">// Poll until there is something to do <br />       </span><span style="color: #9876AA">$events </span><span style="color: #007700">= </span><span style="color: #9876AA">$poll</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">poll</span><span style="color: #007700">(</span><span style="color: #9876AA">$readable</span><span style="color: #007700">, </span><span style="color: #9876AA">$writable</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br />       </span><span style="color: #9876AA">$errors </span><span style="color: #007700">= </span><span style="color: #9876AA">$poll</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getLastErrors</span><span style="color: #007700">();<br /><br />       if (</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$errors</span><span style="color: #007700">) &gt; </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br />           foreach (</span><span style="color: #9876AA">$errors </span><span style="color: #007700">as </span><span style="color: #9876AA">$error</span><span style="color: #007700">) {<br />               echo </span><span style="color: #DD0000">"Error polling object " </span><span style="color: #007700">. </span><span style="color: #9876AA">$error </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />           }<br />       }<br />   } catch (</span><span style="color: #9876AA">ZMQPollException $e</span><span style="color: #007700">) {<br />       echo </span><span style="color: #DD0000">"poll failed: " </span><span style="color: #007700">. </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />   }<br /><br />   if (</span><span style="color: #9876AA">$events </span><span style="color: #007700">&gt; </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br />       </span><span style="color: #FF8000">// Loop through readable objects and recv messages <br />       </span><span style="color: #007700">foreach (</span><span style="color: #9876AA">$readable </span><span style="color: #007700">as </span><span style="color: #9876AA">$r</span><span style="color: #007700">) {<br />           try {<br />               echo </span><span style="color: #DD0000">"Received message: " </span><span style="color: #007700">. </span><span style="color: #9876AA">$r</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">recv</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />           } catch (</span><span style="color: #9876AA">ZMQException $e</span><span style="color: #007700">) {<br />               echo </span><span style="color: #DD0000">"recv failed: " </span><span style="color: #007700">. </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />           }<br />       }<br /><br />       </span><span style="color: #FF8000">// Loop through writable and send back messages <br />       </span><span style="color: #007700">foreach (</span><span style="color: #9876AA">$writable </span><span style="color: #007700">as </span><span style="color: #9876AA">$w</span><span style="color: #007700">) {<br />           try {<br />               </span><span style="color: #9876AA">$w</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">send</span><span style="color: #007700">(</span><span style="color: #DD0000">"Got it!"</span><span style="color: #007700">);<br />           } catch (</span><span style="color: #9876AA">ZMQException $e</span><span style="color: #007700">) {<br />               echo </span><span style="color: #DD0000">"send failed: " </span><span style="color: #007700">. </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />           }<br />       }<br />   }<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> </div>
     * @return int*/
    public function poll(array &$readable, array &$writable, $timeout = -1) {}

/**
*<div id="zmqpoll.remove" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQPoll::remove</h1>  <p class="verinfo">(PECL zmq &gt;= 0.5.0)</p><p class="refpurpose"><span class="refname">ZMQPoll::remove</span> &mdash; <span class="dc-title">Remove item from poll set</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqpoll.remove-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQPoll::remove</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$item</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Remove item from the poll set. The <span class="parameter" style="color:#3A95FF">item</span> parameter can be ZMQSocket object,   a stream resource or the id returned from <span class="function">{@link ZMQPoll::add()}</span> method.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqpoll.remove-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">item</span></dt>     <dd>      <p class="para">       The ZMQSocket object, PHP stream or <span class="type" style="color:#EAB766">string</span> id of the item.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqpoll.remove-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns true if the item was removed and false if the object    with given id does not exist in the poll set.  </p> </div></div>
     * @return bool Returns true if the item was removed and false if the object with given id does not exist in the poll set.*/
    public function remove($item) {}
}
/**
*<div id="class.zmqdevice" class="reference"> <h1 class="title">The ZMQDevice class</h1>  <div class="partintro"><p class="verinfo">(PECL zmq &gt;= 0.5.0)</p>  <div class="section" id="zmqdevice.intro">   <h2 class="title">简介</h2>   <p class="para">   </p>  </div>  <div class="section" id="zmqdevice.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">ZMQDevice</strong>     </span>     {</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqdevice.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="type ZMQSocket" style="color:#EAB766">ZMQSocket</a></span> <span class="parameter" style="color:#3A95FF">$frontend</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="type ZMQSocket" style="color:#EAB766">ZMQSocket</a></span> <span class="parameter" style="color:#3A95FF">$backend</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqsocket.php" class="type ZMQSocket" style="color:#EAB766">ZMQSocket</a></span> <span class="parameter" style="color:#3A95FF">$listener</span><span class="initializer"> = ?</span></span>)</div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqdevice.getidletimeout.php" class="methodname" style="color:#CC7832">getIdleTimeout</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqdevice.php" class="type ZMQDevice" style="color:#EAB766">ZMQDevice</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqdevice.gettimertimeout.php" class="methodname" style="color:#CC7832">getTimerTimeout</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqdevice.php" class="type ZMQDevice" style="color:#EAB766">ZMQDevice</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqdevice.run.php" class="methodname" style="color:#CC7832">run</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqdevice.setidlecallback.php" class="methodname" style="color:#CC7832">setIdleCallback</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$cb_func</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$timeout</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$user_data</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqdevice.php" class="type ZMQDevice" style="color:#EAB766">ZMQDevice</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqdevice.setidletimeout.php" class="methodname" style="color:#CC7832">setIdleTimeout</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$timeout</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqdevice.php" class="type ZMQDevice" style="color:#EAB766">ZMQDevice</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqdevice.settimercallback.php" class="methodname" style="color:#CC7832">setTimerCallback</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$cb_func</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$timeout</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$user_data</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqdevice.php" class="type ZMQDevice" style="color:#EAB766">ZMQDevice</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/zmqdevice.settimertimeout.php" class="methodname" style="color:#CC7832">setTimerTimeout</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$timeout</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqdevice.php" class="type ZMQDevice" style="color:#EAB766">ZMQDevice</a></span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ZMQDevice::__construct} — Construct a new device</li><li>{@link ZMQDevice::getIdleTimeout} — Get the idle timeout</li><li>{@link ZMQDevice::getTimerTimeout} — Get the timer timeout</li><li>{@link ZMQDevice::run} — Run the new device</li><li>{@link ZMQDevice::setIdleCallback} — Set the idle callback function</li><li>{@link ZMQDevice::setIdleTimeout} — Set the idle timeout</li><li>{@link ZMQDevice::setTimerCallback} — Set the timer callback function</li><li>{@link ZMQDevice::setTimerTimeout} — Set the timer timeout</li></ul></div>
*/
class ZMQDevice
{
    /**
     * (PECL zmq &gt;= 1.0.4)
     * Construct a new device.
     * "ØMQ devices can do intermediation of addresses, services, queues, or any other abstraction you care
     * to define above the message and socket layers." -- zguide
     * Call to this method will prepare the device. Usually devices are very long running processes so running this method from interactive script is not recommended. This method throw ZMQDeviceException if the device cannot be started.
     *
     * @link https://secure.php.net/manual/en/zmqdevice.construct.php
     *
     * @param ZMQSocket $frontend Frontend parameter for the devices. Usually where there messages are coming.
     * @param ZMQSocket $backend Backend parameter for the devices. Usually where there messages going to.
     * @param null|ZMQSocket $listener Listener socket, which receives a copy of all messages going both directions. The type of this socket should be SUB, PULL or DEALER.
     */
    public function __construct(ZMQSocket $frontend, ZMQSocket $backend, ZMQSocket $listener = null) {}

/**
*<div id="zmqdevice.getidletimeout" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQDevice::getIdleTimeout</h1>  <p class="verinfo">(No version information available, might only be in Git)</p><p class="refpurpose"><span class="refname">ZMQDevice::getIdleTimeout</span> &mdash; <span class="dc-title">Get the idle timeout</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqdevice.getidletimeout-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQDevice::getIdleTimeout</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqdevice.php" class="type ZMQDevice" style="color:#EAB766">ZMQDevice</a></span></div>  <p class="para rdfs-comment">   Gets the idle callback timeout value. Added in ZMQ extension version 1.1.0.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqdevice.getidletimeout-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqdevice.getidletimeout-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   This method returns the idle callback timeout value.  </p> </div></div>
     * @return int This method returns the idle callback timeout value.*/
    public function getIdleTimeout() {}

/**
*<div id="zmqdevice.gettimertimeout" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQDevice::getTimerTimeout</h1>  <p class="verinfo">(No version information available, might only be in Git)</p><p class="refpurpose"><span class="refname">ZMQDevice::getTimerTimeout</span> &mdash; <span class="dc-title">Get the timer timeout</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqdevice.gettimertimeout-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQDevice::getTimerTimeout</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqdevice.php" class="type ZMQDevice" style="color:#EAB766">ZMQDevice</a></span></div>  <p class="para rdfs-comment">   Gets the timer callback timeout value. Added in ZMQ extension version 1.1.0.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqdevice.gettimertimeout-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqdevice.gettimertimeout-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   This method returns the timer timeout value.  </p> </div></div>
     * @return int This method returns the timer timeout value.*/
    public function getTimerTimeout() {}

/**
*<div id="zmqdevice.run" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQDevice::run</h1>  <p class="verinfo">(No version information available, might only be in Git)</p><p class="refpurpose"><span class="refname">ZMQDevice::run</span> &mdash; <span class="dc-title">Run the new device</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqdevice.run-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQDevice::run</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Runs the device.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqdevice.run-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqdevice.run-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Call to this method will block until the device is running. It is not recommended   that devices are used from interactive scripts. On failure this method will throw   ZMQDeviceException.  </p> </div></div>
*/
    public function run() {}

/**
*<div id="zmqdevice.setidlecallback" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQDevice::setIdleCallback</h1>  <p class="verinfo">(No version information available, might only be in Git)</p><p class="refpurpose"><span class="refname">ZMQDevice::setIdleCallback</span> &mdash; <span class="dc-title">Set the idle callback function</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqdevice.setidlecallback-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQDevice::setIdleCallback</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$cb_func</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$timeout</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$user_data</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqdevice.php" class="type ZMQDevice" style="color:#EAB766">ZMQDevice</a></span></div>  <p class="para rdfs-comment">   Sets the idle callback function. If idle timeout is defined the idle callback function   shall be called if the internal poll loop times out without events. If the callback function   returns false or a value that evaluates to false the device is stopped.   The callback function signature is callback (mixed $user_data).  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqdevice.setidlecallback-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">cb_func</span></dt>    <dd>     <span>      Callback function to invoke when the device is idle. Returning false      or a value that evaluates to false from this function will cause the       device to stop.     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">timeout</span></dt>    <dd>     <p class="para">      How often to invoke the idle callback in milliseconds. The idle callback is invoked      periodically when there is no activity on the device.      The timeout value guarantees that there is at least this amount of milliseconds between      invocations of the callback function.     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">user_data</span></dt>    <dd>     <p class="para">      Additional data to pass to the callback function.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqdevice.setidlecallback-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   On success this method returns the current object.  </p> </div></div>
     * @return ZMQDevice On success this method returns the current object.*/
    public function setIdleCallback($cb_func, $timeout, $user_data) {}

/**
*<div id="zmqdevice.setidletimeout" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQDevice::setIdleTimeout</h1>  <p class="verinfo">(No version information available, might only be in Git)</p><p class="refpurpose"><span class="refname">ZMQDevice::setIdleTimeout</span> &mdash; <span class="dc-title">Set the idle timeout</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqdevice.setidletimeout-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQDevice::setIdleTimeout</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$timeout</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqdevice.php" class="type ZMQDevice" style="color:#EAB766">ZMQDevice</a></span></div>  <p class="para rdfs-comment">   Sets the idle callback timeout value. The idle callback is invoked periodically when the device is   idle.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqdevice.setidletimeout-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">timeout</span></dt>    <dd>     <span>      The idle callback timeout value.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqdevice.setidletimeout-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   On success this method returns the current object.  </p> </div></div>
     * @return ZMQDevice On success this method returns the current object.*/
    public function setIdleTimeout($timeout) {}

/**
*<div id="zmqdevice.settimercallback" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQDevice::setTimerCallback</h1>  <p class="verinfo">(No version information available, might only be in Git)</p><p class="refpurpose"><span class="refname">ZMQDevice::setTimerCallback</span> &mdash; <span class="dc-title">Set the timer callback function</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqdevice.settimercallback-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQDevice::setTimerCallback</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$cb_func</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$timeout</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$user_data</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqdevice.php" class="type ZMQDevice" style="color:#EAB766">ZMQDevice</a></span></div>  <p class="para rdfs-comment">   Sets the timer callback function. The timer callback will be invoked after timeout has   passed. The difference between idle and timer callbacks are that idle callback is invoked   only when the device is idle.   The callback function signature is callback (mixed $user_data). Added in ZMQ extension version 1.1.0.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqdevice.settimercallback-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">cb_func</span></dt>    <dd>     <span>      Callback function to invoke when the device is idle. Returning false      or a value that evaluates to false from this function will cause the       device to stop.     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">timeout</span></dt>    <dd>     <p class="para">      How often to invoke the idle callback in milliseconds. The idle callback is invoked      periodically when there is no activity on the device.      The timeout value guarantees that there is at least this amount of milliseconds between      invocations of the callback function.     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">user_data</span></dt>    <dd>     <p class="para">      Additional data to pass to the callback function.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqdevice.settimercallback-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   On success this method returns the current object.  </p> </div></div>
     * @return ZMQDevice*/
    public function setTimerCallback($cb_func, $timeout, $user_data) {}

/**
*<div id="zmqdevice.settimertimeout" class="refentry"> <div class="refnamediv">  <h1 class="refname">ZMQDevice::setTimerTimeout</h1>  <p class="verinfo">(No version information available, might only be in Git)</p><p class="refpurpose"><span class="refname">ZMQDevice::setTimerTimeout</span> &mdash; <span class="dc-title">Set the timer timeout</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-zmqdevice.settimertimeout-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ZMQDevice::setTimerTimeout</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$timeout</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.zmqdevice.php" class="type ZMQDevice" style="color:#EAB766">ZMQDevice</a></span></div>  <p class="para rdfs-comment">   Sets the timer callback timeout value. The timer callback is invoked periodically if it&#039;s set.   Added in ZMQ extension version 1.1.0.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-zmqdevice.settimertimeout-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">timeout</span></dt>    <dd>     <span>      The timer callback timeout value.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-zmqdevice.settimertimeout-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   On success this method returns the current object.  </p> </div></div>
     * @return ZMQDevice*/
    public function setTimerTimeout($timeout) {}
}
class ZMQException extends Exception {}
class ZMQContextException extends ZMQException {}
class ZMQSocketException extends ZMQException {}
class ZMQPollException extends ZMQException {}
class ZMQDeviceException extends ZMQException {}
