<?php

// Start of lua v2.0.6.
// The actual lua version is different from the PECL package version

/**
*<div id="class.lua" class="reference"> <h1 class="title">Lua类</h1>  <div class="partintro"><p class="verinfo">(PECL lua &gt;=0.9.0)</p>  <div class="section" id="lua.intro">   <h2 class="title">简介</h2>   <p class="para">   </p>  </div>  <div class="section" id="lua.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">Lua</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">string</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.lua.php#lua.constants.lua-version"><var class="varname">LUA_VERSION</var></a></var><span class="initializer"> = Lua 5.1.4</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/lua.assign.php" class="methodname" style="color:#CC7832">assign</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/lua.call.php" class="methodname" style="color:#CC7832">call</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$lua_func</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$args</span><span class="initializer"> = ?</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$use_self</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/lua.call.php" class="methodname" style="color:#CC7832">__call</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$lua_func</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$args</span><span class="initializer"> = ?</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$use_self</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/lua.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$lua_script_file</span><span class="initializer"> = NULL</span></span>)</div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/lua.eval.php" class="methodname" style="color:#CC7832">eval</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$statements</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/lua.getversion.php" class="methodname" style="color:#CC7832">getVersion</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/lua.include.php" class="methodname" style="color:#CC7832">include</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$file</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/lua.registercallback.php" class="methodname" style="color:#CC7832">registerCallback</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$function</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>   }</div>  </div>    <div class="section" id="lua.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="lua.constants.lua-version"><strong><span>Lua::LUA_VERSION</span></strong></dt>     <dd>      <p class="para"/>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Lua::assign} — 将一个php变量赋值给Lua</li><li>{@link Lua::call} — 调用Lua函数</li><li>{@link Lua::__construct} — Lua 构造方法</li><li>{@link Lua::eval} — 将字符串当做Lua代码执行</li><li>{@link Lua::getVersion} — 获取Lua版本</li><li>{@link Lua::include} — 解析Lua脚本文件</li><li>{@link Lua::registerCallback} — 向Lua中注册php函数</li></ul></div>
*/
class Lua
{
    /**
     * @var string
     *
     * @link https://secure.php.net/manual/en/class.lua.php#lua.constants.lua-version
     */
    public const LUA_VERSION = '5.1.4';

    /**
     * @param null|string $lua_script_file
     * @link https://secure.php.net/manual/en/lua.construct.php
     */
    public function __construct(?string $lua_script_file = null) {}

/**
*<div id="lua.assign" class="refentry"> <div class="refnamediv">  <h1 class="refname">Lua::assign</h1>  <p class="verinfo">(PECL lua &gt;=0.9.0)</p><p class="refpurpose"><span class="refname">Lua::assign</span> &mdash; <span class="dc-title">将一个php变量赋值给Lua</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-lua.assign-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Lua::assign</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-lua.assign-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">name</span></dt>    <dd>     <span>           </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">value</span></dt>    <dd>     <p class="para">           </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-lua.assign-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   赋值成功返回<var class="varname">$this</var>否则返回<strong><span>null</span></strong>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-lua.assign-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Lua::assign()</strong></span>示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$lua </span><span style="color: #007700">= new </span><span style="color: #9876AA">Lua</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$lua</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">assign</span><span style="color: #007700">(</span><span style="color: #DD0000">"php_var"</span><span style="color: #007700">, array(</span><span style="color: #9876AA">1</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">)); </span><span style="color: #FF8000">//lua table index begin with 1<br /></span><span style="color: #9876AA">$lua</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">eval</span><span style="color: #007700">(&lt;&lt;&lt;CODE<br /></span><span style="color: #DD0000">    print(php_var);<br /></span><span style="color: #007700">CODE<br />);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br> (<br>     [1] =&gt; 1<br>     [2] =&gt; 2<br>     [3] =&gt; 3<br> )<br></span></div>   </div>  </div> </div></div>
     * @return $this|null Returns $this or NULL on failure.*/
    public function assign(string $name, $value) {}

/**
*<div id="lua.call" class="refentry"> <div class="refnamediv">  <h1 class="refname">Lua::call</h1>  <h1 class="refname">Lua::__call</h1>  <p class="verinfo">(PECL lua &gt;=0.9.0)</p><p class="refpurpose"><span class="refname">Lua::call</span> -- <span class="refname">Lua::__call</span> &mdash; <span class="dc-title">调用Lua函数</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-lua.call-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Lua::call</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$lua_func</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$args</span><span class="initializer"> = ?</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$use_self</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Lua::__call</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$lua_func</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$args</span><span class="initializer"> = ?</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$use_self</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-lua.call-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">lua_func</span></dt>    <dd>     <span>       lua中的函数名。     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">args</span></dt>    <dd>     <p class="para">      向Lua函数传入的参数。     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">use_self</span></dt>    <dd>     <p class="para">       是否使用<span>self</span>。     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-lua.call-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回调用函数的结果，参数错误返回<strong><span>null</span></strong> ，其它错误返回<strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-lua.call-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Lua::call()</strong></span>示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$lua </span><span style="color: #007700">= new </span><span style="color: #9876AA">Lua</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$lua</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">eval</span><span style="color: #007700">(&lt;&lt;&lt;CODE<br /></span><span style="color: #DD0000">    function dummy(foo, bar)<br />        print(foo, ",", bar)<br />    end<br /></span><span style="color: #007700">CODE<br />);<br /></span><span style="color: #9876AA">$lua</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">call</span><span style="color: #007700">(</span><span style="color: #DD0000">"dummy"</span><span style="color: #007700">, array(</span><span style="color: #DD0000">"Lua"</span><span style="color: #007700">, </span><span style="color: #DD0000">"geiliable\n"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$lua</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">dummy</span><span style="color: #007700">(</span><span style="color: #DD0000">"Lua"</span><span style="color: #007700">, </span><span style="color: #DD0000">"geiliable"</span><span style="color: #007700">); </span><span style="color: #FF8000">// __call()<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$lua</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">call</span><span style="color: #007700">(array(</span><span style="color: #DD0000">"table"</span><span style="color: #007700">, </span><span style="color: #DD0000">"concat"</span><span style="color: #007700">), array(array(</span><span style="color: #9876AA">1</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">3</span><span style="color: #007700">), </span><span style="color: #DD0000">"-"</span><span style="color: #007700">)));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Lua,geiliable<br>Lua,geiliable<br>string(5) &quot;1-2-3&quot;<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-lua.call-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.call" class="link">__call()</a></li>  </ul> </div></div>
     * @return mixed|false Returns result of the called function, null for wrong arguments or FALSE on other failure.*/
    public function call(callable $lua_func, array $args = [], bool $use_self = false) {}

/**
*<div id="lua.eval" class="refentry"> <div class="refnamediv">  <h1 class="refname">Lua::eval</h1>  <p class="verinfo">(PECL lua &gt;=0.9.0)</p><p class="refpurpose"><span class="refname">Lua::eval</span> &mdash; <span class="dc-title">将字符串当做Lua代码执行</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-lua.eval-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Lua::eval</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$statements</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-lua.eval-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">statements</span></dt>    <dd>     <span>           </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-lua.eval-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回运行结果，参数错误返回<strong><span>null</span></strong> ，其它错误返回<strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-lua.eval-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Lua::eval()</strong></span>示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$lua </span><span style="color: #007700">= new </span><span style="color: #9876AA">Lua</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$lua</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">eval</span><span style="color: #007700">(&lt;&lt;&lt;CODE<br /></span><span style="color: #DD0000">    print(2);<br /></span><span style="color: #007700">CODE<br />);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>2<br></span></div>   </div>  </div> </div></div>
     * @return mixed|false Returns result of evaled code, NULL for wrong arguments or FALSE on other failure.*/
    public function eval(string $statements) {}

/**
*<div id="lua.include" class="refentry"> <div class="refnamediv">  <h1 class="refname">Lua::include</h1>  <p class="verinfo">(PECL lua &gt;=0.9.0)</p><p class="refpurpose"><span class="refname">Lua::include</span> &mdash; <span class="dc-title">解析Lua脚本文件</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-lua.include-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Lua::include</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$file</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-lua.include-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">file</span></dt>    <dd>     <span>           </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-lua.include-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回脚本文件运行结果，参数错误返回<strong><span>null</span></strong> ，其它错误返回<strong><span>false</span></strong>。  </p> </div></div>
     * @return mixed|false Returns result of included code, NULL for wrong arguments or FALSE on other failure.*/
    public function include(string $file) {}

/**
*<div id="lua.getversion" class="refentry"> <div class="refnamediv">  <h1 class="refname">Lua::getVersion</h1>  <p class="verinfo">(PECL lua &gt;=0.9.0)</p><p class="refpurpose"><span class="refname">Lua::getVersion</span> &mdash; <span class="dc-title">获取Lua版本</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-lua.getversion-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Lua::getVersion</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-lua.getversion-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-lua.getversion-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <var class="varname">Lua::LUA_VERSION</var>。  </p> </div></div>
     * @return string Returns Lua::LUA_VERSION*/
    public function getVersion(): string {}

/**
*<div id="lua.registercallback" class="refentry"> <div class="refnamediv">  <h1 class="refname">Lua::registerCallback</h1>  <p class="verinfo">(No version information available, might only be in Git)</p><p class="refpurpose"><span class="refname">Lua::registerCallback</span> &mdash; <span class="dc-title">向Lua中注册php函数</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-lua.registercallback-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Lua::registerCallback</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$function</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   向Lua注册php函数，函数名为&quot;$name&quot;  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-lua.registercallback-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">name</span></dt>    <dd>     <span>           </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">function</span></dt>    <dd>     <p class="para">      一个有效的PHP回调函数     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-lua.registercallback-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功返回<var class="varname">$this</var>，参数错误返回<strong><span>null</span></strong> ，其它错误返回<strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-lua.registercallback-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Lua::registerCallback()</strong></span>示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$lua </span><span style="color: #007700">= new </span><span style="color: #9876AA">Lua</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$lua</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">registerCallback</span><span style="color: #007700">(</span><span style="color: #DD0000">"echo"</span><span style="color: #007700">, </span><span style="color: #DD0000">"var_dump"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$lua</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">eval</span><span style="color: #007700">(&lt;&lt;&lt;CODE<br /></span><span style="color: #DD0000">    echo({1, 2, 3});<br /></span><span style="color: #007700">CODE<br />);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(3) {<br>  [1]=&gt;<br>  float(1)<br>  [2]=&gt;<br>  float(2)<br>  [3]=&gt;<br>  float(3)<br>}<br></span></div>   </div>  </div> </div></div>
     * @return $this|null|false Returns $this, NULL for wrong arguments or FALSE on other failure.*/
    public function registerCallback(string $name, callable $function) {}
}
