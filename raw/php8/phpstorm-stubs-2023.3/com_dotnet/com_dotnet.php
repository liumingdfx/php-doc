<?php

// Start of com_dotnet v.

/**
*<div id="class.com" class="reference">  <h1 class="title">The com class</h1> <div class="partintro"><p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7, PHP 8)</p>  <div class="section" id="com.intro">   <h2 class="title">简介</h2>   <p class="para">    The com class allows you to instantiate an OLE compatible COM object and    call its methods and access its properties.   </p>  </div>  <div class="section" id="com.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">com</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.variant.php" class="classname">variant</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/com.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$module_name</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">null</span></span> <span class="parameter" style="color:#3A95FF">$server_name</span><span class="initializer"> = <strong><span>null</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$codepage</span><span class="initializer"> = <strong><span>CP_ACP</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$typelib</span><span class="initializer"> = &quot;&quot;</span></span><br>)</div>   }</div>  </div>  <div class="section" id="class.com.overloadedmethods">   <h2 class="title">Overloaded Methods</h2>   <p class="para">    The returned object is an overloaded object, which means that PHP does    not see any fixed methods as it does with regular classes; instead, any    property or method accesses are passed through to COM.   </p>   <p class="para">    PHP will automatically detect methods that accept    parameters by reference, and will automatically convert regular PHP    variables to a form that can be passed by reference.  This means that you    can call the method very naturally; you needn&#039;t go to any extra effort in    your code.   </p>  </div>  <div class="section" id="class.com.examples">   <h2 class="title">com examples</h2>   <p class="para">    <div class="example" id="">     <p><strong>示例 #1 com example (1)</strong></p>     <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// starting word<br /></span><span style="color: #9876AA">$word </span><span style="color: #007700">= new </span><span style="color: #9876AA">com</span><span style="color: #007700">(</span><span style="color: #DD0000">"word.application"</span><span style="color: #007700">) or die(</span><span style="color: #DD0000">"Unable to instantiate Word"</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"Loaded Word, version </span><span style="color: #007700">{</span><span style="color: #9876AA">$word</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Version</span><span style="color: #007700">}</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//bring it to front<br /></span><span style="color: #9876AA">$word</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Visible </span><span style="color: #007700">= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//open an empty document<br /></span><span style="color: #9876AA">$word</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Documents</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Add</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">//do some weird stuff<br /></span><span style="color: #9876AA">$word</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Selection</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">TypeText</span><span style="color: #007700">(</span><span style="color: #DD0000">"This is a test..."</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$word</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Documents</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">SaveAs</span><span style="color: #007700">(</span><span style="color: #DD0000">"Useless test.doc"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//closing word<br /></span><span style="color: #9876AA">$word</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Quit</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">//free the object<br /></span><span style="color: #9876AA">$word </span><span style="color: #007700">= </span><span style="color: #9876AA">null</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    </div>   </p>   <p class="para">    <div class="example" id="">     <p><strong>示例 #2 com example (2)</strong></p>     <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$conn </span><span style="color: #007700">= new </span><span style="color: #9876AA">com</span><span style="color: #007700">(</span><span style="color: #DD0000">"ADODB.Connection"</span><span style="color: #007700">) or die(</span><span style="color: #DD0000">"Cannot start ADO"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$conn</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Open</span><span style="color: #007700">(</span><span style="color: #DD0000">"Provider=SQLOLEDB; Data Source=localhost;<br />Initial Catalog=database; User ID=user; Password=password"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$rs </span><span style="color: #007700">= </span><span style="color: #9876AA">$conn</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Execute</span><span style="color: #007700">(</span><span style="color: #DD0000">"SELECT * FROM sometable"</span><span style="color: #007700">);    </span><span style="color: #FF8000">// Recordset<br /><br /></span><span style="color: #9876AA">$num_columns </span><span style="color: #007700">= </span><span style="color: #9876AA">$rs</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Fields</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Count</span><span style="color: #007700">();<br />echo </span><span style="color: #9876AA">$num_columns </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br />for (</span><span style="color: #9876AA">$i</span><span style="color: #007700">=</span><span style="color: #9876AA">0</span><span style="color: #007700">; </span><span style="color: #9876AA">$i </span><span style="color: #007700">&lt; </span><span style="color: #9876AA">$num_columns</span><span style="color: #007700">; </span><span style="color: #9876AA">$i</span><span style="color: #007700">++) {<br />    </span><span style="color: #9876AA">$fld</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">] = </span><span style="color: #9876AA">$rs</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Fields</span><span style="color: #007700">(</span><span style="color: #9876AA">$i</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">$rowcount </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />while (!</span><span style="color: #9876AA">$rs</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">EOF</span><span style="color: #007700">) {<br />    for (</span><span style="color: #9876AA">$i</span><span style="color: #007700">=</span><span style="color: #9876AA">0</span><span style="color: #007700">; </span><span style="color: #9876AA">$i </span><span style="color: #007700">&lt; </span><span style="color: #9876AA">$num_columns</span><span style="color: #007700">; </span><span style="color: #9876AA">$i</span><span style="color: #007700">++) {<br />        echo </span><span style="color: #9876AA">$fld</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">value </span><span style="color: #007700">. </span><span style="color: #DD0000">"\t"</span><span style="color: #007700">;<br />    }<br />    echo </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$rowcount</span><span style="color: #007700">++;            </span><span style="color: #FF8000">// increments rowcount<br />    </span><span style="color: #9876AA">$rs</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">MoveNext</span><span style="color: #007700">();<br />}<br /><br /></span><span style="color: #9876AA">$rs</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Close</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$conn</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Close</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$rs </span><span style="color: #007700">= </span><span style="color: #9876AA">null</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$conn </span><span style="color: #007700">= </span><span style="color: #9876AA">null</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>     </div>    </div>   </p>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link com::__construct} — com class constructor</li></ul></div>
*/
class COM
{
    /**
     * (PHP 4 &gt;= 4.1.0, PHP 5, PHP 7)<br/>
     * COM class constructor.
     * @param string $module_name
     * @param string $server_name [optional]
     * @param int $codepage [optional]
     * @param string $typelib [optional]
     */
    public function __construct($module_name, $server_name = null, $codepage = CP_ACP, $typelib = null) {}

    public function __get($name) {}

    public function __set($name, $value) {}

    public function __call($name, $args) {}
}

/**
*<div id="class.dotnet" class="reference">  <h1 class="title">The dotnet class</h1> <div class="partintro"><p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7, PHP 8)</p>  <div class="section" id="dotnet.intro">   <h2 class="title">简介</h2>   <p class="para">    The dotnet class allows you to instantiate a class from a .Net assembly and    call its methods and access its properties, if the class and the methods and    properties are <a href="https://www.php.net/manual/zh/https://docs.microsoft.com/dotnet/api/system.runtime.interopservices.comvisibleattribute" class="link external">&raquo;&nbsp;visible to COM</a>.   </p>   <p class="para">    Neither instantiating static classes nor calling static methods is supported.    Instantiating generic classes such as <span>System.Collections.Generic.List</span>    is not supported either.   </p>   <p class="para">    Some .Net classes do not implement IDispatch, so while they can be instantiated,    calling methods or accessing properties on these classes is not supported.   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <p class="para">     You need to install the .Net runtime on your web server to take advantage     of this feature.    </p>   </p></blockquote>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <p class="para">     Prior to PHP 8.0.0, .Net framework 4.0 and later were not supported by the <span class="classname"><strong class="classname">dotnet</strong></span>     class. If assemblies had been registered with <strong class="command">regasm.exe</strong>,     the classes could be instantiated as <span class="classname"><a href="https://www.php.net/manual/zh/class.com.php" class="classname">com</a></span> objects, though.     As of PHP 8.0.0, .Net framework 4.0 and later are supported via the <var class="filename">php.ini</var>     directive <a href="https://www.php.net/manual/zh/com.configuration.php#ini.com.dotnet-version" class="link">com.dotnet_version</a>.    </p>   </p></blockquote>  </div>  <div class="section" id="dotnet.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">dotnet</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.variant.php" class="classname">variant</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/dotnet.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$assembly_name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$datatype_name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$codepage</span><span class="initializer"> = <strong><span>CP_ACP</span></strong></span></span>)</div>   }</div>  </div>  <div class="section" id="class.dotnet.overloadedmethods">   <h2 class="title">Overloaded Methods</h2>   <p class="para">    The returned object is an overloaded object, which means that PHP does    not see any fixed methods as it does with regular classes; instead, any    property or method accesses are passed through to COM and from there to    DOTNET.  In other words, the .Net object is mapped through the COM    interoperability layer provided by the .Net runtime.   </p>   <p class="para">    Once you have created a dotnet object, PHP treats it identically to any    other COM object; all the same rules apply.   </p>  </div>  <div class="section" id="class.dotnet.examples">   <h2 class="title">dotnet examples</h2>   <p class="para">    <div class="example" id="">     <p><strong>示例 #1 dotnet example</strong></p>     <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$stack </span><span style="color: #007700">= new </span><span style="color: #9876AA">dotnet</span><span style="color: #007700">(</span><span style="color: #DD0000">"mscorlib"</span><span style="color: #007700">, </span><span style="color: #DD0000">"System.Collections.Stack"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$stack</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Push</span><span style="color: #007700">(</span><span style="color: #DD0000">".Net"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$stack</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Push</span><span style="color: #007700">(</span><span style="color: #DD0000">"Hello "</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$stack</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Pop</span><span style="color: #007700">() . </span><span style="color: #9876AA">$stack</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Pop</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>     </div>    </div>   </p>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link dotnet::__construct} — dotnet class constructor</li></ul></div>
*/
class DOTNET
{
    /**
     * (PHP 4 &gt;= 4.1.0, PHP 5, PHP 7)<br/>
     * COM class constructor.
     * @param string $assembly_name
     * @param string $class_name
     * @param int $codepage [optional]
     */
    public function __construct($assembly_name, string $class_name, $codepage = CP_ACP) {}

    public function __get($name) {}

    public function __set($name, $value) {}

    public function __call($name, $args) {}
}

/**
*<div id="class.variant" class="reference">  <h1 class="title">variant class</h1> <div class="partintro"><p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7, PHP 8)</p>  <div class="section" id="variant.intro">   <h2 class="title">简介</h2>   <p class="para">    The VARIANT is COM&#039;s equivalent of the PHP zval; it is a structure that    can contain a value with a range of different possible types.  The variant    class provided by the COM extension allows you to have more control over    the way that PHP passes values to and from COM.   </p>  </div>  <div class="section" id="variant.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">variant</strong></strong>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/variant.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$type</span><span class="initializer"> = <strong><span>VT_EMPTY</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$codepage</span><span class="initializer"> = <strong><span>CP_ACP</span></strong></span></span>)</div>   }</div>  </div>  <div class="section" id="class.variant.examples">   <h2 class="title">variant examples</h2>   <p class="para">    <div class="example" id="">     <p><strong>示例 #1 variant example</strong></p>     <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$v </span><span style="color: #007700">= new </span><span style="color: #9876AA">variant</span><span style="color: #007700">(</span><span style="color: #9876AA">42</span><span style="color: #007700">);<br />print </span><span style="color: #DD0000">"The type is " </span><span style="color: #007700">. </span><span style="color: #9876AA">variant_get_type</span><span style="color: #007700">(</span><span style="color: #9876AA">$v</span><span style="color: #007700">) . </span><span style="color: #DD0000">"&lt;br/&gt;"</span><span style="color: #007700">;<br />print </span><span style="color: #DD0000">"The value is " </span><span style="color: #007700">. </span><span style="color: #9876AA">$v </span><span style="color: #007700">. </span><span style="color: #DD0000">"&lt;br/&gt;"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>     </div>    </div>   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <p class="para">     When returning     a value or fetching a variant property, the variant is converted to a PHP     value only when there is a direct mapping between the types that would     not result in a loss of information.  In all other cases, the result is     returned as an instance of the variant class.  You can force PHP to     convert or evaluate the variant as a PHP native type by using a casting     operator explicitly, or implicitly casting to a string by     <span class="function">{@link print}</span>ing it.  You may use the wide range of variant     functions to perform arithmetic operations on variants without forcing a     conversion or risking a loss of data.    </p>   </p></blockquote>   <p class="para">    See also <span class="function">{@link variant_get_type()}</span>.   </p>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link variant::__construct} — variant class constructor</li></ul></div>
*/
class VARIANT
{
    /**
     * (PHP 4 &gt;= 4.1.0, PHP 5, PHP 7)<br/>
     * COM class constructor.
     * @param mixed $value [optional]
     * @param int $type [optional]
     * @param int $codepage [optional]
     */
    public function __construct($value = null, int $type = VT_EMPTY, $codepage = CP_ACP) {}

    public function __get($name) {}

    public function __set($name, $value) {}

    public function __call($name, $args) {}
}

/**
*<div id="class.com-exception" class="reference"> <h1 class="title">The com_exception class</h1>  <div class="partintro"><p class="verinfo">(PHP 5, PHP 7, PHP 8)</p>  <div class="section" id="com-exception.intro">   <h2 class="title">简介</h2>   <p class="para">   </p>  </div>  <div class="section" id="com-exception.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">final</span>     <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">com_exception</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.exception.php" class="classname">Exception</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div> </div></div>
*/
class com_exception extends \Exception {}

/**
*<div id="function.com-create-guid" class="refentry"> <div class="refnamediv">  <h1 class="refname">com_create_guid</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">com_create_guid</span> &mdash; <span class="dc-title">Generate a globally unique identifier (GUID)</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.com-create-guid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>com_create_guid</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Generates a Globally Unique Identifier (GUID).  </p>  <p class="para">   A GUID is generated in the same way as DCE UUID&#039;s, except that the   Microsoft convention is to enclose a GUID in curly braces.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.com-create-guid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.com-create-guid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the GUID as a string,  或者在失败时返回 <strong><span>false</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.com-create-guid-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function"><strong style="color:#CC7832">uuid_create()</strong></span> in the PECL uuid extension</li>   </ul>  </span> </div></div>
 * @return string*/
function com_create_guid() {}

/**
*<div id="function.com-event-sink" class="refentry"> <div class="refnamediv">  <h1 class="refname">com_event_sink</h1>  <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">com_event_sink</span> &mdash; <span class="dc-title">Connect events from a COM object to a PHP object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.com-event-sink-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>com_event_sink</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span> <span class="parameter" style="color:#3A95FF">$variant</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$sink_object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">null</span></span> <span class="parameter" style="color:#3A95FF">$sink_interface</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Instructs COM to sink events generated by   <span class="parameter" style="color:#3A95FF">variant</span> into the PHP object   <span class="parameter" style="color:#3A95FF">sink_object</span>.  </p>  <p class="para">   Be careful how you use this feature; if you are doing something similar   to the example below, then it doesn&#039;t really make sense to run it in a   web server context.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.com-event-sink-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">variant</span></dt>     <dd>      <p class="para">      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">sink_object</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">sink_object</span> should be an instance of a class with       methods named after those of the desired dispinterface; you may use       <span class="function">{@link com_print_typeinfo()}</span> to help generate a template class       for this purpose.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">sink_interface</span></dt>     <dd>      <p class="para">       PHP will attempt to use the default dispinterface type specified by       the typelibrary associated with <span class="parameter" style="color:#3A95FF">variant</span>, but       you may override this choice by setting       <span class="parameter" style="color:#3A95FF">sink_interface</span> to the name of the dispinterface       that you want to use.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.com-event-sink-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.com-event-sink-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">sink_interface</span> is nullable now.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.com-event-sink-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 COM event sink example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">IEEventSinker </span><span style="color: #007700">{<br />    var </span><span style="color: #9876AA">$terminated </span><span style="color: #007700">= </span><span style="color: #9876AA">false</span><span style="color: #007700">;<br /><br />   function </span><span style="color: #9876AA">ProgressChange</span><span style="color: #007700">(</span><span style="color: #9876AA">$progress</span><span style="color: #007700">, </span><span style="color: #9876AA">$progressmax</span><span style="color: #007700">) {<br />      echo </span><span style="color: #DD0000">"Download progress: </span><span style="color: #9876AA">$progress</span><span style="color: #DD0000"> / </span><span style="color: #9876AA">$progressmax</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />    }<br /><br />    function </span><span style="color: #9876AA">DocumentComplete</span><span style="color: #007700">(&amp;</span><span style="color: #9876AA">$dom</span><span style="color: #007700">, </span><span style="color: #9876AA">$url</span><span style="color: #007700">) {<br />      echo </span><span style="color: #DD0000">"Document </span><span style="color: #9876AA">$url</span><span style="color: #DD0000"> complete\n"</span><span style="color: #007700">;<br />    }<br /><br />    function </span><span style="color: #9876AA">OnQuit</span><span style="color: #007700">() {<br />      echo </span><span style="color: #DD0000">"Quit!\n"</span><span style="color: #007700">;<br />      </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">terminated </span><span style="color: #007700">= </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br />    }<br />}<br /></span><span style="color: #9876AA">$ie </span><span style="color: #007700">= new </span><span style="color: #9876AA">COM</span><span style="color: #007700">(</span><span style="color: #DD0000">"InternetExplorer.Application"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sink </span><span style="color: #007700">= new </span><span style="color: #9876AA">IEEventSinker</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">com_event_sink</span><span style="color: #007700">(</span><span style="color: #9876AA">$ie</span><span style="color: #007700">, </span><span style="color: #9876AA">$sink</span><span style="color: #007700">, </span><span style="color: #DD0000">"DWebBrowserEvents2"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$ie</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Visible </span><span style="color: #007700">= </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$ie</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">Navigate</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://www.example.org"</span><span style="color: #007700">);<br />while(!</span><span style="color: #9876AA">$sink</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">terminated</span><span style="color: #007700">) {<br />  </span><span style="color: #9876AA">com_message_pump</span><span style="color: #007700">(</span><span style="color: #9876AA">4000</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">$ie </span><span style="color: #007700">= </span><span style="color: #9876AA">null</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.com-event-sink-notes">  <h3 class="title">注释</h3>  <div class="caution"><strong class="caution">警告</strong>   <p class="para">    Prior to PHP 8.0.0, calling <span class="function">{@link exit()}</span> from any of the event    handlers is not supported, and may cause PHP to hang. This can be worked around    by throwing an exception from the event handler, catching the exception in    the main code, and calling <span class="function">{@link exit()}</span> from there.   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.com-event-sink-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link com_print_typeinfo()} - Print out a PHP class definition for a dispatchable interface</span></li>    <li class="member"><span class="function">{@link com_message_pump()} - Process COM messages, sleeping for up to timeoutms milliseconds</span></li>   </ul>  </span> </div></div>
 * @return bool*/
function com_event_sink($comobject, $sinkobject, $sinkinterface = null) {}

/**
*<div id="function.com-get-active-object" class="refentry"> <div class="refnamediv">  <h1 class="refname">com_get_active_object</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">com_get_active_object</span> &mdash; <span class="dc-title">Returns a handle to an already running instance of a COM object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.com-get-active-object-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>com_get_active_object</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$prog_id</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$codepage</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">com_get_active_object()</strong></span> is similar to creating a new   instance of a <a href="https://www.php.net/manual/zh/class.com.php" class="xref">com</a> object, except that it will   only return an object to your script if the object is already running.   OLE applications use something known as the &quot;<span>Running Object Table</span>&quot; to   allow well-known applications to be launched only once; this function   exposes the COM library function GetActiveObject() to get a handle on a   running instance.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.com-get-active-object-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">prog_id</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">prog_id</span> must be either the ProgID or CLSID for       the object that you want to access (for example       <span>Word.Application</span>).      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">codepage</span></dt>     <dd>      <p class="para">       Acts in precisely the same way that it does for the <a href="https://www.php.net/manual/zh/class.com.php" class="xref">com</a> class.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.com-get-active-object-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   If the requested object is running, it will be returned to your script   just like any other COM object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.com-get-active-object-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   There are a variety of reasons why this function might fail, the most   common being that the object is not already running.  In that situation,   the exception error code will be <strong><span>MK_E_UNAVAILABLE</span></strong>;   you can use the <span>getCode</span> method of the exception object   to check the exception code.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.com-get-active-object-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">codepage</span> is nullable now.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.com-get-active-object-notes">  <h3 class="title">注释</h3>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    Using <span class="function"><strong style="color:#CC7832">com_get_active_object()</strong></span> in a web server context    is not always a smart idea.  Most COM/OLE applications are not designed    to handle more than one client concurrently, even (or especially!)    Microsoft Office.  You should read <a href="http://support.microsoft.com/kb/257757" class="link external">&raquo;&nbsp;Considerations for Server-Side    Automation of Office</a> for more information on the general issues    involved.   </p>  </div> </div></div>
 * @return \VARIANT*/
function com_get_active_object($progid, $code_page = CP_ACP) {}

/**
*<div id="function.com-load-typelib" class="refentry"> <div class="refnamediv">  <h1 class="refname">com_load_typelib</h1>  <p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">com_load_typelib</span> &mdash; <span class="dc-title">载入 Typelib</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.com-load-typelib-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>com_load_typelib</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$typelib</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$case_insensitive</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   载入类型库并在引擎中注册它们的常量，就像使用 <span class="function">{@link define()}</span> 定义一样。  </p>  <p class="para">   注意，使用 <a href="https://www.php.net/manual/zh/com.configuration.php#ini.com.typelib-file" class="link">com.typelib-file</a> <var class="filename">php.ini</var> 配置设置来预载入和注册常量会更加有效，尽管不是那么灵活。  </p>  <p class="para">   如果开启 <a href="https://www.php.net/manual/zh/com.configuration.php#ini.com.autoregister-typelib" class="link">com.autoregister-typelib</a>，然后   PHP 将在实例化 COM 对象时尝试自动注册与其相关的常量。这取决于 COM 对象本身提供的接口并且不总是可用。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.com-load-typelib-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">typelib</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">typelib</span> 可以是以下其中一个：       <ul class="itemizedlist">        <li class="listitem">         <p class="para">          <span>.tlb</span> 文件或者包含类型库的可执行模块的文件名。         </p>        </li>        <li class="listitem">         <p class="para">          类型库 GUID，后跟版本号，例如          <span>{00000200-0000-0010-8000-00AA006D2EA4},2,0</span>。         </p>        </li>        <li class="listitem">         <p class="para">          类型库名称，例如 <span>Microsoft OLE DB ActiveX Data          Objects 1.0 Library</span>。         </p>        </li>       </ul>       PHP 将会尝试按照此顺序解析类型库，随着该列表的推进，该过程变得越来越昂贵；通过物理枚举注册表来按名称搜索类型库，直到找到匹配项。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">case_insensitive</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">case_insensitive</span> 的行为正好与 <span class="function">{@link define()}</span>       中的 <span>$case_insensitive</span> 参数相反。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.com-load-typelib-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
 * @return bool*/
function com_load_typelib($typelib_name, $case_insensitive = true) {}

/**
*<div id="function.com-message-pump" class="refentry"> <div class="refnamediv">  <h1 class="refname">com_message_pump</h1>  <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">com_message_pump</span> &mdash; <span class="dc-title">Process COM messages, sleeping for up to timeoutms milliseconds</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.com-message-pump-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>com_message_pump</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$timeout_milliseconds</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   This function will sleep for up to <span class="parameter" style="color:#3A95FF">timeout_milliseconds</span>   milliseconds, or until a message arrives in the queue.  </p>  <p class="para">   The purpose of this function is to route COM calls between apartments and   handle various synchronization issues.  This allows your script to wait   efficiently for events to be triggered, while still handling other events   or running other code in the background.  You should use it in a loop, as   demonstrated by the example in the <span class="function">{@link com_event_sink()}</span>   function, until you are finished using event bound COM objects.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.com-message-pump-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">timeout_milliseconds</span></dt>     <dd>      <p class="para">       The timeout, in milliseconds.      </p>      <p class="para">       If you do not specify a value for <span class="parameter" style="color:#3A95FF">timeout_milliseconds</span>,       then 0 will be assumed.  A 0 value means that no waiting will be       performed; if there are messages pending they will be dispatched as       before; if there are no messages pending, the function will return       <strong><span>false</span></strong> immediately without sleeping.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.com-message-pump-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   If a message or messages arrives before the timeout, they will be   dispatched, and the function will return <strong><span>true</span></strong>. If the timeout occurs and   no messages were processed, the return value will be <strong><span>false</span></strong>.  </p> </div></div>
 * @return bool*/
function com_message_pump($timeoutms = 0) {}

/**
*<div id="function.com-print-typeinfo" class="refentry"> <div class="refnamediv">  <h1 class="refname">com_print_typeinfo</h1>  <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">com_print_typeinfo</span> &mdash; <span class="dc-title">Print out a PHP class definition for a dispatchable interface</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.com-print-typeinfo-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>com_print_typeinfo</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$variant</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$dispatch_interface</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$display_sink</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   The purpose of this function is to help generate a skeleton class for use   as an event sink.  You may also use it to generate a dump of any COM   object, provided that it supports enough of the introspection interfaces,   and that you know the name of the interface you want to display.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.com-print-typeinfo-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">variant</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">variant</span> should be either an instance of a COM       object, or be the name of a typelibrary (which will be resolved according       to the rules set out in <span class="function">{@link com_load_typelib()}</span>).      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">dispatch_interface</span></dt>     <dd>      <p class="para">       The name of an <span>IDispatch</span> descendant interface that you want to display.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">display_sink</span></dt>     <dd>      <p class="para">       If set to <strong><span>true</span></strong>, the corresponding sink interface will be displayed       instead.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.com-print-typeinfo-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.com-print-typeinfo-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link com_event_sink()} - Connect events from a COM object to a PHP object</span></li>    <li class="member"><span class="function">{@link com_load_typelib()} - 载入 Typelib</span></li>   </ul>  </span> </div></div>
 * @return bool*/
function com_print_typeinfo($comobject, $dispinterface = null, $wantsink = false) {}

/**
*<div id="function.variant-abs" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_abs</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_abs</span> &mdash; <span class="dc-title">Returns the absolute value of a variant</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-abs-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_abs</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   Returns the absolute value of a variant.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-abs-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The variant.      </p>     </dd>       </dl>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function">{@link variant_add()}</span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></span></blockquote>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-abs-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the absolute value of <span class="parameter" style="color:#3A95FF">value</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.variant-abs-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-abs-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link abs()} - 绝对值</span></li>   </ul>  </span> </div></div>
 * @return mixed*/
function variant_abs($val) {}

/**
*<div id="function.variant-add" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_add</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_add</span> &mdash; <span class="dc-title">&quot;Adds&quot; two variant values together and returns the result</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-add-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_add</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$left</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$right</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   Adds <span class="parameter" style="color:#3A95FF">left</span> to <span class="parameter" style="color:#3A95FF">right</span> using   the following rules (taken from the MSDN library), which correspond to   those of Visual Basic:   <table class="doctable table">    <caption><strong>Variant Addition Rules</strong></caption>        <thead>     <tr>      <th>If</th>      <th>Then</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>Both expressions are of the string type</td>      <td>Concatenation</td>     </tr>     <tr>      <td>One expression is a string type and the other a      character</td>      <td>Addition</td>     </tr>     <tr>      <td>One expression is numeric and the other is a string</td>      <td>Addition</td>     </tr>     <tr>      <td>Both expressions are numeric</td>      <td>Addition</td>     </tr>     <tr>      <td>Either expression is NULL</td>      <td>NULL is returned</td>     </tr>     <tr>      <td>Both expressions are empty</td>      <td>Integer subtype is returned</td>     </tr>    </tbody>     </table> </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-add-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">left</span></dt>     <dd>      <p class="para">       The left operand.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">right</span></dt>     <dd>      <p class="para">       The right operand.      </p>     </dd>       </dl>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function"><strong style="color:#CC7832">variant_add()</strong></span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></span></blockquote>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-add-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the result.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.variant-add-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-add-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link variant_sub()} - Subtracts the value of the right variant from the left variant value</span></li>   </ul>  </span> </div></div>
 * @return mixed*/
function variant_add($left, $right) {}

/**
*<div id="function.variant-and" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_and</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_and</span> &mdash; <span class="dc-title">Performs a bitwise AND operation between two variants</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-and-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_and</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$left</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$right</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   Performs a bitwise AND operation.   Note that this is slightly different from a regular AND operation.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-and-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">left</span></dt>     <dd>      <p class="para">       The left operand.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">right</span></dt>     <dd>      <p class="para">       The right operand.      </p>     </dd>       </dl>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function">{@link variant_add()}</span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></span></blockquote>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-and-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <table class="doctable table">    <caption><strong>Variant AND Rules</strong></caption>         <thead>      <tr>       <th>If <span class="parameter" style="color:#3A95FF">left</span> is</th>       <th>If <span class="parameter" style="color:#3A95FF">right</span> is</th>       <th>then the result is</th>      </tr>     </thead>     <tbody class="tbody">      <tr><td><strong><span>true</span></strong></td><td><strong><span>true</span></strong></td><td><strong><span>true</span></strong></td></tr>      <tr><td><strong><span>true</span></strong></td><td><strong><span>false</span></strong></td><td><strong><span>false</span></strong></td></tr>      <tr><td><strong><span>true</span></strong></td><td><strong><span>null</span></strong></td><td><strong><span>null</span></strong></td></tr>      <tr><td><strong><span>false</span></strong></td><td><strong><span>true</span></strong></td><td><strong><span>false</span></strong></td></tr>      <tr><td><strong><span>false</span></strong></td><td><strong><span>false</span></strong></td><td><strong><span>false</span></strong></td></tr>      <tr><td><strong><span>false</span></strong></td><td><strong><span>null</span></strong></td><td><strong><span>false</span></strong></td></tr>      <tr><td><strong><span>null</span></strong></td><td><strong><span>true</span></strong></td><td><strong><span>null</span></strong></td></tr>      <tr><td><strong><span>null</span></strong></td><td><strong><span>false</span></strong></td><td><strong><span>false</span></strong></td></tr>      <tr><td><strong><span>null</span></strong></td><td><strong><span>null</span></strong></td><td><strong><span>null</span></strong></td></tr>     </tbody>       </table>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.variant-and-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-and-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link variant_or()} - Performs a logical disjunction on two variants</span></li>   </ul>  </span> </div></div>
 * @return mixed*/
function variant_and($left, $right) {}

/**
*<div id="function.variant-cast" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_cast</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_cast</span> &mdash; <span class="dc-title">Convert a variant into a new variant object of another type</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-cast-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_cast</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span> <span class="parameter" style="color:#3A95FF">$variant</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$type</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   This function makes a copy of <span class="parameter" style="color:#3A95FF">variant</span> and then   performs a variant cast operation to force the copy to have the type   given by <span class="parameter" style="color:#3A95FF">type</span>.  </p>  <p class="para">   This function wraps VariantChangeType() in the COM library; consult MSDN   for more information.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-cast-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">variant</span></dt>     <dd>      <p class="para">       The variant.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">type</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">type</span> should be one of the       <strong><span>VT_XXX</span></strong> constants.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-cast-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a variant of given <span class="parameter" style="color:#3A95FF">type</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-cast-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link variant_set_type()} - Convert a variant into another type &quot;in-place&quot;</span></li>   </ul>  </span> </div></div>
 * @return \VARIANT*/
function variant_cast($variant, $type) {}

/**
*<div id="function.variant-cat" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_cat</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_cat</span> &mdash; <span class="dc-title">Concatenates two variant values together and returns the result</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-cat-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_cat</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$left</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$right</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   Concatenates <span class="parameter" style="color:#3A95FF">left</span> with   <span class="parameter" style="color:#3A95FF">right</span> and returns the result.  </p>  <p class="para">   This function is notionally equivalent to   <span class="parameter" style="color:#3A95FF">$left</span> <span>.</span> <span class="parameter" style="color:#3A95FF">$right</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-cat-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">left</span></dt>     <dd>      <p class="para">       The left operand.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">right</span></dt>     <dd>      <p class="para">       The right operand.      </p>     </dd>       </dl>  </span>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function">{@link variant_add()}</span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-cat-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the result of the concatenation.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.variant-cat-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-cat-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/language.operators.string.php" class="xref">字符串运算符</a> for the string   concatenation operator</li>   </ul>  </span> </div></div>
 * @return mixed*/
function variant_cat($left, $right) {}

/**
*<div id="function.variant-cmp" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_cmp</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_cmp</span> &mdash; <span class="dc-title">Compares two variants</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-cmp-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_cmp</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$left</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$right</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$locale_id</span><span class="initializer"> = <strong><span>LOCALE_SYSTEM_DEFAULT</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Compares <span class="parameter" style="color:#3A95FF">left</span> with <span class="parameter" style="color:#3A95FF">right</span>.  </p>  <p class="para">   This function will only compare scalar values, not arrays or variant records.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-cmp-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">left</span></dt>     <dd>      <p class="para">       The left operand.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">right</span></dt>     <dd>      <p class="para">       The right operand.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">locale_id</span></dt>     <dd>      <p class="para">       A valid Locale Identifier to use when comparing strings (this affects       string collation).      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">flags</span> can be one or more of the following values       OR&#039;d together, and affects string comparisons:       <table class="doctable table">        <caption><strong>Variant Comparision Flags</strong></caption>                 <thead>          <tr>           <th>value</th>           <th>meaning</th>          </tr>         </thead>         <tbody class="tbody">          <tr>           <td><strong><span>NORM_IGNORECASE</span></strong></td>           <td>Compare case insensitively</td>          </tr>          <tr>           <td><strong><span>NORM_IGNORENONSPACE</span></strong></td>           <td>Ignore nonspacing characters</td>          </tr>          <tr>           <td><strong><span>NORM_IGNORESYMBOLS</span></strong></td>           <td>Ignore symbols</td>          </tr>          <tr>           <td><strong><span>NORM_IGNOREWIDTH</span></strong></td>           <td>Ignore string width</td>          </tr>          <tr>           <td><strong><span>NORM_IGNOREKANATYPE</span></strong></td>           <td>Ignore Kana type</td>          </tr>          <tr>           <td><strong><span>NORM_IGNOREKASHIDA</span></strong></td>           <td>Ignore Arabic kashida characters</td>          </tr>         </tbody>               </table>      </p>     </dd>       </dl>  </span>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function">{@link variant_add()}</span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-cmp-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns one of the following:   <table class="doctable table">    <caption><strong>Variant Comparision Results</strong></caption>         <thead>      <tr>       <th>value</th>       <th>meaning</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td><strong><span>VARCMP_LT</span></strong></td>       <td><span class="parameter" style="color:#3A95FF">left</span> is less than        <span class="parameter" style="color:#3A95FF">right</span>       </td>      </tr>      <tr>       <td><strong><span>VARCMP_EQ</span></strong></td>       <td><span class="parameter" style="color:#3A95FF">left</span> is equal to        <span class="parameter" style="color:#3A95FF">right</span>       </td>      </tr>      <tr>       <td><strong><span>VARCMP_GT</span></strong></td>       <td><span class="parameter" style="color:#3A95FF">left</span> is greater than        <span class="parameter" style="color:#3A95FF">right</span>       </td>      </tr>      <tr>       <td><strong><span>VARCMP_NULL</span></strong></td>       <td>Either <span class="parameter" style="color:#3A95FF">left</span>,        <span class="parameter" style="color:#3A95FF">right</span> or both are <strong><span>null</span></strong>       </td>      </tr>     </tbody>       </table>  </p> </div></div>
 * @return int*/
function variant_cmp($left, $right, $lcid = null, $flags = null) {}

/**
*<div id="function.variant-date-from-timestamp" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_date_from_timestamp</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_date_from_timestamp</span> &mdash; <span class="dc-title">Returns a variant date representation of a Unix timestamp</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-date-from-timestamp-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_date_from_timestamp</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$timestamp</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   Converts <span class="parameter" style="color:#3A95FF">timestamp</span> from a unix timestamp value   into a variant of type <strong><span>VT_DATE</span></strong>.  This allows easier   interopability between the unix-ish parts of PHP and COM.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-date-from-timestamp-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">timestamp</span></dt>     <dd>      <p class="para">       A unix timestamp.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-date-from-timestamp-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <strong><span>VT_DATE</span></strong> variant.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-date-from-timestamp-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link variant_date_to_timestamp()} - Converts a variant date/time value to Unix timestamp</span></li>    <li class="member"><span class="function">{@link mktime()} - 取得一个日期的 Unix 时间戳</span></li>    <li class="member"><span class="function">{@link time()} - 返回当前的 Unix 时间戳</span></li>   </ul>  </span> </div></div>
 * @return \VARIANT*/
function variant_date_from_timestamp($timestamp) {}

/**
*<div id="function.variant-date-to-timestamp" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_date_to_timestamp</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_date_to_timestamp</span> &mdash; <span class="dc-title">Converts a variant date/time value to Unix timestamp</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-date-to-timestamp-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_date_to_timestamp</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span> <span class="parameter" style="color:#3A95FF">$variant</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">int</span></span></div>  <p class="para rdfs-comment">   Converts <span class="parameter" style="color:#3A95FF">variant</span> from a <strong><span>VT_DATE</span></strong>   (or similar) value into a Unix timestamp.  This allows easier   interopability between the Unix-ish parts of PHP and COM.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-date-to-timestamp-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">variant</span></dt>     <dd>      <p class="para">       The variant.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-date-to-timestamp-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a unix timestamp, or <strong><span>null</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-date-to-timestamp-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link variant_date_from_timestamp()} - Returns a variant date representation of a Unix timestamp</span></li>    <li class="member"><span class="function">{@link date()} - 格式化 Unix 时间戳</span></li>    <li class="member"><span class="function">{@link strftime()} - 根据区域设置格式化本地时间/日期</span></li>   </ul>  </span> </div></div>
 * @return int*/
function variant_date_to_timestamp($variant) {}

/**
*<div id="function.variant-div" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_div</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_div</span> &mdash; <span class="dc-title">Returns the result from dividing two variants</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-div-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_div</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$left</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$right</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   Divides <span class="parameter" style="color:#3A95FF">left</span> by <span class="parameter" style="color:#3A95FF">right</span> and   returns the result.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-div-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">left</span></dt>     <dd>      <p class="para">       The left operand.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">right</span></dt>     <dd>      <p class="para">       The right operand.      </p>     </dd>       </dl>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function">{@link variant_add()}</span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></span></blockquote>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-div-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <table class="doctable table">    <caption><strong>Variant Division Rules</strong></caption>         <thead>      <tr>       <th>If</th>       <th>Then</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>Both expressions are of the string, date, character, boolean type</td>       <td>Double is returned</td>      </tr>      <tr>       <td>One expression is a string type and the other a       character</td>       <td>Division and a double is returned</td>      </tr>      <tr>       <td>One expression is numeric and the other is a string</td>       <td>Division and a double is returned.</td>      </tr>      <tr>       <td>Both expressions are numeric</td>       <td>Division and a double is returned</td>      </tr>      <tr>       <td>Either expression is NULL</td>       <td>NULL is returned</td>      </tr>      <tr>       <td><span class="parameter" style="color:#3A95FF">right</span> is empty and       <span class="parameter" style="color:#3A95FF">left</span> is anything but empty</td>       <td>A <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> with code <strong><span>DISP_E_DIVBYZERO</span></strong>       is thrown</td>      </tr>      <tr>       <td><span class="parameter" style="color:#3A95FF">left</span> is empty and       <span class="parameter" style="color:#3A95FF">right</span> is anything but empty.</td>       <td>0 as type double is returned</td>      </tr>      <tr>       <td>Both expressions are empty</td>       <td>A <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> with code <strong><span>DISP_E_OVERFLOW</span></strong>       is thrown</td>      </tr>     </tbody>       </table>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.variant-div-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-div-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link variant_idiv()} - Converts variants to integers and then returns the result from dividing them</span></li>   </ul>  </span> </div></div>
 * @return mixed*/
function variant_div($left, $right) {}

/**
*<div id="function.variant-eqv" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_eqv</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_eqv</span> &mdash; <span class="dc-title">Performs a bitwise equivalence on two variants</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-eqv-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_eqv</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$left</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$right</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   Performs a bitwise equivalence on two variants.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-eqv-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">left</span></dt>     <dd>      <p class="para">       The left operand.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">right</span></dt>     <dd>      <p class="para">       The right operand.      </p>     </dd>       </dl>  </span>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function">{@link variant_add()}</span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-eqv-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   If each bit in <span class="parameter" style="color:#3A95FF">left</span> is equal to the corresponding   bit in <span class="parameter" style="color:#3A95FF">right</span> then <strong><span>true</span></strong> is returned, otherwise   <strong><span>false</span></strong> is returned.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.variant-eqv-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> on failure.  </p> </div></div>
 * @return mixed*/
function variant_eqv($left, $right) {}

/**
*<div id="function.variant-fix" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_fix</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_fix</span> &mdash; <span class="dc-title">Returns the integer portion of a variant</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-fix-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_fix</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   Gets the integer portion of a variant.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-fix-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The variant.      </p>     </dd>       </dl>  </span>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function">{@link variant_add()}</span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-fix-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   If <span class="parameter" style="color:#3A95FF">value</span> is negative, then the first negative   integer greater than or equal to the variant is returned, otherwise   returns the integer portion of the value of   <span class="parameter" style="color:#3A95FF">value</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.variant-fix-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.variant-fix-notes">  <h3 class="title">注释</h3>  <div class="warning"><strong class="warning">警告</strong>   <p class="simpara">    This documentation is based on the MSDN documentation; it appears    that this function is either the same as    <span class="function">{@link variant_int()}</span>, or that there is an error in the MSDN    documentation.   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-fix-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link variant_int()} - Returns the integer portion of a variant</span></li>    <li class="member"><span class="function">{@link variant_round()} - Rounds a variant to the specified number of decimal places</span></li>    <li class="member"><span class="function">{@link floor()} - 舍去法取整</span></li>    <li class="member"><span class="function">{@link ceil()} - 进一法取整</span></li>    <li class="member"><span class="function">{@link round()} - 对浮点数进行四舍五入</span></li>   </ul>  </span> </div></div>
 * @return mixed*/
function variant_fix($variant) {}

/**
*<div id="function.variant-get-type" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_get_type</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_get_type</span> &mdash; <span class="dc-title">Returns the type of a variant object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-get-type-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_get_type</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span> <span class="parameter" style="color:#3A95FF">$variant</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Returns the type of a variant object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-get-type-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">variant</span></dt>     <dd>      <p class="para">       The variant object.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-get-type-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   This function returns an integer value that indicates the type of   <span class="parameter" style="color:#3A95FF">variant</span>, which can be an instance of   <a href="https://www.php.net/manual/zh/class.com.php" class="xref">com</a>, <a href="https://www.php.net/manual/zh/class.dotnet.php" class="xref">dotnet</a> or   <a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a> classes.  The return value can be compared   to one of the <strong><span>VT_XXX</span></strong> constants.  </p>  <p class="para">   The return value for COM and DOTNET objects will usually be   <strong><span>VT_DISPATCH</span></strong>; the only reason this function works for   those classes is because COM and DOTNET are descendants of VARIANT.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-get-type-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link variant_set_type()} - Convert a variant into another type &quot;in-place&quot;</span></li>   </ul>  </span> </div></div>
 * @return int*/
function variant_get_type($variant) {}

/**
*<div id="function.variant-idiv" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_idiv</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_idiv</span> &mdash; <span class="dc-title">Converts variants to integers and then returns the result from dividing them</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-idiv-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_idiv</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$left</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$right</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   Converts <span class="parameter" style="color:#3A95FF">left</span> and <span class="parameter" style="color:#3A95FF">right</span> to   integer values, and then performs integer division.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-idiv-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">left</span></dt>     <dd>      <p class="para">       The left operand.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">right</span></dt>     <dd>      <p class="para">       The right operand.      </p>     </dd>       </dl>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function">{@link variant_add()}</span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></span></blockquote>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-idiv-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <table class="doctable table">    <caption><strong>Variant Integer Division Rules</strong></caption>         <thead>      <tr>       <th>If</th>       <th>Then</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>Both expressions are of the string, date, character, boolean type</td>       <td>Division and integer is returned</td>      </tr>      <tr>       <td>One expression is a string type and the other a       character</td>       <td>Division</td>      </tr>      <tr>       <td>One expression is numeric and the other is a string</td>       <td>Division</td>      </tr>      <tr>       <td>Both expressions are numeric</td>       <td>Division</td>      </tr>      <tr>       <td>Either expression is NULL</td>       <td>NULL is returned</td>      </tr>      <tr>       <td>Both expressions are empty</td>       <td>A <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> with code <strong><span>DISP_E_DIVBYZERO</span></strong>       is thrown</td>      </tr>     </tbody>       </table>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.variant-idiv-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-idiv-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link variant_div()} - Returns the result from dividing two variants</span></li>   </ul>  </span> </div></div>
 * @return mixed*/
function variant_idiv($left, $right) {}

/**
*<div id="function.variant-imp" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_imp</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_imp</span> &mdash; <span class="dc-title">Performs a bitwise implication on two variants</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-imp-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_imp</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$left</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$right</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   Performs a bitwise implication operation.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-imp-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">left</span></dt>     <dd>      <p class="para">       The left operand.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">right</span></dt>     <dd>      <p class="para">       The right operand.      </p>     </dd>       </dl>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function">{@link variant_add()}</span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></span></blockquote>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-imp-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <table class="doctable table">    <caption><strong>Variant Implication Table</strong></caption>        <thead>     <tr>      <th>If <span class="parameter" style="color:#3A95FF">left</span> is</th>      <th>If <span class="parameter" style="color:#3A95FF">right</span> is</th>      <th>then the result is</th>     </tr>    </thead>    <tbody class="tbody">     <tr><td><strong><span>true</span></strong></td><td><strong><span>true</span></strong></td><td><strong><span>true</span></strong></td></tr>     <tr><td><strong><span>true</span></strong></td><td><strong><span>false</span></strong></td><td><strong><span>false</span></strong></td></tr>     <tr><td><strong><span>true</span></strong></td><td><strong><span>null</span></strong></td><td><strong><span>true</span></strong></td></tr>     <tr><td><strong><span>false</span></strong></td><td><strong><span>true</span></strong></td><td><strong><span>true</span></strong></td></tr>     <tr><td><strong><span>false</span></strong></td><td><strong><span>false</span></strong></td><td><strong><span>true</span></strong></td></tr>     <tr><td><strong><span>false</span></strong></td><td><strong><span>null</span></strong></td><td><strong><span>true</span></strong></td></tr>     <tr><td><strong><span>null</span></strong></td><td><strong><span>true</span></strong></td><td><strong><span>true</span></strong></td></tr>     <tr><td><strong><span>null</span></strong></td><td><strong><span>false</span></strong></td><td><strong><span>null</span></strong></td></tr>     <tr><td><strong><span>null</span></strong></td><td><strong><span>null</span></strong></td><td><strong><span>null</span></strong></td></tr>    </tbody>     </table>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.variant-imp-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> on failure.  </p> </div></div>
 * @return mixed*/
function variant_imp($left, $right) {}

/**
*<div id="function.variant-int" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_int</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_int</span> &mdash; <span class="dc-title">Returns the integer portion of a variant</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-int-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_int</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   Gets the integer portion of a variant.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-int-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The variant.      </p>     </dd>       </dl>  </span>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function">{@link variant_add()}</span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-int-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   If <span class="parameter" style="color:#3A95FF">value</span> is negative, then the first negative   integer greater than or equal to the variant is returned, otherwise   returns the integer portion of the value of   <span class="parameter" style="color:#3A95FF">value</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.variant-int-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-int-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link variant_fix()} - Returns the integer portion of a variant</span></li>    <li class="member"><span class="function">{@link variant_round()} - Rounds a variant to the specified number of decimal places</span></li>    <li class="member"><span class="function">{@link floor()} - 舍去法取整</span></li>    <li class="member"><span class="function">{@link ceil()} - 进一法取整</span></li>    <li class="member"><span class="function">{@link round()} - 对浮点数进行四舍五入</span></li>   </ul>  </span> </div></div>
 * @return mixed*/
function variant_int($variant) {}

/**
*<div id="function.variant-mod" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_mod</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_mod</span> &mdash; <span class="dc-title">Divides two variants and returns only the remainder</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-mod-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_mod</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$left</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$right</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   Divides <span class="parameter" style="color:#3A95FF">left</span> by <span class="parameter" style="color:#3A95FF">right</span> and   returns the remainder.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-mod-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">left</span></dt>     <dd>      <p class="para">       The left operand.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">right</span></dt>     <dd>      <p class="para">       The right operand.      </p>     </dd>       </dl>  </span>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function">{@link variant_add()}</span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-mod-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the remainder of the division.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.variant-mod-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-mod-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link variant_div()} - Returns the result from dividing two variants</span></li>    <li class="member"><span class="function">{@link variant_idiv()} - Converts variants to integers and then returns the result from dividing them</span></li>   </ul>  </span> </div></div>
 * @return mixed*/
function variant_mod($left, $right) {}

/**
*<div id="function.variant-mul" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_mul</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_mul</span> &mdash; <span class="dc-title">Multiplies the values of the two variants</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-mul-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_mul</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$left</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$right</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   Multiplies <span class="parameter" style="color:#3A95FF">left</span> by <span class="parameter" style="color:#3A95FF">right</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-mul-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">left</span></dt>     <dd>      <p class="para">       The left operand.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">right</span></dt>     <dd>      <p class="para">       The right operand.      </p>     </dd>       </dl>   Boolean values are converted to -1 for <strong><span>false</span></strong> and 0 for <strong><span>true</span></strong>.   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function">{@link variant_add()}</span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></span></blockquote>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-mul-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <table class="doctable table">    <caption><strong>Variant Multiplication Rules</strong></caption>         <thead>      <tr>       <th>If</th>       <th>Then</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>Both expressions are of the string, date, character, boolean type</td>       <td>Multiplication</td>      </tr>      <tr>       <td>One expression is a string type and the other a       character</td>       <td>Multiplication</td>      </tr>      <tr>       <td>One expression is numeric and the other is a string</td>       <td>Multiplication</td>      </tr>      <tr>       <td>Both expressions are numeric</td>       <td>Multiplication</td>      </tr>      <tr>       <td>Either expression is NULL</td>       <td>NULL is returned</td>      </tr>      <tr>       <td>Both expressions are empty</td>       <td>Empty string is returned</td>      </tr>     </tbody>       </table>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.variant-mul-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-mul-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link variant_div()} - Returns the result from dividing two variants</span></li>    <li class="member"><span class="function">{@link variant_idiv()} - Converts variants to integers and then returns the result from dividing them</span></li>   </ul>  </span> </div></div>
 * @return mixed*/
function variant_mul($left, $right) {}

/**
*<div id="function.variant-neg" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_neg</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_neg</span> &mdash; <span class="dc-title">Performs logical negation on a variant</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-neg-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_neg</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   Performs logical negation of <span class="parameter" style="color:#3A95FF">value</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-neg-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The variant.      </p>     </dd>       </dl>  </span>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function">{@link variant_add()}</span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-neg-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the result of the logical negation.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.variant-neg-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> on failure.  </p> </div></div>
 * @return mixed*/
function variant_neg($variant) {}

/**
*<div id="function.variant-not" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_not</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_not</span> &mdash; <span class="dc-title">Performs bitwise not negation on a variant</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-not-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_not</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   Performs bitwise not negation on <span class="parameter" style="color:#3A95FF">value</span> and   returns the result.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-not-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The variant.      </p>     </dd>       </dl>  </span>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function">{@link variant_add()}</span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-not-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the bitwise not negation. If <span class="parameter" style="color:#3A95FF">value</span> is   <strong><span>null</span></strong>, the result will also be <strong><span>null</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.variant-not-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> on failure.  </p> </div></div>
 * @return mixed*/
function variant_not($variant) {}

/**
*<div id="function.variant-or" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_or</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_or</span> &mdash; <span class="dc-title">Performs a logical disjunction on two variants</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-or-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_or</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$left</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$right</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   Performs a bitwise OR operation.   Note that this is slightly different from a regular OR operation.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-or-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">left</span></dt>     <dd>      <p class="para">       The left operand.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">right</span></dt>     <dd>      <p class="para">       The right operand.      </p>     </dd>       </dl>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function">{@link variant_add()}</span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></span></blockquote>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-or-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <table class="doctable table">    <caption><strong>Variant OR Rules</strong></caption>         <thead>      <tr>       <th>If <span class="parameter" style="color:#3A95FF">left</span> is</th>       <th>If <span class="parameter" style="color:#3A95FF">right</span> is</th>       <th>then the result is</th>      </tr>     </thead>     <tbody class="tbody">      <tr><td><strong><span>true</span></strong></td><td><strong><span>true</span></strong></td><td><strong><span>true</span></strong></td></tr>      <tr><td><strong><span>true</span></strong></td><td><strong><span>false</span></strong></td><td><strong><span>true</span></strong></td></tr>      <tr><td><strong><span>true</span></strong></td><td><strong><span>null</span></strong></td><td><strong><span>true</span></strong></td></tr>      <tr><td><strong><span>false</span></strong></td><td><strong><span>true</span></strong></td><td><strong><span>true</span></strong></td></tr>      <tr><td><strong><span>false</span></strong></td><td><strong><span>false</span></strong></td><td><strong><span>false</span></strong></td></tr>      <tr><td><strong><span>false</span></strong></td><td><strong><span>null</span></strong></td><td><strong><span>null</span></strong></td></tr>      <tr><td><strong><span>null</span></strong></td><td><strong><span>true</span></strong></td><td><strong><span>true</span></strong></td></tr>      <tr><td><strong><span>null</span></strong></td><td><strong><span>false</span></strong></td><td><strong><span>null</span></strong></td></tr>      <tr><td><strong><span>null</span></strong></td><td><strong><span>null</span></strong></td><td><strong><span>null</span></strong></td></tr>     </tbody>       </table>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.variant-or-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-or-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link variant_and()} - Performs a bitwise AND operation between two variants</span></li>    <li class="member"><span class="function">{@link variant_xor()} - Performs a logical exclusion on two variants</span></li>   </ul>  </span> </div></div>
 * @return mixed*/
function variant_or($left, $right) {}

/**
*<div id="function.variant-pow" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_pow</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_pow</span> &mdash; <span class="dc-title">Returns the result of performing the power function with two variants</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-pow-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_pow</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$left</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$right</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   Returns the result of <span class="parameter" style="color:#3A95FF">left</span> to the power of   <span class="parameter" style="color:#3A95FF">right</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-pow-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">left</span></dt>     <dd>      <p class="para">       The left operand.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">right</span></dt>     <dd>      <p class="para">       The right operand.      </p>     </dd>       </dl>  </span>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function">{@link variant_add()}</span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-pow-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the result of <span class="parameter" style="color:#3A95FF">left</span> to the power of   <span class="parameter" style="color:#3A95FF">right</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.variant-pow-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-pow-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link pow()} - 指数表达式</span></li>   </ul>  </span> </div></div>
 * @return mixed*/
function variant_pow($left, $right) {}

/**
*<div id="function.variant-round" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_round</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_round</span> &mdash; <span class="dc-title">Rounds a variant to the specified number of decimal places</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-round-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_round</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$decimals</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></span></div>  <p class="para rdfs-comment">   Returns the value of <span class="parameter" style="color:#3A95FF">value</span> rounded to   <span class="parameter" style="color:#3A95FF">decimals</span> decimal places.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-round-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The variant.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">decimals</span></dt>     <dd>      <p class="para">       Number of decimal places.      </p>     </dd>       </dl>  </span>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function">{@link variant_add()}</span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-round-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the rounded value, or <strong><span>null</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-round-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link round()} - 对浮点数进行四舍五入</span></li>   </ul>  </span> </div></div>
 * @return mixed*/
function variant_round($variant, $decimals) {}

/**
*<div id="function.variant-set-type" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_set_type</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_set_type</span> &mdash; <span class="dc-title">Convert a variant into another type &quot;in-place&quot;</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-set-type-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_set_type</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span> <span class="parameter" style="color:#3A95FF">$variant</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$type</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   This function is similar to <span class="function">{@link variant_cast()}</span> except that   the variant is modified &quot;in-place&quot;; no new variant is created. The   parameters for this function have identical meaning to those of   <span class="function">{@link variant_cast()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-set-type-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">variant</span></dt>     <dd>      <p class="para">       The variant.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">type</span></dt>     <dd>      <p class="para">      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-set-type-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-set-type-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link variant_cast()} - Convert a variant into a new variant object of another type</span></li>    <li class="member"><span class="function">{@link variant_get_type()} - Returns the type of a variant object</span></li>   </ul>  </span> </div></div>
 * @return void*/
function variant_set_type($variant, $type) {}

/**
*<div id="function.variant-set" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_set</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_set</span> &mdash; <span class="dc-title">Assigns a new value for a variant object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-set-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_set</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span> <span class="parameter" style="color:#3A95FF">$variant</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Converts <span class="parameter" style="color:#3A95FF">value</span> to a variant and assigns it to the   <span class="parameter" style="color:#3A95FF">variant</span> object; no new variant object is created,   and the old value of <span class="parameter" style="color:#3A95FF">variant</span> is freed/released.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-set-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">variant</span></dt>     <dd>      <p class="para">       The variant.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-set-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
 * @return void*/
function variant_set($variant, $value) {}

/**
*<div id="function.variant-sub" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_sub</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_sub</span> &mdash; <span class="dc-title">Subtracts the value of the right variant from the left variant value</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-sub-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_sub</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$left</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$right</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   Subtracts <span class="parameter" style="color:#3A95FF">right</span> from <span class="parameter" style="color:#3A95FF">left</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-sub-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">left</span></dt>     <dd>      <p class="para">       The left operand.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">right</span></dt>     <dd>      <p class="para">       The right operand.      </p>     </dd>       </dl>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function">{@link variant_add()}</span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></span></blockquote>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-sub-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <table class="doctable table">    <caption><strong>Variant Subtraction Rules</strong></caption>         <thead>      <tr>       <th>If</th>       <th>Then</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>Both expressions are of the string type</td>       <td>Subtraction</td>      </tr>      <tr>       <td>One expression is a string type and the other a       character</td>       <td>Subtraction</td>      </tr>      <tr>       <td>One expression is numeric and the other is a string</td>       <td>Subtraction.</td>      </tr>      <tr>       <td>Both expressions are numeric</td>       <td>Subtraction</td>      </tr>      <tr>       <td>Either expression is NULL</td>       <td>NULL is returned</td>      </tr>      <tr>       <td>Both expressions are empty</td>       <td>Empty string is returned</td>      </tr>     </tbody>       </table>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.variant-sub-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-sub-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link variant_add()} - &quot;Adds&quot; two variant values together and returns the result</span></li>   </ul>  </span> </div></div>
 * @return mixed*/
function variant_sub($left, $right) {}

/**
*<div id="function.variant-xor" class="refentry"> <div class="refnamediv">  <h1 class="refname">variant_xor</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">variant_xor</span> &mdash; <span class="dc-title">Performs a logical exclusion on two variants</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.variant-xor-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>variant_xor</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$left</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$right</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.variant.php" class="type variant" style="color:#EAB766">variant</a></span></div>  <p class="para rdfs-comment">   Performs a logical exclusion.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.variant-xor-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">left</span></dt>     <dd>      <p class="para">       The left operand.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">right</span></dt>     <dd>      <p class="para">       The right operand.      </p>     </dd>       </dl>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 对于所有变量运算函数，本函数的参数可以是 PHP 内置的类型（整数，字符串，浮点数，布尔型或者 <strong><span>null</span></strong>），或者是一个 COM，VARIANT 或者 DOTNET 类的实例。PHP 内置类型将会使用和构造<a href="https://www.php.net/manual/zh/class.variant.php" class="xref">variant</a>类相同的规则转换成变量。COM 和 DOTNET 对象的值将会取其默认属性并被当成变量值使用。</p><p class="para"> 变量运算函数是同名函数在 COM 库中的外包；有关此类函数的更多信息参见 MSDN 库。PHP 函数命名有少许区别，例如 PHP 中的 <span class="function">{@link variant_add()}</span> 对应于 MSDN 文档中的 <span>VarAdd()</span>。</p></span></blockquote>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.variant-xor-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <table class="doctable table">    <caption><strong>Variant XOR Rules</strong></caption>         <thead>      <tr>       <th>If <span class="parameter" style="color:#3A95FF">left</span> is</th>       <th>If <span class="parameter" style="color:#3A95FF">right</span> is</th>       <th>then the result is</th>      </tr>     </thead>     <tbody class="tbody">      <tr><td><strong><span>true</span></strong></td><td><strong><span>true</span></strong></td><td><strong><span>false</span></strong></td></tr>      <tr><td><strong><span>true</span></strong></td><td><strong><span>false</span></strong></td><td><strong><span>true</span></strong></td></tr>      <tr><td><strong><span>false</span></strong></td><td><strong><span>true</span></strong></td><td><strong><span>true</span></strong></td></tr>      <tr><td><strong><span>false</span></strong></td><td><strong><span>false</span></strong></td><td><strong><span>false</span></strong></td></tr>      <tr><td><strong><span>null</span></strong></td><td><strong><span>null</span></strong></td><td><strong><span>null</span></strong></td></tr>     </tbody>       </table>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.variant-xor-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.com-exception.php" class="classname">com_exception</a></span> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.variant-xor-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link variant_or()} - Performs a logical disjunction on two variants</span></li>    <li class="member"><span class="function">{@link variant_and()} - Performs a bitwise AND operation between two variants</span></li>   </ul>  </span> </div></div>
 * @return mixed*/
function variant_xor($left, $right) {}

define('CLSCTX_INPROC_SERVER', 1);
define('CLSCTX_INPROC_HANDLER', 2);
define('CLSCTX_LOCAL_SERVER', 4);
define('CLSCTX_REMOTE_SERVER', 16);
define('CLSCTX_SERVER', 21);
define('CLSCTX_ALL', 23);

define('VT_NULL', 1);
define('VT_EMPTY', 0);
define('VT_UI1', 17);
define('VT_I2', 2);
define('VT_I4', 3);
define('VT_R4', 4);
define('VT_R8', 5);
define('VT_BOOL', 11);
define('VT_ERROR', 10);
define('VT_CY', 6);
define('VT_DATE', 7);
define('VT_BSTR', 8);
define('VT_DECIMAL', 14);
define('VT_UNKNOWN', 13);
define('VT_DISPATCH', 9);
define('VT_VARIANT', 12);
define('VT_I1', 16);
define('VT_UI2', 18);
define('VT_UI4', 19);
define('VT_INT', 22);
define('VT_UINT', 23);
define('VT_ARRAY', 8192);
define('VT_BYREF', 16384);

define('CP_ACP', 0);
define('CP_MACCP', 2);
define('CP_OEMCP', 1);
define('CP_UTF7', 65000);
define('CP_UTF8', 65001);
define('CP_SYMBOL', 42);
define('CP_THREAD_ACP', 3);

define('VARCMP_LT', 0);
define('VARCMP_EQ', 1);
define('VARCMP_GT', 2);
define('VARCMP_NULL', 3);

define('NORM_IGNORECASE', 1);
define('NORM_IGNORENONSPACE', 2);
define('NORM_IGNORESYMBOLS', 4);
define('NORM_IGNOREWIDTH', 131072);
define('NORM_IGNOREKANATYPE', 65536);
define('NORM_IGNOREKASHIDA', 262144);

define('DISP_E_DIVBYZERO', -2147352558);
define('DISP_E_OVERFLOW', -2147352566);
define('MK_E_UNAVAILABLE', -2147221021);

// End of com v.
