<?php

/**
*<div id="function.mqseries-back" class="refentry"> <div class="refnamediv">  <h1 class="refname">mqseries_back</h1>  <p class="verinfo">(PECL mqseries &gt;= 0.10.0)</p><p class="refpurpose"><span class="refname">mqseries_back</span> &mdash; <span class="dc-title">MQSeries MQBACK</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.mqseries-back-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>mqseries_back</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$hconn</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$compCode</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$reason</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   The   <span class="function"><strong style="color:#CC7832">mqseries_back()</strong></span>   (MQBACK) call indicates to the queue manager that all the message gets and   puts that have occurred since the last syncpoint are to be backed out.   Messages put as part of a unit of work are deleted; messages retrieved as   part of a unit of work are reinstated on the queue.  </p>  <p class="para">   Using   <span class="function"><strong style="color:#CC7832">mqseries_back()</strong></span>   only works in conjunction with   <span class="function">{@link mqseries_begin()}</span>   and only function when connecting directly to a Queueu manager. Not via the   mqclient interface.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.mqseries-back-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt>      <span class="parameter" style="color:#3A95FF">hConn</span>     </dt>     <dd>      <p class="para">Connection handle.</p>      <p class="para">This handle represents the connection to the queue manager.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">compCode</span>     </dt>     <dd>      <p class="para">Completion code.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">reason</span>     </dt>     <dd>      <p class="para">Reason code qualifying the compCode.</p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.mqseries-back-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">没有返回值。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.mqseries-back-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1      <span class="function"><strong style="color:#CC7832">mqseries_back()</strong></span>     example    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />    mqseries_back</span><span style="color: #007700">(</span><span style="color: #9876AA">$conn</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br /><br />    if (</span><span style="color: #9876AA">$comp_code </span><span style="color: #007700">!== </span><span style="color: #9876AA">MQSERIES_MQCC_OK</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"CompCode:%d Reason:%d Text:%s&lt;br&gt;\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">, </span><span style="color: #9876AA">mqseries_strerror</span><span style="color: #007700">(</span><span style="color: #9876AA">$reason</span><span style="color: #007700">));<br />    }<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.mqseries-back-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="function"><strong style="color:#CC7832">mqseries_back()</strong></span>    will not function when using MQSeries Client to connect to a Queueu Manager.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.mqseries-back-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link mqseries_conn()} - MQSeries MQCONN</span></li>    <li class="member"><span class="function">{@link mqseries_connx()} - MQSeries MQCONNX</span></li>    <li class="member"><span class="function">{@link mqseries_begin()} - MQseries MQBEGIN</span></li>   </ul>  </span> </div></div>
*/
function mqseries_back($hconn, &$compCode, &$reason) {}

/**
*<div id="function.mqseries-begin" class="refentry"> <div class="refnamediv">  <h1 class="refname">mqseries_begin</h1>  <p class="verinfo">(PECL mqseries &gt;= 0.10.0)</p><p class="refpurpose"><span class="refname">mqseries_begin</span> &mdash; <span class="dc-title">MQseries MQBEGIN</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.mqseries-begin-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>mqseries_begin</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$hconn</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$beginOptions</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$compCode</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$reason</span></span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   The   <span class="function"><strong style="color:#CC7832">mqseries_begin()</strong></span>   (MQBEGIN) call begins a unit of work that is coordinated by the queue   manager, and that may involve external resource managers.  </p>  <p class="para">   Using   <span class="function"><strong style="color:#CC7832">mqseries_begin()</strong></span>   starts the unit of work. Either   <span class="function">{@link mqseries_back()}</span>   or   <span class="function">{@link mqseries_cmit()}</span>   ends the unit of work.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.mqseries-begin-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt>      <span class="parameter" style="color:#3A95FF">hConn</span>     </dt>     <dd>      <p class="para">Connection handle.</p>      <p class="para">This handle represents the connection to the queue manager.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">compCode</span>     </dt>     <dd>      <p class="para">Completion code.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">reason</span>     </dt>     <dd>      <p class="para">Reason code qualifying the compCode.</p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.mqseries-begin-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">没有返回值。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.mqseries-begin-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1      <span class="function"><strong style="color:#CC7832">mqseries_begin()</strong></span>     example    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />    $mqbo </span><span style="color: #007700">= array();<br />    </span><span style="color: #9876AA">mqseries_begin</span><span style="color: #007700">( </span><span style="color: #9876AA">$conn</span><span style="color: #007700">, <br />                    </span><span style="color: #9876AA">$mqbo</span><span style="color: #007700">,<br />                    </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">,<br />                    </span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br />    if (</span><span style="color: #9876AA">$comp_code </span><span style="color: #007700">!== </span><span style="color: #9876AA">MQSERIES_MQCC_OK</span><span style="color: #007700">) {<br />        </span><span style="color: #FF8000">// reason code 2121 is a warning for more information see MQSeries reference manual.<br />        </span><span style="color: #007700">if (</span><span style="color: #9876AA">$reason </span><span style="color: #007700">!== </span><span style="color: #9876AA">2121</span><span style="color: #007700">) {<br />            </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"CompCode:%d Reason:%d Text:%s&lt;br&gt;\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">, </span><span style="color: #9876AA">mqseries_strerror</span><span style="color: #007700">(</span><span style="color: #9876AA">$reason</span><span style="color: #007700">));<br />        }<br />    }<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.mqseries-begin-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="function"><strong style="color:#CC7832">mqseries_begin()</strong></span>    will not function when using MQSeries Client to connect to a Queueu Manager.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.mqseries-begin-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link mqseries_conn()} - MQSeries MQCONN</span></li>    <li class="member"><span class="function">{@link mqseries_connx()} - MQSeries MQCONNX</span></li>    <li class="member"><span class="function">{@link mqseries_back()} - MQSeries MQBACK</span></li>    <li class="member"><span class="function">{@link mqseries_cmit()} - MQSeries MQCMIT</span></li>   </ul>  </span> </div></div>
*/
function mqseries_begin($hconn, array $beginOptions, &$compCode, &$reason) {}

/**
*<div id="function.mqseries-close" class="refentry"> <div class="refnamediv">  <h1 class="refname">mqseries_close</h1>  <p class="verinfo">(PECL mqseries &gt;= 0.10.0)</p><p class="refpurpose"><span class="refname">mqseries_close</span> &mdash; <span class="dc-title">MQSeries MQCLOSE</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.mqseries-close-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>mqseries_close</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$hconn</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$hobj</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$options</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$compCode</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$reason</span></span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   The   <span class="function"><strong style="color:#CC7832">mqseries_close()</strong></span>   (MQCLOSE) call relinquishes access to an object, and is the inverse of the   <span class="function">{@link mqseries_open()}</span>   (MQOPEN) call.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.mqseries-close-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt>      <span class="parameter" style="color:#3A95FF">hConn</span>     </dt>     <dd>      <p class="para">Connection handle.</p>      <p class="para">This handle represents the connection to the queue manager.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">hObj</span>     </dt>     <dd>      <p class="para">Object handle.</p>      <p class="para">This handle represents the object to be used.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">options</span>     </dt>     <dd>      <p class="para"/>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">compCode</span>     </dt>     <dd>      <p class="para">Completion code.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">reason</span>     </dt>     <dd>      <p class="para">Reason code qualifying the compCode.</p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.mqseries-close-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">没有返回值。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.mqseries-close-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1      <span class="function"><strong style="color:#CC7832">mqseries_close()</strong></span>     example    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />    mqseries_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$conn</span><span style="color: #007700">, </span><span style="color: #9876AA">$obj</span><span style="color: #007700">, </span><span style="color: #9876AA">MQSERIES_MQCO_NONE</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br />    if (</span><span style="color: #9876AA">$comp_code </span><span style="color: #007700">!== </span><span style="color: #9876AA">MQSERIES_MQCC_OK</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"close CompCode:%d Reason:%d Text:%s&lt;br&gt;\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">, </span><span style="color: #9876AA">mqseries_strerror</span><span style="color: #007700">(</span><span style="color: #9876AA">$reason</span><span style="color: #007700">));<br />    }<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.mqseries-close-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link mqseries_open()} - MQSeries MQOPEN</span></li>    <li class="member"><span class="function">{@link mqseries_conn()} - MQSeries MQCONN</span></li>    <li class="member"><span class="function">{@link mqseries_connx()} - MQSeries MQCONNX</span></li>   </ul>  </span> </div></div>
*/
function mqseries_close($hconn, $hobj, $options, &$compCode, &$reason) {}

/**
*<div id="function.mqseries-cmit" class="refentry"> <div class="refnamediv">  <h1 class="refname">mqseries_cmit</h1>  <p class="verinfo">(PECL mqseries &gt;= 0.10.0)</p><p class="refpurpose"><span class="refname">mqseries_cmit</span> &mdash; <span class="dc-title">MQSeries MQCMIT</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.mqseries-cmit-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>mqseries_cmit</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$hconn</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$compCode</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$reason</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   The   <span class="function"><strong style="color:#CC7832">mqseries_cmit()</strong></span>   (MQCMIT) call indicates to the queue manager that the application has reached   a syncpoint, and that all of the message gets and puts that have occurred   since the last syncpoint are to be made permanent. Messages put as part of a   unit of work are made available to other applications; messages retrieved as   part of a unit of work are deleted.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.mqseries-cmit-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt>      <span class="parameter" style="color:#3A95FF">hConn</span>     </dt>     <dd>      <p class="para">Connection handle.</p>      <p class="para">This handle represents the connection to the queue manager.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">compCode</span>     </dt>     <dd>      <p class="para">Completion code.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">reason</span>     </dt>     <dd>      <p class="para">Reason code qualifying the compCode.</p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.mqseries-cmit-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">没有返回值。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.mqseries-cmit-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1      <span class="function"><strong style="color:#CC7832">mqseries_cmit()</strong></span>     example    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />    mqseries_cmit</span><span style="color: #007700">(</span><span style="color: #9876AA">$conn</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br />    if (</span><span style="color: #9876AA">$comp_code </span><span style="color: #007700">!== </span><span style="color: #9876AA">MQSERIES_MQCC_OK</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"cmit CompCode:%d Reason:%d Text:%s&lt;br&gt;\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">, </span><span style="color: #9876AA">mqseries_strerror</span><span style="color: #007700">(</span><span style="color: #9876AA">$reason</span><span style="color: #007700">));<br />    }<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.mqseries-cmit-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="function">{@link mqseries_back()}</span>    will not function when using MQSeries Client to connect to a Queueu Manager.   </p>  </p></blockquote> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.mqseries-cmit-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link mqseries_begin()} - MQseries MQBEGIN</span></li>    <li class="member"><span class="function">{@link mqseries_back()} - MQSeries MQBACK</span></li>    <li class="member"><span class="function">{@link mqseries_conn()} - MQSeries MQCONN</span></li>    <li class="member"><span class="function">{@link mqseries_connx()} - MQSeries MQCONNX</span></li>   </ul>  </span> </div></div>
*/
function mqseries_cmit($hconn, &$compCode, &$reason) {}

/**
*<div id="function.mqseries-conn" class="refentry"> <div class="refnamediv">  <h1 class="refname">mqseries_conn</h1>  <p class="verinfo">(PECL mqseries &gt;= 0.10.0)</p><p class="refpurpose"><span class="refname">mqseries_conn</span> &mdash; <span class="dc-title">MQSeries MQCONN</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.mqseries-conn-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>mqseries_conn</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$qManagerName</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$hconn</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$compCode</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$reason</span></span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   The   <span class="function"><strong style="color:#CC7832">mqseries_conn()</strong></span>   (MQCONN) call connects an application program to a queue manager. It provides   a queue manager connection handle, which is used by the application on   subsequent message queuing calls.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.mqseries-conn-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt>      <span class="parameter" style="color:#3A95FF">qManagerName</span>     </dt>     <dd>      <p class="para">Name of queue manager.</p>      <p class="para">Name of the queue manager the application wishes to connect.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">hConn</span>     </dt>     <dd>      <p class="para">Connection handle.</p>      <p class="para">This handle represents the connection to the queue manager.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">compCode</span>     </dt>     <dd>      <p class="para">Completion code.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">reason</span>     </dt>     <dd>      <p class="para">Reason code qualifying the compCode.</p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.mqseries-conn-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">没有返回值。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.mqseries-conn-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1      <span class="function"><strong style="color:#CC7832">mqseries_conn()</strong></span>     example    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />    mqseries_conn</span><span style="color: #007700">(</span><span style="color: #DD0000">'WMQ1'</span><span style="color: #007700">, </span><span style="color: #9876AA">$conn</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br />    if (</span><span style="color: #9876AA">$comp_code </span><span style="color: #007700">!== </span><span style="color: #9876AA">MQSERIES_MQCC_OK</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"conn CompCode:%d Reason:%d Text:%s&lt;br&gt;\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">, </span><span style="color: #9876AA">mqseries_strerror</span><span style="color: #007700">(</span><span style="color: #9876AA">$reason</span><span style="color: #007700">));<br />        exit;<br />    }<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.mqseries-conn-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link mqseries_disc()} - MQSeries MQDISC</span></li>   </ul>  </span> </div></div>
*/
function mqseries_conn($qManagerName, &$hconn, &$compCode, &$reason) {}

/**
*<div id="function.mqseries-connx" class="refentry"> <div class="refnamediv">  <h1 class="refname">mqseries_connx</h1>  <p class="verinfo">(PECL mqseries &gt;= 0.10.0)</p><p class="refpurpose"><span class="refname">mqseries_connx</span> &mdash; <span class="dc-title">MQSeries MQCONNX</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.mqseries-connx-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>mqseries_connx</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$qManagerName</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$connOptions</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$hconn</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$compCode</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$reason</span></span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   The   <span class="function"><strong style="color:#CC7832">mqseries_connx()</strong></span>   (MQCONNX) call connects an application program to a queue manager. It   provides a queue manager connection handle, which is used by the application   on subsequent MQ calls.  </p>  <p class="para">   The <span class="function"><strong style="color:#CC7832">mqseries_connx()</strong></span> call is like the    <span class="function">{@link mqseries_conn()}</span> (MQCONN) call, except that MQCONNX    allows options to be specified to control the way that the call works.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.mqseries-connx-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt>      <span class="parameter" style="color:#3A95FF">qManagerName</span>     </dt>     <dd>      <p class="para">Name of queue manager.</p>      <p class="para">Name of the queue manager the application wishes to connect.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">connOps</span>     </dt>     <dd>      <p class="para">Options that control the action of function</p>      <p class="para">See also the MQCNO structure.</p>     </dd>                 <dt>      <span class="parameter" style="color:#3A95FF">hConn</span>     </dt>     <dd>      <p class="para">Connection handle.</p>      <p class="para">This handle represents the connection to the queue manager.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">compCode</span>     </dt>     <dd>      <p class="para">Completion code.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">reason</span>     </dt>     <dd>      <p class="para">Reason code qualifying the compCode.</p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.mqseries-connx-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">没有返回值。</p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.mqseries-connx-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1      <span class="function"><strong style="color:#CC7832">mqseries_connx()</strong></span>     example    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />    $mqcno </span><span style="color: #007700">= array(<br />        </span><span style="color: #DD0000">'Version' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">MQSERIES_MQCNO_VERSION_2</span><span style="color: #007700">,<br />        </span><span style="color: #DD0000">'Options' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">MQSERIES_MQCNO_STANDARD_BINDING</span><span style="color: #007700">,<br />        </span><span style="color: #DD0000">'MQCD' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'ChannelName' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'MQNX9420.CLIENT'</span><span style="color: #007700">,<br />        </span><span style="color: #DD0000">'ConnectionName' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">,<br />        </span><span style="color: #DD0000">'TransportType' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">MQSERIES_MQXPT_TCP</span><span style="color: #007700">)<br />    );<br /><br />    </span><span style="color: #9876AA">mqseries_connx</span><span style="color: #007700">(</span><span style="color: #DD0000">'MQNX9420'</span><span style="color: #007700">, </span><span style="color: #9876AA">$mqcno</span><span style="color: #007700">, </span><span style="color: #9876AA">$conn</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">,</span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br />    if (</span><span style="color: #9876AA">$comp_code </span><span style="color: #007700">!== </span><span style="color: #9876AA">MQSERIES_MQCC_OK</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"Connx CompCode:%d Reason:%d Text:%s&lt;br&gt;\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">, </span><span style="color: #9876AA">mqseries_strerror</span><span style="color: #007700">(</span><span style="color: #9876AA">$reason</span><span style="color: #007700">));<br />        exit;<br />    }<br /> <br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #2      <span class="function"><strong style="color:#CC7832">mqseries_connx()</strong></span>     example using SSL connection &amp; OCSP Responder URL    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />    $mqcno </span><span style="color: #007700">= array(<br />        </span><span style="color: #DD0000">'Version' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #FF8000">//MQCNO_VERSION_4<br />        </span><span style="color: #DD0000">'Options' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">MQSERIES_MQCNO_STANDARD_BINDING</span><span style="color: #007700">,<br />        </span><span style="color: #DD0000">'MQCD' </span><span style="color: #007700">=&gt; array(<br />            </span><span style="color: #DD0000">'Version' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">7</span><span style="color: #007700">, </span><span style="color: #FF8000">//MQCD_VERSION_7<br />            </span><span style="color: #DD0000">'ConnectionName' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, <br />            </span><span style="color: #DD0000">'TransportType' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">MQSERIES_MQXPT_TCP</span><span style="color: #007700">, <br />            </span><span style="color: #DD0000">'ChannelName' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'CONNECTIONCHANNEL'</span><span style="color: #007700">, <br />            </span><span style="color: #DD0000">'SSLCipherSpec' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'NULL_SHA'<br />        </span><span style="color: #007700">), <br />        </span><span style="color: #DD0000">'MQSCO' </span><span style="color: #007700">=&gt; array(<br />            </span><span style="color: #DD0000">'KeyRepository' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'/var/mqm/qmgrs/QUEUEMGR/ssl/key'</span><span style="color: #007700">, </span><span style="color: #FF8000">//Local path where the SSL key repository can be found<br />            </span><span style="color: #DD0000">'MQAIR' </span><span style="color: #007700">=&gt; array(<br />                </span><span style="color: #DD0000">'Version' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #FF8000">//MQAIR_VERSION_2<br />                </span><span style="color: #DD0000">'AuthInfoType' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #FF8000">//MQAIT_OCSP <br />                </span><span style="color: #DD0000">'OCSPResponderURL' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'http://dummy.OCSP.responder'<br />            </span><span style="color: #007700">)<br />        )<br />    );<br /><br />    </span><span style="color: #9876AA">mqseries_connx</span><span style="color: #007700">(</span><span style="color: #DD0000">'QUEUEMGR'</span><span style="color: #007700">, </span><span style="color: #9876AA">$mqcno</span><span style="color: #007700">, </span><span style="color: #9876AA">$conn</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">,</span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br />    if (</span><span style="color: #9876AA">$comp_code </span><span style="color: #007700">!== </span><span style="color: #9876AA">MQSERIES_MQCC_OK</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"Connx CompCode:%d Reason:%d Text:%s&lt;br&gt;\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">, </span><span style="color: #9876AA">mqseries_strerror</span><span style="color: #007700">(</span><span style="color: #9876AA">$reason</span><span style="color: #007700">));<br />        exit;<br />    }<br /> <br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.mqseries-connx-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link mqseries_disc()} - MQSeries MQDISC</span></li>   </ul>  </span> </div></div>
*/
function mqseries_connx($qManagerName, array &$connOptions, &$hconn, &$compCode, &$reason) {}

/**
*<div id="function.mqseries-disc" class="refentry"> <div class="refnamediv">  <h1 class="refname">mqseries_disc</h1>  <p class="verinfo">(PECL mqseries &gt;= 0.10.0)</p><p class="refpurpose"><span class="refname">mqseries_disc</span> &mdash; <span class="dc-title">MQSeries MQDISC</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.mqseries-disc-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>mqseries_disc</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$hconn</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$compCode</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$reason</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   The   <span class="function"><strong style="color:#CC7832">mqseries_disc()</strong></span>   (MQDISC) call breaks the connection between the queue manager and the   application program, and is the inverse of the   <span class="function">{@link mqseries_conn()}</span>   (MQCONN) or   <span class="function">{@link mqseries_connx()}</span>   (MQCONNX) call.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.mqseries-disc-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt>      <span class="parameter" style="color:#3A95FF">hConn</span>     </dt>     <dd>      <p class="para">Connection handle.</p>      <p class="para">This handle represents the connection to the queue manager.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">compCode</span>     </dt>     <dd>      <p class="para">Completion code.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">reason</span>     </dt>     <dd>      <p class="para">Reason code qualifying the compCode.</p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.mqseries-disc-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">没有返回值。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.mqseries-disc-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1      <span class="function"><strong style="color:#CC7832">mqseries_disc()</strong></span>     example    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />    mqseries_disc</span><span style="color: #007700">(</span><span style="color: #9876AA">$conn</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br />    if (</span><span style="color: #9876AA">$comp_code </span><span style="color: #007700">!== </span><span style="color: #9876AA">MQSERIES_MQCC_OK</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"disc CompCode:%d Reason:%d Text:%s&lt;br&gt;\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">, </span><span style="color: #9876AA">mqseries_strerror</span><span style="color: #007700">(</span><span style="color: #9876AA">$reason</span><span style="color: #007700">));<br />    }<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.mqseries-disc-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link mqseries_conn()} - MQSeries MQCONN</span></li>    <li class="member"><span class="function">{@link mqseries_connx()} - MQSeries MQCONNX</span></li>   </ul>  </span> </div></div>
*/
function mqseries_disc($hconn, &$compCode, &$reason) {}

/**
*<div id="function.mqseries-get" class="refentry"> <div class="refnamediv">  <h1 class="refname">mqseries_get</h1>  <p class="verinfo">(PECL mqseries &gt;= 0.10.0)</p><p class="refpurpose"><span class="refname">mqseries_get</span> &mdash; <span class="dc-title">MQSeries MQGET</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.mqseries-get-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>mqseries_get</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$hConn</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$hObj</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$md</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$gmo</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">&$bufferLength</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">&$msg</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">&$data_length</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$compCode</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$reason</span></span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   The   <span class="function"><strong style="color:#CC7832">mqseries_get()</strong></span>   (MQGET) call retrieves a message from a local queue that has been opened   using the   <span class="function">{@link mqseries_open()}</span>   (MQOPEN) call  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.mqseries-get-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt>      <span class="parameter" style="color:#3A95FF">hConn</span>     </dt>     <dd>      <p class="para">Connection handle.</p>      <p class="para">This handle represents the connection to the queue manager.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">hObj</span>     </dt>     <dd>      <p class="para">Object handle.</p>      <p class="para">This handle represents the object to be used.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">md</span>     </dt>     <dd>      <p class="para">Message descriptor (MQMD).</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">gmo</span>     </dt>     <dd>      <p class="para">Get message options (MQGMO).</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">bufferLength</span>     </dt>     <dd>      <p class="para">Expected length of the result buffer</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">msg</span>     </dt>     <dd>      <p class="para">       Buffer holding the message that was retrieved from the object.      </p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">data_length</span>     </dt>     <dd>      <p class="para">Actual buffer length</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">compCode</span>     </dt>     <dd>      <p class="para">Completion code.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">reason</span>     </dt>     <dd>      <p class="para">Reason code qualifying the compCode.</p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.mqseries-get-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">没有返回值。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.mqseries-get-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1      <span class="function"><strong style="color:#CC7832">mqseries_get()</strong></span>     example    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// open connection to the queue manager<br />    </span><span style="color: #9876AA">mqseries_conn</span><span style="color: #007700">(</span><span style="color: #DD0000">'WMQ1'</span><span style="color: #007700">, </span><span style="color: #9876AA">$conn</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// $conn now hold the reference to the connection to the queue manager.<br /><br />// open the connection to the testq queue<br />    </span><span style="color: #9876AA">mqseries_open</span><span style="color: #007700">(<br />                </span><span style="color: #9876AA">$conn</span><span style="color: #007700">,<br />                array(</span><span style="color: #DD0000">'ObjectName' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'TESTQ'</span><span style="color: #007700">),<br />                </span><span style="color: #9876AA">MQSERIES_MQOO_INPUT_AS_Q_DEF </span><span style="color: #007700">| </span><span style="color: #9876AA">MQSERIES_MQOO_FAIL_IF_QUIESCING </span><span style="color: #007700">| </span><span style="color: #9876AA">MQSERIES_MQOO_OUTPUT</span><span style="color: #007700">,<br />                </span><span style="color: #9876AA">$obj</span><span style="color: #007700">,<br />                </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">,<br />                </span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// $obj now holds the reference to the object (TESTQ)<br /><br />// setup empty message descriptor.<br />    </span><span style="color: #9876AA">$mdg </span><span style="color: #007700">= array();<br /></span><span style="color: #FF8000">// setup get message options    <br />    </span><span style="color: #9876AA">$gmo </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'Options' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">MQSERIES_MQGMO_FAIL_IF_QUIESCING </span><span style="color: #007700">| </span><span style="color: #9876AA">MQSERIES_MQGMO_WAIT</span><span style="color: #007700">, </span><span style="color: #DD0000">'WaitInterval' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">3000</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// get the message from the queue    <br />    </span><span style="color: #9876AA">mqseries_get</span><span style="color: #007700">(</span><span style="color: #9876AA">$conn</span><span style="color: #007700">, </span><span style="color: #9876AA">$obj</span><span style="color: #007700">, </span><span style="color: #9876AA">$mdg</span><span style="color: #007700">, </span><span style="color: #9876AA">$gmo</span><span style="color: #007700">, </span><span style="color: #9876AA">255</span><span style="color: #007700">, </span><span style="color: #9876AA">$msg</span><span style="color: #007700">, </span><span style="color: #9876AA">$data_length</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br />    if (</span><span style="color: #9876AA">$comp_code </span><span style="color: #007700">!== </span><span style="color: #9876AA">MQSERIES_MQCC_OK</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"GET CompCode:%d Reason:%d Text:%s&lt;br&gt;"</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">, </span><span style="color: #9876AA">mqseries_strerror</span><span style="color: #007700">(</span><span style="color: #9876AA">$reason</span><span style="color: #007700">));<br />    }<br />    <br /></span><span style="color: #FF8000">// close the object reference $obj    <br />    </span><span style="color: #9876AA">mqseries_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$conn</span><span style="color: #007700">, </span><span style="color: #9876AA">$obj</span><span style="color: #007700">, </span><span style="color: #9876AA">MQSERIES_MQCO_NONE</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// disconnect from the queue manager.    <br />    </span><span style="color: #9876AA">mqseries_disc</span><span style="color: #007700">(</span><span style="color: #9876AA">$conn</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br />    <br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.mqseries-get-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link mqseries_conn()} - MQSeries MQCONN</span></li>    <li class="member"><span class="function">{@link mqseries_connx()} - MQSeries MQCONNX</span></li>    <li class="member"><span class="function">{@link mqseries_open()} - MQSeries MQOPEN</span></li>    <li class="member"><span class="function">{@link mqseries_put()} - MQSeries MQPUT</span></li>   </ul>  </span> </div></div>
*/
function mqseries_get($hConn, $hObj, array &$md, array &$gmo, &$bufferLength, &$msg, &$data_length, &$compCode, &$reason) {}

/**
*<div id="function.mqseries-inq" class="refentry"> <div class="refnamediv">  <h1 class="refname">mqseries_inq</h1>  <p class="verinfo">(PECL mqseries &gt;= 0.10.0)</p><p class="refpurpose"><span class="refname">mqseries_inq</span> &mdash; <span class="dc-title">MQSeries MQINQ</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.mqseries-inq-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>mqseries_inq</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$hconn</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$hobj</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$selectorCount</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$selectors</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$intAttrCount</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$intAttr</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$charAttrLength</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$charAttr</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$compCode</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$reason</span></span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   The   <span class="function"><strong style="color:#CC7832">mqseries_inq()</strong></span>   (MQINQ) call returns an array of integers and a set of character strings   containing the attributes of an object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.mqseries-inq-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt>      <span class="parameter" style="color:#3A95FF">hConn</span>     </dt>     <dd>      <p class="para">Connection handle.</p>      <p class="para">This handle represents the connection to the queue manager.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">hObj</span>     </dt>     <dd>      <p class="para">Object handle.</p>      <p class="para">This handle represents the object to be used.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">selectorCount</span>     </dt>     <dd>      <p class="para">Count of selectors.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">selectors</span>     </dt>     <dd>      <p class="para">Array of attribute selectors.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">intAttrLength</span>     </dt>     <dd>      <p class="para">Count of integer attributes.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">intAttr</span>     </dt>     <dd>      <p class="para">Array of integer attributes.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">charAttrLength</span>     </dt>     <dd>      <p class="para">Length of character attributes buffer.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">charAttr</span>     </dt>     <dd>      <p class="para">Character attributes.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">compCode</span>     </dt>     <dd>      <p class="para">Completion code.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">reason</span>     </dt>     <dd>      <p class="para">Reason code qualifying the compCode.</p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.mqseries-inq-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">没有返回值。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.mqseries-inq-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1      <span class="function"><strong style="color:#CC7832">mqseries_inq()</strong></span>     example    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />    $int_attr </span><span style="color: #007700">= array();<br />    </span><span style="color: #9876AA">$char_attr </span><span style="color: #007700">= </span><span style="color: #DD0000">""</span><span style="color: #007700">;<br />    <br />    </span><span style="color: #9876AA">mqseries_inq</span><span style="color: #007700">(</span><span style="color: #9876AA">$conn</span><span style="color: #007700">, </span><span style="color: #9876AA">$obj</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, array(</span><span style="color: #9876AA">MQSERIES_MQCA_Q_MGR_NAME</span><span style="color: #007700">), </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">$int_attr</span><span style="color: #007700">, </span><span style="color: #9876AA">48</span><span style="color: #007700">, </span><span style="color: #9876AA">$char_attr</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br />    <br />    if (</span><span style="color: #9876AA">$comp_code </span><span style="color: #007700">!== </span><span style="color: #9876AA">MQSERIES_MQCC_OK</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"INQ CompCode:%d Reason:%d Text:%s&lt;br&gt;\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">, </span><span style="color: #9876AA">mqseries_strerror</span><span style="color: #007700">(</span><span style="color: #9876AA">$reason</span><span style="color: #007700">));<br />    } else {<br />        echo </span><span style="color: #DD0000">"INQ QManager name result "</span><span style="color: #007700">.</span><span style="color: #9876AA">$char_attr</span><span style="color: #007700">.</span><span style="color: #DD0000">"&lt;br&gt;\n"</span><span style="color: #007700">;<br />    }<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.mqseries-inq-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link mqseries_conn()} - MQSeries MQCONN</span></li>    <li class="member"><span class="function">{@link mqseries_connx()} - MQSeries MQCONNX</span></li>    <li class="member"><span class="function">{@link mqseries_open()} - MQSeries MQOPEN</span></li>   </ul>  </span> </div></div>
*/
function mqseries_inq($hconn, $hobj, $selectorCount, array $selectors, $intAttrCount, &$intAttr, $charAttrLength, &$charAttr, &$compCode, &$reason) {}

/**
*<div id="function.mqseries-open" class="refentry"> <div class="refnamediv">  <h1 class="refname">mqseries_open</h1>  <p class="verinfo">(PECL mqseries &gt;= 0.10.0)</p><p class="refpurpose"><span class="refname">mqseries_open</span> &mdash; <span class="dc-title">MQSeries MQOPEN</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.mqseries-open-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>mqseries_open</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$hconn</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$objDesc</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$option</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$hobj</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$compCode</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$reason</span></span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   The   <span class="function"><strong style="color:#CC7832">mqseries_open()</strong></span>   (MQOPEN) call establishes access to an object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.mqseries-open-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt>      <span class="parameter" style="color:#3A95FF">hConn</span>     </dt>     <dd>      <p class="para">Connection handle.</p>      <p class="para">This handle represents the connection to the queue manager.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">objDesc</span>     </dt>     <dd>      <p class="para">Object descriptor. (MQOD)</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">options</span>     </dt>     <dd>      <p class="para">Options that control the action of the function.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">hObj</span>     </dt>     <dd>      <p class="para">Object handle.</p>      <p class="para">This handle represents the object to be used.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">compCode</span>     </dt>     <dd>      <p class="para">Completion code.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">reason</span>     </dt>     <dd>      <p class="para">Reason code qualifying the compCode.</p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.mqseries-open-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">没有返回值。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.mqseries-open-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1      <span class="function"><strong style="color:#CC7832">mqseries_open()</strong></span>     example    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />    $mqods </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'ObjectName' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'TESTQ'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">mqseries_open</span><span style="color: #007700">(<br />                </span><span style="color: #9876AA">$conn</span><span style="color: #007700">,<br />                </span><span style="color: #9876AA">$mqods</span><span style="color: #007700">,<br />                </span><span style="color: #9876AA">MQSERIES_MQOO_INPUT_AS_Q_DEF </span><span style="color: #007700">| </span><span style="color: #9876AA">MQSERIES_MQOO_FAIL_IF_QUIESCING </span><span style="color: #007700">| </span><span style="color: #9876AA">MQSERIES_MQOO_OUTPUT</span><span style="color: #007700">,<br />                </span><span style="color: #9876AA">$obj</span><span style="color: #007700">,<br />                </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">,<br />                </span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br />    if (</span><span style="color: #9876AA">$comp_code </span><span style="color: #007700">!== </span><span style="color: #9876AA">MQSERIES_MQCC_OK</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"open CompCode:%d Reason:%d Text:%s&lt;br&gt;\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">, </span><span style="color: #9876AA">mqseries_strerror</span><span style="color: #007700">(</span><span style="color: #9876AA">$reason</span><span style="color: #007700">));<br />        exit;<br />    }<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.mqseries-open-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link mqseries_close()} - MQSeries MQCLOSE</span></li>   </ul>  </span> </div></div>
*/
function mqseries_open($hconn, array &$objDesc, $option, &$hobj, &$compCode, &$reason) {}

/**
*<div id="function.mqseries-put1" class="refentry"> <div class="refnamediv">  <h1 class="refname">mqseries_put1</h1>  <p class="verinfo">(PECL mqseries &gt;= 0.10.0)</p><p class="refpurpose"><span class="refname">mqseries_put1</span> &mdash; <span class="dc-title">MQSeries MQPUT1</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.mqseries-put1-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>mqseries_put1</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$hconn</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$objDesc</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$msgDesc</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$pmo</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$buffer</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$compCode</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$reason</span></span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   The   <span class="function"><strong style="color:#CC7832">mqseries_put1()</strong></span>   (MQPUT1) call puts one message on a queue. The queue need not be open.  </p>  <p class="para">   You can use both the <span class="function">{@link mqseries_put()}</span> and <span class="function"><strong style="color:#CC7832">mqseries_put1()</strong></span>   calls to put messages on a queue; which call to use depends on the circumstances.   Use the <span class="function">{@link mqseries_put()}</span> (MQPUT) call to place multiple messages on the same queue.   Use the <span class="function"><strong style="color:#CC7832">mqseries_put1()</strong></span> (MQPUT1) call to put only one message on a queue.   This call encapsulates the MQOPEN, MQPUT, and MQCLOSE calls into a single call, minimizing the   number of calls that must be issued.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.mqseries-put1-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt>      <span class="parameter" style="color:#3A95FF">hConn</span>     </dt>     <dd>      <p class="para">Connection handle.</p>      <p class="para">This handle represents the connection to the queue manager.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">objDesc</span>     </dt>     <dd>      <p class="para">Object descriptor. (MQOD)</p>      <p class="para">       This is a structure which identifies the queue to which the message is       added.      </p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">msgDesc</span>     </dt>     <dd>      <p class="para">Message descriptor (MQMD).</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">pmo</span>     </dt>     <dd>      <p class="para">Put message options (MQPMO).</p>     </dd>                 <dt>      <span class="parameter" style="color:#3A95FF">compCode</span>     </dt>     <dd>      <p class="para">Completion code.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">reason</span>     </dt>     <dd>      <p class="para">Reason code qualifying the compCode.</p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.mqseries-put1-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">没有返回值。</p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.mqseries-put1-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link mqseries_conn()} - MQSeries MQCONN</span></li>    <li class="member"><span class="function">{@link mqseries_connx()} - MQSeries MQCONNX</span></li>    <li class="member"><span class="function">{@link mqseries_open()} - MQSeries MQOPEN</span></li>    <li class="member"><span class="function">{@link mqseries_get()} - MQSeries MQGET</span></li>   </ul>  </span> </div></div>
*/
function mqseries_put1($hconn, &$objDesc, &$msgDesc, &$pmo, $buffer, &$compCode, &$reason) {}

/**
*<div id="function.mqseries-put" class="refentry"> <div class="refnamediv">  <h1 class="refname">mqseries_put</h1>  <p class="verinfo">(PECL mqseries &gt;= 0.10.0)</p><p class="refpurpose"><span class="refname">mqseries_put</span> &mdash; <span class="dc-title">MQSeries MQPUT</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.mqseries-put-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>mqseries_put</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$hConn</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$hObj</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$md</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$pmo</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$compCode</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$reason</span></span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   The   <span class="function"><strong style="color:#CC7832">mqseries_put()</strong></span>   (MQPUT) call puts a message on a queue or distribution list. The queue or   distribution list must already be open.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.mqseries-put-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt>      <span class="parameter" style="color:#3A95FF">hConn</span>     </dt>     <dd>      <p class="para">Connection handle.</p>      <p class="para">This handle represents the connection to the queue manager.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">hObj</span>     </dt>     <dd>      <p class="para">Object handle.</p>      <p class="para">This handle represents the object to be used.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">md</span>     </dt>     <dd>      <p class="para">Message descriptor (MQMD).</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">pmo</span>     </dt>     <dd>      <p class="para">Put message options (MQPMO).</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">message</span>     </dt>     <dd>      <p class="para">The actual message to put onto the queue.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">compCode</span>     </dt>     <dd>      <p class="para">Completion code.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">reason</span>     </dt>     <dd>      <p class="para">Reason code qualifying the compCode.</p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.mqseries-put-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">没有返回值。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.mqseries-put-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1      <span class="function"><strong style="color:#CC7832">mqseries_put()</strong></span>     example    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// open connection to the queue manager<br />    </span><span style="color: #9876AA">mqseries_conn</span><span style="color: #007700">(</span><span style="color: #DD0000">'WMQ1'</span><span style="color: #007700">, </span><span style="color: #9876AA">$conn</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// $conn now hold the reference to the connection to the queue manager.<br /><br />// open the connectio to the testq queueu<br />    </span><span style="color: #9876AA">mqseries_open</span><span style="color: #007700">(<br />                </span><span style="color: #9876AA">$conn</span><span style="color: #007700">,<br />                array(</span><span style="color: #DD0000">'ObjectName' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'TESTQ'</span><span style="color: #007700">),<br />                </span><span style="color: #9876AA">MQSERIES_MQOO_INPUT_AS_Q_DEF </span><span style="color: #007700">| </span><span style="color: #9876AA">MQSERIES_MQOO_FAIL_IF_QUIESCING </span><span style="color: #007700">| </span><span style="color: #9876AA">MQSERIES_MQOO_OUTPUT</span><span style="color: #007700">,<br />                </span><span style="color: #9876AA">$obj</span><span style="color: #007700">,<br />                </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">,<br />                </span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// $obj now holds the reference to the object (TESTQ)<br /><br />// setup the message descriptor array. Check MQSeries reference manuals.<br />    </span><span style="color: #9876AA">$md </span><span style="color: #007700">= array(<br />                </span><span style="color: #DD0000">'Version' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">MQSERIES_MQMD_VERSION_1</span><span style="color: #007700">,<br />                </span><span style="color: #DD0000">'Expiry' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">MQSERIES_MQEI_UNLIMITED</span><span style="color: #007700">,<br />                </span><span style="color: #DD0000">'Report' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">MQSERIES_MQRO_NONE</span><span style="color: #007700">,<br />                </span><span style="color: #DD0000">'MsgType' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">MQSERIES_MQMT_DATAGRAM</span><span style="color: #007700">,<br />                </span><span style="color: #DD0000">'Format' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">MQSERIES_MQFMT_STRING</span><span style="color: #007700">,<br />                </span><span style="color: #DD0000">'Priority' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">,<br />                </span><span style="color: #DD0000">'Persistence' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">MQSERIES_MQPER_PERSISTENT</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// setup the put message options.<br />    </span><span style="color: #9876AA">$pmo </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'Options' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">MQSERIES_MQPMO_NEW_MSG_ID</span><span style="color: #007700">|</span><span style="color: #9876AA">MQSERIES_MQPMO_SYNCPOINT</span><span style="color: #007700">);<br />    <br /></span><span style="color: #FF8000">// put the message 'Ping' on the queueu.<br />    </span><span style="color: #9876AA">mqseries_put</span><span style="color: #007700">(</span><span style="color: #9876AA">$conn</span><span style="color: #007700">, </span><span style="color: #9876AA">$obj</span><span style="color: #007700">, </span><span style="color: #9876AA">$md</span><span style="color: #007700">, </span><span style="color: #9876AA">$pmo</span><span style="color: #007700">, </span><span style="color: #DD0000">'Ping'</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br /><br />    if (</span><span style="color: #9876AA">$comp_code </span><span style="color: #007700">!== </span><span style="color: #9876AA">MQSERIES_MQCC_OK</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"put CompCode:%d Reason:%d Text:%s&lt;br&gt;\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">, </span><span style="color: #9876AA">mqseries_strerror</span><span style="color: #007700">(</span><span style="color: #9876AA">$reason</span><span style="color: #007700">));<br />    }<br /><br /></span><span style="color: #FF8000">// close the object reference $obj    <br />    </span><span style="color: #9876AA">mqseries_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$conn</span><span style="color: #007700">, </span><span style="color: #9876AA">$obj</span><span style="color: #007700">, </span><span style="color: #9876AA">MQSERIES_MQCO_NONE</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// disconnect from the queue manager.    <br />    </span><span style="color: #9876AA">mqseries_disc</span><span style="color: #007700">(</span><span style="color: #9876AA">$conn</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">);<br />    <br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.mqseries-put-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link mqseries_conn()} - MQSeries MQCONN</span></li>    <li class="member"><span class="function">{@link mqseries_connx()} - MQSeries MQCONNX</span></li>    <li class="member"><span class="function">{@link mqseries_open()} - MQSeries MQOPEN</span></li>    <li class="member"><span class="function">{@link mqseries_get()} - MQSeries MQGET</span></li>   </ul>  </span> </div></div>
*/
function mqseries_put($hConn, $hObj, array &$md, array &$pmo, $message, &$compCode, &$reason) {}

/**
*<div id="function.mqseries-set" class="refentry"> <div class="refnamediv">  <h1 class="refname">mqseries_set</h1>  <p class="verinfo">(PECL mqseries &gt;= 0.10.0)</p><p class="refpurpose"><span class="refname">mqseries_set</span> &mdash; <span class="dc-title">MQSeries MQSET</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.mqseries-set-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>mqseries_set</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$hConn</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$hObj</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$selectorCount</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$selectors</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$intAttrCount</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$intAttrs</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$charAttrLength</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$charAttrs</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$compCode</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">&$reason</span></span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   The <span class="function"><strong style="color:#CC7832">mqseries_set()</strong></span>   (MQSET) call is used to change the attributes of an object represented by a   handle. The object must be a queue.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.mqseries-set-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt>      <span class="parameter" style="color:#3A95FF">hConn</span>     </dt>     <dd>      <p class="para">Connection handle.</p>      <p class="para">This handle represents the connection to the queue manager.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">hObj</span>     </dt>     <dd>      <p class="para">Object handle.</p>      <p class="para">This handle represents the object to be used.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">selectorCount</span>     </dt>     <dd>      <p class="para">Count of selectors.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">selectors</span>     </dt>     <dd>      <p class="para">Array of attribute selectors.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">intAttrCount</span>     </dt>     <dd>      <p class="para">Count of integer attributes.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">intAttrs</span>     </dt>     <dd>      <p class="para">Array of integer attributes.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">charAttrLength</span>     </dt>     <dd>      <p class="para">Length of character attributes buffer.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">charAttrs</span>     </dt>     <dd>      <p class="para">Character attributes.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">compCode</span>     </dt>     <dd>      <p class="para">Completion code.</p>     </dd>             <dt>      <span class="parameter" style="color:#3A95FF">reason</span>     </dt>     <dd>      <p class="para">Reason code qualifying the compCode.</p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.mqseries-set-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">没有返回值。</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.mqseries-set-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link mqseries_inq()} - MQSeries MQINQ</span></li>   </ul>  </span> </div></div>
*/
function mqseries_set($hconn, $hobj, $selectorcount, array $selectors, $intattrcount, array $intattrs, $charattrlength, array $charattrs, &$compCode, &$reason) {}

/**
*<div id="function.mqseries-strerror" class="refentry"> <div class="refnamediv">  <h1 class="refname">mqseries_strerror</h1>  <p class="verinfo">(PECL mqseries &gt;= 0.10.0)</p><p class="refpurpose"><span class="refname">mqseries_strerror</span> &mdash; <span class="dc-title">Returns the error message corresponding to a result code (MQRC)</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.mqseries-strerror-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>mqseries_strerror</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$reason</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">mqseries_strerror()</strong></span>   returns the message that correspond to the reason result code.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.mqseries-strerror-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt>      <span class="parameter" style="color:#3A95FF">reason</span>     </dt>     <dd>      <p class="para">Reason code qualifying the compCode.</p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.mqseries-strerror-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">string representation of the reason code message.</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.mqseries-strerror-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1      <span class="function"><strong style="color:#CC7832">mqseries_strerror()</strong></span>     example    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />    </span><span style="color: #007700">if (</span><span style="color: #9876AA">$comp_code </span><span style="color: #007700">!== </span><span style="color: #9876AA">MQSERIES_MQCC_OK</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"open CompCode:%d Reason:%d Text:%s&lt;br&gt;\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$comp_code</span><span style="color: #007700">, </span><span style="color: #9876AA">$reason</span><span style="color: #007700">, </span><span style="color: #9876AA">mqseries_strerror</span><span style="color: #007700">(</span><span style="color: #9876AA">$reason</span><span style="color: #007700">));<br />        exit;<br />    }<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Connx CompCode:2 Reason:2059 Text:Queue manager not available for connection.                    <br></span></div>    </div>   </div>  </span> </div></div>
 * @return string*/
function mqseries_strerror($reason)
{
    return (string)$reason;
}

/*
 * To obtain the list below, execute   print_r(get_defined_constants(true)['mqseries']);  and then reformat
 */
define('MQSERIES_MQCC_OK', 0);
define('MQSERIES_MQCC_WARNING', 1);
define('MQSERIES_MQCC_FAILED', 2);
define('MQSERIES_MQCC_UNKNOWN', -1);
define('MQSERIES_MQRC_NONE', 0);
define('MQSERIES_MQRC_APPL_FIRST', 900);
define('MQSERIES_MQRC_APPL_LAST', 999);
define('MQSERIES_MQRC_ALIAS_BASE_Q_TYPE_ERROR', 2001);
define('MQSERIES_MQRC_ALREADY_CONNECTED', 2002);
define('MQSERIES_MQRC_BACKED_OUT', 2003);
define('MQSERIES_MQRC_BUFFER_ERROR', 2004);
define('MQSERIES_MQRC_BUFFER_LENGTH_ERROR', 2005);
define('MQSERIES_MQRC_CHAR_ATTR_LENGTH_ERROR', 2006);
define('MQSERIES_MQRC_CHAR_ATTRS_ERROR', 2007);
define('MQSERIES_MQRC_CHAR_ATTRS_TOO_SHORT', 2008);
define('MQSERIES_MQRC_CONNECTION_BROKEN', 2009);
define('MQSERIES_MQRC_DATA_LENGTH_ERROR', 2010);
define('MQSERIES_MQRC_DYNAMIC_Q_NAME_ERROR', 2011);
define('MQSERIES_MQRC_ENVIRONMENT_ERROR', 2012);
define('MQSERIES_MQRC_EXPIRY_ERROR', 2013);
define('MQSERIES_MQRC_FEEDBACK_ERROR', 2014);
define('MQSERIES_MQRC_GET_INHIBITED', 2016);
define('MQSERIES_MQRC_HANDLE_NOT_AVAILABLE', 2017);
define('MQSERIES_MQRC_HCONN_ERROR', 2018);
define('MQSERIES_MQRC_HOBJ_ERROR', 2019);
define('MQSERIES_MQRC_INHIBIT_VALUE_ERROR', 2020);
define('MQSERIES_MQRC_INT_ATTR_COUNT_ERROR', 2021);
define('MQSERIES_MQRC_INT_ATTR_COUNT_TOO_SMALL', 2022);
define('MQSERIES_MQRC_INT_ATTRS_ARRAY_ERROR', 2023);
define('MQSERIES_MQRC_SYNCPOINT_LIMIT_REACHED', 2024);
define('MQSERIES_MQRC_MAX_CONNS_LIMIT_REACHED', 2025);
define('MQSERIES_MQRC_MD_ERROR', 2026);
define('MQSERIES_MQRC_MISSING_REPLY_TO_Q', 2027);
define('MQSERIES_MQRC_MSG_TYPE_ERROR', 2029);
define('MQSERIES_MQRC_MSG_TOO_BIG_FOR_Q', 2030);
define('MQSERIES_MQRC_MSG_TOO_BIG_FOR_Q_MGR', 2031);
define('MQSERIES_MQRC_NO_MSG_AVAILABLE', 2033);
define('MQSERIES_MQRC_NO_MSG_UNDER_CURSOR', 2034);
define('MQSERIES_MQRC_NOT_AUTHORIZED', 2035);
define('MQSERIES_MQRC_NOT_OPEN_FOR_BROWSE', 2036);
define('MQSERIES_MQRC_NOT_OPEN_FOR_INPUT', 2037);
define('MQSERIES_MQRC_NOT_OPEN_FOR_INQUIRE', 2038);
define('MQSERIES_MQRC_NOT_OPEN_FOR_OUTPUT', 2039);
define('MQSERIES_MQRC_NOT_OPEN_FOR_SET', 2040);
define('MQSERIES_MQRC_OBJECT_CHANGED', 2041);
define('MQSERIES_MQRC_OBJECT_IN_USE', 2042);
define('MQSERIES_MQRC_OBJECT_TYPE_ERROR', 2043);
define('MQSERIES_MQRC_OD_ERROR', 2044);
define('MQSERIES_MQRC_OPTION_NOT_VALID_FOR_TYPE', 2045);
define('MQSERIES_MQRC_OPTIONS_ERROR', 2046);
define('MQSERIES_MQRC_PERSISTENCE_ERROR', 2047);
define('MQSERIES_MQRC_PERSISTENT_NOT_ALLOWED', 2048);
define('MQSERIES_MQRC_PRIORITY_EXCEEDS_MAXIMUM', 2049);
define('MQSERIES_MQRC_PRIORITY_ERROR', 2050);
define('MQSERIES_MQRC_PUT_INHIBITED', 2051);
define('MQSERIES_MQRC_Q_DELETED', 2052);
define('MQSERIES_MQRC_Q_FULL', 2053);
define('MQSERIES_MQRC_Q_NOT_EMPTY', 2055);
define('MQSERIES_MQRC_Q_SPACE_NOT_AVAILABLE', 2056);
define('MQSERIES_MQRC_Q_TYPE_ERROR', 2057);
define('MQSERIES_MQRC_Q_MGR_NAME_ERROR', 2058);
define('MQSERIES_MQRC_Q_MGR_NOT_AVAILABLE', 2059);
define('MQSERIES_MQRC_REPORT_OPTIONS_ERROR', 2061);
define('MQSERIES_MQRC_SECOND_MARK_NOT_ALLOWED', 2062);
define('MQSERIES_MQRC_SECURITY_ERROR', 2063);
define('MQSERIES_MQRC_SELECTOR_COUNT_ERROR', 2065);
define('MQSERIES_MQRC_SELECTOR_LIMIT_EXCEEDED', 2066);
define('MQSERIES_MQRC_SELECTOR_ERROR', 2067);
define('MQSERIES_MQRC_SELECTOR_NOT_FOR_TYPE', 2068);
define('MQSERIES_MQRC_SIGNAL_OUTSTANDING', 2069);
define('MQSERIES_MQRC_SIGNAL_REQUEST_ACCEPTED', 2070);
define('MQSERIES_MQRC_STORAGE_NOT_AVAILABLE', 2071);
define('MQSERIES_MQRC_SYNCPOINT_NOT_AVAILABLE', 2072);
define('MQSERIES_MQRC_TRIGGER_CONTROL_ERROR', 2075);
define('MQSERIES_MQRC_TRIGGER_DEPTH_ERROR', 2076);
define('MQSERIES_MQRC_TRIGGER_MSG_PRIORITY_ERR', 2077);
define('MQSERIES_MQRC_TRIGGER_TYPE_ERROR', 2078);
define('MQSERIES_MQRC_TRUNCATED_MSG_ACCEPTED', 2079);
define('MQSERIES_MQRC_TRUNCATED_MSG_FAILED', 2080);
define('MQSERIES_MQRC_UNKNOWN_ALIAS_BASE_Q', 2082);
define('MQSERIES_MQRC_UNKNOWN_OBJECT_NAME', 2085);
define('MQSERIES_MQRC_UNKNOWN_OBJECT_Q_MGR', 2086);
define('MQSERIES_MQRC_UNKNOWN_REMOTE_Q_MGR', 2087);
define('MQSERIES_MQRC_WAIT_INTERVAL_ERROR', 2090);
define('MQSERIES_MQRC_XMIT_Q_TYPE_ERROR', 2091);
define('MQSERIES_MQRC_XMIT_Q_USAGE_ERROR', 2092);
define('MQSERIES_MQRC_NOT_OPEN_FOR_PASS_ALL', 2093);
define('MQSERIES_MQRC_NOT_OPEN_FOR_PASS_IDENT', 2094);
define('MQSERIES_MQRC_NOT_OPEN_FOR_SET_ALL', 2095);
define('MQSERIES_MQRC_NOT_OPEN_FOR_SET_IDENT', 2096);
define('MQSERIES_MQRC_CONTEXT_HANDLE_ERROR', 2097);
define('MQSERIES_MQRC_CONTEXT_NOT_AVAILABLE', 2098);
define('MQSERIES_MQRC_SIGNAL1_ERROR', 2099);
define('MQSERIES_MQRC_OBJECT_ALREADY_EXISTS', 2100);
define('MQSERIES_MQRC_OBJECT_DAMAGED', 2101);
define('MQSERIES_MQRC_RESOURCE_PROBLEM', 2102);
define('MQSERIES_MQRC_ANOTHER_Q_MGR_CONNECTED', 2103);
define('MQSERIES_MQRC_UNKNOWN_REPORT_OPTION', 2104);
define('MQSERIES_MQRC_STORAGE_CLASS_ERROR', 2105);
define('MQSERIES_MQRC_COD_NOT_VALID_FOR_XCF_Q', 2106);
define('MQSERIES_MQRC_XWAIT_CANCELED', 2107);
define('MQSERIES_MQRC_XWAIT_ERROR', 2108);
define('MQSERIES_MQRC_SUPPRESSED_BY_EXIT', 2109);
define('MQSERIES_MQRC_FORMAT_ERROR', 2110);
define('MQSERIES_MQRC_SOURCE_CCSID_ERROR', 2111);
define('MQSERIES_MQRC_SOURCE_INTEGER_ENC_ERROR', 2112);
define('MQSERIES_MQRC_SOURCE_DECIMAL_ENC_ERROR', 2113);
define('MQSERIES_MQRC_SOURCE_FLOAT_ENC_ERROR', 2114);
define('MQSERIES_MQRC_TARGET_CCSID_ERROR', 2115);
define('MQSERIES_MQRC_TARGET_INTEGER_ENC_ERROR', 2116);
define('MQSERIES_MQRC_TARGET_DECIMAL_ENC_ERROR', 2117);
define('MQSERIES_MQRC_TARGET_FLOAT_ENC_ERROR', 2118);
define('MQSERIES_MQRC_NOT_CONVERTED', 2119);
define('MQSERIES_MQRC_CONVERTED_MSG_TOO_BIG', 2120);
define('MQSERIES_MQRC_TRUNCATED', 2120);
define('MQSERIES_MQRC_NO_EXTERNAL_PARTICIPANTS', 2121);
define('MQSERIES_MQRC_PARTICIPANT_NOT_AVAILABLE', 2122);
define('MQSERIES_MQRC_OUTCOME_MIXED', 2123);
define('MQSERIES_MQRC_OUTCOME_PENDING', 2124);
define('MQSERIES_MQRC_BRIDGE_STARTED', 2125);
define('MQSERIES_MQRC_BRIDGE_STOPPED', 2126);
define('MQSERIES_MQRC_ADAPTER_STORAGE_SHORTAGE', 2127);
define('MQSERIES_MQRC_UOW_IN_PROGRESS', 2128);
define('MQSERIES_MQRC_ADAPTER_CONN_LOAD_ERROR', 2129);
define('MQSERIES_MQRC_ADAPTER_SERV_LOAD_ERROR', 2130);
define('MQSERIES_MQRC_ADAPTER_DEFS_ERROR', 2131);
define('MQSERIES_MQRC_ADAPTER_DEFS_LOAD_ERROR', 2132);
define('MQSERIES_MQRC_ADAPTER_CONV_LOAD_ERROR', 2133);
define('MQSERIES_MQRC_BO_ERROR', 2134);
define('MQSERIES_MQRC_DH_ERROR', 2135);
define('MQSERIES_MQRC_MULTIPLE_REASONS', 2136);
define('MQSERIES_MQRC_OPEN_FAILED', 2137);
define('MQSERIES_MQRC_ADAPTER_DISC_LOAD_ERROR', 2138);
define('MQSERIES_MQRC_CNO_ERROR', 2139);
define('MQSERIES_MQRC_CICS_WAIT_FAILED', 2140);
define('MQSERIES_MQRC_DLH_ERROR', 2141);
define('MQSERIES_MQRC_HEADER_ERROR', 2142);
define('MQSERIES_MQRC_SOURCE_LENGTH_ERROR', 2143);
define('MQSERIES_MQRC_TARGET_LENGTH_ERROR', 2144);
define('MQSERIES_MQRC_SOURCE_BUFFER_ERROR', 2145);
define('MQSERIES_MQRC_TARGET_BUFFER_ERROR', 2146);
define('MQSERIES_MQRC_IIH_ERROR', 2148);
define('MQSERIES_MQRC_PCF_ERROR', 2149);
define('MQSERIES_MQRC_DBCS_ERROR', 2150);
define('MQSERIES_MQRC_OBJECT_NAME_ERROR', 2152);
define('MQSERIES_MQRC_OBJECT_Q_MGR_NAME_ERROR', 2153);
define('MQSERIES_MQRC_RECS_PRESENT_ERROR', 2154);
define('MQSERIES_MQRC_OBJECT_RECORDS_ERROR', 2155);
define('MQSERIES_MQRC_RESPONSE_RECORDS_ERROR', 2156);
define('MQSERIES_MQRC_ASID_MISMATCH', 2157);
define('MQSERIES_MQRC_PMO_RECORD_FLAGS_ERROR', 2158);
define('MQSERIES_MQRC_PUT_MSG_RECORDS_ERROR', 2159);
define('MQSERIES_MQRC_CONN_ID_IN_USE', 2160);
define('MQSERIES_MQRC_Q_MGR_QUIESCING', 2161);
define('MQSERIES_MQRC_Q_MGR_STOPPING', 2162);
define('MQSERIES_MQRC_DUPLICATE_RECOV_COORD', 2163);
define('MQSERIES_MQRC_PMO_ERROR', 2173);
define('MQSERIES_MQRC_API_EXIT_NOT_FOUND', 2182);
define('MQSERIES_MQRC_API_EXIT_LOAD_ERROR', 2183);
define('MQSERIES_MQRC_REMOTE_Q_NAME_ERROR', 2184);
define('MQSERIES_MQRC_INCONSISTENT_PERSISTENCE', 2185);
define('MQSERIES_MQRC_GMO_ERROR', 2186);
define('MQSERIES_MQRC_CICS_BRIDGE_RESTRICTION', 2187);
define('MQSERIES_MQRC_STOPPED_BY_CLUSTER_EXIT', 2188);
define('MQSERIES_MQRC_CLUSTER_RESOLUTION_ERROR', 2189);
define('MQSERIES_MQRC_CONVERTED_STRING_TOO_BIG', 2190);
define('MQSERIES_MQRC_TMC_ERROR', 2191);
define('MQSERIES_MQRC_PAGESET_FULL', 2192);
define('MQSERIES_MQRC_STORAGE_MEDIUM_FULL', 2192);
define('MQSERIES_MQRC_PAGESET_ERROR', 2193);
define('MQSERIES_MQRC_NAME_NOT_VALID_FOR_TYPE', 2194);
define('MQSERIES_MQRC_UNEXPECTED_ERROR', 2195);
define('MQSERIES_MQRC_UNKNOWN_XMIT_Q', 2196);
define('MQSERIES_MQRC_UNKNOWN_DEF_XMIT_Q', 2197);
define('MQSERIES_MQRC_DEF_XMIT_Q_TYPE_ERROR', 2198);
define('MQSERIES_MQRC_DEF_XMIT_Q_USAGE_ERROR', 2199);
define('MQSERIES_MQRC_MSG_MARKED_BROWSE_CO_OP', 2200);
define('MQSERIES_MQRC_NAME_IN_USE', 2201);
define('MQSERIES_MQRC_CONNECTION_QUIESCING', 2202);
define('MQSERIES_MQRC_CONNECTION_STOPPING', 2203);
define('MQSERIES_MQRC_ADAPTER_NOT_AVAILABLE', 2204);
define('MQSERIES_MQRC_MSG_ID_ERROR', 2206);
define('MQSERIES_MQRC_CORREL_ID_ERROR', 2207);
define('MQSERIES_MQRC_FILE_SYSTEM_ERROR', 2208);
define('MQSERIES_MQRC_NO_MSG_LOCKED', 2209);
define('MQSERIES_MQRC_SOAP_DOTNET_ERROR', 2210);
define('MQSERIES_MQRC_SOAP_AXIS_ERROR', 2211);
define('MQSERIES_MQRC_SOAP_URL_ERROR', 2212);
define('MQSERIES_MQRC_FILE_NOT_AUDITED', 2216);
define('MQSERIES_MQRC_CONNECTION_NOT_AUTHORIZED', 2217);
define('MQSERIES_MQRC_MSG_TOO_BIG_FOR_CHANNEL', 2218);
define('MQSERIES_MQRC_CALL_IN_PROGRESS', 2219);
define('MQSERIES_MQRC_RMH_ERROR', 2220);
define('MQSERIES_MQRC_Q_MGR_ACTIVE', 2222);
define('MQSERIES_MQRC_Q_MGR_NOT_ACTIVE', 2223);
define('MQSERIES_MQRC_Q_DEPTH_HIGH', 2224);
define('MQSERIES_MQRC_Q_DEPTH_LOW', 2225);
define('MQSERIES_MQRC_Q_SERVICE_INTERVAL_HIGH', 2226);
define('MQSERIES_MQRC_Q_SERVICE_INTERVAL_OK', 2227);
define('MQSERIES_MQRC_RFH_HEADER_FIELD_ERROR', 2228);
define('MQSERIES_MQRC_RAS_PROPERTY_ERROR', 2229);
define('MQSERIES_MQRC_UNIT_OF_WORK_NOT_STARTED', 2232);
define('MQSERIES_MQRC_CHANNEL_AUTO_DEF_OK', 2233);
define('MQSERIES_MQRC_CHANNEL_AUTO_DEF_ERROR', 2234);
define('MQSERIES_MQRC_CFH_ERROR', 2235);
define('MQSERIES_MQRC_CFIL_ERROR', 2236);
define('MQSERIES_MQRC_CFIN_ERROR', 2237);
define('MQSERIES_MQRC_CFSL_ERROR', 2238);
define('MQSERIES_MQRC_CFST_ERROR', 2239);
define('MQSERIES_MQRC_INCOMPLETE_GROUP', 2241);
define('MQSERIES_MQRC_INCOMPLETE_MSG', 2242);
define('MQSERIES_MQRC_INCONSISTENT_CCSIDS', 2243);
define('MQSERIES_MQRC_INCONSISTENT_ENCODINGS', 2244);
define('MQSERIES_MQRC_INCONSISTENT_UOW', 2245);
define('MQSERIES_MQRC_INVALID_MSG_UNDER_CURSOR', 2246);
define('MQSERIES_MQRC_MATCH_OPTIONS_ERROR', 2247);
define('MQSERIES_MQRC_MDE_ERROR', 2248);
define('MQSERIES_MQRC_MSG_FLAGS_ERROR', 2249);
define('MQSERIES_MQRC_MSG_SEQ_NUMBER_ERROR', 2250);
define('MQSERIES_MQRC_OFFSET_ERROR', 2251);
define('MQSERIES_MQRC_ORIGINAL_LENGTH_ERROR', 2252);
define('MQSERIES_MQRC_SEGMENT_LENGTH_ZERO', 2253);
define('MQSERIES_MQRC_UOW_NOT_AVAILABLE', 2255);
define('MQSERIES_MQRC_WRONG_GMO_VERSION', 2256);
define('MQSERIES_MQRC_WRONG_MD_VERSION', 2257);
define('MQSERIES_MQRC_GROUP_ID_ERROR', 2258);
define('MQSERIES_MQRC_INCONSISTENT_BROWSE', 2259);
define('MQSERIES_MQRC_XQH_ERROR', 2260);
define('MQSERIES_MQRC_SRC_ENV_ERROR', 2261);
define('MQSERIES_MQRC_SRC_NAME_ERROR', 2262);
define('MQSERIES_MQRC_DEST_ENV_ERROR', 2263);
define('MQSERIES_MQRC_DEST_NAME_ERROR', 2264);
define('MQSERIES_MQRC_TM_ERROR', 2265);
define('MQSERIES_MQRC_CLUSTER_EXIT_ERROR', 2266);
define('MQSERIES_MQRC_CLUSTER_EXIT_LOAD_ERROR', 2267);
define('MQSERIES_MQRC_CLUSTER_PUT_INHIBITED', 2268);
define('MQSERIES_MQRC_CLUSTER_RESOURCE_ERROR', 2269);
define('MQSERIES_MQRC_NO_DESTINATIONS_AVAILABLE', 2270);
define('MQSERIES_MQRC_CONN_TAG_IN_USE', 2271);
define('MQSERIES_MQRC_PARTIALLY_CONVERTED', 2272);
define('MQSERIES_MQRC_CONNECTION_ERROR', 2273);
define('MQSERIES_MQRC_OPTION_ENVIRONMENT_ERROR', 2274);
define('MQSERIES_MQRC_CD_ERROR', 2277);
define('MQSERIES_MQRC_CLIENT_CONN_ERROR', 2278);
define('MQSERIES_MQRC_CHANNEL_STOPPED_BY_USER', 2279);
define('MQSERIES_MQRC_HCONFIG_ERROR', 2280);
define('MQSERIES_MQRC_FUNCTION_ERROR', 2281);
define('MQSERIES_MQRC_CHANNEL_STARTED', 2282);
define('MQSERIES_MQRC_CHANNEL_STOPPED', 2283);
define('MQSERIES_MQRC_CHANNEL_CONV_ERROR', 2284);
define('MQSERIES_MQRC_SERVICE_NOT_AVAILABLE', 2285);
define('MQSERIES_MQRC_INITIALIZATION_FAILED', 2286);
define('MQSERIES_MQRC_TERMINATION_FAILED', 2287);
define('MQSERIES_MQRC_UNKNOWN_Q_NAME', 2288);
define('MQSERIES_MQRC_SERVICE_ERROR', 2289);
define('MQSERIES_MQRC_Q_ALREADY_EXISTS', 2290);
define('MQSERIES_MQRC_USER_ID_NOT_AVAILABLE', 2291);
define('MQSERIES_MQRC_UNKNOWN_ENTITY', 2292);
define('MQSERIES_MQRC_UNKNOWN_AUTH_ENTITY', 2293);
define('MQSERIES_MQRC_UNKNOWN_REF_OBJECT', 2294);
define('MQSERIES_MQRC_CHANNEL_ACTIVATED', 2295);
define('MQSERIES_MQRC_CHANNEL_NOT_ACTIVATED', 2296);
define('MQSERIES_MQRC_UOW_CANCELED', 2297);
define('MQSERIES_MQRC_FUNCTION_NOT_SUPPORTED', 2298);
define('MQSERIES_MQRC_SELECTOR_TYPE_ERROR', 2299);
define('MQSERIES_MQRC_COMMAND_TYPE_ERROR', 2300);
define('MQSERIES_MQRC_MULTIPLE_INSTANCE_ERROR', 2301);
define('MQSERIES_MQRC_SYSTEM_ITEM_NOT_ALTERABLE', 2302);
define('MQSERIES_MQRC_BAG_CONVERSION_ERROR', 2303);
define('MQSERIES_MQRC_SELECTOR_OUT_OF_RANGE', 2304);
define('MQSERIES_MQRC_SELECTOR_NOT_UNIQUE', 2305);
define('MQSERIES_MQRC_INDEX_NOT_PRESENT', 2306);
define('MQSERIES_MQRC_STRING_ERROR', 2307);
define('MQSERIES_MQRC_ENCODING_NOT_SUPPORTED', 2308);
define('MQSERIES_MQRC_SELECTOR_NOT_PRESENT', 2309);
define('MQSERIES_MQRC_OUT_SELECTOR_ERROR', 2310);
define('MQSERIES_MQRC_STRING_TRUNCATED', 2311);
define('MQSERIES_MQRC_SELECTOR_WRONG_TYPE', 2312);
define('MQSERIES_MQRC_INCONSISTENT_ITEM_TYPE', 2313);
define('MQSERIES_MQRC_INDEX_ERROR', 2314);
define('MQSERIES_MQRC_SYSTEM_BAG_NOT_ALTERABLE', 2315);
define('MQSERIES_MQRC_ITEM_COUNT_ERROR', 2316);
define('MQSERIES_MQRC_FORMAT_NOT_SUPPORTED', 2317);
define('MQSERIES_MQRC_SELECTOR_NOT_SUPPORTED', 2318);
define('MQSERIES_MQRC_ITEM_VALUE_ERROR', 2319);
define('MQSERIES_MQRC_HBAG_ERROR', 2320);
define('MQSERIES_MQRC_PARAMETER_MISSING', 2321);
define('MQSERIES_MQRC_CMD_SERVER_NOT_AVAILABLE', 2322);
define('MQSERIES_MQRC_STRING_LENGTH_ERROR', 2323);
define('MQSERIES_MQRC_INQUIRY_COMMAND_ERROR', 2324);
define('MQSERIES_MQRC_NESTED_BAG_NOT_SUPPORTED', 2325);
define('MQSERIES_MQRC_BAG_WRONG_TYPE', 2326);
define('MQSERIES_MQRC_ITEM_TYPE_ERROR', 2327);
define('MQSERIES_MQRC_SYSTEM_BAG_NOT_DELETABLE', 2328);
define('MQSERIES_MQRC_SYSTEM_ITEM_NOT_DELETABLE', 2329);
define('MQSERIES_MQRC_CODED_CHAR_SET_ID_ERROR', 2330);
define('MQSERIES_MQRC_MSG_TOKEN_ERROR', 2331);
define('MQSERIES_MQRC_MISSING_WIH', 2332);
define('MQSERIES_MQRC_WIH_ERROR', 2333);
define('MQSERIES_MQRC_RFH_ERROR', 2334);
define('MQSERIES_MQRC_RFH_STRING_ERROR', 2335);
define('MQSERIES_MQRC_RFH_COMMAND_ERROR', 2336);
define('MQSERIES_MQRC_RFH_PARM_ERROR', 2337);
define('MQSERIES_MQRC_RFH_DUPLICATE_PARM', 2338);
define('MQSERIES_MQRC_RFH_PARM_MISSING', 2339);
define('MQSERIES_MQRC_CHAR_CONVERSION_ERROR', 2340);
define('MQSERIES_MQRC_UCS2_CONVERSION_ERROR', 2341);
define('MQSERIES_MQRC_DB2_NOT_AVAILABLE', 2342);
define('MQSERIES_MQRC_OBJECT_NOT_UNIQUE', 2343);
define('MQSERIES_MQRC_CONN_TAG_NOT_RELEASED', 2344);
define('MQSERIES_MQRC_CF_NOT_AVAILABLE', 2345);
define('MQSERIES_MQRC_CF_STRUC_IN_USE', 2346);
define('MQSERIES_MQRC_CF_STRUC_LIST_HDR_IN_USE', 2347);
define('MQSERIES_MQRC_CF_STRUC_AUTH_FAILED', 2348);
define('MQSERIES_MQRC_CF_STRUC_ERROR', 2349);
define('MQSERIES_MQRC_CONN_TAG_NOT_USABLE', 2350);
define('MQSERIES_MQRC_GLOBAL_UOW_CONFLICT', 2351);
define('MQSERIES_MQRC_LOCAL_UOW_CONFLICT', 2352);
define('MQSERIES_MQRC_HANDLE_IN_USE_FOR_UOW', 2353);
define('MQSERIES_MQRC_UOW_ENLISTMENT_ERROR', 2354);
define('MQSERIES_MQRC_UOW_MIX_NOT_SUPPORTED', 2355);
define('MQSERIES_MQRC_WXP_ERROR', 2356);
define('MQSERIES_MQRC_CURRENT_RECORD_ERROR', 2357);
define('MQSERIES_MQRC_NEXT_OFFSET_ERROR', 2358);
define('MQSERIES_MQRC_NO_RECORD_AVAILABLE', 2359);
define('MQSERIES_MQRC_OBJECT_LEVEL_INCOMPATIBLE', 2360);
define('MQSERIES_MQRC_NEXT_RECORD_ERROR', 2361);
define('MQSERIES_MQRC_BACKOUT_THRESHOLD_REACHED', 2362);
define('MQSERIES_MQRC_MSG_NOT_MATCHED', 2363);
define('MQSERIES_MQRC_JMS_FORMAT_ERROR', 2364);
define('MQSERIES_MQRC_SEGMENTS_NOT_SUPPORTED', 2365);
define('MQSERIES_MQRC_WRONG_CF_LEVEL', 2366);
define('MQSERIES_MQRC_CONFIG_CREATE_OBJECT', 2367);
define('MQSERIES_MQRC_CONFIG_CHANGE_OBJECT', 2368);
define('MQSERIES_MQRC_CONFIG_DELETE_OBJECT', 2369);
define('MQSERIES_MQRC_CONFIG_REFRESH_OBJECT', 2370);
define('MQSERIES_MQRC_CHANNEL_SSL_ERROR', 2371);
define('MQSERIES_MQRC_PARTICIPANT_NOT_DEFINED', 2372);
define('MQSERIES_MQRC_CF_STRUC_FAILED', 2373);
define('MQSERIES_MQRC_API_EXIT_ERROR', 2374);
define('MQSERIES_MQRC_API_EXIT_INIT_ERROR', 2375);
define('MQSERIES_MQRC_API_EXIT_TERM_ERROR', 2376);
define('MQSERIES_MQRC_EXIT_REASON_ERROR', 2377);
define('MQSERIES_MQRC_RESERVED_VALUE_ERROR', 2378);
define('MQSERIES_MQRC_NO_DATA_AVAILABLE', 2379);
define('MQSERIES_MQRC_SCO_ERROR', 2380);
define('MQSERIES_MQRC_KEY_REPOSITORY_ERROR', 2381);
define('MQSERIES_MQRC_CRYPTO_HARDWARE_ERROR', 2382);
define('MQSERIES_MQRC_AUTH_INFO_REC_COUNT_ERROR', 2383);
define('MQSERIES_MQRC_AUTH_INFO_REC_ERROR', 2384);
define('MQSERIES_MQRC_AIR_ERROR', 2385);
define('MQSERIES_MQRC_AUTH_INFO_TYPE_ERROR', 2386);
define('MQSERIES_MQRC_AUTH_INFO_CONN_NAME_ERROR', 2387);
define('MQSERIES_MQRC_LDAP_USER_NAME_ERROR', 2388);
define('MQSERIES_MQRC_LDAP_USER_NAME_LENGTH_ERR', 2389);
define('MQSERIES_MQRC_LDAP_PASSWORD_ERROR', 2390);
define('MQSERIES_MQRC_SSL_ALREADY_INITIALIZED', 2391);
define('MQSERIES_MQRC_SSL_CONFIG_ERROR', 2392);
define('MQSERIES_MQRC_SSL_INITIALIZATION_ERROR', 2393);
define('MQSERIES_MQRC_Q_INDEX_TYPE_ERROR', 2394);
define('MQSERIES_MQRC_CFBS_ERROR', 2395);
define('MQSERIES_MQRC_SSL_NOT_ALLOWED', 2396);
define('MQSERIES_MQRC_JSSE_ERROR', 2397);
define('MQSERIES_MQRC_SSL_PEER_NAME_MISMATCH', 2398);
define('MQSERIES_MQRC_SSL_PEER_NAME_ERROR', 2399);
define('MQSERIES_MQRC_UNSUPPORTED_CIPHER_SUITE', 2400);
define('MQSERIES_MQRC_SSL_CERTIFICATE_REVOKED', 2401);
define('MQSERIES_MQRC_SSL_CERT_STORE_ERROR', 2402);
define('MQSERIES_MQRC_CLIENT_EXIT_LOAD_ERROR', 2406);
define('MQSERIES_MQRC_CLIENT_EXIT_ERROR', 2407);
define('MQSERIES_MQRC_UOW_COMMITTED', 2408);
define('MQSERIES_MQRC_SSL_KEY_RESET_ERROR', 2409);
define('MQSERIES_MQRC_UNKNOWN_COMPONENT_NAME', 2410);
define('MQSERIES_MQRC_LOGGER_STATUS', 2411);
define('MQSERIES_MQRC_COMMAND_MQSC', 2412);
define('MQSERIES_MQRC_COMMAND_PCF', 2413);
define('MQSERIES_MQRC_CFIF_ERROR', 2414);
define('MQSERIES_MQRC_CFSF_ERROR', 2415);
define('MQSERIES_MQRC_CFGR_ERROR', 2416);
define('MQSERIES_MQRC_MSG_NOT_ALLOWED_IN_GROUP', 2417);
define('MQSERIES_MQRC_FILTER_OPERATOR_ERROR', 2418);
define('MQSERIES_MQRC_NESTED_SELECTOR_ERROR', 2419);
define('MQSERIES_MQRC_EPH_ERROR', 2420);
define('MQSERIES_MQRC_RFH_FORMAT_ERROR', 2421);
define('MQSERIES_MQRC_CFBF_ERROR', 2422);
define('MQSERIES_MQRC_CLIENT_CHANNEL_CONFLICT', 2423);
define('MQSERIES_MQRC_SD_ERROR', 2424);
define('MQSERIES_MQRC_TOPIC_STRING_ERROR', 2425);
define('MQSERIES_MQRC_STS_ERROR', 2426);
define('MQSERIES_MQRC_NO_SUBSCRIPTION', 2428);
define('MQSERIES_MQRC_SUBSCRIPTION_IN_USE', 2429);
define('MQSERIES_MQRC_STAT_TYPE_ERROR', 2430);
define('MQSERIES_MQRC_SUB_USER_DATA_ERROR', 2431);
define('MQSERIES_MQRC_SUB_ALREADY_EXISTS', 2432);
define('MQSERIES_MQRC_IDENTITY_MISMATCH', 2434);
define('MQSERIES_MQRC_ALTER_SUB_ERROR', 2435);
define('MQSERIES_MQRC_DURABILITY_NOT_ALLOWED', 2436);
define('MQSERIES_MQRC_NO_RETAINED_MSG', 2437);
define('MQSERIES_MQRC_SRO_ERROR', 2438);
define('MQSERIES_MQRC_SUB_NAME_ERROR', 2440);
define('MQSERIES_MQRC_OBJECT_STRING_ERROR', 2441);
define('MQSERIES_MQRC_PROPERTY_NAME_ERROR', 2442);
define('MQSERIES_MQRC_SEGMENTATION_NOT_ALLOWED', 2443);
define('MQSERIES_MQRC_CBD_ERROR', 2444);
define('MQSERIES_MQRC_CTLO_ERROR', 2445);
define('MQSERIES_MQRC_NO_CALLBACKS_ACTIVE', 2446);
define('MQSERIES_MQRC_CALLBACK_NOT_REGISTERED', 2448);
define('MQSERIES_MQRC_OPTIONS_CHANGED', 2457);
define('MQSERIES_MQRC_READ_AHEAD_MSGS', 2458);
define('MQSERIES_MQRC_SELECTOR_SYNTAX_ERROR', 2459);
define('MQSERIES_MQRC_HMSG_ERROR', 2460);
define('MQSERIES_MQRC_CMHO_ERROR', 2461);
define('MQSERIES_MQRC_DMHO_ERROR', 2462);
define('MQSERIES_MQRC_SMPO_ERROR', 2463);
define('MQSERIES_MQRC_IMPO_ERROR', 2464);
define('MQSERIES_MQRC_PROPERTY_NAME_TOO_BIG', 2465);
define('MQSERIES_MQRC_PROP_VALUE_NOT_CONVERTED', 2466);
define('MQSERIES_MQRC_PROP_TYPE_NOT_SUPPORTED', 2467);
define('MQSERIES_MQRC_PROPERTY_VALUE_TOO_BIG', 2469);
define('MQSERIES_MQRC_PROP_CONV_NOT_SUPPORTED', 2470);
define('MQSERIES_MQRC_PROPERTY_NOT_AVAILABLE', 2471);
define('MQSERIES_MQRC_PROP_NUMBER_FORMAT_ERROR', 2472);
define('MQSERIES_MQRC_PROPERTY_TYPE_ERROR', 2473);
define('MQSERIES_MQRC_PROPERTIES_TOO_BIG', 2478);
define('MQSERIES_MQRC_PUT_NOT_RETAINED', 2479);
define('MQSERIES_MQRC_ALIAS_TARGTYPE_CHANGED', 2480);
define('MQSERIES_MQRC_DMPO_ERROR', 2481);
define('MQSERIES_MQRC_PD_ERROR', 2482);
define('MQSERIES_MQRC_CALLBACK_TYPE_ERROR', 2483);
define('MQSERIES_MQRC_CBD_OPTIONS_ERROR', 2484);
define('MQSERIES_MQRC_MAX_MSG_LENGTH_ERROR', 2485);
define('MQSERIES_MQRC_CALLBACK_ROUTINE_ERROR', 2486);
define('MQSERIES_MQRC_CALLBACK_LINK_ERROR', 2487);
define('MQSERIES_MQRC_OPERATION_ERROR', 2488);
define('MQSERIES_MQRC_BMHO_ERROR', 2489);
define('MQSERIES_MQRC_UNSUPPORTED_PROPERTY', 2490);
define('MQSERIES_MQRC_PROP_NAME_NOT_CONVERTED', 2492);
define('MQSERIES_MQRC_GET_ENABLED', 2494);
define('MQSERIES_MQRC_MODULE_NOT_FOUND', 2495);
define('MQSERIES_MQRC_MODULE_INVALID', 2496);
define('MQSERIES_MQRC_MODULE_ENTRY_NOT_FOUND', 2497);
define('MQSERIES_MQRC_MIXED_CONTENT_NOT_ALLOWED', 2498);
define('MQSERIES_MQRC_MSG_HANDLE_IN_USE', 2499);
define('MQSERIES_MQRC_HCONN_ASYNC_ACTIVE', 2500);
define('MQSERIES_MQRC_MHBO_ERROR', 2501);
define('MQSERIES_MQRC_PUBLICATION_FAILURE', 2502);
define('MQSERIES_MQRC_SUB_INHIBITED', 2503);
define('MQSERIES_MQRC_SELECTOR_ALWAYS_FALSE', 2504);
define('MQSERIES_MQRC_XEPO_ERROR', 2507);
define('MQSERIES_MQRC_DURABILITY_NOT_ALTERABLE', 2509);
define('MQSERIES_MQRC_TOPIC_NOT_ALTERABLE', 2510);
define('MQSERIES_MQRC_SUBLEVEL_NOT_ALTERABLE', 2512);
define('MQSERIES_MQRC_PROPERTY_NAME_LENGTH_ERR', 2513);
define('MQSERIES_MQRC_DUPLICATE_GROUP_SUB', 2514);
define('MQSERIES_MQRC_GROUPING_NOT_ALTERABLE', 2515);
define('MQSERIES_MQRC_SELECTOR_INVALID_FOR_TYPE', 2516);
define('MQSERIES_MQRC_HOBJ_QUIESCED', 2517);
define('MQSERIES_MQRC_HOBJ_QUIESCED_NO_MSGS', 2518);
define('MQSERIES_MQRC_SELECTION_STRING_ERROR', 2519);
define('MQSERIES_MQRC_RES_OBJECT_STRING_ERROR', 2520);
define('MQSERIES_MQRC_CONNECTION_SUSPENDED', 2521);
define('MQSERIES_MQRC_INVALID_DESTINATION', 2522);
define('MQSERIES_MQRC_INVALID_SUBSCRIPTION', 2523);
define('MQSERIES_MQRC_SELECTOR_NOT_ALTERABLE', 2524);
define('MQSERIES_MQRC_RETAINED_MSG_Q_ERROR', 2525);
define('MQSERIES_MQRC_RETAINED_NOT_DELIVERED', 2526);
define('MQSERIES_MQRC_RFH_RESTRICTED_FORMAT_ERR', 2527);
define('MQSERIES_MQRC_CONNECTION_STOPPED', 2528);
define('MQSERIES_MQRC_ASYNC_UOW_CONFLICT', 2529);
define('MQSERIES_MQRC_ASYNC_XA_CONFLICT', 2530);
define('MQSERIES_MQRC_PUBSUB_INHIBITED', 2531);
define('MQSERIES_MQRC_MSG_HANDLE_COPY_FAILURE', 2532);
define('MQSERIES_MQRC_DEST_CLASS_NOT_ALTERABLE', 2533);
define('MQSERIES_MQRC_OPERATION_NOT_ALLOWED', 2534);
define('MQSERIES_MQRC_ACTION_ERROR', 2535);
define('MQSERIES_MQRC_CHANNEL_NOT_AVAILABLE', 2537);
define('MQSERIES_MQRC_HOST_NOT_AVAILABLE', 2538);
define('MQSERIES_MQRC_CHANNEL_CONFIG_ERROR', 2539);
define('MQSERIES_MQRC_UNKNOWN_CHANNEL_NAME', 2540);
define('MQSERIES_MQRC_LOOPING_PUBLICATION', 2541);
define('MQSERIES_MQRC_ALREADY_JOINED', 2542);
define('MQSERIES_MQRC_STANDBY_Q_MGR', 2543);
define('MQSERIES_MQRC_RECONNECTING', 2544);
define('MQSERIES_MQRC_RECONNECTED', 2545);
define('MQSERIES_MQRC_RECONNECT_QMID_MISMATCH', 2546);
define('MQSERIES_MQRC_RECONNECT_INCOMPATIBLE', 2547);
define('MQSERIES_MQRC_RECONNECT_FAILED', 2548);
define('MQSERIES_MQRC_CALL_INTERRUPTED', 2549);
define('MQSERIES_MQRC_NO_SUBS_MATCHED', 2550);
define('MQSERIES_MQRC_SELECTION_NOT_AVAILABLE', 2551);
define('MQSERIES_MQRC_CHANNEL_SSL_WARNING', 2552);
define('MQSERIES_MQRC_OCSP_URL_ERROR', 2553);
define('MQSERIES_MQRC_CONTENT_ERROR', 2554);
define('MQSERIES_MQRC_RECONNECT_Q_MGR_REQD', 2555);
define('MQSERIES_MQRC_RECONNECT_TIMED_OUT', 2556);
define('MQSERIES_MQRC_PUBLISH_EXIT_ERROR', 2557);
define('MQSERIES_MQRC_COMMINFO_ERROR', 2558);
define('MQSERIES_MQRC_DEF_SYNCPOINT_INHIBITED', 2559);
define('MQSERIES_MQRC_MULTICAST_ONLY', 2560);
define('MQSERIES_MQRC_DATA_SET_NOT_AVAILABLE', 2561);
define('MQSERIES_MQRC_GROUPING_NOT_ALLOWED', 2562);
define('MQSERIES_MQRC_GROUP_ADDRESS_ERROR', 2563);
define('MQSERIES_MQRC_MULTICAST_CONFIG_ERROR', 2564);
define('MQSERIES_MQRC_MULTICAST_INTERFACE_ERROR', 2565);
define('MQSERIES_MQRC_MULTICAST_SEND_ERROR', 2566);
define('MQSERIES_MQRC_MULTICAST_INTERNAL_ERROR', 2567);
define('MQSERIES_MQRC_CONNECTION_NOT_AVAILABLE', 2568);
define('MQSERIES_MQRC_SYNCPOINT_NOT_ALLOWED', 2569);
define('MQSERIES_MQRC_SSL_ALT_PROVIDER_REQUIRED', 2570);
define('MQSERIES_MQRC_MCAST_PUB_STATUS', 2571);
define('MQSERIES_MQRC_MCAST_SUB_STATUS', 2572);
define('MQSERIES_MQRC_PRECONN_EXIT_LOAD_ERROR', 2573);
define('MQSERIES_MQRC_PRECONN_EXIT_NOT_FOUND', 2574);
define('MQSERIES_MQRC_PRECONN_EXIT_ERROR', 2575);
define('MQSERIES_MQRC_CD_ARRAY_ERROR', 2576);
define('MQSERIES_MQRC_CHANNEL_BLOCKED', 2577);
define('MQSERIES_MQRC_CHANNEL_BLOCKED_WARNING', 2578);
define('MQSERIES_MQRC_SUBSCRIPTION_CREATE', 2579);
define('MQSERIES_MQRC_SUBSCRIPTION_DELETE', 2580);
define('MQSERIES_MQRC_SUBSCRIPTION_CHANGE', 2581);
define('MQSERIES_MQRC_SUBSCRIPTION_REFRESH', 2582);
define('MQSERIES_MQRC_INSTALLATION_MISMATCH', 2583);
define('MQSERIES_MQRC_NOT_PRIVILEGED', 2584);
define('MQSERIES_MQRC_PROPERTIES_DISABLED', 2586);
define('MQSERIES_MQRC_HMSG_NOT_AVAILABLE', 2587);
define('MQSERIES_MQRC_EXIT_PROPS_NOT_SUPPORTED', 2588);
define('MQSERIES_MQRC_INSTALLATION_MISSING', 2589);
define('MQSERIES_MQRC_FASTPATH_NOT_AVAILABLE', 2590);
define('MQSERIES_MQRC_CIPHER_SPEC_NOT_SUITE_B', 2591);
define('MQSERIES_MQRC_SUITE_B_ERROR', 2592);
define('MQSERIES_MQRC_CERT_VAL_POLICY_ERROR', 2593);
define('MQSERIES_MQRC_REOPEN_EXCL_INPUT_ERROR', 6100);
define('MQSERIES_MQRC_REOPEN_INQUIRE_ERROR', 6101);
define('MQSERIES_MQRC_REOPEN_SAVED_CONTEXT_ERR', 6102);
define('MQSERIES_MQRC_REOPEN_TEMPORARY_Q_ERROR', 6103);
define('MQSERIES_MQRC_ATTRIBUTE_LOCKED', 6104);
define('MQSERIES_MQRC_CURSOR_NOT_VALID', 6105);
define('MQSERIES_MQRC_ENCODING_ERROR', 6106);
define('MQSERIES_MQRC_STRUC_ID_ERROR', 6107);
define('MQSERIES_MQRC_NULL_POINTER', 6108);
define('MQSERIES_MQRC_NO_CONNECTION_REFERENCE', 6109);
define('MQSERIES_MQRC_NO_BUFFER', 6110);
define('MQSERIES_MQRC_BINARY_DATA_LENGTH_ERROR', 6111);
define('MQSERIES_MQRC_BUFFER_NOT_AUTOMATIC', 6112);
define('MQSERIES_MQRC_INSUFFICIENT_BUFFER', 6113);
define('MQSERIES_MQRC_INSUFFICIENT_DATA', 6114);
define('MQSERIES_MQRC_DATA_TRUNCATED', 6115);
define('MQSERIES_MQRC_ZERO_LENGTH', 6116);
define('MQSERIES_MQRC_NEGATIVE_LENGTH', 6117);
define('MQSERIES_MQRC_NEGATIVE_OFFSET', 6118);
define('MQSERIES_MQRC_INCONSISTENT_FORMAT', 6119);
define('MQSERIES_MQRC_INCONSISTENT_OBJECT_STATE', 6120);
define('MQSERIES_MQRC_CONTEXT_OBJECT_NOT_VALID', 6121);
define('MQSERIES_MQRC_CONTEXT_OPEN_ERROR', 6122);
define('MQSERIES_MQRC_STRUC_LENGTH_ERROR', 6123);
define('MQSERIES_MQRC_NOT_CONNECTED', 6124);
define('MQSERIES_MQRC_NOT_OPEN', 6125);
define('MQSERIES_MQRC_DISTRIBUTION_LIST_EMPTY', 6126);
define('MQSERIES_MQRC_INCONSISTENT_OPEN_OPTIONS', 6127);
define('MQSERIES_MQRC_WRONG_VERSION', 6128);
define('MQSERIES_MQRC_REFERENCE_ERROR', 6129);
define('MQSERIES_MQRC_XR_NOT_AVAILABLE', 6130);
define('MQSERIES_MQOO_BIND_AS_Q_DEF', 0);
define('MQSERIES_MQOO_READ_AHEAD_AS_Q_DEF', 0);
define('MQSERIES_MQOO_INPUT_AS_Q_DEF', 1);
define('MQSERIES_MQOO_INPUT_SHARED', 2);
define('MQSERIES_MQOO_INPUT_EXCLUSIVE', 4);
define('MQSERIES_MQOO_BROWSE', 8);
define('MQSERIES_MQOO_OUTPUT', 16);
define('MQSERIES_MQOO_INQUIRE', 32);
define('MQSERIES_MQOO_SET', 64);
define('MQSERIES_MQOO_SAVE_ALL_CONTEXT', 128);
define('MQSERIES_MQOO_PASS_IDENTITY_CONTEXT', 256);
define('MQSERIES_MQOO_PASS_ALL_CONTEXT', 512);
define('MQSERIES_MQOO_SET_IDENTITY_CONTEXT', 1024);
define('MQSERIES_MQOO_SET_ALL_CONTEXT', 2048);
define('MQSERIES_MQOO_ALTERNATE_USER_AUTHORITY', 4096);
define('MQSERIES_MQOO_FAIL_IF_QUIESCING', 8192);
define('MQSERIES_MQOO_BIND_ON_OPEN', 16384);
define('MQSERIES_MQOO_BIND_ON_GROUP', 4194304);
define('MQSERIES_MQOO_BIND_NOT_FIXED', 32768);
define('MQSERIES_MQOO_CO_OP', 131072);
define('MQSERIES_MQOO_NO_READ_AHEAD', 524288);
define('MQSERIES_MQOO_READ_AHEAD', 1048576);
define('MQSERIES_MQOO_NO_MULTICAST', 2097152);
define('MQSERIES_MQOO_RESOLVE_LOCAL_Q', 262144);
define('MQSERIES_MQOO_RESOLVE_LOCAL_TOPIC', 262144);
define('MQSERIES_MQCO_IMMEDIATE', 0);
define('MQSERIES_MQCO_NONE', 0);
define('MQSERIES_MQCO_DELETE', 1);
define('MQSERIES_MQCO_DELETE_PURGE', 2);
define('MQSERIES_MQCO_KEEP_SUB', 4);
define('MQSERIES_MQCO_REMOVE_SUB', 8);
define('MQSERIES_MQCO_QUIESCE', 32);
define('MQSERIES_MQGMO_VERSION_1', 1);
define('MQSERIES_MQGMO_VERSION_2', 2);
define('MQSERIES_MQGMO_VERSION_3', 3);
define('MQSERIES_MQGMO_VERSION_4', 4);
define('MQSERIES_MQGMO_CURRENT_VERSION', 4);
define('MQSERIES_MQGMO_WAIT', 1);
define('MQSERIES_MQGMO_NO_WAIT', 0);
define('MQSERIES_MQGMO_SET_SIGNAL', 8);
define('MQSERIES_MQGMO_FAIL_IF_QUIESCING', 8192);
define('MQSERIES_MQGMO_SYNCPOINT', 2);
define('MQSERIES_MQGMO_SYNCPOINT_IF_PERSISTENT', 4096);
define('MQSERIES_MQGMO_NO_SYNCPOINT', 4);
define('MQSERIES_MQGMO_MARK_SKIP_BACKOUT', 128);
define('MQSERIES_MQGMO_BROWSE_FIRST', 16);
define('MQSERIES_MQGMO_BROWSE_NEXT', 32);
define('MQSERIES_MQGMO_BROWSE_MSG_UNDER_CURSOR', 2048);
define('MQSERIES_MQGMO_MSG_UNDER_CURSOR', 256);
define('MQSERIES_MQGMO_LOCK', 512);
define('MQSERIES_MQGMO_UNLOCK', 1024);
define('MQSERIES_MQGMO_ACCEPT_TRUNCATED_MSG', 64);
define('MQSERIES_MQGMO_CONVERT', 16384);
define('MQSERIES_MQGMO_LOGICAL_ORDER', 32768);
define('MQSERIES_MQGMO_COMPLETE_MSG', 65536);
define('MQSERIES_MQGMO_ALL_MSGS_AVAILABLE', 131072);
define('MQSERIES_MQGMO_ALL_SEGMENTS_AVAILABLE', 262144);
define('MQSERIES_MQGMO_MARK_BROWSE_HANDLE', 1048576);
define('MQSERIES_MQGMO_MARK_BROWSE_CO_OP', 2097152);
define('MQSERIES_MQGMO_UNMARK_BROWSE_CO_OP', 4194304);
define('MQSERIES_MQGMO_UNMARK_BROWSE_HANDLE', 8388608);
define('MQSERIES_MQGMO_UNMARKED_BROWSE_MSG', 16777216);
define('MQSERIES_MQGMO_PROPERTIES_FORCE_MQRFH2', 33554432);
define('MQSERIES_MQGMO_NO_PROPERTIES', 67108864);
define('MQSERIES_MQGMO_PROPERTIES_IN_HANDLE', 134217728);
define('MQSERIES_MQGMO_PROPERTIES_COMPATIBILITY', 268435456);
define('MQSERIES_MQGMO_PROPERTIES_AS_Q_DEF', 0);
define('MQSERIES_MQGMO_NONE', 0);
define('MQSERIES_MQGMO_BROWSE_HANDLE', 17825808);
define('MQSERIES_MQGMO_BROWSE_CO_OP', 18874384);
define('MQSERIES_MQWI_UNLIMITED', -1);
define('MQSERIES_MQEC_MSG_ARRIVED', 2);
define('MQSERIES_MQEC_WAIT_INTERVAL_EXPIRED', 3);
define('MQSERIES_MQEC_WAIT_CANCELED', 4);
define('MQSERIES_MQEC_Q_MGR_QUIESCING', 5);
define('MQSERIES_MQEC_CONNECTION_QUIESCING', 6);
define('MQSERIES_MQMO_MATCH_MSG_ID', 1);
define('MQSERIES_MQMO_MATCH_CORREL_ID', 2);
define('MQSERIES_MQMO_MATCH_GROUP_ID', 4);
define('MQSERIES_MQMO_MATCH_MSG_SEQ_NUMBER', 8);
define('MQSERIES_MQMO_MATCH_OFFSET', 16);
define('MQSERIES_MQMO_MATCH_MSG_TOKEN', 32);
define('MQSERIES_MQMO_NONE', 0);
define('MQSERIES_MQMTOK_NONE', '');
define('MQSERIES_MQRL_UNDEFINED', -1);
define('MQSERIES_MQMD_VERSION_1', 1);
define('MQSERIES_MQMD_VERSION_2', 2);
define('MQSERIES_MQMD_CURRENT_VERSION', 2);
define('MQSERIES_MQRO_EXCEPTION', 16777216);
define('MQSERIES_MQRO_EXCEPTION_WITH_DATA', 50331648);
define('MQSERIES_MQRO_EXCEPTION_WITH_FULL_DATA', 117440512);
define('MQSERIES_MQRO_EXPIRATION', 2097152);
define('MQSERIES_MQRO_EXPIRATION_WITH_DATA', 6291456);
define('MQSERIES_MQRO_EXPIRATION_WITH_FULL_DATA', 14680064);
define('MQSERIES_MQRO_COA', 256);
define('MQSERIES_MQRO_COA_WITH_DATA', 768);
define('MQSERIES_MQRO_COA_WITH_FULL_DATA', 1792);
define('MQSERIES_MQRO_COD', 2048);
define('MQSERIES_MQRO_COD_WITH_DATA', 6144);
define('MQSERIES_MQRO_COD_WITH_FULL_DATA', 14336);
define('MQSERIES_MQRO_PAN', 1);
define('MQSERIES_MQRO_NAN', 2);
define('MQSERIES_MQRO_ACTIVITY', 4);
define('MQSERIES_MQRO_NEW_MSG_ID', 0);
define('MQSERIES_MQRO_PASS_MSG_ID', 128);
define('MQSERIES_MQRO_COPY_MSG_ID_TO_CORREL_ID', 0);
define('MQSERIES_MQRO_PASS_CORREL_ID', 64);
define('MQSERIES_MQRO_DEAD_LETTER_Q', 0);
define('MQSERIES_MQRO_DISCARD_MSG', 134217728);
define('MQSERIES_MQRO_PASS_DISCARD_AND_EXPIRY', 16384);
define('MQSERIES_MQRO_NONE', 0);
define('MQSERIES_MQRO_REJECT_UNSUP_MASK', 270270464);
define('MQSERIES_MQRO_ACCEPT_UNSUP_MASK', 4024434943);
define('MQSERIES_MQRO_ACCEPT_UNSUP_IF_XMIT_MASK', 261888);
define('MQSERIES_MQMT_SYSTEM_FIRST', 1);
define('MQSERIES_MQMT_REQUEST', 1);
define('MQSERIES_MQMT_REPLY', 2);
define('MQSERIES_MQMT_DATAGRAM', 8);
define('MQSERIES_MQMT_REPORT', 4);
define('MQSERIES_MQMT_MQE_FIELDS_FROM_MQE', 112);
define('MQSERIES_MQMT_MQE_FIELDS', 113);
define('MQSERIES_MQMT_SYSTEM_LAST', 65535);
define('MQSERIES_MQMT_APPL_FIRST', 65536);
define('MQSERIES_MQMT_APPL_LAST', 999999999);
define('MQSERIES_MQEI_UNLIMITED', -1);
define('MQSERIES_MQFB_NONE', 0);
define('MQSERIES_MQFB_SYSTEM_FIRST', 1);
define('MQSERIES_MQFB_QUIT', 256);
define('MQSERIES_MQFB_EXPIRATION', 258);
define('MQSERIES_MQFB_COA', 259);
define('MQSERIES_MQFB_COD', 260);
define('MQSERIES_MQFB_CHANNEL_COMPLETED', 262);
define('MQSERIES_MQFB_CHANNEL_FAIL_RETRY', 263);
define('MQSERIES_MQFB_CHANNEL_FAIL', 264);
define('MQSERIES_MQFB_APPL_CANNOT_BE_STARTED', 265);
define('MQSERIES_MQFB_TM_ERROR', 266);
define('MQSERIES_MQFB_APPL_TYPE_ERROR', 267);
define('MQSERIES_MQFB_STOPPED_BY_MSG_EXIT', 268);
define('MQSERIES_MQFB_ACTIVITY', 269);
define('MQSERIES_MQFB_XMIT_Q_MSG_ERROR', 271);
define('MQSERIES_MQFB_PAN', 275);
define('MQSERIES_MQFB_NAN', 276);
define('MQSERIES_MQFB_STOPPED_BY_CHAD_EXIT', 277);
define('MQSERIES_MQFB_STOPPED_BY_PUBSUB_EXIT', 279);
define('MQSERIES_MQFB_NOT_A_REPOSITORY_MSG', 280);
define('MQSERIES_MQFB_BIND_OPEN_CLUSRCVR_DEL', 281);
define('MQSERIES_MQFB_MAX_ACTIVITIES', 282);
define('MQSERIES_MQFB_NOT_FORWARDED', 283);
define('MQSERIES_MQFB_NOT_DELIVERED', 284);
define('MQSERIES_MQFB_UNSUPPORTED_FORWARDING', 285);
define('MQSERIES_MQFB_UNSUPPORTED_DELIVERY', 286);
define('MQSERIES_MQFB_DATA_LENGTH_ZERO', 291);
define('MQSERIES_MQFB_DATA_LENGTH_NEGATIVE', 292);
define('MQSERIES_MQFB_DATA_LENGTH_TOO_BIG', 293);
define('MQSERIES_MQFB_BUFFER_OVERFLOW', 294);
define('MQSERIES_MQFB_LENGTH_OFF_BY_ONE', 295);
define('MQSERIES_MQFB_IIH_ERROR', 296);
define('MQSERIES_MQFB_NOT_AUTHORIZED_FOR_IMS', 298);
define('MQSERIES_MQFB_IMS_ERROR', 300);
define('MQSERIES_MQFB_IMS_FIRST', 301);
define('MQSERIES_MQFB_IMS_LAST', 399);
define('MQSERIES_MQFB_CICS_INTERNAL_ERROR', 401);
define('MQSERIES_MQFB_CICS_NOT_AUTHORIZED', 402);
define('MQSERIES_MQFB_CICS_BRIDGE_FAILURE', 403);
define('MQSERIES_MQFB_CICS_CORREL_ID_ERROR', 404);
define('MQSERIES_MQFB_CICS_CCSID_ERROR', 405);
define('MQSERIES_MQFB_CICS_ENCODING_ERROR', 406);
define('MQSERIES_MQFB_CICS_CIH_ERROR', 407);
define('MQSERIES_MQFB_CICS_UOW_ERROR', 408);
define('MQSERIES_MQFB_CICS_COMMAREA_ERROR', 409);
define('MQSERIES_MQFB_CICS_APPL_NOT_STARTED', 410);
define('MQSERIES_MQFB_CICS_APPL_ABENDED', 411);
define('MQSERIES_MQFB_CICS_DLQ_ERROR', 412);
define('MQSERIES_MQFB_CICS_UOW_BACKED_OUT', 413);
define('MQSERIES_MQFB_PUBLICATIONS_ON_REQUEST', 501);
define('MQSERIES_MQFB_SUBSCRIBER_IS_PUBLISHER', 502);
define('MQSERIES_MQFB_MSG_SCOPE_MISMATCH', 503);
define('MQSERIES_MQFB_SELECTOR_MISMATCH', 504);
define('MQSERIES_MQFB_NOT_A_GROUPUR_MSG', 505);
define('MQSERIES_MQFB_IMS_NACK_1A_REASON_FIRST', 600);
define('MQSERIES_MQFB_IMS_NACK_1A_REASON_LAST', 855);
define('MQSERIES_MQFB_SYSTEM_LAST', 65535);
define('MQSERIES_MQFB_APPL_FIRST', 65536);
define('MQSERIES_MQFB_APPL_LAST', 999999999);
define('MQSERIES_MQENC_NATIVE', 546);
define('MQSERIES_MQENC_INTEGER_MASK', 15);
define('MQSERIES_MQENC_DECIMAL_MASK', 240);
define('MQSERIES_MQENC_FLOAT_MASK', 3840);
define('MQSERIES_MQENC_RESERVED_MASK', 4294963200);
define('MQSERIES_MQENC_INTEGER_UNDEFINED', 0);
define('MQSERIES_MQENC_INTEGER_NORMAL', 1);
define('MQSERIES_MQENC_INTEGER_REVERSED', 2);
define('MQSERIES_MQENC_DECIMAL_UNDEFINED', 0);
define('MQSERIES_MQENC_DECIMAL_NORMAL', 16);
define('MQSERIES_MQENC_DECIMAL_REVERSED', 32);
define('MQSERIES_MQENC_FLOAT_UNDEFINED', 0);
define('MQSERIES_MQENC_FLOAT_IEEE_NORMAL', 256);
define('MQSERIES_MQENC_FLOAT_IEEE_REVERSED', 512);
define('MQSERIES_MQENC_FLOAT_S390', 768);
define('MQSERIES_MQENC_FLOAT_TNS', 1024);
define('MQSERIES_MQENC_NORMAL', 273);
define('MQSERIES_MQENC_REVERSED', 546);
define('MQSERIES_MQENC_S390', 785);
define('MQSERIES_MQENC_TNS', 1041);
define('MQSERIES_MQENC_AS_PUBLISHED', -1);
define('MQSERIES_MQCCSI_UNDEFINED', 0);
define('MQSERIES_MQCCSI_DEFAULT', 0);
define('MQSERIES_MQCCSI_Q_MGR', 0);
define('MQSERIES_MQCCSI_INHERIT', -2);
define('MQSERIES_MQCCSI_EMBEDDED', -1);
define('MQSERIES_MQCCSI_APPL', -3);
define('MQSERIES_MQCCSI_AS_PUBLISHED', -4);
define('MQSERIES_MQFMT_NONE', '');
define('MQSERIES_MQFMT_ADMIN', 'MQADMIN');
define('MQSERIES_MQFMT_CHANNEL_COMPLETED', 'MQCHCOM');
define('MQSERIES_MQFMT_CICS', 'MQCICS');
define('MQSERIES_MQFMT_COMMAND_1', 'MQCMD1');
define('MQSERIES_MQFMT_COMMAND_2', 'MQCMD2');
define('MQSERIES_MQFMT_DEAD_LETTER_HEADER', 'MQDEAD');
define('MQSERIES_MQFMT_DIST_HEADER', 'MQHDIST');
define('MQSERIES_MQFMT_EMBEDDED_PCF', 'MQHEPCF');
define('MQSERIES_MQFMT_EVENT', 'MQEVENT');
define('MQSERIES_MQFMT_IMS', 'MQIMS');
define('MQSERIES_MQFMT_IMS_VAR_STRING', 'MQIMSVS');
define('MQSERIES_MQFMT_MD_EXTENSION', 'MQHMDE');
define('MQSERIES_MQFMT_PCF', 'MQPCF');
define('MQSERIES_MQFMT_REF_MSG_HEADER', 'MQHREF');
define('MQSERIES_MQFMT_RF_HEADER', 'MQHRF');
define('MQSERIES_MQFMT_RF_HEADER_1', 'MQHRF');
define('MQSERIES_MQFMT_RF_HEADER_2', 'MQHRF2');
define('MQSERIES_MQFMT_STRING', 'MQSTR');
define('MQSERIES_MQFMT_TRIGGER', 'MQTRIG');
define('MQSERIES_MQFMT_WORK_INFO_HEADER', 'MQHWIH');
define('MQSERIES_MQFMT_XMIT_Q_HEADER', 'MQXMIT');
define('MQSERIES_MQPRI_PRIORITY_AS_Q_DEF', -1);
define('MQSERIES_MQPRI_PRIORITY_AS_PARENT', -2);
define('MQSERIES_MQPRI_PRIORITY_AS_PUBLISHED', -3);
define('MQSERIES_MQPRI_PRIORITY_AS_TOPIC_DEF', -1);
define('MQSERIES_MQPER_PERSISTENCE_AS_PARENT', -1);
define('MQSERIES_MQPER_NOT_PERSISTENT', 0);
define('MQSERIES_MQPER_PERSISTENT', 1);
define('MQSERIES_MQPER_PERSISTENCE_AS_Q_DEF', 2);
define('MQSERIES_MQPER_PERSISTENCE_AS_TOPIC_DEF', 2);
define('MQSERIES_MQPRT_RESPONSE_AS_PARENT', 0);
define('MQSERIES_MQPRT_SYNC_RESPONSE', 1);
define('MQSERIES_MQPRT_ASYNC_RESPONSE', 2);
define('MQSERIES_MQMI_NONE', '');
define('MQSERIES_MQCI_NONE', '');
define('MQSERIES_MQCI_NEW_SESSION', 'AMQ!NEW_SESSION_CORRELID');
define('MQSERIES_MQACT_NONE', '');
define('MQSERIES_MQAT_UNKNOWN', -1);
define('MQSERIES_MQAT_NO_CONTEXT', 0);
define('MQSERIES_MQAT_CICS', 1);
define('MQSERIES_MQAT_MVS', 2);
define('MQSERIES_MQAT_OS390', 2);
define('MQSERIES_MQAT_ZOS', 2);
define('MQSERIES_MQAT_IMS', 3);
define('MQSERIES_MQAT_OS2', 4);
define('MQSERIES_MQAT_DOS', 5);
define('MQSERIES_MQAT_AIX', 6);
define('MQSERIES_MQAT_UNIX', 6);
define('MQSERIES_MQAT_QMGR', 7);
define('MQSERIES_MQAT_OS400', 8);
define('MQSERIES_MQAT_WINDOWS', 9);
define('MQSERIES_MQAT_CICS_VSE', 10);
define('MQSERIES_MQAT_WINDOWS_NT', 11);
define('MQSERIES_MQAT_VMS', 12);
define('MQSERIES_MQAT_GUARDIAN', 13);
define('MQSERIES_MQAT_NSK', 13);
define('MQSERIES_MQAT_VOS', 14);
define('MQSERIES_MQAT_OPEN_TP1', 15);
define('MQSERIES_MQAT_VM', 18);
define('MQSERIES_MQAT_IMS_BRIDGE', 19);
define('MQSERIES_MQAT_XCF', 20);
define('MQSERIES_MQAT_CICS_BRIDGE', 21);
define('MQSERIES_MQAT_NOTES_AGENT', 22);
define('MQSERIES_MQAT_TPF', 23);
define('MQSERIES_MQAT_USER', 25);
define('MQSERIES_MQAT_BROKER', 26);
define('MQSERIES_MQAT_QMGR_PUBLISH', 26);
define('MQSERIES_MQAT_JAVA', 28);
define('MQSERIES_MQAT_DQM', 29);
define('MQSERIES_MQAT_CHANNEL_INITIATOR', 30);
define('MQSERIES_MQAT_WLM', 31);
define('MQSERIES_MQAT_BATCH', 32);
define('MQSERIES_MQAT_RRS_BATCH', 33);
define('MQSERIES_MQAT_SIB', 34);
define('MQSERIES_MQAT_SYSTEM_EXTENSION', 35);
define('MQSERIES_MQAT_MCAST_PUBLISH', 36);
define('MQSERIES_MQAT_DEFAULT', 6);
define('MQSERIES_MQAT_USER_FIRST', 65536);
define('MQSERIES_MQAT_USER_LAST', 999999999);
define('MQSERIES_MQGI_NONE', '');
define('MQSERIES_MQMF_SEGMENTATION_INHIBITED', 0);
define('MQSERIES_MQMF_SEGMENTATION_ALLOWED', 1);
define('MQSERIES_MQMF_MSG_IN_GROUP', 8);
define('MQSERIES_MQMF_LAST_MSG_IN_GROUP', 16);
define('MQSERIES_MQMF_SEGMENT', 2);
define('MQSERIES_MQMF_LAST_SEGMENT', 4);
define('MQSERIES_MQMF_NONE', 0);
define('MQSERIES_MQMF_REJECT_UNSUP_MASK', 4095);
define('MQSERIES_MQMF_ACCEPT_UNSUP_MASK', 4293918720);
define('MQSERIES_MQMF_ACCEPT_UNSUP_IF_XMIT_MASK', 1044480);
define('MQSERIES_MQOL_UNDEFINED', -1);
define('MQSERIES_MQBO_VERSION_1', 1);
define('MQSERIES_MQBO_CURRENT_VERSION', 1);
define('MQSERIES_MQBO_NONE', 0);
define('MQSERIES_MQPMO_VERSION_1', 1);
define('MQSERIES_MQPMO_VERSION_2', 2);
define('MQSERIES_MQPMO_VERSION_3', 3);
define('MQSERIES_MQPMO_CURRENT_VERSION', 3);
define('MQSERIES_MQPMO_SYNCPOINT', 2);
define('MQSERIES_MQPMO_NO_SYNCPOINT', 4);
define('MQSERIES_MQPMO_DEFAULT_CONTEXT', 32);
define('MQSERIES_MQPMO_NEW_MSG_ID', 64);
define('MQSERIES_MQPMO_NEW_CORREL_ID', 128);
define('MQSERIES_MQPMO_PASS_IDENTITY_CONTEXT', 256);
define('MQSERIES_MQPMO_PASS_ALL_CONTEXT', 512);
define('MQSERIES_MQPMO_SET_IDENTITY_CONTEXT', 1024);
define('MQSERIES_MQPMO_SET_ALL_CONTEXT', 2048);
define('MQSERIES_MQPMO_ALTERNATE_USER_AUTHORITY', 4096);
define('MQSERIES_MQPMO_FAIL_IF_QUIESCING', 8192);
define('MQSERIES_MQPMO_NO_CONTEXT', 16384);
define('MQSERIES_MQPMO_LOGICAL_ORDER', 32768);
define('MQSERIES_MQPMO_ASYNC_RESPONSE', 65536);
define('MQSERIES_MQPMO_SYNC_RESPONSE', 131072);
define('MQSERIES_MQPMO_RESOLVE_LOCAL_Q', 262144);
define('MQSERIES_MQPMO_WARN_IF_NO_SUBS_MATCHED', 524288);
define('MQSERIES_MQPMO_RETAIN', 2097152);
define('MQSERIES_MQPMO_MD_FOR_OUTPUT_ONLY', 8388608);
define('MQSERIES_MQPMO_SCOPE_QMGR', 67108864);
define('MQSERIES_MQPMO_SUPPRESS_REPLYTO', 134217728);
define('MQSERIES_MQPMO_NOT_OWN_SUBS', 268435456);
define('MQSERIES_MQPMO_RESPONSE_AS_Q_DEF', 0);
define('MQSERIES_MQPMO_RESPONSE_AS_TOPIC_DEF', 0);
define('MQSERIES_MQPMO_NONE', 0);
define('MQSERIES_MQCNO_VERSION_1', 1);
define('MQSERIES_MQCNO_VERSION_2', 2);
define('MQSERIES_MQCNO_VERSION_3', 3);
define('MQSERIES_MQCNO_VERSION_4', 4);
define('MQSERIES_MQCNO_VERSION_5', 5);
define('MQSERIES_MQCNO_CURRENT_VERSION', 5);
define('MQSERIES_MQCNO_STANDARD_BINDING', 0);
define('MQSERIES_MQCNO_FASTPATH_BINDING', 1);
define('MQSERIES_MQCNO_SERIALIZE_CONN_TAG_Q_MGR', 2);
define('MQSERIES_MQCNO_SERIALIZE_CONN_TAG_QSG', 4);
define('MQSERIES_MQCNO_RESTRICT_CONN_TAG_Q_MGR', 8);
define('MQSERIES_MQCNO_RESTRICT_CONN_TAG_QSG', 16);
define('MQSERIES_MQCNO_HANDLE_SHARE_NONE', 32);
define('MQSERIES_MQCNO_HANDLE_SHARE_BLOCK', 64);
define('MQSERIES_MQCNO_HANDLE_SHARE_NO_BLOCK', 128);
define('MQSERIES_MQCNO_SHARED_BINDING', 256);
define('MQSERIES_MQCNO_ISOLATED_BINDING', 512);
define('MQSERIES_MQCNO_LOCAL_BINDING', 1024);
define('MQSERIES_MQCNO_CLIENT_BINDING', 2048);
define('MQSERIES_MQCNO_ACCOUNTING_MQI_ENABLED', 4096);
define('MQSERIES_MQCNO_ACCOUNTING_MQI_DISABLED', 8192);
define('MQSERIES_MQCNO_ACCOUNTING_Q_ENABLED', 16384);
define('MQSERIES_MQCNO_ACCOUNTING_Q_DISABLED', 32768);
define('MQSERIES_MQCNO_NO_CONV_SHARING', 65536);
define('MQSERIES_MQCNO_ALL_CONVS_SHARE', 262144);
define('MQSERIES_MQCNO_CD_FOR_OUTPUT_ONLY', 524288);
define('MQSERIES_MQCNO_USE_CD_SELECTION', 1048576);
define('MQSERIES_MQCNO_RECONNECT_AS_DEF', 0);
define('MQSERIES_MQCNO_RECONNECT', 16777216);
define('MQSERIES_MQCNO_RECONNECT_DISABLED', 33554432);
define('MQSERIES_MQCNO_RECONNECT_Q_MGR', 67108864);
define('MQSERIES_MQCNO_ACTIVITY_TRACE_ENABLED', 134217728);
define('MQSERIES_MQCNO_ACTIVITY_TRACE_DISABLED', 268435456);
define('MQSERIES_MQCNO_NONE', 0);
define('MQSERIES_MQXPT_ALL', -1);
define('MQSERIES_MQXPT_LOCAL', 0);
define('MQSERIES_MQXPT_LU62', 1);
define('MQSERIES_MQXPT_TCP', 2);
define('MQSERIES_MQXPT_NETBIOS', 3);
define('MQSERIES_MQXPT_SPX', 4);
define('MQSERIES_MQXPT_DECNET', 5);
define('MQSERIES_MQXPT_UDP', 6);
define('MQSERIES_MQOT_NONE', 0);
define('MQSERIES_MQOT_Q', 1);
define('MQSERIES_MQOT_NAMELIST', 2);
define('MQSERIES_MQOT_PROCESS', 3);
define('MQSERIES_MQOT_STORAGE_CLASS', 4);
define('MQSERIES_MQOT_Q_MGR', 5);
define('MQSERIES_MQOT_CHANNEL', 6);
define('MQSERIES_MQOT_AUTH_INFO', 7);
define('MQSERIES_MQOT_TOPIC', 8);
define('MQSERIES_MQOT_COMM_INFO', 9);
define('MQSERIES_MQOT_CF_STRUC', 10);
define('MQSERIES_MQOT_LISTENER', 11);
define('MQSERIES_MQOT_SERVICE', 12);
define('MQSERIES_MQOT_RESERVED_1', 999);
define('MQSERIES_MQCA_ADMIN_TOPIC_NAME', 2105);
define('MQSERIES_MQCA_ALTERATION_DATE', 2027);
define('MQSERIES_MQCA_ALTERATION_TIME', 2028);
define('MQSERIES_MQCA_APPL_ID', 2001);
define('MQSERIES_MQCA_AUTH_INFO_CONN_NAME', 2053);
define('MQSERIES_MQCA_AUTH_INFO_DESC', 2046);
define('MQSERIES_MQCA_AUTH_INFO_NAME', 2045);
define('MQSERIES_MQCA_AUTH_INFO_OCSP_URL', 2109);
define('MQSERIES_MQCA_AUTO_REORG_CATALOG', 2091);
define('MQSERIES_MQCA_AUTO_REORG_START_TIME', 2090);
define('MQSERIES_MQCA_BACKOUT_REQ_Q_NAME', 2019);
define('MQSERIES_MQCA_BASE_OBJECT_NAME', 2002);
define('MQSERIES_MQCA_BASE_Q_NAME', 2002);
define('MQSERIES_MQCA_BATCH_INTERFACE_ID', 2068);
define('MQSERIES_MQCA_CF_STRUC_DESC', 2052);
define('MQSERIES_MQCA_CF_STRUC_NAME', 2039);
define('MQSERIES_MQCA_CHANNEL_AUTO_DEF_EXIT', 2026);
define('MQSERIES_MQCA_CHILD', 2101);
define('MQSERIES_MQCA_CHINIT_SERVICE_PARM', 2076);
define('MQSERIES_MQCA_CICS_FILE_NAME', 2060);
define('MQSERIES_MQCA_CLUSTER_DATE', 2037);
define('MQSERIES_MQCA_CLUSTER_NAME', 2029);
define('MQSERIES_MQCA_CLUSTER_NAMELIST', 2030);
define('MQSERIES_MQCA_CLUSTER_Q_MGR_NAME', 2031);
define('MQSERIES_MQCA_CLUSTER_TIME', 2038);
define('MQSERIES_MQCA_CLUSTER_WORKLOAD_DATA', 2034);
define('MQSERIES_MQCA_CLUSTER_WORKLOAD_EXIT', 2033);
define('MQSERIES_MQCA_COMMAND_INPUT_Q_NAME', 2003);
define('MQSERIES_MQCA_COMMAND_REPLY_Q_NAME', 2067);
define('MQSERIES_MQCA_CREATION_DATE', 2004);
define('MQSERIES_MQCA_CREATION_TIME', 2005);
define('MQSERIES_MQCA_DEAD_LETTER_Q_NAME', 2006);
define('MQSERIES_MQCA_DEF_XMIT_Q_NAME', 2025);
define('MQSERIES_MQCA_DNS_GROUP', 2071);
define('MQSERIES_MQCA_ENV_DATA', 2007);
define('MQSERIES_MQCA_FIRST', 2001);
define('MQSERIES_MQCA_IGQ_USER_ID', 2041);
define('MQSERIES_MQCA_INITIATION_Q_NAME', 2008);
define('MQSERIES_MQCA_LAST', 4000);
define('MQSERIES_MQCA_LDAP_PASSWORD', 2048);
define('MQSERIES_MQCA_LDAP_USER_NAME', 2047);
define('MQSERIES_MQCA_LU_GROUP_NAME', 2072);
define('MQSERIES_MQCA_LU_NAME', 2073);
define('MQSERIES_MQCA_LU62_ARM_SUFFIX', 2074);
define('MQSERIES_MQCA_MODEL_DURABLE_Q', 2096);
define('MQSERIES_MQCA_MODEL_NON_DURABLE_Q', 2097);
define('MQSERIES_MQCA_MONITOR_Q_NAME', 2066);
define('MQSERIES_MQCA_NAMELIST_DESC', 2009);
define('MQSERIES_MQCA_NAMELIST_NAME', 2010);
define('MQSERIES_MQCA_NAMES', 2020);
define('MQSERIES_MQCA_PARENT', 2102);
define('MQSERIES_MQCA_PASS_TICKET_APPL', 2086);
define('MQSERIES_MQCA_PROCESS_DESC', 2011);
define('MQSERIES_MQCA_PROCESS_NAME', 2012);
define('MQSERIES_MQCA_Q_DESC', 2013);
define('MQSERIES_MQCA_Q_MGR_DESC', 2014);
define('MQSERIES_MQCA_Q_MGR_IDENTIFIER', 2032);
define('MQSERIES_MQCA_Q_MGR_NAME', 2015);
define('MQSERIES_MQCA_Q_NAME', 2016);
define('MQSERIES_MQCA_QSG_NAME', 2040);
define('MQSERIES_MQCA_REMOTE_Q_MGR_NAME', 2017);
define('MQSERIES_MQCA_REMOTE_Q_NAME', 2018);
define('MQSERIES_MQCA_REPOSITORY_NAME', 2035);
define('MQSERIES_MQCA_REPOSITORY_NAMELIST', 2036);
define('MQSERIES_MQCA_RESUME_DATE', 2098);
define('MQSERIES_MQCA_RESUME_TIME', 2099);
define('MQSERIES_MQCA_SERVICE_DESC', 2078);
define('MQSERIES_MQCA_SERVICE_NAME', 2077);
define('MQSERIES_MQCA_SERVICE_START_ARGS', 2080);
define('MQSERIES_MQCA_SERVICE_START_COMMAND', 2079);
define('MQSERIES_MQCA_SERVICE_STOP_ARGS', 2082);
define('MQSERIES_MQCA_SERVICE_STOP_COMMAND', 2081);
define('MQSERIES_MQCA_STDERR_DESTINATION', 2084);
define('MQSERIES_MQCA_STDOUT_DESTINATION', 2083);
define('MQSERIES_MQCA_SSL_CRL_NAMELIST', 2050);
define('MQSERIES_MQCA_SSL_CRYPTO_HARDWARE', 2051);
define('MQSERIES_MQCA_SSL_KEY_LIBRARY', 2069);
define('MQSERIES_MQCA_SSL_KEY_MEMBER', 2070);
define('MQSERIES_MQCA_SSL_KEY_REPOSITORY', 2049);
define('MQSERIES_MQCA_STORAGE_CLASS', 2022);
define('MQSERIES_MQCA_STORAGE_CLASS_DESC', 2042);
define('MQSERIES_MQCA_SYSTEM_LOG_Q_NAME', 2065);
define('MQSERIES_MQCA_TCP_NAME', 2075);
define('MQSERIES_MQCA_TOPIC_DESC', 2093);
define('MQSERIES_MQCA_TOPIC_NAME', 2092);
define('MQSERIES_MQCA_TOPIC_STRING', 2094);
define('MQSERIES_MQCA_TOPIC_STRING_FILTER', 2108);
define('MQSERIES_MQCA_TPIPE_NAME', 2085);
define('MQSERIES_MQCA_TRIGGER_CHANNEL_NAME', 2064);
define('MQSERIES_MQCA_TRIGGER_DATA', 2023);
define('MQSERIES_MQCA_TRIGGER_PROGRAM_NAME', 2062);
define('MQSERIES_MQCA_TRIGGER_TERM_ID', 2063);
define('MQSERIES_MQCA_TRIGGER_TRANS_ID', 2061);
define('MQSERIES_MQCA_USER_DATA', 2021);
define('MQSERIES_MQCA_USER_LIST', 4000);
define('MQSERIES_MQCA_VERSION', 2120);
define('MQSERIES_MQCA_XCF_GROUP_NAME', 2043);
define('MQSERIES_MQCA_XCF_MEMBER_NAME', 2044);
define('MQSERIES_MQCA_XMIT_Q_NAME', 2024);
define('MQSERIES_MQCA_COMM_INFO_NAME', 2110);
define('MQSERIES_MQCA_COMM_INFO_DESC', 2111);
define('MQSERIES_MQCA_POLICY_NAME', 2112);
define('MQSERIES_MQCA_SIGNER_DN', 2113);
define('MQSERIES_MQCA_RECIPIENT_DN', 2114);
define('MQSERIES_MQCA_INSTALLATION_DESC', 2115);
define('MQSERIES_MQCA_INSTALLATION_NAME', 2116);
define('MQSERIES_MQCA_INSTALLATION_PATH', 2117);
define('MQSERIES_MQCA_CHLAUTH_DESC', 2118);
define('MQSERIES_MQCA_CUSTOM', 2119);
define('MQSERIES_MQCA_XR_VERSION', 2122);
define('MQSERIES_MQCA_XR_SSL_CIPHER_SUITES', 2123);
define('MQSERIES_MQCA_CLUS_CHL_NAME', 2124);
define('MQSERIES_MQCA_LAST_USED', 2137);
define('MQSERIES_MQIA_ACCOUNTING_CONN_OVERRIDE', 136);
define('MQSERIES_MQIA_ACCOUNTING_INTERVAL', 135);
define('MQSERIES_MQIA_ACCOUNTING_MQI', 133);
define('MQSERIES_MQIA_ACCOUNTING_Q', 134);
define('MQSERIES_MQIA_ACTIVE_CHANNELS', 100);
define('MQSERIES_MQIA_ACTIVITY_RECORDING', 138);
define('MQSERIES_MQIA_ADOPTNEWMCA_CHECK', 102);
define('MQSERIES_MQIA_ADOPTNEWMCA_TYPE', 103);
define('MQSERIES_MQIA_ADOPTNEWMCA_INTERVAL', 104);
define('MQSERIES_MQIA_APPL_TYPE', 1);
define('MQSERIES_MQIA_ARCHIVE', 60);
define('MQSERIES_MQIA_AUTH_INFO_TYPE', 66);
define('MQSERIES_MQIA_AUTHORITY_EVENT', 47);
define('MQSERIES_MQIA_AUTO_REORG_INTERVAL', 174);
define('MQSERIES_MQIA_AUTO_REORGANIZATION', 173);
define('MQSERIES_MQIA_BACKOUT_THRESHOLD', 22);
define('MQSERIES_MQIA_BASE_TYPE', 193);
define('MQSERIES_MQIA_BATCH_INTERFACE_AUTO', 86);
define('MQSERIES_MQIA_BRIDGE_EVENT', 74);
define('MQSERIES_MQIA_CERT_VAL_POLICY', 252);
define('MQSERIES_MQIA_CF_CFCONLOS', 246);
define('MQSERIES_MQIA_CF_LEVEL', 70);
define('MQSERIES_MQIA_CF_OFFLOAD', 224);
define('MQSERIES_MQIA_CF_OFFLOAD_THRESHOLD1', 225);
define('MQSERIES_MQIA_CF_OFFLOAD_THRESHOLD2', 226);
define('MQSERIES_MQIA_CF_OFFLOAD_THRESHOLD3', 227);
define('MQSERIES_MQIA_CF_OFFLDUSE', 229);
define('MQSERIES_MQIA_CF_RECOVER', 71);
define('MQSERIES_MQIA_CF_RECAUTO', 244);
define('MQSERIES_MQIA_CF_SMDS_BUFFERS', 228);
define('MQSERIES_MQIA_CHANNEL_AUTO_DEF', 55);
define('MQSERIES_MQIA_CHANNEL_AUTO_DEF_EVENT', 56);
define('MQSERIES_MQIA_CHANNEL_EVENT', 73);
define('MQSERIES_MQIA_CHINIT_ADAPTERS', 101);
define('MQSERIES_MQIA_CHINIT_CONTROL', 119);
define('MQSERIES_MQIA_CHINIT_DISPATCHERS', 105);
define('MQSERIES_MQIA_CHINIT_TRACE_AUTO_START', 117);
define('MQSERIES_MQIA_CHINIT_TRACE_TABLE_SIZE', 118);
define('MQSERIES_MQIA_CLUSTER_Q_TYPE', 59);
define('MQSERIES_MQIA_CLUSTER_WORKLOAD_LENGTH', 58);
define('MQSERIES_MQIA_CLWL_MRU_CHANNELS', 97);
define('MQSERIES_MQIA_CLWL_Q_RANK', 95);
define('MQSERIES_MQIA_CLWL_Q_PRIORITY', 96);
define('MQSERIES_MQIA_CLWL_USEQ', 98);
define('MQSERIES_MQIA_CMD_SERVER_AUTO', 87);
define('MQSERIES_MQIA_CMD_SERVER_CONTROL', 120);
define('MQSERIES_MQIA_CMD_SERVER_CONVERT_MSG', 88);
define('MQSERIES_MQIA_CMD_SERVER_DLQ_MSG', 89);
define('MQSERIES_MQIA_CODED_CHAR_SET_ID', 2);
define('MQSERIES_MQIA_COMMAND_EVENT', 99);
define('MQSERIES_MQIA_COMMAND_LEVEL', 31);
define('MQSERIES_MQIA_CONFIGURATION_EVENT', 51);
define('MQSERIES_MQIA_CPI_LEVEL', 27);
define('MQSERIES_MQIA_CURRENT_Q_DEPTH', 3);
define('MQSERIES_MQIA_DEF_BIND', 61);
define('MQSERIES_MQIA_DEF_INPUT_OPEN_OPTION', 4);
define('MQSERIES_MQIA_DEF_PERSISTENCE', 5);
define('MQSERIES_MQIA_DEF_PRIORITY', 6);
define('MQSERIES_MQIA_DEF_PUT_RESPONSE_TYPE', 184);
define('MQSERIES_MQIA_DEF_READ_AHEAD', 188);
define('MQSERIES_MQIA_DEFINITION_TYPE', 7);
define('MQSERIES_MQIA_DIST_LISTS', 34);
define('MQSERIES_MQIA_DNS_WLM', 106);
define('MQSERIES_MQIA_DURABLE_SUB', 175);
define('MQSERIES_MQIA_EXPIRY_INTERVAL', 39);
define('MQSERIES_MQIA_FIRST', 1);
define('MQSERIES_MQIA_GROUP_UR', 221);
define('MQSERIES_MQIA_HARDEN_GET_BACKOUT', 8);
define('MQSERIES_MQIA_HIGH_Q_DEPTH', 36);
define('MQSERIES_MQIA_IGQ_PUT_AUTHORITY', 65);
define('MQSERIES_MQIA_INDEX_TYPE', 57);
define('MQSERIES_MQIA_INHIBIT_EVENT', 48);
define('MQSERIES_MQIA_INHIBIT_GET', 9);
define('MQSERIES_MQIA_INHIBIT_PUB', 181);
define('MQSERIES_MQIA_INHIBIT_PUT', 10);
define('MQSERIES_MQIA_INHIBIT_SUB', 182);
define('MQSERIES_MQIA_INTRA_GROUP_QUEUING', 64);
define('MQSERIES_MQIA_IP_ADDRESS_VERSION', 93);
define('MQSERIES_MQIA_LAST', 2000);
define('MQSERIES_MQIA_LISTENER_PORT_NUMBER', 85);
define('MQSERIES_MQIA_LISTENER_TIMER', 107);
define('MQSERIES_MQIA_LOGGER_EVENT', 94);
define('MQSERIES_MQIA_LU62_CHANNELS', 108);
define('MQSERIES_MQIA_LOCAL_EVENT', 49);
define('MQSERIES_MQIA_MSG_MARK_BROWSE_INTERVAL', 68);
define('MQSERIES_MQIA_MASTER_ADMIN', 186);
define('MQSERIES_MQIA_MAX_CHANNELS', 109);
define('MQSERIES_MQIA_MAX_CLIENTS', 172);
define('MQSERIES_MQIA_MAX_GLOBAL_LOCKS', 83);
define('MQSERIES_MQIA_MAX_HANDLES', 11);
define('MQSERIES_MQIA_MAX_LOCAL_LOCKS', 84);
define('MQSERIES_MQIA_MAX_MSG_LENGTH', 13);
define('MQSERIES_MQIA_MAX_OPEN_Q', 80);
define('MQSERIES_MQIA_MAX_PRIORITY', 14);
define('MQSERIES_MQIA_MAX_PROPERTIES_LENGTH', 192);
define('MQSERIES_MQIA_MAX_Q_DEPTH', 15);
define('MQSERIES_MQIA_MAX_Q_TRIGGERS', 90);
define('MQSERIES_MQIA_MAX_RECOVERY_TASKS', 171);
define('MQSERIES_MQIA_MAX_RESPONSES', 230);
define('MQSERIES_MQIA_MAX_UNCOMMITTED_MSGS', 33);
define('MQSERIES_MQIA_MONITOR_INTERVAL', 81);
define('MQSERIES_MQIA_MONITORING_AUTO_CLUSSDR', 124);
define('MQSERIES_MQIA_MONITORING_CHANNEL', 122);
define('MQSERIES_MQIA_MONITORING_Q', 123);
define('MQSERIES_MQIA_MSG_DELIVERY_SEQUENCE', 16);
define('MQSERIES_MQIA_MSG_DEQ_COUNT', 38);
define('MQSERIES_MQIA_MSG_ENQ_COUNT', 37);
define('MQSERIES_MQIA_NAME_COUNT', 19);
define('MQSERIES_MQIA_NAMELIST_TYPE', 72);
define('MQSERIES_MQIA_NPM_CLASS', 78);
define('MQSERIES_MQIA_NPM_DELIVERY', 196);
define('MQSERIES_MQIA_OPEN_INPUT_COUNT', 17);
define('MQSERIES_MQIA_OPEN_OUTPUT_COUNT', 18);
define('MQSERIES_MQIA_OUTBOUND_PORT_MAX', 140);
define('MQSERIES_MQIA_OUTBOUND_PORT_MIN', 110);
define('MQSERIES_MQIA_PAGESET_ID', 62);
define('MQSERIES_MQIA_PERFORMANCE_EVENT', 53);
define('MQSERIES_MQIA_PLATFORM', 32);
define('MQSERIES_MQIA_PM_DELIVERY', 195);
define('MQSERIES_MQIA_PROPERTY_CONTROL', 190);
define('MQSERIES_MQIA_PROXY_SUB', 199);
define('MQSERIES_MQIA_PUB_COUNT', 215);
define('MQSERIES_MQIA_PUB_SCOPE', 219);
define('MQSERIES_MQIA_PUBSUB_CLUSTER', 249);
define('MQSERIES_MQIA_PUBSUB_MAXMSG_RETRY_COUNT', 206);
define('MQSERIES_MQIA_PUBSUB_MODE', 187);
define('MQSERIES_MQIA_PUBSUB_NP_MSG', 203);
define('MQSERIES_MQIA_PUBSUB_NP_RESP', 205);
define('MQSERIES_MQIA_PUBSUB_SYNC_PT', 207);
define('MQSERIES_MQIA_Q_DEPTH_HIGH_EVENT', 43);
define('MQSERIES_MQIA_Q_DEPTH_HIGH_LIMIT', 40);
define('MQSERIES_MQIA_Q_DEPTH_LOW_EVENT', 44);
define('MQSERIES_MQIA_Q_DEPTH_LOW_LIMIT', 41);
define('MQSERIES_MQIA_Q_DEPTH_MAX_EVENT', 42);
define('MQSERIES_MQIA_Q_SERVICE_INTERVAL', 54);
define('MQSERIES_MQIA_Q_SERVICE_INTERVAL_EVENT', 46);
define('MQSERIES_MQIA_Q_TYPE', 20);
define('MQSERIES_MQIA_Q_USERS', 82);
define('MQSERIES_MQIA_QMGR_CFCONLOS', 245);
define('MQSERIES_MQIA_QMOPT_CONS_COMMS_MSGS', 155);
define('MQSERIES_MQIA_QMOPT_CONS_CRITICAL_MSGS', 154);
define('MQSERIES_MQIA_QMOPT_CONS_ERROR_MSGS', 153);
define('MQSERIES_MQIA_QMOPT_CONS_INFO_MSGS', 151);
define('MQSERIES_MQIA_QMOPT_CONS_REORG_MSGS', 156);
define('MQSERIES_MQIA_QMOPT_CONS_SYSTEM_MSGS', 157);
define('MQSERIES_MQIA_QMOPT_CONS_WARNING_MSGS', 152);
define('MQSERIES_MQIA_QMOPT_CSMT_ON_ERROR', 150);
define('MQSERIES_MQIA_QMOPT_INTERNAL_DUMP', 170);
define('MQSERIES_MQIA_QMOPT_LOG_COMMS_MSGS', 162);
define('MQSERIES_MQIA_QMOPT_LOG_CRITICAL_MSGS', 161);
define('MQSERIES_MQIA_QMOPT_LOG_ERROR_MSGS', 160);
define('MQSERIES_MQIA_QMOPT_LOG_INFO_MSGS', 158);
define('MQSERIES_MQIA_QMOPT_LOG_REORG_MSGS', 163);
define('MQSERIES_MQIA_QMOPT_LOG_SYSTEM_MSGS', 164);
define('MQSERIES_MQIA_QMOPT_LOG_WARNING_MSGS', 159);
define('MQSERIES_MQIA_QMOPT_TRACE_COMMS', 166);
define('MQSERIES_MQIA_QMOPT_TRACE_CONVERSION', 168);
define('MQSERIES_MQIA_QMOPT_TRACE_REORG', 167);
define('MQSERIES_MQIA_QMOPT_TRACE_MQI_CALLS', 165);
define('MQSERIES_MQIA_QMOPT_TRACE_SYSTEM', 169);
define('MQSERIES_MQIA_QSG_DISP', 63);
define('MQSERIES_MQIA_READ_AHEAD', 189);
define('MQSERIES_MQIA_RECEIVE_TIMEOUT', 111);
define('MQSERIES_MQIA_RECEIVE_TIMEOUT_MIN', 113);
define('MQSERIES_MQIA_RECEIVE_TIMEOUT_TYPE', 112);
define('MQSERIES_MQIA_REMOTE_EVENT', 50);
define('MQSERIES_MQIA_RETENTION_INTERVAL', 21);
define('MQSERIES_MQIA_RESPONSE_RESTART_POINT', 231);
define('MQSERIES_MQIA_SCOPE', 45);
define('MQSERIES_MQIA_SECURITY_CASE', 141);
define('MQSERIES_MQIA_SERVICE_CONTROL', 139);
define('MQSERIES_MQIA_SERVICE_TYPE', 121);
define('MQSERIES_MQIA_SHAREABILITY', 23);
define('MQSERIES_MQIA_SHARED_Q_Q_MGR_NAME', 77);
define('MQSERIES_MQIA_SSL_EVENT', 75);
define('MQSERIES_MQIA_SSL_FIPS_REQUIRED', 92);
define('MQSERIES_MQIA_SSL_RESET_COUNT', 76);
define('MQSERIES_MQIA_SSL_TASKS', 69);
define('MQSERIES_MQIA_START_STOP_EVENT', 52);
define('MQSERIES_MQIA_STATISTICS_CHANNEL', 129);
define('MQSERIES_MQIA_STATISTICS_AUTO_CLUSSDR', 130);
define('MQSERIES_MQIA_STATISTICS_INTERVAL', 131);
define('MQSERIES_MQIA_STATISTICS_MQI', 127);
define('MQSERIES_MQIA_STATISTICS_Q', 128);
define('MQSERIES_MQIA_SUB_COUNT', 204);
define('MQSERIES_MQIA_SUB_SCOPE', 218);
define('MQSERIES_MQIA_SYNCPOINT', 30);
define('MQSERIES_MQIA_TCP_CHANNELS', 114);
define('MQSERIES_MQIA_TCP_KEEP_ALIVE', 115);
define('MQSERIES_MQIA_TCP_STACK_TYPE', 116);
define('MQSERIES_MQIA_TIME_SINCE_RESET', 35);
define('MQSERIES_MQIA_TOPIC_DEF_PERSISTENCE', 185);
define('MQSERIES_MQIA_TOPIC_TYPE', 208);
define('MQSERIES_MQIA_TRACE_ROUTE_RECORDING', 137);
define('MQSERIES_MQIA_TREE_LIFE_TIME', 183);
define('MQSERIES_MQIA_TRIGGER_CONTROL', 24);
define('MQSERIES_MQIA_TRIGGER_DEPTH', 29);
define('MQSERIES_MQIA_TRIGGER_INTERVAL', 25);
define('MQSERIES_MQIA_TRIGGER_MSG_PRIORITY', 26);
define('MQSERIES_MQIA_TRIGGER_TYPE', 28);
define('MQSERIES_MQIA_TRIGGER_RESTART', 91);
define('MQSERIES_MQIA_UR_DISP', 222);
define('MQSERIES_MQIA_USAGE', 12);
define('MQSERIES_MQIA_USER_LIST', 2000);
define('MQSERIES_MQIA_MULTICAST', 176);
define('MQSERIES_MQIA_WILDCARD_OPERATION', 216);
define('MQSERIES_MQIA_COMM_INFO_TYPE', 223);
define('MQSERIES_MQIA_COMM_EVENT', 232);
define('MQSERIES_MQIA_MCAST_BRIDGE', 233);
define('MQSERIES_MQIA_USE_DEAD_LETTER_Q', 234);
define('MQSERIES_MQIA_TOLERATE_UNPROTECTED', 235);
define('MQSERIES_MQIA_SIGNATURE_ALGORITHM', 236);
define('MQSERIES_MQIA_ENCRYPTION_ALGORITHM', 237);
define('MQSERIES_MQIA_POLICY_VERSION', 238);
define('MQSERIES_MQIA_ACTIVITY_CONN_OVERRIDE', 239);
define('MQSERIES_MQIA_ACTIVITY_TRACE', 240);
define('MQSERIES_MQIA_SUB_CONFIGURATION_EVENT', 242);
define('MQSERIES_MQIA_XR_CAPABILITY', 243);
define('MQSERIES_MQIA_SUITE_B_STRENGTH', 247);
define('MQSERIES_MQIA_CHLAUTH_RECORDS', 248);
define('MQSERIES_MQIA_DEF_CLUSTER_XMIT_Q_TYPE', 250);
define('MQSERIES_MQIA_PROT_POLICY_CAPABILITY', 251);
define('MQSERIES_MQOD_VERSION_1', 1);
define('MQSERIES_MQOD_VERSION_2', 2);
define('MQSERIES_MQOD_VERSION_3', 3);
define('MQSERIES_MQOD_VERSION_4', 4);
define('MQSERIES_MQOD_CURRENT_VERSION', 4);
define('MQSERIES_MQSO_NONE', 0);
define('MQSERIES_MQSO_NON_DURABLE', 0);
define('MQSERIES_MQSO_READ_AHEAD_AS_Q_DEF', 0);
define('MQSERIES_MQSO_ALTER', 1);
define('MQSERIES_MQSO_CREATE', 2);
define('MQSERIES_MQSO_RESUME', 4);
define('MQSERIES_MQSO_DURABLE', 8);
define('MQSERIES_MQSO_GROUP_SUB', 16);
define('MQSERIES_MQSO_MANAGED', 32);
define('MQSERIES_MQSO_SET_IDENTITY_CONTEXT', 64);
define('MQSERIES_MQSO_NO_MULTICAST', 128);
define('MQSERIES_MQSO_FIXED_USERID', 256);
define('MQSERIES_MQSO_ANY_USERID', 512);
define('MQSERIES_MQSO_PUBLICATIONS_ON_REQUEST', 2048);
define('MQSERIES_MQSO_NEW_PUBLICATIONS_ONLY', 4096);
define('MQSERIES_MQSO_FAIL_IF_QUIESCING', 8192);
define('MQSERIES_MQSO_ALTERNATE_USER_AUTHORITY', 262144);
define('MQSERIES_MQSO_WILDCARD_CHAR', 1048576);
define('MQSERIES_MQSO_WILDCARD_TOPIC', 2097152);
define('MQSERIES_MQSO_SET_CORREL_ID', 4194304);
define('MQSERIES_MQSO_SCOPE_QMGR', 67108864);
define('MQSERIES_MQSO_NO_READ_AHEAD', 134217728);
define('MQSERIES_MQSO_READ_AHEAD', 268435456);
define('MQSERIES_MQSTAT_TYPE_ASYNC_ERROR', 0);
define('MQSERIES_MQSTAT_TYPE_RECONNECTION', 1);
define('MQSERIES_MQSTAT_TYPE_RECONNECTION_ERROR', 2);
