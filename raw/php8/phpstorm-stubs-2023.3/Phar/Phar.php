<?php
// Start of Phar v.2.0.1

use JetBrains\PhpStorm\ArrayShape;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\TentativeType;

/**
*<div id="class.pharexception" class="reference"> <h1 class="title">The PharException class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p>   <div class="section" id="pharexception.intro">   <h2 class="title">简介</h2>   <p class="para">    The PharException class provides a phar-specific exception class    for try/catch blocks.   </p>  </div>    <div class="section" id="pharexception.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">PharException</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.exception.php" class="classname">Exception</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>   </div>  </div></div>
*/
class PharException extends Exception {}

/**
*<div id="class.phar" class="reference"> <h1 class="title">The Phar class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p>   <div class="section" id="phar.intro">   <h2 class="title">简介</h2>   <p class="para">    The Phar class provides a high-level interface to accessing and creating    phar archives.   </p>  </div>   <div class="section" id="phar.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">Phar</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.recursivedirectoryiterator.php" class="classname">RecursiveDirectoryIterator</a>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.countable.php" class="interfacename">Countable</a>,     <a href="https://www.php.net/manual/zh/class.arrayaccess.php" class="interfacename">ArrayAccess</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::CURRENT_MODE_MASK</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::CURRENT_AS_PATHNAME</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::CURRENT_AS_FILEINFO</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::CURRENT_AS_SELF</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::KEY_MODE_MASK</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::KEY_AS_PATHNAME</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::FOLLOW_SYMLINKS</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::KEY_AS_FILENAME</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::NEW_CURRENT_AND_KEY</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::OTHER_MODE_MASK</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::SKIP_DOTS</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::UNIX_PATHS</var>}</var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/phar.constants.php#phar.constants.bz2"><var class="varname">BZ2</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/phar.constants.php#phar.constants.gz"><var class="varname">GZ</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/phar.constants.php#phar.constants.none"><var class="varname">NONE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/phar.constants.php#phar.constants.phar"><var class="varname">PHAR</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/phar.constants.php#phar.constants.tar"><var class="varname">TAR</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/phar.constants.php#phar.constants.zip"><var class="varname">ZIP</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/phar.constants.php#phar.constants.compressed"><var class="varname">COMPRESSED</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/phar.constants.php#phar.constants.php"><var class="varname">PHP</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/phar.constants.php#phar.constants.phps"><var class="varname">PHPS</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/phar.constants.php#phar.constants.md5"><var class="varname">MD5</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/phar.constants.php#phar.constants.openssl"><var class="varname">OPENSSL</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/phar.constants.php#phar.constants.openssl-sha256"><var class="varname">OPENSSL_SHA256</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/phar.constants.php#phar.constants.openssl-sha512"><var class="varname">OPENSSL_SHA512</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/phar.constants.php#phar.constants.sha1"><var class="varname">SHA1</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/phar.constants.php#phar.constants.sha256"><var class="varname">SHA256</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/phar.constants.php#phar.constants.sha512"><var class="varname">SHA512</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = FilesystemIterator::SKIP_DOTS | FilesystemIterator::UNIX_PATHS</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$alias</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.addemptydir.php" class="methodname" style="color:#CC7832">addEmptyDir</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$directory</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.addfile.php" class="methodname" style="color:#CC7832">addFile</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$localName</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.addfromstring.php" class="methodname" style="color:#CC7832">addFromString</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$localName</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$contents</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.apiversion.php" class="methodname" style="color:#CC7832">apiVersion</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.buildfromdirectory.php" class="methodname" style="color:#CC7832">buildFromDirectory</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$directory</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$pattern</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.buildfromiterator.php" class="methodname" style="color:#CC7832">buildFromIterator</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.traversable.php" class="type Traversable" style="color:#EAB766">Traversable</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$baseDirectory</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.cancompress.php" class="methodname" style="color:#CC7832">canCompress</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$compression</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.canwrite.php" class="methodname" style="color:#CC7832">canWrite</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.compress.php" class="methodname" style="color:#CC7832">compress</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$compression</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$extension</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.phar.php" class="type Phar" style="color:#EAB766">Phar</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.compressfiles.php" class="methodname" style="color:#CC7832">compressFiles</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$compression</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.converttodata.php" class="methodname" style="color:#CC7832">convertToData</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$format</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$compression</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$extension</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.phardata.php" class="type PharData" style="color:#EAB766">PharData</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.converttoexecutable.php" class="methodname" style="color:#CC7832">convertToExecutable</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$format</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$compression</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$extension</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.phar.php" class="type Phar" style="color:#EAB766">Phar</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.copy.php" class="methodname" style="color:#CC7832">copy</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$from</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$to</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.count.php" class="methodname" style="color:#CC7832">count</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = <strong><span>COUNT_NORMAL</span></strong></span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.createdefaultstub.php" class="methodname" style="color:#CC7832">createDefaultStub</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$index</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$webIndex</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.decompress.php" class="methodname" style="color:#CC7832">decompress</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$extension</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.phar.php" class="type Phar" style="color:#EAB766">Phar</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.decompressfiles.php" class="methodname" style="color:#CC7832">decompressFiles</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.delmetadata.php" class="methodname" style="color:#CC7832">delMetadata</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.delete.php" class="methodname" style="color:#CC7832">delete</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$localName</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.extractto.php" class="methodname" style="color:#CC7832">extractTo</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$directory</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">null</span></span> <span class="parameter" style="color:#3A95FF">$files</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$overwrite</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.getalias.php" class="methodname" style="color:#CC7832">getAlias</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">string</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.getmetadata.php" class="methodname" style="color:#CC7832">getMetadata</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$unserializeOptions</span><span class="initializer"> = []</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.getmodified.php" class="methodname" style="color:#CC7832">getModified</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.getpath.php" class="methodname" style="color:#CC7832">getPath</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.getsignature.php" class="methodname" style="color:#CC7832">getSignature</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.getstub.php" class="methodname" style="color:#CC7832">getStub</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.getsupportedcompression.php" class="methodname" style="color:#CC7832">getSupportedCompression</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.getsupportedsignatures.php" class="methodname" style="color:#CC7832">getSupportedSignatures</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.getversion.php" class="methodname" style="color:#CC7832">getVersion</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.hasmetadata.php" class="methodname" style="color:#CC7832">hasMetadata</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.interceptfilefuncs.php" class="methodname" style="color:#CC7832">interceptFileFuncs</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.isbuffering.php" class="methodname" style="color:#CC7832">isBuffering</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.iscompressed.php" class="methodname" style="color:#CC7832">isCompressed</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.isfileformat.php" class="methodname" style="color:#CC7832">isFileFormat</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$format</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.isvalidpharfilename.php" class="methodname" style="color:#CC7832">isValidPharFilename</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$executable</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.iswritable.php" class="methodname" style="color:#CC7832">isWritable</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.loadphar.php" class="methodname" style="color:#CC7832">loadPhar</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$alias</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.mapphar.php" class="methodname" style="color:#CC7832">mapPhar</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$alias</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.mount.php" class="methodname" style="color:#CC7832">mount</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$pharPath</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$externalPath</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.mungserver.php" class="methodname" style="color:#CC7832">mungServer</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$variables</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.offsetexists.php" class="methodname" style="color:#CC7832">offsetExists</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$localName</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.offsetget.php" class="methodname" style="color:#CC7832">offsetGet</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$localName</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.offsetset.php" class="methodname" style="color:#CC7832">offsetSet</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$localName</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.offsetunset.php" class="methodname" style="color:#CC7832">offsetUnset</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$localName</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.running.php" class="methodname" style="color:#CC7832">running</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$returnPhar</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.setalias.php" class="methodname" style="color:#CC7832">setAlias</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$alias</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.setdefaultstub.php" class="methodname" style="color:#CC7832">setDefaultStub</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$index</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$webIndex</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.setmetadata.php" class="methodname" style="color:#CC7832">setMetadata</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$metadata</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.setsignaturealgorithm.php" class="methodname" style="color:#CC7832">setSignatureAlgorithm</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$algo</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$privateKey</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.setstub.php" class="methodname" style="color:#CC7832">setStub</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$stub</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$length</span><span class="initializer"> = -1</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.startbuffering.php" class="methodname" style="color:#CC7832">startBuffering</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.stopbuffering.php" class="methodname" style="color:#CC7832">stopBuffering</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.unlinkarchive.php" class="methodname" style="color:#CC7832">unlinkArchive</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.webphar.php" class="methodname" style="color:#CC7832">webPhar</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$alias</span><span class="initializer"> = <strong><span>null</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$index</span><span class="initializer"> = <strong><span>null</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$fileNotFoundScript</span><span class="initializer"> = <strong><span>null</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$mimeTypes</span><span class="initializer"> = []</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$rewrite</span><span class="initializer"> = <strong><span>null</span></strong></span></span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="destructorsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phar.destruct.php" class="methodname" style="color:#CC7832">__destruct</a></span>()</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveDirectoryIterator::getChildren}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursivedirectoryiterator.php" class="type RecursiveDirectoryIterator" style="color:#EAB766">RecursiveDirectoryIterator</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveDirectoryIterator::getSubPath}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveDirectoryIterator::getSubPathname}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveDirectoryIterator::hasChildren}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$allowLinks</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveDirectoryIterator::key}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveDirectoryIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveDirectoryIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::current}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span>|<span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php" class="type FilesystemIterator" style="color:#EAB766">FilesystemIterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::getFlags}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::key}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::setFlags}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::getBasename}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$suffix</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::getExtension}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::getFilename}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::isDot}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::seek}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getATime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getBasename}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$suffix</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getCTime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getExtension}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFileInfo}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFilename}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getGroup}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getInode}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getLinkTarget}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getMTime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getOwner}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPath}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathInfo}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathname}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPerms}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getRealPath}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getSize}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getType}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isDir}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isExecutable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isFile}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isLink}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isReadable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isWritable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::openFile}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = &quot;r&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$useIncludePath</span><span class="initializer"> = <strong><span>false</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$context</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="type SplFileObject" style="color:#EAB766">SplFileObject</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::setFileClass}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileObject::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::setInfoClass}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileInfo::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div>   }</div>   </div> </div>   <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Phar::addEmptyDir} — 添加一个空目录到 phar 档案</li><li>{@link Phar::addFile} — 将一个文件从文件系统添加到 phar 档案中</li><li>{@link Phar::addFromString} — 以字符串的形式添加一个文件到 phar 档案</li><li>{@link Phar::apiVersion} — Returns the api version</li><li>{@link Phar::buildFromDirectory} — Construct a phar archive from the files within a directory</li><li>{@link Phar::buildFromIterator} — Construct a phar archive from an iterator</li><li>{@link Phar::canCompress} — Returns whether phar extension supports compression using either zlib or bzip2</li><li>{@link Phar::canWrite} — Returns whether phar extension supports writing and creating phars</li><li>{@link Phar::compress} — Compresses the entire Phar archive using Gzip or Bzip2 compression</li><li>{@link Phar::compressFiles} — Compresses all files in the current Phar archive</li><li>{@link Phar::__construct} — Construct a Phar archive object</li><li>{@link Phar::convertToData} — Convert a phar archive to a non-executable tar or zip file</li><li>{@link Phar::convertToExecutable} — Convert a phar archive to another executable phar archive file format</li><li>{@link Phar::copy} — Copy a file internal to the phar archive to another new file within the phar</li><li>{@link Phar::count} — Returns the number of entries (files) in the Phar archive</li><li>{@link Phar::createDefaultStub} — Create a phar-file format specific stub</li><li>{@link Phar::decompress} — Decompresses the entire Phar archive</li><li>{@link Phar::decompressFiles} — Decompresses all files in the current Phar archive</li><li>{@link Phar::delMetadata} — Deletes the global metadata of the phar</li><li>{@link Phar::delete} — 删除 phar 档案中的一个文件</li><li>{@link Phar::__destruct} — Destructs a Phar archive object</li><li>{@link Phar::extractTo} — Extract the contents of a phar archive to a directory</li><li>{@link Phar::getAlias} — Get the alias for Phar</li><li>{@link Phar::getMetadata} — Returns phar archive meta-data</li><li>{@link Phar::getModified} — Return whether phar was modified</li><li>{@link Phar::getPath} — Get the real path to the Phar archive on disk</li><li>{@link Phar::getSignature} — Return MD5/SHA1/SHA256/SHA512/OpenSSL signature of a Phar archive</li><li>{@link Phar::getStub} — Return the PHP loader or bootstrap stub of a Phar archive</li><li>{@link Phar::getSupportedCompression} — Return array of supported compression algorithms</li><li>{@link Phar::getSupportedSignatures} — Return array of supported signature types</li><li>{@link Phar::getVersion} — Return version info of Phar archive</li><li>{@link Phar::hasMetadata} — Returns whether phar has global meta-data</li><li>{@link Phar::interceptFileFuncs} — Instructs phar to intercept fopen, file_get_contents, opendir, and all of the stat-related functions</li><li>{@link Phar::isBuffering} — Used to determine whether Phar write operations are being buffered, or are flushing directly to disk</li><li>{@link Phar::isCompressed} — Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)</li><li>{@link Phar::isFileFormat} — Returns true if the phar archive is based on the tar/phar/zip file format depending on the parameter</li><li>{@link Phar::isValidPharFilename} — Returns whether the given filename is a valid phar filename</li><li>{@link Phar::isWritable} — Returns true if the phar archive can be modified</li><li>{@link Phar::loadPhar} — Loads any phar archive with an alias</li><li>{@link Phar::mapPhar} — Reads the currently executed file (a phar) and registers its manifest</li><li>{@link Phar::mount} — Mount an external path or file to a virtual location within the phar archive</li><li>{@link Phar::mungServer} — Defines a list of up to 4 $_SERVER variables that should be modified for execution</li><li>{@link Phar::offsetExists} — Determines whether a file exists in the phar</li><li>{@link Phar::offsetGet} — Gets a PharFileInfo object for a specific file</li><li>{@link Phar::offsetSet} — Set the contents of an internal file to those of an external file</li><li>{@link Phar::offsetUnset} — Remove a file from a phar</li><li>{@link Phar::running} — Returns the full path on disk or full phar URL to the currently executing Phar archive</li><li>{@link Phar::setAlias} — Set the alias for the Phar archive</li><li>{@link Phar::setDefaultStub} — Used to set the PHP loader or bootstrap stub of a Phar archive to the default loader</li><li>{@link Phar::setMetadata} — Sets phar archive meta-data</li><li>{@link Phar::setSignatureAlgorithm} — Set the signature algorithm for a phar and apply it</li><li>{@link Phar::setStub} — Used to set the PHP loader or bootstrap stub of a Phar archive</li><li>{@link Phar::startBuffering} — Start buffering Phar write operations, do not modify the Phar object on disk</li><li>{@link Phar::stopBuffering} — Stop buffering write requests to the Phar archive, and save changes to disk</li><li>{@link Phar::unlinkArchive} — Completely remove a phar archive from disk and from memory</li><li>{@link Phar::webPhar} — Routes a request from a web browser to an internal file within the phar archive</li></ul></div>
*/
class Phar extends RecursiveDirectoryIterator implements RecursiveIterator, SeekableIterator, Countable, ArrayAccess
{
    public const BZ2 = 8192;
    public const GZ = 4096;
    public const NONE = 0;
    public const PHAR = 1;
    public const TAR = 2;
    public const ZIP = 3;
    public const COMPRESSED = 61440;
    public const PHP = 0;
    public const PHPS = 1;
    public const MD5 = 1;
    public const OPENSSL = 16;
    public const SHA1 = 2;
    public const SHA256 = 3;
    public const SHA512 = 4;
    public const OPENSSL_SHA256 = 5;
    public const OPENSSL_SHA512 = 6;

    /**
     * (PHP &gt;= 5.3.0, PECL phar &gt;= 1.0.0)<br/>
     * Construct a Phar archive object
     * @link https://php.net/manual/en/phar.construct.php
     * @param string $filename <p>
     * Path to an existing Phar archive or to-be-created archive. The file name's
     * extension must contain .phar.
     * </p>
     * @param int $flags [optional] <p>
     * Flags to pass to parent class <b>RecursiveDirectoryIterator</b>.
     * </p>
     * @param string $alias [optional] <p>
     * Alias with which this Phar archive should be referred to in calls to stream
     * functionality.
     * </p>
     * @throws BadMethodCallException If called twice.
     * @throws UnexpectedValueException If the phar archive can't be opened.
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $filename,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags = FilesystemIterator::SKIP_DOTS|FilesystemIterator::UNIX_PATHS,
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $alias = null,
        #[PhpStormStubsElementAvailable(from: '5.3', to: '5.6')] $fileformat = null
    ) {}

    public function __destruct() {}

/**
*<div id="phar.addemptydir" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::addEmptyDir</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::addEmptyDir</span> &mdash; <span class="dc-title">添加一个空目录到 phar 档案</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.addemptydir-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::addEmptyDir</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$directory</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   通过这个方法，可以创建一个以 <span>dirname</span> 为路径名的空目录。   这个方法和 <span class="function">{@link ZipArchive::addEmptyDir()}</span> 类似。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.addemptydir-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">directory</span></dt>     <dd>      <p class="para">       需要在 phar 档案中创建的空目录名称      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.addemptydir-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值, 失败时抛出异常（exception）。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.addemptydir-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2135">    <p><strong>示例 #1 一个 <span class="function"><strong style="color:#CC7832">Phar::addEmptyDir()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$a </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/phar.phar'</span><span style="color: #007700">);<br /><br />    </span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addEmptyDir</span><span style="color: #007700">(</span><span style="color: #DD0000">'/full/path/to/file'</span><span style="color: #007700">);<br />    </span><span style="color: #FF8000">// demonstrates how this file is stored<br />    </span><span style="color: #9876AA">$b </span><span style="color: #007700">= </span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'full/path/to/file'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">isDir</span><span style="color: #007700">();<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// handle errors here<br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.addemptydir-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PharData::addEmptyDir()} - Add an empty directory to the tar/zip archive</span></li>    <li class="member"><span class="function">{@link Phar::addFile()} - 将一个文件从文件系统添加到 phar 档案中</span></li>    <li class="member"><span class="function">{@link Phar::addFromString()} - 以字符串的形式添加一个文件到 phar 档案</span></li>   </ul>  </span> </div></div>
     * @return void no return value, exception is thrown on failure.*/
    public function addEmptyDir(
        #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $directory = '',
        #[PhpStormStubsElementAvailable(from: '8.0')] string $directory
    ): void {}

/**
*<div id="phar.addfile" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::addFile</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::addFile</span> &mdash; <span class="dc-title">将一个文件从文件系统添加到 phar 档案中</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.addfile-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::addFile</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$localName</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   通过这个方法，任何文件或者 URL 可以被添加到 phar 档案中。如果第二个可选参数 <span class="parameter" style="color:#3A95FF">localName</span> 被设定，   那么文件则会以该参数为名称保存到档案中，此外，<span>file</span> 参数会被作为路径保存在档案中。   URLs 必须提交 localname 参数，否则会抛出异常。   这个方法与 <span class="function">{@link ZipArchive::addFile()}</span> 类似。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.addfile-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">filename</span></dt>     <dd>      <p class="para">       需要添加到 phar 档案的文件在磁盘上的完全（绝对）或者相对路径。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">localName</span></dt>     <dd>      <p class="para">       文件保存到档案时的路径。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.addfile-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值，失败时会抛出异常。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-phar.addfile-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">localName</span> 现在可以为空。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.addfile-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2138">    <p><strong>示例 #1 一个 <span class="function"><strong style="color:#CC7832">Phar::addFile()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$a </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/phar.phar'</span><span style="color: #007700">);<br /><br />    </span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addFile</span><span style="color: #007700">(</span><span style="color: #DD0000">'/full/path/to/file'</span><span style="color: #007700">);<br />    </span><span style="color: #FF8000">// demonstrates how this file is stored<br />    </span><span style="color: #9876AA">$b </span><span style="color: #007700">= </span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'full/path/to/file'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">getContent</span><span style="color: #007700">();<br /><br />    </span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addFile</span><span style="color: #007700">(</span><span style="color: #DD0000">'/full/path/to/file'</span><span style="color: #007700">, </span><span style="color: #DD0000">'my/file.txt'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$c </span><span style="color: #007700">= </span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'my/file.txt'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">getContent</span><span style="color: #007700">();<br /><br />    </span><span style="color: #FF8000">// demonstrate URL usage<br />    </span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addFile</span><span style="color: #007700">(</span><span style="color: #DD0000">'http://www.example.com'</span><span style="color: #007700">, </span><span style="color: #DD0000">'example.html'</span><span style="color: #007700">);<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// handle errors here<br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-phar.addfile-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">  <span class="function"><strong style="color:#CC7832">Phar::addFile()</strong></span>, <span class="function">{@link Phar::addFromString()}</span> and <span class="function">{@link Phar::offsetSet()}</span>  save a new phar archive each time they are called. If performance is a concern,  <span class="function">{@link Phar::buildFromDirectory()}</span> or <span class="function">{@link Phar::buildFromIterator()}</span>  should be used instead.</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.addfile-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::offsetSet()} - Set the contents of an internal file to those of an external file</span></li>    <li class="member"><span class="function">{@link PharData::addFile()} - Add a file from the filesystem to the tar/zip archive</span></li>    <li class="member"><span class="function">{@link Phar::addFromString()} - 以字符串的形式添加一个文件到 phar 档案</span></li>    <li class="member"><span class="function">{@link Phar::addEmptyDir()} - 添加一个空目录到 phar 档案</span></li>   </ul>  </span> </div></div>
     * @return void no return value, exception is thrown on failure.*/
    public function addFile(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $filename,
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $localName = null
    ): void {}

/**
*<div id="phar.addfromstring" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::addFromString</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::addFromString</span> &mdash; <span class="dc-title">以字符串的形式添加一个文件到 phar 档案</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.addfromstring-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::addFromString</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$localName</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$contents</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   通过这个方法，任何字符串都可以被添加到 phar 档案中。   文件将会以 <span>localname</span> 为路径保存到档案中。   这个方法与 <span class="function">{@link ZipArchive::addFromString()}</span> 类似。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.addfromstring-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">localName</span></dt>     <dd>      <p class="para">       文件保存到档案时的路径。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">contents</span></dt>     <dd>      <p class="para">       要保存的文件内容。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.addfromstring-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值，失败时会抛出异常。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.addfromstring-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2141">    <p><strong>示例 #1 一个 <span class="function"><strong style="color:#CC7832">Phar::addFromString()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$a </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/phar.phar'</span><span style="color: #007700">);<br /><br />    </span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addFromString</span><span style="color: #007700">(</span><span style="color: #DD0000">'path/to/file.txt'</span><span style="color: #007700">, </span><span style="color: #DD0000">'my simple file'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$b </span><span style="color: #007700">= </span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'path/to/file.txt'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">getContent</span><span style="color: #007700">();<br /><br />    </span><span style="color: #FF8000">// to add contents from a stream handle for large files, use offsetSet()<br />    </span><span style="color: #9876AA">$c </span><span style="color: #007700">= </span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/hugefile.bin'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'largefile.bin'</span><span style="color: #007700">] = </span><span style="color: #9876AA">$c</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">fclose</span><span style="color: #007700">(</span><span style="color: #9876AA">$c</span><span style="color: #007700">);<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// handle errors here<br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-phar.addfromstring-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">  <span class="function">{@link Phar::addFile()}</span>, <span class="function"><strong style="color:#CC7832">Phar::addFromString()</strong></span> and <span class="function">{@link Phar::offsetSet()}</span>  save a new phar archive each time they are called. If performance is a concern,  <span class="function">{@link Phar::buildFromDirectory()}</span> or <span class="function">{@link Phar::buildFromIterator()}</span>  should be used instead.</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.addfromstring-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::offsetSet()} - Set the contents of an internal file to those of an external file</span></li>    <li class="member"><span class="function">{@link PharData::addFromString()} - Add a file from a string to the tar/zip archive</span></li>    <li class="member"><span class="function">{@link Phar::addFile()} - 将一个文件从文件系统添加到 phar 档案中</span></li>    <li class="member"><span class="function">{@link Phar::addEmptyDir()} - 添加一个空目录到 phar 档案</span></li>   </ul>  </span> </div></div>
     * @return void no return value, exception is thrown on failure.*/
    public function addFromString(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $localName,
        #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $contents = '',
        #[PhpStormStubsElementAvailable(from: '8.0')] string $contents
    ): void {}

/**
*<div id="phar.buildfromdirectory" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::buildFromDirectory</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::buildFromDirectory</span> &mdash; <span class="dc-title">Construct a phar archive from the files within a directory</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.buildfromdirectory-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::buildFromDirectory</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$directory</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$pattern</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   Populate a phar archive from directory contents.  The optional second   parameter is a regular expression (pcre) that is used to exclude files.   Any filename that matches the regular expression will be included, all others will be   excluded.  For more fine-grained control, use <span class="function">{@link Phar::buildFromIterator()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.buildfromdirectory-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">directory</span></dt>     <dd>      <p class="para">       The full or relative path to the directory that contains all files       to add to the archive.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">pattern</span></dt>     <dd>      <p class="para">       An optional pcre regular expression that is used to filter the       list of files.  Only file paths matching the regular expression       will be included in the archive.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.buildfromdirectory-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="function"><strong style="color:#CC7832">Phar::buildFromDirectory()</strong></span> returns an associative array   mapping internal path of file to the full path of the file on the   filesystem.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.buildfromdirectory-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   This method throws <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span> when unable   to instantiate the internal directory iterators,   or a <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> if there were errors   saving the phar archive.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-phar.buildfromdirectory-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.1.0</td>      <td>       <span class="methodname" style="color:#CC7832"><strong>Phar::buildFromDirectory()</strong></span> no longer returns <strong><span>false</span></strong>.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.buildfromdirectory-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-2147">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::buildFromDirectory()</strong></span> example</strong></p>  <div class="example-contents"><p>     </p></div>  <div class="example-contents"><p>   <div class="example-contents">    <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// create with alias "project.phar"<br /></span><span style="color: #9876AA">$phar </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'project.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'project.phar'</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// add all files in the project<br /></span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">buildFromDirectory</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">) . </span><span style="color: #DD0000">'/project'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setStub</span><span style="color: #007700">(</span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">createDefaultStub</span><span style="color: #007700">(</span><span style="color: #DD0000">'cli/index.php'</span><span style="color: #007700">, </span><span style="color: #DD0000">'www/index.php'</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$phar2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'project2.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'project2.phar'</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// add all files in the project, only include php files<br /></span><span style="color: #9876AA">$phar2</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">buildFromDirectory</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">) . </span><span style="color: #DD0000">'/project'</span><span style="color: #007700">, </span><span style="color: #DD0000">'/\.php$/'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$phar2</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setStub</span><span style="color: #007700">(</span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">createDefaultStub</span><span style="color: #007700">(</span><span style="color: #DD0000">'cli/index.php'</span><span style="color: #007700">, </span><span style="color: #DD0000">'www/index.php'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </p></div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.buildfromdirectory-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::buildFromIterator()} - Construct a phar archive from an iterator</span></li>   </ul>  </span> </div></div>
     * @return array <b>Phar::buildFromDirectory</b> returns an associative array*/
    public function buildFromDirectory(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $directory,
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $pattern = ''
    ): array {}

/**
*<div id="phar.buildfromiterator" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::buildFromIterator</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::buildFromIterator</span> &mdash; <span class="dc-title">Construct a phar archive from an iterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.buildfromiterator-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::buildFromIterator</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.traversable.php" class="type Traversable" style="color:#EAB766">Traversable</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$baseDirectory</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   Populate a phar archive from an iterator.  Two styles of iterators are supported,   iterators that map the filename within the phar to the name of a file on disk,   and iterators like DirectoryIterator that return   SplFileInfo objects.  For iterators that return SplFileInfo objects, the second   parameter is required.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.buildfromiterator-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">iterator</span></dt>     <dd>      <p class="para">       Any iterator that either associatively maps phar file to location or       returns SplFileInfo objects      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">baseDirectory</span></dt>     <dd>      <p class="para">       For iterators that return SplFileInfo objects, the portion of each       file&#039;s full path to remove when adding to the phar archive      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.buildfromiterator-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="function"><strong style="color:#CC7832">Phar::buildFromIterator()</strong></span> returns an associative array   mapping internal path of file to the full path of the file on the   filesystem.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.buildfromiterator-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   This method returns <span class="classname"><a href="https://www.php.net/manual/zh/class.unexpectedvalueexception.php" class="classname">UnexpectedValueException</a></span> when the   iterator returns incorrect values, such as an integer key instead of a   string, a <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span> when an   SplFileInfo-based iterator is passed without a <span class="parameter" style="color:#3A95FF">baseDirectory</span>   parameter, or a <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> if there were errors   saving the phar archive.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-phar.buildfromiterator-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.1.0</td>      <td>       <span class="methodname" style="color:#CC7832"><strong>Phar::buildFromIterator()</strong></span> no longer returns <strong><span>false</span></strong>.      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">baseDirectory</span> is now nullable.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.buildfromiterator-examples">  <h3 class="title">示例</h3>   <div class="example" id="example-2150">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::buildFromIterator()</strong></span> with SplFileInfo</strong></p>  <div class="example-contents"><p>   For most phar archives, the archive will reflect an actual directory layout, and   the second style is the most useful.  For instance, to create a phar archive   containing the files in this sample directory layout:  </p></div>  <div class="example-contents"><p>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">    <div class="examplescode"><span>/path/to/project/<br>                 config/<br>                        dist.xml<br>                        debug.xml<br>                 lib/<br>                     file1.php<br>                     file2.php<br>                 src/<br>                     processthing.php<br>                 www/<br>                     index.php<br>                 cli/<br>                     index.php</span></div>   </div>  </p></div>  <div class="example-contents"><p>   This code could be used to add these files to the &quot;project.phar&quot; phar archive:  </p></div>  <div class="example-contents"><p>   <div class="example-contents">    <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// create with alias "project.phar"<br /></span><span style="color: #9876AA">$phar </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'project.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'project.phar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">buildFromIterator</span><span style="color: #007700">(<br />    new </span><span style="color: #9876AA">RecursiveIteratorIterator</span><span style="color: #007700">(<br />     new </span><span style="color: #9876AA">RecursiveDirectoryIterator</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/project'</span><span style="color: #007700">)),<br />    </span><span style="color: #DD0000">'/path/to/project'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setStub</span><span style="color: #007700">(</span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">createDefaultStub</span><span style="color: #007700">(</span><span style="color: #DD0000">'cli/index.php'</span><span style="color: #007700">, </span><span style="color: #DD0000">'www/index.php'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </p></div>  <div class="example-contents"><p>   The file project.phar can then be used immediately.  <span class="function"><strong style="color:#CC7832">Phar::buildFromIterator()</strong></span> does not   set values such as compression, metadata, and this can be done after creating the   phar archive.  </p></div>  <div class="example-contents"><p>   As an interesting note, <span class="function"><strong style="color:#CC7832">Phar::buildFromIterator()</strong></span> can also be used to   copy the contents of an existing phar archive, as the Phar object descends   from <span class="classname"><a href="https://www.php.net/manual/zh/class.directoryiterator.php" class="classname">DirectoryIterator</a></span>:  </p></div>  <div class="example-contents"><p>   <div class="example-contents">    <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// create with alias "project.phar"<br /></span><span style="color: #9876AA">$phar </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'project.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'project.phar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">buildFromIterator</span><span style="color: #007700">(<br />    new </span><span style="color: #9876AA">RecursiveIteratorIterator</span><span style="color: #007700">(<br />     new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/anotherphar.phar'</span><span style="color: #007700">)),<br />    </span><span style="color: #DD0000">'phar:///path/to/anotherphar.phar/path/to/project'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setStub</span><span style="color: #007700">(</span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">createDefaultStub</span><span style="color: #007700">(</span><span style="color: #DD0000">'cli/index.php'</span><span style="color: #007700">, </span><span style="color: #DD0000">'www/index.php'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </p></div>  </div>  <div class="example" id="example-2153">    <p><strong>示例 #2 A <span class="function"><strong style="color:#CC7832">Phar::buildFromIterator()</strong></span> with other iterators</strong></p>  <div class="example-contents"><p>   The second form of the iterator can be used with any iterator that returns   a key =&gt; value mapping, such as an <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayiterator.php" class="classname">ArrayIterator</a></span>:  </p></div>  <div class="example-contents"><p>   <div class="example-contents">    <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// create with alias "project.phar"<br /></span><span style="color: #9876AA">$phar </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'project.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'project.phar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">buildFromIterator</span><span style="color: #007700">(<br />    new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(<br />     array(<br />        </span><span style="color: #DD0000">'internal/file.php' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">) . </span><span style="color: #DD0000">'/somefile.php'</span><span style="color: #007700">,<br />        </span><span style="color: #DD0000">'another/file.jpg' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/bigfile.jpg'</span><span style="color: #007700">, </span><span style="color: #DD0000">'rb'</span><span style="color: #007700">),<br />     )));<br /></span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setStub</span><span style="color: #007700">(</span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">createDefaultStub</span><span style="color: #007700">(</span><span style="color: #DD0000">'cli/index.php'</span><span style="color: #007700">, </span><span style="color: #DD0000">'www/index.php'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </p></div>  </div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.buildfromiterator-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::buildFromDirectory()} - Construct a phar archive from the files within a directory</span></li>   </ul>  </span> </div></div>
     * @return array <b>Phar::buildFromIterator</b> returns an associative array*/
    public function buildFromIterator(
        Traversable $iterator,
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $baseDirectory = null
    ): array {}

/**
*<div id="phar.compressfiles" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::compressFiles</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::compressFiles</span> &mdash; <span class="dc-title">Compresses all files in the current Phar archive</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.compressfiles-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::compressFiles</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$compression</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   For tar-based phar archives, this method throws a   <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span>, as compression of individual   files within a tar archive is not supported by the file format.  Use   <span class="function">{@link Phar::compress()}</span> to compress an entire tar-based phar archive.  </p>  <p class="para">   For Zip-based and phar-based phar archives, this method compresses all files in the   Phar archive using the specified compression.   The <a href="https://www.php.net/manual/zh/ref.zlib.php" class="link">zlib</a>  or <a href="https://www.php.net/manual/zh/ref.bzip2.php" class="link">bzip2</a>   extensions must be enabled to take advantage of this feature.  In addition, if any files   are already compressed using bzip2/zlib compression, the respective extension must be   enabled in order to decompress the files prior to re-compressing.   As with all functionality that modifies the contents of a phar, the   <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a> INI variable must be off   in order to succeed.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.compressfiles-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">compression</span></dt>     <dd>      <p class="para">       Compression must be one of <span>Phar::GZ</span>,       <span>Phar::BZ2</span> to add compression, or <span>Phar::NONE</span>       to remove compression.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.compressfiles-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.compressfiles-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span> if   the <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a>   INI variable is on, the <a href="https://www.php.net/manual/zh/ref.zlib.php" class="link">zlib</a>   extension is not available, or if any files are compressed using   bzip2 compression and the <a href="https://www.php.net/manual/zh/ref.bzip2.php" class="link">bzip2</a> extension   is not enabled.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.compressfiles-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2165">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::compressFiles()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/my.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'my.phar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile2.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br />foreach (</span><span style="color: #9876AA">$p </span><span style="color: #007700">as </span><span style="color: #9876AA">$file</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFileName</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">BZ2</span><span style="color: #007700">));<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">GZ</span><span style="color: #007700">));<br />}<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">compressFiles</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">GZ</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$p </span><span style="color: #007700">as </span><span style="color: #9876AA">$file</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFileName</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">BZ2</span><span style="color: #007700">));<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">GZ</span><span style="color: #007700">));<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(10) &quot;myfile.txt&quot;<br>bool(false)<br>bool(false)<br>bool(false)<br>string(11) &quot;myfile2.txt&quot;<br>bool(false)<br>bool(false)<br>bool(false)<br>string(10) &quot;myfile.txt&quot;<br>int(4096)<br>bool(false)<br>bool(true)<br>string(11) &quot;myfile2.txt&quot;<br>int(4096)<br>bool(false)<br>bool(true)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.compressfiles-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PharFileInfo::getCompressedSize()} - Returns the actual size of the file (with compression) inside the Phar archive</span></li>    <li class="member"><span class="function">{@link PharFileInfo::isCompressed()} - Returns whether the entry is compressed</span></li>    <li class="member"><span class="function">{@link PharFileInfo::compress()} - Compresses the current Phar entry with either zlib or bzip2 compression</span></li>    <li class="member"><span class="function">{@link PharFileInfo::decompress()} - Decompresses the current Phar entry within the phar</span></li>    <li class="member"><span class="function">{@link Phar::canCompress()} - Returns whether phar extension supports compression using either zlib or bzip2</span></li>    <li class="member"><span class="function">{@link Phar::isCompressed()} - Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)</span></li>    <li class="member"><span class="function">{@link Phar::decompressFiles()} - Decompresses all files in the current Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::getSupportedCompression()} - Return array of supported compression algorithms</span></li>    <li class="member"><span class="function">{@link Phar::compress()} - Compresses the entire Phar archive using Gzip or Bzip2 compression</span></li>    <li class="member"><span class="function">{@link Phar::decompress()} - Decompresses the entire Phar archive</span></li>   </ul>  </span> </div></div>
     * @return void No value is returned.*/
    public function compressFiles(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $compression): void {}

/**
*<div id="phar.decompressfiles" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::decompressFiles</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::decompressFiles</span> &mdash; <span class="dc-title">Decompresses all files in the current Phar archive</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.decompressfiles-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::decompressFiles</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   For tar-based phar archives, this method throws a   <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span>, as compression of individual   files within a tar archive is not supported by the file format.  Use   <span class="function">{@link Phar::compress()}</span> to compress an entire tar-based phar archive.  </p>  <p class="para">   For Zip-based and phar-based phar archives, this method decompresses all files in the   Phar archive.   The <a href="https://www.php.net/manual/zh/ref.zlib.php" class="link">zlib</a>  or <a href="https://www.php.net/manual/zh/ref.bzip2.php" class="link">bzip2</a>   extensions must be enabled to take advantage of this feature if any files   are compressed using bzip2/zlib compression.   As with all functionality that modifies the contents of a phar, the   <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a> INI variable must be off   in order to succeed.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.decompressfiles-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.decompressfiles-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.decompressfiles-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span> if   the <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a>   INI variable is on, the <a href="https://www.php.net/manual/zh/ref.zlib.php" class="link">zlib</a>   extension is not available, or if any files are compressed using   bzip2 compression and the <a href="https://www.php.net/manual/zh/ref.bzip2.php" class="link">bzip2</a> extension   is not enabled.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.decompressfiles-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2189">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::decompressFiles()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/my.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'my.phar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile2.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">compressFiles</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">GZ</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$p </span><span style="color: #007700">as </span><span style="color: #9876AA">$file</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFileName</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">BZ2</span><span style="color: #007700">));<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">GZ</span><span style="color: #007700">));<br />}<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">decompressFiles</span><span style="color: #007700">();<br />foreach (</span><span style="color: #9876AA">$p </span><span style="color: #007700">as </span><span style="color: #9876AA">$file</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFileName</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">BZ2</span><span style="color: #007700">));<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">GZ</span><span style="color: #007700">));<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(10) &quot;myfile.txt&quot;<br>int(4096)<br>bool(false)<br>bool(true)<br>string(11) &quot;myfile2.txt&quot;<br>int(4096)<br>bool(false)<br>bool(true)<br>string(10) &quot;myfile.txt&quot;<br>bool(false)<br>bool(false)<br>bool(false)<br>string(11) &quot;myfile2.txt&quot;<br>bool(false)<br>bool(false)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.decompressfiles-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PharFileInfo::getCompressedSize()} - Returns the actual size of the file (with compression) inside the Phar archive</span></li>    <li class="member"><span class="function">{@link PharFileInfo::isCompressed()} - Returns whether the entry is compressed</span></li>    <li class="member"><span class="function">{@link PharFileInfo::compress()} - Compresses the current Phar entry with either zlib or bzip2 compression</span></li>    <li class="member"><span class="function">{@link PharFileInfo::decompress()} - Decompresses the current Phar entry within the phar</span></li>    <li class="member"><span class="function">{@link Phar::canCompress()} - Returns whether phar extension supports compression using either zlib or bzip2</span></li>    <li class="member"><span class="function">{@link Phar::isCompressed()} - Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)</span></li>    <li class="member"><span class="function">{@link Phar::compressFiles()} - Compresses all files in the current Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::getSupportedCompression()} - Return array of supported compression algorithms</span></li>    <li class="member"><span class="function">{@link Phar::compress()} - Compresses the entire Phar archive using Gzip or Bzip2 compression</span></li>    <li class="member"><span class="function">{@link Phar::decompress()} - Decompresses the entire Phar archive</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function decompressFiles() {}

/**
*<div id="phar.compress" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::compress</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::compress</span> &mdash; <span class="dc-title">Compresses the entire Phar archive using Gzip or Bzip2 compression</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.compress-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::compress</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$compression</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$extension</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.phar.php" class="type Phar" style="color:#EAB766">Phar</a></span></span></div> <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   For tar-based and phar-based phar archives, this method compresses the entire archive using   gzip compression or bzip2 compression.  The resulting file can be processed with the   gunzip command/bunzip command, or accessed directly and transparently with the Phar   extension.  </p>  <p class="para">   For Zip-based phar archives, this method fails with an exception.   The <a href="https://www.php.net/manual/zh/ref.zlib.php" class="link">zlib</a> extension must be enabled to compress   with gzip compression, the <a href="https://www.php.net/manual/zh/ref.bzip2.php" class="link">bzip2</a> extension must be   enabled in order to compress with bzip2 compression.   As with all functionality that modifies the contents of a phar, the   <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a> INI variable must be off   in order to succeed.  </p>  <p class="para">   In addition, this method automatically renames the archive, appending <span>.gz</span>,   <span>.bz2</span> or removing the extension if passed <span>Phar::NONE</span> to   remove compression.  Alternatively, a file extension may be specified with the second   parameter.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.compress-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">compression</span></dt>     <dd>      <p class="para">       Compression must be one of <span>Phar::GZ</span>,       <span>Phar::BZ2</span> to add compression, or <span>Phar::NONE</span>       to remove compression.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">extension</span></dt>     <dd>      <p class="para">       By default, the extension is <span>.phar.gz</span>       or <span>.phar.bz2</span> for compressing phar archives, and       <span>.phar.tar.gz</span> or <span>.phar.tar.bz2</span> for       compressing tar archives.  For decompressing, the default file extensions       are <span>.phar</span> and <span>.phar.tar</span>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.compress-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span> object, or <strong><span>null</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.compress-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span> if   the <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a>   INI variable is on, the <a href="https://www.php.net/manual/zh/ref.zlib.php" class="link">zlib</a>   extension is not available, or the <a href="https://www.php.net/manual/zh/ref.bzip2.php" class="link">bzip2</a> extension   is not enabled.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-phar.compress-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">extension</span> is now nullable.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.compress-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2162">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::compress()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/my.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'my.phar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile2.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$p1 </span><span style="color: #007700">= </span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">compress</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">GZ</span><span style="color: #007700">); </span><span style="color: #FF8000">// copies to /path/to/my.phar.gz<br /></span><span style="color: #9876AA">$p2 </span><span style="color: #007700">= </span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">compress</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">BZ2</span><span style="color: #007700">); </span><span style="color: #FF8000">// copies to /path/to/my.phar.bz2<br /></span><span style="color: #9876AA">$p3 </span><span style="color: #007700">= </span><span style="color: #9876AA">$p2</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">compress</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">NONE</span><span style="color: #007700">); </span><span style="color: #FF8000">// exception: /path/to/my.phar already exists<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.compress-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PharFileInfo::getCompressedSize()} - Returns the actual size of the file (with compression) inside the Phar archive</span></li>    <li class="member"><span class="function">{@link PharFileInfo::isCompressed()} - Returns whether the entry is compressed</span></li>    <li class="member"><span class="function">{@link PharFileInfo::compress()} - Compresses the current Phar entry with either zlib or bzip2 compression</span></li>    <li class="member"><span class="function">{@link PharFileInfo::decompress()} - Decompresses the current Phar entry within the phar</span></li>    <li class="member"><span class="function">{@link PharData::compress()} - Compresses the entire tar/zip archive using Gzip or Bzip2 compression</span></li>    <li class="member"><span class="function">{@link Phar::canCompress()} - Returns whether phar extension supports compression using either zlib or bzip2</span></li>    <li class="member"><span class="function">{@link Phar::isCompressed()} - Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)</span></li>    <li class="member"><span class="function">{@link Phar::decompress()} - Decompresses the entire Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::getSupportedCompression()} - Return array of supported compression algorithms</span></li>    <li class="member"><span class="function">{@link Phar::compressFiles()} - Compresses all files in the current Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::decompressFiles()} - Decompresses all files in the current Phar archive</span></li>   </ul>  </span> </div></div>
     * @return static|null a <b>Phar</b> object.*/
    public function compress(
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $compression,
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $extension = null
    ): ?Phar {}

/**
*<div id="phar.decompress" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::decompress</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::decompress</span> &mdash; <span class="dc-title">Decompresses the entire Phar archive</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.decompress-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::decompress</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$extension</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.phar.php" class="type Phar" style="color:#EAB766">Phar</a></span></span></div> <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   For tar-based and phar-based phar archives, this method decompresses the entire archive.  </p>  <p class="para">   For Zip-based phar archives, this method fails with an exception.   The <a href="https://www.php.net/manual/zh/ref.zlib.php" class="link">zlib</a> extension must be enabled to decompress   an archive compressed with gzip compression, and the   <a href="https://www.php.net/manual/zh/ref.bzip2.php" class="link">bzip2</a> extension must be   enabled in order to decompress an archive compressed with bzip2 compression.   As with all functionality that modifies the contents of a phar, the   <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a> INI variable must be off   in order to succeed.  </p>  <p class="para">   In addition, this method automatically changes the file extension of the archive,   <span>.phar</span>   by default for phar archives, or <span>.phar.tar</span> for tar-based phar archives.   Alternatively, a file extension may be specified with the second   parameter.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.decompress-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">extension</span></dt>     <dd>      <p class="para">       For decompressing, the default file extensions       are <span>.phar</span> and <span>.phar.tar</span>.       Use this parameter to specify another file extension.  Be aware       that all executable phar archives must contain <span>.phar</span>       in their filename.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.decompress-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   A <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span> object is returned on success, and <strong><span>null</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.decompress-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span> if   the <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a>   INI variable is on, the <a href="https://www.php.net/manual/zh/ref.zlib.php" class="link">zlib</a>   extension is not available, or the <a href="https://www.php.net/manual/zh/ref.bzip2.php" class="link">bzip2</a> extension   is not enabled.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-phar.decompress-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">extension</span> is now nullable.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.decompress-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2186">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::decompress()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/my.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'my.phar.gz'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile2.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$p3 </span><span style="color: #007700">= </span><span style="color: #9876AA">$p2</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">decompress</span><span style="color: #007700">(); </span><span style="color: #FF8000">// creates /path/to/my.phar<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.decompress-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PharFileInfo::getCompressedSize()} - Returns the actual size of the file (with compression) inside the Phar archive</span></li>    <li class="member"><span class="function">{@link PharFileInfo::isCompressed()} - Returns whether the entry is compressed</span></li>    <li class="member"><span class="function">{@link PharFileInfo::compress()} - Compresses the current Phar entry with either zlib or bzip2 compression</span></li>    <li class="member"><span class="function">{@link PharFileInfo::decompress()} - Decompresses the current Phar entry within the phar</span></li>    <li class="member"><span class="function">{@link PharData::compress()} - Compresses the entire tar/zip archive using Gzip or Bzip2 compression</span></li>    <li class="member"><span class="function">{@link Phar::canCompress()} - Returns whether phar extension supports compression using either zlib or bzip2</span></li>    <li class="member"><span class="function">{@link Phar::isCompressed()} - Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)</span></li>    <li class="member"><span class="function">{@link Phar::compress()} - Compresses the entire Phar archive using Gzip or Bzip2 compression</span></li>    <li class="member"><span class="function">{@link Phar::getSupportedCompression()} - Return array of supported compression algorithms</span></li>    <li class="member"><span class="function">{@link Phar::compressFiles()} - Compresses all files in the current Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::decompressFiles()} - Decompresses all files in the current Phar archive</span></li>   </ul>  </span> </div></div>
     * @return static|null A <b>Phar</b> object is returned.*/
    public function decompress(#[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $extension = null): ?Phar {}

/**
*<div id="phar.converttoexecutable" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::convertToExecutable</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::convertToExecutable</span> &mdash; <span class="dc-title">Convert a phar archive to another executable phar archive file format</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.converttoexecutable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::convertToExecutable</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$format</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$compression</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$extension</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.phar.php" class="type Phar" style="color:#EAB766">Phar</a></span></span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   This method is used to convert a phar archive to another file format.  For instance,   it can be used to create a tar-based executable phar archive from a zip-based   executable phar archive, or from an executable phar archive in the phar file format.  In   addition, it can be used to apply whole-archive compression to a tar or phar-based   archive.  </p>  <p class="para">   If no changes are specified, this method throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span>.  </p>  <p class="para">   If successful, the method creates a new archive on disk and returns a <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>   object.  The old archive is not removed from disk, and should be done manually after   the process has finished.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.converttoexecutable-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">format</span></dt>     <dd>      <p class="para">       This should be one of <span>Phar::PHAR</span>, <span>Phar::TAR</span>,       or <span>Phar::ZIP</span>.  If set to <strong><span>null</span></strong>, the existing file format       will be preserved.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">compression</span></dt>     <dd>      <p class="para">       This should be one of <span>Phar::NONE</span> for no whole-archive       compression, <span>Phar::GZ</span> for zlib-based compression, and       <span>Phar::BZ2</span> for bzip-based compression.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">extension</span></dt>     <dd>      <p class="para">       This parameter is used to override the default file extension for a       converted archive.  Note that all zip- and tar-based phar archives must contain       <span>.phar</span> in their file extension in order to be processed as a       phar archive.      </p>      <p class="para">       If converting to a phar-based archive, the default extensions are       <span>.phar</span>, <span>.phar.gz</span>, or <span>.phar.bz2</span>       depending on the specified compression.  For tar-based phar archives, the       default extensions are <span>.phar.tar</span>, <span>.phar.tar.gz</span>,       and <span>.phar.tar.bz2</span>.  For zip-based phar archives, the       default extension is <span>.phar.zip</span>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.converttoexecutable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The method returns a <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span> object on success,   or <strong><span>null</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.converttoexecutable-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   This method throws <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span> when unable   to compress, an unknown compression method has been specified, the requested   archive is buffering with <span class="function">{@link Phar::startBuffering()}</span> and   has not concluded with <span class="function">{@link Phar::stopBuffering()}</span>, an   <span class="classname"><a href="https://www.php.net/manual/zh/class.unexpectedvalueexception.php" class="classname">UnexpectedValueException</a></span> if write support is disabled,   and a <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> if any problems are encountered   during the phar creation process.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-phar.converttoexecutable-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">format</span>, <span class="parameter" style="color:#3A95FF">compression</span>, and <span class="parameter" style="color:#3A95FF">extension</span> are now nullable.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.converttoexecutable-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2174">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::convertToExecutable()</strong></span> example</strong></p>    <div class="example-contents"><p>     Using Phar::convertToExecutable():    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$tarphar </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'myphar.phar.tar'</span><span style="color: #007700">);<br />    </span><span style="color: #FF8000">// convert it to the phar file format<br />    // note that myphar.phar.tar is *not* unlinked<br />    </span><span style="color: #9876AA">$phar </span><span style="color: #007700">= </span><span style="color: #9876AA">$tarphar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">convertToExecutable</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">PHAR</span><span style="color: #007700">); </span><span style="color: #FF8000">// creates myphar.phar<br />    </span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setStub</span><span style="color: #007700">(</span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">createDefaultStub</span><span style="color: #007700">(</span><span style="color: #DD0000">'cli.php'</span><span style="color: #007700">, </span><span style="color: #DD0000">'web/index.php'</span><span style="color: #007700">));<br />    </span><span style="color: #FF8000">// creates myphar.phar.tgz<br />    </span><span style="color: #9876AA">$compressed </span><span style="color: #007700">= </span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">convertToExecutable</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">TAR</span><span style="color: #007700">, </span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">GZ</span><span style="color: #007700">, </span><span style="color: #DD0000">'.phar.tgz'</span><span style="color: #007700">);<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// handle the error here<br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.converttoexecutable-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::convertToData()} - Convert a phar archive to a non-executable tar or zip file</span></li>    <li class="member"><span class="function">{@link PharData::convertToExecutable()} - Convert a non-executable tar/zip archive to an executable phar archive</span></li>    <li class="member"><span class="function">{@link PharData::convertToData()} - Convert a phar archive to a non-executable tar or zip file</span></li>   </ul>  </span> </div></div>
     * @return Phar|null The method returns a <b>Phar</b> object on success and throws an*/
    public function convertToExecutable(
        #[LanguageLevelTypeAware(['8.0' => 'int|null'], default: '')] $format = null,
        #[LanguageLevelTypeAware(['8.0' => 'int|null'], default: '')] $compression = null,
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $extension = null
    ): ?Phar {}

/**
*<div id="phar.converttodata" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::convertToData</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::convertToData</span> &mdash; <span class="dc-title">Convert a phar archive to a non-executable tar or zip file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.converttodata-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::convertToData</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$format</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$compression</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$extension</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.phardata.php" class="type PharData" style="color:#EAB766">PharData</a></span></span></div>  <p class="para rdfs-comment">   This method is used to convert an executable phar archive to either a   tar or zip file.  To make the tar or zip non-executable, the phar   stub and phar alias files are removed from the newly created archive.  </p>  <p class="para">   If no changes are specified, this method throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span>   if the archive is in phar file format.  For archives in tar or zip file format,   this method converts the archive to a non-executable archive.  </p>  <p class="para">   If successful, the method creates a new archive on disk and returns a <span class="classname"><a href="https://www.php.net/manual/zh/class.phardata.php" class="classname">PharData</a></span>   object.  The old archive is not removed from disk, and should be done manually after   the process has finished.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.converttodata-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">format</span></dt>     <dd>      <p class="para">       This should be one of <span>Phar::TAR</span>       or <span>Phar::ZIP</span>.  If set to <strong><span>null</span></strong>, the existing file format       will be preserved.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">compression</span></dt>     <dd>      <p class="para">       This should be one of <span>Phar::NONE</span> for no whole-archive       compression, <span>Phar::GZ</span> for zlib-based compression, and       <span>Phar::BZ2</span> for bzip-based compression.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">extension</span></dt>     <dd>      <p class="para">       This parameter is used to override the default file extension for a       converted archive.  Note that <span>.phar</span> cannot be used       anywhere in the filename for a non-executable tar or zip archive.      </p>      <p class="para">       If converting to a tar-based phar archive, the       default extensions are <span>.tar</span>, <span>.tar.gz</span>,       and <span>.tar.bz2</span> depending on specified compression.       For zip-based archives, the       default extension is <span>.zip</span>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.converttodata-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The method returns a <span class="classname"><a href="https://www.php.net/manual/zh/class.phardata.php" class="classname">PharData</a></span> object on success,   or <strong><span>null</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.converttodata-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   This method throws <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span> when unable   to compress, an unknown compression method has been specified, the requested   archive is buffering with <span class="function">{@link Phar::startBuffering()}</span> and   has not concluded with <span class="function">{@link Phar::stopBuffering()}</span>,    and a <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> if any problems are encountered   during the phar creation process.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-phar.converttodata-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">format</span>, <span class="parameter" style="color:#3A95FF">compression</span>, and <span class="parameter" style="color:#3A95FF">extension</span> are now nullable.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.converttodata-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2171">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::convertToData()</strong></span> example</strong></p>    <div class="example-contents"><p>     Using Phar::convertToData():    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$tarphar </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'myphar.phar.tar'</span><span style="color: #007700">);<br />    </span><span style="color: #FF8000">// note that myphar.phar.tar is *not* unlinked<br />    // convert it to the non-executable tar file format<br />    // creates myphar.tar<br />    </span><span style="color: #9876AA">$tar </span><span style="color: #007700">= </span><span style="color: #9876AA">$tarphar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">convertToData</span><span style="color: #007700">();<br />    </span><span style="color: #FF8000">// convert to non-executable zip format, creates myphar.zip<br />    </span><span style="color: #9876AA">$zip </span><span style="color: #007700">= </span><span style="color: #9876AA">$tarphar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">convertToData</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">ZIP</span><span style="color: #007700">);<br />    </span><span style="color: #FF8000">// create myphar.tbz<br />    </span><span style="color: #9876AA">$tgz </span><span style="color: #007700">= </span><span style="color: #9876AA">$tarphar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">convertToData</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">TAR</span><span style="color: #007700">, </span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">BZ2</span><span style="color: #007700">, </span><span style="color: #DD0000">'.tbz'</span><span style="color: #007700">);<br />    </span><span style="color: #FF8000">// creates myphar.phar.tgz<br />    </span><span style="color: #9876AA">$phar </span><span style="color: #007700">= </span><span style="color: #9876AA">$tarphar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">convertToData</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">PHAR</span><span style="color: #007700">); </span><span style="color: #FF8000">// throws exception<br /></span><span style="color: #007700">} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// handle the error here<br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.converttodata-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::convertToExecutable()} - Convert a phar archive to another executable phar archive file format</span></li>    <li class="member"><span class="function">{@link PharData::convertToExecutable()} - Convert a non-executable tar/zip archive to an executable phar archive</span></li>    <li class="member"><span class="function">{@link PharData::convertToData()} - Convert a phar archive to a non-executable tar or zip file</span></li>   </ul>  </span> </div></div>
     * @return PharData|null The method returns a <b>PharData</b> object on success and throws an*/
    public function convertToData(
        #[LanguageLevelTypeAware(['8.0' => 'int|null'], default: '')] $format = null,
        #[LanguageLevelTypeAware(['8.0' => 'int|null'], default: '')] $compression = null,
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $extension = null
    ): ?PharData {}

/**
*<div id="phar.copy" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::copy</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::copy</span> &mdash; <span class="dc-title">Copy a file internal to the phar archive to another new file within the phar</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.copy-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::copy</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$from</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$to</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   Copy a file internal to the phar archive to another new file within the phar.   This is an object-oriented alternative to using <span class="function">{@link copy()}</span> with   the phar stream wrapper.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.copy-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">from</span></dt>     <dd>      <p class="para">      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">to</span></dt>     <dd>      <p class="para">      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.copy-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   returns <strong><span>true</span></strong> on success, but it is safer to encase method call in a   try/catch block and assume success if no exception is thrown.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.copy-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   throws <span class="classname"><a href="https://www.php.net/manual/zh/class.unexpectedvalueexception.php" class="classname">UnexpectedValueException</a></span> if the source file does not   exist, the destination file already exists, write access is disabled, opening either   file fails, reading the source file fails, or a <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>   if writing the changes to the phar fails.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.copy-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2177">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::copy()</strong></span> example</strong></p>    <div class="example-contents"><p>     This example shows using <span class="function"><strong style="color:#CC7832">Phar::copy()</strong></span> and the     equivalent stream wrapper performance of the same thing.  The primary     difference between the two approaches is error handling.  All Phar methods     throw exceptions, whereas the stream wrapper uses <span class="function">{@link trigger_error()}</span>.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$phar </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'myphar.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$phar</span><span style="color: #007700">[</span><span style="color: #DD0000">'a'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">copy</span><span style="color: #007700">(</span><span style="color: #DD0000">'a'</span><span style="color: #007700">, </span><span style="color: #DD0000">'b'</span><span style="color: #007700">);<br />    echo </span><span style="color: #9876AA">$phar</span><span style="color: #007700">[</span><span style="color: #DD0000">'b'</span><span style="color: #007700">]; </span><span style="color: #FF8000">// outputs "hi"<br /></span><span style="color: #007700">} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// handle error<br /></span><span style="color: #007700">}<br /><br /></span><span style="color: #FF8000">// the stream wrapper equivalent of the above code.<br />// E_WARNINGS are triggered on error rather than exceptions.<br /></span><span style="color: #9876AA">copy</span><span style="color: #007700">(</span><span style="color: #DD0000">'phar://myphar.phar/a'</span><span style="color: #007700">, </span><span style="color: #DD0000">'phar//myphar.phar/c'</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">file_get_contents</span><span style="color: #007700">(</span><span style="color: #DD0000">'phar://myphar.phar/c'</span><span style="color: #007700">); </span><span style="color: #FF8000">// outputs "hi"<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div></div>
     * @return bool returns <b>TRUE</b> on success, but it is safer to encase method call in a*/
    public function copy(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $to,
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $from
    ) {}

/**
*<div id="phar.count" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::count</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::count</span> &mdash; <span class="dc-title">Returns the number of entries (files) in the Phar archive</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.count-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::count</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = <strong><span>COUNT_NORMAL</span></strong></span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.count-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">mode</span></dt>    <dd>     <span>      <span class="parameter" style="color:#3A95FF">mode</span> is an integer value specifying the counting mode to be used.      By default, it is set to <strong><span>COUNT_NORMAL</span></strong>,      which counts only the number of items in the archive that have not been deleted or hidden.      When set to <strong><span>COUNT_RECURSIVE</span></strong>, it counts all items in the archive,      including those that have been deleted or hidden.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.count-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The number of files contained within this phar, or <span>0</span> (the number zero)   if none.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.count-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2180">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::count()</strong></span> example</strong></p>    <div class="example-contents"><p>    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// make sure it doesn't exist<br /></span><span style="color: #007700">@</span><span style="color: #9876AA">unlink</span><span style="color: #007700">(</span><span style="color: #DD0000">'brandnewphar.phar'</span><span style="color: #007700">);<br />try {<br />    </span><span style="color: #9876AA">$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">) . </span><span style="color: #DD0000">'/brandnewphar.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'brandnewphar.phar'</span><span style="color: #007700">);<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Could not create phar:'</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br />echo </span><span style="color: #DD0000">'The new phar has ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">count</span><span style="color: #007700">() . </span><span style="color: #DD0000">" entries\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">'The new phar has ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">count</span><span style="color: #007700">() . </span><span style="color: #DD0000">" entries\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>The new phar has 0 entries<br>The new phar has 1 entries<br></span></div>    </div>   </div>  </span> </div></div>
     * @return int<0,max> The number of files contained within this phar, or 0 (the number zero)*/
    public function count(#[PhpStormStubsElementAvailable(from: '8.0')] int $mode = COUNT_NORMAL): int {}

/**
*<div id="phar.delete" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::delete</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::delete</span> &mdash; <span class="dc-title">删除 phar 档案中的一个文件</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.delete-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::delete</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$localName</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   删除档案中的一个文件。这个方法与下面示例中调用 <span class="function">{@link unlink()}</span> 处理数据流包装器的方式等价。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.delete-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">localName</span></dt>     <dd>      <p class="para">       需要删除的文件在档案中的路径。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.delete-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>，但是最好还是检查一下是否抛出了异常，如果没有抛出，可以认定操作成功。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.delete-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果将修改保存到磁盘时发生了错误，会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> 异常。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.delete-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2195">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Phar::delete()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$phar </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'myphar.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">delete</span><span style="color: #007700">(</span><span style="color: #DD0000">'unlink/me.php'</span><span style="color: #007700">);<br />    </span><span style="color: #FF8000">// this is equivalent to:<br />    </span><span style="color: #9876AA">unlink</span><span style="color: #007700">(</span><span style="color: #DD0000">'phar://myphar.phar/unlink/me.php'</span><span style="color: #007700">);<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// handle errors<br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.delete-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PharData::delete()} - Delete a file within a tar/zip archive</span></li>    <li class="member"><span class="function">{@link Phar::unlinkArchive()} - Completely remove a phar archive from disk and from memory</span></li>   </ul>  </span> </div></div>
     * @return bool returns <b>TRUE</b> on success, but it is better to check for thrown exception,*/
    public function delete(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $localName) {}

/**
*<div id="phar.delmetadata" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::delMetadata</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.2.0)</p><p class="refpurpose"><span class="refname">Phar::delMetadata</span> &mdash; <span class="dc-title">Deletes the global metadata of the phar</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.delmetadata-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::delMetadata</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   Deletes the global metadata of the phar  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.delmetadata-parameters">  <h3 class="title">参数</h3>  <span>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.delmetadata-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   returns <strong><span>true</span></strong> on success, but it is better to check for thrown exception,   and assume success if none is thrown.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.delmetadata-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> if errors occur while flushing   changes to disk.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.delmetadata-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2192">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::delMetaData()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$phar </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'myphar.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMetadata</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setMetadata</span><span style="color: #007700">(</span><span style="color: #DD0000">"hi there"</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMetadata</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">delMetadata</span><span style="color: #007700">();<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMetadata</span><span style="color: #007700">());<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// handle errors<br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>NULL<br>string(8) &quot;hi there&quot;<br>NULL<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.delmetadata-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::getMetadata()} - Returns phar archive meta-data</span></li>    <li class="member"><span class="function">{@link Phar::setMetadata()} - Sets phar archive meta-data</span></li>    <li class="member"><span class="function">{@link Phar::hasMetadata()} - Returns whether phar has global meta-data</span></li>   </ul>  </span> </div></div>
     * @return bool returns <b>TRUE</b> on success, but it is better to check for thrown exception,*/
    public function delMetadata() {}

/**
*<div id="phar.extractto" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::extractTo</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::extractTo</span> &mdash; <span class="dc-title">Extract the contents of a phar archive to a directory</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.extractto-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::extractTo</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$directory</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">null</span></span> <span class="parameter" style="color:#3A95FF">$files</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$overwrite</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Extract all files within a phar archive to disk.  Extracted files and directories preserve   permissions as stored in the archive.  The optional parameters allow optional control over   which files are extracted, and whether existing files on disk can be overwritten.   The second parameter <span class="parameter" style="color:#3A95FF">files</span> can be either the name of a file or   directory to extract, or an array of names of files and directories to extract.  By   default, this method will not overwrite existing files, the third parameter can be   set to true to enable overwriting of files.   This method is similar to <span class="function">{@link ZipArchive::extractTo()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.extractto-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">directory</span></dt>     <dd>      <p class="para">       Path to extract the given <span class="parameter" style="color:#3A95FF">files</span> to      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">files</span></dt>     <dd>      <p class="para">       The name of a file or directory to extract, or an array of files/directories to extract,       <strong><span>null</span></strong> to skip this param      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">overwrite</span></dt>     <dd>      <p class="para">       Set to <strong><span>true</span></strong> to enable overwriting existing files      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.extractto-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   returns <strong><span>true</span></strong> on success, but it is better to check for thrown exception,   and assume success if none is thrown.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.extractto-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> if errors occur while flushing   changes to disk.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.extractto-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2198">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::extractTo()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$phar </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'myphar.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">extractTo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/full/path'</span><span style="color: #007700">); </span><span style="color: #FF8000">// extract all files<br />    </span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">extractTo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/another/path'</span><span style="color: #007700">, </span><span style="color: #DD0000">'file.txt'</span><span style="color: #007700">); </span><span style="color: #FF8000">// extract only file.txt<br />    </span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">extractTo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/this/path'</span><span style="color: #007700">,<br />        array(</span><span style="color: #DD0000">'file1.txt'</span><span style="color: #007700">, </span><span style="color: #DD0000">'file2.txt'</span><span style="color: #007700">)); </span><span style="color: #FF8000">// extract 2 files only<br />    </span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">extractTo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/third/path'</span><span style="color: #007700">, </span><span style="color: #9876AA">null</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">); </span><span style="color: #FF8000">// extract all files, and overwrite<br /></span><span style="color: #007700">} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// handle errors<br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-phar.extractto-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">Windows NTFS file systemsdo not support some characters in filenames, namely <span>&lt;|&gt;*?&quot;:</span>. Filenames with a trailing dotare not supported either. Contrary to some extraction tools, this method does not replace these characters withan underscore, but instead fails to extract such files.</p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.extractto-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PharData::extractTo()} - Extract the contents of a tar/zip archive to a directory</span></li>   </ul>  </span> </div></div>
     * @return bool returns <b>TRUE</b> on success, but it is better to check for thrown exception,*/
    public function extractTo(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $directory,
        #[LanguageLevelTypeAware(['8.0' => 'array|string|null'], default: '')] $files = null,
        #[LanguageLevelTypeAware(['8.0' => 'bool'], default: '')] $overwrite = false
    ): bool {}

/**
*<div id="phar.getalias" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::getAlias</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.2.1)</p><p class="refpurpose"><span class="refname">Phar::getAlias</span> &mdash; <span class="dc-title">Get the alias for Phar</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.getalias-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::getAlias</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">string</span></span></div>  <p class="para rdfs-comment">  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.getalias-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.getalias-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the alias or <strong><span>null</span></strong> if there&#039;s no alias.  </p> </div></div>
     * @return string|null*/
    public function getAlias(): ?string {}

/**
*<div id="phar.getmetadata" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::getMetadata</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::getMetadata</span> &mdash; <span class="dc-title">Returns phar archive meta-data</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.getmetadata-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::getMetadata</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$unserializeOptions</span><span class="initializer"> = []</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Retrieve archive meta-data.  Meta-data can be any PHP variable that can be serialized.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.getmetadata-parameters">  <h3 class="title">参数</h3>  <span>   No parameters.  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.getmetadata-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Any PHP value that can be serialized and is stored as meta-data for the Phar archive,   or <strong><span>null</span></strong> if no meta-data is stored.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-phar.getmetadata-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       The parameter <span class="parameter" style="color:#3A95FF">unserializeOptions</span> has been added.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.getmetadata-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2201">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::getMetadata()</strong></span> example</strong></p>    <div class="example-contents"><p>    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// make sure it doesn't exist<br /></span><span style="color: #007700">@</span><span style="color: #9876AA">unlink</span><span style="color: #007700">(</span><span style="color: #DD0000">'brandnewphar.phar'</span><span style="color: #007700">);<br />try {<br />    </span><span style="color: #9876AA">$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">) . </span><span style="color: #DD0000">'/brandnewphar.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'brandnewphar.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file.php'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'&lt;?php echo "hello";'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setMetadata</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'bootstrap' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'file.php'</span><span style="color: #007700">));<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMetadata</span><span style="color: #007700">());<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Could not modify phar:'</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(1) {<br>  [&quot;bootstrap&quot;]=&gt;<br>  string(8) &quot;file.php&quot;<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.getmetadata-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::setMetadata()} - Sets phar archive meta-data</span></li>    <li class="member"><span class="function">{@link Phar::delMetadata()} - Deletes the global metadata of the phar</span></li>    <li class="member"><span class="function">{@link Phar::hasMetadata()} - Returns whether phar has global meta-data</span></li>   </ul>  </span> </div></div>
     * @return mixed any PHP variable that can be serialized and is stored as meta-data for the Phar archive,*/
    public function getMetadata(#[PhpStormStubsElementAvailable(from: '8.0')] array $unserializeOptions = []): mixed {}

/**
*<div id="phar.getmodified" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::getModified</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::getModified</span> &mdash; <span class="dc-title">Return whether phar was modified</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.getmodified-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::getModified</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   This method can be used to determine whether a phar has either   had an internal file deleted, or contents of a file changed in   some way.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.getmodified-parameters">  <h3 class="title">参数</h3>  <span>   No parameters.  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.getmodified-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the phar has been modified since opened, <strong><span>false</span></strong> if not.  </p> </div></div>
     * @return bool <b>TRUE</b> if the phar has been modified since opened, <b>FALSE</b> if not.*/
    public function getModified(): bool {}

/**
*<div id="phar.getsignature" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::getSignature</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::getSignature</span> &mdash; <span class="dc-title">Return MD5/SHA1/SHA256/SHA512/OpenSSL signature of a Phar archive</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.getsignature-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::getSignature</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Returns the verification signature of a phar archive in a hexadecimal string.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.getsignature-parameters">  <h3 class="title">参数</h3>  <span>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.getsignature-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Array with the opened archive&#039;s signature in <span>hash</span> key and <span>MD5</span>,   <span>SHA-1</span>,   <span>SHA-256</span>, <span>SHA-512</span>, or <span>OpenSSL</span>   in <span>hash_type</span>.  This signature is a hash calculated on the   entire phar&#039;s contents, and may be used to verify the integrity of the archive.   A valid signature is absolutely required of all executable phar archives if the   <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.require-hash" class="link">phar.require_hash</a> INI variable   is set to true.   If there is no signature, the function returns <strong><span>false</span></strong>.  </p> </div></div>
     * @return array Array with the opened archive's signature in hash key and MD5,*/
    public function getSignature(): array|false {}

/**
*<div id="phar.getstub" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::getStub</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::getStub</span> &mdash; <span class="dc-title">Return the PHP loader or bootstrap stub of a Phar archive</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.getstub-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::getStub</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Phar archives contain a bootstrap loader, or <span>stub</span>   written in PHP that is executed when the archive is executed in PHP either via   include:   <div class="example-contents">    <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">include </span><span style="color: #DD0000">'myphar.phar'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   or by simple execution:   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">    <div class="cdata"><span>php myphar.phar<br>    </span></div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.getstub-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.getstub-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a string containing the contents of the bootstrap loader (stub) of   the current Phar archive.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.getstub-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> if it is not possible to read   the stub from the Phar archive.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.getstub-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2204">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::getStub()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/my.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'my.phar'</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getStub</span><span style="color: #007700">();<br />echo </span><span style="color: #DD0000">"==NEXT==\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setStub</span><span style="color: #007700">(</span><span style="color: #DD0000">"&lt;?php<br />function __autoload(</span><span style="color: #9876AA">$class</span><span style="color: #DD0000">)<br />{<br />    include 'phar://' . str_replace('_', '/', </span><span style="color: #9876AA">$class</span><span style="color: #DD0000">);<br />}<br />Phar::mapPhar('myphar.phar');<br />include 'phar://myphar.phar/startup.php';<br />__HALT_COMPILER(); ?&gt;"</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getStub</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>&lt;?php __HALT_COMPILER(); ?&gt;<br>==NEXT==<br>&lt;?php<br>function __autoload($class)<br>{<br>    include &#039;phar://&#039; . str_replace(&#039;_&#039;, &#039;/&#039;, $class);<br>}<br>Phar::mapPhar(&#039;myphar.phar&#039;);<br>include &#039;phar://myphar.phar/startup.php&#039;;<br>__HALT_COMPILER(); ?&gt;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.getstub-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::setStub()} - Used to set the PHP loader or bootstrap stub of a Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::createDefaultStub()} - Create a phar-file format specific stub</span></li>   </ul>  </span> </div></div>
     * @return string a string containing the contents of the bootstrap loader (stub) of*/
    public function getStub(): string {}

/**
*<div id="phar.getversion" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::getVersion</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::getVersion</span> &mdash; <span class="dc-title">Return version info of Phar archive</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.getversion-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::getVersion</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Returns the API version of an opened Phar archive.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.getversion-parameters">  <h3 class="title">参数</h3>  <span>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.getversion-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The opened archive&#039;s API version.  This is not to be confused with   the API version that the loaded phar extension will use to create   new phars.  Each Phar archive has the API version hard-coded into   its manifest.  See <a href="https://www.php.net/manual/zh/phar.fileformat.php" class="link">Phar file format</a>   documentation for more information.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.getversion-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::apiVersion()} - Returns the api version</span></li>   </ul>  </span> </div></div>
     * @return string The opened archive's API version. This is not to be confused with*/
    public function getVersion(): string {}

/**
*<div id="phar.hasmetadata" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::hasMetadata</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.2.0)</p><p class="refpurpose"><span class="refname">Phar::hasMetadata</span> &mdash; <span class="dc-title">Returns whether phar has global meta-data</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.hasmetadata-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::hasMetadata</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Returns whether phar has global meta-data set.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.hasmetadata-parameters">  <h3 class="title">参数</h3>  <span>   No parameters.  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.hasmetadata-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if meta-data has been set, and <strong><span>false</span></strong> if not.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.hasmetadata-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2207">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::hasMetadata()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$phar </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'myphar.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasMetadata</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setMetadata</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'thing' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">));<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasMetadata</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">delMetadata</span><span style="color: #007700">();<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasMetadata</span><span style="color: #007700">());<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// handle error<br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>bool(true)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.hasmetadata-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::getMetadata()} - Returns phar archive meta-data</span></li>    <li class="member"><span class="function">{@link Phar::setMetadata()} - Sets phar archive meta-data</span></li>    <li class="member"><span class="function">{@link Phar::delMetadata()} - Deletes the global metadata of the phar</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> if meta-data has been set, and <b>FALSE</b> if not.*/
    public function hasMetadata(): bool {}

/**
*<div id="phar.isbuffering" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::isBuffering</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::isBuffering</span> &mdash; <span class="dc-title">Used to determine whether Phar write operations are being buffered, or are flushing directly to disk</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.isbuffering-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::isBuffering</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   This method can be used to determine whether a Phar will save changes   to disk immediately, or whether a call to <span class="function">{@link Phar::stopBuffering()}</span>   is needed to enable saving changes.  </p>  <p class="para">   Phar write buffering is per-archive, buffering active for the   <span>foo.phar</span> Phar archive does not affect changes   to the <span>bar.phar</span> Phar archive.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.isbuffering-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.isbuffering-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the write operations are being buffer, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.isbuffering-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2216">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::isBuffering()</strong></span> example</strong></p>    <div class="example-contents"><p>    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">) . </span><span style="color: #DD0000">'/brandnewphar.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'brandnewphar.phar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$p2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'existingphar.phar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file1.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isBuffering</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$p2</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isBuffering</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;<br /></span>=2=<br /><span style="color: #9876AA">&lt;?php<br />$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">startBuffering</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isBuffering</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$p2</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isBuffering</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">stopBuffering</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;<br /></span>=3=<br /><span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isBuffering</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$p2</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isBuffering</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>bool(false)<br>=2=<br>bool(true)<br>bool(false)<br>=3=<br>bool(false)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.isbuffering-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::startBuffering()} - Start buffering Phar write operations, do not modify the Phar object on disk</span></li>    <li class="member"><span class="function">{@link Phar::stopBuffering()} - Stop buffering write requests to the Phar archive, and save changes to disk</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> if the write operations are being buffer, <b>FALSE</b> otherwise.*/
    public function isBuffering(): bool {}

/**
*<div id="phar.iscompressed" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::isCompressed</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::isCompressed</span> &mdash; <span class="dc-title">Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.iscompressed-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::isCompressed</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>   <p class="para">   Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed   (.tar.gz/tar.bz and so on).  Zip-based phar archives cannot be compressed as a   file, and so this method will always return <strong><span>false</span></strong> if a zip-based phar archive is queried.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.iscompressed-parameters">  <h3 class="title">参数</h3>  <span>   No parameters.  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.iscompressed-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span>Phar::GZ</span>, <span>Phar::BZ2</span> or <strong><span>false</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.iscompressed-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2219">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::isCompressed()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$phar1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'myphar.zip.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$phar1</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">$phar2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'myuncompressed.tar.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$phar2</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">$phar2</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">compress</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">GZ</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$phar2</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">() == </span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">GZ</span><span style="color: #007700">);<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>bool(false)<br>bool(true)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.iscompressed-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PharFileInfo::getCompressedSize()} - Returns the actual size of the file (with compression) inside the Phar archive</span></li>    <li class="member"><span class="function">{@link PharFileInfo::isCompressed()} - Returns whether the entry is compressed</span></li>    <li class="member"><span class="function">{@link PharFileInfo::decompress()} - Decompresses the current Phar entry within the phar</span></li>    <li class="member"><span class="function">{@link PharFileInfo::compress()} - Compresses the current Phar entry with either zlib or bzip2 compression</span></li>    <li class="member"><span class="function">{@link Phar::decompress()} - Decompresses the entire Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::compress()} - Compresses the entire Phar archive using Gzip or Bzip2 compression</span></li>    <li class="member"><span class="function">{@link Phar::canCompress()} - Returns whether phar extension supports compression using either zlib or bzip2</span></li>    <li class="member"><span class="function">{@link Phar::compressFiles()} - Compresses all files in the current Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::decompressFiles()} - Decompresses all files in the current Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::getSupportedCompression()} - Return array of supported compression algorithms</span></li>   </ul>  </span> </div></div>
     * @return mixed Phar::GZ, Phar::BZ2 or <b>FALSE</b>*/
    public function isCompressed(): int|false {}

/**
*<div id="phar.isfileformat" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::isFileFormat</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::isFileFormat</span> &mdash; <span class="dc-title">Returns true if the phar archive is based on the tar/phar/zip file format depending on the parameter</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.isfileformat-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::isFileFormat</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$format</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.isfileformat-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">format</span></dt>     <dd>      <p class="para">       Either <span>Phar::PHAR</span>, <span>Phar::TAR</span>, or       <span>Phar::ZIP</span> to test for the format of the archive.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.isfileformat-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the phar archive matches the file format requested by the parameter  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.isfileformat-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> is thrown if the parameter is an unknown file   format specifier.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.isfileformat-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::convertToExecutable()} - Convert a phar archive to another executable phar archive file format</span></li>    <li class="member"><span class="function">{@link Phar::convertToData()} - Convert a phar archive to a non-executable tar or zip file</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> if the phar archive matches the file format requested by the parameter*/
    public function isFileFormat(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $format): bool {}

/**
*<div id="phar.iswritable" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::isWritable</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::isWritable</span> &mdash; <span class="dc-title">Returns true if the phar archive can be modified</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.iswritable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::isWritable</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   This method returns <strong><span>true</span></strong> if <span>phar.readonly</span> is <span>0</span>,   and the actual phar archive on disk is not read-only.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.iswritable-parameters">  <h3 class="title">参数</h3>  <span>   No parameters.  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.iswritable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the phar archive can be modified  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.iswritable-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::canWrite()} - Returns whether phar extension supports writing and creating phars</span></li>    <li class="member"><span class="function">{@link PharData::isWritable()} - Returns true if the tar/zip archive can be modified</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> if the phar archive can be modified*/
    public function isWritable(): bool {}

/**
*<div id="phar.offsetexists" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::offsetExists</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::offsetExists</span> &mdash; <span class="dc-title">Determines whether a file exists in the phar</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.offsetexists-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::offsetExists</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$localName</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   This is an implementation of the <span class="interfacename"><a href="https://www.php.net/manual/zh/class.arrayaccess.php" class="interfacename">ArrayAccess</a></span> interface allowing   direct manipulation of the contents of a Phar archive using   array access brackets.  </p>  <p class="para">   offsetExists() is called whenever <span class="function">{@link isset()}</span> is called.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.offsetexists-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">localName</span></dt>     <dd>      <p class="para">       The filename (relative path) to look for in a Phar.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.offsetexists-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the file exists within the phar, or <strong><span>false</span></strong> if not.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.offsetexists-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2234">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::offsetExists()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">) . </span><span style="color: #DD0000">'/my.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'my.phar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'firstfile.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'first file'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'secondfile.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'second file'</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// the next set of lines call offsetExists() indirectly<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(isset(</span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'firstfile.txt'</span><span style="color: #007700">]));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(isset(</span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'nothere.txt'</span><span style="color: #007700">]));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.offsetexists-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::offsetGet()} - Gets a PharFileInfo object for a specific file</span></li>    <li class="member"><span class="function">{@link Phar::offsetSet()} - Set the contents of an internal file to those of an external file</span></li>    <li class="member"><span class="function">{@link Phar::offsetUnset()} - Remove a file from a phar</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> if the file exists within the phar, or <b>FALSE</b> if not.*/
    public function offsetExists($localName): bool {}

/**
*<div id="phar.offsetget" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::offsetGet</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::offsetGet</span> &mdash; <span class="dc-title">Gets a <span class="classname"><a href="https://www.php.net/manual/zh/class.pharfileinfo.php" class="classname">PharFileInfo</a></span> object for a specific file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.offsetget-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::offsetGet</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$localName</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></div>  <p class="para rdfs-comment">   This is an implementation of the <span class="interfacename"><a href="https://www.php.net/manual/zh/class.arrayaccess.php" class="interfacename">ArrayAccess</a></span>   interface allowing direct manipulation of the contents of a Phar archive using   array access brackets. <span class="methodname" style="color:#CC7832"><strong>Phar::offsetGet()</strong></span> is used    for retrieving files from a Phar archive.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.offsetget-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">localName</span></dt>     <dd>      <p class="para">       The filename (relative path) to look for in a Phar.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.offsetget-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   A <span class="classname"><a href="https://www.php.net/manual/zh/class.pharfileinfo.php" class="classname">PharFileInfo</a></span> object is returned that can be used to   iterate over a file&#039;s contents or to retrieve information about the current file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.offsetget-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   This method throws <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span> if the file   does not exist in the Phar archive.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.offsetget-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2237">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Phar::offsetGet()</strong></span> example</strong></p>    <div class="example-contents"><p>     As with all classes that implement the <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayaccess.php" class="classname">ArrayAccess</a></span>     interface, <span class="methodname" style="color:#CC7832"><strong>Phar::offsetGet()</strong></span> is automatically     called when using the <span>[]</span> angle bracket operator.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">) . </span><span style="color: #DD0000">'/myphar.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'myphar.phar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'exists.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">"file exists\n"</span><span style="color: #007700">;<br />try {<br />    </span><span style="color: #FF8000">// automatically calls offsetGet()<br />    </span><span style="color: #007700">echo </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'exists.txt'</span><span style="color: #007700">];<br />    echo </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'doesnotexist.txt'</span><span style="color: #007700">];<br />} catch (</span><span style="color: #9876AA">BadMethodCallException $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>file exists<br>Entry doesnotexist.txt does not exist<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.offsetget-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::offsetExists()} - Determines whether a file exists in the phar</span></li>    <li class="member"><span class="function">{@link Phar::offsetSet()} - Set the contents of an internal file to those of an external file</span></li>    <li class="member"><span class="function">{@link Phar::offsetUnset()} - Remove a file from a phar</span></li>   </ul>  </span> </div></div>
     * @return PharFileInfo A <b>PharFileInfo</b> object is returned that can be used to*/
    public function offsetGet($localName): SplFileInfo {}

/**
*<div id="phar.offsetset" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::offsetSet</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::offsetSet</span> &mdash; <span class="dc-title">Set the contents of an internal file to those of an external file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.offsetset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::offsetSet</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$localName</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   This is an implementation of the <span class="interfacename"><a href="https://www.php.net/manual/zh/class.arrayaccess.php" class="interfacename">ArrayAccess</a></span> interface allowing   direct manipulation of the contents of a Phar archive using   array access brackets.  offsetSet is used for modifying an   existing file, or adding a new file to a Phar archive.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.offsetset-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">localName</span></dt>     <dd>      <p class="para">       The filename (relative path) to modify in a Phar.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       Content of the file.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.offsetset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   No return values.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.offsetset-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   if <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a> is <span>1</span>,   <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span> is thrown, as modifying a Phar   is only allowed when phar.readonly is set to <span>0</span>. Throws   <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> if there are any problems flushing   changes made to the Phar archive to disk.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.offsetset-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2240">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::offsetSet()</strong></span> example</strong></p>    <div class="example-contents"><p>     offsetSet should not be accessed directly, but instead used     via array access with the <span>[]</span> operator.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/my.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'my.phar'</span><span style="color: #007700">);<br />try {<br />    </span><span style="color: #FF8000">// calls offsetSet<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'Hi there'</span><span style="color: #007700">;<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Could not modify file.txt:'</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-phar.offsetset-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">  <span class="function">{@link Phar::addFile()}</span>, <span class="function">{@link Phar::addFromString()}</span> and <span class="function"><strong style="color:#CC7832">Phar::offsetSet()</strong></span>  save a new phar archive each time they are called. If performance is a concern,  <span class="function">{@link Phar::buildFromDirectory()}</span> or <span class="function">{@link Phar::buildFromIterator()}</span>  should be used instead.</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.offsetset-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::offsetExists()} - Determines whether a file exists in the phar</span></li>    <li class="member"><span class="function">{@link Phar::offsetGet()} - Gets a PharFileInfo object for a specific file</span></li>    <li class="member"><span class="function">{@link Phar::offsetUnset()} - Remove a file from a phar</span></li>   </ul>  </span> </div></div>
     * @return void No return values.*/
    public function offsetSet($localName, $value): void {}

/**
*<div id="phar.offsetunset" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::offsetUnset</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::offsetUnset</span> &mdash; <span class="dc-title">Remove a file from a phar</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.offsetunset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::offsetUnset</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$localName</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   This is an implementation of the <span class="interfacename"><a href="https://www.php.net/manual/zh/class.arrayaccess.php" class="interfacename">ArrayAccess</a></span> interface allowing   direct manipulation of the contents of a Phar archive using   array access brackets.  offsetUnset is used for deleting an   existing file, and is called by the <span class="function">{@link unset()}</span>   language construct.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.offsetunset-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">localName</span></dt>     <dd>      <p class="para">       The filename (relative path) to modify in a Phar.      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.offsetunset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.offsetunset-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   if <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a> is <span>1</span>,   <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span> is thrown, as modifying a Phar   is only allowed when phar.readonly is set to <span>0</span>. Throws   <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> if there are any problems flushing   changes made to the Phar archive to disk.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.offsetunset-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2243">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::offsetUnset()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/my.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'my.phar'</span><span style="color: #007700">);<br />try {<br />    </span><span style="color: #FF8000">// deletes file.txt from my.phar by calling offsetUnset<br />    </span><span style="color: #007700">unset(</span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file.txt'</span><span style="color: #007700">]);<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Could not delete file.txt: '</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.offsetunset-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::offsetExists()} - Determines whether a file exists in the phar</span></li>    <li class="member"><span class="function">{@link Phar::offsetGet()} - Gets a PharFileInfo object for a specific file</span></li>    <li class="member"><span class="function">{@link Phar::offsetSet()} - Set the contents of an internal file to those of an external file</span></li>    <li class="member"><span class="function">{@link Phar::unlinkArchive()} - Completely remove a phar archive from disk and from memory</span></li>    <li class="member"><span class="function">{@link Phar::delete()} - 删除 phar 档案中的一个文件</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function offsetUnset($localName): void {}

/**
*<div id="phar.setalias" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::setAlias</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.2.1)</p><p class="refpurpose"><span class="refname">Phar::setAlias</span> &mdash; <span class="dc-title">Set the alias for the Phar archive</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.setalias-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::setAlias</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$alias</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   Set the alias for the Phar archive, and write it as the permanent alias   for this phar archive.  An alias can be used internally to a phar archive to   ensure that use of the <span>phar</span> stream wrapper to access internal   files always works regardless of the location of the phar archive on the   filesystem.  Another alternative is to rely upon Phar&#039;s interception of   <span class="function">{@link include}</span> or to use <span class="function">{@link Phar::interceptFileFuncs()}</span>   and use relative paths.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.setalias-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">alias</span></dt>     <dd>      <p class="para">       A shorthand string that this archive can be referred to in <span>phar</span>       stream wrapper access.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.setalias-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.setalias-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.unexpectedvalueexception.php" class="classname">UnexpectedValueException</a></span> when write access   is disabled, and <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> if the alias is   already in use or any problems were encountered flushing changes to disk.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.setalias-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2249">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::setAlias()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$phar </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'myphar.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setAlias</span><span style="color: #007700">(</span><span style="color: #DD0000">'myp.phar'</span><span style="color: #007700">);<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// handle error<br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.setalias-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::__construct()} - Construct a Phar archive object</span></li>    <li class="member"><span class="function">{@link Phar::interceptFileFuncs()} - Instructs phar to intercept fopen, file_get_contents, opendir, and all of the stat-related functions</span></li>   </ul>  </span> </div></div>
     * @return bool*/
    public function setAlias(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $alias): bool {}

/**
*<div id="phar.setdefaultstub" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::setDefaultStub</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::setDefaultStub</span> &mdash; <span class="dc-title">Used to set the PHP loader or bootstrap stub of a Phar archive to the default loader</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.setdefaultstub-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::setDefaultStub</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$index</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$webIndex</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   This method is a convenience method that combines the functionality of   <span class="function">{@link Phar::createDefaultStub()}</span> and <span class="function">{@link Phar::setStub()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.setdefaultstub-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">index</span></dt>     <dd>      <p class="para">       Relative path within the phar archive to run if accessed on the command-line      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">webIndex</span></dt>     <dd>      <p class="para">       Relative path within the phar archive to run if accessed through a web browser      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.setdefaultstub-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.setdefaultstub-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   <span class="classname"><a href="https://www.php.net/manual/zh/class.unexpectedvalueexception.php" class="classname">UnexpectedValueException</a></span> is thrown if   <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a> is enabled   in php.ini.   <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> is thrown if any problems are encountered   flushing changes to disk.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-phar.setdefaultstub-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">webIndex</span> is nullable now.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.setdefaultstub-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2252">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::setDefaultStub()</strong></span> example</strong></p>    <div class="example-contents"><p>    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$phar </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'myphar.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setDefaultStub</span><span style="color: #007700">(</span><span style="color: #DD0000">'cli.php'</span><span style="color: #007700">, </span><span style="color: #DD0000">'web/index.php'</span><span style="color: #007700">);<br />    </span><span style="color: #FF8000">// this is the same as:<br />    // $phar-&gt;setStub($phar-&gt;createDefaultStub('cli.php', 'web/index.php'));<br /></span><span style="color: #007700">} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// handle errors<br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.setdefaultstub-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::setStub()} - Used to set the PHP loader or bootstrap stub of a Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::createDefaultStub()} - Create a phar-file format specific stub</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function setDefaultStub(
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $index = null,
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $webIndex = null
    ): bool {}

/**
*<div id="phar.setmetadata" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::setMetadata</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::setMetadata</span> &mdash; <span class="dc-title">Sets phar archive meta-data</span></p> </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.setmetadata-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::setMetadata</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$metadata</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div> <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   <span class="function"><strong style="color:#CC7832">Phar::setMetadata()</strong></span> should be used to store customized data   that describes something about the phar archive as a complete entity.   <span class="function">{@link PharFileInfo::setMetadata()}</span> should be used for file-specific meta-data.   Meta-data can slow down the performance of loading a phar archive if the data is large.   </p>  <p class="para">   Some possible uses for meta-data include specifying which file within the archive   should be used to bootstrap the archive, or the location of a file manifest   like <a href="https://www.php.net/manual/zh/https://pear.php.net/" class="link external">&raquo;&nbsp;PEAR</a>&#039;s package.xml file.   However, any useful data that describes the phar archive may be stored.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.setmetadata-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">metadata</span></dt>     <dd>      <p class="para">       Any PHP variable containing information to store that describes the phar archive      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.setmetadata-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.setmetadata-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2255">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::setMetadata()</strong></span> example</strong></p>    <div class="example-contents"><p>    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// make sure it doesn't exist<br /></span><span style="color: #007700">@</span><span style="color: #9876AA">unlink</span><span style="color: #007700">(</span><span style="color: #DD0000">'brandnewphar.phar'</span><span style="color: #007700">);<br />try {<br />    </span><span style="color: #9876AA">$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">) . </span><span style="color: #DD0000">'/brandnewphar.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'brandnewphar.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file.php'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'&lt;?php echo "hello"'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setMetadata</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'bootstrap' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'file.php'</span><span style="color: #007700">));<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMetadata</span><span style="color: #007700">());<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Could not create and/or modify phar:'</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(1) {<br>  [&quot;bootstrap&quot;]=&gt;<br>  string(8) &quot;file.php&quot;<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.setmetadata-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::getMetadata()} - Returns phar archive meta-data</span></li>    <li class="member"><span class="function">{@link Phar::delMetadata()} - Deletes the global metadata of the phar</span></li>    <li class="member"><span class="function">{@link Phar::hasMetadata()} - Returns whether phar has global meta-data</span></li>   </ul>  </span> </div></div>
     * @return void No value is returned.*/
    public function setMetadata(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $metadata): void {}

/**
*<div id="phar.setsignaturealgorithm" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::setSignatureAlgorithm</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.1.0)</p><p class="refpurpose"><span class="refname">Phar::setSignatureAlgorithm</span> &mdash; <span class="dc-title">Set the signature algorithm for a phar and apply it</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.setsignaturealgorithm-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::setSignatureAlgorithm</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$algo</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$privateKey</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   set the signature algorithm for a phar and apply it.  The   signature algorithm must be one of <span>Phar::MD5</span>,   <span>Phar::SHA1</span>, <span>Phar::SHA256</span>,   <span>Phar::SHA512</span>, or <span>Phar::OPENSSL</span>.  </p>  <p class="para">   Note that all executable phar archives have a signature created   automatically, <span>SHA1</span> by default.  data tar- or zip-based archives   (archives created with the <span class="classname"><a href="https://www.php.net/manual/zh/class.phardata.php" class="classname">PharData</a></span> class) must have   their signature created and set explicitly via   <span class="function"><strong style="color:#CC7832">Phar::setSignatureAlgorithm()</strong></span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.setsignaturealgorithm-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">algo</span></dt>     <dd>      <p class="para">       One of <span>Phar::MD5</span>,   <span>Phar::SHA1</span>, <span>Phar::SHA256</span>,   <span>Phar::SHA512</span>, or <span>Phar::OPENSSL</span>      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">privateKey</span></dt>     <dd>      <p class="para">       The contents of an OpenSSL private key, as extracted from a certificate or       OpenSSL key file:       <div class="example-contents">        <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$private </span><span style="color: #007700">= </span><span style="color: #9876AA">openssl_get_privatekey</span><span style="color: #007700">(</span><span style="color: #9876AA">file_get_contents</span><span style="color: #007700">(</span><span style="color: #DD0000">'private.pem'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$pkey </span><span style="color: #007700">= </span><span style="color: #DD0000">''</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">openssl_pkey_export</span><span style="color: #007700">(</span><span style="color: #9876AA">$private</span><span style="color: #007700">, </span><span style="color: #9876AA">$pkey</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setSignatureAlgorithm</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">OPENSSL</span><span style="color: #007700">, </span><span style="color: #9876AA">$pkey</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>       </div>       See <a href="https://www.php.net/manual/zh/phar.using.php" class="link">phar introduction</a> for instructions on       naming and placement of the public key file.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.setsignaturealgorithm-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.setsignaturealgorithm-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.unexpectedvalueexception.php" class="classname">UnexpectedValueException</a></span> for many errors,   and a <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>   if any problems occur flushing changes to disk.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-phar.setsignaturealgorithm-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">privateKey</span> is now nullable.      </td>     </tr>    </tbody>     </table> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.setsignaturealgorithm-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::getSupportedSignatures()} - Return array of supported signature types</span></li>    <li class="member"><span class="function">{@link Phar::getSignature()} - Return MD5/SHA1/SHA256/SHA512/OpenSSL signature of a Phar archive</span></li>   </ul>  </span> </div></div>
     * @return void No value is returned.*/
    public function setSignatureAlgorithm(
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $algo,
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $privateKey = null
    ): void {}

/**
*<div id="phar.setstub" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::setStub</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::setStub</span> &mdash; <span class="dc-title">Used to set the PHP loader or bootstrap stub of a Phar archive</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.setstub-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::setStub</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$stub</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$length</span><span class="initializer"> = -1</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">此方法需要将 <var class="filename">php.ini</var> 中的 <span>phar.readonly</span> 设为<span>0</span> 以适合 <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>对象.  否则, 将抛出<span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span>.</p></p></blockquote>  <p class="para">   This method is used to add a PHP bootstrap loader stub to a new Phar archive, or   to replace the loader stub in an existing Phar archive.  </p>  <p class="para">   The loader stub for a Phar archive is used whenever an archive is included directly   as in this example:  </p>  <div class="example-contents">   <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">include </span><span style="color: #DD0000">'myphar.phar'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>  </div>  <p class="para">   The loader is not accessed when including a file through the <span>phar</span>   stream wrapper like so:  </p>  <div class="example-contents">   <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">include </span><span style="color: #DD0000">'phar://myphar.phar/somefile.php'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.setstub-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">stub</span></dt>     <dd>      <p class="para">       A string or an open stream handle to use as the executable stub for this       phar archive.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">length</span></dt>     <dd>      <p class="para">             </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.setstub-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.setstub-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   <span class="classname"><a href="https://www.php.net/manual/zh/class.unexpectedvalueexception.php" class="classname">UnexpectedValueException</a></span> is thrown if   <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a> is enabled   in php.ini.   <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> is thrown if any problems are encountered   flushing changes to disk.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-phar.setstub-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.3.0</td>      <td>       Calling <span class="methodname" style="color:#CC7832"><strong>Phar::setStub()</strong></span> with a       <span class="type" style="color:#EAB766">resource</span> and a <span class="parameter" style="color:#3A95FF">length</span>       is now deprecated. Such calls should be replaced by:       <span>$phar-&gt;setStub(stream_get_contents($resource));</span>      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.setstub-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2258">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::setStub()</strong></span> example</strong></p>    <div class="example-contents"><p>    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">) . </span><span style="color: #DD0000">'/brandnewphar.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'brandnewphar.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'a.php'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'&lt;?php var_dump("Hello");'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setStub</span><span style="color: #007700">(</span><span style="color: #DD0000">'&lt;?php var_dump("First"); Phar::mapPhar("brandnewphar.phar"); __HALT_COMPILER(); ?&gt;'</span><span style="color: #007700">);<br />    include </span><span style="color: #DD0000">'phar://brandnewphar.phar/a.php'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getStub</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'b.php'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'&lt;?php var_dump("World");'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setStub</span><span style="color: #007700">(</span><span style="color: #DD0000">'&lt;?php var_dump("Second"); Phar::mapPhar("brandnewphar.phar"); __HALT_COMPILER(); ?&gt;'</span><span style="color: #007700">);<br />    include </span><span style="color: #DD0000">'phar://brandnewphar.phar/b.php'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getStub</span><span style="color: #007700">());<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Write operations failed on brandnewphar.phar: '</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(5) &quot;Hello&quot;<br>string(82) &quot;&lt;?php var_dump(&quot;First&quot;); Phar::mapPhar(&quot;brandnewphar.phar&quot;); __HALT_COMPILER(); ?&gt;&quot;<br>string(5) &quot;World&quot;<br>string(83) &quot;&lt;?php var_dump(&quot;Second&quot;); Phar::mapPhar(&quot;brandnewphar.phar&quot;); __HALT_COMPILER(); ?&gt;&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.setstub-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::getStub()} - Return the PHP loader or bootstrap stub of a Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::createDefaultStub()} - Create a phar-file format specific stub</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function setStub(
        $stub,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $length
    ) {}

/**
*<div id="phar.startbuffering" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::startBuffering</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::startBuffering</span> &mdash; <span class="dc-title">Start buffering Phar write operations, do not modify the Phar object on disk</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.startbuffering-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::startBuffering</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Although technically unnecessary, the <span class="function"><strong style="color:#CC7832">Phar::startBuffering()</strong></span> method   can provide a significant performance boost when creating or modifying a   Phar archive with a large number of files.  Ordinarily, every time a file   within a Phar archive is created or modified in any way, the entire Phar   archive will be recreated with the changes.  In this way, the archive will   be up-to-date with the activity performed on it.  </p>  <p class="para">   However, this can be unnecessary when simply creating a new Phar archive,   when it would make more sense to write the entire archive out at once.   Similarly, it is often necessary to make a series of changes and to ensure   that they all are possible before making any changes on disk, similar to the   relational database concept of transactions.  the   <span class="function"><strong style="color:#CC7832">Phar::startBuffering()</strong></span>/<span class="function">{@link Phar::stopBuffering()}</span> pair   of methods is provided for this purpose.  </p>  <p class="para">   Phar write buffering is per-archive, buffering active for the   <span>foo.phar</span> Phar archive does not affect changes   to the <span>bar.phar</span> Phar archive.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.startbuffering-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.startbuffering-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.startbuffering-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2261">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::startBuffering()</strong></span> example</strong></p>    <div class="example-contents"><p>    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// make sure it doesn't exist<br /></span><span style="color: #007700">@</span><span style="color: #9876AA">unlink</span><span style="color: #007700">(</span><span style="color: #DD0000">'brandnewphar.phar'</span><span style="color: #007700">);<br />try {<br />    </span><span style="color: #9876AA">$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">) . </span><span style="color: #DD0000">'/brandnewphar.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'brandnewphar.phar'</span><span style="color: #007700">);<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Could not create phar:'</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br />echo </span><span style="color: #DD0000">'The new phar has ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">count</span><span style="color: #007700">() . </span><span style="color: #DD0000">" entries\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">startBuffering</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file2.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'there'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file2.txt'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">setCompressedGZ</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file3.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'babyface'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file3.txt'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">setMetadata</span><span style="color: #007700">(</span><span style="color: #9876AA">42</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setStub</span><span style="color: #007700">(</span><span style="color: #DD0000">"&lt;?php<br />function __autoload(</span><span style="color: #9876AA">$class</span><span style="color: #DD0000">)<br />{<br />    include 'phar://myphar.phar/' . str_replace('_', '/', </span><span style="color: #9876AA">$class</span><span style="color: #DD0000">) . '.php';<br />}<br />Phar::mapPhar('myphar.phar');<br />include 'phar://myphar.phar/startup.php';<br />__HALT_COMPILER();"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">stopBuffering</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.startbuffering-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::stopBuffering()} - Stop buffering write requests to the Phar archive, and save changes to disk</span></li>    <li class="member"><span class="function">{@link Phar::isBuffering()} - Used to determine whether Phar write operations are being buffered, or are flushing directly to disk</span></li>   </ul>  </span> </div></div>
     * @return void No value is returned.*/
    public function startBuffering(): void {}

/**
*<div id="phar.stopbuffering" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::stopBuffering</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::stopBuffering</span> &mdash; <span class="dc-title">Stop buffering write requests to the Phar archive, and save changes to disk</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.stopbuffering-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Phar::stopBuffering</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Phar::stopBuffering()</strong></span> is used in conjunction with the   <span class="function">{@link Phar::startBuffering()}</span> method.  <span class="function">{@link Phar::startBuffering()}</span>   can provide a significant performance boost when creating or modifying a   Phar archive with a large number of files.  Ordinarily, every time a file   within a Phar archive is created or modified in any way, the entire Phar   archive will be recreated with the changes.  In this way, the archive will   be up-to-date with the activity performed on it.  </p>  <p class="para">   However, this can be unnecessary when simply creating a new Phar archive,   when it would make more sense to write the entire archive out at once.   Similarly, it is often necessary to make a series of changes and to ensure   that they all are possible before making any changes on disk, similar to the   relational database concept of transactions.  The   <span class="function">{@link Phar::startBuffering()}</span>/<span class="function"><strong style="color:#CC7832">Phar::stopBuffering()</strong></span> pair   of methods is provided for this purpose.  </p>  <p class="para">   Phar write buffering is per-archive, buffering active for the   <span>foo.phar</span> Phar archive does not affect changes   to the <span>bar.phar</span> Phar archive.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.stopbuffering-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.stopbuffering-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.stopbuffering-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> is thrown if any problems are encountered   flushing changes to disk.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.stopbuffering-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2264">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::stopBuffering()</strong></span> example</strong></p>    <div class="example-contents"><p>    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">) . </span><span style="color: #DD0000">'/brandnewphar.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'brandnewphar.phar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file1.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">startBuffering</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getStub</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setStub</span><span style="color: #007700">(</span><span style="color: #DD0000">"&lt;?php<br />function __autoload(\$class)<br />{<br />    include 'phar://brandnewphar.phar/' . str_replace('_', '/', \$class) . '.php';<br />}<br />Phar::mapPhar('brandnewphar.phar');<br />include 'phar://brandnewphar.phar/startup.php';<br />__HALT_COMPILER();"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">stopBuffering</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getStub</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(24) &quot;&lt;?php __HALT_COMPILER();&quot;<br>string(195) &quot;&lt;?php<br>function __autoload($class)<br>{<br>    include &#039;phar://&#039; . str_replace(&#039;_&#039;, &#039;/&#039;, $class);<br>}<br>Phar::mapPhar(&#039;brandnewphar.phar&#039;);<br>include &#039;phar://brandnewphar.phar/startup.php&#039;;<br>__HALT_COMPILER();&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.stopbuffering-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::startBuffering()} - Start buffering Phar write operations, do not modify the Phar object on disk</span></li>    <li class="member"><span class="function">{@link Phar::isBuffering()} - Used to determine whether Phar write operations are being buffered, or are flushing directly to disk</span></li>   </ul>  </span> </div></div>
     * @return void No value is returned.*/
    public function stopBuffering(): void {}

/**
*<div id="phar.apiversion" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::apiVersion</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::apiVersion</span> &mdash; <span class="dc-title">Returns the api version</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.apiversion-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Phar::apiVersion</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Return the API version of the phar file format that will be   used when creating phars.  The Phar extension supports reading API   version 1.0.0 or newer.  API version 1.1.0 is required for SHA-256 and SHA-512   hash, and API version 1.1.1 is required to store empty directories.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.apiversion-parameters">  <h3 class="title">参数</h3>  <span>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.apiversion-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The API version string as in <span>&quot;1.0.0&quot;</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.apiversion-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2144">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::apiVersion()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">apiVersion</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>1.1.1<br></span></div>    </div>   </div>  </span> </div></div>
     * @return string The API version string as in &#x00022;1.0.0&#x00022;.*/
    final public static function apiVersion(): string {}

/**
*<div id="phar.cancompress" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::canCompress</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::canCompress</span> &mdash; <span class="dc-title">Returns whether phar extension supports compression using either zlib or bzip2</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.cancompress-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Phar::canCompress</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$compression</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   This should be used to test whether compression is possible prior to   loading a phar archive containing compressed files.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.cancompress-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">compression</span></dt>     <dd>      <p class="para">       Either <span>Phar::GZ</span> or <span>Phar::BZ2</span> can be       used to test whether compression is possible with a specific compression       algorithm (zlib or bzip2).      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.cancompress-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if compression/decompression is available, <strong><span>false</span></strong> if not.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.cancompress-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2156">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::canCompress()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">canCompress</span><span style="color: #007700">()) {<br />    echo </span><span style="color: #9876AA">file_get_contents</span><span style="color: #007700">(</span><span style="color: #DD0000">'phar://compressedphar.phar/internal/file.txt'</span><span style="color: #007700">);<br />} else {<br />    echo </span><span style="color: #DD0000">'no compression available'</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.cancompress-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PharFileInfo::getCompressedSize()} - Returns the actual size of the file (with compression) inside the Phar archive</span></li>    <li class="member"><span class="function">{@link PharFileInfo::isCompressed()} - Returns whether the entry is compressed</span></li>    <li class="member"><span class="function">{@link PharFileInfo::compress()} - Compresses the current Phar entry with either zlib or bzip2 compression</span></li>    <li class="member"><span class="function">{@link PharFileInfo::decompress()} - Decompresses the current Phar entry within the phar</span></li>    <li class="member"><span class="function">{@link Phar::isCompressed()} - Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)</span></li>    <li class="member"><span class="function">{@link Phar::compressFiles()} - Compresses all files in the current Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::decompressFiles()} - Decompresses all files in the current Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::getSupportedCompression()} - Return array of supported compression algorithms</span></li>    <li class="member"><span class="function">{@link Phar::convertToExecutable()} - Convert a phar archive to another executable phar archive file format</span></li>    <li class="member"><span class="function">{@link Phar::convertToData()} - Convert a phar archive to a non-executable tar or zip file</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> if compression/decompression is available, <b>FALSE</b> if not.*/
    final public static function canCompress(int $compression = 0): bool {}

/**
*<div id="phar.canwrite" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::canWrite</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::canWrite</span> &mdash; <span class="dc-title">Returns whether phar extension supports writing and creating phars</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.canwrite-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Phar::canWrite</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   This static method determines whether write access has been disabled in   the system php.ini via the <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a>   ini variable.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.canwrite-parameters">  <h3 class="title">参数</h3>  <span>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.canwrite-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if write access is enabled, <strong><span>false</span></strong> if it is disabled.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.canwrite-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2159">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::canWrite()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">canWrite</span><span style="color: #007700">()) {<br />    </span><span style="color: #9876AA">file_put_contents</span><span style="color: #007700">(</span><span style="color: #DD0000">'phar://myphar.phar/file.txt'</span><span style="color: #007700">, </span><span style="color: #DD0000">'hi there'</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.canwrite-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a></li>    <li class="member"><span class="function">{@link Phar::isWritable()} - Returns true if the phar archive can be modified</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> if write access is enabled, <b>FALSE</b> if it is disabled.*/
    final public static function canWrite(): bool {}

/**
*<div id="phar.createdefaultstub" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::createDefaultStub</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::createDefaultStub</span> &mdash; <span class="dc-title">Create a phar-file format specific stub</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.createdefaultstub-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Phar::createDefaultStub</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$index</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$webIndex</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   This method is intended for creation of phar-file format-specific stubs, and is   not intended for use with tar- or zip-based phar archives.  </p>  <p class="para">   Phar archives contain a bootstrap loader, or <span>stub</span>   written in PHP that is executed when the archive is executed in PHP either via   include:   <div class="example-contents">    <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">include </span><span style="color: #DD0000">'myphar.phar'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   or by simple execution:   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">    <div class="cdata"><span>php myphar.phar<br>    </span></div>   </div>  </p>  <p class="para">   This method provides a simple and easy method to create a stub that will   run a startup file from the phar archive.  In addition, different files can   be specified for running the phar archive from the command line versus through   a web server.  The loader stub also calls <span class="function">{@link Phar::interceptFileFuncs()}</span>   to allow easy bundling of a PHP application that accesses the file system.  If the   phar extension is not present, the loader stub will extract the phar archive   to a temporary directory and then operate on the files.  A shutdown function   erases the temporary files on exit.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.createdefaultstub-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">index</span></dt>     <dd>      <p class="para">       Relative path within the phar archive to run if accessed on the command-line      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">webIndex</span></dt>     <dd>      <p class="para">       Relative path within the phar archive to run if accessed through a web browser      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.createdefaultstub-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a string containing the contents of a customized bootstrap loader (stub)   that allows the created Phar archive to work with or without the Phar extension   enabled.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.createdefaultstub-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.unexpectedvalueexception.php" class="classname">UnexpectedValueException</a></span> if either parameter is longer   than 400 bytes.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-phar.createdefaultstub-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">index</span> and <span class="parameter" style="color:#3A95FF">webIndex</span> are now nullable.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.createdefaultstub-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2183">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::createDefaultStub()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$phar </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'myphar.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setStub</span><span style="color: #007700">(</span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">createDefaultStub</span><span style="color: #007700">(</span><span style="color: #DD0000">'cli.php'</span><span style="color: #007700">, </span><span style="color: #DD0000">'web/index.php'</span><span style="color: #007700">));<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// handle errors<br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.createdefaultstub-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::setStub()} - Used to set the PHP loader or bootstrap stub of a Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::getStub()} - Return the PHP loader or bootstrap stub of a Phar archive</span></li>   </ul>  </span> </div></div>
     * @return string a string containing the contents of a customized bootstrap loader (stub)*/
    final public static function createDefaultStub(?string $index = null, ?string $webIndex = null): string {}

/**
*<div id="phar.getsupportedcompression" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::getSupportedCompression</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.2.0)</p><p class="refpurpose"><span class="refname">Phar::getSupportedCompression</span> &mdash; <span class="dc-title">Return array of supported compression algorithms</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.getsupportedcompression-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Phar::getSupportedCompression</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.getsupportedcompression-parameters">  <h3 class="title">参数</h3>  <span>   No parameters.  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.getsupportedcompression-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an array containing any of <span>Phar::GZ</span> or   <span>Phar::BZ2</span>, depending on the availability of   the <a href="https://www.php.net/manual/zh/book.zlib.php" class="link">zlib</a> extension or the   <a href="https://www.php.net/manual/zh/book.bzip2.php" class="link">bz2</a> extension.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.getsupportedcompression-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PharFileInfo::getCompressedSize()} - Returns the actual size of the file (with compression) inside the Phar archive</span></li>    <li class="member"><span class="function">{@link PharFileInfo::isCompressed()} - Returns whether the entry is compressed</span></li>    <li class="member"><span class="function">{@link PharFileInfo::compress()} - Compresses the current Phar entry with either zlib or bzip2 compression</span></li>    <li class="member"><span class="function">{@link PharFileInfo::decompress()} - Decompresses the current Phar entry within the phar</span></li>    <li class="member"><span class="function">{@link Phar::compress()} - Compresses the entire Phar archive using Gzip or Bzip2 compression</span></li>    <li class="member"><span class="function">{@link Phar::decompress()} - Decompresses the entire Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::canCompress()} - Returns whether phar extension supports compression using either zlib or bzip2</span></li>    <li class="member"><span class="function">{@link Phar::isCompressed()} - Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)</span></li>    <li class="member"><span class="function">{@link Phar::compressFiles()} - Compresses all files in the current Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::decompressFiles()} - Decompresses all files in the current Phar archive</span></li>   </ul>  </span> </div></div>
     * @return string[] an array containing any of "GZ" or*/
    final public static function getSupportedCompression(): array {}

/**
*<div id="phar.getsupportedsignatures" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::getSupportedSignatures</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.1.0)</p><p class="refpurpose"><span class="refname">Phar::getSupportedSignatures</span> &mdash; <span class="dc-title">Return array of supported signature types</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.getsupportedsignatures-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Phar::getSupportedSignatures</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Return array of supported signature types  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.getsupportedsignatures-parameters">  <h3 class="title">参数</h3>  <span>   No parameters.  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.getsupportedsignatures-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an array containing any of <span>MD5</span>, <span>SHA-1</span>,   <span>SHA-256</span>, <span>SHA-512</span>, or <span>OpenSSL</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.getsupportedsignatures-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::getSignature()} - Return MD5/SHA1/SHA256/SHA512/OpenSSL signature of a Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::setSignatureAlgorithm()} - Set the signature algorithm for a phar and apply it</span></li>   </ul>  </span> </div></div>
     * @return string[] an array containing any of "MD5", "SHA-1",*/
    final public static function getSupportedSignatures(): array {}

/**
*<div id="phar.interceptfilefuncs" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::interceptFileFuncs</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::interceptFileFuncs</span> &mdash; <span class="dc-title">Instructs phar to intercept fopen, file_get_contents, opendir, and all of the stat-related functions</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.interceptfilefuncs-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Phar::interceptFileFuncs</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   instructs phar to intercept <span class="function">{@link fopen()}</span>, <span class="function">{@link readfile()}</span>,   <span class="function">{@link file_get_contents()}</span>, <span class="function">{@link opendir()}</span>, and all of   the stat-related functions.  If any of these functions is called from within   a phar archive with a relative path, the call is modified to access a file   within the phar archive.  Absolute paths are assumed to be attempts to load   external files from the filesystem.  </p>  <p class="para">   This function makes it possible to run PHP applications designed to run off of   a hard disk as a phar application.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.interceptfilefuncs-parameters">  <h3 class="title">参数</h3>  <span>   No parameters.  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.interceptfilefuncs-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.interceptfilefuncs-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2210">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::interceptFileFuncs()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">interceptFileFuncs</span><span style="color: #007700">();<br />include </span><span style="color: #DD0000">'phar://' </span><span style="color: #007700">. </span><span style="color: #9876AA">__FILE__ </span><span style="color: #007700">. </span><span style="color: #DD0000">'/file.php'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>  <p class="para">   Assuming that this phar is at <span>/path/to/myphar.phar</span> and it   contains <span>file.php</span> and   <span>file2.txt</span>, if <span>file.php</span> contains this code:  </p>  <p class="para">   <div class="example" id="example-2213">    <p><strong>示例 #2 A <span class="function"><strong style="color:#CC7832">Phar::interceptFileFuncs()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">file_get_contents</span><span style="color: #007700">(</span><span style="color: #DD0000">'file2.txt'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p>  <p class="para">   Normally PHP would search the current directory for <span>file2.txt</span>,   which would translate as the directory of file.php, or the current directory of   a command-line user.  <span class="function"><strong style="color:#CC7832">Phar::interceptFileFuncs()</strong></span> instructs   PHP to consider the current directory to be <span>phar:///path/to/myphar.phar/</span>   and so opens <span>phar:///path/to/myphar.phar/file2.txt</span> in the above   example code.  </p> </div></div>
     * @return void*/
    final public static function interceptFileFuncs(): void {}

/**
*<div id="phar.isvalidpharfilename" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::isValidPharFilename</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.2.0)</p><p class="refpurpose"><span class="refname">Phar::isValidPharFilename</span> &mdash; <span class="dc-title">Returns whether the given filename is a valid phar filename</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.isvalidpharfilename-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Phar::isValidPharFilename</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$executable</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Returns whether the given filename is a valid phar filename that will be recognized   as a phar archive by the phar extension.  This can be used to test a name without   having to instantiate a phar archive and catch the inevitable Exception that will be   thrown if an invalid name is specified.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.isvalidpharfilename-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">filename</span></dt>     <dd>      <p class="para">       The name or full path to a phar archive not yet created      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">executable</span></dt>     <dd>      <p class="para">       This parameter determines whether the filename should be treated as       a phar executable archive, or a data non-executable archive      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.isvalidpharfilename-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the filename is valid, <strong><span>false</span></strong> if not.  </p> </div></div>
     * @return bool <b>TRUE</b> if the filename is valid, <b>FALSE</b> if not.*/
    final public static function isValidPharFilename(string $filename, bool $executable = true): bool {}

/**
*<div id="phar.loadphar" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::loadPhar</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::loadPhar</span> &mdash; <span class="dc-title">Loads any phar archive with an alias</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.loadphar-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Phar::loadPhar</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$alias</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   This can be used to read the contents of an external Phar archive.  This   is most useful for assigning an alias to a phar so that subsequent references   to the phar can use the shorter alias, or for loading Phar archives that   only contain data and are not intended for execution/inclusion in PHP scripts.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.loadphar-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">filename</span></dt>     <dd>      <p class="para">       the full or relative path to the phar archive to open      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">alias</span></dt>     <dd>      <p class="para">       The alias that may be used to refer to the phar archive.  Note       that many phar archives specify an explicit alias inside the       phar archive, and a <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> will be thrown if       a new alias is specified in this case.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.loadphar-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.loadphar-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> is thrown if an alias is passed in and the phar archive   already has an explicit alias  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.loadphar-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2222">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::loadPhar()</strong></span> example</strong></p>    <div class="example-contents"><p>     Phar::loadPhar can be used anywhere to load an external Phar archive, whereas     Phar::mapPhar should be used in a loader stub for a Phar.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">loadPhar</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/phar.phar'</span><span style="color: #007700">, </span><span style="color: #DD0000">'my.phar'</span><span style="color: #007700">);<br />    echo </span><span style="color: #9876AA">file_get_contents</span><span style="color: #007700">(</span><span style="color: #DD0000">'phar://my.phar/file.txt'</span><span style="color: #007700">);<br />} catch (</span><span style="color: #9876AA">PharException $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.loadphar-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::mapPhar()} - Reads the currently executed file (a phar) and registers its manifest</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    final public static function loadPhar(string $filename, ?string $alias = null): bool {}

/**
*<div id="phar.mapphar" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::mapPhar</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Phar::mapPhar</span> &mdash; <span class="dc-title">Reads the currently executed file (a phar) and registers its manifest</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.mapphar-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Phar::mapPhar</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$alias</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   This static method can only be used inside a Phar archive&#039;s loader stub   in order to initialize the phar when it is directly executed, or when   it is included in another script.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.mapphar-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">alias</span></dt>     <dd>      <p class="para">       The alias that can be used in <span>phar://</span> URLs to       refer to this archive, rather than its full path.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">       Unused variable, here for compatibility with PEAR&#039;s PHP_Archive.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.mapphar-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.mapphar-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> is thrown if not called directly within PHP execution,   if no __HALT_COMPILER(); token is found in the current source file, or if   the file cannot be opened for reading.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.mapphar-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2225">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::mapPhar()</strong></span> example</strong></p>    <div class="example-contents"><p>     mapPhar should be used only inside a phar&#039;s loader stub.  Use     loadPhar to load an external phar into memory.    </p></div>    <div class="example-contents"><p>     Here is a sample Phar loader stub that uses mapPhar.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">__autoload</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">)<br />{<br />    include </span><span style="color: #DD0000">'phar://me.phar/' </span><span style="color: #007700">. </span><span style="color: #9876AA">str_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">'_'</span><span style="color: #007700">, </span><span style="color: #DD0000">'/'</span><span style="color: #007700">, </span><span style="color: #9876AA">$class</span><span style="color: #007700">) . </span><span style="color: #DD0000">'.php'</span><span style="color: #007700">;<br />}<br />try {<br />    </span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">mapPhar</span><span style="color: #007700">(</span><span style="color: #DD0000">'me.phar'</span><span style="color: #007700">);<br />    include </span><span style="color: #DD0000">'phar://me.phar/startup.php'</span><span style="color: #007700">;<br />} catch (</span><span style="color: #9876AA">PharException $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">();<br />    die(</span><span style="color: #DD0000">'Cannot initialize Phar'</span><span style="color: #007700">);<br />}<br />__HALT_COMPILER();</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.mapphar-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::loadPhar()} - Loads any phar archive with an alias</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    final public static function mapPhar(?string $alias = null, int $offset = 0): bool {}

/**
*<div id="phar.running" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::running</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::running</span> &mdash; <span class="dc-title">Returns the full path on disk or full phar URL to the currently executing Phar archive</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.running-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Phar::running</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$returnPhar</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Returns the full path to the running phar archive.  This is intended for use much   like the <span>__FILE__</span> magic constant, and only has effect inside   an executing phar archive.  </p>  <p class="para">   Inside the stub of an archive, <span class="function"><strong style="color:#CC7832">Phar::running()</strong></span> returns   <span>&quot;&quot;</span>.  Simply use <strong><span>__FILE__</span></strong>   to access the current running phar inside a stub.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.running-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">returnPhar</span></dt>     <dd>      <p class="para">       If <strong><span>false</span></strong>, the full path on disk to the phar       archive is returned.  If <strong><span>true</span></strong>, a full phar URL is returned.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.running-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the filename if valid, empty string otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.running-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2246">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::running()</strong></span> example</strong></p>    <div class="example-contents"><p>     For the following example, assume the phar archive is located     at <span>/path/to/phar/my.phar</span>.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$a </span><span style="color: #007700">= </span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">running</span><span style="color: #007700">(); </span><span style="color: #FF8000">// $a is "phar:///path/to/my.phar"<br /></span><span style="color: #9876AA">$b </span><span style="color: #007700">= </span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">running</span><span style="color: #007700">(</span><span style="color: #9876AA">false</span><span style="color: #007700">); </span><span style="color: #FF8000">// $b is "/path/to/my.phar"<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div></div>
     * @return string the filename if valid, empty string otherwise.*/
    final public static function running(
        #[PhpStormStubsElementAvailable(from: '5.3', to: '5.6')] $returnPhar,
        #[PhpStormStubsElementAvailable(from: '7.0')] bool $returnPhar = true
    ): string {}

/**
*<div id="phar.mount" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::mount</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::mount</span> &mdash; <span class="dc-title">Mount an external path or file to a virtual location within the phar archive</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.mount-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Phar::mount</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$pharPath</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$externalPath</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Much like the unix file system concept of mounting external devices to paths within the   directory tree, <span class="function"><strong style="color:#CC7832">Phar::mount()</strong></span> allows referring to external files   and directories as if they were inside of an archive.  This allows powerful   abstraction such as referring to external configuration files as if they were   inside the archive.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.mount-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">pharPath</span></dt>     <dd>      <p class="para">       The internal path within the phar archive to use as the mounted path location.       This must be a relative path within the phar archive, and must not already exist.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">externalPath</span></dt>     <dd>      <p class="para">       A path or URL to an external file or directory to mount within the phar archive      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.mount-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   No return.  <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> is thrown on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.mount-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> if any problems occur mounting the path.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.mount-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2228">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::mount()</strong></span> example</strong></p>    <div class="example-contents"><p>     The following example shows accessing an external configuration file as if it were     a path within a phar archive.    </p></div>    <div class="example-contents"><p>     First, the code inside of a phar archive:    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$configuration </span><span style="color: #007700">= </span><span style="color: #9876AA">simplexml_load_string</span><span style="color: #007700">(</span><span style="color: #9876AA">file_get_contents</span><span style="color: #007700">(<br />    </span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">running</span><span style="color: #007700">(</span><span style="color: #9876AA">false</span><span style="color: #007700">) . </span><span style="color: #DD0000">'/config.xml'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     Next the external code used to mount the configuration file:    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// first set up the association between the abstract config.xml<br />// and the actual one on disk<br /></span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">mount</span><span style="color: #007700">(</span><span style="color: #DD0000">'phar://config.xml'</span><span style="color: #007700">, </span><span style="color: #DD0000">'/home/example/config.xml'</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// now run the application<br /></span><span style="color: #007700">include </span><span style="color: #DD0000">'/path/to/archive.phar'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     Another method is to put the mounting code inside the stub of the phar archive.     Here is an example of setting up a default     configuration file if no user configuration is specified:    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// first set up the association between the abstract config.xml<br />// and the actual one on disk<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">defined</span><span style="color: #007700">(</span><span style="color: #DD0000">'EXTERNAL_CONFIG'</span><span style="color: #007700">)) {<br />    </span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">mount</span><span style="color: #007700">(</span><span style="color: #DD0000">'config.xml'</span><span style="color: #007700">, </span><span style="color: #9876AA">EXTERNAL_CONFIG</span><span style="color: #007700">);<br />    if (</span><span style="color: #9876AA">file_exists</span><span style="color: #007700">(</span><span style="color: #9876AA">__DIR__ </span><span style="color: #007700">. </span><span style="color: #DD0000">'/extra_config.xml'</span><span style="color: #007700">)) {<br />        </span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">mount</span><span style="color: #007700">(</span><span style="color: #DD0000">'extra.xml'</span><span style="color: #007700">, </span><span style="color: #9876AA">__DIR__ </span><span style="color: #007700">. </span><span style="color: #DD0000">'/extra_config.xml'</span><span style="color: #007700">);<br />    }<br />} else {<br />    </span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">mount</span><span style="color: #007700">(</span><span style="color: #DD0000">'config.xml'</span><span style="color: #007700">, </span><span style="color: #DD0000">'phar://' </span><span style="color: #007700">. </span><span style="color: #9876AA">__FILE__ </span><span style="color: #007700">. </span><span style="color: #DD0000">'/default_config.xml'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">mount</span><span style="color: #007700">(</span><span style="color: #DD0000">'extra.xml'</span><span style="color: #007700">, </span><span style="color: #DD0000">'phar://' </span><span style="color: #007700">. </span><span style="color: #9876AA">__FILE__ </span><span style="color: #007700">. </span><span style="color: #DD0000">'/default_extra.xml'</span><span style="color: #007700">);<br />}<br /></span><span style="color: #FF8000">// now run the application<br /></span><span style="color: #007700">include </span><span style="color: #DD0000">'phar://' </span><span style="color: #007700">. </span><span style="color: #9876AA">__FILE__ </span><span style="color: #007700">. </span><span style="color: #DD0000">'/index.php'</span><span style="color: #007700">;<br />__HALT_COMPILER();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     ...and the code externally to load this phar archive:    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />define</span><span style="color: #007700">(</span><span style="color: #DD0000">'EXTERNAL_CONFIG'</span><span style="color: #007700">, </span><span style="color: #DD0000">'/home/example/config.xml'</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// now run the application<br /></span><span style="color: #007700">include </span><span style="color: #DD0000">'/path/to/archive.phar'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div></div>
     * @return void No return. <b>PharException</b> is thrown on failure.*/
    final public static function mount(string $pharPath, string $externalPath): void {}

/**
*<div id="phar.mungserver" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::mungServer</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::mungServer</span> &mdash; <span class="dc-title">Defines a list of up to 4 $_SERVER variables that should be modified for execution</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.mungserver-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Phar::mungServer</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$variables</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Phar::mungServer()</strong></span> should only be called within the   stub of a phar archive.  </p>  <p class="para">   Defines a list of up to 4 <var class="varname"><a href="https://www.php.net/manual/zh/reserved.variables.server.php" class="classname">$_SERVER</a></var> variables that should be   modified for execution.   Variables that can be modified to remove traces of phar execution are   <span>REQUEST_URI</span>, <span>PHP_SELF</span>,   <span>SCRIPT_NAME</span> and <span>SCRIPT_FILENAME</span>.  </p>  <p class="para">   On its own, this method does nothing.  Only when combined with   <span class="function">{@link Phar::webPhar()}</span> does it take effect, and only when the requested   file is a PHP file to be parsed.  Note that the   <span>PATH_INFO</span> and <span>PATH_TRANSLATED</span> variables   are always modified.  </p>  <p class="para">   The original values of variables that are modified are stored in the SERVER   array with <span>PHAR_</span> prepended, so for instance   <span>SCRIPT_NAME</span> would be saved as <span>PHAR_SCRIPT_NAME</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.mungserver-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">variables</span></dt>     <dd>      <p class="para">       An array of any of the strings       <span>REQUEST_URI</span>, <span>PHP_SELF</span>,       <span>SCRIPT_NAME</span> and <span>SCRIPT_FILENAME</span>.       Other values trigger an exception, and <span class="function"><strong style="color:#CC7832">Phar::mungServer()</strong></span>       is case-sensitive.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.mungserver-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   No return.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.mungserver-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.unexpectedvalueexception.php" class="classname">UnexpectedValueException</a></span> if any problems are   found with the passed in data.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.mungserver-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2231">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::mungServer()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// example stub<br /></span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">mungServer</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'REQUEST_URI'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">webPhar</span><span style="color: #007700">();<br />__HALT_COMPILER();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.mungserver-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::webPhar()} - Routes a request from a web browser to an internal file within the phar archive</span></li>    <li class="member"><span class="function">{@link Phar::setStub()} - Used to set the PHP loader or bootstrap stub of a Phar archive</span></li>   </ul>  </span> </div></div>
     * @return void No return.*/
    final public static function mungServer(array $variables): void {}

/**
*<div id="phar.unlinkarchive" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::unlinkArchive</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::unlinkArchive</span> &mdash; <span class="dc-title">Completely remove a phar archive from disk and from memory</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.unlinkarchive-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Phar::unlinkArchive</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Removes a phar archive from disk and memory.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.unlinkarchive-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">filename</span></dt>     <dd>      <p class="para">       The path on disk to the phar archive.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.unlinkarchive-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.unlinkarchive-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> is thrown if there are any open file pointers to   the phar archive, or any existing <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>, <span class="classname"><a href="https://www.php.net/manual/zh/class.phardata.php" class="classname">PharData</a></span>,   or <span class="classname"><a href="https://www.php.net/manual/zh/class.pharfileinfo.php" class="classname">PharFileInfo</a></span> objects referring to the phar archive.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.unlinkarchive-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2267">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::unlinkArchive()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// simple usage<br /></span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">unlinkArchive</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/my.phar'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// more common example:<br /></span><span style="color: #9876AA">$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'my.phar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$fp </span><span style="color: #007700">= </span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">'phar://my.phar/file.txt'</span><span style="color: #007700">, </span><span style="color: #DD0000">'r'</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// this creates 'my.phar.gz'<br /></span><span style="color: #9876AA">$gp </span><span style="color: #007700">= </span><span style="color: #9876AA">$p</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">compress</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">GZ</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// remove all references to the archive<br /></span><span style="color: #007700">unset(</span><span style="color: #9876AA">$p</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">fclose</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// now remove all traces of the archive<br /></span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">unlinkArchive</span><span style="color: #007700">(</span><span style="color: #DD0000">'my.phar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.unlinkarchive-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::delete()} - 删除 phar 档案中的一个文件</span></li>    <li class="member"><span class="function">{@link Phar::offsetUnset()} - Remove a file from a phar</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    final public static function unlinkArchive(string $filename): bool {}

/**
*<div id="phar.webphar" class="refentry"> <div class="refnamediv">  <h1 class="refname">Phar::webPhar</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Phar::webPhar</span> &mdash; <span class="dc-title">Routes a request from a web browser to an internal file within the phar archive</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phar.webphar-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Phar::webPhar</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$alias</span><span class="initializer"> = <strong><span>null</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$index</span><span class="initializer"> = <strong><span>null</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$fileNotFoundScript</span><span class="initializer"> = <strong><span>null</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$mimeTypes</span><span class="initializer"> = []</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$rewrite</span><span class="initializer"> = <strong><span>null</span></strong></span></span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Phar::webPhar()</strong></span> serves as <span class="function">{@link Phar::mapPhar()}</span> for    web-based phars.  This method parses <var class="varname"><a href="https://www.php.net/manual/zh/reserved.variables.server.php" class="classname">$_SERVER['REQUEST_URI']</a></var> and    routes a request from a web browser to an internal file within the phar archive.     It simulates a web server, routing requests to the correct file, echoing the correct    headers and parsing PHP files as needed.  Combined with <span class="function">{@link Phar::mungServer()}</span>    and <span class="function">{@link Phar::interceptFileFuncs()}</span>, any web application can be used    unmodified from a phar archive.  </p>  <p class="para">   <span class="function"><strong style="color:#CC7832">Phar::webPhar()</strong></span> should only be   called from the stub of a phar archive (see <a href="https://www.php.net/manual/zh/phar.fileformat.stub.php" class="link">here</a>   for more information on what a stub is).  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phar.webphar-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">alias</span></dt>     <dd>      <p class="para">       The alias that can be used in <span>phar://</span> URLs to       refer to this archive, rather than its full path.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">index</span></dt>     <dd>      <p class="para">       The location within the phar of the directory index.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">fileNotFoundScript</span></dt>     <dd>      <p class="para">       The location of the script to run when a file is not found.  This       script should output the proper HTTP 404 headers.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">mimeTypes</span></dt>     <dd>      <p class="para">       An array mapping additional file extensions to MIME type.       If the default mapping is sufficient, pass an empty array.       By default, these extensions are mapped to these MIME types:       <div class="example-contents">        <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$mimes </span><span style="color: #007700">= array(<br />    </span><span style="color: #DD0000">'phps' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">PHPS</span><span style="color: #007700">, </span><span style="color: #FF8000">// pass to highlight_file()<br />    </span><span style="color: #DD0000">'c' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'text/plain'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'cc' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'text/plain'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'cpp' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'text/plain'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'c++' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'text/plain'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'dtd' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'text/plain'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'h' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'text/plain'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'log' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'text/plain'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'rng' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'text/plain'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'txt' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'text/plain'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'xsd' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'text/plain'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'php' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">PHP</span><span style="color: #007700">, </span><span style="color: #FF8000">// parse as PHP<br />    </span><span style="color: #DD0000">'inc' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">PHP</span><span style="color: #007700">, </span><span style="color: #FF8000">// parse as PHP<br />    </span><span style="color: #DD0000">'avi' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'video/avi'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'bmp' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'image/bmp'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'css' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'text/css'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'gif' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'image/gif'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'htm' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'text/html'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'html' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'text/html'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'htmls' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'text/html'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'ico' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'image/x-ico'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'jpe' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'image/jpeg'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'jpg' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'image/jpeg'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'jpeg' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'image/jpeg'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'js' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'application/x-javascript'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'midi' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'audio/midi'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'mid' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'audio/midi'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'mod' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'audio/mod'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'mov' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'movie/quicktime'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'mp3' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'audio/mp3'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'mpg' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'video/mpeg'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'mpeg' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'video/mpeg'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'pdf' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'application/pdf'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'png' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'image/png'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'swf' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'application/shockwave-flash'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'tif' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'image/tiff'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'tiff' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'image/tiff'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'wav' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'audio/wav'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'xbm' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'image/xbm'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'xml' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'text/xml'</span><span style="color: #007700">,<br />);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>       </div>      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">rewrite</span></dt>     <dd>      <p class="para">       The rewrites function is passed a string as its only parameter and must return a <span class="type" style="color:#EAB766">string</span> or <strong><span>false</span></strong>.      </p>      <p class="para">       If you are using fast-cgi or cgi then the parameter passed to the function is the value of the        <var class="varname"><a href="https://www.php.net/manual/zh/reserved.variables.server.php" class="classname">$_SERVER['PATH_INFO']</a></var> variable. Otherwise, the parameter passed to the function is the value       of the <var class="varname"><a href="https://www.php.net/manual/zh/reserved.variables.server.php" class="classname">$_SERVER['REQUEST_URI']</a></var> variable.      </p>      <p class="para">       If a string is returned it is used as the internal file path. If <strong><span>false</span></strong> is returned then webPhar() will       send a HTTP 403 Denied Code.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phar.webphar-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phar.webphar-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> when unable to open the internal   file to output, or if   called from a non-stub.  If an invalid array value is passed into   <span class="parameter" style="color:#3A95FF">mimeTypes</span> or an invalid callback is passed into <span class="parameter" style="color:#3A95FF">rewrite</span>, then   <span class="classname"><a href="https://www.php.net/manual/zh/class.unexpectedvalueexception.php" class="classname">UnexpectedValueException</a></span> is thrown.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-phar.webphar-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">fileNotFoundScript</span> and <span class="parameter" style="color:#3A95FF">rewrite</span> are nullable now.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phar.webphar-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2270">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">Phar::webPhar()</strong></span> example</strong></p>    <div class="example-contents"><p>     With the example below, the created phar will display <span>Hello World</span>     if one browses to <span>/myphar.phar/index.php</span> or to     <span>/myphar.phar</span>, and will display the source of     <span>index.phps</span> if one browses to <span>/myphar.phar/index.phps</span>.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// creating the phar archive:<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$phar </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'myphar.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$phar</span><span style="color: #007700">[</span><span style="color: #DD0000">'index.php'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'&lt;?php echo "Hello World"; ?&gt;'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$phar</span><span style="color: #007700">[</span><span style="color: #DD0000">'index.phps'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'&lt;?php echo "Hello World"; ?&gt;'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$phar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setStub</span><span style="color: #007700">(</span><span style="color: #DD0000">'&lt;?php<br />Phar::webPhar();<br />__HALT_COMPILER(); ?&gt;'</span><span style="color: #007700">);<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// handle error here<br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phar.webphar-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::mungServer()} - Defines a list of up to 4 $_SERVER variables that should be modified for execution</span></li>    <li class="member"><span class="function">{@link Phar::interceptFileFuncs()} - Instructs phar to intercept fopen, file_get_contents, opendir, and all of the stat-related functions</span></li>   </ul>  </span> </div></div>
     * @return void No value is returned.*/
    final public static function webPhar(
        ?string $alias = null,
        ?string $index = null,
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: 'string')] $fileNotFoundScript = null,
        array $mimeTypes = [],
        ?callable $rewrite = null
    ): void {}

    /**
     * Returns whether current entry is a directory and not '.' or '..'
     * @link https://php.net/manual/en/recursivedirectoryiterator.haschildren.php
     * @param bool $allow_links [optional] <p>
     * </p>
     * @return bool whether the current entry is a directory, but not '.' or '..'
     */
    public function hasChildren($allow_links = false) {}

    /**
     * Returns an iterator for the current entry if it is a directory
     * @link https://php.net/manual/en/recursivedirectoryiterator.getchildren.php
     * @return mixed The filename, file information, or $this depending on the set flags.
     * See the FilesystemIterator
     * constants.
     */
    public function getChildren() {}

    /**
     * Rewinds back to the beginning
     * @link https://php.net/manual/en/filesystemiterator.rewind.php
     * @return void No value is returned.
     */
    public function rewind() {}

    /**
     * Move to the next file
     * @link https://php.net/manual/en/filesystemiterator.next.php
     * @return void No value is returned.
     */
    public function next() {}

    /**
     * Retrieve the key for the current file
     * @link https://php.net/manual/en/filesystemiterator.key.php
     * @return string the pathname or filename depending on the set flags.
     * See the FilesystemIterator constants.
     */
    public function key() {}

    /**
     * The current file
     * @link https://php.net/manual/en/filesystemiterator.current.php
     * @return mixed The filename, file information, or $this depending on the set flags.
     * See the FilesystemIterator constants.
     */
    public function current() {}

    /**
     * Check whether current DirectoryIterator position is a valid file
     * @link https://php.net/manual/en/directoryiterator.valid.php
     * @return bool <b>TRUE</b> if the position is valid, otherwise <b>FALSE</b>
     */
    public function valid() {}

    /**
     * Seek to a DirectoryIterator item
     * @link https://php.net/manual/en/directoryiterator.seek.php
     * @param int $position <p>
     * The zero-based numeric position to seek to.
     * </p>
     * @return void No value is returned.
     */
    public function seek($position) {}

    public function _bad_state_ex() {}
}

/**
*<div id="class.phardata" class="reference"> <h1 class="title">The PharData class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p>   <div class="section" id="phardata.intro">   <h2 class="title">简介</h2>   <p class="para">    The PharData class provides a high-level interface to accessing and creating    non-executable tar and zip archives.  Because these archives do not contain    a stub and cannot be executed by the phar extension, it is possible to create    and manipulate regular zip and tar files using the PharData class even if    <span>phar.readonly</span> php.ini setting is <span>1</span>.   </p>  </div>   <div class="section" id="phardata.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">PharData</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.recursivedirectoryiterator.php" class="classname">RecursiveDirectoryIterator</a>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.countable.php" class="interfacename">Countable</a>,     <a href="https://www.php.net/manual/zh/class.arrayaccess.php" class="interfacename">ArrayAccess</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::CURRENT_MODE_MASK</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::CURRENT_AS_PATHNAME</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::CURRENT_AS_FILEINFO</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::CURRENT_AS_SELF</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::KEY_MODE_MASK</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::KEY_AS_PATHNAME</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::FOLLOW_SYMLINKS</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::KEY_AS_FILENAME</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::NEW_CURRENT_AND_KEY</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::OTHER_MODE_MASK</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::SKIP_DOTS</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::UNIX_PATHS</var>}</var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = FilesystemIterator::SKIP_DOTS | FilesystemIterator::UNIX_PATHS</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$alias</span><span class="initializer"> = <strong><span>null</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$format</span><span class="initializer"> = 0</span></span><br>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.addemptydir.php" class="methodname" style="color:#CC7832">addEmptyDir</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$directory</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.addfile.php" class="methodname" style="color:#CC7832">addFile</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$localName</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.addfromstring.php" class="methodname" style="color:#CC7832">addFromString</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$localName</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$contents</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.buildfromdirectory.php" class="methodname" style="color:#CC7832">buildFromDirectory</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$directory</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$pattern</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.buildfromiterator.php" class="methodname" style="color:#CC7832">buildFromIterator</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.traversable.php" class="type Traversable" style="color:#EAB766">Traversable</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$baseDirectory</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.compress.php" class="methodname" style="color:#CC7832">compress</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$compression</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$extension</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.phardata.php" class="type PharData" style="color:#EAB766">PharData</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.compressfiles.php" class="methodname" style="color:#CC7832">compressFiles</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$compression</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.converttodata.php" class="methodname" style="color:#CC7832">convertToData</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$format</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$compression</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$extension</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.phardata.php" class="type PharData" style="color:#EAB766">PharData</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.converttoexecutable.php" class="methodname" style="color:#CC7832">convertToExecutable</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$format</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$compression</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$extension</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.phar.php" class="type Phar" style="color:#EAB766">Phar</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.copy.php" class="methodname" style="color:#CC7832">copy</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$from</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$to</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.decompress.php" class="methodname" style="color:#CC7832">decompress</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$extension</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.phardata.php" class="type PharData" style="color:#EAB766">PharData</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.decompressfiles.php" class="methodname" style="color:#CC7832">decompressFiles</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.delmetadata.php" class="methodname" style="color:#CC7832">delMetadata</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.delete.php" class="methodname" style="color:#CC7832">delete</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$localName</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.extractto.php" class="methodname" style="color:#CC7832">extractTo</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$directory</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">null</span></span> <span class="parameter" style="color:#3A95FF">$files</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$overwrite</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.iswritable.php" class="methodname" style="color:#CC7832">isWritable</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.offsetset.php" class="methodname" style="color:#CC7832">offsetSet</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$localName</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.offsetunset.php" class="methodname" style="color:#CC7832">offsetUnset</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$localName</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.setalias.php" class="methodname" style="color:#CC7832">setAlias</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$alias</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.setdefaultstub.php" class="methodname" style="color:#CC7832">setDefaultStub</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$index</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$webIndex</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.setmetadata.php" class="methodname" style="color:#CC7832">setMetadata</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$metadata</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.setsignaturealgorithm.php" class="methodname" style="color:#CC7832">setSignatureAlgorithm</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$algo</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$privateKey</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.setstub.php" class="methodname" style="color:#CC7832">setStub</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$stub</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$len</span><span class="initializer"> = -1</span></span>): <span class="type" style="color:#EAB766">bool</span></div>    <div class="destructorsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/phardata.destruct.php" class="methodname" style="color:#CC7832">__destruct</a></span>()</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveDirectoryIterator::getChildren}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursivedirectoryiterator.php" class="type RecursiveDirectoryIterator" style="color:#EAB766">RecursiveDirectoryIterator</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveDirectoryIterator::getSubPath}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveDirectoryIterator::getSubPathname}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveDirectoryIterator::hasChildren}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$allowLinks</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveDirectoryIterator::key}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveDirectoryIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveDirectoryIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::current}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span>|<span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php" class="type FilesystemIterator" style="color:#EAB766">FilesystemIterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::getFlags}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::key}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::setFlags}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::getBasename}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$suffix</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::getExtension}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::getFilename}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::isDot}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::seek}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getATime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getBasename}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$suffix</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getCTime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getExtension}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFileInfo}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFilename}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getGroup}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getInode}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getLinkTarget}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getMTime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getOwner}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPath}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathInfo}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathname}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPerms}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getRealPath}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getSize}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getType}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isDir}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isExecutable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isFile}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isLink}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isReadable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isWritable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::openFile}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = &quot;r&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$useIncludePath</span><span class="initializer"> = <strong><span>false</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$context</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="type SplFileObject" style="color:#EAB766">SplFileObject</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::setFileClass}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileObject::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::setInfoClass}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileInfo::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div>   }</div>   </div>  </div>   <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link PharData::addEmptyDir} — Add an empty directory to the tar/zip archive</li><li>{@link PharData::addFile} — Add a file from the filesystem to the tar/zip archive</li><li>{@link PharData::addFromString} — Add a file from a string to the tar/zip archive</li><li>{@link PharData::buildFromDirectory} — Construct a tar/zip archive from the files within a directory</li><li>{@link PharData::buildFromIterator} — Construct a tar or zip archive from an iterator</li><li>{@link PharData::compress} — Compresses the entire tar/zip archive using Gzip or Bzip2 compression</li><li>{@link PharData::compressFiles} — Compresses all files in the current tar/zip archive</li><li>{@link PharData::__construct} — Construct a non-executable tar or zip archive object</li><li>{@link PharData::convertToData} — Convert a phar archive to a non-executable tar or zip file</li><li>{@link PharData::convertToExecutable} — Convert a non-executable tar/zip archive to an executable phar archive</li><li>{@link PharData::copy} — Copy a file internal to the phar archive to another new file within the phar</li><li>{@link PharData::decompress} — Decompresses the entire Phar archive</li><li>{@link PharData::decompressFiles} — Decompresses all files in the current zip archive</li><li>{@link PharData::delMetadata} — Deletes the global metadata of a zip archive</li><li>{@link PharData::delete} — Delete a file within a tar/zip archive</li><li>{@link PharData::__destruct} — Destructs a non-executable tar or zip archive object</li><li>{@link PharData::extractTo} — Extract the contents of a tar/zip archive to a directory</li><li>{@link PharData::isWritable} — Returns true if the tar/zip archive can be modified</li><li>{@link PharData::offsetSet} — Set the contents of a file within the tar/zip to those of an external file or string</li><li>{@link PharData::offsetUnset} — Remove a file from a tar/zip archive</li><li>{@link PharData::setAlias} — Dummy function (Phar::setAlias is not valid for PharData)</li><li>{@link PharData::setDefaultStub} — Dummy function (Phar::setDefaultStub is not valid for PharData)</li><li>{@link PharData::setMetadata} — Sets phar archive meta-data</li><li>{@link PharData::setSignatureAlgorithm} — Set the signature algorithm for a phar and apply it</li><li>{@link PharData::setStub} — Dummy function (Phar::setStub is not valid for PharData)</li></ul></div>
*/
class PharData extends Phar
{
    /**
     * (PHP &gt;= 5.3.0, PECL phar &gt;= 2.0.0)<br/>
     * Construct a non-executable tar or zip archive object
     * @link https://php.net/manual/en/phardata.construct.php
     * @param string $filename <p>
     * Path to an existing tar/zip archive or to-be-created archive
     * </p>
     * @param int $flags [optional] <p>
     * Flags to pass to <b>Phar</b> parent class
     * <b>RecursiveDirectoryIterator</b>.
     * </p>
     * @param string $alias [optional] <p>
     * Alias with which this Phar archive should be referred to in calls to stream
     * functionality.
     * </p>
     * @param int $format [optional] <p>
     * One of the
     * file format constants
     * available within the <b>Phar</b> class.
     * </p>
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $filename,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags = FilesystemIterator::SKIP_DOTS|FilesystemIterator::UNIX_PATHS,
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $alias = null,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $format = 0
    ) {}

    /**
     * @param string $localName
     * @return bool
     */
    #[TentativeType]
    public function offsetExists($localName): bool {}

    /**
     * @param string $localName
     * @return SplFileInfo
     */
    #[TentativeType]
    public function offsetGet($localName): SplFileInfo {}

/**
*<div id="phardata.offsetset" class="refentry"> <div class="refnamediv">  <h1 class="refname">PharData::offsetSet</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">PharData::offsetSet</span> &mdash; <span class="dc-title">Set the contents of a file within the tar/zip to those of an external file or string</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phardata.offsetset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PharData::offsetSet</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$localName</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   This is an implementation of the <span class="interfacename"><a href="https://www.php.net/manual/zh/class.arrayaccess.php" class="interfacename">ArrayAccess</a></span> interface allowing   direct manipulation of the contents of a tar/zip archive using   array access brackets.  offsetSet is used for modifying an   existing file, or adding a new file to a tar/zip archive.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phardata.offsetset-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">localName</span></dt>     <dd>      <p class="para">       The filename (relative path) to modify in a tar or zip archive.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       Content of the file.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phardata.offsetset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   No return values.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phardata.offsetset-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws   <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> if there are any problems flushing   changes made to the tar/zip archive to disk.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phardata.offsetset-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2324">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">PharData::offsetSet()</strong></span> example</strong></p>    <div class="example-contents"><p>     offsetSet should not be accessed directly, but instead used     via array access with the <span>[]</span> operator.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">PharData</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/my.tar'</span><span style="color: #007700">);<br />try {<br />    </span><span style="color: #FF8000">// calls offsetSet<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'Hi there'</span><span style="color: #007700">;<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Could not modify file.txt:'</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-phardata.offsetset-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">  <span class="function">{@link PharData::addFile()}</span>, <span class="function">{@link PharData::addFromString()}</span> and <span class="function"><strong style="color:#CC7832">PharData::offsetSet()</strong></span>  save a new phar archive each time they are called. If performance is a concern,  <span class="function">{@link PharData::buildFromDirectory()}</span> or <span class="function">{@link PharData::buildFromIterator()}</span>  should be used instead.</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phardata.offsetset-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::offsetSet()} - Set the contents of an internal file to those of an external file</span></li>   </ul>  </span> </div></div>
     * @return void No return values.*/
    public function offsetSet($localName, $value): void {}

/**
*<div id="phardata.offsetunset" class="refentry"> <div class="refnamediv">  <h1 class="refname">PharData::offsetUnset</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">PharData::offsetUnset</span> &mdash; <span class="dc-title">Remove a file from a tar/zip archive</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-phardata.offsetunset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PharData::offsetUnset</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$localName</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   This is an implementation of the <span class="interfacename"><a href="https://www.php.net/manual/zh/class.arrayaccess.php" class="interfacename">ArrayAccess</a></span> interface allowing   direct manipulation of the contents of a tar/zip archive using   array access brackets.  offsetUnset is used for deleting an   existing file, and is called by the <span class="function">{@link unset()}</span>   language construct.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-phardata.offsetunset-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">localName</span></dt>     <dd>      <p class="para">       The filename (relative path) to modify in the tar/zip archive.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-phardata.offsetunset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-phardata.offsetunset-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws   <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> if there are any problems flushing   changes made to the tar/zip archive to disk.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-phardata.offsetunset-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2327">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">PharData::offsetUnset()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">PharData</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/my.zip'</span><span style="color: #007700">);<br />try {<br />    </span><span style="color: #FF8000">// deletes file.txt from my.zip by calling offsetUnset<br />    </span><span style="color: #007700">unset(</span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file.txt'</span><span style="color: #007700">]);<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Could not delete file.txt: '</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-phardata.offsetunset-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Phar::offsetUnset()} - Remove a file from a phar</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function offsetUnset($localName): void {}

    /**
     * Returns whether current entry is a directory and not '.' or '..'
     * @link https://php.net/manual/en/recursivedirectoryiterator.haschildren.php
     * @param bool $allow_links [optional] <p>
     * </p>
     * @return bool whether the current entry is a directory, but not '.' or '..'
     */
    public function hasChildren($allow_links = false) {}

    /**
     * Returns an iterator for the current entry if it is a directory
     * @link https://php.net/manual/en/recursivedirectoryiterator.getchildren.php
     * @return mixed The filename, file information, or $this depending on the set flags.
     * See the FilesystemIterator
     * constants.
     */
    public function getChildren() {}

    /**
     * Rewinds back to the beginning
     * @link https://php.net/manual/en/filesystemiterator.rewind.php
     * @return void No value is returned.
     */
    public function rewind() {}

    /**
     * Move to the next file
     * @link https://php.net/manual/en/filesystemiterator.next.php
     * @return void No value is returned.
     */
    public function next() {}

    /**
     * Retrieve the key for the current file
     * @link https://php.net/manual/en/filesystemiterator.key.php
     * @return string the pathname or filename depending on the set flags.
     * See the FilesystemIterator constants.
     */
    public function key() {}

    /**
     * The current file
     * @link https://php.net/manual/en/filesystemiterator.current.php
     * @return mixed The filename, file information, or $this depending on the set flags.
     * See the FilesystemIterator constants.
     */
    public function current() {}

    /**
     * Check whether current DirectoryIterator position is a valid file
     * @link https://php.net/manual/en/directoryiterator.valid.php
     * @return bool <b>TRUE</b> if the position is valid, otherwise <b>FALSE</b>
     */
    public function valid() {}

    /**
     * Seek to a DirectoryIterator item
     * @link https://php.net/manual/en/directoryiterator.seek.php
     * @param int $position <p>
     * The zero-based numeric position to seek to.
     * </p>
     * @return void No value is returned.
     */
    public function seek($position) {}
}

/**
*<div id="class.pharfileinfo" class="reference"> <h1 class="title">The PharFileInfo class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p>   <div class="section" id="pharfileinfo.intro">   <h2 class="title">简介</h2>   <p class="para">    The PharFileInfo class provides a high-level interface to the contents    and attributes of a single file within a phar archive.   </p>  </div>    <div class="section" id="pharfileinfo.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">PharFileInfo</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="classname">SplFileInfo</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pharfileinfo.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pharfileinfo.chmod.php" class="methodname" style="color:#CC7832">chmod</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$perms</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pharfileinfo.compress.php" class="methodname" style="color:#CC7832">compress</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$compression</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pharfileinfo.decompress.php" class="methodname" style="color:#CC7832">decompress</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pharfileinfo.delmetadata.php" class="methodname" style="color:#CC7832">delMetadata</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pharfileinfo.getcrc32.php" class="methodname" style="color:#CC7832">getCRC32</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pharfileinfo.getcompressedsize.php" class="methodname" style="color:#CC7832">getCompressedSize</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pharfileinfo.getcontent.php" class="methodname" style="color:#CC7832">getContent</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pharfileinfo.getmetadata.php" class="methodname" style="color:#CC7832">getMetadata</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$unserializeOptions</span><span class="initializer"> = []</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pharfileinfo.getpharflags.php" class="methodname" style="color:#CC7832">getPharFlags</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pharfileinfo.hasmetadata.php" class="methodname" style="color:#CC7832">hasMetadata</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pharfileinfo.iscrcchecked.php" class="methodname" style="color:#CC7832">isCRCChecked</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pharfileinfo.iscompressed.php" class="methodname" style="color:#CC7832">isCompressed</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$compression</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pharfileinfo.setmetadata.php" class="methodname" style="color:#CC7832">setMetadata</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$metadata</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="destructorsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/pharfileinfo.destruct.php" class="methodname" style="color:#CC7832">__destruct</a></span>()</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getATime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getBasename}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$suffix</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getCTime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getExtension}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFileInfo}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFilename}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getGroup}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getInode}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getLinkTarget}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getMTime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getOwner}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPath}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathInfo}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathname}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPerms}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getRealPath}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getSize}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getType}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isDir}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isExecutable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isFile}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isLink}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isReadable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isWritable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::openFile}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = &quot;r&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$useIncludePath</span><span class="initializer"> = <strong><span>false</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$context</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="type SplFileObject" style="color:#EAB766">SplFileObject</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::setFileClass}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileObject::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::setInfoClass}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileInfo::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div>   }</div>   </div>  </div>   <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link PharFileInfo::chmod} — Sets file-specific permission bits</li><li>{@link PharFileInfo::compress} — Compresses the current Phar entry with either zlib or bzip2 compression</li><li>{@link PharFileInfo::__construct} — Construct a Phar entry object</li><li>{@link PharFileInfo::decompress} — Decompresses the current Phar entry within the phar</li><li>{@link PharFileInfo::delMetadata} — Deletes the metadata of the entry</li><li>{@link PharFileInfo::__destruct} — Destructs a Phar entry object</li><li>{@link PharFileInfo::getCRC32} — Returns CRC32 code or throws an exception if CRC has not been verified</li><li>{@link PharFileInfo::getCompressedSize} — Returns the actual size of the file (with compression) inside the Phar archive</li><li>{@link PharFileInfo::getContent} — Get the complete file contents of the entry</li><li>{@link PharFileInfo::getMetadata} — Returns file-specific meta-data saved with a file</li><li>{@link PharFileInfo::getPharFlags} — Returns the Phar file entry flags</li><li>{@link PharFileInfo::hasMetadata} — Returns the metadata of the entry</li><li>{@link PharFileInfo::isCRCChecked} — Returns whether file entry has had its CRC verified</li><li>{@link PharFileInfo::isCompressed} — Returns whether the entry is compressed</li><li>{@link PharFileInfo::setMetadata} — Sets file-specific meta-data saved with a file</li></ul></div>
*/
class PharFileInfo extends SplFileInfo
{
    /**
     * (PHP &gt;= 5.3.0, PECL phar &gt;= 1.0.0)<br/>
     * Construct a Phar entry object
     * @link https://php.net/manual/en/pharfileinfo.construct.php
     * @param string $filename <p>
     * The full url to retrieve a file. If you wish to retrieve the information
     * for the file my/file.php from the phar boo.phar,
     * the entry should be phar://boo.phar/my/file.php.
     * </p>
     */
    public function __construct(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $filename) {}

    public function __destruct() {}

/**
*<div id="pharfileinfo.chmod" class="refentry"> <div class="refnamediv">  <h1 class="refname">PharFileInfo::chmod</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">PharFileInfo::chmod</span> &mdash; <span class="dc-title">Sets file-specific permission bits</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pharfileinfo.chmod-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PharFileInfo::chmod</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$perms</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">PharFileInfo::chmod()</strong></span> allows setting of the executable   file permissions bit, as well as read-only bits.  Writeable bits are   ignored, and set at runtime based on the   <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a> INI variable.   As with all functionality that modifies the contents of   a phar, the <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a> INI variable   must be off in order to succeed if the file is within a <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>   archive.  Files within <span class="classname"><a href="https://www.php.net/manual/zh/class.phardata.php" class="classname">PharData</a></span> archives do not have   this restriction.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pharfileinfo.chmod-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">perms</span></dt>     <dd>      <p class="para">       permissions (see <span class="function">{@link chmod()}</span>)      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pharfileinfo.chmod-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pharfileinfo.chmod-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2333">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">PharFileInfo::chmod()</strong></span> example</strong></p>    <div class="example-contents"><p>    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// make sure it doesn't exist<br /></span><span style="color: #007700">@</span><span style="color: #9876AA">unlink</span><span style="color: #007700">(</span><span style="color: #DD0000">'brandnewphar.phar'</span><span style="color: #007700">);<br />try {<br />    </span><span style="color: #9876AA">$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'brandnewphar.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'brandnewphar.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file.sh'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'#!/usr/local/lib/php<br />    &lt;?php echo "hi"; ?&gt;'</span><span style="color: #007700">;<br />    </span><span style="color: #FF8000">// set executable bit<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file.sh'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">chmod</span><span style="color: #007700">(</span><span style="color: #9876AA">0555</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file.sh'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">isExecutable</span><span style="color: #007700">());<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Could not create/modify phar: '</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br></span></div>    </div>   </div>  </span> </div></div>
     * @return void No value is returned.*/
    public function chmod(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $perms): void {}

/**
*<div id="pharfileinfo.compress" class="refentry"> <div class="refnamediv">  <h1 class="refname">PharFileInfo::compress</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">PharFileInfo::compress</span> &mdash; <span class="dc-title">Compresses the current Phar entry with either zlib or bzip2 compression</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pharfileinfo.compress-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PharFileInfo::compress</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$compression</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   This method compresses the file inside the Phar archive using either bzip2 compression   or zlib compression.   The <a href="https://www.php.net/manual/zh/ref.bzip2.php" class="link">bzip2</a> or <a href="https://www.php.net/manual/zh/ref.zlib.php" class="link">zlib</a>   extension must be enabled to take   advantage of this feature.  In addition, if the file is already compressed,   the respective extension must be enabled in order   to decompress the file.  As with all functionality that modifies the contents of   a phar, the <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a> INI variable   must be off in order to succeed if the file is within a <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>   archive.  Files within <span class="classname"><a href="https://www.php.net/manual/zh/class.phardata.php" class="classname">PharData</a></span> archives do not have   this restriction.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pharfileinfo.compress-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">compression</span></dt>     <dd>      <p class="para">       Compression must be <strong><span>Phar::GZ</span></strong> or <strong><span>Phar::BZ2</span></strong>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pharfileinfo.compress-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pharfileinfo.compress-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span> if   the <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a>   INI variable is on, or if the <a href="https://www.php.net/manual/zh/ref.bzip2.php" class="link">bzip2</a>/<a href="https://www.php.net/manual/zh/ref.zlib.php" class="link">zlib</a>   extension is not available.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pharfileinfo.compress-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2336">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">PharFileInfo::compress()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/my.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'my.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$file </span><span style="color: #007700">= </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">];<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">BZ2</span><span style="color: #007700">));<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">compress</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">BZ2</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">BZ2</span><span style="color: #007700">));<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Create/modify operations on my.phar failed: '</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>bool(true)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pharfileinfo.compress-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PharFileInfo::getCompressedSize()} - Returns the actual size of the file (with compression) inside the Phar archive</span></li>    <li class="member"><span class="function">{@link PharFileInfo::isCompressed()} - Returns whether the entry is compressed</span></li>    <li class="member"><span class="function">{@link PharFileInfo::decompress()} - Decompresses the current Phar entry within the phar</span></li>    <li class="member"><span class="function">{@link Phar::canCompress()} - Returns whether phar extension supports compression using either zlib or bzip2</span></li>    <li class="member"><span class="function">{@link Phar::isCompressed()} - Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)</span></li>    <li class="member"><span class="function">{@link Phar::compressFiles()} - Compresses all files in the current Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::decompressFiles()} - Decompresses all files in the current Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::compress()} - Compresses the entire Phar archive using Gzip or Bzip2 compression</span></li>    <li class="member"><span class="function">{@link Phar::decompress()} - Decompresses the entire Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::getSupportedCompression()} - Return array of supported compression algorithms</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function compress(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $compression) {}

/**
*<div id="pharfileinfo.decompress" class="refentry"> <div class="refnamediv">  <h1 class="refname">PharFileInfo::decompress</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">PharFileInfo::decompress</span> &mdash; <span class="dc-title">Decompresses the current Phar entry within the phar</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pharfileinfo.decompress-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PharFileInfo::decompress</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   This method decompresses the file inside the Phar archive.   Depending on how the file is compressed, the <a href="https://www.php.net/manual/zh/ref.bzip2.php" class="link">bzip2</a>   or <a href="https://www.php.net/manual/zh/ref.zlib.php" class="link">zlib</a> extensions must be enabled to take   advantage of this feature.  As with all functionality that modifies the contents of   a phar, the <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a> INI variable   must be off in order to succeed if the file is within a <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>   archive.  Files within <span class="classname"><a href="https://www.php.net/manual/zh/class.phardata.php" class="classname">PharData</a></span> archives do not have   this restriction.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pharfileinfo.decompress-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pharfileinfo.decompress-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pharfileinfo.decompress-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span> if   the <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a>   INI variable is on, or if the <a href="https://www.php.net/manual/zh/ref.bzip2.php" class="link">bzip2</a>/<a href="https://www.php.net/manual/zh/ref.zlib.php" class="link">zlib</a>   extension is not available.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pharfileinfo.decompress-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2342">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">PharFileInfo::decompress()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/my.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'my.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$file </span><span style="color: #007700">= </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">];<br />    </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">compress</span><span style="color: #007700">(</span><span style="color: #9876AA">Phar</span><span style="color: #007700">::</span><span style="color: #9876AA">GZ</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">decompress</span><span style="color: #007700">();<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">());<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Create/modify failed for my.phar: '</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(4096)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pharfileinfo.decompress-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PharFileInfo::getCompressedSize()} - Returns the actual size of the file (with compression) inside the Phar archive</span></li>    <li class="member"><span class="function">{@link PharFileInfo::isCompressed()} - Returns whether the entry is compressed</span></li>    <li class="member"><span class="function">{@link PharFileInfo::compress()} - Compresses the current Phar entry with either zlib or bzip2 compression</span></li>    <li class="member"><span class="function">{@link Phar::canCompress()} - Returns whether phar extension supports compression using either zlib or bzip2</span></li>    <li class="member"><span class="function">{@link Phar::isCompressed()} - Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)</span></li>    <li class="member"><span class="function">{@link Phar::compressFiles()} - Compresses all files in the current Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::decompressFiles()} - Decompresses all files in the current Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::compress()} - Compresses the entire Phar archive using Gzip or Bzip2 compression</span></li>    <li class="member"><span class="function">{@link Phar::decompress()} - Decompresses the entire Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::getSupportedCompression()} - Return array of supported compression algorithms</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function decompress() {}

/**
*<div id="pharfileinfo.delmetadata" class="refentry"> <div class="refnamediv">  <h1 class="refname">PharFileInfo::delMetadata</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.2.0)</p><p class="refpurpose"><span class="refname">PharFileInfo::delMetadata</span> &mdash; <span class="dc-title">Deletes the metadata of the entry</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pharfileinfo.delmetadata-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PharFileInfo::delMetadata</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Deletes the metadata of the entry, if any.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pharfileinfo.delmetadata-parameters">  <h3 class="title">参数</h3>  <span>   No parameters.  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pharfileinfo.delmetadata-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if successful, <strong><span>false</span></strong> if the entry had no metadata.   As with all functionality that modifies the contents of   a phar, the <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a> INI variable   must be off in order to succeed if the file is within a <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>   archive.  Files within <span class="classname"><a href="https://www.php.net/manual/zh/class.phardata.php" class="classname">PharData</a></span> archives do not have   this restriction.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pharfileinfo.delmetadata-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.pharexception.php" class="classname">PharException</a></span> if errors occurred while flushing   changes to disk, and <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span> if   write access is disabled.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pharfileinfo.delmetadata-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2345">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">PharFileInfo::delMetaData()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$a </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'myphar.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'hi'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'hi'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">delMetadata</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'hi'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">setMetadata</span><span style="color: #007700">(</span><span style="color: #DD0000">'there'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'hi'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">delMetadata</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'hi'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">delMetadata</span><span style="color: #007700">());<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// handle errors<br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>bool(true)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pharfileinfo.delmetadata-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PharFileInfo::setMetadata()} - Sets file-specific meta-data saved with a file</span></li>    <li class="member"><span class="function">{@link PharFileInfo::hasMetadata()} - Returns the metadata of the entry</span></li>    <li class="member"><span class="function">{@link PharFileInfo::getMetadata()} - Returns file-specific meta-data saved with a file</span></li>    <li class="member"><span class="function">{@link Phar::setMetadata()} - Sets phar archive meta-data</span></li>    <li class="member"><span class="function">{@link Phar::hasMetadata()} - Returns whether phar has global meta-data</span></li>    <li class="member"><span class="function">{@link Phar::getMetadata()} - Returns phar archive meta-data</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> if successful, <b>FALSE</b> if the entry had no metadata.*/
    public function delMetadata() {}

/**
*<div id="pharfileinfo.getcompressedsize" class="refentry"> <div class="refnamediv">  <h1 class="refname">PharFileInfo::getCompressedSize</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">PharFileInfo::getCompressedSize</span> &mdash; <span class="dc-title">Returns the actual size of the file (with compression) inside the Phar archive</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pharfileinfo.getcompressedsize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PharFileInfo::getCompressedSize</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   This returns the size of the file within the Phar archive.  Uncompressed files will return   the same value for getCompressedSize as they will with <span class="function">{@link filesize()}</span>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pharfileinfo.getcompressedsize-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pharfileinfo.getcompressedsize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The size in bytes of the file within the Phar archive on disk.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pharfileinfo.getcompressedsize-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2351">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">PharFileInfo::getCompressedSize()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/my.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'my.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$file </span><span style="color: #007700">= </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">];<br />    echo </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getCompressedSize</span><span style="color: #007700">();<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Write operations failed on my.phar: '</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>2<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pharfileinfo.getcompressedsize-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PharFileInfo::isCompressed()} - Returns whether the entry is compressed</span></li>    <li class="member"><span class="function">{@link PharFileInfo::decompress()} - Decompresses the current Phar entry within the phar</span></li>    <li class="member"><span class="function">{@link PharFileInfo::compress()} - Compresses the current Phar entry with either zlib or bzip2 compression</span></li>    <li class="member"><span class="function">{@link Phar::canCompress()} - Returns whether phar extension supports compression using either zlib or bzip2</span></li>    <li class="member"><span class="function">{@link Phar::isCompressed()} - Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)</span></li>    <li class="member"><span class="function">{@link Phar::compress()} - Compresses the entire Phar archive using Gzip or Bzip2 compression</span></li>    <li class="member"><span class="function">{@link Phar::decompress()} - Decompresses the entire Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::getSupportedCompression()} - Return array of supported compression algorithms</span></li>    <li class="member"><span class="function">{@link Phar::decompressFiles()} - Decompresses all files in the current Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::compressFiles()} - Compresses all files in the current Phar archive</span></li>   </ul>  </span> </div></div>
     * @return int<0, max> The size in bytes of the file within the Phar archive on disk.*/
    public function getCompressedSize(): int {}

/**
*<div id="pharfileinfo.getcrc32" class="refentry"> <div class="refnamediv">  <h1 class="refname">PharFileInfo::getCRC32</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">PharFileInfo::getCRC32</span> &mdash; <span class="dc-title">Returns CRC32 code or throws an exception if CRC has not been verified</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pharfileinfo.getcrc32-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PharFileInfo::getCRC32</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   This returns the <span class="function">{@link crc32()}</span> checksum of the file   within the Phar archive.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pharfileinfo.getcrc32-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pharfileinfo.getcrc32-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The <span class="function">{@link crc32()}</span> checksum of the file within the Phar archive.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-pharfileinfo.getcrc32-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span> if the file has not   yet had its CRC32 verified.  This should be impossible with normal use, as   the CRC is verified upon opening the file for reading or writing.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pharfileinfo.getcrc32-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2348">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">PharFileInfo::getCRC32()</strong></span> example</strong></p>    <div class="example-contents"><p>    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/my.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'my.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$file </span><span style="color: #007700">= </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">];<br />    echo </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getCRC32</span><span style="color: #007700">();<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Write operations on my.phar.phar failed: '</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>3633523372<br></span></div>    </div>   </div>  </span> </div></div>
     * @return int The <b>crc32</b> checksum of the file within the Phar archive.*/
    public function getCRC32(): int {}

/**
*<div id="pharfileinfo.getcontent" class="refentry"> <div class="refnamediv">  <h1 class="refname">PharFileInfo::getContent</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">PharFileInfo::getContent</span> &mdash; <span class="dc-title">Get the complete file contents of the entry</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pharfileinfo.getcontent-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PharFileInfo::getContent</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   This function behaves like <span class="function">{@link file_get_contents()}</span> but for   Phar.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pharfileinfo.getcontent-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pharfileinfo.getcontent-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the file contents.  </p> </div></div>
*/
    public function getContent(): string {}

/**
*<div id="pharfileinfo.getmetadata" class="refentry"> <div class="refnamediv">  <h1 class="refname">PharFileInfo::getMetadata</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">PharFileInfo::getMetadata</span> &mdash; <span class="dc-title">Returns file-specific meta-data saved with a file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pharfileinfo.getmetadata-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PharFileInfo::getMetadata</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$unserializeOptions</span><span class="initializer"> = []</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Return meta-data that was saved in the Phar archive&#039;s manifest for this file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pharfileinfo.getmetadata-parameters">  <h3 class="title">参数</h3>  <span>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pharfileinfo.getmetadata-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   any PHP variable that can be serialized and is stored as meta-data for the file,   or <strong><span>null</span></strong> if no meta-data is stored.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-pharfileinfo.getmetadata-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       The parameter <span class="parameter" style="color:#3A95FF">unserializeOptions</span> has been added.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pharfileinfo.getmetadata-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2354">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">PharFileInfo::getMetadata()</strong></span> example</strong></p>    <div class="example-contents"><p>    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// make sure it doesn't exist<br /></span><span style="color: #007700">@</span><span style="color: #9876AA">unlink</span><span style="color: #007700">(</span><span style="color: #DD0000">'brandnewphar.phar'</span><span style="color: #007700">);<br />try {<br />    </span><span style="color: #9876AA">$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">) . </span><span style="color: #DD0000">'/brandnewphar.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'brandnewphar.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hello'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file.txt'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">setMetadata</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'user' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'bill'</span><span style="color: #007700">, </span><span style="color: #DD0000">'mime-type' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'text/plain'</span><span style="color: #007700">));<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file.txt'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">getMetadata</span><span style="color: #007700">());<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Could not create/modify brandnewphar.phar: '</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(2) {<br>  [&quot;user&quot;]=&gt;<br>  string(4) &quot;bill&quot;<br>  [&quot;mime-type&quot;]=&gt;<br>  string(10) &quot;text/plain&quot;<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pharfileinfo.getmetadata-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PharFileInfo::setMetadata()} - Sets file-specific meta-data saved with a file</span></li>    <li class="member"><span class="function">{@link PharFileInfo::hasMetadata()} - Returns the metadata of the entry</span></li>    <li class="member"><span class="function">{@link PharFileInfo::delMetadata()} - Deletes the metadata of the entry</span></li>    <li class="member"><span class="function">{@link Phar::setMetadata()} - Sets phar archive meta-data</span></li>    <li class="member"><span class="function">{@link Phar::hasMetadata()} - Returns whether phar has global meta-data</span></li>    <li class="member"><span class="function">{@link Phar::getMetadata()} - Returns phar archive meta-data</span></li>   </ul>  </span> </div></div>
     * @return mixed any PHP variable that can be serialized and is stored as meta-data for the file,*/
    public function getMetadata(#[PhpStormStubsElementAvailable(from: '8.0')] array $unserializeOptions = []): mixed {}

/**
*<div id="pharfileinfo.getpharflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">PharFileInfo::getPharFlags</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">PharFileInfo::getPharFlags</span> &mdash; <span class="dc-title">Returns the Phar file entry flags</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pharfileinfo.getpharflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PharFileInfo::getPharFlags</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   This returns the flags set in the manifest for a Phar.  This will always   return <span>0</span> in the current implementation.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pharfileinfo.getpharflags-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pharfileinfo.getpharflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The Phar flags (always <span>0</span> in the current implementation)  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pharfileinfo.getpharflags-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2357">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">PharFileInfo::getPharFlags()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/my.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'my.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$file </span><span style="color: #007700">= </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">];<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getPharFlags</span><span style="color: #007700">());<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Could not create/modify my.phar: '</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(0)<br></span></div>    </div>   </div>  </span> </div></div>
     * @return int The Phar flags (always 0 in the current implementation)*/
    public function getPharFlags(): int {}

/**
*<div id="pharfileinfo.hasmetadata" class="refentry"> <div class="refnamediv">  <h1 class="refname">PharFileInfo::hasMetadata</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.2.0)</p><p class="refpurpose"><span class="refname">PharFileInfo::hasMetadata</span> &mdash; <span class="dc-title">Returns the metadata of the entry</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pharfileinfo.hasmetadata-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PharFileInfo::hasMetadata</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Returns the metadata of a file within a phar archive.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pharfileinfo.hasmetadata-parameters">  <h3 class="title">参数</h3>  <span>   No parameters.  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pharfileinfo.hasmetadata-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>false</span></strong> if no metadata is set or is <strong><span>null</span></strong>, <strong><span>true</span></strong> if metadata is not <strong><span>null</span></strong>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pharfileinfo.hasmetadata-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PharFileInfo::setMetadata()} - Sets file-specific meta-data saved with a file</span></li>    <li class="member"><span class="function">{@link PharFileInfo::getMetadata()} - Returns file-specific meta-data saved with a file</span></li>    <li class="member"><span class="function">{@link PharFileInfo::delMetadata()} - Deletes the metadata of the entry</span></li>    <li class="member"><span class="function">{@link Phar::setMetadata()} - Sets phar archive meta-data</span></li>    <li class="member"><span class="function">{@link Phar::hasMetadata()} - Returns whether phar has global meta-data</span></li>    <li class="member"><span class="function">{@link Phar::getMetadata()} - Returns phar archive meta-data</span></li>   </ul>  </span> </div></div>
     * @return bool <b>FALSE</b> if no metadata is set or is <b>NULL</b>, <b>TRUE</b> if metadata is not <b>NULL</b>*/
    public function hasMetadata(): bool {}

/**
*<div id="pharfileinfo.iscompressed" class="refentry"> <div class="refnamediv">  <h1 class="refname">PharFileInfo::isCompressed</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">PharFileInfo::isCompressed</span> &mdash; <span class="dc-title">Returns whether the entry is compressed</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pharfileinfo.iscompressed-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PharFileInfo::isCompressed</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$compression</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   This returns whether a file is compressed within a Phar archive   with either Gzip or Bzip2 compression.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pharfileinfo.iscompressed-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">compression</span></dt>     <dd>      <p class="para">       One of <strong><span>Phar::GZ</span></strong> or <strong><span>Phar::BZ2</span></strong>,       defaults to any compression.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pharfileinfo.iscompressed-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the file is compressed within the Phar archive, <strong><span>false</span></strong> if not.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-pharfileinfo.iscompressed-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">compression</span> is now nullable.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pharfileinfo.iscompressed-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2363">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">PharFileInfo::isCompressed()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/my.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'my.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile2.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile2.txt'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">setCompressedGZ</span><span style="color: #007700">();<br />    </span><span style="color: #9876AA">$file </span><span style="color: #007700">= </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">];<br />    </span><span style="color: #9876AA">$file2 </span><span style="color: #007700">= </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile2.txt'</span><span style="color: #007700">];<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file2</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCompressed</span><span style="color: #007700">());<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Create/modify on phar my.phar failed: '</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>bool(true)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pharfileinfo.iscompressed-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PharFileInfo::getCompressedSize()} - Returns the actual size of the file (with compression) inside the Phar archive</span></li>    <li class="member"><span class="function">{@link PharFileInfo::decompress()} - Decompresses the current Phar entry within the phar</span></li>    <li class="member"><span class="function">{@link PharFileInfo::compress()} - Compresses the current Phar entry with either zlib or bzip2 compression</span></li>    <li class="member"><span class="function">{@link Phar::decompress()} - Decompresses the entire Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::compress()} - Compresses the entire Phar archive using Gzip or Bzip2 compression</span></li>    <li class="member"><span class="function">{@link Phar::canCompress()} - Returns whether phar extension supports compression using either zlib or bzip2</span></li>    <li class="member"><span class="function">{@link Phar::isCompressed()} - Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)</span></li>    <li class="member"><span class="function">{@link Phar::getSupportedCompression()} - Return array of supported compression algorithms</span></li>    <li class="member"><span class="function">{@link Phar::decompressFiles()} - Decompresses all files in the current Phar archive</span></li>    <li class="member"><span class="function">{@link Phar::compressFiles()} - Compresses all files in the current Phar archive</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> if the file is compressed within the Phar archive, <b>FALSE</b> if not.*/
    public function isCompressed(#[LanguageLevelTypeAware(['8.0' => 'int|null'], default: '')] $compression = null): bool {}

/**
*<div id="pharfileinfo.iscrcchecked" class="refentry"> <div class="refnamediv">  <h1 class="refname">PharFileInfo::isCRCChecked</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">PharFileInfo::isCRCChecked</span> &mdash; <span class="dc-title">Returns whether file entry has had its CRC verified</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pharfileinfo.iscrcchecked-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PharFileInfo::isCRCChecked</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   This returns whether a file within a Phar archive   has had its CRC verified.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pharfileinfo.iscrcchecked-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pharfileinfo.iscrcchecked-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the file has had its CRC verified, <strong><span>false</span></strong> if not.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pharfileinfo.iscrcchecked-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2360">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">PharFileInfo::isCRCChecked()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/my.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'my.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hi'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$file </span><span style="color: #007700">= </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'myfile.txt'</span><span style="color: #007700">];<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCRCChecked</span><span style="color: #007700">());<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Create/modify operations failed on my.phar: '</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br></span></div>    </div>   </div>  </span> </div></div>
     * @return bool <b>TRUE</b> if the file has had its CRC verified, <b>FALSE</b> if not.*/
    public function isCRCChecked(): bool {}

/**
*<div id="pharfileinfo.setmetadata" class="refentry"> <div class="refnamediv">  <h1 class="refname">PharFileInfo::setMetadata</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8, PECL phar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">PharFileInfo::setMetadata</span> &mdash; <span class="dc-title">Sets file-specific meta-data saved with a file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-pharfileinfo.setmetadata-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>PharFileInfo::setMetadata</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$metadata</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">PharFileInfo::setMetadata()</strong></span> should only be used to store customized data in a file   that cannot be represented with existing information stored with a file.   Meta-data can significantly slow down the performance of loading a phar   archive if the data is large, or if there are many files containing meta-data.   It is important to note that file permissions are natively supported inside a   phar; it is possible to set them with the   <span class="function">{@link PharFileInfo::chmod()}</span> method.  As with all functionality that modifies the contents of   a phar, the <a href="https://www.php.net/manual/zh/phar.configuration.php#ini.phar.readonly" class="link">phar.readonly</a> INI variable   must be off in order to succeed if the file is within a <span class="classname"><a href="https://www.php.net/manual/zh/class.phar.php" class="classname">Phar</a></span>   archive.  Files within <span class="classname"><a href="https://www.php.net/manual/zh/class.phardata.php" class="classname">PharData</a></span> archives do not have   this restriction.  </p>  <p class="para">   Some possible uses for meta-data include passing a user/group that should be set   when a file is extracted from the phar to disk.  Other uses could include   explicitly specifying a MIME type to return.  However, any useful data that   describes a file, but should not be contained inside of it may be stored.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-pharfileinfo.setmetadata-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">metadata</span></dt>     <dd>      <p class="para">       Any PHP variable containing information to store alongside a file      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-pharfileinfo.setmetadata-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-pharfileinfo.setmetadata-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2366">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">PharFileInfo::setMetadata()</strong></span> example</strong></p>    <div class="example-contents"><p>    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// make sure it doesn't exist<br /></span><span style="color: #007700">@</span><span style="color: #9876AA">unlink</span><span style="color: #007700">(</span><span style="color: #DD0000">'brandnewphar.phar'</span><span style="color: #007700">);<br />try {<br />    </span><span style="color: #9876AA">$p </span><span style="color: #007700">= new </span><span style="color: #9876AA">Phar</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">) . </span><span style="color: #DD0000">'/brandnewphar.phar'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #DD0000">'brandnewphar.phar'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file.txt'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'hello'</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file.txt'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">setMetadata</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'user' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'bill'</span><span style="color: #007700">, </span><span style="color: #DD0000">'mime-type' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'text/plain'</span><span style="color: #007700">));<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$p</span><span style="color: #007700">[</span><span style="color: #DD0000">'file.txt'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">getMetaData</span><span style="color: #007700">());<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Could not create/modify phar: '</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(2) {<br>  [&quot;user&quot;]=&gt;<br>  string(4) &quot;bill&quot;<br>  [&quot;mime-type&quot;]=&gt;<br>  string(10) &quot;text/plain&quot;<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-pharfileinfo.setmetadata-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link PharFileInfo::hasMetadata()} - Returns the metadata of the entry</span></li>    <li class="member"><span class="function">{@link PharFileInfo::getMetadata()} - Returns file-specific meta-data saved with a file</span></li>    <li class="member"><span class="function">{@link PharFileInfo::delMetadata()} - Deletes the metadata of the entry</span></li>    <li class="member"><span class="function">{@link Phar::setMetadata()} - Sets phar archive meta-data</span></li>    <li class="member"><span class="function">{@link Phar::hasMetadata()} - Returns whether phar has global meta-data</span></li>    <li class="member"><span class="function">{@link Phar::getMetadata()} - Returns phar archive meta-data</span></li>   </ul>  </span> </div></div>
     * @return void No value is returned.*/
    public function setMetadata(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $metadata): void {}
}
// End of Phar v.2.0.1
