<?php

use JetBrains\PhpStorm\ArrayShape;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\TentativeType;
use JetBrains\PhpStorm\Pure;

/**
*<div id="class.curlfile" class="reference"> <h1 class="title">CURLFile 类</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p>  <div class="section" id="curlfile.intro">   <h2 class="title">简介</h2>   <p class="para">    此类或 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlstringfile.php" class="classname">CURLStringFile</a></span> 应该与    <strong><span>CURLOPT_POSTFIELDS</span></strong> 一同使用用于上传文件。   </p>   <p class="para">    不允许反序列化 <span class="classname"><strong class="classname">CURLFile</strong></span> 实例。自 PHP 7.4.0 起，首先禁止序列化。   </p>  </div>  <div class="section" id="curlfile.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">CURLFile</strong></strong>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.curlfile.php#curlfile.props.name">$<var class="varname">name</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.curlfile.php#curlfile.props.mime">$<var class="varname">mime</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.curlfile.php#curlfile.props.postname">$<var class="varname">postname</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/curlfile.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$mime_type</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$posted_filename</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/curlfile.getfilename.php" class="methodname" style="color:#CC7832">getFilename</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/curlfile.getmimetype.php" class="methodname" style="color:#CC7832">getMimeType</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/curlfile.getpostfilename.php" class="methodname" style="color:#CC7832">getPostFilename</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/curlfile.setmimetype.php" class="methodname" style="color:#CC7832">setMimeType</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$mime_type</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/curlfile.setpostfilename.php" class="methodname" style="color:#CC7832">setPostFilename</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$posted_filename</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>    <div class="section" id="curlfile.props">   <h2 class="title">属性</h2>   <dl>         <dt id="curlfile.props.name"><var class="varname">name</var></dt>     <dd>      <p class="para">待上传的文件名。</p>     </dd>             <dt id="curlfile.props.mime"><var class="varname">mime</var></dt>     <dd>      <p class="para">文件的 MIME 类型（默认是 <span>application/octet-stream</span>）。</p>     </dd>             <dt id="curlfile.props.postname"><var class="varname">postname</var></dt>     <dd>      <p class="para">上传数据中的文件名（默认为 <var class="varname">name</var> 属性）。</p>     </dd>       </dl>  </div>  <div class="section" id="curlfile.seealso">   <h2 class="title">参见</h2>   <p class="para">    <ul class="simplelist">     <li class="member">      <span class="function">{@link curl_setopt()}</span>     </li>     <li class="member"><span class="classname"><a href="https://www.php.net/manual/zh/class.curlstringfile.php" class="classname">CURLStringFile</a></span></li>    </ul>   </p>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link CURLFile::__construct} — 创建 CURLFile 对象</li><li>{@link CURLFile::getFilename} — 获取文件名</li><li>{@link CURLFile::getMimeType} — 获取 MIME 类型</li><li>{@link CURLFile::getPostFilename} — 获取 POST 请求时的文件名</li><li>{@link CURLFile::setMimeType} — 设置 MIME 类型</li><li>{@link CURLFile::setPostFilename} — 设置 POST 请求时的文件名</li></ul></div>
*/
class CURLFile
{
    #[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
    public $name;

    #[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
    public $mime;

    #[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
    public $postname;

    /**
     * Create a CURLFile object
     * @link https://secure.php.net/manual/en/curlfile.construct.php
     * @param string $filename <p>Path to the file which will be uploaded.</p>
     * @param string $mime_type [optional] <p>Mimetype of the file.</p>
     * @param string $posted_filename [optional] <p>Name of the file.</p>
     * @since 5.5
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $filename,
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $mime_type = null,
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $posted_filename = null
    ) {}

/**
*<div id="curlfile.getfilename" class="refentry"> <div class="refnamediv">  <h1 class="refname">CURLFile::getFilename</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CURLFile::getFilename</span> &mdash; <span class="dc-title">获取文件名</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-curlfile.getfilename-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CURLFile::getFilename</strong></span>(): <span class="type" style="color:#EAB766">string</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-curlfile.getfilename-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-curlfile.getfilename-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回文件名。  </p> </div></div>
     * @return string Returns file name.*/
    public function getFilename(): string {}

/**
*<div id="curlfile.getmimetype" class="refentry"> <div class="refnamediv">  <h1 class="refname">CURLFile::getMimeType</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CURLFile::getMimeType</span> &mdash; <span class="dc-title">获取 MIME 类型</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-curlfile.getmimetype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CURLFile::getMimeType</strong></span>(): <span class="type" style="color:#EAB766">string</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-curlfile.getmimetype-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-curlfile.getmimetype-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 MIME 类型。  </p> </div></div>
     * @return string Returns MIME type.*/
    public function getMimeType(): string {}

/**
*<div id="curlfile.getpostfilename" class="refentry"> <div class="refnamediv">  <h1 class="refname">CURLFile::getPostFilename</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CURLFile::getPostFilename</span> &mdash; <span class="dc-title">获取 POST 请求时的文件名</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-curlfile.getpostfilename-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CURLFile::getPostFilename</strong></span>(): <span class="type" style="color:#EAB766">string</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-curlfile.getpostfilename-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-curlfile.getpostfilename-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 POST 请求时的文件名。  </p> </div></div>
     * @return string Returns file name for POST.*/
    public function getPostFilename(): string {}

/**
*<div id="curlfile.setmimetype" class="refentry"> <div class="refnamediv">  <h1 class="refname">CURLFile::setMimeType</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CURLFile::setMimeType</span> &mdash; <span class="dc-title">设置 MIME 类型</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-curlfile.setmimetype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CURLFile::setMimeType</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$mime_type</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-curlfile.setmimetype-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">mime_type</span></dt>    <dd>     <span>     POST 数据中的 MIME 类型。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-curlfile.setmimetype-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function setMimeType(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $mime_type): void {}

/**
*<div id="curlfile.setpostfilename" class="refentry"> <div class="refnamediv">  <h1 class="refname">CURLFile::setPostFilename</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CURLFile::setPostFilename</span> &mdash; <span class="dc-title">设置 POST 请求时的文件名</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-curlfile.setpostfilename-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CURLFile::setPostFilename</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$posted_filename</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-curlfile.setpostfilename-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">posted_filename</span></dt>    <dd>     <span>      POST 数据里使用的文件名。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-curlfile.setpostfilename-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function setPostFilename(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $posted_filename): void {}

    /**
     * @link https://secure.php.net/manual/en/curlfile.wakeup.php
     * Unserialization handler
     * @since 5.5
     */
    public function __wakeup() {}
}

/**
*<div id="function.curl-init" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_init</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.2, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_init</span> &mdash; <span class="dc-title">初始化 cURL 会话</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-init-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_init</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$url</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="type CurlHandle" style="color:#EAB766">CurlHandle</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   初始化新会话，返回 cURL 句柄，供 <span class="function">{@link curl_setopt()}</span>、<span class="function">{@link curl_exec()}</span> 和 <span class="function">{@link curl_close()}</span> 函数使用。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-init-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">url</span></dt>     <dd>      <p class="para">       如果提供了该参数，<strong><span>CURLOPT_URL</span></strong> 选项将会被设置成这个值。也可以使用 <span class="function">{@link curl_setopt()}</span> 函数手动地设置这个值。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        如果设置了 <a href="https://www.php.net/manual/zh/ini.core.php#ini.open-basedir" class="link">open_basedir</a>，<span>file</span> 协议会被 cURL 禁用。       </p>      </p></blockquote>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-init-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 cURL 句柄，错误时返回 <strong><span>false</span></strong>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-init-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       此函数成功时现在返回 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="classname">CurlHandle</a></span> 实例；之前返回 <span class="type" style="color:#EAB766">resource</span>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">url</span> 现在可为 null。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-init-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1      初始化新 cURL 会话并获取网页    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建新 cURL 资源<br /></span><span style="color: #9876AA">$ch </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 设置 URL 和相应的选项<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_URL</span><span style="color: #007700">, </span><span style="color: #DD0000">"http://www.example.com/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_HEADER</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 抓取 URL 并把它传递给浏览器<br /></span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 关闭 cURL 资源，并且释放系统资源<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-init-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_close()} - 关闭 cURL 会话</span></li>    <li class="member"><span class="function">{@link curl_multi_init()} - 返回新 cURL 批处理句柄</span></li>   </ul>  </span> </div></div>
 * @return resource|false|CurlHandle a cURL handle on success, false on errors.*/
function curl_init(?string $url) {}

/**
*<div id="function.curl-copy-handle" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_copy_handle</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_copy_handle</span> &mdash; <span class="dc-title">复制 cURL 句柄及其所有选项</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-copy-handle-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_copy_handle</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="type CurlHandle" style="color:#EAB766">CurlHandle</a></span> <span class="parameter" style="color:#3A95FF">$handle</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="type CurlHandle" style="color:#EAB766">CurlHandle</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   复制 cURL 句柄并保持相同选项。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-copy-handle-parameters">  <h3 class="title">参数</h3>  <span>   <dl>    <dt><span class="parameter" style="color:#3A95FF">handle</span></dt><dd><p class="para">由 <span class="function">{@link curl_init()}</span> 返回的 cURL 句柄。</p></dd>   </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-copy-handle-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回新 cURL 句柄， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-copy-handle-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">handle</span> 现在接受 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="classname">CurlHandle</a></span>  实例；之前接受 <span class="type" style="color:#EAB766">resource</span>。 </td></tr>     <tr>      <td>8.0.0</td>      <td>       现在成功时，此函数返回 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="classname">CurlHandle</a></span> 实例，之前返回 <span class="type" style="color:#EAB766">resource</span>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-copy-handle-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 复制 cURL 句柄</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建新 cURL 资源<br /></span><span style="color: #9876AA">$ch </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 设置 URL 和其它相应的选项<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_URL</span><span style="color: #007700">, </span><span style="color: #DD0000">'http://www.example.com/'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_HEADER</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 复制句柄<br /></span><span style="color: #9876AA">$ch2 </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_copy_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 抓取 URL（http://www.example.com/）并把它传递给浏览器<br /></span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 关闭 cURL 资源，并且释放系统资源<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div></div>
 * @return CurlHandle|resource|false a new cURL handle.*/
function curl_copy_handle(#[LanguageLevelTypeAware(['8.0' => 'CurlHandle'], default: 'resource')] $handle) {}

/**
*<div id="function.curl-version" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_version</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.2, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_version</span> &mdash; <span class="dc-title">获取 cURL 版本信息</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-version-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_version</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   返回关于 cURL 版本的信息。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-version-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-version-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回关联数组，包含如下元素：   <table class="doctable informaltable">         <thead>      <tr>       <th>键</th>       <th>值描述</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>version_number</td>       <td>cURL 24 位版本号</td>      </tr>      <tr>       <td>version</td>       <td>cURL 版本号，字符串形式</td>      </tr>      <tr>       <td>ssl_version_number</td>       <td>OpenSSL 24 位版本号</td>      </tr>      <tr>       <td>ssl_version</td>       <td>OpenSSL 版本号，字符串形式</td>      </tr>      <tr>       <td>libz_version</td>       <td>zlib 版本号，字符串形式</td>      </tr>      <tr>       <td>host</td>       <td>关于编译cURL主机的信息</td>      </tr>      <tr>       <td>age</td>       <td class="empty">&nbsp;</td>      </tr>      <tr>       <td>features</td>       <td>一个<span>CURL_VERSION_XXX</span>常量的位掩码</td>      </tr>      <tr>       <td>protocols</td>       <td>数组，包含 cURL 支持的协议名称</td>      </tr>     </tbody>       </table>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-version-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       移除可选的 <span class="parameter" style="color:#3A95FF">age</span> 参数。      </td>     </tr>     <tr>      <td>7.4.0</td>      <td>       弃用可选的 <span class="parameter" style="color:#3A95FF">age</span> 参数，如果传递值，则忽略。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-version-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">curl_version()</strong></span> 示例</strong></p>    <div class="example-contents"><p>     这个示例将会检查当前 cURL 版本使用 <span class="function"><strong style="color:#CC7832">curl_version()</strong></span> 返回的“features”位掩码中哪些特性是可用的。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 获取cURL版本数组<br /></span><span style="color: #9876AA">$version </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_version</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 在cURL编译版本中使用位域来检查某些特性<br /></span><span style="color: #9876AA">$bitfields </span><span style="color: #007700">= Array(<br />            </span><span style="color: #DD0000">'CURL_VERSION_IPV6'</span><span style="color: #007700">, <br />            </span><span style="color: #DD0000">'CURL_VERSION_KERBEROS4'</span><span style="color: #007700">, <br />            </span><span style="color: #DD0000">'CURL_VERSION_SSL'</span><span style="color: #007700">, <br />            </span><span style="color: #DD0000">'CURL_VERSION_LIBZ'<br />            </span><span style="color: #007700">);<br /><br /><br />foreach(</span><span style="color: #9876AA">$bitfields </span><span style="color: #007700">as </span><span style="color: #9876AA">$feature</span><span style="color: #007700">)<br />{<br />    echo </span><span style="color: #9876AA">$feature </span><span style="color: #007700">. (</span><span style="color: #9876AA">$version</span><span style="color: #007700">[</span><span style="color: #DD0000">'features'</span><span style="color: #007700">] &amp; </span><span style="color: #9876AA">constant</span><span style="color: #007700">(</span><span style="color: #9876AA">$feature</span><span style="color: #007700">) ? </span><span style="color: #DD0000">' matches' </span><span style="color: #007700">: </span><span style="color: #DD0000">' does not match'</span><span style="color: #007700">);<br />    echo </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div></div>
 * @return array|false an associative array with the following elements:*/
function curl_version(#[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $age = null): array|false {}

/**
*<div id="function.curl-setopt" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_setopt</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.2, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_setopt</span> &mdash; <span class="dc-title">设置 cURL 传输选项</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-setopt-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_setopt</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="type CurlHandle" style="color:#EAB766">CurlHandle</a></span> <span class="parameter" style="color:#3A95FF">$handle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$option</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   为 cURL 会话句柄设置选项。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-setopt-parameters">  <h3 class="title">参数</h3>  <span>   <dl>    <dt><span class="parameter" style="color:#3A95FF">handle</span></dt><dd><p class="para">由 <span class="function">{@link curl_init()}</span> 返回的 cURL 句柄。</p></dd>         <dt><span class="parameter" style="color:#3A95FF">option</span></dt>     <dd>      <p class="para">       需要设置的<span>CURLOPT_XXX</span>选项。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       将设置在<span class="parameter" style="color:#3A95FF">option</span>选项上的值。      </p>      <p class="para">       以下 <span class="parameter" style="color:#3A95FF">option</span> 参数的 <span class="parameter" style="color:#3A95FF">value</span>应该被设置成 <span class="type" style="color:#EAB766">bool</span> 类型：       <table class="doctable informaltable">                 <thead>          <tr>           <th>选项</th>           <th>将 <span class="parameter" style="color:#3A95FF">value</span> 设置为</th>           <th>备注</th>          </tr>         </thead>         <tbody class="tbody">          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_AUTOREFERER</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 时将根据 <span>Location:</span> 重定向时，自动设置 header 中的<span>Referer:</span>信息。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_COOKIESESSION</span></strong></td>           <td style="vertical-align: top;">            设为 <strong><span>true</span></strong>  时将开启新的一次 cookie 会话。它将强制 libcurl 忽略之前会话时存的其他 cookie。            libcurl 在默认状况下无论是否为会话，都会储存、加载所有 cookie。会话 cookie 是指没有过期时间，只存活在会话之中。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_CERTINFO</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 将在安全传输时输出 SSL 证书信息到 <span>STDERR</span>。           </td>           <td style="vertical-align: top;">            在 cURL 7.19.1 中添加。            需要开启 <strong><span>CURLOPT_VERBOSE</span></strong> 才有效。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_CONNECT_ONLY</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 将让库执行所有需要的代理、验证、连接过程，但不传输数据。此选项用于            HTTP、SMTP 和 POP3。           </td>           <td style="vertical-align: top;">            在 7.15.2 中添加。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_CRLF</span></strong></td>           <td style="vertical-align: top;">            启用时将Unix的换行符转换成回车换行符。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_DNS_USE_GLOBAL_CACHE</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 会启用一个全局的DNS缓存。此选项非线程安全的，默认已开启。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_FAILONERROR</span></strong></td>           <td style="vertical-align: top;">           当 HTTP 状态码大于等于 400，<strong><span>true</span></strong> 将将显示错误详情。 默认情况下将返回页面，忽略 HTTP 代码。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSL_FALSESTART</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong>  开启 TLS False Start （一种 TLS 握手优化方式）           </td>           <td style="vertical-align: top;">            cURL 7.42.0 中添加。自 PHP 7.0.7 起有效。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_FILETIME</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong>  时，会尝试获取远程文档中的修改时间信息。            信息可通过<span class="function">{@link curl_getinfo()}</span>函数的<span class="parameter" style="color:#3A95FF">CURLINFO_FILETIME</span> 选项获取。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_FOLLOWLOCATION</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 时将会根据服务器返回 HTTP 头中的 <span>&quot;Location: &quot;</span> 重定向。参阅 <strong><span>CURLOPT_MAXREDIRS</span></strong>。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_FORBID_REUSE</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 在完成交互以后强制明确的断开连接，不能在连接池中重用。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_FRESH_CONNECT</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 强制获取一个新的连接，而不是缓存中的连接。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_FTP_USE_EPRT</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 时，当 FTP 下载时，使用 EPRT (和 LPRT)命令。 设置为 <strong><span>false</span></strong> 时禁用 EPRT 和 LPRT，仅仅使用PORT 命令。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_FTP_USE_EPSV</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 时，在FTP传输过程中，回到 PASV 模式前，先尝试 EPSV 命令。设置为 <strong><span>false</span></strong> 时禁用 EPSV。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_FTP_CREATE_MISSING_DIRS</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 时，当 ftp 操作不存在的目录时将创建它。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_FTPAPPEND</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 为追加写入文件，而不是覆盖。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_TCP_NODELAY</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 时禁用 TCP 的 Nagle 算法，就是减少网络上的小数据包数量。           </td>           <td style="vertical-align: top;">            编译的版本在 libcurl 7.11.2 及以上时有效。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_FTPASCII</span></strong></td>           <td style="vertical-align: top;">            <strong><span>CURLOPT_TRANSFERTEXT</span></strong> 的别名。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_FTPLISTONLY</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 时只列出 FTP 目录的名字。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_HEADER</span></strong></td>           <td style="vertical-align: top;">            启用时会将头文件的信息作为数据流输出。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td><strong><span>CURLINFO_HEADER_OUT</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 时追踪句柄的请求字符串。           </td>           <td style="vertical-align: top;">            <strong><span>CURLINFO_</span></strong> 的前缀是指向的（intentional）。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_HTTP09_ALLOWED</span></strong></td>           <td style="vertical-align: top;">            是否允许 HTTP/0.9 响应。从 libcurl 7.66.0 开始默认为 <strong><span>false</span></strong>；以前默认为 <strong><span>true</span></strong>。           </td>           <td style="vertical-align: top;">            如果编译的 libcurl 版本 &gt;= 7.64.0，则分别从 PHP 7.3.15 和 7.4.3 开始可用           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_HTTPGET</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong>  时会设置 HTTP 的 method 为 GET，由于默认是 GET，所以只有 method 被修改时才需要这个选项。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_HTTPPROXYTUNNEL</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong>  会通过指定的 HTTP 代理来传输。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_HTTP_CONTENT_DECODING</span></strong></td>           <td style="vertical-align: top;">            <strong><span>false</span></strong> 时获取原始 HTTP 响应主体。           </td>           <td style="vertical-align: top;">            如果编译的 libcurl &gt;= 7.16.2 时可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_KEEP_SENDING_ON_ERROR</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 时，如果返回的 HTTP 代码等于或大于 300，则继续发送请求主体。默认操作是停止发送并关闭流或连接。适用于手动 NTLM 身份验证。大多数应用程序不需要此选项。           </td>           <td style="vertical-align: top;">            如果编译的 libcurl &gt;= 7.51.0，则从 PHP 7.3.0 开始可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_MUTE</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong>  时将完全静默，无论是何 cURL 函数。           </td>           <td style="vertical-align: top;">           在 cURL 7.15.5  中移出（可以使用 CURLOPT_RETURNTRANSFER 作为代替）           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_NETRC</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong>  时，在连接建立时，访问<var class="filename">~/.netrc</var>文件获取用户名和密码来连接远程站点。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_NOBODY</span></strong></td>           <td style="vertical-align: top;">           <strong><span>true</span></strong>  时将不输出 BODY 部分。同时 Mehtod 变成了 HEAD。修改为  <strong><span>false</span></strong> 时不会变成 GET。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_NOPROGRESS</span></strong></td>           <td style="vertical-align: top;"><p class="para">            <strong><span>true</span></strong> 时关闭 cURL 的传输进度。            <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:              <p class="para">              PHP 默认自动设置此选项为 <strong><span>true</span></strong>，只有为了调试才需要改变设置。             </p>            </p></blockquote>            </p></td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_NOSIGNAL</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 时忽略所有的 cURL 传递给 PHP 进程的信号。在 SAPI 多线程传输时此项被默认启用，所以超时选项仍能使用。           </td>           <td style="vertical-align: top;">            cURL 7.10时被加入。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PATH_AS_IS</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 不处理 dot dot sequences  （即 ../ ）           </td>           <td style="vertical-align: top;">             cURL 7.42.0 时被加入。 PHP 7.0.7 起有效。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PIPEWAIT</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 则等待 pipelining/multiplexing。           </td>           <td style="vertical-align: top;">             cURL 7.43.0 时被加入。 PHP 7.0.7 起有效。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_POST</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 时会发送 POST 请求，类型为：<span>application/x-www-form-urlencoded</span>，是 HTML 表单提交时最常见的一种。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PUT</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 时允许 HTTP 发送文件。要被 PUT 的文件必须在 <strong><span>CURLOPT_INFILE</span></strong>和<strong><span>CURLOPT_INFILESIZE</span></strong> 中设置。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_RETURNTRANSFER</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong>  将<span class="function">{@link curl_exec()}</span>获取的信息以字符串返回，而不是直接输出。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SASL_IR</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 开启，收到首包(first packet)后发送初始的响应(initial response)。           </td>           <td style="vertical-align: top;">            cURL 7.31.10 中添加，自 PHP 7.0.7 起有效。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSL_ENABLE_ALPN</span></strong></td>           <td style="vertical-align: top;">            <strong><span>false</span></strong>  禁用 SSL 握手中的 ALPN (如果 SSL 后端的            libcurl 内建支持) 用于协商到 http2。           </td>           <td style="vertical-align: top;">            cURL 7.36.0 中增加， PHP 7.0.7 起有效。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSL_ENABLE_NPN</span></strong></td>           <td style="vertical-align: top;">            <strong><span>false</span></strong> 禁用 SSL 握手中的 NPN(如果 SSL 后端的            libcurl 内建支持)，用于协商到 http2。           </td>           <td style="vertical-align: top;">            cURL 7.36.0 中增加， PHP 7.0.7 起有效。           </td>          </tr>                                                                                                                                                               <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSL_VERIFYPEER</span></strong></td>           <td style="vertical-align: top;">            <strong><span>false</span></strong>  禁止 cURL 验证对等证书（peer&#039;s            certificate）。要验证的交换证书可以在 <strong><span>CURLOPT_CAINFO</span></strong> 选项中设置，或在 <strong><span>CURLOPT_CAPATH</span></strong>中设置证书目录。           </td>           <td style="vertical-align: top;">            自cURL 7.10开始默认为 <strong><span>true</span></strong>。从 cURL 7.10开始默认绑定安装。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSL_VERIFYSTATUS</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 验证证书状态。           </td>           <td style="vertical-align: top;">             cURL 7.41.0 中添加， PHP 7.0.7 起有效。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_SSL_VERIFYPEER</span></strong></td>           <td style="vertical-align: top;">            <strong><span>false</span></strong> 会阻止 CURL 验证对等证书（peer&#039;s certificate）。可以使用 <strong><span>CURLOPT_CAINFO</span></strong>            选项指定要验证的备用证书，或者可以使用 <strong><span>CURLOPT_CAPATH</span></strong> 选项指定证书目录。设置为            <strong><span>false</span></strong> 时，无论如何验证对等证书都会成功。           </td>           <td style="vertical-align: top;">            默认为 <strong><span>true</span></strong>。自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SAFE_UPLOAD</span></strong></td>           <td style="vertical-align: top;">            始终为 <strong><span>true</span></strong>，在 <strong><span>CURLOPT_POSTFIELDS</span></strong> 中禁用了对上传文件的 <span>@</span>            前缀的支持，这意味着以 <span>@</span> 开头的值可以作为字段安全地传递。上传可使用 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlfile.php" class="classname">CURLFile</a></span> 替代。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_TCP_FASTOPEN</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 开启 TCP Fast Open。           </td>           <td style="vertical-align: top;">            cURL 7.49.0 中添加， PHP 7.0.7 起有效。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_TFTP_NO_OPTIONS</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 不发送 TFTP 的 options 请求。           </td>           <td style="vertical-align: top;">            自 cURL 7.48.0 添加， PHP 7.0.7 起有效。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_TRANSFERTEXT</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong>  对 FTP 传输使用 ASCII 模式。对于LDAP，它检索纯文本信息而非 HTML。在 Windows 系统上，系统不会把 <span>STDOUT</span> 设置成二进制 模式。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_UNRESTRICTED_AUTH</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 在使用<strong><span>CURLOPT_FOLLOWLOCATION</span></strong>重定向 header 中的多个 location 时继续发送用户名和密码信息，哪怕主机名已改变。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_UPLOAD</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong>  准备上传。           </td>           <td style="vertical-align: top;">           </td>          </tr>                              <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_VERBOSE</span></strong></td>           <td style="vertical-align: top;">            <strong><span>true</span></strong> 会输出所有的信息，写入到<span>STDERR</span>，或在<strong><span>CURLOPT_STDERR</span></strong>中指定的文件。           </td>           <td style="vertical-align: top;">           </td>          </tr>         </tbody>               </table>      </p>      <p class="para">       以下 <span class="parameter" style="color:#3A95FF">option</span> 的 <span class="parameter" style="color:#3A95FF">value</span> 应该被设置成 <span class="type" style="color:#EAB766">int</span>：       <table class="doctable informaltable">                 <thead>          <tr>           <th>选项</th>           <th>设置 <span class="parameter" style="color:#3A95FF">value</span> 为</th>           <th>备注</th>          </tr>         </thead>         <tbody class="tbody">          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_BUFFERSIZE</span></strong></td>           <td style="vertical-align: top;">            每次读入的缓冲的尺寸。当然不保证每次都会完全填满这个尺寸。           </td>           <td style="vertical-align: top;">            在cURL 7.10中被加入。           </td>          </tr>          <tr>           <td><strong><span>CURLOPT_CONNECTTIMEOUT</span></strong></td>           <td style="vertical-align: top;">            在尝试连接时等待的秒数。设置为0，则无限等待。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_CONNECTTIMEOUT_MS</span></strong></td>           <td style="vertical-align: top;">            尝试连接等待的时间，以毫秒为单位。设置为0，则无限等待。                         如果 libcurl 编译时使用系统标准的名称解析器（ standard system name resolver），那部分的连接仍旧使用以秒计的超时解决方案，最小超时时间还是一秒钟。           </td>           <td style="vertical-align: top;">            在 cURL 7.16.2 中被加入。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_DNS_CACHE_TIMEOUT</span></strong></td>           <td style="vertical-align: top;">            设置在内存中缓存 DNS 的时间，默认为120秒（两分钟）。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_EXPECT_100_TIMEOUT_MS</span></strong></td>           <td style="vertical-align: top;">            <span>Expect: 100-continue</span> 响应的超时时间，以毫秒为单位。            默认为 1000 毫秒。           </td>           <td style="vertical-align: top;">            cURL 7.36.0 中添加，自 PHP 7.0.7 有效。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_FTPSSLAUTH</span></strong></td>           <td style="vertical-align: top;">            FTP验证方式（启用的时候）：<span>CURLFTPAUTH_SSL</span> (首先尝试SSL)，<span>CURLFTPAUTH_TLS</span> (首先尝试TLS)或<span>CURLFTPAUTH_DEFAULT</span> (让cURL 自个儿决定)。           </td>           <td style="vertical-align: top;">            在 cURL 7.12.2 中被加入。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_HEADEROPT</span></strong></td>           <td style="vertical-align: top;">            How to deal with headers. One of the following constants:            <span class="simpara">             <strong><span>CURLHEADER_UNIFIED</span></strong>: the headers specified in             <strong><span>CURLOPT_HTTPHEADER</span></strong> will be used in requests             both to servers and proxies. With this option enabled,              <strong><span>CURLOPT_PROXYHEADER</span></strong> will not have any effect.            </span>            <span class="simpara">             <strong><span>CURLHEADER_SEPARATE</span></strong>: makes             <strong><span>CURLOPT_HTTPHEADER</span></strong> headers only get sent to             a server and not to a proxy. Proxy headers must be set with             <strong><span>CURLOPT_PROXYHEADER</span></strong> to get used. Note that if             a non-CONNECT request is sent to a proxy, libcurl will send both             server headers and proxy headers. When doing CONNECT, libcurl will             send <strong><span>CURLOPT_PROXYHEADER</span></strong> headers only to the             proxy and then <strong><span>CURLOPT_HTTPHEADER</span></strong> headers             only to the server.            </span>            <span class="simpara">             Defaults to <strong><span>CURLHEADER_SEPARATE</span></strong> as of cURL             7.42.1, and <strong><span>CURLHEADER_UNIFIED</span></strong> before.            </span>           </td>           <td style="vertical-align: top;">            Added in cURL 7.37.0. Available since PHP 7.0.7.           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_HTTP_VERSION</span></strong></td>           <td style="vertical-align: top;">            <span class="parameter" style="color:#3A95FF">CURL_HTTP_VERSION_NONE</span> (默认值，让 cURL 自己判断使用哪个版本)，<span class="parameter" style="color:#3A95FF">CURL_HTTP_VERSION_1_0</span> (强制使用 HTTP/1.0)或<span class="parameter" style="color:#3A95FF">CURL_HTTP_VERSION_1_1</span> (强制使用 HTTP/1.1)。           </td>           <td style="vertical-align: top;">           </td>          </tr>                              <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_HTTPAUTH</span></strong></td>           <td style="vertical-align: top;">            <p class="para">             使用的 HTTP 验证方法。选项有：             <span class="parameter" style="color:#3A95FF">CURLAUTH_BASIC</span>、             <span class="parameter" style="color:#3A95FF">CURLAUTH_DIGEST</span>、             <span class="parameter" style="color:#3A95FF">CURLAUTH_GSSNEGOTIATE</span>、             <span class="parameter" style="color:#3A95FF">CURLAUTH_NTLM</span>、             <strong><span>CURLAUTH_AWS_SIGV4</span></strong>、             <span class="parameter" style="color:#3A95FF">CURLAUTH_ANY</span> 和             <span class="parameter" style="color:#3A95FF">CURLAUTH_ANYSAFE</span>。            </p>            <p class="para">             可以使用 <span>|</span> 位域（OR）操作符结合多个值，cURL 会让服务器选择受支持的方法，并选择最好的那个。            </p>            <p class="para">             <strong><span>CURLAUTH_ANY</span></strong> 设置所有的位。cURL 将自动选择它认为最安全的一个。            </p>            <p class="para">             <strong><span>CURLAUTH_ANYSAFE</span></strong> 设置了除 <span>CURLAUTH_BASIC</span> 以外所有的位。cURL             将自动选择它认为最安全的一个。            </p>           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_INFILESIZE</span></strong></td>           <td style="vertical-align: top;">            希望传给远程站点的文件尺寸，字节(byte)为单位。            注意无法用这个选项阻止 libcurl 发送更多的数据，确切发送什么取决于 <strong><span>CURLOPT_READFUNCTION</span></strong>。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_LOW_SPEED_LIMIT</span></strong></td>           <td style="vertical-align: top;">            传输速度，每秒字节（bytes）数，根据<strong><span>CURLOPT_LOW_SPEED_TIME</span></strong>秒数统计是否因太慢而取消传输。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_LOW_SPEED_TIME</span></strong></td>           <td style="vertical-align: top;">            当传输速度小于<strong><span>CURLOPT_LOW_SPEED_LIMIT</span></strong>时(bytes/sec)，PHP会判断是否因太慢而取消传输。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_MAIL_RCPT_ALLLOWFAILS</span></strong></td>           <td style="vertical-align: top;">            允许一些收件人的 RCPT TO 命令失败。           </td>           <td style="vertical-align: top;">            在向多个收件人发送数据时，如果至少有一个收件人导致 RCPT TO 命令返回错误，默认情况下 cURL 将中止 SMTP            对话。此选项告诉 cURL 忽略错误并继续使用剩余的有效收件人。如果所有收件人触发 RCPT TO 失败并且设置了此            flag，cURL 将中止 SMTP 对话并返回从最后一个 RCPT TO 命令收到的错误。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_MAXAGE_CONN</span></strong></td>           <td style="vertical-align: top;">            重新使用已存在连接时允许的最大空闲时间。默认最大时间设置为 <span>118</span> 秒。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_MAXFILESIZE_LARGE</span></strong></td>           <td style="vertical-align: top;">            The maximum file size in bytes allowed to download. If the file requested is found larger than this value,            the transfer will not start and <strong><span>CURLE_FILESIZE_EXCEEDED</span></strong> will be returned.            The file size is not always known prior to download, and for such files this option has no effect even if            the file transfer ends up being larger than this given limit.           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_MAXLIFETIME_CONN</span></strong></td>           <td style="vertical-align: top;">            The maximum time in seconds, since the creation of the connection, that is allowed for an existing            connection to have for it to be considered for reuse. If a connection is found in the cache that is older            than this value, it will instead be closed once any in-progress transfers are complete.            Default is 0 seconds, meaning the option is disabled and all connections are eligible for reuse.           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_MAXCONNECTS</span></strong></td>           <td style="vertical-align: top;">            允许的最大持久连接数。当达到限制时，将会关闭缓存中最早的连接，以防止增加已打开的连接数。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_MAXREDIRS</span></strong></td>           <td style="vertical-align: top;">            指定最多的 HTTP 重定向次数，这个选项是和 <strong><span>CURLOPT_FOLLOWLOCATION</span></strong> 一起使用的。            默认值 <span>20</span> 是为了防止无限重定向。设置为 <span>-1</span> 允许无限重定向，<span>0</span> 拒绝所有重定向。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PORT</span></strong></td>           <td style="vertical-align: top;">            用来指定连接端口。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_POSTREDIR</span></strong></td>           <td style="vertical-align: top;">            位掩码， 1 (301 永久重定向), 2 (302 Found)           和 4 (303 See Other)             设置 <strong><span>CURLOPT_FOLLOWLOCATION</span></strong> 时，什么情况下需要再次  HTTP POST 到重定向网址。           </td>           <td style="vertical-align: top;">            cURL 7.19.1 中添加。           </td>          </tr>                              <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROTOCOLS</span></strong></td>           <td style="vertical-align: top;">            <p class="para">             <strong><span>CURLPROTO_*</span></strong>的位掩码。             启用时，会限制 libcurl 在传输过程中可使用哪些协议。             这将允许你在编译libcurl时支持众多协议，但是限制只用允许的子集。默认 libcurl 将使用所有支持的协议。             参见<strong><span>CURLOPT_REDIR_PROTOCOLS</span></strong>。            </p>            <p class="para">             可用的协议选项为：             <span class="parameter" style="color:#3A95FF">CURLPROTO_HTTP</span>、             <span class="parameter" style="color:#3A95FF">CURLPROTO_HTTPS</span>、             <span class="parameter" style="color:#3A95FF">CURLPROTO_FTP</span>、             <span class="parameter" style="color:#3A95FF">CURLPROTO_FTPS</span>、             <span class="parameter" style="color:#3A95FF">CURLPROTO_SCP</span>、             <span class="parameter" style="color:#3A95FF">CURLPROTO_SFTP</span>、             <span class="parameter" style="color:#3A95FF">CURLPROTO_TELNET</span>、             <span class="parameter" style="color:#3A95FF">CURLPROTO_LDAP</span>、             <span class="parameter" style="color:#3A95FF">CURLPROTO_LDAPS</span>、             <span class="parameter" style="color:#3A95FF">CURLPROTO_DICT</span>、             <span class="parameter" style="color:#3A95FF">CURLPROTO_FILE</span>、             <span class="parameter" style="color:#3A95FF">CURLPROTO_TFTP</span>、             <strong><span>CURLPROTO_MQTT</span></strong>、             <span class="parameter" style="color:#3A95FF">CURLPROTO_ALL</span>。            </p>           </td>           <td style="vertical-align: top;">            在 cURL 7.19.4 中被加入。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXYAUTH</span></strong></td>           <td style="vertical-align: top;">            HTTP 代理连接的验证方式。使用在<strong><span>CURLOPT_HTTPAUTH</span></strong>中的位掩码。            当前仅仅支持 <span class="parameter" style="color:#3A95FF">CURLAUTH_BASIC</span>和<span class="parameter" style="color:#3A95FF">CURLAUTH_NTLM</span>。           </td>           <td style="vertical-align: top;">            在 cURL 7.10.7 中被加入。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXYPORT</span></strong></td>           <td style="vertical-align: top;">            代理服务器的端口。端口也可以在<strong><span>CURLOPT_PROXY</span></strong>中设置。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXYTYPE</span></strong></td>           <td style="vertical-align: top;">            可以是 <strong><span>CURLPROXY_HTTP</span></strong> (默认值)          <strong><span>CURLPROXY_SOCKS4</span></strong>、            <strong><span>CURLPROXY_SOCKS5</span></strong>、  <strong><span>CURLPROXY_SOCKS4A</span></strong> 或            <strong><span>CURLPROXY_SOCKS5_HOSTNAME</span></strong>。           </td>           <td style="vertical-align: top;">            在 cURL 7.10 中被加入。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_REDIR_PROTOCOLS</span></strong></td>           <td style="vertical-align: top;">            <strong><span>CURLPROTO_*</span></strong> 值的位掩码。如果被启用，位掩码会限制 libcurl 在 <strong><span>CURLOPT_FOLLOWLOCATION</span></strong>开启时，使用的协议。            默认允许除 FILE 和 SCP 外所有协议。            这和 7.19.4 前的版本无条件支持所有支持的协议不同。关于协议常量，请参照<strong><span>CURLOPT_PROTOCOLS</span></strong>。           </td>           <td style="vertical-align: top;">            在 cURL 7.19.4 中被加入。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_RESUME_FROM</span></strong></td>           <td style="vertical-align: top;">            在恢复传输时，传递字节为单位的偏移量（用来断点续传）。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SOCKS5_AUTH</span></strong></td>           <td style="vertical-align: top;">            <p class="para">             用于 SOCKS5 验证方法。选项是：<strong><span>CURLAUTH_BASIC</span></strong>、<strong><span>CURLAUTH_GSSAPI</span></strong>、<strong><span>CURLAUTH_NONE</span></strong>。            </p>            <p class="para">             位操作符 <span>|</span>（or）用于组合多个方法。如果这样做，cURL 将轮询服务器以查看它支持哪些方法并选择最佳方法。            </p>            <p class="para">             <strong><span>CURLAUTH_BASIC</span></strong> 允许用户名/密码验证。            </p>            <p class="para">             <strong><span>CURLAUTH_GSSAPI</span></strong> 允许 GSS-API 身份验证。            </p>            <p class="para">             <strong><span>CURLAUTH_NONE</span></strong> 允许不验证。            </p>            <p class="para">             默认为 <span>CURLAUTH_BASIC|CURLAUTH_GSSAPI</span>。使用 <strong><span>CURLOPT_PROXYUSERPWD</span></strong> 选项设置真实的用户名和密码。            </p>           </td>           <td style="vertical-align: top;">            从 7.3.0 和 curl &gt;= 7.55.0 开始可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSL_OPTIONS</span></strong></td>           <td style="vertical-align: top;">            Set SSL behavior options, which is a bitmask of any of the following constants:            <span class="simpara">             <strong><span>CURLSSLOPT_ALLOW_BEAST</span></strong>: do not attempt to use             any workarounds for a security flaw in the SSL3 and TLS1.0 protocols.            </span>            <span class="simpara">             <strong><span>CURLSSLOPT_NO_REVOKE</span></strong>: disable certificate             revocation checks for those SSL backends where such behavior is             present.            </span>            <span class="simpara">             <strong><span>CURLSSLOPT_AUTO_CLIENT_CERT</span></strong>: automatically             locate and use a client certificate for authentication, when             requested by the server. This option is only supported for             Schannel (the native Windows SSL library).            </span>            <span class="simpara">             <strong><span>CURLSSLOPT_NATIVE_CA</span></strong>: use the operating system&#039;s             native CA store for certificate verification. Works only on Windows             when built to use OpenSSL. This option is experimental and behavior is subject to change.            </span>            <span class="simpara">             <strong><span>CURLSSLOPT_NO_PARTIALCHAIN</span></strong>: do not accept &quot;partial&quot; certificate             chains, which cURL otherwise does by default. This option is only supported for OpenSSL             and will fail the certificate verification if the chain ends with             an intermediate certificate and not with a root certificate.            </span>            <span class="simpara">             <strong><span>CURLSSLOPT_REVOKE_BEST_EFFORT</span></strong>: ignore certificate revocation checks             in case of missing or offline distribution points for those SSL backends where             such behavior is present. This option is only supported for Schannel (the native Windows SSL library).             If combined with <strong><span>CURLSSLOPT_NO_REVOKE</span></strong>, the latter takes precedence.            </span>           </td>           <td style="vertical-align: top;">            Added in cURL 7.25.0. Available since PHP 7.0.7.           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSL_VERIFYHOST</span></strong></td>           <td style="vertical-align: top;">            <span>2</span> 时验证 SSL 对等证书中的公用名称字段或主题备用名称（Subject Alternate Name，简称 SNA）字段是否与提供的主机名匹配。<span>0</span>            时不检查名称。不应使用 <span>1</span>。在生产环境中，此选项的值应保持为 <span>2</span>（默认值）。           </td>           <td style="vertical-align: top;">           在 cURL 7.28.1 中移除了对 <span>1</span> 的支持。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSLVERSION</span></strong></td>           <td style="vertical-align: top;">            <strong><span>CURL_SSLVERSION_DEFAULT</span></strong> (0)、<strong><span>CURL_SSLVERSION_TLSv1</span></strong> (1)、<strong><span>CURL_SSLVERSION_SSLv2</span></strong> (2)、<strong><span>CURL_SSLVERSION_SSLv3</span></strong> (3)、<strong><span>CURL_SSLVERSION_TLSv1_0</span></strong> (4)、<strong><span>CURL_SSLVERSION_TLSv1_1</span></strong> (5) 、<strong><span>CURL_SSLVERSION_TLSv1_2</span></strong> (6) 或            <strong><span>CURL_SSLVERSION_TLSv1_3</span></strong> (7) 中的其中一个。            <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:              <p class="para">              最好别设置这个值并让它使用默认值。鉴于 SSLv2 和 SSLv3 中的已知漏洞，将其设置为 2 或 3 非常危险。             </p>            </p></blockquote>           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_SSL_OPTIONS</span></strong></td>           <td style="vertical-align: top;">            设置代理 SSL 行为选项，它是以下任何常量的位掩码：            <span class="simpara">             <strong><span>CURLSSLOPT_ALLOW_BEAST</span></strong>：不要尝试对 SSL3 和 TLS1.0 协议中的安全漏洞使用任何替代方法。            </span>            <span class="simpara">             <strong><span>CURLSSLOPT_NO_REVOKE</span></strong>：对存在此类行为的 SSL 后端禁用证书吊销检查。（curl &gt;= 7.44.0）            </span>            <span class="simpara">             <strong><span>CURLSSLOPT_NO_PARTIALCHAIN</span></strong>：不接受“部分”（partial）证书链，不然默认接受。（curl &gt;= 7.68.0）            </span>           </td>           <td style="vertical-align: top;">            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_SSL_VERIFYHOST</span></strong></td>           <td style="vertical-align: top;">            设置为 <span>2</span> 以根据代理名称验证 HTTPS 代理的证书名称字段。设置为 <span>0</span> 时，无论证书中使用的名称如何，连接都会成功。谨慎使用该能力！            在 curl 7.28.0 及更早版本中 <span>1</span> 视为调试选项。从 curl 7.28.1 到 7.65.3 返回 <strong><span>CURLE_BAD_FUNCTION_ARGUMENT</span></strong>。            从 curl 7.66.0 开始，<span>1</span> 和 <span>2</span> 被视为相同的值。在生产环境中，此选项的值应保持为 <span>2</span>（默认值）。           </td>           <td style="vertical-align: top;">            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_SSLVERSION</span></strong></td>           <td style="vertical-align: top;">            <strong><span>CURL_SSLVERSION_DEFAULT</span></strong>、<strong><span>CURL_SSLVERSION_TLSv1</span></strong>、<strong><span>CURL_SSLVERSION_TLSv1_0</span></strong>、<strong><span>CURL_SSLVERSION_TLSv1_1</span></strong>、<strong><span>CURL_SSLVERSION_TLSv1_2</span></strong>、<strong><span>CURL_SSLVERSION_TLSv1_3</span></strong>、<strong><span>CURL_SSLVERSION_MAX_DEFAULT</span></strong>、<strong><span>CURL_SSLVERSION_MAX_TLSv1_0</span></strong>、<strong><span>CURL_SSLVERSION_MAX_TLSv1_1</span></strong>、<strong><span>CURL_SSLVERSION_MAX_TLSv1_2</span></strong>、<strong><span>CURL_SSLVERSION_MAX_TLSv1_3</span></strong>            或 <strong><span>CURL_SSLVERSION_SSLv3</span></strong> 其中之一。            <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:              <p class="para">              最好的办法是不要设置它，使用默认的 <strong><span>CURL_SSLVERSION_DEFAULT</span></strong>，这将尝试找出远程 SSL 协议版本。             </p>            </p></blockquote>           </td>           <td style="vertical-align: top;">            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_STREAM_WEIGHT</span></strong></td>           <td style="vertical-align: top;">            设置 stream weight 数值 ( 1 和 256 之间的数字).           </td>           <td style="vertical-align: top;">             cURL 7.46.0 中添加，自 PHP 7.0.7 起有效。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_TCP_KEEPALIVE</span></strong></td>           <td style="vertical-align: top;">            如果设置为 <span>1</span>，将发送 TCP keepalive 探针。这些探针的延迟和频率可以通过 <strong><span>CURLOPT_TCP_KEEPIDLE</span></strong> 和 <strong><span>CURLOPT_TCP_KEEPINTVL</span></strong>            选项来控制，前提是操作系统支持它们。如果设置为 <span>0</span>（默认值），将禁用 keepalive 探针。           </td>           <td style="vertical-align: top;">            在 cURL 7.25.0 中添加。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_TCP_KEEPIDLE</span></strong></td>           <td style="vertical-align: top;">            设置延迟（以秒为单位），如果启用了 <strong><span>CURLOPT_TCP_KEEPALIVE</span></strong>，操作系统将在连接空闲时等待，然后再发送            keepalive 探针。并非所有操作系统都支持此选项。默认值为 <span>60</span>。           </td>           <td style="vertical-align: top;">            在 cURL 7.25.0 中添加。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_TCP_KEEPINTVL</span></strong></td>           <td style="vertical-align: top;">            设置间隔（以秒为单位），如果启用了 <strong><span>CURLOPT_TCP_KEEPALIVE</span></strong>，操作系统将在发送            keepalive 探针之间等待。并非所有操作系统都支持此选项。默认值为 <span>60</span>。           </td>           <td style="vertical-align: top;">            在 cURL 7.25.0 中添加。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_TIMECONDITION</span></strong></td>           <td style="vertical-align: top;">            设置如何对待 <strong><span>CURLOPT_TIMEVALUE</span></strong>。            使用 <span class="parameter" style="color:#3A95FF">CURL_TIMECOND_IFMODSINCE</span>，仅在页面 <strong><span>CURLOPT_TIMEVALUE</span></strong> 之后修改，才返回页面。没有修改则返回            <span>&quot;304 Not Modified&quot;</span> 头，假设设置了 <strong><span>CURLOPT_HEADER</span></strong> 为 <strong><span>true</span></strong>。<span class="parameter" style="color:#3A95FF">CURL_TIMECOND_IFUNMODSINCE</span>            则起相反的效果。使用 <strong><span>CURL_TIMECOND_NONE</span></strong> 忽略 <strong><span>CURLOPT_TIMEVALUE</span></strong> 并始终返回页面。默认为            <span class="parameter" style="color:#3A95FF">CURL_TIMECOND_IFMODSINCE</span>。           </td>           <td style="vertical-align: top;">            在 cURL 7.46.0 之前，默认值为 <strong><span>CURL_TIMECOND_IFMODSINCE</span></strong>。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_TIMEOUT</span></strong></td>           <td style="vertical-align: top;">            允许 cURL 函数执行的最长秒数。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_TIMEOUT_MS</span></strong></td>           <td style="vertical-align: top;">            设置cURL允许执行的最长毫秒数。                                     如果 libcurl 编译时使用系统标准的名称解析器（ standard system name resolver），那部分的连接仍旧使用以秒计的超时解决方案，最小超时时间还是一秒钟。           </td>           <td style="vertical-align: top;">            在 cURL 7.16.2 中被加入。           </td>          </tr>                    <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_TIMEVALUE</span></strong></td>           <td style="vertical-align: top;">            秒数，从 1970年1月1日开始。这个时间将由 <strong><span>CURLOPT_TIMECONDITION</span></strong> 使用。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_UPKEEP_INTERVAL_MS</span></strong></td>           <td style="vertical-align: top;">            Some protocols have &quot;connection upkeep&quot; mechanisms. These mechanisms usually send some traffic            on existing connections in order to keep them alive. This option defines the connection upkeep interval.            Currently, the only protocol with a connection upkeep mechanism is HTTP/2. When the connection upkeep            interval is exceeded, an HTTP/2 PING frame is sent on the connection.            Default is <span>60</span> seconds.           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_UPLOAD_BUFFERSIZE</span></strong></td>           <td style="vertical-align: top;">            Preferred buffer size in bytes for the cURL upload buffer.            The upload buffer size by default is 64 kilobytes. The maximum buffer size allowed to be set is 2 megabytes.            The minimum buffer size allowed to be set is 16 kilobytes.           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_MAX_RECV_SPEED_LARGE</span></strong></td>           <td style="vertical-align: top;">            如果下载速度超过了此速度(以每秒字节数来统计) ，即传输过程中累计的平均数，传输就会降速到这个参数的值。默认不限速。           </td>           <td style="vertical-align: top;">             cURL 7.15.5 中添加。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_MAX_SEND_SPEED_LARGE</span></strong></td>           <td style="vertical-align: top;">            如果上传的速度超过了此速度(以每秒字节数来统计)，即传输过程中累计的平均数             ，传输就会降速到这个参数的值。默认不限速。           </td>           <td style="vertical-align: top;">             cURL 7.15.5 中添加。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSH_AUTH_TYPES</span></strong></td>           <td style="vertical-align: top;">            A bitmask consisting of one or more of             <strong><span>CURLSSH_AUTH_PUBLICKEY</span></strong>,             <strong><span>CURLSSH_AUTH_PASSWORD</span></strong>,             <strong><span>CURLSSH_AUTH_HOST</span></strong>,             <strong><span>CURLSSH_AUTH_KEYBOARD</span></strong>. Set to             <strong><span>CURLSSH_AUTH_ANY</span></strong> to let libcurl pick one.           </td>           <td style="vertical-align: top;">            cURL 7.16.1 中添加。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_IPRESOLVE</span></strong></td>           <td style="vertical-align: top;">            允许程序选择想要解析的 IP 地址类别。只有在地址有多种 ip 类别的时候才能用，可以的值有：            <strong><span>CURL_IPRESOLVE_WHATEVER</span></strong>、            <strong><span>CURL_IPRESOLVE_V4</span></strong>、            <strong><span>CURL_IPRESOLVE_V6</span></strong>，默认是            <strong><span>CURL_IPRESOLVE_WHATEVER</span></strong>。           </td>           <td style="vertical-align: top;">            cURL 7.10.8 中添加。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_FTP_FILEMETHOD</span></strong></td>           <td style="vertical-align: top;">            告诉 curl 使用哪种方式来获取 FTP(s) 服务器上的文件。可能的值有：            <strong><span>CURLFTPMETHOD_DEFAULT</span></strong>、            <strong><span>CURLFTPMETHOD_MULTICWD</span></strong>、            <strong><span>CURLFTPMETHOD_NOCWD</span></strong> 和            <strong><span>CURLFTPMETHOD_SINGLECWD</span></strong>。           </td>           <td style="vertical-align: top;">            cURL 7.15.1 中添加。           </td>          </tr>         </tbody>               </table>      </p>      <p class="para">       对于下面的这些<span class="parameter" style="color:#3A95FF">option</span>，<span class="parameter" style="color:#3A95FF">value</span>应该被设置成 <span class="type" style="color:#EAB766">string</span>：       <table class="doctable informaltable">                 <thead>          <tr>           <th>选项</th>           <th>设置的<span class="parameter" style="color:#3A95FF">value</span></th>           <th>备注</th>          </tr>         </thead>         <tbody class="tbody">          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_ALTSVC</span></strong></td>           <td style="vertical-align: top;">            Pass the filename for cURL to use as the Alt-Svc cache file to read existing cache contents from and            possibly also write it back to a after a transfer, unless <strong><span>CURLALTSVC_READONLYFILE</span></strong>            is set via <strong><span>CURLOPT_ALTSVC_CTRL</span></strong>.           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_ALTSVC_CTRL</span></strong></td>           <td style="vertical-align: top;">            Populate the bitmask with the correct set of features to instruct cURL how to handle Alt-Svc for the            transfers using this handle. cURL only accepts Alt-Svc headers over HTTPS. It will also only complete            a request to an alternative origin if that origin is properly hosted over HTTPS.            Setting any bit will enable the alt-svc engine. The options are:            <strong><span>CURLALTSVC_H1</span></strong>,            <strong><span>CURLALTSVC_H2</span></strong>,            <strong><span>CURLALTSVC_H3</span></strong>, and            <strong><span>CURLALTSVC_READONLYFILE</span></strong>.           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_AWS_SIGV4</span></strong></td>           <td style="vertical-align: top;">            <p class="para">             Provides AWS V4 signature authentication on HTTP(S) header.            </p>            <p class="para">             This option overrides any other authentication types that have been set in             <strong><span>CURLOPT_HTTPAUTH</span></strong>. This method cannot be combined with other authentication types.            </p>           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_CAINFO</span></strong></td>           <td style="vertical-align: top;">            一个保存着1个或多个用来让服务端验证的证书的文件名。这个参数仅仅在和<strong><span>CURLOPT_SSL_VERIFYPEER</span></strong>一起使用时才有意义。            .           </td>           <td style="vertical-align: top;">            可能需要绝对路径。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_CAINFO_BLOB</span></strong></td>           <td style="vertical-align: top;">            The name of a PEM file holding one or more certificates to verify the            peer with. This option overrides <strong><span>CURLOPT_CAINFO</span></strong>.           </td>           <td style="vertical-align: top;">            Available as of PHP 8.2.0 and cURL 7.77.0           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_CAPATH</span></strong></td>           <td style="vertical-align: top;">            一个保存着多个CA证书的目录。这个选项是和<strong><span>CURLOPT_SSL_VERIFYPEER</span></strong>一起使用的。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_COOKIE</span></strong></td>           <td style="vertical-align: top;">            设定 HTTP 请求中<span>&quot;Cookie: &quot;</span>部分的内容。多个 cookie 用分号分隔，分号后带一个空格(例如， &quot;<span>fruit=apple; colour=red</span>&quot;)。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_COOKIEFILE</span></strong></td>           <td style="vertical-align: top;">            包含 cookie 数据的文件名，cookie 文件的格式可以是 Netscape 格式，或者只是纯 HTTP 头部风格，存入文件。如果文件名是空的，不会加载 cookie，但 cookie 的处理仍旧启用。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_COOKIEJAR</span></strong></td>           <td style="vertical-align: top;">            连接结束后，比如，调用 curl_close 后，保存 cookie 信息的文件。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_COOKIELIST</span></strong></td>           <td style="vertical-align: top;">            cookie 字符串（即 Netscape/Mozilla 的单行格式，或常规 HTTP 样式的 Set-Cookie 头）将单个 cookie 添加到内部 cookie 存储中。            <span>&quot;ALL&quot;</span> 擦除内存中保存的所有 cookie。            <span>&quot;SESS&quot;</span> 擦除内存中保存的所有会话 cookie。            <span>&quot;FLUSH&quot;</span> 将所有已知的 cookie 写入到 <strong><span>CURLOPT_COOKIEJAR</span></strong> 指定的文件。            <span>&quot;RELOAD&quot;</span> 从 <strong><span>CURLOPT_COOKIEFILE</span></strong> 指定的文件中加载所有 cookie。           </td>           <td style="vertical-align: top;">            自 cURL 7.14.1 起可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_CUSTOMREQUEST</span></strong></td>           <td style="vertical-align: top;"><p class="para">            HTTP 请求时，使用自定义的 Method 来代替<span>&quot;GET&quot;</span>或<span>&quot;HEAD&quot;</span>。对 <span>&quot;DELETE&quot;</span> 或者其他更隐蔽的 HTTP 请求有用。            有效值如 <span>&quot;GET&quot;</span>，<span>&quot;POST&quot;</span>，<span>&quot;CONNECT&quot;</span>等等；也就是说，不要在这里输入整行 HTTP 请求。例如输入<span>&quot;GET /index.html HTTP/1.0\r\n\r\n&quot;</span>是不正确的。            <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:              <p class="para">              不确定服务器支持这个自定义方法则不要使用它。             </p>            </p></blockquote>            </p>           </td>           <td style="vertical-align: top;">           </td>          </tr>                     <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_DEFAULT_PROTOCOL</span></strong></td>           <td style="vertical-align: top;"><p class="para">            URL不带协议的时候，使用的默认协议。           </p></td>           <td style="vertical-align: top;">            cURL 7.45.0 中添加，自 PHP 7.0.7 起有效。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_DNS_INTERFACE</span></strong></td>           <td style="vertical-align: top;"><p class="para">            Set the name of the network interface that the DNS resolver should bind to.            This must be an interface name (not an address).            </p></td>           <td style="vertical-align: top;">            Added in cURL 7.33.0. Available since PHP 7.0.7.           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_DNS_LOCAL_IP4</span></strong></td>           <td style="vertical-align: top;"><p class="para">            Set the local IPv4 address that the resolver should bind to. The argument            should contain a single numerical IPv4 address as a string.            </p></td>           <td style="vertical-align: top;">            Added in cURL 7.33.0. Available since PHP 7.0.7.           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_DNS_LOCAL_IP6</span></strong></td>           <td style="vertical-align: top;"><p class="para">            Set the local IPv6 address that the resolver should bind to. The argument            should contain a single numerical IPv6 address as a string.            </p></td>           <td style="vertical-align: top;">            Added in cURL 7.33.0. Available since PHP 7.0.7.           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_EGDSOCKET</span></strong></td>           <td style="vertical-align: top;">            类似<strong><span>CURLOPT_RANDOM_FILE</span></strong>，除了一个Entropy Gathering Daemon套接字。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_ENCODING</span></strong></td>           <td style="vertical-align: top;">            HTTP请求头中<span>&quot;Accept-Encoding: &quot;</span>的值。            这使得能够解码响应的内容。            支持的编码有<span>&quot;identity&quot;</span>，<span>&quot;deflate&quot;</span>和<span>&quot;gzip&quot;</span>。如果为空字符串<span>&quot;&quot;</span>，会发送所有支持的编码类型。           </td>           <td style="vertical-align: top;">            在 cURL 7.10 中被加入。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_FTPPORT</span></strong></td>           <td style="vertical-align: top;">            这个值将被用来获取供FTP&quot;PORT&quot;指令所需要的IP地址。            &quot;PORT&quot; 指令告诉远程服务器连接到我们指定的IP地址。这个字符串可以是纯文本的IP地址、主机名、一个网络接口名（UNIX下）或者只是一个&#039;-&#039;来使用默认的 IP 地址。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_HSTS</span></strong></td>           <td style="vertical-align: top;">            <p class="para">             HSTS (HTTP Strict Transport Security) cache file name.            </p>           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_HSTS_CTRL</span></strong></td>           <td style="vertical-align: top;">            <p class="para">             Controls HSTS (HTTP Strict Transport Security) behavior. Populate the bitmask with the correct set of             features to instruct cURL how to handle HSTS for the transfers using this handle.             <strong><span>CURLHSTS_ENABLE</span></strong> enables the in-memory HSTS cache. If the HSTS cache file is defined,             set <strong><span>CURLHSTS_READONLYFILE</span></strong> to make the file read-only.            </p>           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_INTERFACE</span></strong></td>           <td style="vertical-align: top;">            发送的网络接口（interface），可以是一个接口名、IP 地址或者是一个主机名。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_KEYPASSWD</span></strong></td>           <td style="vertical-align: top;">            使用 <strong><span>CURLOPT_SSLKEY</span></strong>             或 <strong><span>CURLOPT_SSH_PRIVATE_KEYFILE</span></strong> 私钥时候的密码。           </td>           <td style="vertical-align: top;">            在 cURL 7.16.1 中添加。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_KRB4LEVEL</span></strong></td>           <td style="vertical-align: top;">            KRB4 (Kerberos 4) 安全级别。下面的任何值都是有效的(从低到高的顺序)：<span>&quot;clear&quot;</span>、<span>&quot;safe&quot;</span>、<span>&quot;confidential&quot;</span>、<span>&quot;private&quot;.</span>。如果字符串以上这些，将使用<span>&quot;private&quot;</span>。            这个选项设置为 <strong><span>null</span></strong> 时将禁用 KRB4 安全认证。目前 KRB4 安全认证只能用于 FTP 传输。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_LOGIN_OPTIONS</span></strong></td>           <td style="vertical-align: top;">            Can be used to set protocol specific login options, such as the            preferred authentication mechanism via &quot;AUTH=NTLM&quot; or &quot;AUTH=*&quot;,            and should be used in conjunction with the            <strong><span>CURLOPT_USERNAME</span></strong> option.           </td>           <td style="vertical-align: top;">            Added in cURL 7.34.0. Available since PHP 7.0.7.           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PINNEDPUBLICKEY</span></strong></td>           <td style="vertical-align: top;">             Set the pinned public key.             The string can be the file name of your pinned public key. The file             format expected is &quot;PEM&quot; or &quot;DER&quot;. The string can also be any             number of base64 encoded sha256 hashes preceded by &quot;sha256//&quot; and             separated by &quot;;&quot;.           </td>           <td style="vertical-align: top;">            Added in cURL 7.39.0. Available since PHP 7.0.7.           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_POSTFIELDS</span></strong></td>           <td style="vertical-align: top;">            <span class="simpara">            在 HTTP “POST”操作中要发送的所有数据。            这个参数可以是 urlencoded 后的字符串，类似&#039;<span>para1=val1&amp;para2=val2&amp;...</span>&#039;，也可以使用一个以字段名为键值，字段数据为值的数组。            如果<span class="parameter" style="color:#3A95FF">value</span>是一个数组，<span>Content-Type</span>头将会被设置成<span>multipart/form-data</span>。            </span>            <span class="simpara">             可以使用 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlfile.php" class="classname">CURLFile</a></span> 或 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlstringfile.php" class="classname">CURLStringFile</a></span> 发送文件，在这种情况下，<span class="parameter" style="color:#3A95FF">value</span> 必须是数组。            </span>           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PRIVATE</span></strong></td>           <td style="vertical-align: top;">            Any data that should be associated with this cURL handle. This data            can subsequently be retrieved with the            <strong><span>CURLINFO_PRIVATE</span></strong> option of            <span class="function">{@link curl_getinfo()}</span>. cURL does nothing with this data.            When using a cURL multi handle, this private data is typically a            unique key to identify a standard cURL handle.           </td>           <td style="vertical-align: top;">            Added in cURL 7.10.3.            </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PRE_PROXY</span></strong></td>           <td style="vertical-align: top;">            Set a <span class="type" style="color:#EAB766">string</span> holding the host name or dotted numerical             IP address to be used as the preproxy that curl connects to before             it connects to the HTTP(S) proxy specified in the             <strong><span>CURLOPT_PROXY</span></strong> option for the upcoming request.            The preproxy can only be a SOCKS proxy and it should be prefixed with            <span>[scheme]://</span> to specify which kind of socks is used.            A numerical IPv6 address must be written within [brackets].            Setting the preproxy to an empty string explicitly disables the use of a preproxy.             To specify port number in this string, append <span>:[port]</span>            to the end of the host name. The proxy&#039;s port number may optionally be             specified with the separate option <strong><span>CURLOPT_PROXYPORT</span></strong>.             Defaults to using port 1080 for proxies if a port is not specified.           </td>           <td style="vertical-align: top;">            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY</span></strong></td>           <td style="vertical-align: top;">            HTTP 代理通道。           </td>           <td style="vertical-align: top;">           </td>          </tr>           <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_SERVICE_NAME</span></strong></td>           <td style="vertical-align: top;">            代理验证服务的名称。           </td>           <td style="vertical-align: top;">            在 cURL 7.43.0 中添加了 HTTP 代理，在 cURL 7.49.0 中添加了 SOCKS5 代理。自 PHP 7.0.7 起可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_CAINFO</span></strong></td>           <td style="vertical-align: top;">            The path to proxy Certificate Authority (CA) bundle. Set the path as a            <span class="type" style="color:#EAB766">string</span> naming a file holding one or more certificates to            verify the HTTPS proxy with.            This option is for connecting to an HTTPS proxy, not an HTTPS server.            Defaults set to the system path where libcurl&#039;s cacert bundle is assumed            to be stored.           </td>           <td style="vertical-align: top;">            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_CAINFO_BLOB</span></strong></td>           <td style="vertical-align: top;">            The name of a PEM file holding one or more certificates to verify the HTTPS proxy with.            This option is for connecting to an HTTPS proxy, not an HTTPS server.            Defaults set to the system path where libcurl&#039;s cacert bundle is assumed            to be stored.           </td>           <td style="vertical-align: top;">            Available as of PHP 8.2.0 and libcurl &gt;= cURL 7.77.0.           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_CAPATH</span></strong></td>           <td style="vertical-align: top;">            The directory holding multiple CA certificates to verify the HTTPS proxy with.           </td>           <td style="vertical-align: top;">            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_CRLFILE</span></strong></td>           <td style="vertical-align: top;">            Set the file name with the concatenation of CRL (Certificate Revocation List)             in PEM format to use in the certificate validation that occurs during             the SSL exchange.           </td>           <td style="vertical-align: top;">            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_KEYPASSWD</span></strong></td>           <td style="vertical-align: top;">            Set the string be used as the password required to use the             <strong><span>CURLOPT_PROXY_SSLKEY</span></strong> private key. You never needed a             passphrase to load a certificate but you need one to load your private key.            This option is for connecting to an HTTPS proxy, not an HTTPS server.           </td>           <td style="vertical-align: top;">            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_PINNEDPUBLICKEY</span></strong></td>           <td style="vertical-align: top;">            Set the pinned public key for HTTPS proxy. The string can be the file name             of your pinned public key. The file format expected is &quot;PEM&quot; or &quot;DER&quot;.             The string can also be any number of base64 encoded sha256 hashes preceded by             &quot;sha256//&quot; and separated by &quot;;&quot;           </td>           <td style="vertical-align: top;">            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_SSLCERT</span></strong></td>           <td style="vertical-align: top;">            The file name of your client certificate used to connect to the HTTPS proxy.             The default format is &quot;P12&quot; on Secure Transport and &quot;PEM&quot; on other engines,             and can be changed with <strong><span>CURLOPT_PROXY_SSLCERTTYPE</span></strong>.            With NSS or Secure Transport, this can also be the nickname of the certificate             you wish to authenticate with as it is named in the security database.             If you want to use a file from the current directory, please precede it with             &quot;./&quot; prefix, in order to avoid confusion with a nickname.           </td>           <td style="vertical-align: top;">            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_SSLCERTTYPE</span></strong></td>           <td style="vertical-align: top;">            The format of your client certificate used when connecting to an HTTPS proxy.            Supported formats are &quot;PEM&quot; and &quot;DER&quot;, except with Secure Transport.             OpenSSL (versions 0.9.3 and later) and Secure Transport             (on iOS 5 or later, or OS X 10.7 or later) also support &quot;P12&quot; for             PKCS#12-encoded files. Defaults to &quot;PEM&quot;.           </td>           <td style="vertical-align: top;">            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_SSL_CIPHER_LIST</span></strong></td>           <td style="vertical-align: top;">            The list of ciphers to use for the connection to the HTTPS proxy.             The list must be syntactically correct, it consists of one or more cipher             strings separated by colons. Commas or spaces are also acceptable separators             but colons are normally used, !, - and + can be used as operators.           </td>           <td style="vertical-align: top;">            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_TLS13_CIPHERS</span></strong></td>           <td style="vertical-align: top;">            The list of cipher suites to use for the TLS 1.3 connection to a proxy.            The list must be syntactically correct, it consists of one or more             cipher suite strings separated by colons. This option is currently used             only when curl is built to use OpenSSL 1.1.1 or later.             If you are using a different SSL backend you can try setting             TLS 1.3 cipher suites by using the <strong><span>CURLOPT_PROXY_SSL_CIPHER_LIST</span></strong> option.           </td>           <td style="vertical-align: top;">            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.61.0 起可用。使用 OpenSSL &gt;= 1.1.1 编译时可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_SSLKEY</span></strong></td>           <td style="vertical-align: top;">            The file name of your private key used for connecting to the HTTPS proxy.             The default format is &quot;PEM&quot; and can be changed with             <strong><span>CURLOPT_PROXY_SSLKEYTYPE</span></strong>.             (iOS and Mac OS X only) This option is ignored if curl was built against Secure Transport.           </td>           <td style="vertical-align: top;">            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。如果启用内置 TLS，则可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_SSLKEYTYPE</span></strong></td>           <td style="vertical-align: top;">            The format of your private key. Supported formats are &quot;PEM&quot;, &quot;DER&quot; and &quot;ENG&quot;.           </td>           <td style="vertical-align: top;">            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_TLSAUTH_PASSWORD</span></strong></td>           <td style="vertical-align: top;">            The password to use for the TLS authentication method specified with the             <strong><span>CURLOPT_PROXY_TLSAUTH_TYPE</span></strong> option. Requires that the             <strong><span>CURLOPT_PROXY_TLSAUTH_USERNAME</span></strong> option to also be set.           </td>           <td style="vertical-align: top;">            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_TLSAUTH_TYPE</span></strong></td>           <td style="vertical-align: top;">            The method of the TLS authentication used for the HTTPS connection. Supported method is &quot;SRP&quot;.            <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:              <p class="para">              Secure Remote Password (SRP) authentication for TLS provides mutual authentication               if both sides have a shared secret. To use TLS-SRP, you must also set the               <strong><span>CURLOPT_PROXY_TLSAUTH_USERNAME</span></strong> and               <strong><span>CURLOPT_PROXY_TLSAUTH_PASSWORD</span></strong> options.             </p>            </p></blockquote>           </td>           <td style="vertical-align: top;">            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXY_TLSAUTH_USERNAME</span></strong></td>           <td style="vertical-align: top;">            The username to use for the HTTPS proxy TLS authentication method specified with the            <strong><span>CURLOPT_PROXY_TLSAUTH_TYPE</span></strong> option. Requires that the            <strong><span>CURLOPT_PROXY_TLSAUTH_PASSWORD</span></strong> option to also be set.           </td>           <td style="vertical-align: top;">            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXYUSERPWD</span></strong></td>           <td style="vertical-align: top;">            一个用来连接到代理的 <span>&quot;[username]:[password]&quot;</span> 格式的字符串。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_RANDOM_FILE</span></strong></td>           <td style="vertical-align: top;">            一个被用来生成 SSL 随机数种子的文件名。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_RANGE</span></strong></td>           <td style="vertical-align: top;">            以<span>&quot;X-Y&quot;</span>的形式，其中X和Y都是可选项获取数据的范围，以字节计。HTTP传输线程也支持几个这样的重复项中间用逗号分隔如<span>&quot;X-Y,N-M&quot;</span>。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_REFERER</span></strong></td>           <td style="vertical-align: top;">            在HTTP请求头中<span>&quot;Referer: &quot;</span>的内容。           </td>           <td style="vertical-align: top;">           </td>          </tr>                    <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SASL_AUTHZID</span></strong></td>           <td style="vertical-align: top;">            The authorization identity (authzid) for the transfer. Only applicable to the PLAIN SASL            authentication mechanism where it is optional. When not specified, only the authentication identity            (authcid) as specified by the username will be sent to the server, along with the password.            The server will derive the authzid from the authcid when not provided, which it will then use internally.           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SERVICE_NAME</span></strong></td>           <td style="vertical-align: top;">            验证服务的名称           </td>           <td style="vertical-align: top;">             cURL 7.43.0 起添加，自 PHP 7.0.7 有效。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSH_HOST_PUBLIC_KEY_MD5</span></strong></td>           <td style="vertical-align: top;">            包含 32 位长的 16 进制数值。这个字符串应该是远程主机公钥（public key） 的 MD5 校验值。在不匹配的时候 libcurl 会拒绝连接。            此选项仅用于  SCP 和 SFTP 的传输。           </td>           <td style="vertical-align: top;">            cURL 7.17.1 中添加。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSH_HOST_PUBLIC_KEY_SHA256</span></strong></td>           <td style="vertical-align: top;">            Base64-encoded SHA256 hash of the remote host&#039;s public key.            The transfer will fail if the given hash does not match the hash the remote host provides.           </td>           <td style="vertical-align: top;">           </td>          </tr>                    <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSH_PUBLIC_KEYFILE</span></strong></td>           <td style="vertical-align: top;">            The file name for your public key. If not used, libcurl defaults to             $HOME/.ssh/id_dsa.pub if the HOME environment variable is set,             and just &quot;id_dsa.pub&quot; in the current directory if HOME is not set.           </td>           <td style="vertical-align: top;">            Added in cURL 7.16.1.            </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSH_PRIVATE_KEYFILE</span></strong></td>           <td style="vertical-align: top;">            The file name for your private key. If not used, libcurl defaults to             $HOME/.ssh/id_dsa if the HOME environment variable is set,             and just &quot;id_dsa&quot; in the current directory if HOME is not set.             If the file is password-protected, set the password with             <strong><span>CURLOPT_KEYPASSWD</span></strong>.           </td>           <td style="vertical-align: top;">            Added in cURL 7.16.1.            </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSL_CIPHER_LIST</span></strong></td>           <td style="vertical-align: top;">            一个SSL的加密算法列表。例如<span>RC4-SHA</span>和<span>TLSv1</span>都是可用的加密列表。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSL_EC_CURVES</span></strong></td>           <td style="vertical-align: top;">            A colon delimited list of elliptic curve algorithms. For example,            <span>X25519:P-521</span> is a valid list of two elliptic curves.            This option defines the client&#039;s key exchange algorithms in the SSL handshake,            if the SSL backend cURL is built to use supports it.           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSLCERT</span></strong></td>           <td style="vertical-align: top;">            一个包含 PEM 格式证书的文件名。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSLCERTPASSWD</span></strong></td>           <td style="vertical-align: top;">            使用<strong><span>CURLOPT_SSLCERT</span></strong>证书需要的密码。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSLCERTTYPE</span></strong></td>           <td style="vertical-align: top;">            证书的类型。支持的格式有<span>&quot;PEM&quot;</span> (默认值), <span>&quot;DER&quot;</span>和<span>&quot;ENG&quot;</span>。           </td>           <td style="vertical-align: top;">            在 cURL 7.9.3中 被加入。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSLENGINE</span></strong></td>           <td style="vertical-align: top;">            用来在<strong><span>CURLOPT_SSLKEY</span></strong>中指定的SSL私钥的加密引擎变量。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSLENGINE_DEFAULT</span></strong></td>           <td style="vertical-align: top;">            用来做非对称加密操作的变量。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSLKEY</span></strong></td>           <td style="vertical-align: top;">            包含 SSL 私钥的文件名。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSLKEYPASSWD</span></strong></td>           <td style="vertical-align: top;"><p class="para">            在 <strong><span>CURLOPT_SSLKEY</span></strong>中指定了的SSL私钥的密码。            <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:              <p class="para">              由于这个选项包含了敏感的密码信息，记得保证这个PHP脚本的安全。             </p>            </p></blockquote>            </p></td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SSLKEYTYPE</span></strong></td>           <td style="vertical-align: top;">            <strong><span>CURLOPT_SSLKEY</span></strong>中规定的私钥的加密类型，支持的密钥类型为<span>&quot;PEM&quot;</span>(默认值)、<span>&quot;DER&quot;</span>和<span>&quot;ENG&quot;</span>。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_TLS13_CIPHERS</span></strong></td>           <td style="vertical-align: top;">            用于 TLS 1.3 连接的加密套件列表。列表必须在语法上正确，它由一个或多个用冒号分隔的加密套件字符串组成。当前仅当 curl 编译为使用 OpenSSL 1.1.1            或更高版本时才使用此选项。如果使用不同的 SSL 后端，<strong><span>CURLOPT_SSL_CIPHER_LIST</span></strong> 选项设置 TLS 1.3 加密套件。           </td>           <td style="vertical-align: top;">            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.61.0 起可用。使用 OpenSSL &gt;= 1.1.1 编译时可用。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_UNIX_SOCKET_PATH</span></strong></td>           <td style="vertical-align: top;">            使用 Unix 套接字作为连接，并用指定的 <span class="type" style="color:#EAB766">string</span> 作为路径。           </td>           <td style="vertical-align: top;">            cURL 7.40.0 中添加， PHP 7.0.7 起有效。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_URL</span></strong></td>           <td style="vertical-align: top;">            需要获取的 URL 地址，也可以在<span class="function">{@link curl_init()}</span> 初始化会话的时候。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_USERAGENT</span></strong></td>           <td style="vertical-align: top;">            在HTTP请求中包含一个<span>&quot;User-Agent: &quot;</span>头的字符串。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_USERNAME</span></strong></td>           <td style="vertical-align: top;">            用于身份验证的用户名。           </td>           <td style="vertical-align: top;">            cURL 7.19.1 中添加。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PASSWORD</span></strong></td>           <td style="vertical-align: top;">            用于身份验证的密码。           </td>           <td style="vertical-align: top;">            cURL 7.19.1 中添加。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_USERPWD</span></strong></td>           <td style="vertical-align: top;">            传递一个连接中需要的用户名和密码，格式为：<span>&quot;[username]:[password]&quot;</span>。           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_XOAUTH2_BEARER</span></strong></td>           <td style="vertical-align: top;">            指定 OAuth 2.0 access token。           </td>           <td style="vertical-align: top;">            cURL 7.33.0 中添加，自 PHP 7.0.7 添加。           </td>          </tr>         </tbody>               </table>      </p>      <p class="para">以下<span class="parameter" style="color:#3A95FF">option</span>，<span class="parameter" style="color:#3A95FF">value</span>应该被设置成数组：       <table class="doctable informaltable">                 <thead>          <tr>           <th>选项</th>           <th>可选<span class="parameter" style="color:#3A95FF">value</span>值</th>           <th>备注</th>          </tr>         </thead>         <tbody class="tbody">          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_CONNECT_TO</span></strong></td>           <td style="vertical-align: top;">            连接到指定的主机和端口，替换 URL 中的主机和端口。接受指定字符串格式的数组：            <span>HOST:PORT:CONNECT-TO-HOST:CONNECT-TO-PORT</span>。           </td>           <td style="vertical-align: top;">             cURL 7.49.0 中添加， PHP 7.0.7 起有效。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_HTTP200ALIASES</span></strong></td>           <td style="vertical-align: top;">            HTTP 200 响应码数组，数组中的响应码被认为是正确的响应，而非错误。           </td>           <td style="vertical-align: top;">            在 cURL 7.10.3 中被加入。           </td>          </tr>                                                            <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_HTTPHEADER</span></strong></td>           <td style="vertical-align: top;">            设置 HTTP 头字段的数组。格式：            <span>             array(&#039;Content-type: text/plain&#039;, &#039;Content-length: 100&#039;)            </span>           </td>           <td style="vertical-align: top;">           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_POSTQUOTE</span></strong></td>           <td style="vertical-align: top;">            在 FTP 请求执行完成后，在服务器上执行的一组array格式的 FTP 命令。           </td>           <td style="vertical-align: top;">           </td>          </tr>                    <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROXYHEADER</span></strong></td>           <td style="vertical-align: top;">            传给代理的自定义 HTTP 头。           </td>           <td style="vertical-align: top;">             cURL 7.37.0 中添加，自 PHP 7.0.7 添加。           </td>          </tr>                              <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_QUOTE</span></strong></td>           <td style="vertical-align: top;">            一组先于 FTP 请求的在服务器上执行的FTP命令。           </td>           <td style="vertical-align: top;">           </td>          </tr>                    <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_RESOLVE</span></strong></td>           <td style="vertical-align: top;">            提供自定义地址，指定了主机和端口。            包含主机、端口和 ip 地址的字符串，组成 array 的，每个元素以冒号分隔。格式：            <span>             array(&quot;example.com:80:127.0.0.1&quot;)            </span>           </td>           <td style="vertical-align: top;">            在 cURL 7.21.3 中添加。           </td>          </tr>         </tbody>               </table>      </p>      <p class="para">以下 <span class="parameter" style="color:#3A95FF">option</span>，<span class="parameter" style="color:#3A95FF">value</span>应该被设置成流资源        （例如使用<span class="function">{@link fopen()}</span>）：       <table class="doctable informaltable">                 <thead>          <tr>           <th>选项</th>           <th>可选<span class="parameter" style="color:#3A95FF">value</span>值</th>          </tr>         </thead>         <tbody class="tbody">                                                  <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_FILE</span></strong></td>           <td style="vertical-align: top;">            设置输出文件，默认为<span>STDOUT</span> (浏览器)。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_INFILE</span></strong></td>           <td style="vertical-align: top;">            上传文件时需要读取的文件。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_STDERR</span></strong></td>           <td style="vertical-align: top;">            错误输出的地址，取代默认的<span>STDERR</span>。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_WRITEHEADER</span></strong></td>           <td style="vertical-align: top;">            设置 header 部分内容的写入的文件地址。           </td>          </tr>         </tbody>               </table>      </p>      <p class="para">       以下<span class="parameter" style="color:#3A95FF">option</span> 的 <span class="parameter" style="color:#3A95FF">value</span>应该是有效的函数或者闭包：       <table class="doctable informaltable">                 <thead>          <tr>           <th>选项</th>           <th>设置 <span class="parameter" style="color:#3A95FF">value</span> 为</th>           <th>笔记</th>          </tr>         </thead>         <tbody class="tbody">          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_HEADERFUNCTION</span></strong></td>           <td style="vertical-align: top;">            设置一个回调函数，这个函数有两个参数，第一个是cURL的资源句柄，第二个是输出的 header 数据。header数据的输出必须依赖这个函数，返回已写入的数据大小。           </td>           <td class="empty">&nbsp;</td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PASSWDFUNCTION</span></strong></td>           <td style="vertical-align: top;">            设置一个回调函数，有三个参数，第一个是cURL的资源句柄，第二个是一个密码提示符，第三个参数是密码长度允许的最大值。返回密码的值。           </td>           <td>从 PHP 7.3.0 开始移除。</td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_PROGRESSFUNCTION</span></strong></td>           <td style="vertical-align: top;">            <p class="para">            设置一个回调函数，有五个参数，第一个是cURL的资源句柄，第二个是预计要下载的总字节（bytes）数。第三个是目前下载的字节数，第四个是预计传输中总上传字节数，第五个是目前上传的字节数。            </p>            <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:              <p class="para">              只有设置 <strong><span>CURLOPT_NOPROGRESS</span></strong>              选项为 <strong><span>false</span></strong> 时才会调用这个回调函数。             </p>            </p></blockquote>              <p class="para">               返回非零值将中断传输。               传输将设置 <strong><span>CURLE_ABORTED_BY_CALLBACK</span></strong> 错误。            </p>           </td>           <td class="empty">&nbsp;</td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_READFUNCTION</span></strong></td>           <td style="vertical-align: top;">            回调函数名。该函数应接受三个参数。第一个是 cURL resource；第二个是通过选项 <strong><span>CURLOPT_INFILE</span></strong> 传给 cURL 的 stream resource；第三个参数是最大可以读取的数据的数量。回调函数必须返回一个字符串，长度小于或等于请求的数据量（第三个参数）。一般从传入的 stream resource 读取。返回空字符串作为 <span>EOF</span>（文件结束） 信号。           </td>           <td class="empty">&nbsp;</td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_WRITEFUNCTION</span></strong></td>           <td style="vertical-align: top;">            回调函数名。该函数应接受两个参数。第一个是 cURL resource；第二个是要写入的数据字符串。数据必须在函数中被保存。            函数必须准确返回写入数据的字节数，否则传输会被一个错误所中断。           </td>           <td class="empty">&nbsp;</td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_XFERINFOFUNCTION</span></strong></td>           <td style="vertical-align: top;">            接受两个参数的回调。与 <strong><span>CURLOPT_PROGRESSFUNCTION</span></strong> 具有相似的目的，但更现代并且是 cURL 的首选选项。           </td>           <td style="vertical-align: top;">            在 7.32.0 中添加。 从 PHP 8.2.0 开始可用。           </td>          </tr>         </tbody>               </table>      </p>      <p class="para">       其他值：       <table class="doctable informaltable">                 <thead>          <tr>           <th>Option</th>           <th>设置 <span class="parameter" style="color:#3A95FF">value</span> 为</th>          </tr>         </thead>         <tbody class="tbody">          <tr>           <td style="vertical-align: top;"><strong><span>CURLOPT_SHARE</span></strong></td>           <td style="vertical-align: top;"> <span class="function">{@link curl_share_init()}</span> 返回的结果。            使 cURL 可以处理共享句柄里的数据。           </td>          </tr>         </tbody>               </table>      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-setopt-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-setopt-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">handle</span> 现在接受 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="classname">CurlHandle</a></span>  实例；之前接受 <span class="type" style="color:#EAB766">resource</span>。 </td></tr>      <tr>       <td>7.3.15、7.4.3</td>       <td>        引入 <strong><span>CURLOPT_HTTP09_ALLOWED</span></strong>。       </td>      </tr>      <tr>       <td>7.3.0</td>       <td>        引入 <strong><span>CURLOPT_ABSTRACT_UNIX_SOCKET</span></strong>、<strong><span>CURLOPT_KEEP_SENDING_ON_ERROR</span></strong>、<strong><span>CURLOPT_PRE_PROXY</span></strong>、<strong><span>CURLOPT_PROXY_CAINFO</span></strong>、<strong><span>CURLOPT_PROXY_CAPATH</span></strong>、<strong><span>CURLOPT_PROXY_CRLFILE</span></strong>、<strong><span>CURLOPT_PROXY_KEYPASSWD</span></strong>、<strong><span>CURLOPT_PROXY_PINNEDPUBLICKEY</span></strong>、<strong><span>CURLOPT_PROXY_SSLCERT</span></strong>、<strong><span>CURLOPT_PROXY_SSLCERTTYPE</span></strong>、<strong><span>CURLOPT_PROXY_SSL_CIPHER_LIST</span></strong>、<strong><span>CURLOPT_PROXY_SSLKEY</span></strong>、<strong><span>CURLOPT_PROXY_SSLKEYTYPE</span></strong>、<strong><span>CURLOPT_PROXY_SSL_OPTIONS</span></strong>、<strong><span>CURLOPT_PROXY_SSL_VERIFYHOST</span></strong>、<strong><span>CURLOPT_PROXY_SSL_VERIFYPEER</span></strong>、<strong><span>CURLOPT_PROXY_SSLVERSION</span></strong>、<strong><span>CURLOPT_PROXY_TLSAUTH_PASSWORD</span></strong>、<strong><span>CURLOPT_PROXY_TLSAUTH_TYPE</span></strong>、<strong><span>CURLOPT_PROXY_TLSAUTH_USERNAME</span></strong>、<strong><span>CURLOPT_SOCKS5_AUTH</span></strong>、<strong><span>CURLOPT_SUPPRESS_CONNECT_HEADERS</span></strong>、<strong><span>CURLOPT_DISALLOW_USERNAME_IN_URL</span></strong>、<strong><span>CURLOPT_DNS_SHUFFLE_ADDRESSES</span></strong>、<strong><span>CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS</span></strong>、<strong><span>CURLOPT_HAPROXYPROTOCOL</span></strong>、<strong><span>CURLOPT_PROXY_TLS13_CIPHERS</span></strong>、<strong><span>CURLOPT_SSH_COMPRESSION</span></strong>、<strong><span>CURLOPT_TIMEVALUE_LARGE</span></strong>        和 <strong><span>CURLOPT_TLS13_CIPHERS</span></strong>。       </td>      </tr>      <tr>       <td>7.0.7</td>       <td>        引入 <strong><span>CURL_HTTP_VERSION_2</span></strong>、<strong><span>CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE</span></strong>、        <strong><span>CURL_HTTP_VERSION_2TLS</span></strong>、<strong><span>CURL_REDIR_POST_301</span></strong>、        <strong><span>CURL_REDIR_POST_302</span></strong>、<strong><span>CURL_REDIR_POST_303</span></strong>、        <strong><span>CURL_REDIR_POST_ALL</span></strong>、<strong><span>CURL_VERSION_KERBEROS5</span></strong>、        <strong><span>CURL_VERSION_PSL</span></strong>、<strong><span>CURL_VERSION_UNIX_SOCKETS</span></strong>、        <strong><span>CURLAUTH_NEGOTIATE</span></strong>、<strong><span>CURLAUTH_NTLM_WB</span></strong>、        <strong><span>CURLFTP_CREATE_DIR</span></strong>、<strong><span>CURLFTP_CREATE_DIR_NONE</span></strong>、        <strong><span>CURLFTP_CREATE_DIR_RETRY</span></strong>、<strong><span>CURLHEADER_SEPARATE</span></strong>、        <strong><span>CURLHEADER_UNIFIED</span></strong>、<strong><span>CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE</span></strong>、        <strong><span>CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE</span></strong>、<strong><span>CURLMOPT_MAX_HOST_CONNECTIONS</span></strong>、        <strong><span>CURLMOPT_MAX_PIPELINE_LENGTH</span></strong>、<strong><span>CURLMOPT_MAX_TOTAL_CONNECTIONS</span></strong>、        <strong><span>CURLOPT_CONNECT_TO</span></strong>、<strong><span>CURLOPT_DEFAULT_PROTOCOL</span></strong>、        <strong><span>CURLOPT_DNS_INTERFACE</span></strong>、<strong><span>CURLOPT_DNS_LOCAL_IP4</span></strong>、        <strong><span>CURLOPT_DNS_LOCAL_IP6</span></strong>、<strong><span>CURLOPT_EXPECT_100_TIMEOUT_MS</span></strong>、        <strong><span>CURLOPT_HEADEROPT</span></strong>、<strong><span>CURLOPT_LOGIN_OPTIONS</span></strong>、        <strong><span>CURLOPT_PATH_AS_IS</span></strong>、<strong><span>CURLOPT_PINNEDPUBLICKEY</span></strong>、        <strong><span>CURLOPT_PIPEWAIT</span></strong>、<strong><span>CURLOPT_PROXY_SERVICE_NAME</span></strong>、        <strong><span>CURLOPT_PROXYHEADER</span></strong>、<strong><span>CURLOPT_SASL_IR</span></strong>、        <strong><span>CURLOPT_SERVICE_NAME</span></strong>、<strong><span>CURLOPT_SSL_ENABLE_ALPN</span></strong>、        <strong><span>CURLOPT_SSL_ENABLE_NPN</span></strong>、<strong><span>CURLOPT_SSL_FALSESTART</span></strong>、        <strong><span>CURLOPT_SSL_VERIFYSTATUS</span></strong>、<strong><span>CURLOPT_STREAM_WEIGHT</span></strong>、        <strong><span>CURLOPT_TCP_FASTOPEN</span></strong>、<strong><span>CURLOPT_TFTP_NO_OPTIONS</span></strong>、        <strong><span>CURLOPT_UNIX_SOCKET_PATH</span></strong>、<strong><span>CURLOPT_XOAUTH2_BEARER</span></strong>、        <strong><span>CURLPROTO_SMB</span></strong>、<strong><span>CURLPROTO_SMBS</span></strong>、        <strong><span>CURLPROXY_HTTP_1_0</span></strong>、<strong><span>CURLSSH_AUTH_AGENT</span></strong> 和        <strong><span>CURLSSLOPT_NO_REVOKE</span></strong>。       </td>      </tr>     </tbody>       </table>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-setopt-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 初始化一个新的cURL会话并获取一个网页</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建一个新cURL资源<br /></span><span style="color: #9876AA">$ch </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 设置URL和相应的选项<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_URL</span><span style="color: #007700">, </span><span style="color: #DD0000">"http://www.example.com/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_HEADER</span><span style="color: #007700">, </span><span style="color: #9876AA">false</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 抓取URL并把它传递给浏览器<br /></span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//关闭cURL资源，并且释放系统资源<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.curl-setopt-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    传递一个数组到<strong><span>CURLOPT_POSTFIELDS</span></strong>，cURL会把数据编码成    <em>multipart/form-data</em>，而然传递一个URL-encoded字符串时，数据会被编码成    <em>application/x-www-form-urlencoded</em>。   </p>  </p></blockquote> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-setopt-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_setopt_array()} - 为 cURL 传输会话批量设置选项</span></li>    <li class="member"><span class="classname"><a href="https://www.php.net/manual/zh/class.curlfile.php" class="classname">CURLFile</a></span></li>    <li class="member"><span class="classname"><a href="https://www.php.net/manual/zh/class.curlstringfile.php" class="classname">CURLStringFile</a></span></li>   </ul>  </span> </div> </div>
 * @return bool true on success or false on failure.*/
function curl_setopt(#[LanguageLevelTypeAware(['8.0' => 'CurlHandle'], default: 'resource')] $handle, int $option, mixed $value): bool {}

/**
*<div id="function.curl-setopt-array" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_setopt_array</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.3, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_setopt_array</span> &mdash; <span class="dc-title">为 cURL 传输会话批量设置选项</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-setopt-array-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_setopt_array</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="type CurlHandle" style="color:#EAB766">CurlHandle</a></span> <span class="parameter" style="color:#3A95FF">$handle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$options</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   为 cURL 传输会话批量设置选项。这个函数对于需要设置大量的 cURL 选项是非常有用的，不需要重复地调用 <span class="function">{@link curl_setopt()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-setopt-array-parameters">  <h3 class="title">参数</h3>  <span>   <dl>    <dt><span class="parameter" style="color:#3A95FF">handle</span></dt><dd><p class="para">由 <span class="function">{@link curl_init()}</span> 返回的 cURL 句柄。</p></dd>         <dt><span class="parameter" style="color:#3A95FF">options</span></dt>     <dd>      <p class="para">       一个 <span class="type" style="color:#EAB766">array</span> 用来确定将被设置的选项及其值。数组的键值必须是有效的 <span class="function">{@link curl_setopt()}</span> 常量或者是它们对等的整数值。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-setopt-array-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果全部的选项都被成功设置，返回 <strong><span>true</span></strong>。如果选项不能被成功设置，马上返回 <strong><span>false</span></strong>，忽略其后的任何在 <span class="parameter" style="color:#3A95FF">options</span> 数组中的选项。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-setopt-array-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">handle</span> 现在接受 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="classname">CurlHandle</a></span>  实例；之前接受 <span class="type" style="color:#EAB766">resource</span>。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-setopt-array-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1      初始化新的 cURL 会话并抓取 web 页面    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建新 cURL 资源<br /></span><span style="color: #9876AA">$ch </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 设置 URL 和相应的选项<br /></span><span style="color: #9876AA">$options </span><span style="color: #007700">= array(</span><span style="color: #9876AA">CURLOPT_URL </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'http://www.example.com/'</span><span style="color: #007700">,<br />                 </span><span style="color: #9876AA">CURLOPT_HEADER </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">false<br />                </span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">curl_setopt_array</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">$options</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 抓取 URL 并把它传递给浏览器<br /></span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 关闭 cURL 资源，并且释放系统资源<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.curl-setopt-array-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    就 <span class="function">{@link curl_setopt()}</span> 来说，传递数组到 <strong><span>CURLOPT_POST</span></strong> 将会把数据以    <em>multipart/form-data</em> 的方式编码，然而传递 URL-encoded 字符串将会以    <em>application/x-www-form-urlencoded</em> 的方式对数据进行编码。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-setopt-array-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_setopt()} - 设置 cURL 传输选项</span></li>   </ul>  </span> </div></div>
 * @return bool true if all options were successfully set. If an option could*/
function curl_setopt_array(#[LanguageLevelTypeAware(['8.0' => 'CurlHandle'], default: 'resource')] $handle, array $options): bool {}

/**
*<div id="function.curl-share-close" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_share_close</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_share_close</span> &mdash; <span class="dc-title">关闭 cURL 共享句柄</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-share-close-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_share_close</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlsharehandle.php" class="type CurlShareHandle" style="color:#EAB766">CurlShareHandle</a></span> <span class="parameter" style="color:#3A95FF">$share_handle</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  此函数无效。在 PHP 8.0.0 之前，用于关闭资源。 </p></p></blockquote>  <p class="para">   关闭 cURL 共享句柄并且释放所有的资源。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-share-close-parameters">  <h3 class="title">参数</h3>  <dl>   <dt><span class="parameter" style="color:#3A95FF">share_handle</span></dt><dd><span>A cURL share handle returned by<span class="function">{@link curl_share_init()}</span>.</span></dd>  </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-share-close-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-share-close-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">share_handle</span> expects a <span class="classname"><a href="https://www.php.net/manual/zh/class.curlsharehandle.php" class="classname">CurlShareHandle</a></span>  instance now; previously, a <span class="type" style="color:#EAB766">resource</span> was expected. </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-share-close-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function">{@link curl_share_setopt()}</span> 示例</strong></p>    <div class="example-contents"><p>     以下示例将会创建 cURL 共享句柄，并且往其中添加两个 cURL 句柄，最后共享这两个 cURL 句柄的 cookie 数据运行。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Create cURL share handle and set it to share cookie data<br /></span><span style="color: #9876AA">$sh </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_share_init</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">curl_share_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$sh</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLSHOPT_SHARE</span><span style="color: #007700">, </span><span style="color: #9876AA">CURL_LOCK_DATA_COOKIE</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Initialize the first cURL handle and assign the share handle to it<br /></span><span style="color: #9876AA">$ch1 </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://example.com/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_SHARE</span><span style="color: #007700">, </span><span style="color: #9876AA">$sh</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Execute the first cURL handle<br /></span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Initialize the second cURL handle and assign the share handle to it<br /></span><span style="color: #9876AA">$ch2 </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://php.net/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_SHARE</span><span style="color: #007700">, </span><span style="color: #9876AA">$sh</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Execute the second cURL handle<br />//  all cookies from $ch1 handle are shared with $ch2 handle<br /></span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Close the cURL share handle<br /></span><span style="color: #9876AA">curl_share_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$sh</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Close the cURL handles<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-share-close-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_share_init()} - 初始化 cURL 共享句柄</span></li>   </ul>  </span> </div></div>
 * @return void*/
function curl_share_close(#[LanguageLevelTypeAware(['8.0' => 'CurlShareHandle'], default: 'resource')] $share_handle): void {}

/**
*<div id="function.curl-share-init" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_share_init</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_share_init</span> &mdash; <span class="dc-title">初始化 cURL 共享句柄</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-share-init-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_share_init</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlsharehandle.php" class="type CurlShareHandle" style="color:#EAB766">CurlShareHandle</a></span></div>  <p class="para rdfs-comment">   允许在 cURL 句柄之间共享数据。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-share-init-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-share-init-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 cURL 共享句柄。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-share-init-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       此函数现在返回 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlsharehandle.php" class="classname">CurlShareHandle</a></span> 实例，之前返回 <span class="type" style="color:#EAB766">resource</span>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-share-init-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">curl_share_init()</strong></span> 示例</strong></p>    <div class="example-contents"><p>     以下示例将会创建 cURL 共享句柄，并且往其中添加两个 cURL 句柄，最后用共享的 cookie 数据运行它们。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建 cURL 共享句柄，并设置共享 cookie 数据<br /></span><span style="color: #9876AA">$sh </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_share_init</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">curl_share_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$sh</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLSHOPT_SHARE</span><span style="color: #007700">, </span><span style="color: #9876AA">CURL_LOCK_DATA_COOKIE</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 初始化第一个 cURL 句柄，并将它设置到共享句柄<br /></span><span style="color: #9876AA">$ch1 </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://example.com/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_SHARE</span><span style="color: #007700">, </span><span style="color: #9876AA">$sh</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 执行第一个 cURL 句柄<br /></span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 初始化第二个 cURL 句柄，并将它设置到共享句柄<br /></span><span style="color: #9876AA">$ch2 </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://php.net/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_SHARE</span><span style="color: #007700">, </span><span style="color: #9876AA">$sh</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 执行第二个 cURL 句柄<br />//  all cookies from $ch1 handle are shared with $ch2 handle<br /></span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 关闭 cURL 共享句柄<br /></span><span style="color: #9876AA">curl_share_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$sh</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 关闭 cURL 共享句柄<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-share-init-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_share_setopt()} - 为 cURL 共享句柄设置选项</span></li>    <li class="member"><span class="function">{@link curl_share_close()} - 关闭 cURL 共享句柄</span></li>   </ul>  </span> </div></div>
 * @return resource|CurlShareHandle Returns resource of type "cURL Share Handle".*/
function curl_share_init() {}

/**
*<div id="function.curl-share-setopt" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_share_setopt</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_share_setopt</span> &mdash; <span class="dc-title">为 cURL 共享句柄设置选项</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-share-setopt-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_share_setopt</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlsharehandle.php" class="type CurlShareHandle" style="color:#EAB766">CurlShareHandle</a></span> <span class="parameter" style="color:#3A95FF">$share_handle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$option</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   为指定的 cURL 共享句柄设置选项。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-share-setopt-parameters">  <h3 class="title">参数</h3>  <dl>   <dt><span class="parameter" style="color:#3A95FF">share_handle</span></dt><dd><span>A cURL share handle returned by<span class="function">{@link curl_share_init()}</span>.</span></dd>       <dt><span class="parameter" style="color:#3A95FF">option</span></dt>    <dd>     <p class="para">      <table class="doctable informaltable">                 <thead>          <tr>           <th>Option</th>           <th>Description</th>          </tr>         </thead>         <tbody class="tbody">          <tr>           <td style="vertical-align: top;"><strong><span>CURLSHOPT_SHARE</span></strong></td>           <td style="vertical-align: top;">               指定要共享的数据类型。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLSHOPT_UNSHARE</span></strong></td>           <td style="vertical-align: top;">               指定不再共享的数据类型。           </td>          </tr>         </tbody>               </table>     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">value</span></dt>    <dd>     <p class="para">      <table class="doctable informaltable">                 <thead>          <tr>           <th>Value</th>           <th>Description</th>          </tr>         </thead>         <tbody class="tbody">          <tr>           <td style="vertical-align: top;"><strong><span>CURL_LOCK_DATA_COOKIE</span></strong></td>           <td style="vertical-align: top;">               共享 cookie 数据。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURL_LOCK_DATA_DNS</span></strong></td>           <td style="vertical-align: top;">               共享 DNS 缓存。注意，当你使用 cURL 多句柄时，默认所有添加在同一个多句柄的句柄都将会共享 DNS 缓存。            </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURL_LOCK_DATA_SSL_SESSION</span></strong></td>           <td style="vertical-align: top;">               共享 SSL 的 session ID, 在重连同样的服务器时减少 SSL 握手时间。注意，SSL 的 session ID 在同一个的句柄中默认是重复使用的。           </td>          </tr>         </tbody>               </table>     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-share-setopt-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-share-setopt-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">share_handle</span> expects a <span class="classname"><a href="https://www.php.net/manual/zh/class.curlsharehandle.php" class="classname">CurlShareHandle</a></span>  instance now; previously, a <span class="type" style="color:#EAB766">resource</span> was expected. </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-share-setopt-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">curl_share_setopt()</strong></span> 示例</strong></p>    <div class="example-contents"><p>     以下示例将会创建 cURL 共享句柄，并且往其中添加两个 cURL 句柄，最后共享这两个 cURL 句柄的 cookie 数据运行。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Create cURL share handle and set it to share cookie data<br /></span><span style="color: #9876AA">$sh </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_share_init</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">curl_share_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$sh</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLSHOPT_SHARE</span><span style="color: #007700">, </span><span style="color: #9876AA">CURL_LOCK_DATA_COOKIE</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Initialize the first cURL handle and assign the share handle to it<br /></span><span style="color: #9876AA">$ch1 </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://example.com/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_SHARE</span><span style="color: #007700">, </span><span style="color: #9876AA">$sh</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Execute the first cURL handle<br /></span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Initialize the second cURL handle and assign the share handle to it<br /></span><span style="color: #9876AA">$ch2 </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://php.net/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_SHARE</span><span style="color: #007700">, </span><span style="color: #9876AA">$sh</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Execute the second cURL handle<br />//  all cookies from $ch1 handle are shared with $ch2 handle<br /></span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Close the cURL share handle<br /></span><span style="color: #9876AA">curl_share_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$sh</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Close the cURL handles<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div></div>
 * @return bool*/
function curl_share_setopt(#[LanguageLevelTypeAware(['8.0' => 'CurlShareHandle'], default: 'resource')] $share_handle, int $option, mixed $value): bool {}

/**
*<div id="function.curl-strerror" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_strerror</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_strerror</span> &mdash; <span class="dc-title">返回错误代码的字符串描述</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-strerror-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_strerror</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$error_code</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">string</span></span></div>  <p class="para rdfs-comment">   返回指定错误代码的文本错误信息描述。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-strerror-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">error_code</span></dt>    <dd>     <span>      <a href="http://curl.haxx.se/libcurl/c/libcurl-errors.html" class="link external">&raquo;&nbsp;cURL 错误代码</a>中的常量之一。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-strerror-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回错误信息描述，无效的错误代码返回 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-strerror-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function">{@link curl_errno()}</span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 以错拼的 URL 协议创建 curl 句柄<br /></span><span style="color: #9876AA">$ch </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">(</span><span style="color: #DD0000">"htp://example.com/"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 发送请求<br /></span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 检测错误，显示错误信息<br /></span><span style="color: #007700">if(</span><span style="color: #9876AA">$errno </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_errno</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">)) {<br />    </span><span style="color: #9876AA">$error_message </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_strerror</span><span style="color: #007700">(</span><span style="color: #9876AA">$errno</span><span style="color: #007700">);<br />    echo </span><span style="color: #DD0000">"cURL error (</span><span style="color: #007700">{</span><span style="color: #9876AA">$errno</span><span style="color: #007700">}</span><span style="color: #DD0000">):\n </span><span style="color: #007700">{</span><span style="color: #9876AA">$error_message</span><span style="color: #007700">}</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// 关闭句柄<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>cURL error (1):<br> Unsupported protocol<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-strerror-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_errno()} - 返回最后一次的错误代码</span></li>    <li class="member"><span class="function">{@link curl_error()} - 返回当前会话最后一次错误的字符串</span></li>    <li class="member"><a href="http://curl.haxx.se/libcurl/c/libcurl-errors.html" class="link external">&raquo;&nbsp;Curl 错误代码</a></li>   </ul>  </span> </div></div>
 * @return string|null Returns error description or <b>NULL</b> for invalid error code.*/
function curl_strerror(int $error_code): ?string {}

/**
*<div id="function.curl-unescape" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_unescape</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_unescape</span> &mdash; <span class="dc-title">解码指定 URL 编码的字符串</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-unescape-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_unescape</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="type CurlHandle" style="color:#EAB766">CurlHandle</a></span> <span class="parameter" style="color:#3A95FF">$handle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   该函数解码指定 URL 编码的字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-unescape-parameters">  <h3 class="title">参数</h3>  <dl>   <dt><span class="parameter" style="color:#3A95FF">handle</span></dt><dd><span>由 <span class="function">{@link curl_init()}</span> 返回的 cURL 句柄。</span></dd>       <dt><span class="parameter" style="color:#3A95FF">string</span></dt>    <dd>     <p class="para">      需要解码的 URL 编码字符串。     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-unescape-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回解码后的字符串 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-unescape-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">handle</span> 现在接受 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="classname">CurlHandle</a></span>  实例；之前接受 <span class="type" style="color:#EAB766">resource</span>。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-unescape-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function">{@link curl_escape()}</span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建 curl 句柄<br /></span><span style="color: #9876AA">$ch </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">(</span><span style="color: #DD0000">'http://example.com/redirect.php'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 发送 HTTP 请求并且遵循重定向<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_FOLLOWLOCATION</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 获取最后的有效 URL<br /></span><span style="color: #9876AA">$effective_url </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_getinfo</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLINFO_EFFECTIVE_URL</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// 结果： "http://example.com/show_location.php?loc=M%C3%BCnchen"<br /><br />// 解码这个 URL<br /></span><span style="color: #9876AA">$effective_url_decoded </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_unescape</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">$effective_url</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// "http://example.com/show_location.php?loc=München"<br /><br />// 关闭句柄<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.curl-unescape-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="function"><strong style="color:#CC7832">curl_unescape()</strong></span> 不会将加号 (+) 解码成空格。而 <span class="function">{@link urldecode()}</span> 会。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-unescape-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_escape()} - 使用 URL 编码给定的字符串</span></li>    <li class="member"><span class="function">{@link urlencode()} - 编码 URL 字符串</span></li>    <li class="member"><span class="function">{@link urldecode()} - 解码已编码的 URL 字符串</span></li>    <li class="member"><span class="function">{@link rawurlencode()} - 按照 RFC 3986 对 URL 进行编码</span></li>    <li class="member"><span class="function">{@link rawurldecode()} - 对已编码的 URL 字符串进行解码</span></li>   </ul>  </span> </div></div>
 * @return string|false Returns decoded string or FALSE on failure.*/
function curl_unescape(#[LanguageLevelTypeAware(['8.0' => 'CurlHandle'], default: 'resource')] $handle, string $string): string|false {}

/**
*<div id="function.curl-exec" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_exec</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.2, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_exec</span> &mdash; <span class="dc-title">执行 cURL 会话</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-exec-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_exec</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="type CurlHandle" style="color:#EAB766">CurlHandle</a></span> <span class="parameter" style="color:#3A95FF">$handle</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">bool</span></span></div>  <p class="para rdfs-comment">   执行指定 cURL 会话。  </p>  <p class="para">   这个函数应该在初始化 cURL 会话并且设置所有选项后调用。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-exec-parameters">  <h3 class="title">参数</h3>  <span>   <dl>    <dt><span class="parameter" style="color:#3A95FF">handle</span></dt><dd><p class="para">由 <span class="function">{@link curl_init()}</span> 返回的 cURL 句柄。</p></dd>   </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-exec-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。 然而，如果{@link 设置}了   <strong><span>CURLOPT_RETURNTRANSFER</span></strong> 选项，将会在成功时返回结果，失败时返回 <strong><span>false</span></strong>。  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数可能返回布尔值<strong><span>false</span></strong>，但也可能返回等同于 <strong><span>false</span></strong> 的非布尔值。请阅读 <a href="https://www.php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">===运算符</a>来测试此函数的返回值。</p></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    注意：指示错误的响应状态码（例如 <span>404    Not found</span>）不会视为失败。这种情况可以使用 <span class="function">{@link curl_getinfo()}</span> 来检查。   </p>  </p></blockquote> </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-exec-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">handle</span> 现在接受 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="classname">CurlHandle</a></span>  实例；之前接受 <span class="type" style="color:#EAB766">resource</span>。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-exec-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 获取网页</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建新的 cURL 资源<br /></span><span style="color: #9876AA">$ch </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 设置 URL 和相应的选项<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_URL</span><span style="color: #007700">, </span><span style="color: #DD0000">"http://www.example.com/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_HEADER</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 抓取 URL 并把它传递给浏览器<br /></span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 关闭 cURL 资源，并且释放系统资源<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-exec-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_multi_exec()} - 运行当前 cURL 句柄的子连接</span></li>   </ul>  </span> </div></div>
 * @return string|bool true on success or false on failure. However, if the CURLOPT_RETURNTRANSFER*/
function curl_exec(#[LanguageLevelTypeAware(['8.0' => 'CurlHandle'], default: 'resource')] $handle): string|bool {}

/**
*<div id="function.curl-getinfo" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_getinfo</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_getinfo</span> &mdash; <span class="dc-title">获取一个cURL连接资源句柄的信息</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-getinfo-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_getinfo</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="type CurlHandle" style="color:#EAB766">CurlHandle</a></span> <span class="parameter" style="color:#3A95FF">$handle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$option</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   获取最后一次传输的相关信息。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-getinfo-parameters">  <h3 class="title">参数</h3>  <span>   <dl>    <dt><span class="parameter" style="color:#3A95FF">handle</span></dt><dd><p class="para">由 <span class="function">{@link curl_init()}</span> 返回的 cURL 句柄。</p></dd>         <dt><span class="parameter" style="color:#3A95FF">option</span></dt>     <dd>      <p class="para">       这个参数可能是以下常量之一:       <ul class="itemizedlist">        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_EFFECTIVE_URL</span></strong>——最后一个有效的 URL         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_HTTP_CODE</span></strong>——最后的响应代码。从 cURL 7.10.8 开始，这是 <strong><span>CURLINFO_RESPONSE_CODE</span></strong> 的旧别名         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_FILETIME</span></strong>——启用了 <strong><span>CURLOPT_FILETIME</span></strong> 后检索文档的远程时间；如果返回 -1，则文档的时间未知         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_TOTAL_TIME</span></strong>——最后一次传输的总事务时间（以秒为单位）         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_NAMELOOKUP_TIME</span></strong>——到名称解析完成所需的时间（以秒为单位）         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_CONNECT_TIME</span></strong>——建立连接所需的时间（以秒为单位）         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_PRETRANSFER_TIME</span></strong>——从开始到文件准备传输所需的时间（以秒为单位）         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_STARTTRANSFER_TIME</span></strong>——从开始到传输第一个字节所需的时间（以秒为单位）         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_REDIRECT_COUNT</span></strong>——启用 <strong><span>CURLOPT_FOLLOWLOCATION</span></strong> 选项的重定向次数         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_REDIRECT_TIME</span></strong>——在启用 <strong><span>CURLOPT_FOLLOWLOCATION</span></strong> 选项的情况下，最终事务开始之前所有重定向步骤的时间（以秒为单位）         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_REDIRECT_URL</span></strong>——禁用 <strong><span>CURLOPT_FOLLOWLOCATION</span></strong> 选项：重定向 URL 在上次事务中找到，接下来应该手动请求。在启用 <strong><span>CURLOPT_FOLLOWLOCATION</span></strong> 选项的情况下，此返回值为空。在这种情况下，重定向的 URL 可以在 <strong><span>CURLINFO_EFFECTIVE_URL</span></strong> 中获取         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_PRIMARY_IP</span></strong>——最近连接的 IP 地址         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_PRIMARY_PORT</span></strong>——最近一次连接的目标端口         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_LOCAL_IP</span></strong>——最近连接的本地（源）IP 地址         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_LOCAL_PORT</span></strong>——最近连接的本地（源）端口         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_SIZE_UPLOAD</span></strong>——以字节为单位返回上传数据量的总值         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_SIZE_DOWNLOAD</span></strong>——以字节为单位返回下载数据量的总值         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_SPEED_DOWNLOAD</span></strong>——平均下载速度         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_SPEED_UPLOAD</span></strong>——平均上传速度         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_HEADER_SIZE</span></strong>——检索到的所有 header 大小         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_HEADER_OUT</span></strong>——发送请求的字符串。为此，通过调用 <span class="function">{@link curl_setopt()}</span> 将 <strong><span>CURLINFO_HEADER_OUT</span></strong> 选项添加到句柄         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_REFERER</span></strong> - The referrer header         </span>        </li>        <li class="listitem">         <span class="simpara">        <strong><span>CURLINFO_REQUEST_SIZE</span></strong>——已发出请求的总大小，当前仅针对 HTTP 请求         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_RETRY_AFTER</span></strong> - The information from the <span>Retry-After:</span> header, or zero if there was no valid header.         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_SSL_VERIFYRESULT</span></strong>——通过设置 <strong><span>CURLOPT_SSL_VERIFYPEER</span></strong> 请求的 SSL 认证验证结果         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_CONTENT_LENGTH_DOWNLOAD</span></strong>——从 <span>Content-Length:</span> 字段中读取的下载内容长度         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_CONTENT_LENGTH_UPLOAD</span></strong>——上传指定大小         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_CONTENT_TYPE</span></strong>——<span>Content-Type:</span>所请求文档的类型。NULL 表示服务器没有发送有效的 <span>Content-Type:</span> header         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_PRIVATE</span></strong>——与此 cURL 句柄关联的私有数据，之前使用 <span class="function">{@link curl_setopt()}</span> 的 <strong><span>CURLOPT_PRIVATE</span></strong> 选项设置         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_PROXY_ERROR</span></strong> - The detailed (SOCKS) proxy error code when the most recent          transfer returned a <strong><span>CURLE_PROXY</span></strong> error. The returned value will be exactly one          of the <strong><span>CURLPX_<span class="replaceable">*</span></span></strong> values.          The error code will be <strong><span>CURLPX_OK</span></strong> if no          response code was available.         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_RESPONSE_CODE</span></strong>——最后的响应代码         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_HTTP_CONNECTCODE</span></strong>——CONNECT 响应代码         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_HTTPAUTH_AVAIL</span></strong>——位掩码表示先前响应可用的身份验证方法         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_PROXYAUTH_AVAIL</span></strong>——位掩码表示先前响应可用的代理身份验证方法         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_OS_ERRNO</span></strong>——来自连接失败的 Errno。该数字特定于 OS 和指定系统。         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_NUM_CONNECTS</span></strong> - curl 为实现先前的传输所必须创建的连接数         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_SSL_ENGINES</span></strong>——支持 OpenSSL 加密引擎         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_COOKIELIST</span></strong>——所有已知的 cookie         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_FTP_ENTRY_PATH</span></strong>——FTP 服务器中的入口路径         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_APPCONNECT_TIME</span></strong>——从开始到SSL/SSH 完成与远程主机的连接/握手所花费的时间（以秒为单位）         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_CERTINFO</span></strong>——TLS 证书链         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_CONDITION_UNMET</span></strong>——未满足时间条件的信息         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_RTSP_CLIENT_CSEQ</span></strong>——下一个 RTSP 客户端 CSeq         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_RTSP_CSEQ_RECV</span></strong>——最近检索到的 CSeq         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_RTSP_SERVER_CSEQ</span></strong>——下一个 RTSP 服务器端 CSeq         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_RTSP_SESSION_ID</span></strong>——RTSP 会话 ID         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_CONTENT_LENGTH_DOWNLOAD_T</span></strong>——下载的内容长度。此值从 <span>Content-Length:</span> 字段读取。如果大小未知则为 -1         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_CONTENT_LENGTH_UPLOAD_T</span></strong>——上传的指定大小。如果未知则为 -1         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_HTTP_VERSION</span></strong> - 返回最后一次 HTTP 连接中使用的版本。返回值将是定义的 <strong><span>CURL_HTTP_VERSION_*</span></strong> 常量之一，如果无法确定版本，则返回 0。         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_PROTOCOL</span></strong> - 在最后一个 HTTP 连接中使用的协议。返回值将会是 <strong><span>CURLPROTO_*</span></strong> 中的一个值         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_PROXY_SSL_VERIFYRESULT</span></strong> - 请求的证书验证结果（使用 <strong><span>CURLOPT_PROXY_SSL_VERIFYPEER</span></strong> 选项）。仅用于 HTTPS 代理         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_SCHEME</span></strong> - 最近连接使用的 URL 协议         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_SIZE_DOWNLOAD_T</span></strong> - 已下载的总字节数。此数值仅针对最新的传输，并且在每次新的传输时都将会重置         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_SIZE_UPLOAD_T</span></strong>——上传的总字节数         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_SPEED_DOWNLOAD_T</span></strong> - curl 测量的完整下载速度的平均值，以字节/秒为单位         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_SPEED_UPLOAD_T</span></strong> - curl 测量的完整上传速度的平均值，以字节/秒为单位         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_APPCONNECT_TIME_T</span></strong> - 从开始到与远程主机 SSL/SSH 连接/握手完成所经过的时间，以微秒为单位         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_CONNECT_TIME_T</span></strong> - 从开始到与远程主机（或代理）建立连接完成所经过的总时间，以微秒为单位         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_FILETIME_T</span></strong> - 检索的文档的远程时间（Unix 时间戳），是 <strong><span>CURLINFO_FILETIME</span></strong> 的替代值，允许具有 32 bit 变量的系统提取超出 32 bit 时间戳范围之外的日期         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_NAMELOOKUP_TIME_T</span></strong>——从开始到名称解析完成的时间（以微秒为单位）         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_PRETRANSFER_TIME_T</span></strong> - 从开始到文件传输即将开始的时间，以微秒为单位         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_REDIRECT_TIME_T</span></strong> - 在最终事务开始之前，所有重定向步骤（包括名称查找、连接、预传输和传输）所花费的总时间，以微秒为单位。         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_STARTTRANSFER_TIME_T</span></strong>——从开始到接收到第一个字节所花费的时间（以微秒为单位）         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>CURLINFO_TOTAL_TIME_T</span></strong>——上次传输的总时间（以微秒为单位），包括名称解析、TCP 连接等。         </span>        </li>       </ul>      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-getinfo-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果指定 <span class="parameter" style="color:#3A95FF">option</span>，将返回它的值。否则将返回包含下列元素的关联数组（分别对应 <span class="parameter" style="color:#3A95FF">option</span>），失败时为  <strong><span>false</span></strong>：   <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      &quot;url&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;content_type&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;http_code&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;header_size&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;request_size&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;filetime&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;ssl_verify_result&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;redirect_count&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;total_time&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;namelookup_time&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;connect_time&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;pretransfer_time&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;size_upload&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;size_download&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;speed_download&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;speed_upload&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;download_content_length&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;upload_content_length&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;starttransfer_time&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;redirect_time&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;certinfo&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;primary_ip&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;primary_port&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;local_ip&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;local_port&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;redirect_url&quot;     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;request_header&quot;（只有在之前调用 <span class="function">{@link curl_setopt()}</span> 设置 <strong><span>CURLINFO_HEADER_OUT</span></strong> 后才会设置）     </span>    </li>   </ul>   注意，私有数据不包含在关联数组中，必须使用 <strong><span>CURLINFO_PRIVATE</span></strong> 选项单独检索。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-getinfo-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.2.0</td>       <td>        引入 <strong><span>CURLINFO_PROXY_ERROR</span></strong>、<strong><span>CURLINFO_REFERER</span></strong>、<strong><span>CURLINFO_RETRY_AFTER</span></strong>。       </td>      </tr>      <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">handle</span> 现在接受 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="classname">CurlHandle</a></span>  实例；之前接受 <span class="type" style="color:#EAB766">resource</span>。 </td></tr>      <tr>       <td>8.0.0</td>       <td>        <span class="parameter" style="color:#3A95FF">option</span> 现在可为 null；之前默认值是 <span>0</span>。       </td>      </tr>      <tr>       <td>7.3.0</td>       <td>        引入 <strong><span>CURLINFO_CONTENT_LENGTH_DOWNLOAD_T</span></strong>、        <strong><span>CURLINFO_CONTENT_LENGTH_UPLOAD_T</span></strong>、         <strong><span>CURLINFO_HTTP_VERSION</span></strong>、        <strong><span>CURLINFO_PROTOCOL</span></strong>、        <strong><span>CURLINFO_PROXY_SSL_VERIFYRESULT</span></strong>、        <strong><span>CURLINFO_SCHEME</span></strong>、        <strong><span>CURLINFO_SIZE_DOWNLOAD_T</span></strong>、        <strong><span>CURLINFO_SIZE_UPLOAD_T</span></strong>、        <strong><span>CURLINFO_SPEED_DOWNLOAD_T</span></strong>、        <strong><span>CURLINFO_SPEED_UPLOAD_T</span></strong>、        <strong><span>CURLINFO_APPCONNECT_TIME_T</span></strong>、        <strong><span>CURLINFO_CONNECT_TIME_T</span></strong>、        <strong><span>CURLINFO_FILETIME_T</span></strong>、        <strong><span>CURLINFO_NAMELOOKUP_TIME_T</span></strong>、        <strong><span>CURLINFO_PRETRANSFER_TIME_T</span></strong>、        <strong><span>CURLINFO_REDIRECT_TIME_T</span></strong>、        <strong><span>CURLINFO_STARTTRANSFER_TIME_T</span></strong>、        <strong><span>CURLINFO_TOTAL_TIME_T</span></strong>。       </td>      </tr>     </tbody>       </table>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-getinfo-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">curl_getinfo()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建 cURL 句柄<br /></span><span style="color: #9876AA">$ch </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">(</span><span style="color: #DD0000">'http://www.example.com/'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 执行<br /></span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 检查是否有错误发生<br /></span><span style="color: #007700">if (!</span><span style="color: #9876AA">curl_errno</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">)) {<br />  </span><span style="color: #9876AA">$info </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_getinfo</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br />  echo </span><span style="color: #DD0000">'Took '</span><span style="color: #007700">, </span><span style="color: #9876AA">$info</span><span style="color: #007700">[</span><span style="color: #DD0000">'total_time'</span><span style="color: #007700">], </span><span style="color: #DD0000">' seconds to send a request to '</span><span style="color: #007700">, </span><span style="color: #9876AA">$info</span><span style="color: #007700">[</span><span style="color: #DD0000">'url'</span><span style="color: #007700">], </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// 关闭句柄<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 使用 <span class="parameter" style="color:#3A95FF">option</span> 参数的 <span class="function"><strong style="color:#CC7832">curl_getinfo()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建 cURL 句柄<br /></span><span style="color: #9876AA">$ch </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">(</span><span style="color: #DD0000">'http://www.example.com/'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 执行<br /></span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 检测 HTTP 状态码<br /></span><span style="color: #007700">if (!</span><span style="color: #9876AA">curl_errno</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">)) {<br />  switch (</span><span style="color: #9876AA">$http_code </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_getinfo</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLINFO_HTTP_CODE</span><span style="color: #007700">)) {<br />    case </span><span style="color: #9876AA">200</span><span style="color: #007700">:  </span><span style="color: #FF8000"># OK<br />      </span><span style="color: #007700">break;<br />    default:<br />      echo </span><span style="color: #DD0000">'Unexpected HTTP code: '</span><span style="color: #007700">, </span><span style="color: #9876AA">$http_code</span><span style="color: #007700">, </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />  }<br />}<br /><br /></span><span style="color: #FF8000">// 关闭句柄<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.curl-getinfo-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    如果重新使用句柄，则保留此函数收集的信息。这意味着除非此函数在内部覆盖统计信息，否则将返回以前的信息。   </p>  </p></blockquote> </div></div>
 * @return mixed If <em><code class="parameter">$option</code></em> is given, returns its value as a string.*/
function curl_getinfo(#[LanguageLevelTypeAware(['8.0' => 'CurlHandle'], default: 'resource')] $handle, ?int $option): mixed {}

/**
*<div id="function.curl-error" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_error</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.3, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_error</span> &mdash; <span class="dc-title">返回当前会话最后一次错误的字符串</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-error-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_error</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="type CurlHandle" style="color:#EAB766">CurlHandle</a></span> <span class="parameter" style="color:#3A95FF">$handle</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   返回最近一次 cURL 操作的文本错误详情。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-error-parameters">  <h3 class="title">参数</h3>  <span>   <dl>    <dt><span class="parameter" style="color:#3A95FF">handle</span></dt><dd><p class="para">由 <span class="function">{@link curl_init()}</span> 返回的 cURL 句柄。</p></dd>   </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-error-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回错误信息，或者如果没有任何错误发生就返回 <span>&#039;&#039;</span> (空字符串)。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-error-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">handle</span> 现在接受 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="classname">CurlHandle</a></span>  实例；之前接受 <span class="type" style="color:#EAB766">resource</span>。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-error-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">curl_error()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建 cURL 句柄，指向一个不存在的位置<br /></span><span style="color: #9876AA">$ch </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">(</span><span style="color: #DD0000">'http://404.php.net/'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_RETURNTRANSFER</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">);<br /><br />if(</span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">) === </span><span style="color: #9876AA">false</span><span style="color: #007700">)<br />{<br />    echo </span><span style="color: #DD0000">'Curl error: ' </span><span style="color: #007700">. </span><span style="color: #9876AA">curl_error</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br />}<br />else<br />{<br />    echo </span><span style="color: #DD0000">'操作完成没有任何错误'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// 关闭句柄<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-error-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_errno()} - 返回最后一次的错误代码</span></li>    <li class="member"><a href="http://curl.haxx.se/libcurl/c/libcurl-errors.html" class="link external">&raquo;&nbsp;Curl 错误代码</a></li>   </ul>  </span> </div></div>
 * @return string the error message or '' (the empty string) if no*/
function curl_error(#[LanguageLevelTypeAware(['8.0' => 'CurlHandle'], default: 'resource')] $handle): string {}

/**
*<div id="function.curl-errno" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_errno</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.3, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_errno</span> &mdash; <span class="dc-title">返回最后一次的错误代码</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-errno-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_errno</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="type CurlHandle" style="color:#EAB766">CurlHandle</a></span> <span class="parameter" style="color:#3A95FF">$handle</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   返回最后一次 cURL 操作的错误代码。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-errno-parameters">  <h3 class="title">参数</h3>  <span>   <dl>    <dt><span class="parameter" style="color:#3A95FF">handle</span></dt><dd><p class="para">由 <span class="function">{@link curl_init()}</span> 返回的 cURL 句柄。</p></dd>   </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-errno-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回错误代码或在没有错误发生时返回 <span>0</span> (零)。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-errno-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">handle</span> 现在接受 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="classname">CurlHandle</a></span>  实例；之前接受 <span class="type" style="color:#EAB766">resource</span>。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-errno-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">curl_errno()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建 cURL 句柄，指向不存在的位置<br /></span><span style="color: #9876AA">$ch </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">(</span><span style="color: #DD0000">'http://404.php.net/'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 执行<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_RETURNTRANSFER</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 检查是否有错误发生<br /></span><span style="color: #007700">if(</span><span style="color: #9876AA">curl_errno</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">))<br />{<br />    echo </span><span style="color: #DD0000">'Curl error: ' </span><span style="color: #007700">. </span><span style="color: #9876AA">curl_error</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #FF8000">// 关闭句柄<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-errno-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_error()} - 返回当前会话最后一次错误的字符串</span></li>    <li class="member"><a href="http://curl.haxx.se/libcurl/c/libcurl-errors.html" class="link external">&raquo;&nbsp;Curl 错误代码</a></li>   </ul>  </span> </div></div>
 * @return int the error number or 0 (zero) if no error*/
function curl_errno(#[LanguageLevelTypeAware(['8.0' => 'CurlHandle'], default: 'resource')] $handle): int {}

/**
*<div id="function.curl-escape" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_escape</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_escape</span> &mdash; <span class="dc-title">使用 URL 编码给定的字符串</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-escape-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_escape</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="type CurlHandle" style="color:#EAB766">CurlHandle</a></span> <span class="parameter" style="color:#3A95FF">$handle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   该函数使用 URL 根据 <a href="http://www.faqs.org/rfcs/rfc3986" class="link external">&raquo;&nbsp;RFC 3986</a> 编码给定的字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-escape-parameters">  <h3 class="title">参数</h3>  <dl>   <dt><span class="parameter" style="color:#3A95FF">handle</span></dt><dd><span>由 <span class="function">{@link curl_init()}</span> 返回的 cURL 句柄。</span></dd>       <dt><span class="parameter" style="color:#3A95FF">string</span></dt>    <dd>     <p class="para">      需要编码的字符串。     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-escape-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回编码后的字符串 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-escape-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">handle</span> 现在接受 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="classname">CurlHandle</a></span>  实例；之前接受 <span class="type" style="color:#EAB766">resource</span>。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-escape-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">curl_escape()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建 curl 句柄<br /></span><span style="color: #9876AA">$ch </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 把编码后的字符串当做 GET 参数<br /></span><span style="color: #9876AA">$location </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_escape</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #DD0000">'Hofbräuhaus / München'</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// 结果： Hofbr%C3%A4uhaus%20%2F%20M%C3%BCnchen<br /><br />// 用编码好的字符串组装 URL<br /></span><span style="color: #9876AA">$url </span><span style="color: #007700">= </span><span style="color: #DD0000">"http://example.com/add_location.php?location=</span><span style="color: #007700">{</span><span style="color: #9876AA">$location</span><span style="color: #007700">}</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// 结果：http://example.com/add_location.php?location=Hofbr%C3%A4uhaus%20%2F%20M%C3%BCnchen<br /><br />// 发送 HTTP 请求并关闭句柄<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_URL</span><span style="color: #007700">, </span><span style="color: #9876AA">$url</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_RETURNTRANSFER</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-escape-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_unescape()} - 解码指定 URL 编码的字符串</span></li>    <li class="member"><span class="function">{@link urlencode()} - 编码 URL 字符串</span></li>    <li class="member"><span class="function">{@link rawurlencode()} - 按照 RFC 3986 对 URL 进行编码</span></li>    <li class="member"><a href="http://www.faqs.org/rfcs/rfc3986" class="link external">&raquo;&nbsp;RFC 3986</a></li>   </ul>  </span> </div></div>
 * @return string|false Returns escaped string or FALSE on failure.*/
function curl_escape(#[LanguageLevelTypeAware(['8.0' => 'CurlHandle'], default: 'resource')] $handle, string $string): string|false {}

/**
 * (PHP 5 >= 5.5.0) <br/>
 * Create a CURLFile object
 * @link https://secure.php.net/manual/en/curlfile.construct.php
 * @param string $filename <p> Path to the file which will be uploaded.</p>
 * @param string|null $mime_type <p>Mimetype of the file.</p>
 * @param string|null $posted_filename <p>Name of the file.</p>
 * @return CURLFile
 * Returns a {@link https://secure.php.net/manual/en/class.curlfile.php CURLFile} object.
 * @since 5.5
 */
#[Pure]
function curl_file_create(string $filename, ?string $mime_type = null, ?string $posted_filename = null): CURLFile {}

/**
*<div id="function.curl-close" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_close</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.2, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_close</span> &mdash; <span class="dc-title">关闭 cURL 会话</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-close-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_close</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="type CurlHandle" style="color:#EAB766">CurlHandle</a></span> <span class="parameter" style="color:#3A95FF">$handle</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  此函数无效。在 PHP 8.0.0 之前，用于关闭资源。 </p></p></blockquote>  <p class="para">   关闭 cURL 会话并且释放所有资源。也会删除 cURL 句柄 <span class="parameter" style="color:#3A95FF">handle</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-close-parameters">  <h3 class="title">参数</h3>  <span>   <dl>    <dt><span class="parameter" style="color:#3A95FF">handle</span></dt><dd><p class="para">由 <span class="function">{@link curl_init()}</span> 返回的 cURL 句柄。</p></dd>   </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-close-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-close-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">handle</span> 现在接受 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="classname">CurlHandle</a></span>  实例；之前接受 <span class="type" style="color:#EAB766">resource</span>。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-close-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 初始化新 cURL 会话并获取网页</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建新 cURL 资源<br /></span><span style="color: #9876AA">$ch </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 设置 URL 和相应的选项<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_URL</span><span style="color: #007700">, </span><span style="color: #DD0000">"http://www.example.com/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_HEADER</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 抓取 URL 并把它传递给浏览器<br /></span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 关闭 cURL 资源，并且释放系统资源<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-close-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_init()} - 初始化 cURL 会话</span></li>    <li class="member"><span class="function">{@link curl_multi_close()} - 关闭一组 cURL 句柄</span></li>   </ul>  </span> </div></div>
 * @return void*/
function curl_close(#[LanguageLevelTypeAware(['8.0' => 'CurlHandle'], default: 'resource')] $handle): void {}

/**
*<div id="function.curl-multi-init" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_multi_init</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_multi_init</span> &mdash; <span class="dc-title">返回新 cURL 批处理句柄</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-multi-init-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_multi_init</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlmultihandle.php" class="type CurlMultiHandle" style="color:#EAB766">CurlMultiHandle</a></span></div>  <p class="para rdfs-comment">   允许异步处理多个 cURL 句柄。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-multi-init-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-multi-init-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 cURL 批处理句柄。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-multi-init-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       成功时，此函数返回 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlmultihandle.php" class="classname">CurlMultiHandle</a></span> 实例；之前返回 <span class="type" style="color:#EAB766">resource</span>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-multi-init-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">curl_multi_init()</strong></span> 示例</strong></p>    <div class="example-contents"><p>     这个示例将会创建两个 cURL 句柄，把它们加到批处理句柄，然后异步运行它们。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建一对 cURL 资源<br /></span><span style="color: #9876AA">$ch1 </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$ch2 </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 设置 URL 和相应的选项<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_URL</span><span style="color: #007700">, </span><span style="color: #DD0000">"http://lxr.php.net/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_HEADER</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_URL</span><span style="color: #007700">, </span><span style="color: #DD0000">"http://www.php.net/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_HEADER</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 创建批处理 cURL 句柄<br /></span><span style="color: #9876AA">$mh </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_multi_init</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 增加两个句柄<br /></span><span style="color: #9876AA">curl_multi_add_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">,</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_multi_add_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">,</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 执行批处理句柄<br /></span><span style="color: #007700">do {<br />    </span><span style="color: #9876AA">$status </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_multi_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">, </span><span style="color: #9876AA">$active</span><span style="color: #007700">);<br />    if (</span><span style="color: #9876AA">$active</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">curl_multi_select</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">);<br />    }<br />} while (</span><span style="color: #9876AA">$active </span><span style="color: #007700">&amp;&amp; </span><span style="color: #9876AA">$status </span><span style="color: #007700">== </span><span style="color: #9876AA">CURLM_OK</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 关闭全部句柄<br /></span><span style="color: #9876AA">curl_multi_remove_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">, </span><span style="color: #9876AA">$ch1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_multi_remove_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">, </span><span style="color: #9876AA">$ch2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_multi_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-multi-init-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_init()} - 初始化 cURL 会话</span></li>    <li class="member"><span class="function">{@link curl_multi_close()} - 关闭一组 cURL 句柄</span></li>   </ul>  </span> </div></div>
 * @return resource|CurlMultiHandle a cURL multi handle resource or object depends on the php version*/
function curl_multi_init(): CurlMultiHandle {}

/**
*<div id="function.curl-multi-add-handle" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_multi_add_handle</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_multi_add_handle</span> &mdash; <span class="dc-title">添加普通 cURL 句柄到 cURL 多句柄</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-multi-add-handle-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_multi_add_handle</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlmultihandle.php" class="type CurlMultiHandle" style="color:#EAB766">CurlMultiHandle</a></span> <span class="parameter" style="color:#3A95FF">$multi_handle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="type CurlHandle" style="color:#EAB766">CurlHandle</a></span> <span class="parameter" style="color:#3A95FF">$handle</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   增加 <span class="parameter" style="color:#3A95FF">handle</span> 句柄到多句柄 <span class="parameter" style="color:#3A95FF">multi_handle</span>  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-multi-add-handle-parameters">  <h3 class="title">参数</h3>  <span>   <dl>    <dt><span class="parameter" style="color:#3A95FF">multi_handle</span></dt><dd><p class="para">由 <span class="function">{@link curl_multi_init()}</span> 返回的 cURL 多个句柄。</p></dd>    <dt><span class="parameter" style="color:#3A95FF">handle</span></dt><dd><p class="para">由 <span class="function">{@link curl_init()}</span> 返回的 cURL 句柄。</p></dd>   </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-multi-add-handle-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 0，失败时返回 <strong><span>CURLM_XXX</span></strong> 之一的错误码。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-multi-add-handle-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">multi_handle</span> expects a <span class="classname"><a href="https://www.php.net/manual/zh/class.curlmultihandle.php" class="classname">CurlMultiHandle</a></span>  instance now; previously, a <span class="type" style="color:#EAB766">resource</span> was expected. </td></tr>     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">handle</span> 现在接受 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="classname">CurlHandle</a></span>  实例；之前接受 <span class="type" style="color:#EAB766">resource</span>。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-multi-add-handle-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">curl_multi_add_handle()</strong></span> 示例</strong></p>    <div class="example-contents"><p>     此示例将创建两个 cURL 句柄，并把它们加到多句柄中，然后对其异步处理。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建一对 cURL 资源<br /></span><span style="color: #9876AA">$ch1 </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$ch2 </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 设置 URL 和其它相应的选项<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_URL</span><span style="color: #007700">, </span><span style="color: #DD0000">"http://www.example.com/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_HEADER</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_URL</span><span style="color: #007700">, </span><span style="color: #DD0000">"http://www.php.net/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_HEADER</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 创建 cURL 多句柄<br /></span><span style="color: #9876AA">$mh </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_multi_init</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 新增两个句柄<br /></span><span style="color: #9876AA">curl_multi_add_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">,</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_multi_add_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">,</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 执行多句柄<br /></span><span style="color: #007700">do {<br />    </span><span style="color: #9876AA">$status </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_multi_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">, </span><span style="color: #9876AA">$active</span><span style="color: #007700">);<br />    if (</span><span style="color: #9876AA">$active</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">curl_multi_select</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">);<br />    }<br />} while (</span><span style="color: #9876AA">$active </span><span style="color: #007700">&amp;&amp; </span><span style="color: #9876AA">$status </span><span style="color: #007700">== </span><span style="color: #9876AA">CURLM_OK</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 关闭全部句柄<br /></span><span style="color: #9876AA">curl_multi_remove_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">, </span><span style="color: #9876AA">$ch1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_multi_remove_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">, </span><span style="color: #9876AA">$ch2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_multi_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-multi-add-handle-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_multi_remove_handle()} - 从一组 cURL 句柄中移除一个多句柄</span></li>    <li class="member"><span class="function">{@link curl_multi_init()} - 返回新 cURL 批处理句柄</span></li>    <li class="member"><span class="function">{@link curl_init()} - 初始化 cURL 会话</span></li>   </ul>  </span> </div></div>
 * @return int 0 on success, or one of the CURLM_XXX errors*/
function curl_multi_add_handle(#[LanguageLevelTypeAware(['8.0' => 'CurlMultiHandle'], default: 'resource')] $multi_handle, #[LanguageLevelTypeAware(['8.0' => 'CurlHandle'], default: 'resource')] $handle): int {}

/**
*<div id="function.curl-multi-remove-handle" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_multi_remove_handle</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_multi_remove_handle</span> &mdash; <span class="dc-title">从一组 cURL 句柄中移除一个多句柄</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-multi-remove-handle-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_multi_remove_handle</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlmultihandle.php" class="type CurlMultiHandle" style="color:#EAB766">CurlMultiHandle</a></span> <span class="parameter" style="color:#3A95FF">$multi_handle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="type CurlHandle" style="color:#EAB766">CurlHandle</a></span> <span class="parameter" style="color:#3A95FF">$handle</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   从指定的 <span class="parameter" style="color:#3A95FF">multi_handle</span> 中移除指定的 <span class="parameter" style="color:#3A95FF">handle</span> 句柄。当移除 <span class="parameter" style="color:#3A95FF">handle</span>   后，在此句柄上运行 <span class="function">{@link curl_exec()}</span> 也是完全允许的。移除正在使用的 <span class="parameter" style="color:#3A95FF">handle</span>   句柄，涉及该句柄的正在进行的传输将有效停止。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-multi-remove-handle-parameters">  <h3 class="title">参数</h3>  <span>   <dl>    <dt><span class="parameter" style="color:#3A95FF">multi_handle</span></dt><dd><p class="para">由 <span class="function">{@link curl_multi_init()}</span> 返回的 cURL 多个句柄。</p></dd>    <dt><span class="parameter" style="color:#3A95FF">handle</span></dt><dd><p class="para">由 <span class="function">{@link curl_init()}</span> 返回的 cURL 句柄。</p></dd>   </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-multi-remove-handle-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 0，失败时返回 <strong><span>CURLM_XXX</span></strong> 错误代码中的一个。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-multi-remove-handle-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">multi_handle</span> expects a <span class="classname"><a href="https://www.php.net/manual/zh/class.curlmultihandle.php" class="classname">CurlMultiHandle</a></span>  instance now; previously, a <span class="type" style="color:#EAB766">resource</span> was expected. </td></tr>     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">handle</span> 现在接受 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="classname">CurlHandle</a></span>  实例；之前接受 <span class="type" style="color:#EAB766">resource</span>。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-multi-remove-handle-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_init()} - 初始化 cURL 会话</span></li>    <li class="member"><span class="function">{@link curl_multi_init()} - 返回新 cURL 批处理句柄</span></li>    <li class="member"><span class="function">{@link curl_multi_add_handle()} - 添加普通 cURL 句柄到 cURL 多句柄</span></li>   </ul>  </span> </div></div>
 * @return int|false On success, returns one of the CURLM_XXX error codes, false on failure.*/
function curl_multi_remove_handle(#[LanguageLevelTypeAware(['8.0' => 'CurlMultiHandle'], default: 'resource')] $multi_handle, #[LanguageLevelTypeAware(['8.0' => 'CurlHandle'], default: 'resource')] $handle) {}

/**
*<div id="function.curl-multi-select" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_multi_select</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_multi_select</span> &mdash; <span class="dc-title">在任意 curl_multi 连接上等待活动</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-multi-select-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_multi_select</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$mh</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">float</span> <span class="parameter" style="color:#3A95FF">$timeout</span><span class="initializer"> = 1.0</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">    阻塞到任意 curl_multi连接上有活动。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-multi-select-parameters">  <h3 class="title">参数</h3>  <span>   <dl>    <dt><span class="parameter" style="color:#3A95FF">multi_handle</span></dt><dd><p class="para">由 <span class="function">{@link curl_multi_init()}</span> 返回的 cURL 多个句柄。</p></dd>         <dt><span class="parameter" style="color:#3A95FF">timeout</span></dt>     <dd>      <p class="para">       以秒为单位，等待响应的时间。      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-multi-select-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回描述符集合中描述符的数量。如果没有任何活动的描述符，则为   0。失败时，此函数将在 select 失败时返回 -1（来自底层 select 系统调用）。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-multi-select-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">multi_handle</span> expects a <span class="classname"><a href="https://www.php.net/manual/zh/class.curlmultihandle.php" class="classname">CurlMultiHandle</a></span>  instance now; previously, a <span class="type" style="color:#EAB766">resource</span> was expected. </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-multi-select-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_multi_init()} - 返回新 cURL 批处理句柄</span></li>   </ul>  </span> </div></div>
 * @return int On success, returns the number of descriptors contained in,*/
function curl_multi_select(#[LanguageLevelTypeAware(['8.0' => 'CurlMultiHandle'], default: 'resource')] $multi_handle, float $timeout = 1.0): int {}

/**
*<div id="function.curl-multi-setopt" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_multi_setopt</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_multi_setopt</span> &mdash; <span class="dc-title">设置 cURL 并行选项</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-multi-setopt-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_multi_setopt</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlmultihandle.php" class="type CurlMultiHandle" style="color:#EAB766">CurlMultiHandle</a></span> <span class="parameter" style="color:#3A95FF">$multi_handle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$option</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   为给定的 cURL 并行句柄设置选项。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-multi-setopt-parameters">  <h3 class="title">参数</h3>  <dl>   <dt><span class="parameter" style="color:#3A95FF">multi_handle</span></dt><dd><span>由 <span class="function">{@link curl_multi_init()}</span> 返回的 cURL 多个句柄。</span></dd>       <dt><span class="parameter" style="color:#3A95FF">option</span></dt>    <dd>     <p class="para">      常量 <strong><span>CURLMOPT_*</span></strong> 之一。     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">value</span></dt>    <dd>      <p class="para">       将要设置给 <span class="parameter" style="color:#3A95FF">option</span> 的值。      </p>      <p class="para">       在 <span class="parameter" style="color:#3A95FF">option</span> 参数为下列值时 <span class="parameter" style="color:#3A95FF">value</span> 需要为 <span class="type" style="color:#EAB766">int</span> 类型：       <table class="doctable informaltable">                 <thead>          <tr>           <th>选项</th>           <th>设置 <span class="parameter" style="color:#3A95FF">value</span> 为</th>          </tr>         </thead>         <tbody class="tbody">          <tr>           <td style="vertical-align: top;"><strong><span>CURLMOPT_PIPELINING</span></strong></td>           <td style="vertical-align: top;">            传递 1 启用或传递 0 禁用。在多句柄上启用管道将使其尝试对使用此句柄的传输尽可能执行 HTTP            管道操作。这意味着如果添加的第二个请求可以使用已有连接，则第二个请求将在同一连接上使用“管道”。            从 cURL 7.43.0 开始，该值是位掩码，如果可能，您还可以传递 2 以尝试在已有的 HTTP/2 连接上复用多路新传输。传递            3 指示 cURL 请求彼此独立的管道和多路复用。            从 cURL 7.62.0 开始，设置管道位没有效果。除了整数文字，还可以使用 CURLPIPE_* 常量（如果可用）。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLMOPT_MAXCONNECTS</span></strong></td>           <td style="vertical-align: top;">            传递数字，该数字将用作 libcurl 可以缓存的同时打开的最大连接数。默认情况下，数量将放大为适应 <span class="function">{@link curl_multi_add_handle()}</span>            添加的句柄数量的四倍。当缓存已满时，curl 会关闭缓存中最早的一个，以防止打开的连接数增加。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE</span></strong></td>           <td style="vertical-align: top;">            传递数字，以字节为单位指定管道的块（chunk）长度阈值。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE</span></strong></td>           <td style="vertical-align: top;">            Pass a number that specifies the size threshold for pipelining            penalty in bytes.           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLMOPT_MAX_CONCURRENT_STREAMS</span></strong></td>           <td style="vertical-align: top;">            The set number will be used as the maximum number of concurrent streams for a connections that cURL            should support on connections done using HTTP/2. Valid values range from            <span>1</span> to <span>2147483647</span> (<span>2^31 - 1</span>).            The value passed here would be honored based on other system resources properties.            Default is <span>100</span>.           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLMOPT_MAX_HOST_CONNECTIONS</span></strong></td>           <td style="vertical-align: top;">            传递一个数字，指定连接单个主机的最大数量。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLMOPT_MAX_PIPELINE_LENGTH</span></strong></td>           <td style="vertical-align: top;">            传递数字，指定管道中的最大请求数。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLMOPT_MAX_TOTAL_CONNECTIONS</span></strong></td>           <td style="vertical-align: top;">            传递数字，指定同时打开连接的最大数量。           </td>          </tr>          <tr>           <td style="vertical-align: top;"><strong><span>CURLMOPT_PUSHFUNCTION</span></strong></td>           <td style="vertical-align: top;">            传递 <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> 以注册处理服务器推送且应具有以下签名：            <div class="methodsynopsis dc-description">             <span class="methodname" style="color:#CC7832"><span class="replaceable">pushfunction</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$parent_ch</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$pushed_ch</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$headers</span></span>): <span class="type" style="color:#EAB766">int</span></div>            <dl>                           <dt><span class="parameter" style="color:#3A95FF">parent_ch</span></dt>              <dd>               <p class="para">                父级 cURL 句柄（客户端发出的请求）。               </p>              </dd>                                        <dt><span class="parameter" style="color:#3A95FF">pushed_ch</span></dt>              <dd>               <p class="para">                推送请求的新 cURL 句柄。               </p>              </dd>                                        <dt><span class="parameter" style="color:#3A95FF">headers</span></dt>              <dd>               <p class="para">                The push promise headers.               </p>              </dd>                         </dl>            推送函数如果可以处理推送应该返回 <strong><span>CURL_PUSH_OK</span></strong>，或者返回 <strong><span>CURL_PUSH_DENY</span></strong> 拒绝。           </td>          </tr>         </tbody>               </table>      </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-multi-setopt-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-multi-setopt-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.2.0</td>       <td>        引入 <strong><span>CURLMOPT_MAX_CONCURRENT_STREAMS</span></strong>。       </td>      </tr>      <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">multi_handle</span> expects a <span class="classname"><a href="https://www.php.net/manual/zh/class.curlmultihandle.php" class="classname">CurlMultiHandle</a></span>  instance now; previously, a <span class="type" style="color:#EAB766">resource</span> was expected. </td></tr>      <tr>       <td>7.1.0</td>       <td>        引入 <strong><span>CURLMOPT_PUSHFUNCTION</span></strong>。       </td>      </tr>      <tr>       <td>7.0.7</td>       <td>        引入 <strong><span>CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE</span></strong>、<strong><span>CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE</span></strong>、<strong><span>CURLMOPT_MAX_HOST_CONNECTIONS</span></strong>、<strong><span>CURLMOPT_MAX_PIPELINE_LENGTH</span></strong>        和 <strong><span>CURLMOPT_MAX_TOTAL_CONNECTIONS</span></strong>。       </td>      </tr>     </tbody>       </table>  </span> </div></div>
 * @return bool Returns TRUE on success or FALSE on failure.*/
function curl_multi_setopt(#[LanguageLevelTypeAware(['8.0' => 'CurlMultiHandle'], default: 'resource')] $multi_handle, int $option, mixed $value): bool {}

/**
*<div id="function.curl-multi-strerror" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_multi_strerror</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_multi_strerror</span> &mdash; <span class="dc-title">返回字符串描述的错误代码</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-multi-strerror-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_multi_strerror</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$error_code</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">string</span></span></div>  <p class="para rdfs-comment">   返回一个用以描述所给 CURLM 错误代码所对应的错误信息。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-multi-strerror-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">error_code</span></dt>    <dd>     <span>      <a href="http://curl.haxx.se/libcurl/c/libcurl-errors.html" class="link external">&raquo;&nbsp;CURLM 错误代码</a>中的常量之一。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-multi-strerror-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回可用错误代码所对应的错误信息，否则返回 <strong><span>null</span></strong> 。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-multi-strerror-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">curl_multi_strerror()</strong></span> 函数的范例：</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建 cURL 句柄<br /></span><span style="color: #9876AA">$ch1 </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://example.com/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$ch2 </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://php.net/"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 创建 cURL 多句柄<br /></span><span style="color: #9876AA">$mh </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_multi_init</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 添加句柄到多句柄<br /></span><span style="color: #9876AA">curl_multi_add_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">, </span><span style="color: #9876AA">$ch1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_multi_add_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">, </span><span style="color: #9876AA">$ch2</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 执行多句柄<br /></span><span style="color: #007700">do {<br />    </span><span style="color: #9876AA">$status </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_multi_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">, </span><span style="color: #9876AA">$active</span><span style="color: #007700">);<br />    if (</span><span style="color: #9876AA">$active</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">curl_multi_select</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">);<br />    }<br />} while (</span><span style="color: #9876AA">$active </span><span style="color: #007700">&amp;&amp; </span><span style="color: #9876AA">$status </span><span style="color: #007700">=== </span><span style="color: #9876AA">CURLM_OK</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 检测错误<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">$status </span><span style="color: #007700">!= </span><span style="color: #9876AA">CURLM_OK</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// Display error message<br />    </span><span style="color: #007700">echo </span><span style="color: #DD0000">"ERROR!\n " </span><span style="color: #007700">. </span><span style="color: #9876AA">curl_multi_strerror</span><span style="color: #007700">(</span><span style="color: #9876AA">$status</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-multi-strerror-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_strerror()} - 返回错误代码的字符串描述</span></li>    <li class="member"><a href="http://curl.haxx.se/libcurl/c/libcurl-errors.html" class="link external">&raquo;&nbsp;cURL error codes</a></li>   </ul>  </span> </div></div>
 * @return string|null Returns error string for valid error code, NULL otherwise.*/
function curl_multi_strerror(int $error_code): ?string {}

/**
*<div id="function.curl-pause" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_pause</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_pause</span> &mdash; <span class="dc-title">暂停和取消暂停连接</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-pause-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_pause</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="type CurlHandle" style="color:#EAB766">CurlHandle</a></span> <span class="parameter" style="color:#3A95FF">$handle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   暂停或取消暂停 cURL 会话。   一个会话可以在传输过程中、在读、写或两个方向的传输过程中暂停，通过从使用 <span class="function">{@link curl_setopt()}</span>   注册的回调函数中调用此函数来实现。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-pause-parameters">  <h3 class="title">参数</h3>  <dl>   <dt><span class="parameter" style="color:#3A95FF">handle</span></dt><dd><span>由 <span class="function">{@link curl_init()}</span> 返回的 cURL 句柄。</span></dd>       <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>    <dd>     <p class="para">      <strong><span>CURLPAUSE_*</span></strong> 常量之一。     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-pause-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个错误代码 (如果没有错误则返回 <strong><span>CURLE_OK</span></strong> 常量)。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-pause-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">handle</span> 现在接受 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="classname">CurlHandle</a></span>  实例；之前接受 <span class="type" style="color:#EAB766">resource</span>。 </td></tr>    </tbody>     </table> </div></div>
 * @return int Returns an error code (<b>CURLE_OK</b> for no error).*/
function curl_pause(#[LanguageLevelTypeAware(['8.0' => 'CurlHandle'], default: 'resource')] $handle, int $flags): int {}

/**
*<div id="function.curl-reset" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_reset</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_reset</span> &mdash; <span class="dc-title">重置一个 libcurl 会话句柄的所有的选项</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-reset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_reset</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="type CurlHandle" style="color:#EAB766">CurlHandle</a></span> <span class="parameter" style="color:#3A95FF">$handle</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   该函数将给定的 cURL 句柄所有选项重新设置为默认值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-reset-parameters">  <h3 class="title">参数</h3>  <dl>   <dt><span class="parameter" style="color:#3A95FF">handle</span></dt><dd><span>由 <span class="function">{@link curl_init()}</span> 返回的 cURL 句柄。</span></dd>  </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-reset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-reset-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">handle</span> 现在接受 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="classname">CurlHandle</a></span>  实例；之前接受 <span class="type" style="color:#EAB766">resource</span>。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-reset-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">curl_reset()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建 url 句柄<br /></span><span style="color: #9876AA">$ch </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 设置 CURLOPT_USERAGENT 选项<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_USERAGENT</span><span style="color: #007700">, </span><span style="color: #DD0000">"My test user-agent"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 重置所有的预先设置的选项<br /></span><span style="color: #9876AA">curl_reset</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 发送 HTTP 请求<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_URL</span><span style="color: #007700">, </span><span style="color: #DD0000">'http://example.com/'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">); </span><span style="color: #FF8000">// 预先设置的 user-agent 不会被发送，它已经被 curl_reset 重置掉了<br /><br />// 关闭句柄<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.curl-reset-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="function"><strong style="color:#CC7832">curl_reset()</strong></span> 还重置作为 <span class="function">{@link curl_init()}</span> 参数指定的 URL。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-reset-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_setopt()} - 设置 cURL 传输选项</span></li>   </ul>  </span> </div></div>
 * @return void*/
function curl_reset(#[LanguageLevelTypeAware(['8.0' => 'CurlHandle'], default: 'resource')] $handle): void {}

/**
*<div id="function.curl-multi-exec" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_multi_exec</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_multi_exec</span> &mdash; <span class="dc-title">运行当前 cURL 句柄的子连接</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-multi-exec-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_multi_exec</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlmultihandle.php" class="type CurlMultiHandle" style="color:#EAB766">CurlMultiHandle</a></span> <span class="parameter" style="color:#3A95FF">$multi_handle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">&$still_running</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   处理在栈中的每一个句柄。无论该句柄需要读取或写入数据都可调用此方法。  </p>  </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-multi-exec-parameters">  <h3 class="title">参数</h3>  <span>   <dl>    <dt><span class="parameter" style="color:#3A95FF">multi_handle</span></dt><dd><p class="para">由 <span class="function">{@link curl_multi_init()}</span> 返回的 cURL 多个句柄。</p></dd>         <dt><span class="parameter" style="color:#3A95FF">still_running</span></dt>     <dd>      <p class="para">       一个用来判断操作是否仍在执行的标识的引用。      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-multi-exec-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   定义于 cURL <a href="https://www.php.net/manual/zh/curl.constants.php" class="link">预定义常量</a>中的 cURL 代码。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    该函数仅返回关于整个批处理栈相关的错误。即使返回    <strong><span>CURLM_OK</span></strong> 时单个传输仍可能有问题。   </p>  </p></blockquote> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-multi-exec-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">multi_handle</span> expects a <span class="classname"><a href="https://www.php.net/manual/zh/class.curlmultihandle.php" class="classname">CurlMultiHandle</a></span>  instance now; previously, a <span class="type" style="color:#EAB766">resource</span> was expected. </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-multi-exec-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">curl_multi_exec()</strong></span> 示例</strong></p>    <div class="example-contents"><p>     这个范例将会创建 2 个 cURL 句柄，把它们加到批处理句柄，然后并行处理它们。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建一对cURL资源<br /></span><span style="color: #9876AA">$ch1 </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$ch2 </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 设置URL和相应的选项<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_URL</span><span style="color: #007700">, </span><span style="color: #DD0000">"http://example.com/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_HEADER</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_URL</span><span style="color: #007700">, </span><span style="color: #DD0000">"http://www.php.net/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_HEADER</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 创建批处理cURL句柄<br /></span><span style="color: #9876AA">$mh </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_multi_init</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 增加2个句柄<br /></span><span style="color: #9876AA">curl_multi_add_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">,</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_multi_add_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">,</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 执行批处理句柄<br /></span><span style="color: #007700">do {<br />    </span><span style="color: #9876AA">$status </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_multi_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">, </span><span style="color: #9876AA">$active</span><span style="color: #007700">);<br />    if (</span><span style="color: #9876AA">$active</span><span style="color: #007700">) {<br />        </span><span style="color: #FF8000">// Wait a short time for more activity<br />        </span><span style="color: #9876AA">curl_multi_select</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">);<br />    }<br />} while (</span><span style="color: #9876AA">$active </span><span style="color: #007700">&amp;&amp; </span><span style="color: #9876AA">$status </span><span style="color: #007700">== </span><span style="color: #9876AA">CURLM_OK</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 关闭全部句柄<br /></span><span style="color: #9876AA">curl_multi_remove_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">, </span><span style="color: #9876AA">$ch1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_multi_remove_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">, </span><span style="color: #9876AA">$ch2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_multi_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-multi-exec-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_multi_init()} - 返回新 cURL 批处理句柄</span></li>    <li class="member"><span class="function">{@link curl_multi_select()} - 在任意 curl_multi 连接上等待活动</span></li>    <li class="member"><span class="function">{@link curl_exec()} - 执行 cURL 会话</span></li>   </ul>  </span> </div> </div>
 * @return int A cURL code defined in the cURL Predefined Constants.*/
function curl_multi_exec(
    #[LanguageLevelTypeAware(['8.0' => 'CurlMultiHandle'], default: 'resource')] $multi_handle,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] &$still_running = 0,
    #[PhpStormStubsElementAvailable(from: '8.0')] &$still_running
): int {}

/**
*<div id="function.curl-multi-getcontent" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_multi_getcontent</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_multi_getcontent</span> &mdash; <span class="dc-title">如果设置了 <strong><span>CURLOPT_RETURNTRANSFER</span></strong>，则返回 cURL 句柄的内容</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-multi-getcontent-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_multi_getcontent</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="type CurlHandle" style="color:#EAB766">CurlHandle</a></span> <span class="parameter" style="color:#3A95FF">$handle</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">string</span></span></div>  <p class="para rdfs-comment">   如果 <strong><span>CURLOPT_RETURNTRANSFER</span></strong> 是为指定句柄设置的选项，则此函数将会以字符串的形式返回 cURL 句柄的内容。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-multi-getcontent-parameters">  <h3 class="title">参数</h3>  <span>   <dl>    <dt><span class="parameter" style="color:#3A95FF">handle</span></dt><dd><p class="para">由 <span class="function">{@link curl_init()}</span> 返回的 cURL 句柄。</p></dd>   </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-multi-getcontent-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果设置了 <strong><span>CURLOPT_RETURNTRANSFER</span></strong>，则返回 cURL 句柄的内容，不设置的话返回 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-multi-getcontent-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">handle</span> 现在接受 <span class="classname"><a href="https://www.php.net/manual/zh/class.curlhandle.php" class="classname">CurlHandle</a></span>  实例；之前接受 <span class="type" style="color:#EAB766">resource</span>。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-multi-getcontent-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_multi_init()} - 返回新 cURL 批处理句柄</span></li>   </ul>  </span> </div> </div>
 * @return null|string Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set.*/
function curl_multi_getcontent(#[LanguageLevelTypeAware(['8.0' => 'CurlHandle'], default: 'resource')] $handle): ?string {}

/**
*<div id="function.curl-multi-info-read" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_multi_info_read</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_multi_info_read</span> &mdash; <span class="dc-title">获取当前传输的有关信息</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-multi-info-read-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_multi_info_read</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlmultihandle.php" class="type CurlMultiHandle" style="color:#EAB766">CurlMultiHandle</a></span> <span class="parameter" style="color:#3A95FF">$multi_handle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">&$queued_messages</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   查询多句柄是否有来自个别传输的消息或信息，消息可能包含诸如来自传输的错误代码或者仅是传输已完成之类的信息。  </p>  <p class="para">   重复调用此函数，每次都会返回新结果，返回 <strong><span>false</span></strong> 作为此时没有更多信息可以获取的信号。通过   <span class="parameter" style="color:#3A95FF">queued_messages</span> 返回的整数包含当前函数调用后剩余的消息数量。  </p>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    返回的资源指向的数据将无法在调用 <span class="function">{@link curl_multi_remove_handle()}</span> 后继续存在。   </p>  </div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-multi-info-read-parameters">  <h3 class="title">参数</h3>  <span>   <dl>    <dt><span class="parameter" style="color:#3A95FF">multi_handle</span></dt><dd><p class="para">由 <span class="function">{@link curl_multi_init()}</span> 返回的 cURL 多个句柄。</p></dd>         <dt><span class="parameter" style="color:#3A95FF">queued_messages</span></dt>     <dd>      <p class="para">       仍在队列中的消息数量。      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-multi-info-read-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回信息的关联数组，失败时返回 <strong><span>false</span></strong>。  </p>  <p class="para">   <table class="doctable table">    <caption><strong>返回数组的内容</strong></caption>         <thead>      <tr>       <th>Key:</th>       <th>Value:</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td><span>msg</span></td>       <td><strong><span>CURLMSG_DONE</span></strong> 常量。其他返回值当前不可用。</td>      </tr>      <tr>       <td><span>result</span></td>       <td><strong><span>CURLE_*</span></strong> 常量之一。如果一切都好，将会返回 <strong><span>CURLE_OK</span></strong>。</td>      </tr>      <tr>       <td><span>handle</span></td>       <td>cURL 资源类型表明它有关的句柄。</td>      </tr>     </tbody>       </table>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-multi-info-read-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">multi_handle</span> expects a <span class="classname"><a href="https://www.php.net/manual/zh/class.curlmultihandle.php" class="classname">CurlMultiHandle</a></span>  instance now; previously, a <span class="type" style="color:#EAB766">resource</span> was expected. </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-multi-info-read-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">curl_multi_info_read()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$urls </span><span style="color: #007700">= array(<br />   </span><span style="color: #DD0000">"http://www.cnn.com/"</span><span style="color: #007700">,<br />   </span><span style="color: #DD0000">"http://www.bbc.co.uk/"</span><span style="color: #007700">,<br />   </span><span style="color: #DD0000">"http://www.yahoo.com/"<br /></span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$mh </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_multi_init</span><span style="color: #007700">();<br /><br />foreach (</span><span style="color: #9876AA">$urls </span><span style="color: #007700">as </span><span style="color: #9876AA">$i </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$url</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$conn</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">] = </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">(</span><span style="color: #9876AA">$url</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$conn</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">], </span><span style="color: #9876AA">CURLOPT_RETURNTRANSFER</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">curl_multi_add_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">, </span><span style="color: #9876AA">$conn</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">]);<br />}<br /><br />do {<br />    </span><span style="color: #9876AA">$status </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_multi_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">, </span><span style="color: #9876AA">$active</span><span style="color: #007700">);<br />    if (</span><span style="color: #9876AA">$active</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">curl_multi_select</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">);<br />    }<br />    while (</span><span style="color: #9876AA">false </span><span style="color: #007700">!== (</span><span style="color: #9876AA">$info </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_multi_info_read</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">))) {<br />        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">);<br />    }<br />} while (</span><span style="color: #9876AA">$active </span><span style="color: #007700">&amp;&amp; </span><span style="color: #9876AA">$status </span><span style="color: #007700">== </span><span style="color: #9876AA">CURLM_OK</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$urls </span><span style="color: #007700">as </span><span style="color: #9876AA">$i </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$url</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$res</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">] = </span><span style="color: #9876AA">curl_multi_getcontent</span><span style="color: #007700">(</span><span style="color: #9876AA">$conn</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">]);<br />    </span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$conn</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">]);<br />}<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">curl_multi_info_read</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(3) {<br>  [&quot;msg&quot;]=&gt;<br>  int(1)<br>  [&quot;result&quot;]=&gt;<br>  int(0)<br>  [&quot;handle&quot;]=&gt;<br>  resource(5) of type (curl)<br>}<br>array(3) {<br>  [&quot;msg&quot;]=&gt;<br>  int(1)<br>  [&quot;result&quot;]=&gt;<br>  int(0)<br>  [&quot;handle&quot;]=&gt;<br>  resource(7) of type (curl)<br>}<br>array(3) {<br>  [&quot;msg&quot;]=&gt;<br>  int(1)<br>  [&quot;result&quot;]=&gt;<br>  int(0)<br>  [&quot;handle&quot;]=&gt;<br>  resource(6) of type (curl)<br>}<br>bool(false)<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-multi-info-read-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_multi_init()} - 返回新 cURL 批处理句柄</span></li>   </ul>  </span> </div></div>
 * @return array|false On success, returns an associative array for the message, false on failure.*/
function curl_multi_info_read(#[LanguageLevelTypeAware(['8.0' => 'CurlMultiHandle'], default: 'resource')] $multi_handle, &$queued_messages): array|false {}

/**
*<div id="function.curl-multi-close" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_multi_close</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">curl_multi_close</span> &mdash; <span class="dc-title">关闭一组 cURL 句柄</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-multi-close-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_multi_close</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlmultihandle.php" class="type CurlMultiHandle" style="color:#EAB766">CurlMultiHandle</a></span> <span class="parameter" style="color:#3A95FF">$multi_handle</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  此函数无效。在 PHP 8.0.0 之前，用于关闭资源。 </p></p></blockquote>  <p class="para">   关闭一组 cURL 句柄。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-multi-close-parameters">  <h3 class="title">参数</h3>  <span>   <dl>    <dt><span class="parameter" style="color:#3A95FF">multi_handle</span></dt><dd><p class="para">由 <span class="function">{@link curl_multi_init()}</span> 返回的 cURL 多个句柄。</p></dd>   </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-multi-close-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-multi-close-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">multi_handle</span> expects a <span class="classname"><a href="https://www.php.net/manual/zh/class.curlmultihandle.php" class="classname">CurlMultiHandle</a></span>  instance now; previously, a <span class="type" style="color:#EAB766">resource</span> was expected. </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.curl-multi-close-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">curl_multi_close()</strong></span> 示例</strong></p>    <div class="example-contents"><p>     此示例将创建两个 cURL 句柄，并把它们加到多句柄中，然后对其异步处理。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建一对 cURL 资源<br /></span><span style="color: #9876AA">$ch1 </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$ch2 </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 设置 URL 和其它相应的选项<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_URL</span><span style="color: #007700">, </span><span style="color: #DD0000">"http://www.example.com/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_HEADER</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_URL</span><span style="color: #007700">, </span><span style="color: #DD0000">"http://www.php.net/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_setopt</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">, </span><span style="color: #9876AA">CURLOPT_HEADER</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 创建 cURL 多句柄<br /></span><span style="color: #9876AA">$mh </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_multi_init</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 新增两个句柄<br /></span><span style="color: #9876AA">curl_multi_add_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">,</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_multi_add_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">,</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 执行多句柄<br /></span><span style="color: #007700">do {<br />    </span><span style="color: #9876AA">$status </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_multi_exec</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">, </span><span style="color: #9876AA">$active</span><span style="color: #007700">);<br />    if (</span><span style="color: #9876AA">$active</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">curl_multi_select</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">);<br />    }<br />} while (</span><span style="color: #9876AA">$active </span><span style="color: #007700">&amp;&amp; </span><span style="color: #9876AA">$status </span><span style="color: #007700">== </span><span style="color: #9876AA">CURLM_OK</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 关闭全部句柄<br /></span><span style="color: #9876AA">curl_multi_remove_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">, </span><span style="color: #9876AA">$ch1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_multi_remove_handle</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">, </span><span style="color: #9876AA">$ch2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$ch2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">curl_multi_close</span><span style="color: #007700">(</span><span style="color: #9876AA">$mh</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-multi-close-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link curl_multi_init()} - 返回新 cURL 批处理句柄</span></li>    <li class="member"><span class="function">{@link curl_close()} - 关闭 cURL 会话</span></li>   </ul>  </span> </div></div>
 * @return void*/
function curl_multi_close(#[LanguageLevelTypeAware(['8.0' => 'CurlMultiHandle'], default: 'resource')] $multi_handle): void {}

/**
*<div id="function.curl-multi-errno" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_multi_errno</h1>  <p class="verinfo">(PHP 7 &gt;= 7.1.0, PHP 8)</p><p class="refpurpose"><span class="refname">curl_multi_errno</span> &mdash; <span class="dc-title">返回上一次 curl 批处理的错误码</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-multi-errno-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_multi_errno</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlmultihandle.php" class="type CurlMultiHandle" style="color:#EAB766">CurlMultiHandle</a></span> <span class="parameter" style="color:#3A95FF">$multi_handle</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   返回整型数字，为上次 curl 批处理错误码。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-multi-errno-parameters">  <h3 class="title">参数</h3>  <dl>    <dt><span class="parameter" style="color:#3A95FF">multi_handle</span></dt><dd><span>由 <span class="function">{@link curl_multi_init()}</span> 返回的 cURL 多个句柄。</span></dd>  </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-multi-errno-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回整型数字，包含上次 curl 批处理的错误码。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-multi-errno-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       失败时此函数不再返回 <strong><span>false</span></strong>。      </td>     </tr>     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">multi_handle</span> expects a <span class="classname"><a href="https://www.php.net/manual/zh/class.curlmultihandle.php" class="classname">CurlMultiHandle</a></span>  instance now; previously, a <span class="type" style="color:#EAB766">resource</span> was expected. </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-multi-errno-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link curl_errno()} - 返回最后一次的错误代码</span></li>  </ul> </div></div>
 * @return int*/
function curl_multi_errno(#[LanguageLevelTypeAware(['8.0' => 'CurlMultiHandle'], default: 'resource')] $multi_handle): int {}

/**
*<div id="function.curl-share-errno" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_share_errno</h1>  <p class="verinfo">(PHP 7 &gt;= 7.1.0, PHP 8)</p><p class="refpurpose"><span class="refname">curl_share_errno</span> &mdash; <span class="dc-title">返回共享 curl 句柄的最后一次错误编号</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-share-errno-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_share_errno</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.curlsharehandle.php" class="type CurlShareHandle" style="color:#EAB766">CurlShareHandle</a></span> <span class="parameter" style="color:#3A95FF">$share_handle</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   返回整数，表示共享 curl 句柄的最后一次错误编号。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-share-errno-parameters">  <h3 class="title">参数</h3>  <dl>   <dt><span class="parameter" style="color:#3A95FF">share_handle</span></dt><dd><span>A cURL share handle returned by<span class="function">{@link curl_share_init()}</span>.</span></dd>  </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-share-errno-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回整数，表示共享 curl 句柄的最后一次错误编号。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.curl-share-errno-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       失败时函数不再返回 <strong><span>false</span></strong>。      </td>     </tr>     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">share_handle</span> expects a <span class="classname"><a href="https://www.php.net/manual/zh/class.curlsharehandle.php" class="classname">CurlShareHandle</a></span>  instance now; previously, a <span class="type" style="color:#EAB766">resource</span> was expected. </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-share-errno-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link curl_errno()} - 返回最后一次的错误代码</span></li>  </ul> </div></div>
 * @return int*/
function curl_share_errno(#[LanguageLevelTypeAware(['8.0' => 'CurlShareHandle'], default: 'resource')] $share_handle): int {}

/**
*<div id="function.curl-share-strerror" class="refentry"> <div class="refnamediv">  <h1 class="refname">curl_share_strerror</h1>  <p class="verinfo">(PHP 7 &gt;= 7.1.0, PHP 8)</p><p class="refpurpose"><span class="refname">curl_share_strerror</span> &mdash; <span class="dc-title">返回错误编号对应的错误消息</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.curl-share-strerror-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>curl_share_strerror</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$error_code</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">string</span></span></div>  <p class="para rdfs-comment">   返回错误编号对应的错误消息。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.curl-share-strerror-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">error_code</span></dt>    <dd>     <span>      某个 <a href="http://curl.haxx.se/libcurl/c/libcurl-errors.html" class="link external">&raquo;&nbsp;cURL 错误代码</a>常量。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.curl-share-strerror-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回错误描述。错误代码无效则为 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.curl-share-strerror-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link curl_share_errno()} - 返回共享 curl 句柄的最后一次错误编号</span></li>   <li class="member"><span class="function">{@link curl_strerror()} - 返回错误代码的字符串描述</span></li>  </ul> </div></div>
 * @return string|null*/
function curl_share_strerror(int $error_code): ?string {}

/**
 * @since 8.2
 */
function curl_upkeep(CurlHandle $handle): bool {}
/**
*<div id="class.curlhandle" class="reference"> <h1 class="title">CurlHandle 类</h1>  <div class="partintro"><p class="verinfo">(PHP 8)</p>    <div class="section" id="curlhandle.intro">   <h2 class="title">简介</h2>   <p class="para">    从 PHP 8.0.0 开始替换 <span>curl</span> 资源的完全不透明类。   </p>  </div>    <div class="section" id="curlhandle.synopsis">   <h2 class="title">类摘要</h2>      <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">final</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">CurlHandle</strong></strong>     {</div>   }</div>     </div> </div> </div>
*/
final class CurlHandle
{
    /**
     * Cannot directly construct CurlHandle, use curl_init() instead
     * @see curl_init()
     */
    private function __construct() {}
}

/**
*<div id="class.curlmultihandle" class="reference"> <h1 class="title">CurlMultiHandle 类</h1>  <div class="partintro"><p class="verinfo">(PHP 8)</p>    <div class="section" id="curlmultihandle.intro">   <h2 class="title">简介</h2>   <p class="para">    从 PHP 8.0.0 开始替换 <span>curl_multi</span> 资源的完全不透明类。   </p>  </div>    <div class="section" id="curlmultihandle.synopsis">   <h2 class="title">类摘要</h2>      <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">final</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">CurlMultiHandle</strong></strong>     {</div>   }</div>     </div> </div> </div>
*/
final class CurlMultiHandle
{
    /**
     * Cannot directly construct CurlMultiHandle, use curl_multi_init() instead
     * @see curl_multi_init()
     */
    private function __construct() {}
}

/**
*<div id="class.curlsharehandle" class="reference"> <h1 class="title">CurlShareHandle 类</h1>  <div class="partintro"><p class="verinfo">(PHP 8)</p>    <div class="section" id="curlsharehandle.intro">   <h2 class="title">简介</h2>   <p class="para">    从 PHP 8.0.0 开始替换 <span>curl_share</span> 资源的完全不透明类。   </p>  </div>    <div class="section" id="curlsharehandle.synopsis">   <h2 class="title">类摘要</h2>      <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">final</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">CurlShareHandle</strong></strong>     {</div>   }</div>     </div> </div> </div>
*/
final class CurlShareHandle
{
    /**
     * Cannot directly construct CurlShareHandle, use curl_share_init() instead
     * @see  curl_share_init()
     */
    private function __construct() {}
}
