<?php

// Start of Core v.5.3.6-13ubuntu3.2
use JetBrains\PhpStorm\ArrayShape;
use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Pure;

/**
*<div id="function.zend-version" class="refentry"> <div class="refnamediv">  <h1 class="refname">zend_version</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">zend_version</span> &mdash; <span class="dc-title">获取当前 Zend 引擎的版本</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.zend-version-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>zend_version</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">      获取当前运行的 Zend 引擎的版本字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.zend-version-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.zend-version-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   获取 Zend 引擎的版本数字的字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.zend-version-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1790">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">zend_version()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #DD0000">"Zend engine version: " </span><span style="color: #007700">. </span><span style="color: #9876AA">zend_version</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Zend engine version: 2.2.0<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.zend-version-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link phpinfo()} - 输出关于 PHP 配置的信息</span></li>    <li class="member"><span class="function">{@link phpcredits()} - 打印 PHP 贡献者名单</span></li>    <li class="member"><span class="function">{@link phpversion()} - 获取当前的PHP版本</span></li>   </ul>  </span> </div></div>
 * @return string the Zend Engine version number, as a string.*/
function zend_version(): string {}

/**
*<div id="function.func-num-args" class="refentry"> <div class="refnamediv">  <h1 class="refname">func_num_args</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">func_num_args</span> &mdash; <span class="dc-title">返回传递给函数的参数数量</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.func-num-args-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>func_num_args</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   获取传递给函数的参数数量。  </p>  <p class="para">   此函数可以与 <span class="function">{@link func_get_arg()}</span> 和 <span class="function">{@link func_get_args()}</span>   结合使用，以便于允许用户定义的函数可以接受可变长度的参数列表。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.func-num-args-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.func-num-args-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回传递给当前用户定义函数的参数数量。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.func-num-args-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果从用户定义的函数外部调用，则生成警告。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.func-num-args-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">func_num_args()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">foo</span><span style="color: #007700">()<br />{<br />    echo </span><span style="color: #DD0000">"Number of arguments: "</span><span style="color: #007700">, </span><span style="color: #9876AA">func_num_args</span><span style="color: #007700">(), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">foo</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">);   <br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Number of arguments: 3<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.func-num-args-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">As of PHP 8.0.0, the func_*() family offunctions is intended to be mostly transparent with regard to named arguments,by treating the arguments as if they were all passed positionally,and missing arguments are replaced with their defaults.This function ignores the collection of unknown named variadic arguments.Unknown named arguments which are collected can only be accessed through the variadic parameter.</p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.func-num-args-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/functions.arguments.php#functions.variable-arg-list" class="link"><span>...</span> 语法</a></li>    <li class="member"><span class="function">{@link func_get_arg()}</span></li>    <li class="member"><span class="function">{@link func_get_args()}</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getNumberOfParameters()}</span></li>   </ul>  </span> </div></div>
 * @return int the number of arguments passed into the current user-defined*/
function func_num_args(): int {}

/**
*<div id="function.func-get-arg" class="refentry"> <div class="refnamediv">  <h1 class="refname">func_get_arg</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">func_get_arg</span> &mdash; <span class="dc-title">返回参数列表的某一项</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.func-get-arg-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>func_get_arg</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$position</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   从用户自定义函数的参数列表中获取某个指定的参数。  </p>  <p class="para">   该函数可以配合 <span class="function">{@link func_get_args()}</span> 和 <span class="function">{@link func_num_args()}</span>   一起使用，从而使得用户自定义函数可以接受自定义个数的参数列表。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.func-get-arg-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">position</span></dt>     <dd>      <p class="para">       参数的偏移量。函数的参数是从 0 开始计数的。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.func-get-arg-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回指定的参数，错误则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.func-get-arg-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   当在自定义函数的外面调用的该函数的时候会发出一个警告，   或者是当 <span class="parameter" style="color:#3A95FF">position</span> 比实际传入的参数的数目大的时候也会发出一个警告。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.func-get-arg-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">func_get_arg()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">foo</span><span style="color: #007700">()<br />{<br />     </span><span style="color: #9876AA">$numargs </span><span style="color: #007700">= </span><span style="color: #9876AA">func_num_args</span><span style="color: #007700">();<br />     echo </span><span style="color: #DD0000">"Number of arguments: </span><span style="color: #9876AA">$numargs</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />     if (</span><span style="color: #9876AA">$numargs </span><span style="color: #007700">&gt;= </span><span style="color: #9876AA">2</span><span style="color: #007700">) {<br />         echo </span><span style="color: #DD0000">"Second argument is: " </span><span style="color: #007700">. </span><span style="color: #9876AA">func_get_arg</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />     }<br />}<br /><br /></span><span style="color: #9876AA">foo</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Number of arguments: 3<br>Second argument is: 2<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 byRef 和 byVal 参数的 <span class="function"><strong style="color:#CC7832">func_get_arg()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">byVal</span><span style="color: #007700">(</span><span style="color: #9876AA">$arg</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'As passed     : '</span><span style="color: #007700">, </span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">func_get_arg</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">)), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$arg </span><span style="color: #007700">= </span><span style="color: #DD0000">'baz'</span><span style="color: #007700">;<br />    echo </span><span style="color: #DD0000">'After change  : '</span><span style="color: #007700">, </span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">func_get_arg</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">)), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /><br />function </span><span style="color: #9876AA">byRef</span><span style="color: #007700">(&amp;</span><span style="color: #9876AA">$arg</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'As passed     : '</span><span style="color: #007700">, </span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">func_get_arg</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">)), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$arg </span><span style="color: #007700">= </span><span style="color: #DD0000">'baz'</span><span style="color: #007700">;<br />    echo </span><span style="color: #DD0000">'After change  : '</span><span style="color: #007700">, </span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">func_get_arg</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">)), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$arg </span><span style="color: #007700">= </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">byVal</span><span style="color: #007700">(</span><span style="color: #9876AA">$arg</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">byRef</span><span style="color: #007700">(</span><span style="color: #9876AA">$arg</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><br />As passed     : &#039;bar&#039;<br />After change  : &#039;baz&#039;<br />As passed     : &#039;bar&#039;<br />After change  : &#039;baz&#039;<br />    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.func-get-arg-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">As of PHP 8.0.0, the func_*() family offunctions is intended to be mostly transparent with regard to named arguments,by treating the arguments as if they were all passed positionally,and missing arguments are replaced with their defaults.This function ignores the collection of unknown named variadic arguments.Unknown named arguments which are collected can only be accessed through the variadic parameter.</p></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">如果参数以引用方式传递，函数对该参数的任何改变将在函数返回后保留。As of PHP 7the current values will also be returned if the arguments are passed by value.</p></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    此函数仅返回传递参数的副本，不会考虑默认（未传递）参数。   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.func-get-arg-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/functions.arguments.php#functions.variable-arg-list" class="link"><span>...</span> 语法</a></li>    <li class="member"><span class="function">{@link func_get_args()}</span></li>    <li class="member"><span class="function">{@link func_num_args()}</span></li>   </ul>  </span> </div></div>
 * @return mixed|false the specified argument, or false on error.*/
function func_get_arg(int $position): mixed {}

/**
*<div id="function.func-get-args" class="refentry"> <div class="refnamediv">  <h1 class="refname">func_get_args</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">func_get_args</span> &mdash; <span class="dc-title">返回一个包含函数参数列表的数组</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.func-get-args-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>func_get_args</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取函数参数列表的数组。  </p>  <p class="para">   该函数可以配合   <span class="function">{@link func_get_arg()}</span> 和 <span class="function">{@link func_num_args()}</span>   一起使用，从而使得用户自定义函数可以接受自定义个数的参数列表。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.func-get-args-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.func-get-args-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个数组，其中每个元素都是目前用户自定义函数的参数列表的相应元素的副本。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.func-get-args-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   在用户自定义函数外调用则会出现错误警告。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.func-get-args-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">func_get_args()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">foo</span><span style="color: #007700">()<br />{<br />    </span><span style="color: #9876AA">$numargs </span><span style="color: #007700">= </span><span style="color: #9876AA">func_num_args</span><span style="color: #007700">();<br />    echo </span><span style="color: #DD0000">"Number of arguments: </span><span style="color: #9876AA">$numargs</span><span style="color: #DD0000"> \n"</span><span style="color: #007700">;<br />    if (</span><span style="color: #9876AA">$numargs </span><span style="color: #007700">&gt;= </span><span style="color: #9876AA">2</span><span style="color: #007700">) {<br />        echo </span><span style="color: #DD0000">"Second argument is: " </span><span style="color: #007700">. </span><span style="color: #9876AA">func_get_arg</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />    }<br />    </span><span style="color: #9876AA">$arg_list </span><span style="color: #007700">= </span><span style="color: #9876AA">func_get_args</span><span style="color: #007700">();<br />    for (</span><span style="color: #9876AA">$i </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">; </span><span style="color: #9876AA">$i </span><span style="color: #007700">&lt; </span><span style="color: #9876AA">$numargs</span><span style="color: #007700">; </span><span style="color: #9876AA">$i</span><span style="color: #007700">++) {<br />        echo </span><span style="color: #DD0000">"Argument </span><span style="color: #9876AA">$i</span><span style="color: #DD0000"> is: " </span><span style="color: #007700">. </span><span style="color: #9876AA">$arg_list</span><span style="color: #007700">[</span><span style="color: #9876AA">$i</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />    }<br />}<br /><br /></span><span style="color: #9876AA">foo</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Number of arguments: 3 <br>Second argument is: 2<br>Argument 0 is: 1<br>Argument 1 is: 2<br>Argument 2 is: 3<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 byRef 和 byVal 参数的 <span class="function"><strong style="color:#CC7832">func_get_args()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">byVal</span><span style="color: #007700">(</span><span style="color: #9876AA">$arg</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'As passed     : '</span><span style="color: #007700">, </span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">func_get_args</span><span style="color: #007700">()), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$arg </span><span style="color: #007700">= </span><span style="color: #DD0000">'baz'</span><span style="color: #007700">;<br />    echo </span><span style="color: #DD0000">'After change  : '</span><span style="color: #007700">, </span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">func_get_args</span><span style="color: #007700">()), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /><br />function </span><span style="color: #9876AA">byRef</span><span style="color: #007700">(&amp;</span><span style="color: #9876AA">$arg</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'As passed     : '</span><span style="color: #007700">, </span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">func_get_args</span><span style="color: #007700">()), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$arg </span><span style="color: #007700">= </span><span style="color: #DD0000">'baz'</span><span style="color: #007700">;<br />    echo </span><span style="color: #DD0000">'After change  : '</span><span style="color: #007700">, </span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">func_get_args</span><span style="color: #007700">()), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$arg </span><span style="color: #007700">= </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">byVal</span><span style="color: #007700">(</span><span style="color: #9876AA">$arg</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">byRef</span><span style="color: #007700">(</span><span style="color: #9876AA">$arg</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><br />As passed     : array (<br />  0 =&gt; &#039;bar&#039;,<br />)<br />After change  : array (<br />  0 =&gt; &#039;baz&#039;,<br />)<br />As passed     : array (<br />  0 =&gt; &#039;bar&#039;,<br />)<br />After change  : array (<br />  0 =&gt; &#039;baz&#039;,<br />)<br />    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.func-get-args-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">As of PHP 8.0.0, the func_*() family offunctions is intended to be mostly transparent with regard to named arguments,by treating the arguments as if they were all passed positionally,and missing arguments are replaced with their defaults.This function ignores the collection of unknown named variadic arguments.Unknown named arguments which are collected can only be accessed through the variadic parameter.</p></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">如果参数以引用方式传递，函数对该参数的任何改变将在函数返回后保留。As of PHP 7the current values will also be returned if the arguments are passed by value.</p></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    该函数仅仅是返回传递参数的一个副本，并且不包含没有传入的默认参数。   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.func-get-args-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/functions.arguments.php#functions.variable-arg-list" class="link"><span>...</span> 语法</a></li>    <li class="member"><span class="function">{@link func_get_arg()}</span></li>    <li class="member"><span class="function">{@link func_num_args()}</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getParameters()}</span></li>   </ul>  </span> </div></div>
 * @return array an array in which each element is a copy of the corresponding*/
function func_get_args(): array {}

/**
*<div id="function.strlen" class="refentry"> <div class="refnamediv">  <h1 class="refname">strlen</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">strlen</span> &mdash; <span class="dc-title">获取字符串长度</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strlen-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>strlen</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   返回给定的字符串 <span class="parameter" style="color:#3A95FF">string</span> 的长度。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strlen-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       需要计算长度的<span class="type" style="color:#EAB766"><span class="type 字符串" style="color:#EAB766">字符串</span></span>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strlen-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span class="parameter" style="color:#3A95FF">string</span> 的字节数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strlen-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">strlen()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$str </span><span style="color: #007700">= </span><span style="color: #DD0000">'abcdef'</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">); </span><span style="color: #FF8000">// 6<br /><br /></span><span style="color: #9876AA">$str </span><span style="color: #007700">= </span><span style="color: #DD0000">' ab cd '</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">); </span><span style="color: #FF8000">// 7<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.strlen-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="function"><strong style="color:#CC7832">strlen()</strong></span> 返回的是字符串的字节数，而不是其中字符的数量。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strlen-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link count()} - 统计数组、Countable 对象中所有元素的数量</span></li>    <li class="member"><span class="function">{@link grapheme_strlen()} - Get string length in grapheme units</span></li>    <li class="member"><span class="function">{@link iconv_strlen()} - 返回字符串的字符数统计</span></li>    <li class="member"><span class="function">{@link mb_strlen()} - 获取字符串的长度</span></li>   </ul>  </span> </div></div>
 * @return int<0,max> The length of the <i>string</i> on success,*/
function strlen(string $string): int {}

/**
*<div id="function.strcmp" class="refentry"> <div class="refnamediv">  <h1 class="refname">strcmp</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">strcmp</span> &mdash; <span class="dc-title">二进制安全字符串比较</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strcmp-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>strcmp</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string2</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="simpara">   注意该比较区分大小写。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strcmp-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string1</span></dt>     <dd>      <p class="para">       第一个字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">string2</span></dt>     <dd>      <p class="para">       第二个字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strcmp-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">string1</span> 小于 <span class="parameter" style="color:#3A95FF">string2</span> 返回   <span>-1</span>；如果 <span class="parameter" style="color:#3A95FF">string1</span> 大于 <span class="parameter" style="color:#3A95FF">string2</span>   返回 <span>1</span>；如果两者相等，返回 <span>0</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.strcmp-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.2.0</td> <td>  现在此函数返回 <span>-1</span> 或者 <span>1</span>，之前返回负数或正数。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strcmp-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">strcmp()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$var1 </span><span style="color: #007700">= </span><span style="color: #DD0000">"Hello"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$var2 </span><span style="color: #007700">= </span><span style="color: #DD0000">"hello"</span><span style="color: #007700">;<br />if (</span><span style="color: #9876AA">strcmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$var1</span><span style="color: #007700">, </span><span style="color: #9876AA">$var2</span><span style="color: #007700">) !== </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'$var1 is not equal to $var2 in a case sensitive string comparison'</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>     </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strcmp-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link strcasecmp()} - 二进制安全比较字符串（不区分大小写）</span></li>    <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>    <li class="member"><span class="function">{@link substr_compare()} - 二进制安全比较字符串（从偏移位置比较指定长度）</span></li>    <li class="member"><span class="function">{@link strncmp()} - 二进制安全比较字符串开头的若干个字符</span></li>    <li class="member"><span class="function">{@link strstr()} - 查找字符串的首次出现</span></li>    <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>   </ul>  </span> </div></div>
 * @return int less 0 if <i>str1</i> is less than*/
function strcmp(string $string1, string $string2): int {}

/**
*<div id="function.strncmp" class="refentry"> <div class="refnamediv">  <h1 class="refname">strncmp</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">strncmp</span> &mdash; <span class="dc-title">二进制安全比较字符串开头的若干个字符</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strncmp-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>strncmp</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string2</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$length</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   该函数与 <span class="function">{@link strcmp()}</span> 类似，不同之处在于你可以指定两个字符串比较时使用的长度（即最大比较长度）。  </p>  <p class="para">   注意该比较区分大小写。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strncmp-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string1</span></dt>     <dd>      <p class="para">       第一个字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">string2</span></dt>     <dd>      <p class="para">       第二个字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">length</span></dt>     <dd>      <p class="para">       最大比较长度。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strncmp-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">string1</span> 小于 <span class="parameter" style="color:#3A95FF">string2</span> 返回   <span>-1</span>；如果 <span class="parameter" style="color:#3A95FF">string1</span> 大于 <span class="parameter" style="color:#3A95FF">string2</span>   返回 <span>1</span>；如果两者相等，返回 <span>0</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.strncmp-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.2.0</td> <td>  现在此函数返回 <span>-1</span> 或者 <span>1</span>，之前返回负数或正数。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strncmp-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">strncmp()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$var1 </span><span style="color: #007700">= </span><span style="color: #DD0000">'Hello John'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$var2 </span><span style="color: #007700">= </span><span style="color: #DD0000">'Hello Doe'</span><span style="color: #007700">;<br />if (</span><span style="color: #9876AA">strncmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$var1</span><span style="color: #007700">, </span><span style="color: #9876AA">$var2</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">) === </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'First 5 characters of $var1 and $var2 are equals in a case-sensitive string comparison'</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strncmp-seealso">  <h3 class="title">参见</h3>   <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link strncasecmp()} - 二进制安全比较字符串开头的若干个字符（不区分大小写）</span></li>    <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>    <li class="member"><span class="function">{@link substr_compare()} - 二进制安全比较字符串（从偏移位置比较指定长度）</span></li>    <li class="member"><span class="function">{@link strcmp()} - 二进制安全字符串比较</span></li>    <li class="member"><span class="function">{@link strstr()} - 查找字符串的首次出现</span></li>    <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>   </ul>  </span> </div></div>
 * @return int less 0 if <i>str1</i> is less than*/
function strncmp(string $string1, string $string2, int $length): int {}

/**
*<div id="function.strcasecmp" class="refentry"> <div class="refnamediv">  <h1 class="refname">strcasecmp</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">strcasecmp</span> &mdash; <span class="dc-title">二进制安全比较字符串（不区分大小写）</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strcasecmp-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>strcasecmp</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string2</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   二进制安全比较字符串（不区分大小写）。比较不会注意区域；只有 ASCII 字母以不区分大小写的方式进行比较。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strcasecmp-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string1</span></dt>     <dd>      <p class="para">       第一个字符串      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">string2</span></dt>     <dd>      <p class="para">       第二个字符串      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strcasecmp-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">string1</span> 小于 <span class="parameter" style="color:#3A95FF">string2</span> 返回   <span>-1</span>；如果 <span class="parameter" style="color:#3A95FF">string1</span> 大于 <span class="parameter" style="color:#3A95FF">string2</span>   返回 <span>1</span>；如果两者相等，返回 <span>0</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.strcasecmp-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.2.0</td> <td>  现在此函数返回 <span>-1</span> 或者 <span>1</span>，之前返回负数或正数。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strcasecmp-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">strcasecmp()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$var1 </span><span style="color: #007700">= </span><span style="color: #DD0000">"Hello"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$var2 </span><span style="color: #007700">= </span><span style="color: #DD0000">"hello"</span><span style="color: #007700">;<br />if (</span><span style="color: #9876AA">strcasecmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$var1</span><span style="color: #007700">, </span><span style="color: #9876AA">$var2</span><span style="color: #007700">) == </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'$var1 is equal to $var2 in a case-insensitive string comparison'</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>     </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strcasecmp-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link strcmp()} - 二进制安全字符串比较</span></li>    <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>    <li class="member"><span class="function">{@link substr_compare()} - 二进制安全比较字符串（从偏移位置比较指定长度）</span></li>    <li class="member"><span class="function">{@link strncasecmp()} - 二进制安全比较字符串开头的若干个字符（不区分大小写）</span></li>    <li class="member"><span class="function">{@link stristr()} - strstr 函数的忽略大小写版本</span></li>    <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>   </ul>  </span> </div></div>
 * @return int less than 0 if <i>str1</i> is less than*/
function strcasecmp(string $string1, string $string2): int {}

/**
*<div id="function.strncasecmp" class="refentry"> <div class="refnamediv">  <h1 class="refname">strncasecmp</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.2, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">strncasecmp</span> &mdash; <span class="dc-title">二进制安全比较字符串开头的若干个字符（不区分大小写）</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strncasecmp-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>strncasecmp</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string2</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$length</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   该函数与 <span class="function">{@link strcasecmp()}</span> 类似，不同之处在于可以指定两个字符串比较时使用的长度（即最大比较长度）。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strncasecmp-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string1</span></dt>     <dd>      <p class="para">       第一个字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">string2</span></dt>     <dd>      <p class="para">       第二个字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">length</span></dt>     <dd>      <p class="para">       最大比较长度。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strncasecmp-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">string1</span> 小于 <span class="parameter" style="color:#3A95FF">string2</span> 返回   <span>-1</span>；如果 <span class="parameter" style="color:#3A95FF">string1</span> 大于   <span class="parameter" style="color:#3A95FF">string2</span>，返回 <span>1</span>；如果两者相等，返回 <span>0</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.strncasecmp-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.2.0</td> <td>  现在此函数返回 <span>-1</span> 或者 <span>1</span>，之前返回负数或正数。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strncasecmp-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">strncasecmp()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$var1 </span><span style="color: #007700">= </span><span style="color: #DD0000">'Hello John'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$var2 </span><span style="color: #007700">= </span><span style="color: #DD0000">'hello Doe'</span><span style="color: #007700">;<br />if (</span><span style="color: #9876AA">strncasecmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$var1</span><span style="color: #007700">, </span><span style="color: #9876AA">$var2</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">) === </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'First 5 characters of $var1 and $var2 are equals in a case-insensitive string comparison'</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strncasecmp-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link strncmp()} - 二进制安全比较字符串开头的若干个字符</span></li>    <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>    <li class="member"><span class="function">{@link substr_compare()} - 二进制安全比较字符串（从偏移位置比较指定长度）</span></li>    <li class="member"><span class="function">{@link strcasecmp()} - 二进制安全比较字符串（不区分大小写）</span></li>    <li class="member"><span class="function">{@link stristr()} - strstr 函数的忽略大小写版本</span></li>    <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>   </ul>  </span> </div></div>
 * @return int less than 0 if <i>str1</i> is less than*/
function strncasecmp(string $string1, string $string2, int $length): int {}

/**
*<div id="function.str-starts-with" class="refentry"> <div class="refnamediv">  <h1 class="refname">str_starts_with</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">str_starts_with</span> &mdash; <span class="dc-title">检查字符串是否以指定子串开头</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.str-starts-with-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>str_starts_with</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$haystack</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$needle</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   执行大小写区分的检查，表明 <span class="parameter" style="color:#3A95FF">haystack</span> 是否以 <span class="parameter" style="color:#3A95FF">needle</span> 开头。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.str-starts-with-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">haystack</span></dt>     <dd>      <p class="para">       在其中搜索的字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">needle</span></dt>     <dd>      <p class="para">       要在 <span class="parameter" style="color:#3A95FF">haystack</span> 中搜索的子串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.str-starts-with-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">haystack</span> 以 <span class="parameter" style="color:#3A95FF">needle</span> 开头，返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.str-starts-with-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 使用空字符串 <span>&#039;&#039;</span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">str_starts_with</span><span style="color: #007700">(</span><span style="color: #DD0000">'abc'</span><span style="color: #007700">, </span><span style="color: #DD0000">''</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"All strings start with the empty string"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>All strings start with the empty string<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #2 展示大小写区分</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$string </span><span style="color: #007700">= </span><span style="color: #DD0000">'The lazy fox jumped over the fence'</span><span style="color: #007700">;<br /><br />if (</span><span style="color: #9876AA">str_starts_with</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">, </span><span style="color: #DD0000">'The'</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"The string starts with 'The'\n"</span><span style="color: #007700">;<br />}<br /><br />if (</span><span style="color: #9876AA">str_starts_with</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">, </span><span style="color: #DD0000">'the'</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">'The string starts with "the"'</span><span style="color: #007700">;<br />} else {<br />    echo </span><span style="color: #DD0000">'"the" was not found because the case does not match'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>The string starts with &#039;The&#039;<br>&quot;the&quot; was not found because the case does not match<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.str-starts-with-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.str-starts-with-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link str_contains()} - 确定字符串是否包含指定子串</span></li>    <li class="member"><span class="function">{@link str_ends_with()} - 检查字符串是否以指定子串结尾</span></li>    <li class="member"><span class="function">{@link stripos()} - 查找字符串首次出现的位置（不区分大小写）</span></li>    <li class="member"><span class="function">{@link strrpos()} - 计算指定字符串在目标字符串中最后一次出现的位置</span></li>    <li class="member"><span class="function">{@link strripos()} - 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</span></li>    <li class="member"><span class="function">{@link strstr()} - 查找字符串的首次出现</span></li>    <li class="member"><span class="function">{@link strpbrk()} - 在字符串中查找一组字符的任何一个字符</span></li>    <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>    <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>   </ul>  </span> </div></div>
 * @return bool*/
function str_starts_with(string $haystack, string $needle): bool {}

/**
*<div id="function.str-ends-with" class="refentry"> <div class="refnamediv">  <h1 class="refname">str_ends_with</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">str_ends_with</span> &mdash; <span class="dc-title">检查字符串是否以指定子串结尾</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.str-ends-with-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>str_ends_with</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$haystack</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$needle</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   执行大小写区分的检查，表明 <span class="parameter" style="color:#3A95FF">haystack</span> 是否以 <span class="parameter" style="color:#3A95FF">needle</span> 结尾。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.str-ends-with-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">haystack</span></dt>     <dd>      <p class="para">       在其中搜索的字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">needle</span></dt>     <dd>      <p class="para">       要在 <span class="parameter" style="color:#3A95FF">haystack</span> 中搜索的子串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.str-ends-with-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">haystack</span> 以 <span class="parameter" style="color:#3A95FF">needle</span> 结尾，返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.str-ends-with-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 使用空字符串 <span>&#039;&#039;</span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">str_ends_with</span><span style="color: #007700">(</span><span style="color: #DD0000">'abc'</span><span style="color: #007700">, </span><span style="color: #DD0000">''</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"All strings end with the empty string"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>All strings end with the empty string<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #2 展示大小写区分</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$string </span><span style="color: #007700">= </span><span style="color: #DD0000">'The lazy fox jumped over the fence'</span><span style="color: #007700">;<br /><br />if (</span><span style="color: #9876AA">str_ends_with</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">, </span><span style="color: #DD0000">'fence'</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"The string ends with 'fence'\n"</span><span style="color: #007700">;<br />}<br /><br />if (</span><span style="color: #9876AA">str_ends_with</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">, </span><span style="color: #DD0000">'Fence'</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">'The string ends with "Fence"'</span><span style="color: #007700">;<br />} else {<br />    echo </span><span style="color: #DD0000">'"Fence" was not found because the case does not match'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>The string ends with &#039;fence&#039;<br>&quot;Fence&quot; was not found because the case does not match<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.str-ends-with-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.str-ends-with-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link str_contains()} - 确定字符串是否包含指定子串</span></li>    <li class="member"><span class="function">{@link str_starts_with()} - 检查字符串是否以指定子串开头</span></li>    <li class="member"><span class="function">{@link stripos()} - 查找字符串首次出现的位置（不区分大小写）</span></li>    <li class="member"><span class="function">{@link strrpos()} - 计算指定字符串在目标字符串中最后一次出现的位置</span></li>    <li class="member"><span class="function">{@link strripos()} - 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</span></li>    <li class="member"><span class="function">{@link strstr()} - 查找字符串的首次出现</span></li>    <li class="member"><span class="function">{@link strpbrk()} - 在字符串中查找一组字符的任何一个字符</span></li>    <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>    <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>   </ul>  </span> </div></div>
 * @return bool*/
function str_ends_with(string $haystack, string $needle): bool {}

/**
*<div id="function.str-contains" class="refentry"> <div class="refnamediv">  <h1 class="refname">str_contains</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">str_contains</span> &mdash; <span class="dc-title">确定字符串是否包含指定子串</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.str-contains-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>str_contains</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$haystack</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$needle</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   执行大小写区分的检查，表明 <span class="parameter" style="color:#3A95FF">needle</span> 是否包含在 <span class="parameter" style="color:#3A95FF">haystack</span> 中。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.str-contains-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">haystack</span></dt>     <dd>      <p class="para">       在其中搜索的字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">needle</span></dt>     <dd>      <p class="para">       要在 <span class="parameter" style="color:#3A95FF">haystack</span> 中搜索的子串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.str-contains-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">needle</span> 在 <span class="parameter" style="color:#3A95FF">haystack</span> 中，返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.str-contains-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 使用空字符串 <span>&#039;&#039;</span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">str_contains</span><span style="color: #007700">(</span><span style="color: #DD0000">'abc'</span><span style="color: #007700">, </span><span style="color: #DD0000">''</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"Checking the existence of the empty string will always return true"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Checking the existence of the empty string will always return true<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #2 展示大小写区分</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$string </span><span style="color: #007700">= </span><span style="color: #DD0000">'The lazy fox jumped over the fence'</span><span style="color: #007700">;<br /><br />if (</span><span style="color: #9876AA">str_contains</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">, </span><span style="color: #DD0000">'lazy'</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"The string 'lazy' was found in the string\n"</span><span style="color: #007700">;<br />}<br /><br />if (</span><span style="color: #9876AA">str_contains</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">, </span><span style="color: #DD0000">'Lazy'</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">'The string "Lazy" was found in the string'</span><span style="color: #007700">;<br />} else {<br />    echo </span><span style="color: #DD0000">'"Lazy" was not found because the case does not match'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>The string &#039;lazy&#039; was found in the string<br>&quot;Lazy&quot; was not found because the case does not match<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.str-contains-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.str-contains-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link str_ends_with()} - 检查字符串是否以指定子串结尾</span></li>    <li class="member"><span class="function">{@link str_starts_with()} - 检查字符串是否以指定子串开头</span></li>    <li class="member"><span class="function">{@link stripos()} - 查找字符串首次出现的位置（不区分大小写）</span></li>    <li class="member"><span class="function">{@link strrpos()} - 计算指定字符串在目标字符串中最后一次出现的位置</span></li>    <li class="member"><span class="function">{@link strripos()} - 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</span></li>    <li class="member"><span class="function">{@link strstr()} - 查找字符串的首次出现</span></li>    <li class="member"><span class="function">{@link strpbrk()} - 在字符串中查找一组字符的任何一个字符</span></li>    <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>    <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>   </ul>  </span> </div></div>
 * @return bool*/
function str_contains(string $haystack, string $needle): bool {}

/**
*<div id="function.str-decrement" class="refentry"> <div class="refnamediv">  <h1 class="refname">str_decrement</h1>  <p class="verinfo">(PHP 8 &gt;= 8.3.0)</p><p class="refpurpose"><span class="refname">str_decrement</span> &mdash; <span class="dc-title">Decrement an alphanumeric string</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.str-decrement-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>str_decrement</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Returns the decremented alphanumeric <abbr title="American Standard Code for Information Interchange">ASCII</abbr>   <span class="parameter" style="color:#3A95FF">string</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.str-decrement-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       The input string.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.str-decrement-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the decremented alphanumeric <abbr title="American Standard Code for Information Interchange">ASCII</abbr> string.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.str-decrement-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   A <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span> is thrown if   <span class="parameter" style="color:#3A95FF">string</span> is empty.  </p>  <p class="para">   A <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span> is thrown if   <span class="parameter" style="color:#3A95FF">string</span> is not an alphanumeric   <abbr title="American Standard Code for Information Interchange">ASCII</abbr> string.  </p>  <p class="para">   A <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span> is thrown if   <span class="parameter" style="color:#3A95FF">string</span> cannot be decremented.   For example, <span>&quot;A&quot;</span> or <span>&quot;0&quot;</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.str-decrement-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Basic <span class="function"><strong style="color:#CC7832">str_decrement()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$str </span><span style="color: #007700">= </span><span style="color: #DD0000">'ABC'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">str_decrement</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(3) &quot;ABB&quot;<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">str_decrement()</strong></span> example with a carry</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$str </span><span style="color: #007700">= </span><span style="color: #DD0000">'ZA'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">str_decrement</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$str </span><span style="color: #007700">= </span><span style="color: #DD0000">'AA'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">str_decrement</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(2) &quot;YZ&quot;<br>string(1) &quot;Z&quot;<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.str-decrement-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link str_increment()} - Increment an alphanumeric string</span></li>   </ul>  </span> </div></div>
*/
function str_decrement(string $string): string {}

/**
*<div id="function.str-increment" class="refentry"> <div class="refnamediv">  <h1 class="refname">str_increment</h1>  <p class="verinfo">(PHP 8 &gt;= 8.3.0)</p><p class="refpurpose"><span class="refname">str_increment</span> &mdash; <span class="dc-title">Increment an alphanumeric string</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.str-increment-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>str_increment</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Returns the incremented alphanumeric <abbr title="American Standard Code for Information Interchange">ASCII</abbr>   <span class="parameter" style="color:#3A95FF">string</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.str-increment-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       The input string.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.str-increment-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the incremented alphanumeric <abbr title="American Standard Code for Information Interchange">ASCII</abbr> string.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.str-increment-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   A <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span> is thrown if   <span class="parameter" style="color:#3A95FF">string</span> is empty.  </p>  <p class="para">   A <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span> is thrown if   <span class="parameter" style="color:#3A95FF">string</span> is not an alphanumeric   <abbr title="American Standard Code for Information Interchange">ASCII</abbr> string.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.str-increment-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Basic <span class="function"><strong style="color:#CC7832">str_increment()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$str </span><span style="color: #007700">= </span><span style="color: #DD0000">'ABC'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">str_increment</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(3) &quot;ABD&quot;<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">str_increment()</strong></span> example with a carry</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$str </span><span style="color: #007700">= </span><span style="color: #DD0000">'DZ'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">str_increment</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$str </span><span style="color: #007700">= </span><span style="color: #DD0000">'ZZ'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">str_increment</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(2) &quot;EA&quot;<br>string(3) &quot;AAA&quot;<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.str-increment-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link str_decrement()} - Decrement an alphanumeric string</span></li>   </ul>  </span> </div></div>
*/
function str_increment(string $string): string {}

/**
*<div id="function.each" class="refentry">   <div class="refnamediv">    <h1 class="refname">each</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">each</span> &mdash; <span class="dc-title">返回数组中当前的键／值对并将数组指针向前移动一步</span></p>   </div>  <div id="function.each-refsynopsisdiv">  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数已自 PHP 7.2.0 起被<em>废弃</em>，并自 PHP 8.0.0 起被<em>移除</em>。 强烈建议不要依赖本函数。</p></div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.each-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>each</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">object</span></span> <span class="parameter" style="color:#3A95FF">&$array</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">       返回数组中当前的键／值对并将数组指针向前移动一步  </p>    <p class="para">     在执行 <span class="function"><strong style="color:#CC7832">each()</strong></span>     之后，数组指针将停留在数组中的下一个单元或者当碰到数组结尾时停留在最后一个单元。如果要再用     each 遍历数组，必须使用 <span class="function">{@link reset()}</span>。    </p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.each-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.each-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    返回 <span class="parameter" style="color:#3A95FF">array</span> 数组中当前指针位置的键／值对并向前移动数组指针。键值对被返回为四个单元的数组，键名为<span>0</span>，<span>1</span>，<span>key</span>和 <span>value</span>。单元 <span>0</span> 和     <span>key</span> 包含有数组单元的键名，<span>1</span> 和     <span>value</span> 包含有数据。  </p>  <p class="para">     如果内部指针越过了数组的末端，则 <span class="function"><strong style="color:#CC7832">each()</strong></span> 返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.each-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">each()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$foo </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"bob"</span><span style="color: #007700">, </span><span style="color: #DD0000">"fred"</span><span style="color: #007700">, </span><span style="color: #DD0000">"jussi"</span><span style="color: #007700">, </span><span style="color: #DD0000">"jouni"</span><span style="color: #007700">, </span><span style="color: #DD0000">"egon"</span><span style="color: #007700">, </span><span style="color: #DD0000">"marliese"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #9876AA">each</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     <var class="varname">$bar</var> 现在包含有如下的键／值对：    </p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [1] =&gt; bob<br>    [value] =&gt; bob<br>    [0] =&gt; 0<br>    [key] =&gt; 0<br>)<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="informalexample">    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$foo </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"Robert" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"Bob"</span><span style="color: #007700">, </span><span style="color: #DD0000">"Seppo" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"Sepi"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #9876AA">each</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <p class="para">     <var class="varname">$bar</var> 现在包含有如下的键／值对：    </p>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [1] =&gt; Bob<br>    [value] =&gt; Bob<br>    [0] =&gt; Robert<br>    [key] =&gt; Robert<br>)<br></span></div>    </div>   </div>  </p>  <p class="para">   <span class="function"><strong style="color:#CC7832">each()</strong></span> 经常和 <span class="function">{@link list()}</span>     结合使用来遍历数组，例如：   <div class="example" id="">    <p><strong>示例 #2 用 <span class="function"><strong style="color:#CC7832">each()</strong></span> 遍历数组</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fruit </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'a' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">, </span><span style="color: #DD0000">'b' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'banana'</span><span style="color: #007700">, </span><span style="color: #DD0000">'c' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'cranberry'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">reset</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruit</span><span style="color: #007700">);<br />while (list(</span><span style="color: #9876AA">$key</span><span style="color: #007700">, </span><span style="color: #9876AA">$val</span><span style="color: #007700">) = </span><span style="color: #9876AA">each</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruit</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000"> =&gt; </span><span style="color: #9876AA">$val</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>a =&gt; apple<br>b =&gt; banana<br>c =&gt; cranberry<br></span></div>    </div>   </div>  </p>  <div class="caution"><strong class="caution">警告</strong>     <p class="para">      因为将一个数组赋值给另一个数组时会重置原来的数组指针，因此在上边的例子中如果我们在循环内部将      <var class="varname">$fruit</var> 赋给了另一个变量的话将会导致无限循环。     </p>  </div>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    <span class="function"><strong style="color:#CC7832">each()</strong></span> 也接受对象，但可能会返回意外结果。因此不建议使用    <span class="function"><strong style="color:#CC7832">each()</strong></span> 遍历对象属性。   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.each-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link key()} - 从关联数组中取得键名</span></li>    <li class="member"><span class="function">{@link list()} - 把数组中的值赋给一组变量</span></li>    <li class="member"><span class="function">{@link current()} - 返回数组中的当前值</span></li>    <li class="member"><span class="function">{@link reset()} - 将数组的内部指针指向第一个单元</span></li>    <li class="member"><span class="function">{@link next()} - 将数组中的内部指针向前移动一位</span></li>    <li class="member"><span class="function">{@link prev()} - 将数组的内部指针倒回一位</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/control-structures.foreach.php" class="link">foreach</a></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.iterations.php" class="link">遍历对象</a></li>   </ul>  </span> </div>  </div>
 * @return array the current key and value pair from the array*/
function each(&$array): array {}

/**
*<div id="function.error-reporting" class="refentry"> <div class="refnamediv">  <h1 class="refname">error_reporting</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">error_reporting</span> &mdash; <span class="dc-title">设置应该报告何种 PHP 错误</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.error-reporting-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>error_reporting</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$error_level</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">error_reporting()</strong></span> 函数能够在运行时设置 <a href="https://www.php.net/manual/zh/errorfunc.configuration.php#ini.error-reporting" class="link">error_reporting</a> 指令。   PHP 有诸多错误级别，使用该函数可以设置在脚本运行时的级别。   如果没有设置可选参数 <span class="parameter" style="color:#3A95FF">error_level</span>，   <span class="function"><strong style="color:#CC7832">error_reporting()</strong></span> 仅会返回当前的错误报告级别。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.error-reporting-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">error_level</span></dt>     <dd>      <p class="para">       新的 <a href="https://www.php.net/manual/zh/errorfunc.configuration.php#ini.error-reporting" class="link">error_reporting</a> 级别。       可以是一个位掩码也可以是一个已命名的常量。       强烈建议使用已命名的常量，以确保兼容将来的版本。       由于错误级别的添加、整数取值范围的增加，       较久的基于整数的错误级别不会总是和预期的表现一致。      </p>      <p class="para">       可用的错误级别常量及其实际含义描述在了        <a href="https://www.php.net/manual/zh/errorfunc.constants.php" class="link">predefined constants</a> 中。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.error-reporting-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   在更改为 <span class="parameter" style="color:#3A95FF">error_level</span> <em>之前</em>返回 <a href="https://www.php.net/manual/zh/errorfunc.configuration.php#ini.error-reporting" class="link">error_reporting</a> 级别。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    <a href="https://www.php.net/manual/zh/language.operators.errorcontrol.php" class="link">错误控制</a> <span>@</span> 运算符在错误处理期间会更改错误级别。   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.error-reporting-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">error_level</span> 现在可以为空。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.error-reporting-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1556">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">error_reporting()</strong></span> 范例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">// 关闭所有PHP错误报告<br /></span><span style="color: #9876AA">error_reporting</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Report simple running errors<br /></span><span style="color: #9876AA">error_reporting</span><span style="color: #007700">(</span><span style="color: #9876AA">E_ERROR </span><span style="color: #007700">| </span><span style="color: #9876AA">E_WARNING </span><span style="color: #007700">| </span><span style="color: #9876AA">E_PARSE</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 报告 E_NOTICE也挺好 (报告未初始化的变量<br />// 或者捕获变量名的错误拼写)<br /></span><span style="color: #9876AA">error_reporting</span><span style="color: #007700">(</span><span style="color: #9876AA">E_ERROR </span><span style="color: #007700">| </span><span style="color: #9876AA">E_WARNING </span><span style="color: #007700">| </span><span style="color: #9876AA">E_PARSE </span><span style="color: #007700">| </span><span style="color: #9876AA">E_NOTICE</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 除了 E_NOTICE，报告其他所有错误<br /></span><span style="color: #9876AA">error_reporting</span><span style="color: #007700">(</span><span style="color: #9876AA">E_ALL </span><span style="color: #007700">^ </span><span style="color: #9876AA">E_NOTICE</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 报告所有 PHP 错误<br /></span><span style="color: #9876AA">error_reporting</span><span style="color: #007700">(</span><span style="color: #9876AA">E_ALL</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 报告所有 PHP 错误<br /></span><span style="color: #9876AA">error_reporting</span><span style="color: #007700">(-</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 和 error_reporting(E_ALL); 一样<br /></span><span style="color: #9876AA">ini_set</span><span style="color: #007700">(</span><span style="color: #DD0000">'error_reporting'</span><span style="color: #007700">, </span><span style="color: #9876AA">E_ALL</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.error-reporting-notes">  <h3 class="title">注释</h3>  <div class="tip"><strong class="tip">小技巧</strong>   <p class="simpara">    传入 <span>-1</span> 的值将尽可能显示所有错误，甚至包括将来 PHP    可能加入的新的错误级别和常量。常量 <strong><span>E_ALL</span></strong> 有同样的行为。   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.error-reporting-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/errorfunc.configuration.php#ini.display-errors" class="link">display_errors</a> 指令</li>    <li class="member"><a href="https://www.php.net/manual/zh/errorfunc.configuration.php#ini.php-errors" class="link">html_errors</a> 指令</li>    <li class="member"><a href="https://www.php.net/manual/zh/errorfunc.configuration.php#ini.xmlrpc-errors" class="link">xmlrpc_errors</a> 指令</li>    <li class="member"><a href="https://www.php.net/manual/zh/language.operators.errorcontrol.php" class="link">错误控制</a>运算符</li>    <li class="member"><span class="function">{@link ini_set()} - 为一个配置选项设置值</span></li>   </ul>  </span> </div></div>
 * @return int the old error_reporting*/
function error_reporting(?int $error_level): int {}

/**
*<div id="function.define" class="refentry"> <div class="refnamediv">  <h1 class="refname">define</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">define</span> &mdash; <span class="dc-title">定义一个常量</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.define-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>define</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$constant_name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$case_insensitive</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">  在运行时定义一个常量。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.define-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">constant_name</span></dt>     <dd>      <p class="para">       常量名。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        可以用 <span class="function"><strong style="color:#CC7832">define()</strong></span> 定义保留关键词甚至无效名称的常量，它的值可以（仅可以）通过        <span class="function">{@link constant()}</span> 获取。        不过，不推荐这么做。       </p>      </p></blockquote>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       常量的值。在 PHP 5 中，<span class="parameter" style="color:#3A95FF">value</span> 必须是       <span class="type" style="color:#EAB766"><span class="type scalar" style="color:#EAB766">scalar</span></span> 值（<span class="type" style="color:#EAB766">int</span>、       <span class="type" style="color:#EAB766">float</span>、<span class="type" style="color:#EAB766">string</span>、<span class="type" style="color:#EAB766">boolean</span> 或       <strong><span>null</span></strong>）。在 PHP 7 中， <span class="type" style="color:#EAB766">array</span> 值也被允许。      </p>      <div class="warning"><strong class="warning">警告</strong>       <p class="para">        常量还可以定义为 <span class="type" style="color:#EAB766">resource</span> 类型，但并不推荐这样做，因为可能会有不可预知的行为发生。       </p>      </div>     </dd>             <dt><span class="parameter" style="color:#3A95FF">case_insensitive</span></dt>     <dd>      <p class="para">       如果设置为 <strong><span>true</span></strong>，则该常量不区分大小写。默认是区分大小写的。比如，       <span>CONSTANT</span> 和 <span>Constant</span> 代表了不同的值。      </p>      <div class="warning"><strong class="warning">警告</strong>       <p class="simpara">        PHP 7.3.0 起，废弃定义不区分大小写的常量。自 PHP 8.0.0 开始，        只接受 <strong><span>false</span></strong> 值，传递 <strong><span>true</span></strong> 将产生警告。       </p>      </div>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        不区分大小写的常量以小写的形式储存。       </p>      </p></blockquote>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.define-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.define-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        现在传递 <strong><span>true</span></strong> 到 <span class="parameter" style="color:#3A95FF">case_insensitive</span>        会发出 <strong><span>E_WARNING</span></strong>。仍然允许传递 <strong><span>false</span></strong>。       </td>      </tr>      <tr>       <td>7.3.0</td>       <td>        废弃了 <span class="parameter" style="color:#3A95FF">case_insensitive</span>，并将在 8.0.0 版中移除。       </td>      </tr>      <tr>       <td>7.0.0</td>       <td>        允许 <span class="type" style="color:#EAB766">array</span> 的值。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.define-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 定义常量</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />define</span><span style="color: #007700">(</span><span style="color: #DD0000">"CONSTANT"</span><span style="color: #007700">, </span><span style="color: #DD0000">"Hello world."</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">CONSTANT</span><span style="color: #007700">; </span><span style="color: #FF8000">// 输出 "Hello world."<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">Constant</span><span style="color: #007700">; </span><span style="color: #FF8000">// 输出 "Constant" 并导致 Notice<br /><br /></span><span style="color: #9876AA">define</span><span style="color: #007700">(</span><span style="color: #DD0000">"GREETING"</span><span style="color: #007700">, </span><span style="color: #DD0000">"Hello you."</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">GREETING</span><span style="color: #007700">; </span><span style="color: #FF8000">// 输出 "Hello you."<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">Greeting</span><span style="color: #007700">; </span><span style="color: #FF8000">// 输出 "Hello you."<br /><br />// PHP 7 起就可以运行了<br /></span><span style="color: #9876AA">define</span><span style="color: #007700">(</span><span style="color: #DD0000">'ANIMALS'</span><span style="color: #007700">, array(<br />    </span><span style="color: #DD0000">'dog'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'cat'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'bird'<br /></span><span style="color: #007700">));<br />echo </span><span style="color: #9876AA">ANIMALS</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]; </span><span style="color: #FF8000">// 输出 "cat"<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 以保留名称定义常量</strong></p>    <div class="example-contents"><p>     本例子说明了以 <a href="https://www.php.net/manual/zh/language.constants.predefined.php" class="link">魔术常量</a>相同名称定义常量的<em>能力</em>。由于行为结果过于令人迷惑，所以实践中不推荐。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">defined</span><span style="color: #007700">(</span><span style="color: #DD0000">'__LINE__'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">define</span><span style="color: #007700">(</span><span style="color: #DD0000">'__LINE__'</span><span style="color: #007700">, </span><span style="color: #DD0000">'test'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">constant</span><span style="color: #007700">(</span><span style="color: #DD0000">'__LINE__'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">__LINE__</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>bool(true)<br>string(4) &quot;test&quot;<br>int(5)<br></span></div>   </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.define-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link defined()} - 检查某个名称的常量是否存在</span></li>    <li class="member"><span class="function">{@link constant()} - 返回一个常量的值</span></li>    <li class="member">关于<a href="https://www.php.net/manual/zh/language.constants.php" class="link">常量</a>的章节</li>   </ul>  </span> </div></div>
 * @return bool true on success or false on failure.*/
function define(
    string $constant_name,
    #[LanguageLevelTypeAware(['8.1' => 'mixed'], default: 'null|array|bool|int|float|string')] $value,
    #[Deprecated(since: "7.3")] bool $case_insensitive = false
): bool {}

/**
*<div id="function.defined" class="refentry"> <div class="refnamediv">  <h1 class="refname">defined</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">defined</span> &mdash; <span class="dc-title">检查某个名称的常量是否存在</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.defined-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>defined</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$constant_name</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查该名称的常量是否已定义。  </p>  <p class="para">   此函数也可以跟<a href="https://www.php.net/manual/zh/language.oop5.constants.php" class="link">累常量</a>和 <a href="https://www.php.net/manual/zh/language.types.enumerations.php" class="link">enum cases</a> 一起工作。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    如果你要检查一个变量是否存在，请使用 <span class="function">{@link isset()}</span>。    <span class="function"><strong style="color:#CC7832">defined()</strong></span> 函数仅对 <a href="https://www.php.net/manual/zh/language.constants.php" class="link">常量</a>    有效。如果你要检测某个函数是否存在，使用 <span class="function">{@link function_exists()}</span>。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.defined-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">constant_name</span></dt>     <dd>      <p class="para">       常量的名称。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.defined-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  如果名称 <span class="parameter" style="color:#3A95FF">constant_name</span> 的常量已定义，返回 <strong><span>true</span></strong>；未定义则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.defined-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 检查常量</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">// 注意引号的使用，这很重要。这个例子是检查<br /> * 如果字符串 'TEST' 是 TEST 常量的名称 <br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">defined</span><span style="color: #007700">(</span><span style="color: #DD0000">'TEST'</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #9876AA">TEST</span><span style="color: #007700">;<br />}<br /><br /><br />interface </span><span style="color: #9876AA">bar </span><span style="color: #007700">{<br />    const </span><span style="color: #9876AA">test </span><span style="color: #007700">= </span><span style="color: #DD0000">'foobar!'</span><span style="color: #007700">;<br />}<br /><br />class </span><span style="color: #9876AA">foo </span><span style="color: #007700">{<br />    const </span><span style="color: #9876AA">test </span><span style="color: #007700">= </span><span style="color: #DD0000">'foobar!'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">defined</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar::test'</span><span style="color: #007700">)); </span><span style="color: #FF8000">// bool(true)<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">defined</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo::test'</span><span style="color: #007700">)); </span><span style="color: #FF8000">// bool(true)<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #2 检测 Enum Cases（自 PHP 8.1.0 起）</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">enum </span><span style="color: #9876AA">Suit<br /></span><span style="color: #007700">{<br />    case </span><span style="color: #9876AA">Hearts</span><span style="color: #007700">;<br />    case </span><span style="color: #9876AA">Diamonds</span><span style="color: #007700">;<br />    case </span><span style="color: #9876AA">Clubs</span><span style="color: #007700">;<br />    case </span><span style="color: #9876AA">Spades</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">defined</span><span style="color: #007700">(</span><span style="color: #DD0000">'Suit::Hearts'</span><span style="color: #007700">)); </span><span style="color: #FF8000">// bool(true)<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.defined-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link define()} - 定义一个常量</span></li>    <li class="member"><span class="function">{@link constant()} - 返回一个常量的值</span></li>    <li class="member"><span class="function">{@link get_defined_constants()} - 返回所有常量的关联数组，键是常量名，值是常量值</span></li>    <li class="member"><span class="function">{@link function_exists()} - 如果给定的函数已经被定义就返回 true</span></li>    <li class="member">关于<a href="https://www.php.net/manual/zh/language.constants.php" class="link">常量</a>的章节</li>   </ul>  </span> </div></div>
 * @return bool true if the named constant given by <i>name</i>*/
function defined(string $constant_name): bool {}

/**
*<div id="function.get-class" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_class</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">get_class</span> &mdash; <span class="dc-title">返回对象的类名</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-class-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_class</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   返回指定 <span class="parameter" style="color:#3A95FF">object</span> 的类名。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-class-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       要测试的对象。如果在类里，此参数可以省略。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <span class="simpara">        自 PHP 7.2.0 起，<span class="parameter" style="color:#3A95FF">object</span> 不再允许显式传递 <strong><span>null</span></strong>        并抛出 <strong><span>E_WARNING</span></strong>。自 PHP 8.0.0 起，传递 <strong><span>null</span></strong>        会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.typeerror.php" class="classname">TypeError</a></span>。       </span>      </p></blockquote>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-class-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span class="parameter" style="color:#3A95FF">object</span>   实例的类名。  </p>  <p class="para">   如果在类中省略 <span class="parameter" style="color:#3A95FF">object</span>，   则返回当前所在类的名称。  </p>  <p class="para">    如果 <span class="parameter" style="color:#3A95FF">object</span> 是命名空间中某个类的实例，则会返回带上命名空间的类名。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.get-class-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果用除对象外的其它类型调用 <span class="function"><strong style="color:#CC7832">get_class()</strong></span>，则会抛出   <span class="classname"><a href="https://www.php.net/manual/zh/class.typeerror.php" class="classname">TypeError</a></span>。在 PHP 8.0.0 之前，会引发   <strong><span>E_WARNING</span></strong> 级别的错误。  </p>  <p class="para">   如果在类外不带任何参数调用 <span class="function"><strong style="color:#CC7832">get_class()</strong></span>，会抛出   <span class="classname"><a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a></span>。在 PHP 8.0.0 之前，会引发   <strong><span>E_WARNING</span></strong> 级别的错误。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.get-class-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        在类外不带任何参数调用此函数将会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a></span>。之前会引发        <strong><span>E_WARNING</span></strong> 并且函数会返回 <strong><span>false</span></strong>。       </td>      </tr>      <tr>       <td>7.2.0</td>       <td>        在此版本之前，<span class="parameter" style="color:#3A95FF">object</span> 的默认值是         <strong><span>null</span></strong>，它与不传递任何值有相同的效果。<span class="parameter" style="color:#3A95FF">object</span>        已经移除了默认值 <strong><span>null</span></strong> 且不再是有效的输入。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-class-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 使用 <span class="function"><strong style="color:#CC7832">get_class()</strong></span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class </span><span style="color: #9876AA">foo </span><span style="color: #007700">{<br />    function </span><span style="color: #9876AA">name</span><span style="color: #007700">()<br />    {<br />        echo </span><span style="color: #DD0000">"My name is " </span><span style="color: #007700">, </span><span style="color: #9876AA">get_class</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">) , </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />    }<br />}<br /><br /></span><span style="color: #FF8000">// 创建对象<br /></span><span style="color: #9876AA">$bar </span><span style="color: #007700">= new </span><span style="color: #9876AA">foo</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 类外调用<br /></span><span style="color: #007700">echo </span><span style="color: #DD0000">"Its name is " </span><span style="color: #007700">, </span><span style="color: #9876AA">get_class</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">) , </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 类内调用<br /></span><span style="color: #9876AA">$bar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">name</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Its name is foo<br>My name is foo<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #2 父类中使用 <span class="function"><strong style="color:#CC7832">get_class()</strong></span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">abstract class </span><span style="color: #9876AA">bar </span><span style="color: #007700">{<br />    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">()<br />    {<br />        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">get_class</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">));<br />        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">get_class</span><span style="color: #007700">());<br />    }<br />}<br /><br />class </span><span style="color: #9876AA">foo </span><span style="color: #007700">extends </span><span style="color: #9876AA">bar </span><span style="color: #007700">{<br />}<br /><br />new </span><span style="color: #9876AA">foo</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(3) &quot;foo&quot;<br>string(3) &quot;bar&quot;<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #3 命名空间中的类中使用 <span class="function"><strong style="color:#CC7832">get_class()</strong></span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">namespace </span><span style="color: #9876AA">Foo\Bar</span><span style="color: #007700">;<br /><br />class </span><span style="color: #9876AA">Baz </span><span style="color: #007700">{<br />    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">()<br />    {<br /><br />    }<br />}<br /><br /></span><span style="color: #9876AA">$baz </span><span style="color: #007700">= new </span><span style="color: #9876AA">\Foo\Bar\Baz</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">get_class</span><span style="color: #007700">(</span><span style="color: #9876AA">$baz</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(11) &quot;Foo\Bar\Baz&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-class-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link get_called_class()} - 后期静态绑定（&quot;Late Static Binding&quot;）类的名称</span></li>    <li class="member"><span class="function">{@link get_parent_class()} - 检索对象或者类的父级类名</span></li>    <li class="member"><span class="function">{@link gettype()} - 获取变量的类型</span></li>    <li class="member"><span class="function">{@link get_debug_type()} - 以适合调试的方式获取变量的类型名称</span></li>    <li class="member"><span class="function">{@link is_subclass_of()} - 检查对象是否继承或者实现（implement）此类</span></li>   </ul>  </span> </div></div>
 * @return string <p>The name of the class of which <i>object</i> is an*/
function get_class(object $object): string {}

/**
*<div id="function.get-called-class" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_called_class</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">get_called_class</span> &mdash; <span class="dc-title">后期静态绑定（&quot;Late Static Binding&quot;）类的名称</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-called-class-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_called_class</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   获取静态方法调用的类名。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-called-class-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-called-class-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回类的名称。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.get-called-class-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果在类外调用 <span class="function"><strong style="color:#CC7832">get_called_class()</strong></span>，将抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a></span>。在   PHP 8.0.0 之前，触发 <strong><span>E_WARNING</span></strong> 级别错误。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.get-called-class-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        类外调用此函数现在将触发 <span class="classname"><a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a></span>。        之前触发 <strong><span>E_WARNING</span></strong> 并且函数返回 <strong><span>false</span></strong>。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-called-class-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">get_called_class()</strong></span> 的使用</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class </span><span style="color: #9876AA">foo </span><span style="color: #007700">{<br />    static public function </span><span style="color: #9876AA">test</span><span style="color: #007700">() {<br />        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">get_called_class</span><span style="color: #007700">());<br />    }<br />}<br /><br />class </span><span style="color: #9876AA">bar </span><span style="color: #007700">extends </span><span style="color: #9876AA">foo </span><span style="color: #007700">{<br />}<br /><br /></span><span style="color: #9876AA">foo</span><span style="color: #007700">::</span><span style="color: #9876AA">test</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">bar</span><span style="color: #007700">::</span><span style="color: #9876AA">test</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(3) &quot;foo&quot;<br>string(3) &quot;bar&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-called-class-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link get_parent_class()} - 检索对象或者类的父级类名</span></li>    <li class="member"><span class="function">{@link get_class()} - 返回对象的类名</span></li>    <li class="member"><span class="function">{@link is_subclass_of()} - 检查对象是否继承或者实现（implement）此类</span></li>   </ul>  </span> </div></div>
 * @return string*/
function get_called_class(): string {}

/**
*<div id="function.get-parent-class" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_parent_class</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">get_parent_class</span> &mdash; <span class="dc-title">检索对象或者类的父级类名</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-parent-class-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_parent_class</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$object_or_class</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   检索对象或者类的父级类名。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-parent-class-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object_or_class</span></dt>     <dd>      <p class="para">       检查的对象或者类名。如果是从对象内的方法中调用此函数，则此参数可选。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-parent-class-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span class="parameter" style="color:#3A95FF">object_or_class</span> 是类名或者类实例的父类名称。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    如果对象没有父类或者指定的类名不存在，则返回 <strong><span>false</span></strong>。   </p>  </p></blockquote>  <p class="para">   如果在对象外部不带参数调用，则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.get-parent-class-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">object_or_class</span> 参数现在仅接受对象或者有效的类名。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-parent-class-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 使用 <span class="function"><strong style="color:#CC7832">get_parent_class()</strong></span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Dad </span><span style="color: #007700">{<br />    function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">()<br />    {<br />    </span><span style="color: #FF8000">// implements some logic<br />    </span><span style="color: #007700">}<br />}<br /><br />class </span><span style="color: #9876AA">Child </span><span style="color: #007700">extends </span><span style="color: #9876AA">Dad </span><span style="color: #007700">{<br />    function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">()<br />    {<br />        echo </span><span style="color: #DD0000">"I'm " </span><span style="color: #007700">, </span><span style="color: #9876AA">get_parent_class</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">) , </span><span style="color: #DD0000">"'s son\n"</span><span style="color: #007700">;<br />    }<br />}<br /><br />class </span><span style="color: #9876AA">Child2 </span><span style="color: #007700">extends </span><span style="color: #9876AA">Dad </span><span style="color: #007700">{<br />    function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">()<br />    {<br />        echo </span><span style="color: #DD0000">"I'm " </span><span style="color: #007700">, </span><span style="color: #9876AA">get_parent_class</span><span style="color: #007700">(</span><span style="color: #DD0000">'child2'</span><span style="color: #007700">) , </span><span style="color: #DD0000">"'s son too\n"</span><span style="color: #007700">;<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$foo </span><span style="color: #007700">= new </span><span style="color: #9876AA">child</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$bar </span><span style="color: #007700">= new </span><span style="color: #9876AA">child2</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>I&#039;m Dad&#039;s son<br>I&#039;m Dad&#039;s son too<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-parent-class-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link get_class()} - 返回对象的类名</span></li>    <li class="member"><span class="function">{@link is_subclass_of()} - 检查对象是否继承或者实现（implement）此类</span></li>    <li class="member"><span class="function">{@link class_parents()} - 返回指定类的父类</span></li>   </ul>  </span> </div></div>
 * @return string|false <p>The name of the parent class of the class of which*/
function get_parent_class(object|string $object_or_class): string|false {}

/**
*<div id="function.method-exists" class="refentry"> <div class="refnamediv">  <h1 class="refname">method_exists</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">method_exists</span> &mdash; <span class="dc-title">检查类的方法是否存在</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.method-exists-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>method_exists</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$object_or_class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$method</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查类的方法是否存在于指定的 <span class="parameter" style="color:#3A95FF">object_or_class</span> 中。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.method-exists-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object_or_class</span></dt>     <dd>      <p class="para">       对象示例或者类名      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">method</span></dt>     <dd>      <p class="para">       方法名      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.method-exists-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">      如果 <span class="parameter" style="color:#3A95FF">method</span>   所指的方法在 <span class="parameter" style="color:#3A95FF">object_or_class</span>   所指的对象类中已定义，则返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.method-exists-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">method_exists()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$directory </span><span style="color: #007700">= new </span><span style="color: #9876AA">Directory</span><span style="color: #007700">(</span><span style="color: #DD0000">'.'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">method_exists</span><span style="color: #007700">(</span><span style="color: #9876AA">$directory</span><span style="color: #007700">,</span><span style="color: #DD0000">'read'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #2 静态 <span class="function"><strong style="color:#CC7832">method_exists()</strong></span> 示例    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">method_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'Directory'</span><span style="color: #007700">,</span><span style="color: #DD0000">'read'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.method-exists-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">如果此类不是已知类，使用此函数会使用任何已注册的<a href="https://www.php.net/manual/zh/language.oop5.autoload.php" class="link">autoloader</a>。</p></p></blockquote> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.method-exists-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link function_exists()} - 如果给定的函数已经被定义就返回 true</span></li>    <li class="member"><span class="function">{@link is_callable()} - 验证值是否可以在当前范围内作为函数调用。</span></li>    <li class="member"><span class="function">{@link class_exists()} - 查类是否已经定义</span></li>   </ul>  </span> </div></div>
 * @return bool true if the method given by <i>method_name</i>*/
function method_exists($object_or_class, string $method): bool {}

/**
*<div id="function.property-exists" class="refentry"> <div class="refnamediv">  <h1 class="refname">property_exists</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">property_exists</span> &mdash; <span class="dc-title">   检查对象或类是否具有该属性  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.property-exists-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>property_exists</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$object_or_class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$property</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   本函数检查给出的 <span class="parameter" style="color:#3A95FF">property</span> 是否存在于指定的类中。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    跟 <span class="function">{@link isset()}</span> 的区别是即使属性的值为 <strong><span>null</span></strong>，<span class="function"><strong style="color:#CC7832">property_exists()</strong></span> 也会返回 <strong><span>true</span></strong>。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.property-exists-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object_or_class</span></dt>      <dd>       <p class="para">        需要检查的类名或者类的对象       </p>      </dd>              <dt><span class="parameter" style="color:#3A95FF">property</span></dt>      <dd>       <p class="para">        属性的名称       </p>      </dd>        </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.property-exists-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果属性存在则返回 <strong><span>true</span></strong>，不存在则返回 <strong><span>false</span></strong>。如果发生错误则返回 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.property-exists-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">property_exists()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class </span><span style="color: #9876AA">myClass </span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">$mine</span><span style="color: #007700">;<br />    private </span><span style="color: #9876AA">$xpto</span><span style="color: #007700">;<br />    static protected </span><span style="color: #9876AA">$test</span><span style="color: #007700">;<br /><br />    static function </span><span style="color: #9876AA">test</span><span style="color: #007700">() {<br />        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">property_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'myClass'</span><span style="color: #007700">, </span><span style="color: #DD0000">'xpto'</span><span style="color: #007700">)); </span><span style="color: #FF8000">//true<br />    </span><span style="color: #007700">}<br />}<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">property_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'myClass'</span><span style="color: #007700">, </span><span style="color: #DD0000">'mine'</span><span style="color: #007700">));   </span><span style="color: #FF8000">//true<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">property_exists</span><span style="color: #007700">(new </span><span style="color: #9876AA">myClass</span><span style="color: #007700">, </span><span style="color: #DD0000">'mine'</span><span style="color: #007700">)); </span><span style="color: #FF8000">//true<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">property_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'myClass'</span><span style="color: #007700">, </span><span style="color: #DD0000">'xpto'</span><span style="color: #007700">));   </span><span style="color: #FF8000">//true<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">property_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'myClass'</span><span style="color: #007700">, </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">));    </span><span style="color: #FF8000">//false<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">property_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'myClass'</span><span style="color: #007700">, </span><span style="color: #DD0000">'test'</span><span style="color: #007700">));   </span><span style="color: #FF8000">//true<br /></span><span style="color: #9876AA">myClass</span><span style="color: #007700">::</span><span style="color: #9876AA">test</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.property-exists-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">如果此类不是已知类，使用此函数会使用任何已注册的<a href="https://www.php.net/manual/zh/language.oop5.autoload.php" class="link">autoloader</a>。</p></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="function"><strong style="color:#CC7832">property_exists()</strong></span> 函数不能检查通过    <a href="https://www.php.net/manual/zh/language.oop5.overloading.php#language.oop5.overloading.members" class="link"><span>__get</span></a>    魔术方法访问的属性。   </p>  </p></blockquote> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.property-exists-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link method_exists()} - 检查类的方法是否存在</span></li>   </ul>  </span> </div></div>
 * @return bool true if the property exists, false if it doesn't exist or*/
function property_exists($object_or_class, string $property): bool {}

/**
*<div id="function.trait-exists" class="refentry"> <div class="refnamediv">  <h1 class="refname">trait_exists</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">trait_exists</span> &mdash; <span class="dc-title">检查指定的 trait 是否存在</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.trait-exists-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>trait_exists</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$trait</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$autoload</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.trait-exists-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">trait</span></dt>    <dd>     <span>      待检查的 trait 的名称     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">autoload</span></dt>    <dd>     <p class="para">      如果尚未加载，是否使用自动加载（<a href="https://www.php.net/manual/zh/language.oop5.autoload.php" class="link">autoload</a>）。     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.trait-exists-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 trait 存在返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div></div>
 * @return bool Returns TRUE if trait exists, FALSE if not, NULL in case of an error.*/
function trait_exists(string $trait, bool $autoload = true): bool {}

/**
*<div id="function.class-exists" class="refentry"> <div class="refnamediv">  <h1 class="refname">class_exists</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">class_exists</span> &mdash; <span class="dc-title">查类是否已经定义</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.class-exists-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>class_exists</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$autoload</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   该函数检查指定的类是否已经定义。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.class-exists-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       类名。名称以不区分大小写的方式匹配。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">autoload</span></dt>     <dd>      <p class="para">       如果尚未加载，是否<a href="https://www.php.net/manual/zh/language.oop5.autoload.php" class="link">自动加载</a>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.class-exists-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">class</span> 是已经定义的类，则返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.class-exists-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">class_exists()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 在尝试使用前检查类是否存在<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">class_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'MyClass'</span><span style="color: #007700">)) {<br />    </span><span style="color: #9876AA">$myclass </span><span style="color: #007700">= new </span><span style="color: #9876AA">MyClass</span><span style="color: #007700">();<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #2 <span class="parameter" style="color:#3A95FF">autoload</span> 参数示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />spl_autoload_register</span><span style="color: #007700">(function (</span><span style="color: #9876AA">$class_name</span><span style="color: #007700">) {<br />    include </span><span style="color: #9876AA">$class_name </span><span style="color: #007700">. </span><span style="color: #DD0000">'.php'</span><span style="color: #007700">;<br /><br />    </span><span style="color: #FF8000">// 检查 include 后是否声明了类<br />    </span><span style="color: #007700">if (!</span><span style="color: #9876AA">class_exists</span><span style="color: #007700">(</span><span style="color: #9876AA">$class_name</span><span style="color: #007700">, </span><span style="color: #9876AA">false</span><span style="color: #007700">)) {<br />        throw new </span><span style="color: #9876AA">LogicException</span><span style="color: #007700">(</span><span style="color: #DD0000">"Unable to load class: </span><span style="color: #9876AA">$class_name</span><span style="color: #DD0000">"</span><span style="color: #007700">);<br />    }<br />});<br /><br />if (</span><span style="color: #9876AA">class_exists</span><span style="color: #007700">(</span><span style="color: #9876AA">MyClass</span><span style="color: #007700">::class)) {<br />    </span><span style="color: #9876AA">$myclass </span><span style="color: #007700">= new </span><span style="color: #9876AA">MyClass</span><span style="color: #007700">();<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.class-exists-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link function_exists()} - 如果给定的函数已经被定义就返回 true</span></li>    <li class="member"><span class="function">{@link enum_exists()} - 检测是否定义对应的枚举</span></li>    <li class="member"><span class="function">{@link interface_exists()} - 检查接口是否已被定义</span></li>    <li class="member"><span class="function">{@link get_declared_classes()} - 返回由已定义类的名字所组成的数组</span></li>   </ul>  </span> </div></div>
 * @return bool true if <i>class_name</i> is a defined class,*/
function class_exists(string $class, bool $autoload = true): bool {}

/**
*<div id="function.interface-exists" class="refentry"> <div class="refnamediv">  <h1 class="refname">interface_exists</h1>  <p class="verinfo">(PHP 5 &gt;= 5.0.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">interface_exists</span> &mdash; <span class="dc-title">检查接口是否已被定义</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.interface-exists-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>interface_exists</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$interface</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$autoload</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查接口是否已被定义。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.interface-exists-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">interface</span></dt>     <dd>      <p class="para">       接口名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">autoload</span></dt>     <dd>      <p class="para">       如果尚未加载，是否<a href="https://www.php.net/manual/zh/language.oop5.autoload.php" class="link">自动加载</a>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.interface-exists-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   本函数在由 <span class="parameter" style="color:#3A95FF">interface</span>   给出的接口已定义时返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.interface-exists-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">interface_exists()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 在尝试使用前先检查接口是否存在<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">interface_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'MyInterface'</span><span style="color: #007700">)) {<br />    class </span><span style="color: #9876AA">MyClass </span><span style="color: #007700">implements </span><span style="color: #9876AA">MyInterface<br />    </span><span style="color: #007700">{<br />        </span><span style="color: #FF8000">// Methods<br />    </span><span style="color: #007700">}<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.interface-exists-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link get_declared_interfaces()} - 返回一个数组包含所有已声明的接口</span></li>    <li class="member"><span class="function">{@link class_implements()} - 返回指定的类或接口实现的所有接口</span></li>    <li class="member"><span class="function">{@link class_exists()} - 查类是否已经定义</span></li>    <li class="member"><span class="function">{@link enum_exists()} - 检测是否定义对应的枚举</span></li>   </ul>  </span> </div></div>
 * @return bool true if the interface given by*/
function interface_exists(string $interface, bool $autoload = true): bool {}

/**
*<div id="function.function-exists" class="refentry"> <div class="refnamediv">  <h1 class="refname">function_exists</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">function_exists</span> &mdash; <span class="dc-title">如果给定的函数已经被定义就返回 <strong><span>true</span></strong></span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.function-exists-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>function_exists</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$function</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   在已经定义的函数列表（包括系统自带的函数和用户自定义的函数）中查找 <span class="parameter" style="color:#3A95FF">function</span>。   </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.function-exists-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">function</span></dt>     <dd>      <p class="para">       函数名，必须为一个字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.function-exists-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">function</span> 存在且的确是一个函数就返回 <strong><span>true</span></strong>，反之则返回 <strong><span>false</span></strong>。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    对于语法结构的判断，例如 <span class="function">{@link include_once}</span> 和 <span class="function">{@link echo}</span> 将会返回 <strong><span>false</span></strong>。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.function-exists-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">function_exists()</strong></span> 的例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">function_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'imap_open'</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"IMAP functions are available.&lt;br /&gt;\n"</span><span style="color: #007700">;<br />} else {<br />    echo </span><span style="color: #DD0000">"IMAP functions are not available.&lt;br /&gt;\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.function-exists-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    即使函数本身由于配置或者编译选项而无法使用，该函数名也可能存在（<a href="https://www.php.net/manual/zh/ref.image.php" class="link">image</a> 就是一个现成的例子）。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.function-exists-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link method_exists()} - 检查类的方法是否存在</span></li>    <li class="member"><span class="function">{@link is_callable()} - 验证值是否可以在当前范围内作为函数调用。</span></li>    <li class="member"><span class="function">{@link get_defined_functions()} - 返回所有已定义函数的数组</span></li>    <li class="member"><span class="function">{@link class_exists()} - 查类是否已经定义</span></li>    <li class="member"><span class="function">{@link extension_loaded()} - 检查一个扩展是否已经加载</span></li>   </ul>  </span> </div></div>
 * @return bool true if <i>function_name</i> exists and is a*/
function function_exists(string $function): bool {}

/**
*<div id="function.enum-exists" class="refentry"> <div class="refnamediv">  <h1 class="refname">enum_exists</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">enum_exists</span> &mdash; <span class="dc-title">检测是否定义对应的枚举</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.enum-exists-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>enum_exists</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$enum</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$autoload</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">  本函数检测是否定义指定的<a href="https://www.php.net/manual/zh/language.enumerations.php" class="link">枚举</a>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.enum-exists-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">enum</span></dt>     <dd>      <p class="para">      枚举的名称。名称的匹配不区分大小写。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">autoload</span></dt>     <dd>      <p class="para">       如果尚未加载，是否<a href="https://www.php.net/manual/zh/language.oop5.autoload.php" class="link">自动加载</a>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.enum-exists-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  如果 <span class="parameter" style="color:#3A95FF">enum</span> 已定义，返回 <strong><span>true</span></strong>，否则就返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.enum-exists-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">enum_exists()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 在使用之前检测枚举是否存在<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">enum_exists</span><span style="color: #007700">(</span><span style="color: #9876AA">Suit</span><span style="color: #007700">::class)) {<br />    </span><span style="color: #9876AA">$myclass </span><span style="color: #007700">= </span><span style="color: #9876AA">Suit</span><span style="color: #007700">::</span><span style="color: #9876AA">Hearts</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.enum-exists-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link function_exists()} - 如果给定的函数已经被定义就返回 true</span></li>    <li class="member"><span class="function">{@link class_exists()} - 查类是否已经定义</span></li>    <li class="member"><span class="function">{@link interface_exists()} - 检查接口是否已被定义</span></li>    <li class="member"><span class="function">{@link get_declared_classes()} - 返回由已定义类的名字所组成的数组</span></li>   </ul>  </span> </div></div>
 * @return bool true if <i>enum</i> is a defined enum,*/
function enum_exists(string $enum, bool $autoload = true): bool {}

/**
*<div id="function.class-alias" class="refentry"> <div class="refnamediv">  <h1 class="refname">class_alias</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">class_alias</span> &mdash; <span class="dc-title">为类创建别名</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.class-alias-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>class_alias</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$alias</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$autoload</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   基于用户定义的类 <span class="parameter" style="color:#3A95FF">class</span> 创建别名 <span class="parameter" style="color:#3A95FF">alias</span>。   这个别名类和原有的类完全相同。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.class-alias-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       原有的类。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">alias</span></dt>     <dd>      <p class="para">       类的别名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">autoload</span></dt>     <dd>      <p class="para">       如果原始类没有加载，是否使用<a href="https://www.php.net/manual/zh/language.oop5.autoload.php" class="link">自动加载</a>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.class-alias-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.class-alias-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">class_alias()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{ }<br /><br /></span><span style="color: #9876AA">class_alias</span><span style="color: #007700">(</span><span style="color: #DD0000">'Foo'</span><span style="color: #007700">, </span><span style="color: #DD0000">'Bar'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$a </span><span style="color: #007700">= new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$b </span><span style="color: #007700">= new </span><span style="color: #9876AA">Bar</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 对象是相同的<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$a </span><span style="color: #007700">== </span><span style="color: #9876AA">$b</span><span style="color: #007700">, </span><span style="color: #9876AA">$a </span><span style="color: #007700">=== </span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$a </span><span style="color: #007700">instanceof </span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 类是相同的<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$a </span><span style="color: #007700">instanceof </span><span style="color: #9876AA">Foo</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$a </span><span style="color: #007700">instanceof </span><span style="color: #9876AA">Bar</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$b </span><span style="color: #007700">instanceof </span><span style="color: #9876AA">Foo</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$b </span><span style="color: #007700">instanceof </span><span style="color: #9876AA">Bar</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(false)<br>bool(true)<br>bool(true)<br>bool(true)<br>bool(true)<br>bool(true)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.class-alias-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    类名在 PHP 中不区分大小写，这一点也反映在此函数中。由 <span class="function"><strong style="color:#CC7832">class_alias()</strong></span>    创建的别名声明为小写。这意味着对于 <span>MyClass</span> 类，调用 <span>class_alias(&#039;MyClass&#039;,    &#039;MyClassAlias&#039;)</span> 将声明名为 <span>myclassalias</span> 的新的类别名。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.class-alias-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link get_parent_class()} - 检索对象或者类的父级类名</span></li>    <li class="member"><span class="function">{@link is_subclass_of()} - 检查对象是否继承或者实现（implement）此类</span></li>   </ul>  </span> </div></div>
 * @return bool true on success or false on failure.*/
function class_alias(string $class, string $alias, bool $autoload = true): bool {}

/**
*<div id="function.get-included-files" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_included_files</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">get_included_files</span> &mdash; <span class="dc-title">返回被 include 和 require 文件名的 array</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-included-files-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_included_files</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   返回所有被   <span class="function">{@link include}</span>、 <span class="function">{@link include_once}</span>、   <span class="function">{@link require}</span> 和 <span class="function">{@link require_once}</span>   的文件名。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-included-files-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-included-files-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回所有文件名称的 array。  </p>  <p class="para">   脚本最初被称为”被包含的文件“，所以脚本自身也会和 <span class="function">{@link include}</span> 系列函数引用的脚本列在一起。  </p>  <p class="para">   被多次 include 和 require 的文件在返回的 array 里只会列出一次。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-included-files-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1679">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">get_included_files()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 本文件是 abc.php<br /><br /></span><span style="color: #007700">include </span><span style="color: #DD0000">'test1.php'</span><span style="color: #007700">;<br />include_once </span><span style="color: #DD0000">'test2.php'</span><span style="color: #007700">;<br />require </span><span style="color: #DD0000">'test3.php'</span><span style="color: #007700">;<br />require_once </span><span style="color: #DD0000">'test4.php'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$included_files </span><span style="color: #007700">= </span><span style="color: #9876AA">get_included_files</span><span style="color: #007700">();<br /><br />foreach (</span><span style="color: #9876AA">$included_files </span><span style="color: #007700">as </span><span style="color: #9876AA">$filename</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$filename</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>/path/to/abc.php<br>/path/to/test1.php<br>/path/to/test2.php<br>/path/to/test3.php<br>/path/to/test4.php<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-included-files-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link include} - include</span></li>    <li class="member"><span class="function">{@link include_once} - include_once</span></li>    <li class="member"><span class="function">{@link require} - require</span></li>    <li class="member"><span class="function">{@link require_once} - require_once</span></li>    <li class="member"><span class="function">{@link get_required_files()} - 别名 get_included_files</span></li>   </ul>  </span> </div></div>
 * @return string[] an array of the names of all files.*/
function get_included_files(): array {}

/**
*<div id="function.get-required-files" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_required_files</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">get_required_files</span> &mdash; <span class="dc-title">别名 <span class="function">{@link get_included_files()}</span></span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-required-files-description">  <h3 class="title">说明</h3>  <p class="simpara">   此函数是该函数的别名： <span class="function">{@link get_included_files()}</span>.  </p> </div></div>
 * @return string[]*/
function get_required_files(): array {}

/**
*<div id="function.is-subclass-of" class="refentry"> <div class="refnamediv">  <h1 class="refname">is_subclass_of</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">is_subclass_of</span> &mdash; <span class="dc-title">检查对象是否继承或者实现（implement）此类</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.is-subclass-of-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>is_subclass_of</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$object_or_class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$allow_string</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查指定的 <span class="parameter" style="color:#3A95FF">object_or_class</span> 是否继承或者实现（implement） <span class="parameter" style="color:#3A95FF">class</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.is-subclass-of-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object_or_class</span></dt>     <dd>      <p class="para">       类名或者对象实例。如果类不存在，也不会报错。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       类名      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">allow_string</span></dt>     <dd>      <p class="para">       如果此参数设置为 false，将不允许将字符串类名传递给        <span class="parameter" style="color:#3A95FF">object_or_class</span>。如果类不存在，这也可以防止调用自动加载器。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.is-subclass-of-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果对象 <span class="parameter" style="color:#3A95FF">object_or_class</span> 属于 <span class="parameter" style="color:#3A95FF">class</span> 的子类，则返回    <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.is-subclass-of-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">is_subclass_of()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 定义类<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">WidgetFactory<br /></span><span style="color: #007700">{<br />  var </span><span style="color: #9876AA">$oink </span><span style="color: #007700">= </span><span style="color: #DD0000">'moo'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// 定义子类<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">WidgetFactory_Child </span><span style="color: #007700">extends </span><span style="color: #9876AA">WidgetFactory<br /></span><span style="color: #007700">{<br />  var </span><span style="color: #9876AA">$oink </span><span style="color: #007700">= </span><span style="color: #DD0000">'oink'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// 创建新对象<br /></span><span style="color: #9876AA">$WF </span><span style="color: #007700">= new </span><span style="color: #9876AA">WidgetFactory</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$WFC </span><span style="color: #007700">= new </span><span style="color: #9876AA">WidgetFactory_Child</span><span style="color: #007700">();<br /><br />if (</span><span style="color: #9876AA">is_subclass_of</span><span style="color: #007700">(</span><span style="color: #9876AA">$WFC</span><span style="color: #007700">, </span><span style="color: #DD0000">'WidgetFactory'</span><span style="color: #007700">)) {<br />  echo </span><span style="color: #DD0000">"yes, \$WFC is a subclass of WidgetFactory\n"</span><span style="color: #007700">;<br />} else {<br />  echo </span><span style="color: #DD0000">"no, \$WFC is not a subclass of WidgetFactory\n"</span><span style="color: #007700">;<br />}<br /><br /><br />if (</span><span style="color: #9876AA">is_subclass_of</span><span style="color: #007700">(</span><span style="color: #9876AA">$WF</span><span style="color: #007700">, </span><span style="color: #DD0000">'WidgetFactory'</span><span style="color: #007700">)) {<br />  echo </span><span style="color: #DD0000">"yes, \$WF is a subclass of WidgetFactory\n"</span><span style="color: #007700">;<br />} else {<br />  echo </span><span style="color: #DD0000">"no, \$WF is not a subclass of WidgetFactory\n"</span><span style="color: #007700">;<br />}<br /><br /><br />if (</span><span style="color: #9876AA">is_subclass_of</span><span style="color: #007700">(</span><span style="color: #DD0000">'WidgetFactory_Child'</span><span style="color: #007700">, </span><span style="color: #DD0000">'WidgetFactory'</span><span style="color: #007700">)) {<br />  echo </span><span style="color: #DD0000">"yes, WidgetFactory_Child is a subclass of WidgetFactory\n"</span><span style="color: #007700">;<br />} else {<br />  echo </span><span style="color: #DD0000">"no, WidgetFactory_Child is not a subclass of WidgetFactory\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>yes, $WFC is a subclass of WidgetFactory<br>no, $WF is not a subclass of WidgetFactory<br>yes, WidgetFactory_Child is a subclass of WidgetFactory<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">is_subclass_of()</strong></span> 使用接口示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 定义接口<br /></span><span style="color: #007700">interface </span><span style="color: #9876AA">MyInterface<br /></span><span style="color: #007700">{<br />  public function </span><span style="color: #9876AA">MyFunction</span><span style="color: #007700">();<br />}<br /><br /></span><span style="color: #FF8000">// 定义实现了接口的类<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">MyClass </span><span style="color: #007700">implements </span><span style="color: #9876AA">MyInterface<br /></span><span style="color: #007700">{<br />  public function </span><span style="color: #9876AA">MyFunction</span><span style="color: #007700">()<br />  {<br />    return </span><span style="color: #DD0000">"MyClass Implements MyInterface!"</span><span style="color: #007700">;<br />  }<br />}<br /><br /></span><span style="color: #FF8000">// 实例化对象<br /></span><span style="color: #9876AA">$my_object </span><span style="color: #007700">= new </span><span style="color: #9876AA">MyClass</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 自 5.3.7 起可用<br /><br />// 使用类的对象实例进行检查<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">is_subclass_of</span><span style="color: #007700">(</span><span style="color: #9876AA">$my_object</span><span style="color: #007700">, </span><span style="color: #DD0000">'MyInterface'</span><span style="color: #007700">)) {<br />  echo </span><span style="color: #DD0000">"Yes, \$my_object is a subclass of MyInterface\n"</span><span style="color: #007700">;<br />} else {<br />  echo </span><span style="color: #DD0000">"No, \$my_object is not a subclass of MyInterface\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// 使用字符串类名进行检查<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">is_subclass_of</span><span style="color: #007700">(</span><span style="color: #DD0000">'MyClass'</span><span style="color: #007700">, </span><span style="color: #DD0000">'MyInterface'</span><span style="color: #007700">)) {<br />  echo </span><span style="color: #DD0000">"Yes, MyClass is a subclass of MyInterface\n"</span><span style="color: #007700">;<br />} else {<br />  echo </span><span style="color: #DD0000">"No, MyClass is not a subclass of MyInterface\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Yes, $my_object is a subclass of MyInterface<br>Yes, MyClass is a subclass of MyInterface<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.is-subclass-of-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">如果此类不是已知类，使用此函数会使用任何已注册的<a href="https://www.php.net/manual/zh/language.oop5.autoload.php" class="link">autoloader</a>。</p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.is-subclass-of-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link get_class()} - 返回对象的类名</span></li>    <li class="member"><span class="function">{@link get_parent_class()} - 检索对象或者类的父级类名</span></li>    <li class="member"><span class="function">{@link is_a()} - 检查对象是否属于一个给定的类型或子类型。</span></li>    <li class="member"><span class="function">{@link class_parents()} - 返回指定类的父类</span></li>   </ul>  </span> </div></div>
 * @return bool This function returns true if the object <i>object</i>,*/
function is_subclass_of(mixed $object_or_class, string $class, bool $allow_string = true): bool {}

/**
*<div id="function.is-a" class="refentry"> <div class="refnamediv">  <h1 class="refname">is_a</h1>  <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">is_a</span> &mdash; <span class="dc-title">检查对象是否属于一个给定的类型或子类型。</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.is-a-description">    <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>is_a</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$object_or_class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$allow_string</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查指定 <span class="parameter" style="color:#3A95FF">object_or_class</span>   是否属于此对象类型或具有此对象类型作为其超类（父类）。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.is-a-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object_or_class</span></dt>     <dd>      <p class="para">       类名或者实例对象。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       类名或接口名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">allow_string</span></dt>     <dd>      <p class="para">       如果本参数设置为 <strong><span>false</span></strong>，<span class="parameter" style="color:#3A95FF">object_or_class</span> 就不允许传入字符串类名。       这也会在类不存在时，阻止调用自动加载器（autoloader）。      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.is-a-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果对象属于该对象类型或该类是此对象类型的超类（父类）时返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.is-a-examples">  <h3 class="title">示例</h3>  <span>    <div class="example" id="">      <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">is_a()</strong></span> 示例</strong></p>      <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 定义类<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">WidgetFactory<br /></span><span style="color: #007700">{<br />  var </span><span style="color: #9876AA">$oink </span><span style="color: #007700">= </span><span style="color: #DD0000">'moo'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// 创建新对象<br /></span><span style="color: #9876AA">$WF </span><span style="color: #007700">= new </span><span style="color: #9876AA">WidgetFactory</span><span style="color: #007700">();<br /><br />if (</span><span style="color: #9876AA">is_a</span><span style="color: #007700">(</span><span style="color: #9876AA">$WF</span><span style="color: #007700">, </span><span style="color: #DD0000">'WidgetFactory'</span><span style="color: #007700">)) {<br />  echo </span><span style="color: #DD0000">"yes, \$WF is still a WidgetFactory\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>      </div>    </div>   <div class="example" id="">    <p><strong>示例 #2 使用 <em>instanceof</em> 运算符</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">$WF </span><span style="color: #007700">instanceof </span><span style="color: #9876AA">WidgetFactory</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Yes, $WF is a WidgetFactory'</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.is-a-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link get_class()} - 返回对象的类名</span></li>    <li class="member"><span class="function">{@link get_parent_class()} - 检索对象或者类的父级类名</span></li>    <li class="member"><span class="function">{@link is_subclass_of()} - 检查对象是否继承或者实现（implement）此类</span></li>   </ul>  </span> </div></div>
 * @return bool <b>TRUE</b> if the object is of this class or has this class as one of*/
function is_a(mixed $object_or_class, string $class, bool $allow_string = false): bool {}

/**
*<div id="function.get-class-vars" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_class_vars</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">get_class_vars</span> &mdash; <span class="dc-title">获取类的默认属性</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-class-vars-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_class_vars</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取指定类的默认属性。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-class-vars-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       类名      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-class-vars-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回从当前作用域中声明的可见属性组成的关联数组及其默认值。生成的数组元素采用   <span>varname =&gt; value</span> 的形式，如果出现错误，则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-class-vars-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">get_class_vars()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class </span><span style="color: #9876AA">myclass </span><span style="color: #007700">{<br /><br />    var </span><span style="color: #9876AA">$var1</span><span style="color: #007700">; </span><span style="color: #FF8000">// 这里没有默认值...<br />    </span><span style="color: #007700">var </span><span style="color: #9876AA">$var2 </span><span style="color: #007700">= </span><span style="color: #DD0000">"xyz"</span><span style="color: #007700">;<br />    var </span><span style="color: #9876AA">$var3 </span><span style="color: #007700">= </span><span style="color: #9876AA">100</span><span style="color: #007700">;<br />    private </span><span style="color: #9876AA">$var4</span><span style="color: #007700">;<br /><br />    </span><span style="color: #FF8000">// 构造方法<br />    </span><span style="color: #007700">function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">() {<br />        </span><span style="color: #FF8000">// change some properties<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">var1 </span><span style="color: #007700">= </span><span style="color: #DD0000">"foo"</span><span style="color: #007700">;<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">var2 </span><span style="color: #007700">= </span><span style="color: #DD0000">"bar"</span><span style="color: #007700">;<br />        return </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br />    }<br /><br />}<br /><br /></span><span style="color: #9876AA">$my_class </span><span style="color: #007700">= new </span><span style="color: #9876AA">myclass</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$class_vars </span><span style="color: #007700">= </span><span style="color: #9876AA">get_class_vars</span><span style="color: #007700">(</span><span style="color: #9876AA">get_class</span><span style="color: #007700">(</span><span style="color: #9876AA">$my_class</span><span style="color: #007700">));<br /><br />foreach (</span><span style="color: #9876AA">$class_vars </span><span style="color: #007700">as </span><span style="color: #9876AA">$name </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$value</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$name</span><span style="color: #DD0000"> : </span><span style="color: #9876AA">$value</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>var1 :<br>var2 : xyz<br>var3 : 100<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">get_class_vars()</strong></span> 和作用域行为</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">format</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">)<br />{<br />    return </span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">'|'</span><span style="color: #007700">, </span><span style="color: #9876AA">array_keys</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">)) . </span><span style="color: #DD0000">"\r\n"</span><span style="color: #007700">;<br />}<br /><br />class </span><span style="color: #9876AA">TestCase<br /></span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">$a    </span><span style="color: #007700">= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />    protected </span><span style="color: #9876AA">$b </span><span style="color: #007700">= </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br />    private </span><span style="color: #9876AA">$c   </span><span style="color: #007700">= </span><span style="color: #9876AA">3</span><span style="color: #007700">;<br /><br />    public static function </span><span style="color: #9876AA">expose</span><span style="color: #007700">()<br />    {<br />        echo </span><span style="color: #9876AA">format</span><span style="color: #007700">(</span><span style="color: #9876AA">get_class_vars</span><span style="color: #007700">(</span><span style="color: #9876AA">__CLASS__</span><span style="color: #007700">));<br />    }<br />}<br /><br /></span><span style="color: #9876AA">TestCase</span><span style="color: #007700">::</span><span style="color: #9876AA">expose</span><span style="color: #007700">();<br />echo </span><span style="color: #9876AA">format</span><span style="color: #007700">(</span><span style="color: #9876AA">get_class_vars</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestCase'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>// 5.0.0<br>a| * b| TestCase c<br>a| * b| TestCase c<br><br>// 5.0.1 - 5.0.2<br>a|b|c<br>a|b|c<br><br>// 5.0.3 +<br>a|b|c<br>a<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-class-vars-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link get_class_methods()} - 返回由类的方法名组成的数组</span></li>    <li class="member"><span class="function">{@link get_object_vars()} - 获取指定对象的属性</span></li>   </ul>  </span> </div></div>
 * @return array an associative array of declared properties visible from the*/
function get_class_vars(string $class): array {}

/**
*<div id="function.get-object-vars" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_object_vars</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">get_object_vars</span> &mdash; <span class="dc-title">获取指定对象的属性</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-object-vars-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_object_vars</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   根据作用域获取指定 <span class="parameter" style="color:#3A95FF">object</span>   的可访问非静态属性。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-object-vars-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       对象实例。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-object-vars-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回指定 <span class="parameter" style="color:#3A95FF">object</span> 在当前作用域的属性组成的关联数组，属性为已定义、非静态、可访问。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-object-vars-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">get_object_vars()</strong></span> 使用</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class </span><span style="color: #9876AA">foo </span><span style="color: #007700">{<br />    private </span><span style="color: #9876AA">$a</span><span style="color: #007700">;<br />    public </span><span style="color: #9876AA">$b </span><span style="color: #007700">= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />    public </span><span style="color: #9876AA">$c</span><span style="color: #007700">;<br />    private </span><span style="color: #9876AA">$d</span><span style="color: #007700">;<br />    static </span><span style="color: #9876AA">$e</span><span style="color: #007700">;<br />   <br />    public function </span><span style="color: #9876AA">test</span><span style="color: #007700">() {<br />        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">get_object_vars</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">));<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$test </span><span style="color: #007700">= new </span><span style="color: #9876AA">foo</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">get_object_vars</span><span style="color: #007700">(</span><span style="color: #9876AA">$test</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$test</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">test</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(2) {<br>  [&quot;b&quot;]=&gt;<br>  int(1)<br>  [&quot;c&quot;]=&gt;<br>  NULL<br>}<br>array(4) {<br>  [&quot;a&quot;]=&gt;<br>  NULL<br>  [&quot;b&quot;]=&gt;<br>  int(1)<br>  [&quot;c&quot;]=&gt;<br>  NULL<br>  [&quot;d&quot;]=&gt;<br>  NULL<br>}<br></span></div>    </div>   </div>  </span>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    未初始化的属性认为是不可访问的，因此不会包含在数组中。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-object-vars-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link get_class_methods()} - 返回由类的方法名组成的数组</span></li>    <li class="member"><span class="function">{@link get_class_vars()} - 获取类的默认属性</span></li>   </ul>  </span> </div></div>
 * @return array an associative array of defined object accessible non-static properties*/
function get_object_vars(object $object): array {}

/**
*<div id="function.get-class-methods" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_class_methods</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">get_class_methods</span> &mdash; <span class="dc-title">返回由类的方法名组成的数组</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-class-methods-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_class_methods</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$object_or_class</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取类的方法名称列表。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-class-methods-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object_or_class</span></dt>     <dd>      <p class="para">       类名或者对象实例。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-class-methods-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回由 <span class="parameter" style="color:#3A95FF">object_or_class</span>   指定的类中定义的方法名所组成的数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.get-class-methods-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">object_or_class</span> 参数现在只接受对象或者有效的类名。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-class-methods-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">get_class_methods()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class </span><span style="color: #9876AA">myclass </span><span style="color: #007700">{<br />    </span><span style="color: #FF8000">// 构造方法<br />    </span><span style="color: #007700">function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">()<br />    {<br />        return(</span><span style="color: #9876AA">true</span><span style="color: #007700">);<br />    }<br /><br />    </span><span style="color: #FF8000">// 方法 1<br />    </span><span style="color: #007700">function </span><span style="color: #9876AA">myfunc1</span><span style="color: #007700">()<br />    {<br />        return(</span><span style="color: #9876AA">true</span><span style="color: #007700">);<br />    }<br /><br />    </span><span style="color: #FF8000">// 方法 2<br />    </span><span style="color: #007700">function </span><span style="color: #9876AA">myfunc2</span><span style="color: #007700">()<br />    {<br />        return(</span><span style="color: #9876AA">true</span><span style="color: #007700">);<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$class_methods </span><span style="color: #007700">= </span><span style="color: #9876AA">get_class_methods</span><span style="color: #007700">(</span><span style="color: #DD0000">'myclass'</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// 或者<br /></span><span style="color: #9876AA">$class_methods </span><span style="color: #007700">= </span><span style="color: #9876AA">get_class_methods</span><span style="color: #007700">(new </span><span style="color: #9876AA">myclass</span><span style="color: #007700">());<br /><br />foreach (</span><span style="color: #9876AA">$class_methods </span><span style="color: #007700">as </span><span style="color: #9876AA">$method_name</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$method_name</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>__construct<br>myfunc1<br>myfunc2<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-class-methods-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link get_class()} - 返回对象的类名</span></li>    <li class="member"><span class="function">{@link get_class_vars()} - 获取类的默认属性</span></li>    <li class="member"><span class="function">{@link get_object_vars()} - 获取指定对象的属性</span></li>   </ul>  </span> </div></div>
 * @return string[] an array of method names defined for the class specified by*/
function get_class_methods(object|string $object_or_class): array {}

/**
*<div id="function.trigger-error" class="refentry"> <div class="refnamediv">  <h1 class="refname">trigger_error</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">trigger_error</span> &mdash; <span class="dc-title">产生一个用户级别的 error/warning/notice 信息</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.trigger-error-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>trigger_error</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$error_level</span><span class="initializer"> = <strong><span>E_USER_NOTICE</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   用于触发一个用户级别的错误条件，它能结合内置的错误处理器所关联，或者可以使用用户定义的函数作为新的错误处理程序(<span class="function">{@link set_error_handler()}</span>)。  </p>  <p class="para">   该函数在你运行出现异常时，需要产生一个特定的响应时非常有用。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.trigger-error-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">message</span></dt>     <dd>      <p class="para">       该 error 的特定错误信息，长度限制在了 1024 个字节。超过 1024 字节的字符都会被截断。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">error_level</span></dt>     <dd>      <p class="para">       该 error 所特定的错误类型。仅 E_USER 系列常量对其有效，默认是 <strong><span>E_USER_NOTICE</span></strong>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.trigger-error-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果指定了错误的 <span class="parameter" style="color:#3A95FF">error_level</span> 会返回 <strong><span>false</span></strong> ，正确则返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.trigger-error-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1571">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">trigger_error()</strong></span> 示例</strong></p>    <div class="example-contents"><p>     <span class="function">{@link set_error_handler()}</span> 可见到更多详细的例子。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">$divisor </span><span style="color: #007700">== </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">trigger_error</span><span style="color: #007700">(</span><span style="color: #DD0000">"Cannot divide by zero"</span><span style="color: #007700">, </span><span style="color: #9876AA">E_USER_ERROR</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.trigger-error-notes">  <h3 class="title">注释</h3>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">     在 <span class="parameter" style="color:#3A95FF">message</span>      里的 HTML 实体，并不会被转义。如果错误消息要显示在浏览器里，需要对错误消息使用     <span class="function">{@link htmlentities()}</span>。   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.trigger-error-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link error_reporting()} - 设置应该报告何种 PHP 错误</span></li>    <li class="member"><span class="function">{@link set_error_handler()} - 设置用户自定义的错误处理函数</span></li>    <li class="member"><span class="function">{@link restore_error_handler()} - 还原之前的错误处理函数</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/errorfunc.constants.php" class="link">错误级别常量</a></li>   </ul>  </span> </div></div>
 * @return bool This function returns false if wrong <i>error_type</i> is*/
function trigger_error(string $message, int $error_level = E_USER_NOTICE): bool {}

/**
*<div id="function.user-error" class="refentry"> <div class="refnamediv">  <h1 class="refname">user_error</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">user_error</span> &mdash; <span class="dc-title">别名 <span class="function">{@link trigger_error()}</span></span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.user-error-description">  <h3 class="title">说明</h3>  <p class="para">   此函数是该函数的别名： <span class="function">{@link trigger_error()}</span>.  </p> </div></div>
 * @return bool This function returns false if wrong <i>error_type</i> is*/
function user_error(string $message, int $error_level = E_USER_NOTICE): bool {}

/**
*<div id="function.set-error-handler" class="refentry"> <div class="refnamediv">  <h1 class="refname">set_error_handler</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">set_error_handler</span> &mdash; <span class="dc-title">设置用户自定义的错误处理函数</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.set-error-handler-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>set_error_handler</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$error_levels</span><span class="initializer"> = <strong><span>E_ALL</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span></span></div>  <p class="para rdfs-comment">   设置用户的函数 (<span class="parameter" style="color:#3A95FF">callback</span>) 来处理脚本中出现的错误。  </p>  <p class="para">   本函数可用于在运行时定义自定义错误处理程序，例如，在应用程序中发生严重错误，或者在特定条件下触发了错误（使用   <span class="function">{@link trigger_error()}</span>），应用程序需要执行文件/数据清理。  </p>  <p class="para">   重要的是要记住 <span class="parameter" style="color:#3A95FF">error_levels</span> 里指定的错误类型都会绕过 PHP 标准错误处理程序，   除非回调函数返回了 <strong><span>false</span></strong>。   <span class="function">{@link error_reporting()}</span> 设置将不会起到作用而继续会调用错误处理函数   —— 不过仍然可以获取 <a href="https://www.php.net/manual/zh/errorfunc.configuration.php#ini.error-reporting" class="link">error_reporting</a> 的当前值，并做适当处理。  </p>  <p class="para">   同时注意，处理程序有责任在必要时使用 <span class="function">{@link exit()}</span> 停止脚本执行。   如果错误处理程序返回了，脚本将会在发生错误的后一行继续执行。  </p>  <p class="para">   以下级别的错误不能由用户定义的函数来处理，独立于发生错误的地方：   <strong><span>E_ERROR</span></strong>、 <strong><span>E_PARSE</span></strong>、   <strong><span>E_CORE_ERROR</span></strong>、 <strong><span>E_CORE_WARNING</span></strong>、   <strong><span>E_COMPILE_ERROR</span></strong>、   <strong><span>E_COMPILE_WARNING</span></strong>，和在   调用 <span class="function"><strong style="color:#CC7832">set_error_handler()</strong></span> 函数所在文件中产生的大多数   <strong><span>E_STRICT</span></strong>。  </p>  <p class="para">   如果错误发生在脚本执行之前（比如文件上传时），将不会   调用自定义的错误处理程序因为它尚未在那时注册。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.set-error-handler-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para">       如果传递 <strong><span>null</span></strong>，则处理程序重置为默认状态。否则，处理程序是具有以下签名的回调。      </p>      <p class="para">       <div class="methodsynopsis dc-description">        <span class="methodname" style="color:#CC7832"><span class="replaceable">handler</span></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$errno</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$errstr</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$errfile</span><span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$errline</span><span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$errcontext</span><span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div>       <dl>                 <dt><span class="parameter" style="color:#3A95FF">errno</span></dt>         <dd>          <span class="simpara">           第一个参数 <span class="parameter" style="color:#3A95FF">errno</span>，将会以 int 形式传递错误的级别。          </span>         </dd>                         <dt><span class="parameter" style="color:#3A95FF">errstr</span></dt>         <dd>          <span class="simpara">           第二个参数 <span class="parameter" style="color:#3A95FF">errstr</span>，将会以 string 形式传递错误的信息。          </span>         </dd>                         <dt><span class="parameter" style="color:#3A95FF">errfile</span></dt>         <dd>          <span class="simpara">           如果回调接受第三个参数，<span class="parameter" style="color:#3A95FF">errfile</span>，将会以 string 形式传递错误的文件名。          </span>         </dd>                         <dt><span class="parameter" style="color:#3A95FF">errline</span></dt>         <dd>          <span class="simpara">           如果回调接受第四个参数，<span class="parameter" style="color:#3A95FF">errline</span>，将会以 int 形式传递错误发生的行号。          </span>         </dd>                         <dt><span class="parameter" style="color:#3A95FF">errcontext</span></dt>         <dd>          <span class="simpara">           如果回调接受第五个参数，<span class="parameter" style="color:#3A95FF">errcontext</span>           将会传递数组，该数组指向错误发生时活动符号表。也就是说，<span class="parameter" style="color:#3A95FF">errcontext</span>           会包含错误触发处作用域内所有变量的数组。用户的错误处理程序不应该修改错误上下文（context）。          </span>          <div class="warning"><strong class="warning">警告</strong>           <p class="simpara">            此参数自 PHP 7.2.0 后<em>弃用</em>并自 PHP 8.0.0            <em>移除</em>。如果函数没有为该参数定义默认值，那么在调用时会出现“too few arguments”的错误。           </p>          </div>         </dd>               </dl>      </p>      <p class="para">       如果函数返回 <strong><span>false</span></strong>，标准错误处理处理程序将会继续调用。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">error_levels</span></dt>     <dd>      <p class="para">       就像 <a href="https://www.php.net/manual/zh/errorfunc.configuration.php#ini.error-reporting" class="link">error_reporting</a>       的 ini 设置能够控制错误的显示一样，此参数能够用于屏蔽       <span class="parameter" style="color:#3A95FF">callback</span> 的触发。如果没有该掩码，无论 <a href="https://www.php.net/manual/zh/errorfunc.configuration.php#ini.error-reporting" class="link">error_reporting</a> 是如何设置的，<span class="parameter" style="color:#3A95FF">callback</span>       都会在每个错误发生时被调用。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.set-error-handler-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果之前定义的错误处理程序（如果有）。如果是内置的错误处理程序，则返回   <strong><span>null</span></strong>。如果之前的错误处理程序是一个类的方法，此函数会返回带类和方法名的索引数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.set-error-handler-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        删除 <span class="parameter" style="color:#3A95FF">errcontext</span> 并不再传递给用户回调。       </td>      </tr>      <tr>       <td>7.2.0</td>       <td>        <span class="parameter" style="color:#3A95FF">errcontext</span> 被废弃。使用此参数时会导致 <strong><span>E_DEPRECATED</span></strong> 提醒。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.set-error-handler-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1565">    <p><strong>示例 #1 用 <span class="function"><strong style="color:#CC7832">set_error_handler()</strong></span> 和 <span class="function">{@link trigger_error()}</span> 进行错误处理</strong></p>    <div class="example-contents"><p>     以下示例展示了通过触发错误并以用户自定义的程序来进行内部异常的处理。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// error handler function<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">myErrorHandler</span><span style="color: #007700">(</span><span style="color: #9876AA">$errno</span><span style="color: #007700">, </span><span style="color: #9876AA">$errstr</span><span style="color: #007700">, </span><span style="color: #9876AA">$errfile</span><span style="color: #007700">, </span><span style="color: #9876AA">$errline</span><span style="color: #007700">)<br />{<br />    if (!(</span><span style="color: #9876AA">error_reporting</span><span style="color: #007700">() &amp; </span><span style="color: #9876AA">$errno</span><span style="color: #007700">)) {<br />        </span><span style="color: #FF8000">// This error code is not included in error_reporting, so let it fall<br />        // through to the standard PHP error handler<br />        </span><span style="color: #007700">return </span><span style="color: #9876AA">false</span><span style="color: #007700">;<br />    }<br /><br />    </span><span style="color: #FF8000">// $errstr may need to be escaped:<br />    </span><span style="color: #9876AA">$errstr </span><span style="color: #007700">= </span><span style="color: #9876AA">htmlspecialchars</span><span style="color: #007700">(</span><span style="color: #9876AA">$errstr</span><span style="color: #007700">);<br /><br />    switch (</span><span style="color: #9876AA">$errno</span><span style="color: #007700">) {<br />    case </span><span style="color: #9876AA">E_USER_ERROR</span><span style="color: #007700">:<br />        echo </span><span style="color: #DD0000">"&lt;b&gt;My ERROR&lt;/b&gt; [</span><span style="color: #9876AA">$errno</span><span style="color: #DD0000">] </span><span style="color: #9876AA">$errstr</span><span style="color: #DD0000">&lt;br /&gt;\n"</span><span style="color: #007700">;<br />        echo </span><span style="color: #DD0000">"  Fatal error on line </span><span style="color: #9876AA">$errline</span><span style="color: #DD0000"> in file </span><span style="color: #9876AA">$errfile</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br />        echo </span><span style="color: #DD0000">", PHP " </span><span style="color: #007700">. </span><span style="color: #9876AA">PHP_VERSION </span><span style="color: #007700">. </span><span style="color: #DD0000">" (" </span><span style="color: #007700">. </span><span style="color: #9876AA">PHP_OS </span><span style="color: #007700">. </span><span style="color: #DD0000">")&lt;br /&gt;\n"</span><span style="color: #007700">;<br />        echo </span><span style="color: #DD0000">"Aborting...&lt;br /&gt;\n"</span><span style="color: #007700">;<br />        exit(</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /><br />    case </span><span style="color: #9876AA">E_USER_WARNING</span><span style="color: #007700">:<br />        echo </span><span style="color: #DD0000">"&lt;b&gt;My WARNING&lt;/b&gt; [</span><span style="color: #9876AA">$errno</span><span style="color: #DD0000">] </span><span style="color: #9876AA">$errstr</span><span style="color: #DD0000">&lt;br /&gt;\n"</span><span style="color: #007700">;<br />        break;<br /><br />    case </span><span style="color: #9876AA">E_USER_NOTICE</span><span style="color: #007700">:<br />        echo </span><span style="color: #DD0000">"&lt;b&gt;My NOTICE&lt;/b&gt; [</span><span style="color: #9876AA">$errno</span><span style="color: #DD0000">] </span><span style="color: #9876AA">$errstr</span><span style="color: #DD0000">&lt;br /&gt;\n"</span><span style="color: #007700">;<br />        break;<br /><br />    default:<br />        echo </span><span style="color: #DD0000">"Unknown error type: [</span><span style="color: #9876AA">$errno</span><span style="color: #DD0000">] </span><span style="color: #9876AA">$errstr</span><span style="color: #DD0000">&lt;br /&gt;\n"</span><span style="color: #007700">;<br />        break;<br />    }<br /><br />    </span><span style="color: #FF8000">// Don't execute PHP internal error handler <br />    </span><span style="color: #007700">return </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// function to test the error handling<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">scale_by_log</span><span style="color: #007700">(</span><span style="color: #9876AA">$vect</span><span style="color: #007700">, </span><span style="color: #9876AA">$scale</span><span style="color: #007700">)<br />{<br />    if (!</span><span style="color: #9876AA">is_numeric</span><span style="color: #007700">(</span><span style="color: #9876AA">$scale</span><span style="color: #007700">) || </span><span style="color: #9876AA">$scale </span><span style="color: #007700">&lt;= </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">trigger_error</span><span style="color: #007700">(</span><span style="color: #DD0000">"log(x) for x &lt;= 0 is undefined, you used: scale = </span><span style="color: #9876AA">$scale</span><span style="color: #DD0000">"</span><span style="color: #007700">, </span><span style="color: #9876AA">E_USER_ERROR</span><span style="color: #007700">);<br />    }<br /><br />    if (!</span><span style="color: #9876AA">is_array</span><span style="color: #007700">(</span><span style="color: #9876AA">$vect</span><span style="color: #007700">)) {<br />        </span><span style="color: #9876AA">trigger_error</span><span style="color: #007700">(</span><span style="color: #DD0000">"Incorrect input vector, array of values expected"</span><span style="color: #007700">, </span><span style="color: #9876AA">E_USER_WARNING</span><span style="color: #007700">);<br />        return </span><span style="color: #9876AA">null</span><span style="color: #007700">;<br />    }<br /><br />    </span><span style="color: #9876AA">$temp </span><span style="color: #007700">= array();<br />    foreach(</span><span style="color: #9876AA">$vect </span><span style="color: #007700">as </span><span style="color: #9876AA">$pos </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$value</span><span style="color: #007700">) {<br />        if (!</span><span style="color: #9876AA">is_numeric</span><span style="color: #007700">(</span><span style="color: #9876AA">$value</span><span style="color: #007700">)) {<br />            </span><span style="color: #9876AA">trigger_error</span><span style="color: #007700">(</span><span style="color: #DD0000">"Value at position </span><span style="color: #9876AA">$pos</span><span style="color: #DD0000"> is not a number, using 0 (zero)"</span><span style="color: #007700">, </span><span style="color: #9876AA">E_USER_NOTICE</span><span style="color: #007700">);<br />            </span><span style="color: #9876AA">$value </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />        }<br />        </span><span style="color: #9876AA">$temp</span><span style="color: #007700">[</span><span style="color: #9876AA">$pos</span><span style="color: #007700">] = </span><span style="color: #9876AA">log</span><span style="color: #007700">(</span><span style="color: #9876AA">$scale</span><span style="color: #007700">) * </span><span style="color: #9876AA">$value</span><span style="color: #007700">;<br />    }<br /><br />    return </span><span style="color: #9876AA">$temp</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// set to the user defined error handler<br /></span><span style="color: #9876AA">$old_error_handler </span><span style="color: #007700">= </span><span style="color: #9876AA">set_error_handler</span><span style="color: #007700">(</span><span style="color: #DD0000">"myErrorHandler"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// trigger some errors, first define a mixed array with a non-numeric item<br /></span><span style="color: #007700">echo </span><span style="color: #DD0000">"vector a\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$a </span><span style="color: #007700">= array(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #DD0000">"foo"</span><span style="color: #007700">, </span><span style="color: #9876AA">5.5</span><span style="color: #007700">, </span><span style="color: #9876AA">43.3</span><span style="color: #007700">, </span><span style="color: #9876AA">21.11</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// now generate second array<br /></span><span style="color: #007700">echo </span><span style="color: #DD0000">"----\nvector b - a notice (b = log(PI) * a)\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// Value at position $pos is not a number, using 0 (zero) <br /></span><span style="color: #9876AA">$b </span><span style="color: #007700">= </span><span style="color: #9876AA">scale_by_log</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">M_PI</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// this is trouble, we pass a string instead of an array<br /></span><span style="color: #007700">echo </span><span style="color: #DD0000">"----\nvector c - a warning\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// Incorrect input vector, array of values expected <br /></span><span style="color: #9876AA">$c </span><span style="color: #007700">= </span><span style="color: #9876AA">scale_by_log</span><span style="color: #007700">(</span><span style="color: #DD0000">"not array"</span><span style="color: #007700">, </span><span style="color: #9876AA">2.3</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$c</span><span style="color: #007700">); </span><span style="color: #FF8000">// NULL<br /><br />// this is a critical error, log of zero or negative number is undefined<br /></span><span style="color: #007700">echo </span><span style="color: #DD0000">"----\nvector d - fatal error\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// log(x) for x &lt;= 0 is undefined, you used: scale = $scale" <br /></span><span style="color: #9876AA">$d </span><span style="color: #007700">= </span><span style="color: #9876AA">scale_by_log</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, -</span><span style="color: #9876AA">2.5</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$d</span><span style="color: #007700">); </span><span style="color: #FF8000">// Never reached<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>vector a<br>Array<br>(<br>    [0] =&gt; 2<br>    [1] =&gt; 3<br>    [2] =&gt; foo<br>    [3] =&gt; 5.5<br>    [4] =&gt; 43.3<br>    [5] =&gt; 21.11<br>)<br>----<br>vector b - a notice (b = log(PI) * a)<br>&lt;b&gt;My NOTICE&lt;/b&gt; [1024] Value at position 2 is not a number, using 0 (zero)&lt;br /&gt;<br>Array<br>(<br>    [0] =&gt; 2.2894597716988<br>    [1] =&gt; 3.4341896575482<br>    [2] =&gt; 0<br>    [3] =&gt; 6.2960143721717<br>    [4] =&gt; 49.566804057279<br>    [5] =&gt; 24.165247890281<br>)<br>----<br>vector c - a warning<br>&lt;b&gt;My WARNING&lt;/b&gt; [512] Incorrect input vector, array of values expected&lt;br /&gt;<br>NULL<br>----<br>vector d - fatal error<br>&lt;b&gt;My ERROR&lt;/b&gt; [256] log(x) for x &lt;= 0 is undefined, you used: scale = -2.5&lt;br /&gt;<br>  Fatal error on line 35 in file trigger_error.php, PHP 5.2.1 (FreeBSD)&lt;br /&gt;<br>Aborting...&lt;br /&gt;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.set-error-handler-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="classname"><a href="https://www.php.net/manual/zh/class.errorexception.php" class="classname">ErrorException</a></span></li>    <li class="member"><span class="function">{@link error_reporting()} - 设置应该报告何种 PHP 错误</span></li>    <li class="member"><span class="function">{@link restore_error_handler()} - 还原之前的错误处理函数</span></li>    <li class="member"><span class="function">{@link trigger_error()} - 产生一个用户级别的 error/warning/notice 信息</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/errorfunc.constants.php" class="link">error level constants</a></li>   </ul>  </span> </div></div>
 * @return callable|null a string containing the previously defined error handler (if any). If*/
function set_error_handler(?callable $callback, int $error_levels = E_ALL|E_STRICT) {}

/**
*<div id="function.restore-error-handler" class="refentry"> <div class="refnamediv">  <h1 class="refname">restore_error_handler</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">restore_error_handler</span> &mdash; <span class="dc-title">还原之前的错误处理函数</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.restore-error-handler-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>restore_error_handler</strong></span>(): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">      在使用 <span class="function">{@link set_error_handler()}</span> 改变错误处理函数之后，此函数可以   用于还原之前的错误处理程序(可以是内置的或者也可以是用户所定义的函数)。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.restore-error-handler-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.restore-error-handler-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.restore-error-handler-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1559">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">restore_error_handler()</strong></span> 范例</strong></p>    <div class="example-contents"><p>     如果是 <span class="function">{@link unserialize()}</span> 导致了一个错误，接下来     会恢复原来的错误处理函数。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">unserialize_handler</span><span style="color: #007700">(</span><span style="color: #9876AA">$errno</span><span style="color: #007700">, </span><span style="color: #9876AA">$errstr</span><span style="color: #007700">)<br />{<br />    echo </span><span style="color: #DD0000">"Invalid serialized value.\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$serialized </span><span style="color: #007700">= </span><span style="color: #DD0000">'foo'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">set_error_handler</span><span style="color: #007700">(</span><span style="color: #DD0000">'unserialize_handler'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$original </span><span style="color: #007700">= </span><span style="color: #9876AA">unserialize</span><span style="color: #007700">(</span><span style="color: #9876AA">$serialized</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">restore_error_handler</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Invalid serialized value.<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.restore-error-handler-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link error_reporting()} - 设置应该报告何种 PHP 错误</span></li>    <li class="member"><span class="function">{@link set_error_handler()} - 设置用户自定义的错误处理函数</span></li>    <li class="member"><span class="function">{@link restore_exception_handler()} - 恢复之前定义过的异常处理函数。</span></li>    <li class="member"><span class="function">{@link trigger_error()} - 产生一个用户级别的 error/warning/notice 信息</span></li>   </ul>  </span> </div></div>
 * @return bool This function always returns true.*/
function restore_error_handler(): bool {}

/**
*<div id="function.set-exception-handler" class="refentry"> <div class="refnamediv">  <h1 class="refname">set_exception_handler</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">set_exception_handler</span> &mdash; <span class="dc-title">   设置用户自定义的异常处理函数  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.set-exception-handler-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>set_exception_handler</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span></span></div>  <p class="para rdfs-comment">   设置默认的异常处理程序，用于没有用 try/catch 块来捕获的异常。   在 <span class="parameter" style="color:#3A95FF">callback</span> 调用后异常会中止。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.set-exception-handler-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para">       当一个未捕获的异常发生时所调用的函数。该处理函数需要接受一个参数，该参数是抛出的       <span class="classname"><a href="https://www.php.net/manual/zh/class.throwable.php" class="classname">Throwable</a></span> 对象。<span class="classname"><a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a></span>       和 <span class="classname"><a href="https://www.php.net/manual/zh/class.exception.php" class="classname">Exception</a></span> 都实现了 <span class="classname"><a href="https://www.php.net/manual/zh/class.throwable.php" class="classname">Throwable</a></span>       接口。这是处理程序签名：             </p>      <p class="para">       <div class="methodsynopsis dc-description">        <span class="methodname" style="color:#CC7832"><span class="replaceable">handler</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span> <span class="parameter" style="color:#3A95FF">$ex</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>      </p>      <p class="para">        也可以传递 <strong><span>null</span></strong> 值用于重置异常处理函数为默认值。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.set-exception-handler-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回之前定义的异常处理程序，或者在错误时返回   <strong><span>null</span></strong>。如果之前没有定义错误处理程序，也会返回 <strong><span>null</span></strong>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.set-exception-handler-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1568">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">set_exception_handler()</strong></span> 范例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">exception_handler</span><span style="color: #007700">(</span><span style="color: #9876AA">Throwable $exception</span><span style="color: #007700">) {<br />  echo </span><span style="color: #DD0000">"Uncaught exception: " </span><span style="color: #007700">, </span><span style="color: #9876AA">$exception</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">(), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">set_exception_handler</span><span style="color: #007700">(</span><span style="color: #DD0000">'exception_handler'</span><span style="color: #007700">);<br /><br />throw new </span><span style="color: #9876AA">Exception</span><span style="color: #007700">(</span><span style="color: #DD0000">'Uncaught Exception'</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"Not Executed\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.set-exception-handler-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link restore_exception_handler()} - 恢复之前定义过的异常处理函数。</span></li>    <li class="member"><span class="function">{@link restore_error_handler()} - 还原之前的错误处理函数</span></li>    <li class="member"><span class="function">{@link error_reporting()} - 设置应该报告何种 PHP 错误</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.exceptions.php" class="link">异常</a></li>   </ul>  </span> </div></div>
 * @return callable|null the name of the previously defined exception handler, or null on error. If*/
function set_exception_handler(?callable $callback) {}

/**
*<div id="function.restore-exception-handler" class="refentry"> <div class="refnamediv">  <h1 class="refname">restore_exception_handler</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">restore_exception_handler</span> &mdash; <span class="dc-title">   恢复之前定义过的异常处理函数。  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.restore-exception-handler-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>restore_exception_handler</strong></span>(): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   在使用 <span class="function">{@link set_exception_handler()}</span> 改变异常处理函数之后，此函数可以   用于还原之前的异常处理程序(可以是内置的或者也可以是用户所定义的函数)。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.restore-exception-handler-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.restore-exception-handler-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.restore-exception-handler-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1562">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">restore_exception_handler()</strong></span> 范例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />    </span><span style="color: #007700">function </span><span style="color: #9876AA">exception_handler_1</span><span style="color: #007700">(</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">)<br />    {<br />        echo </span><span style="color: #DD0000">'[' </span><span style="color: #007700">. </span><span style="color: #9876AA">__FUNCTION__ </span><span style="color: #007700">. </span><span style="color: #DD0000">'] ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">();<br />    }<br /><br />    function </span><span style="color: #9876AA">exception_handler_2</span><span style="color: #007700">(</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">)<br />    {<br />        echo </span><span style="color: #DD0000">'[' </span><span style="color: #007700">. </span><span style="color: #9876AA">__FUNCTION__ </span><span style="color: #007700">. </span><span style="color: #DD0000">'] ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">();<br />    }<br /><br />    </span><span style="color: #9876AA">set_exception_handler</span><span style="color: #007700">(</span><span style="color: #DD0000">'exception_handler_1'</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">set_exception_handler</span><span style="color: #007700">(</span><span style="color: #DD0000">'exception_handler_2'</span><span style="color: #007700">);<br /><br />    </span><span style="color: #9876AA">restore_exception_handler</span><span style="color: #007700">();<br /><br />    throw new </span><span style="color: #9876AA">Exception</span><span style="color: #007700">(</span><span style="color: #DD0000">'This triggers the first exception handler...'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>[exception_handler_1] This triggers the first exception handler...<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.restore-exception-handler-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link set_exception_handler()} - 设置用户自定义的异常处理函数</span></li>    <li class="member"><span class="function">{@link set_error_handler()} - 设置用户自定义的错误处理函数</span></li>    <li class="member"><span class="function">{@link restore_error_handler()} - 还原之前的错误处理函数</span></li>    <li class="member"><span class="function">{@link error_reporting()} - 设置应该报告何种 PHP 错误</span></li>   </ul>  </span> </div></div>
 * @return bool This function always returns true.*/
function restore_exception_handler(): bool {}

/**
*<div id="function.get-declared-classes" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_declared_classes</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">get_declared_classes</span> &mdash; <span class="dc-title">返回由已定义类的名字所组成的数组</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-declared-classes-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_declared_classes</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   返回由当前脚本中已定义类的名字组成的数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-declared-classes-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-declared-classes-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    返回由当前脚本中已定义类的名字组成的数组。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    需要注意的是额外类的出现依赖于你已编译到 PHP     中的库。这意味着你不能使用这些类名定义自己的类。在附录的    <a href="https://www.php.net/manual/zh/reserved.classes.php" class="link">预定义类</a>    部分有预定义类的列表。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.get-declared-classes-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>7.4.0</td>      <td>       之前 <span class="function"><strong style="color:#CC7832">get_declared_classes()</strong></span>        返回的顺序总是父类在前，子类在后。现在不会这样了。<span class="function"><strong style="color:#CC7832">get_declared_classes()</strong></span>       的返回值将不再保证顺序。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-declared-classes-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">get_declared_classes()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">get_declared_classes</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; stdClass<br>    [1] =&gt; __PHP_Incomplete_Class<br>    [2] =&gt; Directory<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-declared-classes-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link class_exists()} - 查类是否已经定义</span></li>    <li class="member"><span class="function">{@link get_declared_interfaces()} - 返回一个数组包含所有已声明的接口</span></li>    <li class="member"><span class="function">{@link get_defined_functions()} - 返回所有已定义函数的数组</span></li>   </ul>  </span> </div></div>
 * @return string[] an array of the names of the declared classes in the current script.*/
function get_declared_classes(): array {}

/**
*<div id="function.get-declared-interfaces" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_declared_interfaces</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">get_declared_interfaces</span> &mdash; <span class="dc-title">返回一个数组包含所有已声明的接口</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-declared-interfaces-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_declared_interfaces</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   返回一个数组包含所有已声明的接口。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-declared-interfaces-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-declared-interfaces-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   本函数返回一个数组，其内容是当前脚本中所有已声明的接口的名字。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-declared-interfaces-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">get_declared_interfaces()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">get_declared_interfaces</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; Traversable<br>    [1] =&gt; IteratorAggregate<br>    [2] =&gt; Iterator<br>    [3] =&gt; ArrayAccess<br>    [4] =&gt; reflector<br>    [5] =&gt; RecursiveIterator<br>    [6] =&gt; SeekableIterator<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-declared-interfaces-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link interface_exists()} - 检查接口是否已被定义</span></li>    <li class="member"><span class="function">{@link get_declared_classes()} - 返回由已定义类的名字所组成的数组</span></li>    <li class="member"><span class="function">{@link class_implements()} - 返回指定的类或接口实现的所有接口</span></li>   </ul>  </span> </div></div>
 * @return string[] an array of the names of the declared interfaces in the current*/
function get_declared_interfaces(): array {}

/**
*<div id="function.get-declared-traits" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_declared_traits</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">get_declared_traits</span> &mdash; <span class="dc-title">返回所有已定义的 traits 的数组</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-declared-traits-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_declared_traits</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-declared-traits-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-declared-traits-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个数组，其值包含了所有已定义的 traits 的名称。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-declared-traits-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link class_uses()} - Return the traits used by the given class</span></li>    <li class="member"><span class="function">{@link trait_exists()} - 检查指定的 trait 是否存在</span></li>   </ul>  </span> </div></div>
 * @return array with names of all declared traits in values. Returns NULL in case of a failure.*/
function get_declared_traits(): array {}

/**
*<div id="function.get-defined-functions" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_defined_functions</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">get_defined_functions</span> &mdash; <span class="dc-title">返回所有已定义函数的数组</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-defined-functions-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_defined_functions</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$exclude_disabled</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取所有已定义函数的数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-defined-functions-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">exclude_disabled</span></dt>    <dd>     <span>      禁用的函数是否应该在返回的数据里排除。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-defined-functions-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回数组，包含了所有已定义的函数，包括内置/用户定义的函数。可通过 <var class="varname">$arr["internal"]</var>   来访问系统内置函数，通过 <var class="varname">$arr["user"]</var> 来访问用户自定义函数（参见示例）。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.get-defined-functions-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">exclude_disabled</span> 参数的默认值从 <strong><span>false</span></strong> 更改为 <strong><span>true</span></strong>。      </td>     </tr>     <tr>      <td>7.0.15, 7.1.1</td>      <td>       新增 <span class="parameter" style="color:#3A95FF">exclude_disabled</span> 参数。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-defined-functions-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">get_defined_functions()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">myrow</span><span style="color: #007700">(</span><span style="color: #9876AA">$id</span><span style="color: #007700">, </span><span style="color: #9876AA">$data</span><span style="color: #007700">)<br />{<br />    return </span><span style="color: #DD0000">"&lt;tr&gt;&lt;th&gt;</span><span style="color: #9876AA">$id</span><span style="color: #DD0000">&lt;/th&gt;&lt;td&gt;</span><span style="color: #9876AA">$data</span><span style="color: #DD0000">&lt;/td&gt;&lt;/tr&gt;\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$arr </span><span style="color: #007700">= </span><span style="color: #9876AA">get_defined_functions</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [internal] =&gt; Array<br>        (<br>            [0] =&gt; zend_version<br>            [1] =&gt; func_num_args<br>            [2] =&gt; func_get_arg<br>            [3] =&gt; func_get_args<br>            [4] =&gt; strlen<br>            [5] =&gt; strcmp<br>            [6] =&gt; strncmp<br>            ...<br>            [750] =&gt; bcscale<br>            [751] =&gt; bccomp<br>        )<br><br>    [user] =&gt; Array<br>        (<br>            [0] =&gt; myrow<br>        )<br><br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-defined-functions-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link function_exists()} - 如果给定的函数已经被定义就返回 true</span></li>    <li class="member"><span class="function">{@link get_defined_vars()} - 返回由所有已定义变量所组成的数组</span></li>    <li class="member"><span class="function">{@link get_defined_constants()} - 返回所有常量的关联数组，键是常量名，值是常量值</span></li>    <li class="member"><span class="function">{@link get_declared_classes()} - 返回由已定义类的名字所组成的数组</span></li>   </ul>  </span> </div></div>
 * @return array an multidimensional array containing a list of all defined*/
function get_defined_functions(#[PhpStormStubsElementAvailable(from: '7.1')] bool $exclude_disabled = true): array {}

/**
*<div id="function.get-defined-vars" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_defined_vars</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">get_defined_vars</span> &mdash; <span class="dc-title">   返回由所有已定义变量所组成的数组  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-defined-vars-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_defined_vars</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   此函数返回多维数组。包含调用 <span class="function"><strong style="color:#CC7832">get_defined_vars()</strong></span>   作用域内所有已定义的变量、环境变量、服务器变量、用户定义变量列表。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-defined-vars-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-defined-vars-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   包含所有变量的多维数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-defined-vars-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">get_defined_vars()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$b </span><span style="color: #007700">= array(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #9876AA">8</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$arr </span><span style="color: #007700">= </span><span style="color: #9876AA">get_defined_vars</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 打印 $b<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">[</span><span style="color: #DD0000">"b"</span><span style="color: #007700">]);<br /><br /></span><span style="color: #FF8000">// 打印 PHP 解释器的路径（如果用于 CGI）<br /> * 例如 /usr/local/bin/php <br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">$arr</span><span style="color: #007700">[</span><span style="color: #DD0000">"_"</span><span style="color: #007700">];<br /><br /></span><span style="color: #FF8000">// 打印命令行参数（如果有的话）<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">[</span><span style="color: #DD0000">"argv"</span><span style="color: #007700">]);<br /><br /></span><span style="color: #FF8000">// 打印所有服务器变量<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">[</span><span style="color: #DD0000">"_SERVER"</span><span style="color: #007700">]);<br /><br /></span><span style="color: #FF8000">// 打印变量数组的所有可用键<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_keys</span><span style="color: #007700">(</span><span style="color: #9876AA">get_defined_vars</span><span style="color: #007700">()));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-defined-vars-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link isset()} - 检测变量是否已声明并且其值不为 null</span></li>    <li class="member"><span class="function">{@link get_defined_functions()} - 返回所有已定义函数的数组</span></li>    <li class="member"><span class="function">{@link get_defined_constants()} - 返回所有常量的关联数组，键是常量名，值是常量值</span></li>   </ul>  </span> </div></div>
 * @return array A multidimensional array with all the variables.*/
function get_defined_vars(): array {}

/**
*<div id="function.create-function" class="refentry"> <div class="refnamediv">  <h1 class="refname">create_function</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">create_function</span> &mdash; <span class="dc-title">通过执行代码字符串创建动态函数</span></p> </div> <div id="function.create-function-refsynopsisdiv">  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数已自 PHP 7.2.0 起被<em>废弃</em>，并自 PHP 8.0.0 起被<em>移除</em>。 强烈建议不要依赖本函数。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.create-function-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>create_function</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$args</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$code</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   从传递的参数中创建动态参数，并返回它的唯一名字。  </p>  <div class="caution"><strong class="caution">警告</strong>   <p class="para">    此函数在内部执行 <span class="function">{@link eval()}</span>，因此具有跟 <span class="function">{@link eval()}</span>    相同的安全问题。还有性能以及内存使用较差的特性，因为创建的函数是全局的且无法释放。   </p>   <p class="para">    应该使用原生<a href="https://www.php.net/manual/zh/functions.anonymous.php" class="link">匿名函数</a>。   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.create-function-parameters">  <h3 class="title">参数</h3>  <span>   It is normally advisable to pass these parameters as   <a href="https://www.php.net/manual/zh/language.types.string.php#language.types.string.syntax.single" class="link">single quoted</a>   strings. If using <a href="https://www.php.net/manual/zh/language.types.string.php#language.types.string.syntax.double" class="link">double quoted</a>   strings, variable names in the code need to be escaped carefully, e.g.   <span>\$somevar</span>.   <dl>         <dt><span class="parameter" style="color:#3A95FF">args</span></dt>     <dd>      <p class="para">       The function arguments, as a single comma-separated string.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">code</span></dt>     <dd>      <p class="para">       The function code.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.create-function-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a unique function name as a string,  或者在失败时返回 <strong><span>false</span></strong>.   Note that the name contains a non-printable character (<span>&quot;\0&quot;</span>),   so care should be taken when printing the name or incorporating it in any other   string.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.create-function-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1      Creating a function dynamically, with <span class="function"><strong style="color:#CC7832">create_function()</strong></span>     or anonymous functions    </strong></p>    <div class="example-contents"><p>     You can use a dynamically created function, to (for example) create a function from     information gathered at run time. First, using <span class="function"><strong style="color:#CC7832">create_function()</strong></span>:    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$newfunc </span><span style="color: #007700">= </span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$a,$b'</span><span style="color: #007700">, </span><span style="color: #DD0000">'return "ln($a) + ln($b) = " . log($a * $b);'</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$newfunc</span><span style="color: #007700">(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">M_E</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     Now the same code, using an <a href="https://www.php.net/manual/zh/functions.anonymous.php" class="link">anonymous function</a>;     note that the code and arguments are no longer contained in strings:    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$newfunc </span><span style="color: #007700">= function(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,</span><span style="color: #9876AA">$b</span><span style="color: #007700">) { return </span><span style="color: #DD0000">"ln(</span><span style="color: #9876AA">$a</span><span style="color: #DD0000">) + ln(</span><span style="color: #9876AA">$b</span><span style="color: #DD0000">) = " </span><span style="color: #007700">. </span><span style="color: #9876AA">log</span><span style="color: #007700">(</span><span style="color: #9876AA">$a </span><span style="color: #007700">* </span><span style="color: #9876AA">$b</span><span style="color: #007700">); };<br />echo </span><span style="color: #9876AA">$newfunc</span><span style="color: #007700">(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">M_E</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>ln(2) + ln(2.718281828459) = 1.6931471805599<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2      Making a general processing function, with <span class="function"><strong style="color:#CC7832">create_function()</strong></span>     or anonymous functions    </strong></p>    <div class="example-contents"><p>     Another use could be to have general handler function that can apply a set     of operations to a list of parameters:    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">process</span><span style="color: #007700">(</span><span style="color: #9876AA">$var1</span><span style="color: #007700">, </span><span style="color: #9876AA">$var2</span><span style="color: #007700">, </span><span style="color: #9876AA">$farr</span><span style="color: #007700">)<br />{<br />    foreach (</span><span style="color: #9876AA">$farr </span><span style="color: #007700">as </span><span style="color: #9876AA">$f</span><span style="color: #007700">) {<br />        echo </span><span style="color: #9876AA">$f</span><span style="color: #007700">(</span><span style="color: #9876AA">$var1</span><span style="color: #007700">, </span><span style="color: #9876AA">$var2</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />    }<br />}<br /><br /></span><span style="color: #FF8000">// create a bunch of math functions<br /></span><span style="color: #9876AA">$farr </span><span style="color: #007700">= array(<br />    </span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$x,$y'</span><span style="color: #007700">, </span><span style="color: #DD0000">'return "some trig: ".(sin($x) + $x*cos($y));'</span><span style="color: #007700">),<br />    </span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$x,$y'</span><span style="color: #007700">, </span><span style="color: #DD0000">'return "a hypotenuse: ".sqrt($x*$x + $y*$y);'</span><span style="color: #007700">),<br />    </span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$a,$b'</span><span style="color: #007700">, </span><span style="color: #DD0000">'if ($a &gt;=0) {return "b*a^2 = ".$b*sqrt($a);} else {return false;}'</span><span style="color: #007700">),<br />    </span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$a,$b'</span><span style="color: #007700">, </span><span style="color: #DD0000">"return \"min(b^2+a, a^2,b) = \".min(\$a*\$a+\$b,\$b*\$b+\$a);"</span><span style="color: #007700">),<br />    </span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$a,$b'</span><span style="color: #007700">, </span><span style="color: #DD0000">'if ($a &gt; 0 &amp;&amp; $b != 0) {return "ln(a)/b = ".log($a)/$b; } else { return false; }'</span><span style="color: #007700">)<br />);<br /><br />echo </span><span style="color: #DD0000">"\nUsing the first array of dynamic functions\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"parameters: 2.3445, M_PI\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">process</span><span style="color: #007700">(</span><span style="color: #9876AA">2.3445</span><span style="color: #007700">, </span><span style="color: #9876AA">M_PI</span><span style="color: #007700">, </span><span style="color: #9876AA">$farr</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// now make a bunch of string processing functions<br /></span><span style="color: #9876AA">$garr </span><span style="color: #007700">= array(<br />    </span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$b,$a'</span><span style="color: #007700">, </span><span style="color: #DD0000">'if (strncmp($a, $b, 3) == 0) return "** \"$a\" '</span><span style="color: #007700">.<br />        </span><span style="color: #DD0000">'and \"$b\"\n** Look the same to me! (looking at the first 3 chars)";'</span><span style="color: #007700">),<br />    </span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$a,$b'</span><span style="color: #007700">, </span><span style="color: #DD0000">'return "CRCs: " . crc32($a) . ", ".crc32($b);'</span><span style="color: #007700">),<br />    </span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$a,$b'</span><span style="color: #007700">, </span><span style="color: #DD0000">'return "similar(a,b) = " . similar_text($a, $b, $p) . "($p%)";'</span><span style="color: #007700">)<br />);<br />echo </span><span style="color: #DD0000">"\nUsing the second array of dynamic functions\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">process</span><span style="color: #007700">(</span><span style="color: #DD0000">"Twas brilling and the slithy toves"</span><span style="color: #007700">, </span><span style="color: #DD0000">"Twas the night"</span><span style="color: #007700">, </span><span style="color: #9876AA">$garr</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     Again, here is the same code using     <a href="https://www.php.net/manual/zh/functions.anonymous.php" class="link">anonymous functions</a>.     Note that variable names in the code no longer need to be escaped,     because they are not enclosed in a string.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">process</span><span style="color: #007700">(</span><span style="color: #9876AA">$var1</span><span style="color: #007700">, </span><span style="color: #9876AA">$var2</span><span style="color: #007700">, </span><span style="color: #9876AA">$farr</span><span style="color: #007700">)<br />{<br />    foreach (</span><span style="color: #9876AA">$farr </span><span style="color: #007700">as </span><span style="color: #9876AA">$f</span><span style="color: #007700">) {<br />        echo </span><span style="color: #9876AA">$f</span><span style="color: #007700">(</span><span style="color: #9876AA">$var1</span><span style="color: #007700">, </span><span style="color: #9876AA">$var2</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />    }<br />}<br /><br /></span><span style="color: #FF8000">// create a bunch of math functions<br /></span><span style="color: #9876AA">$farr </span><span style="color: #007700">= array(<br />    function(</span><span style="color: #9876AA">$x</span><span style="color: #007700">,</span><span style="color: #9876AA">$y</span><span style="color: #007700">) { return </span><span style="color: #DD0000">"some trig: "</span><span style="color: #007700">.(</span><span style="color: #9876AA">sin</span><span style="color: #007700">(</span><span style="color: #9876AA">$x</span><span style="color: #007700">) + </span><span style="color: #9876AA">$x</span><span style="color: #007700">*</span><span style="color: #9876AA">cos</span><span style="color: #007700">(</span><span style="color: #9876AA">$y</span><span style="color: #007700">)); },<br />    function(</span><span style="color: #9876AA">$x</span><span style="color: #007700">,</span><span style="color: #9876AA">$y</span><span style="color: #007700">) { return </span><span style="color: #DD0000">"a hypotenuse: "</span><span style="color: #007700">.</span><span style="color: #9876AA">sqrt</span><span style="color: #007700">(</span><span style="color: #9876AA">$x</span><span style="color: #007700">*</span><span style="color: #9876AA">$x </span><span style="color: #007700">+ </span><span style="color: #9876AA">$y</span><span style="color: #007700">*</span><span style="color: #9876AA">$y</span><span style="color: #007700">); },<br />    function(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,</span><span style="color: #9876AA">$b</span><span style="color: #007700">) { if (</span><span style="color: #9876AA">$a </span><span style="color: #007700">&gt;=</span><span style="color: #9876AA">0</span><span style="color: #007700">) {return </span><span style="color: #DD0000">"b*a^2 = "</span><span style="color: #007700">.</span><span style="color: #9876AA">$b</span><span style="color: #007700">*</span><span style="color: #9876AA">sqrt</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">);} else {return </span><span style="color: #9876AA">false</span><span style="color: #007700">;} },<br />    function(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,</span><span style="color: #9876AA">$b</span><span style="color: #007700">) { return </span><span style="color: #DD0000">"min(b^2+a, a^2,b) = " </span><span style="color: #007700">. </span><span style="color: #9876AA">min</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">*</span><span style="color: #9876AA">$a</span><span style="color: #007700">+</span><span style="color: #9876AA">$b</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">*</span><span style="color: #9876AA">$b</span><span style="color: #007700">+</span><span style="color: #9876AA">$a</span><span style="color: #007700">); },<br />    function(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,</span><span style="color: #9876AA">$b</span><span style="color: #007700">) { if (</span><span style="color: #9876AA">$a </span><span style="color: #007700">&gt; </span><span style="color: #9876AA">0 </span><span style="color: #007700">&amp;&amp; </span><span style="color: #9876AA">$b </span><span style="color: #007700">!= </span><span style="color: #9876AA">0</span><span style="color: #007700">) {return </span><span style="color: #DD0000">"ln(a)/b = "</span><span style="color: #007700">.</span><span style="color: #9876AA">log</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">)/</span><span style="color: #9876AA">$b</span><span style="color: #007700">; } else { return </span><span style="color: #9876AA">false</span><span style="color: #007700">; } }<br />);<br /><br />echo </span><span style="color: #DD0000">"\nUsing the first array of dynamic functions\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"parameters: 2.3445, M_PI\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">process</span><span style="color: #007700">(</span><span style="color: #9876AA">2.3445</span><span style="color: #007700">, </span><span style="color: #9876AA">M_PI</span><span style="color: #007700">, </span><span style="color: #9876AA">$farr</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// now make a bunch of string processing functions<br /></span><span style="color: #9876AA">$garr </span><span style="color: #007700">= array(<br />    function(</span><span style="color: #9876AA">$b</span><span style="color: #007700">,</span><span style="color: #9876AA">$a</span><span style="color: #007700">) { if (</span><span style="color: #9876AA">strncmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">) == </span><span style="color: #9876AA">0</span><span style="color: #007700">) return </span><span style="color: #DD0000">"** \"</span><span style="color: #9876AA">$a</span><span style="color: #DD0000">\" " </span><span style="color: #007700">.<br />        </span><span style="color: #DD0000">"and \"</span><span style="color: #9876AA">$b</span><span style="color: #DD0000">\"\n** Look the same to me! (looking at the first 3 chars)"</span><span style="color: #007700">; },<br />    function(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,</span><span style="color: #9876AA">$b</span><span style="color: #007700">) { return </span><span style="color: #DD0000">"CRCs: " </span><span style="color: #007700">. </span><span style="color: #9876AA">crc32</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">) . </span><span style="color: #DD0000">", "</span><span style="color: #007700">.</span><span style="color: #9876AA">crc32</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">); },<br />    function(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,</span><span style="color: #9876AA">$b</span><span style="color: #007700">) { return </span><span style="color: #DD0000">"similar(a,b) = " </span><span style="color: #007700">. </span><span style="color: #9876AA">similar_text</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">, </span><span style="color: #9876AA">$p</span><span style="color: #007700">) . </span><span style="color: #DD0000">"(</span><span style="color: #9876AA">$p</span><span style="color: #DD0000">%)"</span><span style="color: #007700">; }<br />);<br />echo </span><span style="color: #DD0000">"\nUsing the second array of dynamic functions\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">process</span><span style="color: #007700">(</span><span style="color: #DD0000">"Twas brilling and the slithy toves"</span><span style="color: #007700">, </span><span style="color: #DD0000">"Twas the night"</span><span style="color: #007700">, </span><span style="color: #9876AA">$garr</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Using the first array of dynamic functions<br>parameters: 2.3445, M_PI<br>some trig: -1.6291725057799<br>a hypotenuse: 3.9199852871011<br>b*a^2 = 4.8103313314525<br>min(b^2+a, a^2,b) = 8.6382729035898<br>ln(a)/b = 0.27122299212594<br><br>Using the second array of dynamic functions<br>** &quot;Twas the night&quot; and &quot;Twas brilling and the slithy toves&quot;<br>** Look the same to me! (looking at the first 3 chars)<br>CRCs: 3569586014, 342550513<br>similar(a,b) = 11(45.833333333333%)<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3 Using dynamic functions as callback functions</strong></p>    <div class="example-contents"><p>     Perhaps the most common use for dynamic functions     is to pass them as callbacks, for example when using     <span class="function">{@link array_walk()}</span> or <span class="function">{@link usort()}</span>.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$av </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"the "</span><span style="color: #007700">, </span><span style="color: #DD0000">"a "</span><span style="color: #007700">, </span><span style="color: #DD0000">"that "</span><span style="color: #007700">, </span><span style="color: #DD0000">"this "</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_walk</span><span style="color: #007700">(</span><span style="color: #9876AA">$av</span><span style="color: #007700">, </span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'&amp;$v,$k'</span><span style="color: #007700">, </span><span style="color: #DD0000">'$v = $v . "mango";'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$av</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     Converted to an <a href="https://www.php.net/manual/zh/functions.anonymous.php" class="link">anonymous function</a>:    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$av </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"the "</span><span style="color: #007700">, </span><span style="color: #DD0000">"a "</span><span style="color: #007700">, </span><span style="color: #DD0000">"that "</span><span style="color: #007700">, </span><span style="color: #DD0000">"this "</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_walk</span><span style="color: #007700">(</span><span style="color: #9876AA">$av</span><span style="color: #007700">, function(&amp;</span><span style="color: #9876AA">$v</span><span style="color: #007700">,</span><span style="color: #9876AA">$k</span><span style="color: #007700">) { </span><span style="color: #9876AA">$v </span><span style="color: #007700">= </span><span style="color: #9876AA">$v </span><span style="color: #007700">. </span><span style="color: #DD0000">"mango"</span><span style="color: #007700">; });<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$av</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>  [0] =&gt; the mango<br>  [1] =&gt; a mango<br>  [2] =&gt; that mango<br>  [3] =&gt; this mango<br>)<br></span></div>    </div>    <div class="example-contents"><p>     Sorting strings from longest to shortest with <span class="function"><strong style="color:#CC7832">create_function()</strong></span>:    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$sv </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"small"</span><span style="color: #007700">, </span><span style="color: #DD0000">"a big string"</span><span style="color: #007700">, </span><span style="color: #DD0000">"larger"</span><span style="color: #007700">, </span><span style="color: #DD0000">"it is a string thing"</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"Original:\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$sv</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"Sorted:\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">usort</span><span style="color: #007700">(</span><span style="color: #9876AA">$sv</span><span style="color: #007700">, </span><span style="color: #9876AA">create_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'$a,$b'</span><span style="color: #007700">,</span><span style="color: #DD0000">'return strlen($b) - strlen($a);'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$sv</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     Converted to an <a href="https://www.php.net/manual/zh/functions.anonymous.php" class="link">anonymous function</a>:    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$sv </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"small"</span><span style="color: #007700">, </span><span style="color: #DD0000">"a big string"</span><span style="color: #007700">, </span><span style="color: #DD0000">"larger"</span><span style="color: #007700">, </span><span style="color: #DD0000">"it is a string thing"</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"Original:\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$sv</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"Sorted:\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">usort</span><span style="color: #007700">(</span><span style="color: #9876AA">$sv</span><span style="color: #007700">, function(</span><span style="color: #9876AA">$a</span><span style="color: #007700">,</span><span style="color: #9876AA">$b</span><span style="color: #007700">) { return </span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">) - </span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">); });<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$sv</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Original:<br>Array<br>(<br>  [0] =&gt; small<br>  [1] =&gt; a big string<br>  [2] =&gt; larger<br>  [3] =&gt; it is a string thing<br>)<br>Sorted:<br>Array<br>(<br>  [0] =&gt; it is a string thing<br>  [1] =&gt; a big string<br>  [2] =&gt; larger<br>  [3] =&gt; small<br>)<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.create-function-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/functions.anonymous.php" class="link">匿名函数</a></li>   </ul>  </span> </div></div>
 * @return string|false a unique function name as a string, or false on error.*/
function create_function(string $args, string $code): false|string {}

/**
*<div id="function.get-resource-type" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_resource_type</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.2, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">get_resource_type</span> &mdash; <span class="dc-title">   返回资源类型  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-resource-type-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_resource_type</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$resource</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   此函数获取指定资源的类型。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-resource-type-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">resource</span></dt>     <dd>      <p class="para">       要求值的资源句柄。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-resource-type-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果指定 <span class="parameter" style="color:#3A95FF">resource</span>    是资源，则此函数将返回表示其类型的字符串。如果此函数未识别类型，则返回值是字符串   <span>Unknown</span>。  </p>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">resource</span> 不是 <span class="type" style="color:#EAB766">resource</span>，则此函数将返回   <strong><span>null</span></strong> 并生成错误。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-resource-type-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">get_resource_type()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fp </span><span style="color: #007700">= </span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">"foo"</span><span style="color: #007700">, </span><span style="color: #DD0000">"w"</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">get_resource_type</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 从 PHP 8.0.0 开始，以下内容不再起作用。curl_init 函数现在返回 CurlHandle 对象。<br /></span><span style="color: #9876AA">$c </span><span style="color: #007700">= </span><span style="color: #9876AA">curl_init</span><span style="color: #007700">();<br />echo </span><span style="color: #9876AA">get_resource_type</span><span style="color: #007700">(</span><span style="color: #9876AA">$c</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例在 PHP 7 中的输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>stream<br>curl<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-resource-type-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link get_resource_id()} - 返回给定资源的整数标识符</span></li>   </ul>  </span> </div></div>
 * @return string If the given <i>handle</i> is a resource, this function*/
function get_resource_type($resource): string {}

/**
*<div id="function.get-loaded-extensions" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_loaded_extensions</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">get_loaded_extensions</span> &mdash; <span class="dc-title">返回所有编译并加载模块名的 array</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-loaded-extensions-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_loaded_extensions</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$zend_extensions</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   该函数返回了 PHP 解析器里所有编译并加载的模块名。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-loaded-extensions-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">zend_extensions</span></dt>     <dd>      <p class="para">       只返回 Zend 扩展，并非类似 mysqli 的普通扩展。默认是 <strong><span>false</span></strong> (返回普通扩展)。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-loaded-extensions-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回所有模块名的一个索引数组(array)。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-loaded-extensions-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1682">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">get_loaded_extensions()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">get_loaded_extensions</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; Core<br>    [1] =&gt; date<br>    [2] =&gt; libxml<br>    [3] =&gt; pcre<br>    [4] =&gt; sqlite3<br>    [5] =&gt; zlib<br>    [6] =&gt; ctype<br>    [7] =&gt; dom<br>    [8] =&gt; fileinfo<br>    [9] =&gt; filter<br>    [10] =&gt; hash<br>    [11] =&gt; json<br>    [12] =&gt; mbstring<br>    [13] =&gt; SPL<br>    [14] =&gt; PDO<br>    [15] =&gt; session<br>    [16] =&gt; posix<br>    [17] =&gt; Reflection<br>    [18] =&gt; standard<br>    [19] =&gt; SimpleXML<br>    [20] =&gt; pdo_sqlite<br>    [21] =&gt; Phar<br>    [22] =&gt; tokenizer<br>    [23] =&gt; xml<br>    [24] =&gt; xmlreader<br>    [25] =&gt; xmlwriter<br>    [26] =&gt; gmp<br>    [27] =&gt; iconv<br>    [28] =&gt; intl<br>    [29] =&gt; bcmath<br>    [30] =&gt; sodium<br>    [31] =&gt; Zend OPcache<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-loaded-extensions-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link get_extension_funcs()} - 返回模块函数名称的数组</span></li>    <li class="member"><span class="function">{@link extension_loaded()} - 检查一个扩展是否已经加载</span></li>    <li class="member"><span class="function">{@link dl()} - 运行时载入一个 PHP 扩展</span></li>    <li class="member"><span class="function">{@link phpinfo()} - 输出关于 PHP 配置的信息</span></li>   </ul>  </span> </div></div>
 * @return string[] an indexed array of all the modules names.*/
function get_loaded_extensions(bool $zend_extensions = false): array {}

/**
*<div id="function.extension-loaded" class="refentry"> <div class="refnamediv">  <h1 class="refname">extension_loaded</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">extension_loaded</span> &mdash; <span class="dc-title">检查一个扩展是否已经加载</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.extension-loaded-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>extension_loaded</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$extension</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查一个扩展是否已经加载。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.extension-loaded-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">extension</span></dt>     <dd>      <p class="para">       扩展名称，大小写不敏感。      </p>      <p class="para">       你可以用 <span class="function">{@link phpinfo()}</span> 来查看一系列扩展名称，而在 <span>CGI</span>       或 <span>CLI</span> 的 PHP 版本里你可以使用 <strong class="option unknown">-m</strong> 参数来列出所有有效的扩展：       <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>$ php -m<br>[PHP Modules]<br>xml<br>tokenizer<br>standard<br>sockets<br>session<br>posix<br>pcre<br>overload<br>mysql<br>mbstring<br>ctype<br><br>[Zend Modules]<br></span></div>       </div>      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.extension-loaded-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">extension</span> 指定的扩展已加载，返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.extension-loaded-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1658">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">extension_loaded()</strong></span> 示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if (!</span><span style="color: #9876AA">extension_loaded</span><span style="color: #007700">(</span><span style="color: #DD0000">'gd'</span><span style="color: #007700">)) {<br />    if (!</span><span style="color: #9876AA">dl</span><span style="color: #007700">(</span><span style="color: #DD0000">'gd.so'</span><span style="color: #007700">)) {<br />        exit;<br />    }<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.extension-loaded-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link get_loaded_extensions()} - 返回所有编译并加载模块名的 array</span></li>    <li class="member"><span class="function">{@link get_extension_funcs()} - 返回模块函数名称的数组</span></li>    <li class="member"><span class="function">{@link phpinfo()} - 输出关于 PHP 配置的信息</span></li>    <li class="member"><span class="function">{@link dl()} - 运行时载入一个 PHP 扩展</span></li>    <li class="member"><span class="function">{@link function_exists()} - 如果给定的函数已经被定义就返回 true</span></li>   </ul>  </span> </div></div>
 * @return bool true if the extension identified by <i>name</i>*/
function extension_loaded(string $extension): bool {}

/**
*<div id="function.get-extension-funcs" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_extension_funcs</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">get_extension_funcs</span> &mdash; <span class="dc-title">返回模块函数名称的数组</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-extension-funcs-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_extension_funcs</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$extension</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   该函数根据 <span class="parameter" style="color:#3A95FF">extension</span> 返回模块内定义的所有函数的名称。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-extension-funcs-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">extension</span></dt>     <dd>      <p class="para">       模块名称。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        这个参数必须是<em>小写（lowercase）</em>的。       </p>      </p></blockquote>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-extension-funcs-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回包含所有函数名的数组，如果 <span class="parameter" style="color:#3A95FF">extension</span> 不是一个有效的扩展则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-extension-funcs-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1673">    <p><strong>示例 #1 打印 XML 函数</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">get_extension_funcs</span><span style="color: #007700">(</span><span style="color: #DD0000">"xml"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; xml_parser_create<br>    [1] =&gt; xml_parser_create_ns<br>    [2] =&gt; xml_set_object<br>    [3] =&gt; xml_set_element_handler<br>    [4] =&gt; xml_set_character_data_handler<br>    [5] =&gt; xml_set_processing_instruction_handler<br>    [6] =&gt; xml_set_default_handler<br>    [7] =&gt; xml_set_unparsed_entity_decl_handler<br>    [8] =&gt; xml_set_notation_decl_handler<br>    [9] =&gt; xml_set_external_entity_ref_handler<br>    [10] =&gt; xml_set_start_namespace_decl_handler<br>    [11] =&gt; xml_set_end_namespace_decl_handler<br>    [12] =&gt; xml_parse<br>    [13] =&gt; xml_parse_into_struct<br>    [14] =&gt; xml_get_error_code<br>    [15] =&gt; xml_error_string<br>    [16] =&gt; xml_get_current_line_number<br>    [17] =&gt; xml_get_current_column_number<br>    [18] =&gt; xml_get_current_byte_index<br>    [19] =&gt; xml_parser_free<br>    [20] =&gt; xml_parser_set_option<br>    [21] =&gt; xml_parser_get_option<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-extension-funcs-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link get_loaded_extensions()} - 返回所有编译并加载模块名的 array</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionExtension::getFunctions()} - 获取扩展中的函数</span></li>   </ul>  </span> </div></div>
 * @return string[]|false an array with all the functions, or false if*/
function get_extension_funcs(string $extension): array|false {}

/**
*<div id="function.get-defined-constants" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_defined_constants</h1>  <p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">get_defined_constants</span> &mdash; <span class="dc-title">返回所有常量的关联数组，键是常量名，值是常量值</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-defined-constants-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_defined_constants</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$categorize</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   返回当前所有已定义的常量名和值。   这包含 <span class="function">{@link define()}</span> 函数所创建的，也包含了所有扩展所创建的。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-defined-constants-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">categorize</span></dt>     <dd>      <p class="para">       让此函数返回一个多维数组，分类为第一维的键名，常量和它们的值位于第二维。       <div class="informalexample">        <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />define</span><span style="color: #007700">(</span><span style="color: #DD0000">"MY_CONSTANT"</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">get_defined_constants</span><span style="color: #007700">(</span><span style="color: #9876AA">true</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>        </div>        <p class="para">以上示例的输出类似于：</p>        <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [Core] =&gt; Array<br>        (<br>            [E_ERROR] =&gt; 1<br>            [E_WARNING] =&gt; 2<br>            [E_PARSE] =&gt; 4<br>            [E_NOTICE] =&gt; 8<br>            [E_CORE_ERROR] =&gt; 16<br>            [E_CORE_WARNING] =&gt; 32<br>            [E_COMPILE_ERROR] =&gt; 64<br>            [E_COMPILE_WARNING] =&gt; 128<br>            [E_USER_ERROR] =&gt; 256<br>            [E_USER_WARNING] =&gt; 512<br>            [E_USER_NOTICE] =&gt; 1024<br>            [E_ALL] =&gt; 2047<br>            [TRUE] =&gt; 1<br>        )<br><br>    [pcre] =&gt; Array<br>        (<br>            [PREG_PATTERN_ORDER] =&gt; 1<br>            [PREG_SET_ORDER] =&gt; 2<br>            [PREG_OFFSET_CAPTURE] =&gt; 256<br>            [PREG_SPLIT_NO_EMPTY] =&gt; 1<br>            [PREG_SPLIT_DELIM_CAPTURE] =&gt; 2<br>            [PREG_SPLIT_OFFSET_CAPTURE] =&gt; 4<br>            [PREG_GREP_INVERT] =&gt; 1<br>        )<br><br>    [user] =&gt; Array<br>        (<br>            [MY_CONSTANT] =&gt; 1<br>        )<br><br>)<br></span></div>        </div>       </div>      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-defined-constants-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    返回的数组为 常量名 =&gt; 常量值，也可以按注册变量的扩展名称来分组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-defined-constants-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1670">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">get_defined_constants()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">get_defined_constants</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [E_ERROR] =&gt; 1<br>    [E_WARNING] =&gt; 2<br>    [E_PARSE] =&gt; 4<br>    [E_NOTICE] =&gt; 8<br>    [E_CORE_ERROR] =&gt; 16<br>    [E_CORE_WARNING] =&gt; 32<br>    [E_COMPILE_ERROR] =&gt; 64<br>    [E_COMPILE_WARNING] =&gt; 128<br>    [E_USER_ERROR] =&gt; 256<br>    [E_USER_WARNING] =&gt; 512<br>    [E_USER_NOTICE] =&gt; 1024<br>    [E_ALL] =&gt; 2047<br>    [TRUE] =&gt; 1<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-defined-constants-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link defined()} - 检查某个名称的常量是否存在</span></li>    <li class="member"><span class="function">{@link constant()} - 返回一个常量的值</span></li>    <li class="member"><span class="function">{@link get_loaded_extensions()} - 返回所有编译并加载模块名的 array</span></li>    <li class="member"><span class="function">{@link get_defined_functions()} - 返回所有已定义函数的数组</span></li>    <li class="member"><span class="function">{@link get_defined_vars()} - 返回由所有已定义变量所组成的数组</span></li>   </ul>  </span> </div></div>
 * @return array*/
function get_defined_constants(bool $categorize = false): array {}

/**
*<div id="function.debug-backtrace" class="refentry"> <div class="refnamediv">  <h1 class="refname">debug_backtrace</h1>  <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">debug_backtrace</span> &mdash; <span class="dc-title">产生一条回溯跟踪(backtrace)</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.debug-backtrace-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>debug_backtrace</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$options</span><span class="initializer"> = <strong><span>DEBUG_BACKTRACE_PROVIDE_OBJECT</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$limit</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">debug_backtrace()</strong></span> 产生一条 PHP 的回溯跟踪(backtrace)。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.debug-backtrace-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">options</span></dt>     <dd>      <p class="para">       这个参数是以下选项的位掩码：       <table class="doctable table">        <caption><strong><span class="function"><strong style="color:#CC7832">debug_backtrace()</strong></span> 选项</strong></caption>                 <tbody class="tbody">          <tr>           <td>DEBUG_BACKTRACE_PROVIDE_OBJECT</td>           <td>            是否填充 &quot;object&quot; 的索引。           </td>          </tr>          <tr>           <td>DEBUG_BACKTRACE_IGNORE_ARGS</td>           <td>            是否忽略 &quot;args&quot; 的索引，包括所有的 function/method 的参数，能够节省内存开销。           </td>          </tr>         </tbody>               </table>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:         <p class="para">         有四种可能的组合：         <table class="doctable table">          <caption><strong><span class="function"><strong style="color:#CC7832">debug_backtrace()</strong></span> 选项</strong></caption>                     <tbody class="tbody">            <tr>             <td><span>debug_backtrace()</span></td>             <td rowspan="3" style="vertical-align: middle;">              两个索引都有             </td>            </tr>            <tr>             <td><span>debug_backtrace(DEBUG_BACKTRACE_PROVIDE_OBJECT)</span></td>            </tr>            <tr>             <td><span>debug_backtrace(1)</span></td>            </tr>            <tr>             <td><span>debug_backtrace(0)</span></td>             <td style="vertical-align: middle;">              忽略索引 <span>&quot;object&quot;</span> 和填充索引 <span>&quot;args&quot;</span>。             </td>            </tr>            <tr>             <td><span>debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)</span></td>             <td rowspan="2" style="vertical-align: middle;">              忽略索引 <span>&quot;object&quot;</span> <em>和</em> 索引 <span>&quot;args&quot;</span>。             </td>            </tr>            <tr>             <td><span>debug_backtrace(2)</span></td>            </tr>            <tr>             <td><span>debug_backtrace(DEBUG_BACKTRACE_PROVIDE_OBJECT|DEBUG_BACKTRACE_IGNORE_ARGS)</span></td>             <td rowspan="2" style="vertical-align: middle;">              填充索引 <span>&quot;object&quot;</span> <em>和</em>忽略索引 <span>&quot;args&quot;</span>。             </td>            </tr>            <tr>             <td><span>debug_backtrace(3)</span></td>            </tr>           </tbody>                   </table>        </p>       </p></blockquote>      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">limit</span></dt>     <dd>      <p class="para">       这个参数能够用于限制返回堆栈帧的数量。默认为（<span class="parameter" style="color:#3A95FF">limit</span>=<span>0</span>），返回所有的堆栈帧。      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.debug-backtrace-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个包含众多关联数组的 <span class="type" style="color:#EAB766">array</span>。   以下为有可能返回的元素：  </p>  <p class="para">   <table class="doctable table">    <caption><strong>有可能从 <span class="function"><strong style="color:#CC7832">debug_backtrace()</strong></span> 返回的元素</strong></caption>         <thead>      <tr>       <th>名字</th>       <th>类型</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>function</td>       <td><span class="type" style="color:#EAB766">string</span></td>       <td>        当前的函数名，参见：<a href="https://www.php.net/manual/zh/language.constants.predefined.php" class="link">__FUNCTION__</a>。       </td>      </tr>      <tr>       <td>line</td>       <td><span class="type" style="color:#EAB766">int</span></td>       <td>        当前的行号。参见：<a href="https://www.php.net/manual/zh/language.constants.predefined.php" class="link">__LINE__</a>。       </td>      </tr>      <tr>       <td>file</td>       <td><span class="type" style="color:#EAB766">string</span></td>       <td>        当前的文件名。参见：<a href="https://www.php.net/manual/zh/language.constants.predefined.php" class="link">__FILE__</a>。       </td>      </tr>      <tr>       <td>class</td>       <td><span class="type" style="color:#EAB766">string</span></td>       <td>        当前 <a href="https://www.php.net/manual/zh/language.oop5.php" class="link">class</a>        的名称。参见<a href="https://www.php.net/manual/zh/language.constants.predefined.php" class="link">__CLASS__</a>       </td>      </tr>      <tr>       <td>object</td>       <td><span class="type" style="color:#EAB766">object</span></td>       <td>        当前的 <a href="https://www.php.net/manual/zh/language.oop5.php" class="link">object</a>。       </td>      </tr>      <tr>       <td>type</td>       <td><span class="type" style="color:#EAB766">string</span></td>       <td>        当前调用的类型。如果是一个方法，会返回 &quot;-&gt;&quot;。如果是一个静态方法，会返回 &quot;::&quot;。如果是一个函数调用，则返回空。       </td>      </tr>      <tr>       <td>args</td>       <td><span class="type" style="color:#EAB766">array</span></td>       <td>        如果在一个函数里，这会列出函数的参数。如果是在一个被包含的文件里，会列出包含的文件名。       </td>      </tr>     </tbody>       </table>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.debug-backtrace-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1541">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">debug_backtrace()</strong></span> 范例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// filename: /tmp/a.php<br /><br /></span><span style="color: #007700">function </span><span style="color: #9876AA">a_test</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">)<br />{<br />    echo </span><span style="color: #DD0000">"\nHi: </span><span style="color: #9876AA">$str</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">debug_backtrace</span><span style="color: #007700">());<br />}<br /><br /></span><span style="color: #9876AA">a_test</span><span style="color: #007700">(</span><span style="color: #DD0000">'friend'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;<br /></span><br /><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// filename: /tmp/b.php<br /></span><span style="color: #007700">include_once </span><span style="color: #DD0000">'/tmp/a.php'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     执行 <var class="filename">/tmp/b.php</var> 返回的结果类似于以下：    </p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Hi: friend<br>array(2) {<br>[0]=&gt;<br>array(4) {<br>    [&quot;file&quot;] =&gt; string(10) &quot;/tmp/a.php&quot;<br>    [&quot;line&quot;] =&gt; int(10)<br>    [&quot;function&quot;] =&gt; string(6) &quot;a_test&quot;<br>    [&quot;args&quot;]=&gt;<br>    array(1) {<br>      [0] =&gt; &amp;string(6) &quot;friend&quot;<br>    }<br>}<br>[1]=&gt;<br>array(4) {<br>    [&quot;file&quot;] =&gt; string(10) &quot;/tmp/b.php&quot;<br>    [&quot;line&quot;] =&gt; int(2)<br>    [&quot;args&quot;] =&gt;<br>    array(1) {<br>      [0] =&gt; string(10) &quot;/tmp/a.php&quot;<br>    }<br>    [&quot;function&quot;] =&gt; string(12) &quot;include_once&quot;<br>  }<br>}<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.debug-backtrace-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link trigger_error()} - 产生一个用户级别的 error/warning/notice 信息</span></li>    <li class="member"><span class="function">{@link debug_print_backtrace()} - 打印一条回溯。</span></li>   </ul>  </span> </div></div>
 * @return array <p>an array of associative arrays. The possible returned elements*/
function debug_backtrace(int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT, int $limit = 0): array {}

/**
*<div id="function.debug-print-backtrace" class="refentry">   <div class="refnamediv">    <h1 class="refname">debug_print_backtrace</h1>    <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">debug_print_backtrace</span> &mdash; <span class="dc-title">     打印一条回溯。    </span></p>   </div>     <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.debug-print-backtrace-description">    <h3 class="title">说明</h3>    <div class="methodsynopsis dc-description">     <span class="methodname" style="color:#CC7832"><strong>debug_print_backtrace</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$options</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$limit</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <p class="para rdfs-comment">     <span class="function"><strong style="color:#CC7832">debug_print_backtrace()</strong></span> 打印了一条 PHP 回溯。它打印了函数调用、被 included/required 的文件和     <span class="function">{@link eval()}</span> 的代码。    </p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.debug-print-backtrace-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">options</span></dt>     <dd>      <p class="para">       这个参数是以下选项的位掩码：       <table class="doctable table">        <caption><strong><span class="function"><strong style="color:#CC7832">debug_print_backtrace()</strong></span> 选项</strong></caption>                 <tbody class="tbody">          <tr>           <td>DEBUG_BACKTRACE_IGNORE_ARGS</td>           <td>            是否忽略 &quot;args&quot; 的索引，包括所有的 function/method 的参数，能够节省内存开销。           </td>          </tr>         </tbody>               </table>      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">limit</span></dt>     <dd>      <p class="para">       这个参数能够用于限制返回堆栈帧的数量。       默认为 (<span class="parameter" style="color:#3A95FF">limit</span>=<span>0</span>) ，返回所有的堆栈帧。      </p>     </dd>       </dl>  </span> </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.debug-print-backtrace-returnvalues">    <h3 class="title">返回值</h3>    <p class="para">     没有返回值。    </p>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.debug-print-backtrace-examples">    <h3 class="title">示例</h3>    <span>     <div class="example" id="example-1544">      <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">debug_print_backtrace()</strong></span> 范例</strong></p>      <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// include.php file<br /><br /></span><span style="color: #007700">function </span><span style="color: #9876AA">a</span><span style="color: #007700">() {<br />    </span><span style="color: #9876AA">b</span><span style="color: #007700">();<br />}<br /><br />function </span><span style="color: #9876AA">b</span><span style="color: #007700">() {<br />    </span><span style="color: #9876AA">c</span><span style="color: #007700">();<br />}<br /><br />function </span><span style="color: #9876AA">c</span><span style="color: #007700">(){<br />    </span><span style="color: #9876AA">debug_print_backtrace</span><span style="color: #007700">();<br />}<br /><br /></span><span style="color: #9876AA">a</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>      </div>      <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 文件 test.php<br />// 这是你应该运行的文件<br /><br /></span><span style="color: #007700">include </span><span style="color: #DD0000">'include.php'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>     </div>     <div class="example-contents"><p>以上示例的输出类似于：</p></div>     <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>#0  c() called at [/tmp/include.php:10]<br>#1  b() called at [/tmp/include.php:6]<br>#2  a() called at [/tmp/include.php:17]<br>#3  include(/tmp/include.php) called at [/tmp/test.php:3]<br></span></div>     </div>    </div>   </span>  </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.debug-print-backtrace-seealso">   <h3 class="title">参见</h3>   <span>    <ul class="simplelist">     <li class="member"><span class="function">{@link debug_backtrace()} - 产生一条回溯跟踪(backtrace)</span></li>    </ul>   </span>  </div> </div>
 * @return void*/
function debug_print_backtrace(
    int $options = 0,
    #[PhpStormStubsElementAvailable(from: '7.0')] int $limit = 0
): void {}

/**
*<div id="function.gc-collect-cycles" class="refentry"> <div class="refnamediv">  <h1 class="refname">gc_collect_cycles</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">gc_collect_cycles</span> &mdash; <span class="dc-title">强制收集所有现存的垃圾循环周期</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.gc-collect-cycles-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>gc_collect_cycles</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   强制收集所有现存的垃圾循环周期。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.gc-collect-cycles-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.gc-collect-cycles-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回收集的循环数量。  </p> </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.gc-collect-cycles-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/features.gc.php" class="link">垃圾回收机制</a></li>   </ul>  </span> </div></div>
 * @return int number of collected cycles.*/
function gc_collect_cycles(): int {}

/**
*<div id="function.gc-enabled" class="refentry"> <div class="refnamediv">  <h1 class="refname">gc_enabled</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">gc_enabled</span> &mdash; <span class="dc-title">返回循环引用计数器的状态</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.gc-enabled-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>gc_enabled</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   返回循环引用计数器的状态。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.gc-enabled-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.gc-enabled-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果垃圾收集器已启用则返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.gc-enabled-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1661">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">gc_enabled()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if(</span><span style="color: #9876AA">gc_enabled</span><span style="color: #007700">()) </span><span style="color: #9876AA">gc_collect_cycles</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.gc-enabled-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/features.gc.php" class="link">垃圾回收机制</a></li>   </ul>  </span> </div></div>
 * @return bool true if the garbage collector is enabled, false otherwise.*/
function gc_enabled(): bool {}

/**
*<div id="function.gc-enable" class="refentry"> <div class="refnamediv">  <h1 class="refname">gc_enable</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">gc_enable</span> &mdash; <span class="dc-title">激活循环引用收集器</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.gc-enable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>gc_enable</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   设置 <a href="https://www.php.net/manual/zh/info.configuration.php#ini.zend.enable-gc" class="link">zend.enable_gc</a> 为 <span>1</span>，   激活循环引用收集器。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.gc-enable-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.gc-enable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.gc-enable-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/features.gc.php" class="link">垃圾回收机制</a></li>   </ul>  </span> </div></div>
 * @return void*/
function gc_enable(): void {}

/**
*<div id="function.gc-disable" class="refentry"> <div class="refnamediv">  <h1 class="refname">gc_disable</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">gc_disable</span> &mdash; <span class="dc-title">停用循环引用收集器</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.gc-disable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>gc_disable</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   停用循环引用收集器，设置   <a href="https://www.php.net/manual/zh/info.configuration.php#ini.zend.enable-gc" class="link">zend.enable_gc</a> 为 <span>0</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.gc-disable-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.gc-disable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.gc-disable-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/features.gc.php" class="link">垃圾回收机制</a></li>   </ul>  </span> </div></div>
 * @return void*/
function gc_disable(): void {}

/**
*<div id="function.gc-status" class="refentry"> <div class="refnamediv">  <h1 class="refname">gc_status</h1>  <p class="verinfo">(PHP 7 &gt;= 7.3.0, PHP 8)</p><p class="refpurpose"><span class="refname">gc_status</span> &mdash; <span class="dc-title">获取有关垃圾回收的信息</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.gc-status-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>gc_status</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取有关当前垃圾收集状态的信息。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.gc-status-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.gc-status-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回包含以下元素的关联数组：   <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      <span>&quot;runs&quot;</span>     </span>    </li>     <li class="listitem">     <span class="simpara">      <span>&quot;collected&quot;</span>     </span>    </li>    <li class="listitem">     <span class="simpara">      <span>&quot;threshold&quot;</span>     </span>    </li>    <li class="listitem">     <span class="simpara">      <span>&quot;roots&quot;</span>     </span>    </li>   </ul>   </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.gc-status-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1664">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">gc_status()</strong></span> 用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">// create object tree that needs gc collection<br /></span><span style="color: #9876AA">$a </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">b </span><span style="color: #007700">= [];<br />for (</span><span style="color: #9876AA">$i </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">; </span><span style="color: #9876AA">$i </span><span style="color: #007700">&lt; </span><span style="color: #9876AA">100000</span><span style="color: #007700">; </span><span style="color: #9876AA">$i</span><span style="color: #007700">++) {<br />    </span><span style="color: #9876AA">$b </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">();<br />    </span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">a </span><span style="color: #007700">= </span><span style="color: #9876AA">$a</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">b</span><span style="color: #007700">[] = </span><span style="color: #9876AA">$b</span><span style="color: #007700">;<br />}<br />unset(</span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br />unset(</span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">gc_collect_cycles</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">gc_status</span><span style="color: #007700">());</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(4) {<br>  [&quot;runs&quot;]=&gt;<br>  int(5)<br>  [&quot;collected&quot;]=&gt;<br>  int(100002)<br>  [&quot;threshold&quot;]=&gt;<br>  int(50001)<br>  [&quot;roots&quot;]=&gt;<br>  int(0)<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.gc-status-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/features.gc.php" class="link">垃圾回收</a></li>   </ul>  </span> </div></div>
 * @return int[] associative array with the following elements:*/
function gc_status(): array {}

/**
*<div id="function.gc-mem-caches" class="refentry"> <div class="refnamediv">  <h1 class="refname">gc_mem_caches</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">gc_mem_caches</span> &mdash; <span class="dc-title">   Reclaims memory used by the Zend Engine memory manager </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.gc-mem-caches-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>gc_mem_caches</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Reclaims memory used by the Zend Engine memory manager.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.gc-mem-caches-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.gc-mem-caches-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the number of bytes freed.  </p> </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.gc-mem-caches-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/features.gc.php" class="link">Garbage Collection</a></li>   </ul>  </span> </div></div>
 * @return int Returns the number of bytes freed.*/
function gc_mem_caches(): int {}

/**
*<div id="function.get-resources" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_resources</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">get_resources</span> &mdash; <span class="dc-title">Returns active resources</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-resources-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_resources</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$type</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Returns an array of all currently active <span class="type" style="color:#EAB766">resource</span>s, optionally   filtered by resource type.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    This function is meant for debugging and testing purposes. It is not supposed    to be used in production environments, especially not to access or even manipulate    resources which are normally not accessible (e.g. the underlying stream resource    of <span class="classname"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="classname">SplFileObject</a></span> instances).   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-resources-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">type</span></dt>     <dd>      <p class="para">       If defined, this will cause <span class="function"><strong style="color:#CC7832">get_resources()</strong></span> to only       return resources of the given type.       <a href="https://www.php.net/manual/zh/resource.php" class="link">A list of resource types is available.</a>      </p>      <p class="para">       If the <span class="type" style="color:#EAB766">string</span> <span>Unknown</span> is provided as       the type, then only resources that are of an unknown type will be       returned.      </p>      <p class="para">       If omitted, all resources will be returned.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-resources-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an <span class="type" style="color:#EAB766">array</span> of currently active resources, indexed by   resource number.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.get-resources-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">type</span> is nullable now.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-resources-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1685">    <p><strong>示例 #1 Unfiltered <span class="function"><strong style="color:#CC7832">get_resources()</strong></span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fp </span><span style="color: #007700">= </span><span style="color: #9876AA">tmpfile</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">get_resources</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(1) {<br>  [1]=&gt;<br>  resource(1) of type (stream)<br>}<br></span></div>    </div>   </div>   <div class="example" id="example-1688">    <p><strong>示例 #2 Filtered <span class="function"><strong style="color:#CC7832">get_resources()</strong></span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fp </span><span style="color: #007700">= </span><span style="color: #9876AA">tmpfile</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">get_resources</span><span style="color: #007700">(</span><span style="color: #DD0000">'stream'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">get_resources</span><span style="color: #007700">(</span><span style="color: #DD0000">'curl'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(1) {<br>  [1]=&gt;<br>  resource(1) of type (stream)<br>}<br>array(0) {<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-resources-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link get_loaded_extensions()} - 返回所有编译并加载模块名的 array</span></li>    <li class="member"><span class="function">{@link get_defined_constants()} - 返回所有常量的关联数组，键是常量名，值是常量值</span></li>    <li class="member"><span class="function">{@link get_defined_functions()} - 返回所有已定义函数的数组</span></li>    <li class="member"><span class="function">{@link get_defined_vars()} - 返回由所有已定义变量所组成的数组</span></li>   </ul>  </span> </div></div>
 * @return resource[] Returns an array of currently active resources, indexed by resource number.*/
function get_resources(?string $type): array {}
