<?php

// Start of Core v.5.3.6-13ubuntu3.2
use JetBrains\PhpStorm\ExpectedValues;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\TentativeType;
use JetBrains\PhpStorm\Pure;

/**
*<div id="class.stdclass" class="reference"> <h1 class="title">stdClass 类</h1>  <div class="partintro"><p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p>  <div class="section" id="stdclass.intro">   <h2 class="title">简介</h2>   <p class="para">    具有动态属性的通用空类。   </p>   <p class="para">    此类的对象可以使用 <a href="https://www.php.net/manual/zh/language.oop5.basic.php#language.oop5.basic.new" class="link">new</a>    运算符实例化，也可以通过<a href="https://www.php.net/manual/zh/language.types.object.php#language.types.object.casting" class="link">类型转换为对象</a>创建。几个    PHP 函数也会创建此类的实例，比如    <span class="function">{@link json_decode()}</span>、<span class="function"><a href="https://www.php.net/manual/zh/mysqli-result.fetch-object.php" class="function">mysqli_fetch_object()</a></span>    或 <span class="methodname" style="color:#CC7832">{@link PDOStatement::fetchObject()}</span>。   </p>   <p class="para">    尽管没有实现 <a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.get" class="link">__get()</a>/<a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.set" class="link">__set()</a> 魔术方法，但此类允许动态属性且不需要    <span>#[\AllowDynamicProperties]</span> 属性。   </p>   <p class="para">    这不是 PHP 的基类，因为 PHP 没有通用基类的概念。然而，可以创建继承    <span class="classname"><strong class="classname">stdClass</strong></span> 的自定义类，从而继承动态属性的功能。   </p>  </div>  <div class="section" id="stdclass.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">stdClass</strong></strong>     {</div>   }</div>   <p class="para">    此类没有方法和默认属性。   </p>  </div>  <div class="section" id="stdclass.examples">   <h2 class="title">示例</h2>   <div class="example" id="example-1187">    <p><strong>示例 #1 通过类型转换为对象创建</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$obj </span><span style="color: #007700">= (object) array(</span><span style="color: #DD0000">'foo' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$obj</span><span style="color: #007700">);</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(stdClass)#1 (1) {<br>  [&quot;foo&quot;]=&gt;<br>  string(3) &quot;bar&quot;<br>}<br></span></div>    </div>   </div>   <div class="example" id="example-1190">    <p><strong>示例 #2 通过 <span class="function">{@link json_decode()}</span> 创建</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$json </span><span style="color: #007700">= </span><span style="color: #DD0000">'{"foo":"bar"}'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">json_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">$json</span><span style="color: #007700">));</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(stdClass)#1 (1) {<br>  [&quot;foo&quot;]=&gt;<br>  string(3) &quot;bar&quot;<br>}<br></span></div>    </div>   </div>   <div class="example" id="example-1193">    <p><strong>示例 #3 声明动态属性</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$obj </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$obj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">foo </span><span style="color: #007700">= </span><span style="color: #9876AA">42</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$obj</span><span style="color: #007700">-&gt;{</span><span style="color: #9876AA">1</span><span style="color: #007700">} = </span><span style="color: #9876AA">42</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$obj</span><span style="color: #007700">);</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(stdClass)#1 (2) {<br>  [&quot;foo&quot;]=&gt;<br>  int(42)<br>  [&quot;1&quot;]=&gt;<br>  int(42)<br>}<br></span></div>    </div>   </div>  </div> </div></div>
*/
class stdClass {}

/**
 * @link https://wiki.php.net/rfc/iterable
 */
interface iterable {}

/**
 * Interface to detect if a class is traversable using foreach.
 * Abstract base interface that cannot be implemented alone.
 * Instead it must be implemented by either {@see IteratorAggregate} or {@see Iterator}.
 *
 * @link https://php.net/manual/en/class.traversable.php
 * @template TKey
 * @template-covariant TValue
 *
 * @template-implements iterable<TKey, TValue>
 */
interface Traversable extends iterable {}

/**
 * Interface to create an external Iterator.
 * @link https://php.net/manual/en/class.iteratoraggregate.php
 * @template TKey
 * @template-covariant TValue
 * @template-implements Traversable<TKey, TValue>
 */
interface IteratorAggregate extends Traversable
{
    /**
     * Retrieve an external iterator
     * @link https://php.net/manual/en/iteratoraggregate.getiterator.php
     * @return Traversable<TKey, TValue>|TValue[] An instance of an object implementing <b>Iterator</b> or
     * <b>Traversable</b>
     * @throws Exception on failure.
     */
    #[TentativeType]
    public function getIterator(): Traversable;
}

/**
 * Interface for external iterators or objects that can be iterated
 * themselves internally.
 * @link https://php.net/manual/en/class.iterator.php
 * @template TKey
 * @template-covariant TValue
 * @template-implements Traversable<TKey, TValue>
 */
interface Iterator extends Traversable
{
    /**
     * Return the current element
     * @link https://php.net/manual/en/iterator.current.php
     * @return TValue Can return any type.
     */
    #[TentativeType]
    public function current(): mixed;

    /**
     * Move forward to next element
     * @link https://php.net/manual/en/iterator.next.php
     * @return void Any returned value is ignored.
     */
    #[TentativeType]
    public function next(): void;

    /**
     * Return the key of the current element
     * @link https://php.net/manual/en/iterator.key.php
     * @return TKey|null TKey on success, or null on failure.
     */
    #[TentativeType]
    public function key(): mixed;

    /**
     * Checks if current position is valid
     * @link https://php.net/manual/en/iterator.valid.php
     * @return bool The return value will be casted to boolean and then evaluated.
     * Returns true on success or false on failure.
     */
    #[TentativeType]
    public function valid(): bool;

    /**
     * Rewind the Iterator to the first element
     * @link https://php.net/manual/en/iterator.rewind.php
     * @return void Any returned value is ignored.
     */
    #[TentativeType]
    public function rewind(): void;
}

/**
 * Interface to provide accessing objects as arrays.
 * @link https://php.net/manual/en/class.arrayaccess.php
 * @template TKey
 * @template TValue
 */
interface ArrayAccess
{
    /**
     * Whether a offset exists
     * @link https://php.net/manual/en/arrayaccess.offsetexists.php
     * @param mixed $offset <p>
     * An offset to check for.
     * </p>
     * @return bool true on success or false on failure.
     * </p>
     * <p>
     * The return value will be casted to boolean if non-boolean was returned.
     */
    #[TentativeType]
    public function offsetExists(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $offset): bool;

    /**
     * Offset to retrieve
     * @link https://php.net/manual/en/arrayaccess.offsetget.php
     * @param mixed $offset <p>
     * The offset to retrieve.
     * </p>
     * @return TValue Can return all value types.
     */
    #[TentativeType]
    public function offsetGet(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $offset): mixed;

    /**
     * Offset to set
     * @link https://php.net/manual/en/arrayaccess.offsetset.php
     * @param TKey $offset <p>
     * The offset to assign the value to.
     * </p>
     * @param TValue $value <p>
     * The value to set.
     * </p>
     * @return void
     */
    #[TentativeType]
    public function offsetSet(
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $offset,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value
    ): void;

    /**
     * Offset to unset
     * @link https://php.net/manual/en/arrayaccess.offsetunset.php
     * @param TKey $offset <p>
     * The offset to unset.
     * </p>
     * @return void
     */
    #[TentativeType]
    public function offsetUnset(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $offset): void;
}

/**
 * Interface for customized serializing.<br>
 * As of PHP 8.1.0, a class which implements Serializable without also implementing `__serialize()` and `__unserialize()`
 * will generate a deprecation warning.
 * @link https://php.net/manual/en/class.serializable.php
 */
interface Serializable
{
    /**
     * String representation of object.
     * @link https://php.net/manual/en/serializable.serialize.php
     * @return string|null The string representation of the object or null
     * @throws Exception Returning other type than string or null
     */
    public function serialize();

    /**
     * Constructs the object.
     * @link https://php.net/manual/en/serializable.unserialize.php
     * @param string $data The string representation of the object.
     * @return void
     */
    public function unserialize(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $data);
}

/**
 * Throwable is the base interface for any object that can be thrown via a throw statement in PHP 7,
 * including Error and Exception.
 * @link https://php.net/manual/en/class.throwable.php
 * @since 7.0
 */
interface Throwable extends Stringable
{
    /**
     * Gets the message
     * @link https://php.net/manual/en/throwable.getmessage.php
     * @return string
     * @since 7.0
     */
    public function getMessage(): string;

    /**
     * Gets the exception code
     * @link https://php.net/manual/en/throwable.getcode.php
     * @return int <p>
     * Returns the exception code as integer in
     * {@see Exception} but possibly as other type in
     * {@see Exception} descendants (for example as
     * string in {@see PDOException}).
     * </p>
     * @since 7.0
     */
    public function getCode();

    /**
     * Gets the file in which the exception occurred
     * @link https://php.net/manual/en/throwable.getfile.php
     * @return string Returns the name of the file from which the object was thrown.
     * @since 7.0
     */
    public function getFile(): string;

    /**
     * Gets the line on which the object was instantiated
     * @link https://php.net/manual/en/throwable.getline.php
     * @return int Returns the line number where the thrown object was instantiated.
     * @since 7.0
     */
    public function getLine(): int;

    /**
     * Gets the stack trace
     * @link https://php.net/manual/en/throwable.gettrace.php
     * @return array <p>
     * Returns the stack trace as an array in the same format as
     * {@see debug_backtrace()}.
     * </p>
     * @since 7.0
     */
    public function getTrace(): array;

    /**
     * Gets the stack trace as a string
     * @link https://php.net/manual/en/throwable.gettraceasstring.php
     * @return string Returns the stack trace as a string.
     * @since 7.0
     */
    public function getTraceAsString(): string;

    /**
     * Returns the previous Throwable
     * @link https://php.net/manual/en/throwable.getprevious.php
     * @return null|Throwable Returns the previous {@see Throwable} if available, or <b>NULL</b> otherwise.
     * @since 7.0
     */
    #[LanguageLevelTypeAware(['8.0' => 'Throwable|null'], default: '')]
    public function getPrevious();

    /**
     * Gets a string representation of the thrown object
     * @link https://php.net/manual/en/throwable.tostring.php
     * @return string <p>Returns the string representation of the thrown object.</p>
     * @since 7.0
     */
    public function __toString();
}

/**
*<div id="class.exception" class="reference"> <h1 class="title">Exception</h1>  <div class="partintro"><p class="verinfo">(PHP 5, PHP 7, PHP 8)</p>   <div class="section" id="exception.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="ooclass"><span class="classname"><strong class="classname">Exception</strong></span></span>是所有用户级异常的基类。   </p>  </div>  <div class="section" id="exception.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">Exception</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.throwable.php" class="interfacename">Throwable</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div>    <div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div>    <div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div>    <div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div>    <div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/exception.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/exception.getmessage.php" class="methodname" style="color:#CC7832">getMessage</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/exception.getprevious.php" class="methodname" style="color:#CC7832">getPrevious</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/exception.getcode.php" class="methodname" style="color:#CC7832">getCode</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/exception.getfile.php" class="methodname" style="color:#CC7832">getFile</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/exception.getline.php" class="methodname" style="color:#CC7832">getLine</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/exception.gettrace.php" class="methodname" style="color:#CC7832">getTrace</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/exception.gettraceasstring.php" class="methodname" style="color:#CC7832">getTraceAsString</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/exception.tostring.php" class="methodname" style="color:#CC7832">__toString</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/exception.clone.php" class="methodname" style="color:#CC7832">__clone</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>  <div class="section" id="exception.props">   <h2 class="title">属性</h2>   <dl>         <dt id="exception.props.message"><var class="varname">message</var></dt>     <dd>      <p class="para">异常消息内容</p>     </dd>             <dt id="exception.props.code"><var class="varname">code</var></dt>     <dd>      <p class="para">异常代码</p>     </dd>             <dt id="exception.props.file"><var class="varname">file</var></dt>     <dd>      <p class="para">抛出异常的文件名</p>     </dd>             <dt id="exception.props.line"><var class="varname">line</var></dt>     <dd>      <p class="para">抛出异常在该文件中的行号</p>     </dd>             <dt id="exception.props.previous"><var class="varname">previous</var></dt>     <dd>      <p class="para">之前抛出的异常</p>     </dd>             <dt id="exception.props.string"><var class="varname">string</var></dt>     <dd>      <p class="para">字符串形式的堆栈跟踪</p>     </dd>             <dt id="exception.props.trace"><var class="varname">trace</var></dt>     <dd>      <p class="para">数组形式的堆栈跟踪</p>     </dd>       </dl>  </div>  </div>              <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Exception::__construct} — 异常构造函数</li><li>{@link Exception::getMessage} — 获取异常消息内容</li><li>{@link Exception::getPrevious} — 返回前一个 Throwable</li><li>{@link Exception::getCode} — 获取异常代码</li><li>{@link Exception::getFile} — 创建异常时的程序文件名称</li><li>{@link Exception::getLine} — 获取创建的异常所在文件中的行号</li><li>{@link Exception::getTrace} — 获取异常追踪信息</li><li>{@link Exception::getTraceAsString} — 获取字符串类型的异常追踪信息</li><li>{@link Exception::__toString} — 将异常对象转换为字符串</li><li>{@link Exception::__clone} — 异常克隆</li></ul></div>
*/
class Exception implements Throwable
{
    /** The error message */
    protected $message;

    /** The error code */
    protected $code;

    /** The filename where the error happened  */
    #[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
    protected $file;

    /** The line where the error happened */
    #[LanguageLevelTypeAware(['8.1' => 'int'], default: '')]
    protected $line;

    /**
     * Clone the exception
     * Tries to clone the Exception, which results in Fatal error.
     * @link https://php.net/manual/en/exception.clone.php
     * @return void
     */
    #[PhpStormStubsElementAvailable(from: "5.4", to: "8.0")]
    final private function __clone(): void {}

    /**
     * Clone the exception
     * Tries to clone the Exception, which results in Fatal error.
     * @link https://php.net/manual/en/exception.clone.php
     * @return void
     */
    #[PhpStormStubsElementAvailable("8.1")]
    private function __clone(): void {}

    /**
     * Construct the exception. Note: The message is NOT binary safe.
     * @link https://php.net/manual/en/exception.construct.php
     * @param string $message [optional] The Exception message to throw.
     * @param int $code [optional] The Exception code.
     * @param null|Throwable $previous [optional] The previous throwable used for the exception chaining.
     */
    #[Pure]
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $message = "",
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $code = 0,
        #[LanguageLevelTypeAware(['8.0' => 'Throwable|null'], default: 'Throwable')] $previous = null
    ) {}

/**
*<div id="exception.getmessage" class="refentry"> <div class="refnamediv">  <h1 class="refname">Exception::getMessage</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Exception::getMessage</span> &mdash; <span class="dc-title">获取异常消息内容</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-exception.getmessage-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Exception::getMessage</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   返回异常消息内容。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-exception.getmessage-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-exception.getmessage-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回字符串类型的异常消息内容。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-exception.getmessage-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1109">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Exception::getMessage()</strong></span>示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    throw new </span><span style="color: #9876AA">Exception</span><span style="color: #007700">(</span><span style="color: #DD0000">"Some error message"</span><span style="color: #007700">);<br />} catch(</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Some error message<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-exception.getmessage-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Throwable::getMessage()} - 获取信息</span></li>   </ul>  </span> </div></div>
     * @return string the Exception message as a string.*/
    final public function getMessage(): string {}

/**
*<div id="exception.getcode" class="refentry"> <div class="refnamediv">  <h1 class="refname">Exception::getCode</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Exception::getCode</span> &mdash; <span class="dc-title">获取异常代码</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-exception.getcode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Exception::getCode</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   返回异常代码。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-exception.getcode-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-exception.getcode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="classname"><a href="https://www.php.net/manual/zh/class.exception.php" class="classname">Exception</a></span> 返回整型（<span class="type" style="color:#EAB766">int</span>）的异常代码，但在其他类中可能返回其他类型(比如在 <span class="classname"><a href="https://www.php.net/manual/zh/class.pdoexception.php" class="classname">PDOException</a></span> 中返回 <span class="type" style="color:#EAB766">string</span>)。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-exception.getcode-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1115">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Exception::getCode()</strong></span>示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    throw new </span><span style="color: #9876AA">Exception</span><span style="color: #007700">(</span><span style="color: #DD0000">"Some error message"</span><span style="color: #007700">, </span><span style="color: #9876AA">30</span><span style="color: #007700">);<br />} catch(</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"The exception code is: " </span><span style="color: #007700">. </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getCode</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>The exception code is: 30<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-exception.getcode-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Throwable::getCode()} - 获取异常代码</span></li>   </ul>  </span> </div></div>
     * @return mixed|int the exception code as integer in*/
    final public function getCode() {}

/**
*<div id="exception.getfile" class="refentry"> <div class="refnamediv">  <h1 class="refname">Exception::getFile</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Exception::getFile</span> &mdash; <span class="dc-title">创建异常时的程序文件名称</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-exception.getfile-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Exception::getFile</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   获取创建异常的程序文件名称。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-exception.getfile-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-exception.getfile-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回发生异常的程序文件名称。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-exception.getfile-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1118">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Exception::getFile()</strong></span>示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    throw new </span><span style="color: #9876AA">Exception</span><span style="color: #007700">;<br />} catch(</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFile</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>/home/bjori/tmp/ex.php<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-exception.getfile-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Throwable::getFile()} - 获取创建对象的文件</span></li>   </ul>  </span> </div></div>
     * @return string the filename in which the exception was created.*/
    final public function getFile(): string {}

/**
*<div id="exception.getline" class="refentry"> <div class="refnamediv">  <h1 class="refname">Exception::getLine</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Exception::getLine</span> &mdash; <span class="dc-title">获取创建的异常所在文件中的行号</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-exception.getline-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Exception::getLine</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   返回发生异常的代码在文件中的行号。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-exception.getline-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-exception.getline-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回发生异常的代码在文件中的行号。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-exception.getline-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1121">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Exception::getLine()</strong></span>示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    throw new </span><span style="color: #9876AA">Exception</span><span style="color: #007700">(</span><span style="color: #DD0000">"Some error message"</span><span style="color: #007700">);<br />} catch(</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"The exception was thrown on line: " </span><span style="color: #007700">. </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getLine</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>The exception was thrown on line: 3<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-exception.getline-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Throwable::getLine()} - 获取初始化对象时候的行号</span></li>   </ul>  </span> </div></div>
     * @return int the line number where the exception was created.*/
    final public function getLine(): int {}

/**
*<div id="exception.gettrace" class="refentry"> <div class="refnamediv">  <h1 class="refname">Exception::getTrace</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Exception::getTrace</span> &mdash; <span class="dc-title">获取异常追踪信息</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-exception.gettrace-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Exception::getTrace</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   返回异常追踪信息。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-exception.gettrace-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-exception.gettrace-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回包含异常追踪信息的数组（<span class="type" style="color:#EAB766">array</span>）。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-exception.gettrace-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1124">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Exception::getTrace()</strong></span>示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">test</span><span style="color: #007700">() {<br /> throw new </span><span style="color: #9876AA">Exception</span><span style="color: #007700">;<br />}<br /><br />try {<br /> </span><span style="color: #9876AA">test</span><span style="color: #007700">();<br />} catch(</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br /> </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getTrace</span><span style="color: #007700">());<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(1) {<br>  [0]=&gt;<br>  array(4) {<br>    [&quot;file&quot;]=&gt;<br>    string(22) &quot;/home/bjori/tmp/ex.php&quot;<br>    [&quot;line&quot;]=&gt;<br>    int(7)<br>    [&quot;function&quot;]=&gt;<br>    string(4) &quot;test&quot;<br>    [&quot;args&quot;]=&gt;<br>    array(0) {<br>    }<br>  }<br>}<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-exception.gettrace-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Throwable::getTrace()} - 获取堆栈踪迹（Stack Trace）</span></li>   </ul>  </span> </div></div>
     * @return array the Exception stack trace as an array.*/
    final public function getTrace(): array {}

/**
*<div id="exception.getprevious" class="refentry"> <div class="refnamediv">  <h1 class="refname">Exception::getPrevious</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Exception::getPrevious</span> &mdash; <span class="dc-title">返回前一个 Throwable</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-exception.getprevious-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Exception::getPrevious</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div>  <p class="para rdfs-comment">   返回前一个 <span class="classname"><a href="https://www.php.net/manual/zh/class.throwable.php" class="classname">Throwable</a></span> （传递给 <span class="methodname" style="color:#CC7832">{@link Exception::__construct()}</span>方法的第三个参数）。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-exception.getprevious-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-exception.getprevious-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回异常链中的前一个异常 <span class="classname"><a href="https://www.php.net/manual/zh/class.throwable.php" class="classname">Throwable</a></span>，否则返回<strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-exception.getprevious-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1112">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>Exception::getPrevious()</strong></span>示例</strong></p>    <div class="example-contents"><p>     追踪异常，并循环打印。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">MyCustomException </span><span style="color: #007700">extends </span><span style="color: #9876AA">Exception </span><span style="color: #007700">{}<br /><br />function </span><span style="color: #9876AA">doStuff</span><span style="color: #007700">() {<br />    try {<br />        throw new </span><span style="color: #9876AA">InvalidArgumentException</span><span style="color: #007700">(</span><span style="color: #DD0000">"You are doing it wrong!"</span><span style="color: #007700">, </span><span style="color: #9876AA">112</span><span style="color: #007700">);<br />    } catch(</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />        throw new </span><span style="color: #9876AA">MyCustomException</span><span style="color: #007700">(</span><span style="color: #DD0000">"Something happend"</span><span style="color: #007700">, </span><span style="color: #9876AA">911</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">);<br />    }<br />}<br /><br /><br />try {<br />    </span><span style="color: #9876AA">doStuff</span><span style="color: #007700">();<br />} catch(</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    do {<br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%s:%d %s (%d) [%s]\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFile</span><span style="color: #007700">(), </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getLine</span><span style="color: #007700">(), </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">(), </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getCode</span><span style="color: #007700">(), </span><span style="color: #9876AA">get_class</span><span style="color: #007700">(</span><span style="color: #9876AA">$e</span><span style="color: #007700">));<br />    } while(</span><span style="color: #9876AA">$e </span><span style="color: #007700">= </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getPrevious</span><span style="color: #007700">());<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>/home/bjori/ex.php:8 Something happend (911) [MyCustomException]<br>/home/bjori/ex.php:6 You are doing it wrong! (112) [InvalidArgumentException]<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-exception.getprevious-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Throwable::getPrevious()} - 返回先前的 Throwable</span></li>   </ul>  </span> </div></div>
     * @return null|Throwable Returns the previous {@see Throwable} if available, or <b>NULL</b> otherwise.*/
    final public function getPrevious(): ?Throwable {}

/**
*<div id="exception.gettraceasstring" class="refentry"> <div class="refnamediv">  <h1 class="refname">Exception::getTraceAsString</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Exception::getTraceAsString</span> &mdash; <span class="dc-title">获取字符串类型的异常追踪信息</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-exception.gettraceasstring-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Exception::getTraceAsString</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   以字符串类型返回异常追踪信息。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-exception.gettraceasstring-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-exception.gettraceasstring-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   以字符串类型返回异常追踪信息。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-exception.gettraceasstring-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1127">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Exception::getTraceAsString()</strong></span>示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">test</span><span style="color: #007700">() {<br />    throw new </span><span style="color: #9876AA">Exception</span><span style="color: #007700">;<br />}<br /><br />try {<br />    </span><span style="color: #9876AA">test</span><span style="color: #007700">();<br />} catch(</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getTraceAsString</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>#0 /home/bjori/tmp/ex.php(7): test()<br>#1 {main}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-exception.gettraceasstring-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Throwable::getTraceAsString()} - 以 string 形式获取堆栈踪迹</span></li>   </ul>  </span> </div></div>
     * @return string the Exception stack trace as a string.*/
    final public function getTraceAsString(): string {}

    /**
     * String representation of the exception
     * @link https://php.net/manual/en/exception.tostring.php
     * @return string the string representation of the exception.
     */
    #[TentativeType]
    public function __toString(): string {}

    #[TentativeType]
    public function __wakeup(): void {}
}

/**
*<div id="class.error" class="reference"> <h1 class="title">Error</h1>  <div class="partintro"><p class="verinfo">(PHP 7, PHP 8)</p>  <div class="section" id="error.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="ooclass"><span class="classname"><strong class="classname">Error</strong></span></span> 是所有PHP内部错误类的基类。   </p>  </div>  <div class="section" id="error.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">Error</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.throwable.php" class="interfacename">Throwable</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div>    <div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div>    <div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.code">$<var class="varname">code</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div>    <div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.line">$<var class="varname">line</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div>    <div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/error.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/error.getmessage.php" class="methodname" style="color:#CC7832">getMessage</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/error.getprevious.php" class="methodname" style="color:#CC7832">getPrevious</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/error.getcode.php" class="methodname" style="color:#CC7832">getCode</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/error.getfile.php" class="methodname" style="color:#CC7832">getFile</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/error.getline.php" class="methodname" style="color:#CC7832">getLine</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/error.gettrace.php" class="methodname" style="color:#CC7832">getTrace</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/error.gettraceasstring.php" class="methodname" style="color:#CC7832">getTraceAsString</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/error.tostring.php" class="methodname" style="color:#CC7832">__toString</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/error.clone.php" class="methodname" style="color:#CC7832">__clone</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>      <div class="section" id="error.props">     <h2 class="title">属性</h2>     <dl>             <dt id="error.props.message"><var class="varname">message</var></dt>       <dd>        <p class="para">错误消息内容</p>       </dd>                   <dt id="error.props.code"><var class="varname">code</var></dt>       <dd>        <p class="para">错误代码</p>       </dd>                   <dt id="error.props.file"><var class="varname">file</var></dt>       <dd>        <p class="para">抛出错误的文件名</p>       </dd>                   <dt id="error.props.line"><var class="varname">line</var></dt>       <dd>        <p class="para">抛出错误的行数</p>        </dd>                   <dt id="error.props.previous"><var class="varname">previous</var></dt>       <dd>        <p class="para">之前抛出的异常</p>       </dd>                   <dt id="error.props.string"><var class="varname">string</var></dt>       <dd>        <p class="para">字符串形式的堆栈跟踪</p>       </dd>                   <dt id="error.props.trace"><var class="varname">trace</var></dt>       <dd>        <p class="para">数组形式的堆栈跟踪</p>       </dd>           </dl>    </div>   </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Error::__construct} — 初始化 error 对象</li><li>{@link Error::getMessage} — 获取错误信息</li><li>{@link Error::getPrevious} — 返回先前的 Throwable</li><li>{@link Error::getCode} — 获取错误代码</li><li>{@link Error::getFile} — 获取错误发生时的文件</li><li>{@link Error::getLine} — 获取错误发生时的行号</li><li>{@link Error::getTrace} — 获取调用栈（stack trace）</li><li>{@link Error::getTraceAsString} — 获取字符串形式的调用栈（stack trace）</li><li>{@link Error::__toString} — error 的字符串表达</li><li>{@link Error::__clone} — 克隆 error</li></ul></div>
*/
class Error implements Throwable
{
    /** The error message */
    protected $message;

    /** The error code */
    protected $code;

    /** The filename where the error happened  */
    #[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
    protected $file;

    /** The line where the error happened */
    #[LanguageLevelTypeAware(['8.1' => 'int'], default: '')]
    protected $line;

    /**
     * Construct the error object.
     * @link https://php.net/manual/en/error.construct.php
     * @param string $message [optional] The Error message to throw.
     * @param int $code [optional] The Error code.
     * @param null|Throwable $previous [optional] The previous throwable used for the exception chaining.
     */
    #[Pure]
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $message = "",
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $code = 0,
        #[LanguageLevelTypeAware(['8.0' => 'Throwable|null'], default: 'Throwable')] $previous = null
    ) {}

/**
*<div id="error.getmessage" class="refentry"> <div class="refnamediv">  <h1 class="refname">Error::getMessage</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Error::getMessage</span> &mdash; <span class="dc-title">获取错误信息</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-error.getmessage-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Error::getMessage</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   返回错误信息。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-error.getmessage-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-error.getmessage-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回字符串错误信息。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-error.getmessage-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1139">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Error::getMessage()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    throw new </span><span style="color: #9876AA">Error</span><span style="color: #007700">(</span><span style="color: #DD0000">"Some error message"</span><span style="color: #007700">);<br />} catch(</span><span style="color: #9876AA">Error $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Some error message<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-error.getmessage-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Throwable::getMessage()} - 获取信息</span></li>   </ul>  </span> </div></div>
     * @return string*/
    final public function getMessage(): string {}

/**
*<div id="error.getcode" class="refentry"> <div class="refnamediv">  <h1 class="refname">Error::getCode</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Error::getCode</span> &mdash; <span class="dc-title">获取错误代码</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-error.getcode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Error::getCode</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   返回错误代码。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-error.getcode-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-error.getcode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span class="type" style="color:#EAB766">int</span> 的错误代码  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-error.getcode-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1145">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Error::getCode()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    throw new </span><span style="color: #9876AA">Error</span><span style="color: #007700">(</span><span style="color: #DD0000">"Some error message"</span><span style="color: #007700">, </span><span style="color: #9876AA">30</span><span style="color: #007700">);<br />} catch(</span><span style="color: #9876AA">Error $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"The Error code is: " </span><span style="color: #007700">. </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getCode</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>The Error code is: 30<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-error.getcode-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Throwable::getCode()} - 获取异常代码</span></li>   </ul>  </span> </div></div>
     * @return int <p>*/
    final public function getCode() {}

/**
*<div id="error.getfile" class="refentry"> <div class="refnamediv">  <h1 class="refname">Error::getFile</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Error::getFile</span> &mdash; <span class="dc-title">获取错误发生时的文件</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-error.getfile-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Error::getFile</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   获取错误发生时的文件名称。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-error.getfile-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-error.getfile-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回错误发生时的文件名。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-error.getfile-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1148">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Error::getFile()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    throw new </span><span style="color: #9876AA">Error</span><span style="color: #007700">;<br />} catch(</span><span style="color: #9876AA">Error $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFile</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>/home/bjori/tmp/ex.php<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-error.getfile-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Throwable::getFile()} - 获取创建对象的文件</span></li>   </ul>  </span> </div></div>
     * @return string Returns the name of the file from which the object was thrown.*/
    final public function getFile(): string {}

/**
*<div id="error.getline" class="refentry"> <div class="refnamediv">  <h1 class="refname">Error::getLine</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Error::getLine</span> &mdash; <span class="dc-title">获取错误发生时的行号</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-error.getline-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Error::getLine</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   获取错误发生时的行号。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-error.getline-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-error.getline-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回错误发生时的行号。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-error.getline-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1151">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Error::getLine()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    throw new </span><span style="color: #9876AA">Error</span><span style="color: #007700">(</span><span style="color: #DD0000">"Some error message"</span><span style="color: #007700">);<br />} catch(</span><span style="color: #9876AA">Error $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"The error was created on line: " </span><span style="color: #007700">. </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getLine</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>The error was created on line: 3<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-error.getline-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Throwable::getLine()} - 获取初始化对象时候的行号</span></li>   </ul>  </span> </div></div>
     * @return int Returns the line number where the thrown object was instantiated.*/
    final public function getLine(): int {}

/**
*<div id="error.gettrace" class="refentry"> <div class="refnamediv">  <h1 class="refname">Error::getTrace</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Error::getTrace</span> &mdash; <span class="dc-title">获取调用栈（stack trace）</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-error.gettrace-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Error::getTrace</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   返回 stack trace。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-error.gettrace-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-error.gettrace-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span class="type" style="color:#EAB766">array</span> 的 stack trace。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-error.gettrace-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1154">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Error::getTrace()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">test</span><span style="color: #007700">() {<br /> throw new </span><span style="color: #9876AA">Error</span><span style="color: #007700">;<br />}<br /><br />try {<br /> </span><span style="color: #9876AA">test</span><span style="color: #007700">();<br />} catch(</span><span style="color: #9876AA">Error $e</span><span style="color: #007700">) {<br /> </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getTrace</span><span style="color: #007700">());<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(1) {<br>  [0]=&gt;<br>  array(4) {<br>    [&quot;file&quot;]=&gt;<br>    string(22) &quot;/home/bjori/tmp/ex.php&quot;<br>    [&quot;line&quot;]=&gt;<br>    int(7)<br>    [&quot;function&quot;]=&gt;<br>    string(4) &quot;test&quot;<br>    [&quot;args&quot;]=&gt;<br>    array(0) {<br>    }<br>  }<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-error.gettrace-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Throwable::getTrace()} - 获取堆栈踪迹（Stack Trace）</span></li>   </ul>  </span> </div></div>
     * @return array <p>*/
    final public function getTrace(): array {}

/**
*<div id="error.gettraceasstring" class="refentry"> <div class="refnamediv">  <h1 class="refname">Error::getTraceAsString</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Error::getTraceAsString</span> &mdash; <span class="dc-title">获取字符串形式的调用栈（stack trace）</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-error.gettraceasstring-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Error::getTraceAsString</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   以字符串形式返回 stack trace。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-error.gettraceasstring-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-error.gettraceasstring-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   以字符串形式返回 stack trace。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-error.gettraceasstring-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1157">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Error::getTraceAsString()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">test</span><span style="color: #007700">() {<br />    throw new </span><span style="color: #9876AA">Error</span><span style="color: #007700">;<br />}<br /><br />try {<br />    </span><span style="color: #9876AA">test</span><span style="color: #007700">();<br />} catch(</span><span style="color: #9876AA">Error $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getTraceAsString</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>#0 /home/bjori/tmp/ex.php(7): test()<br>#1 {main}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-error.gettraceasstring-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Throwable::getTraceAsString()} - 以 string 形式获取堆栈踪迹</span></li>   </ul>  </span> </div></div>
     * @return string Returns the stack trace as a string.*/
    final public function getTraceAsString(): string {}

/**
*<div id="error.getprevious" class="refentry"> <div class="refnamediv">  <h1 class="refname">Error::getPrevious</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Error::getPrevious</span> &mdash; <span class="dc-title">返回先前的 Throwable</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-error.getprevious-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Error::getPrevious</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div>  <p class="para rdfs-comment">   返回先前的 Throwable（<span class="methodname" style="color:#CC7832">{@link Error::__construct()}</span> 的第三个参数）。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-error.getprevious-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-error.getprevious-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果有的话，返回先前的 <span class="classname"><a href="https://www.php.net/manual/zh/class.throwable.php" class="classname">Throwable</a></span>，否则返回 <strong><span>null</span></strong> 。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-error.getprevious-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1142">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>Error::getPrevious()</strong></span> 例子</strong></p>    <div class="example-contents"><p>     循环输出错误栈。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">MyCustomError </span><span style="color: #007700">extends </span><span style="color: #9876AA">Error </span><span style="color: #007700">{}<br /><br />function </span><span style="color: #9876AA">doStuff</span><span style="color: #007700">() {<br />    try {<br />        throw new </span><span style="color: #9876AA">InvalidArgumentError</span><span style="color: #007700">(</span><span style="color: #DD0000">"You are doing it wrong!"</span><span style="color: #007700">, </span><span style="color: #9876AA">112</span><span style="color: #007700">);<br />    } catch(</span><span style="color: #9876AA">Error $e</span><span style="color: #007700">) {<br />        throw new </span><span style="color: #9876AA">MyCustomError</span><span style="color: #007700">(</span><span style="color: #DD0000">"Something happened"</span><span style="color: #007700">, </span><span style="color: #9876AA">911</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">);<br />    }<br />}<br /><br /><br />try {<br />    </span><span style="color: #9876AA">doStuff</span><span style="color: #007700">();<br />} catch(</span><span style="color: #9876AA">Error $e</span><span style="color: #007700">) {<br />    do {<br />        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%s:%d %s (%d) [%s]\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFile</span><span style="color: #007700">(), </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getLine</span><span style="color: #007700">(), </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">(), </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getCode</span><span style="color: #007700">(), </span><span style="color: #9876AA">get_class</span><span style="color: #007700">(</span><span style="color: #9876AA">$e</span><span style="color: #007700">));<br />    } while(</span><span style="color: #9876AA">$e </span><span style="color: #007700">= </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getPrevious</span><span style="color: #007700">());<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>/home/bjori/ex.php:8 Something happened (911) [MyCustomError]<br>/home/bjori/ex.php:6 You are doing it wrong! (112) [InvalidArgumentError]<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-error.getprevious-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Throwable::getPrevious()} - 返回先前的 Throwable</span></li>   </ul>  </span> </div></div>
     * @return null|Throwable Returns the previous {@see Throwable} if available, or <b>NULL</b> otherwise.*/
    final public function getPrevious(): ?Throwable {}

    /**
     * Gets a string representation of the thrown object
     * @link https://php.net/manual/en/throwable.tostring.php
     * @return string <p>Returns the string representation of the thrown object.</p>
     * @since 7.0
     */
    public function __toString(): string {}

    /**
     * Clone the error
     * Error can not be clone, so this method results in fatal error.
     * @return void
     * @link https://php.net/manual/en/error.clone.php
     */
    #[PhpStormStubsElementAvailable(from: "7.0", to: "8.0")]
    final private function __clone(): void {}

    /**
     * Clone the error
     * Error can not be clone, so this method results in fatal error.
     * @return void
     * @link https://php.net/manual/en/error.clone.php
     */
    #[PhpStormStubsElementAvailable('8.1')]
    private function __clone(): void {}

    #[TentativeType]
    public function __wakeup(): void {}
}

/**
*<div id="class.valueerror" class="reference"> <h1 class="title">ValueError</h1>  <div class="partintro"><p class="verinfo">(PHP 8)</p>  <div class="section" id="valueerror.intro">   <h2 class="title">简介</h2>   <p class="para">    当参数类型正确但是值不正确的时候会抛出 <span class="classname"><strong class="classname">ValueError</strong></span>。    例如，当函数期望是正整数时传递负整数，    或者当函数期望它不为空时传递空字符串/数组。  </p>  </div>  <div class="section" id="valueerror.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">ValueError</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Error::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div> </div></div>
*/
class ValueError extends Error {}

/**
*<div id="class.typeerror" class="reference"> <h1 class="title">TypeError</h1>  <div class="partintro"><p class="verinfo">(PHP 7, PHP 8)</p>  <div class="section" id="typeerror.intro">   <h2 class="title">简介</h2>   <p class="para">      会抛出<span class="classname"><strong class="classname">TypeError</strong></span> 的情况:        <ul class="simplelist">      <li class="member">      为类属性设置的值与该属性申明的类型不匹配。     </li>     <li class="member">      传递给函数的参数类型与函数预期声明的参数类型不匹配。     </li>     <li class="member">      函数返回的值与声明的函数返回类型不匹配     </li>    </ul>  </p>  </div>  <div class="section" id="typeerror.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">TypeError</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Error::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>  <div class="section" id="typeerror.changelog">   <h2 class="title">更新日志</h2>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.1.0</td>       <td>        当在严格模式下向内置 PHP 函数传递无效数量的参数时，不再抛出         <span class="classname"><strong class="classname">TypeError</strong></span>。        相反，会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.argumentcounterror.php" class="classname">ArgumentCountError</a></span>       </td>      </tr>     </tbody>       </table>  </div> </div></div>
*/
class TypeError extends Error {}

/**
*<div id="class.parseerror" class="reference"> <h1 class="title">ParseError</h1>   <div class="partintro"><p class="verinfo">(PHP 7, PHP 8)</p>   <div class="section" id="parseerror.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="ooclass"><span class="classname"><strong class="classname">ParseError</strong></span></span> 当解析 PHP 代码时发生错误时抛出，比如当    <span class="function">{@link eval()}</span>被调用出错时。   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <span class="simpara">     从 PHP 7.3.0 开始，<span class="classname"><strong class="classname">ParseError</strong></span> 继承自 <span class="classname"><a href="https://www.php.net/manual/zh/class.compileerror.php" class="classname">CompileError</a></span>。之前的版本，则继承自     <span class="classname"><a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a></span>。    </span>   </p></blockquote>   </div>   <div class="section" id="parseerror.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">ParseError</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.compileerror.php" class="classname">CompileError</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Error::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>    </div> </div></div>
*/
class ParseError extends CompileError {}

/**
*<div id="class.argumentcounterror" class="reference"> <h1 class="title">ArgumentCountError</h1>   <div class="partintro"><p class="verinfo">(PHP 7 &gt;= PHP 7.1.0, PHP 8)</p>   <div class="section" id="argumentcounterror.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="ooclass"><span class="classname"><strong class="classname">ArgumentCountError</strong></span></span> 当传递给用户定义的函数或方法的参数太少时被抛出。   </p>   <p class="para">    当传递到非可变内置函数的参数太多时，也会抛出此错误。   </p>  </div>   <div class="section" id="argumentcounterror.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">ArgumentCountError</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.typeerror.php" class="classname">TypeError</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Error::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>    </div> </div></div>
*/
class ArgumentCountError extends TypeError {}

/**
*<div id="class.arithmeticerror" class="reference"> <h1 class="title">ArithmeticError</h1>   <div class="partintro"><p class="verinfo">(PHP 7, PHP 8)</p>   <div class="section" id="arithmeticerror.intro">   <h2 class="title">简介</h2>   <p class="para">    当执行数学运算发生错误时抛出     <span class="ooclass"><span class="classname"><strong class="classname">ArithmeticError</strong></span></span> 。    这些错误包括尝试执行负数的位移，以及对任何可能会导致值超出 <span class="type" style="color:#EAB766">int</span>     的范围 <span class="function">{@link intdiv()}</span> 调用。   </p>  </div>   <div class="section" id="arithmeticerror.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">ArithmeticError</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Error::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>    </div> </div></div>
*/
class ArithmeticError extends Error {}

/**
*<div id="class.compileerror" class="reference"> <h1 class="title">CompileError</h1>  <div class="partintro"><p class="verinfo">(PHP 7 &gt; 7.3.0, PHP 8)</p>  <div class="section" id="compileerror.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="ooclass"><span class="classname"><strong class="classname">CompileError</strong></span></span> 是针对一些编译错误抛出的，之前是会发出致命错误。   </p>  </div>  <div class="section" id="compileerror.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">CompileError</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Error::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div> </div></div>
*/
class CompileError extends Error {}

/**
*<div id="class.divisionbyzeroerror" class="reference"> <h1 class="title">DivisionByZeroError</h1>   <div class="partintro"><p class="verinfo">(PHP 7, PHP 8)</p>   <div class="section" id="divisionbyzeroerror.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="ooclass"><span class="classname"><strong class="classname">DivisionByZeroError</strong></span></span> 当除数为零时被抛出。   </p>  </div>   <div class="section" id="divisionbyzeroerror.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">DivisionByZeroError</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.arithmeticerror.php" class="classname">ArithmeticError</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Error::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>    </div> </div></div>
*/
class DivisionByZeroError extends ArithmeticError {}

/**
*<div id="class.unhandledmatcherror" class="reference"> <h1 class="title">UnhandledMatchError</h1>  <div class="partintro"><p class="verinfo">(PHP 8)</p>  <div class="section" id="unhandledmatcherror.intro">   <h2 class="title">简介</h2>   <p class="para">    当传递给 <a href="https://www.php.net/manual/zh/control-structures.match.php" class="link">match</a> 表达式的主体未被 <a href="https://www.php.net/manual/zh/control-structures.match.php" class="link">match</a> 表达式的任何分支处理时，    将会抛出 <span class="ooclass"><span class="classname"><strong class="classname">UnhandledMatchError</strong></span></span>。  </p>  </div>  <div class="section" id="unhandledmatcherror.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">UnhandledMatchError</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Error::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div> </div></div>
*/
class UnhandledMatchError extends Error {}

/**
*<div id="class.errorexception" class="reference"> <h1 class="title">ErrorException</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>   <div class="section" id="errorexception.intro">   <h2 class="title">简介</h2>   <p class="para">    错误异常。   </p>  </div>   <div class="section" id="errorexception.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">ErrorException</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.exception.php" class="classname">Exception</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.errorexception.php#errorexception.props.severity">$<var class="varname">severity</var></a></var><span class="initializer"> = E_ERROR</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/errorexception.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$severity</span><span class="initializer"> = <strong><span>E_ERROR</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$filename</span><span class="initializer"> = <strong><span>null</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$line</span><span class="initializer"> = <strong><span>null</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span><br>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/errorexception.getseverity.php" class="methodname" style="color:#CC7832">getSeverity</a></span>(): <span class="type" style="color:#EAB766">int</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>   </div>   <div class="section" id="errorexception.props">   <h2 class="title">属性</h2>   <dl>         <dt id="errorexception.props.severity"><var class="varname">severity</var></dt>     <dd>      <p class="para">异常级别</p>     </dd>       </dl>  </div>  <div class="section" id="errorexception.examples">   <h2 class="title">示例</h2>   <p class="para">    <div class="example" id="example-1133">     <p><strong>示例 #1 使用 <span class="function">{@link set_error_handler()}</span> 函数将错误信息托管至 ErrorException。</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">exception_error_handler</span><span style="color: #007700">(</span><span style="color: #9876AA">int $errno</span><span style="color: #007700">, </span><span style="color: #9876AA">string $errstr</span><span style="color: #007700">, </span><span style="color: #9876AA">string $errfile </span><span style="color: #007700">= </span><span style="color: #9876AA">null</span><span style="color: #007700">, </span><span style="color: #9876AA">int $errline</span><span style="color: #007700">) {<br />    if (!(</span><span style="color: #9876AA">error_reporting</span><span style="color: #007700">() &amp; </span><span style="color: #9876AA">$errno</span><span style="color: #007700">)) {<br />        </span><span style="color: #FF8000">// 这个错误代码未包含在 error_reporting 中<br />        </span><span style="color: #007700">return;<br />    }<br />    throw new </span><span style="color: #9876AA">\ErrorException</span><span style="color: #007700">(</span><span style="color: #9876AA">$errstr</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">$errno</span><span style="color: #007700">, </span><span style="color: #9876AA">$errfile</span><span style="color: #007700">, </span><span style="color: #9876AA">$errline</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">set_error_handler</span><span style="color: #007700">(</span><span style="color: #9876AA">exception_error_handler</span><span style="color: #007700">(...));<br /></span><span style="color: #FF8000">// 在 PHP 8.1.0 引入 First-class 可调用语法之前，必须使用下面的调用来代替<br />// set_error_handler(__NAMESPACE__ . "\\exception_error_handler");<br /><br />// 触发异常 <br /></span><span style="color: #9876AA">strpos</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>     </div>     <div class="example-contents"><p>以上示例的输出类似于：</p></div>     <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Fatal error: Uncaught exception &#039;ErrorException&#039; with message &#039;strpos() expects at least 2 parameters, 0 given&#039; in /home/bjori/tmp/ex.php:12<br>Stack trace:<br>#0 [internal function]: exception_error_handler(2, &#039;strpos() expect...&#039;, &#039;/home/bjori/php...&#039;, 12, Array)<br>#1 /home/bjori/php/cleandocs/test.php(12): strpos()<br>#2 {main}<br>  thrown in /home/bjori/tmp/ex.php on line 12<br></span></div>     </div>    </div>   </p>  </div>  </div>     <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ErrorException::__construct} — 构造一个异常（Exception）</li><li>{@link ErrorException::getSeverity} — 获取异常的严重程度</li></ul></div>
*/
class ErrorException extends Exception
{
    #[LanguageLevelTypeAware(['8.1' => 'int'], default: '')]
    protected $severity;

    /**
     * Constructs the exception
     * @link https://php.net/manual/en/errorexception.construct.php
     * @param string $message [optional] The Exception message to throw.
     * @param int $code [optional] The Exception code.
     * @param int $severity [optional] The severity level of the exception.
     * @param string $filename [optional] The filename where the exception is thrown.
     * @param int $line [optional] The line number where the exception is thrown.
     * @param Exception $previous [optional] The previous exception used for the exception chaining.
     */
    #[Pure]
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $message = "",
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $code = 0,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $severity = 1,
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $filename = null,
        #[LanguageLevelTypeAware(['8.0' => 'int|null'], default: '')] $line = null,
        #[LanguageLevelTypeAware(['8.0' => 'Throwable|null'], default: 'Throwable')] $previous = null
    ) {}

/**
*<div id="errorexception.getseverity" class="refentry"> <div class="refnamediv">  <h1 class="refname">ErrorException::getSeverity</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ErrorException::getSeverity</span> &mdash; <span class="dc-title">获取异常的严重程度</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-errorexception.getseverity-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ErrorException::getSeverity</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">  返回异常的严重程度。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-errorexception.getseverity-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-errorexception.getseverity-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  返回异常的严重级别。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-errorexception.getseverity-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1136">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ErrorException::getSeverity()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">try {<br />    throw new </span><span style="color: #9876AA">ErrorException</span><span style="color: #007700">(</span><span style="color: #DD0000">"Exception message"</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">E_USER_ERROR</span><span style="color: #007700">);<br />} catch(</span><span style="color: #9876AA">ErrorException $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"This exception severity is: " </span><span style="color: #007700">. </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getSeverity</span><span style="color: #007700">();<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getSeverity</span><span style="color: #007700">() === </span><span style="color: #9876AA">E_USER_ERROR</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>This exception severity is: 256<br>bool(true)<br></span></div>    </div>   </div>  </span> </div></div>
     * @return int the severity level of the exception.*/
    final public function getSeverity(): int {}
}

/**
*<div id="class.closure" class="reference"> <h1 class="title">Closure 类</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p>  <div class="section" id="closure.intro">   <h2 class="title">简介</h2>   <p class="para">    用于代表 <a href="https://www.php.net/manual/zh/functions.anonymous.php" class="link">匿名函数</a>    的类.   </p>   <p class="para">    匿名函数会产生这种类型的对象。这个类带有一些方法允许在匿名函数创建后对其进行更多的控制。   </p>   <p class="para">    除了此处列出的方法，还有一个    <span>__invoke</span> 方法。这是为了与其他实现了    <a href="https://www.php.net/manual/zh/language.oop5.magic.php#language.oop5.magic.invoke" class="link">__invoke()魔术方法</a>    的对象保持一致性，但调用匿名函数的过程与它无关。   </p>  </div>  <div class="section" id="closure.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">final</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">Closure</strong></strong>     {</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">private</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/closure.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>()</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/closure.bind.php" class="methodname" style="color:#CC7832">bind</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.closure.php" class="type Closure" style="color:#EAB766">Closure</a></span> <span class="parameter" style="color:#3A95FF">$closure</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$newThis</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span>|<span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">null</span></span> <span class="parameter" style="color:#3A95FF">$newScope</span><span class="initializer"> = &quot;static&quot;</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.closure.php" class="type Closure" style="color:#EAB766">Closure</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/closure.bindto.php" class="methodname" style="color:#CC7832">bindTo</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$newThis</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span>|<span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">null</span></span> <span class="parameter" style="color:#3A95FF">$newScope</span><span class="initializer"> = &quot;static&quot;</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.closure.php" class="type Closure" style="color:#EAB766">Closure</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/closure.call.php" class="methodname" style="color:#CC7832">call</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$newThis</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$args</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/closure.fromcallable.php" class="methodname" style="color:#CC7832">fromCallable</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.closure.php" class="type Closure" style="color:#EAB766">Closure</a></span></div>   }</div>  </div> </div>      <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Closure::__construct} — 用于禁止实例化的构造函数</li><li>{@link Closure::bind} — 用特定的绑定对象和类作用域复制闭包。</li><li>{@link Closure::bindTo} — 用特定的绑定对象和类作用域复制闭包。</li><li>{@link Closure::call} — 绑定并调用闭包</li><li>{@link Closure::fromCallable} — 将 callable 转换为闭包</li></ul></div>
*/
final class Closure
{
    /**
     * This method exists only to disallow instantiation of the Closure class.
     * Objects of this class are created in the fashion described on the anonymous functions page.
     * @link https://secure.php.net/manual/en/closure.construct.php
     */
    private function __construct() {}

    /**
     * This is for consistency with other classes that implement calling magic,
     * as this method is not used for calling the function.
     * @param mixed ...$_ [optional]
     * @return mixed
     * @link https://secure.php.net/manual/en/class.closure.php
     */
    public function __invoke(...$_) {}

/**
*<div id="closure.bindto" class="refentry"> <div class="refnamediv">  <h1 class="refname">Closure::bindTo</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Closure::bindTo</span> &mdash; <span class="dc-title">   用特定的绑定对象和类作用域复制闭包。  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-closure.bindto-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Closure::bindTo</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$newThis</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span>|<span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">null</span></span> <span class="parameter" style="color:#3A95FF">$newScope</span><span class="initializer"> = &quot;static&quot;</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.closure.php" class="type Closure" style="color:#EAB766">Closure</a></span></span></div>  <p class="para rdfs-comment">   创建并返回一个 <a href="https://www.php.net/manual/zh/functions.anonymous.php" class="link">匿名函数</a>，   它与当前对象的函数体相同、绑定了同样变量，但可以绑定不同的对象，也可以绑定新的类作用域。  </p>  <p class="para">   “绑定的对象”决定了函数体中的 <span>$this</span>   的取值，“类作用域”代表一个类型、决定在这个匿名函数中能够调用哪些 private 和 protected 的方法。   也就是说，此时 $this 可以调用的方法，与 <span class="parameter" style="color:#3A95FF">newScope</span> 类的成员函数是相同的。  </p>  <p class="para">   静态闭包不能有绑定的对象（   <span class="parameter" style="color:#3A95FF">newThis</span> 参数的值应该设为   <strong><span>null</span></strong>）不过仍然可以用 bindTo 方法来改变它们的类作用域。  </p>  <p class="para">   此函数确保对于非静态闭包，拥有绑定实例也意味着被限定作用域，反之亦然。   为此，非静态闭包给定一个 <strong><span>null</span></strong> 实例的作用域可以使其变为静态，   非静态无作用域的闭包给定一个非 null 的实例作用在一个非指定类。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    如果你只是想要复制一个匿名函数，可以用    <a href="https://www.php.net/manual/zh/language.oop5.cloning.php" class="link">cloning</a> 代替。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-closure.bindto-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">newThis</span></dt>    <dd>     <span>      绑定给匿名函数的一个对象，或者      <strong><span>null</span></strong> 来取消绑定。     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">newScope</span></dt>    <dd>     <p class="para">      关联到匿名函数的类作用域，或者      &#039;static&#039; 保持当前状态。如果是一个对象，则使用这个对象的类型为新的类作用域。      这会决定绑定的对象的 保护、私有成员 方法的可见性。      不允许内部类（的对象）作为参数传递。     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-closure.bindto-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回新创建的 <span class="classname"><a href="https://www.php.net/manual/zh/class.closure.php" class="classname">Closure</a></span> 对象，   或者失败时返回 <strong><span>null</span></strong> 。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-closure.bindto-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-1181">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Closure::bindTo()</strong></span> 实例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class </span><span style="color: #9876AA">A </span><span style="color: #007700">{<br />    private </span><span style="color: #9876AA">$val</span><span style="color: #007700">;<br />    function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(</span><span style="color: #9876AA">$val</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">val </span><span style="color: #007700">= </span><span style="color: #9876AA">$val</span><span style="color: #007700">;<br />    }<br />    function </span><span style="color: #9876AA">getClosure</span><span style="color: #007700">() {<br />        </span><span style="color: #FF8000">// 返回绑定到此对象和作用域的闭包<br />        </span><span style="color: #007700">return function() { return </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">val</span><span style="color: #007700">; };<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$ob1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">A</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$ob2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">A</span><span style="color: #007700">(</span><span style="color: #9876AA">2</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$cl </span><span style="color: #007700">= </span><span style="color: #9876AA">$ob1</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosure</span><span style="color: #007700">();<br />echo </span><span style="color: #9876AA">$cl</span><span style="color: #007700">(), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$cl </span><span style="color: #007700">= </span><span style="color: #9876AA">$cl</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bindTo</span><span style="color: #007700">(</span><span style="color: #9876AA">$ob2</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$cl</span><span style="color: #007700">(), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>1<br>2<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-closure.bindto-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><a href="https://www.php.net/manual/zh/functions.anonymous.php" class="link">匿名函数</a></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link Closure::bind()} - 用特定的绑定对象和类作用域复制闭包。</span></li>  </ul> </div></div>
     * @return Closure|null Returns the newly created Closure object or null on failure*/
    public function bindTo(?object $newThis, object|string|null $newScope = 'static'): ?Closure {}

/**
*<div id="closure.bind" class="refentry"> <div class="refnamediv">  <h1 class="refname">Closure::bind</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Closure::bind</span> &mdash; <span class="dc-title">   用特定的绑定对象和类作用域复制闭包。  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-closure.bind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Closure::bind</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.closure.php" class="type Closure" style="color:#EAB766">Closure</a></span> <span class="parameter" style="color:#3A95FF">$closure</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$newThis</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span>|<span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">null</span></span> <span class="parameter" style="color:#3A95FF">$newScope</span><span class="initializer"> = &quot;static&quot;</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.closure.php" class="type Closure" style="color:#EAB766">Closure</a></span></span></div>  <p class="para rdfs-comment">   这个方法是 <span class="methodname" style="color:#CC7832">{@link Closure::bindTo()}</span> 的静态版本。查看它的文档获取更多信息。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-closure.bind-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">closure</span></dt>    <dd>     <span>      需要绑定的匿名函数。     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">newThis</span></dt>    <dd>     <p class="para">      需要绑定到匿名函数的对象，或者      <strong><span>null</span></strong> 创建未绑定的闭包。     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">newScope</span></dt>    <dd>     <p class="para">      想要绑定给闭包的类作用域，或者 &#039;static&#039; 表示不改变。如果传入一个对象，则使用这个对象的类型名。      类作用域用来决定在闭包中 $this 对象的 私有、保护方法 的可见性。      不允许内置类（的对象）作为参数传递。     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-closure.bind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个新的 <span class="classname"><a href="https://www.php.net/manual/zh/class.closure.php" class="classname">Closure</a></span> 对象，失败时返回 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-closure.bind-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-1178">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Closure::bind()</strong></span> 示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">A </span><span style="color: #007700">{<br />    private static </span><span style="color: #9876AA">$sfoo </span><span style="color: #007700">= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />    private </span><span style="color: #9876AA">$ifoo </span><span style="color: #007700">= </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">$cl1 </span><span style="color: #007700">= static function() {<br />    return </span><span style="color: #9876AA">A</span><span style="color: #007700">::</span><span style="color: #9876AA">$sfoo</span><span style="color: #007700">;<br />};<br /></span><span style="color: #9876AA">$cl2 </span><span style="color: #007700">= function() {<br />    return </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ifoo</span><span style="color: #007700">;<br />};<br /><br /></span><span style="color: #9876AA">$bcl1 </span><span style="color: #007700">= </span><span style="color: #9876AA">Closure</span><span style="color: #007700">::</span><span style="color: #9876AA">bind</span><span style="color: #007700">(</span><span style="color: #9876AA">$cl1</span><span style="color: #007700">, </span><span style="color: #9876AA">null</span><span style="color: #007700">, </span><span style="color: #DD0000">'A'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$bcl2 </span><span style="color: #007700">= </span><span style="color: #9876AA">Closure</span><span style="color: #007700">::</span><span style="color: #9876AA">bind</span><span style="color: #007700">(</span><span style="color: #9876AA">$cl2</span><span style="color: #007700">, new </span><span style="color: #9876AA">A</span><span style="color: #007700">(), </span><span style="color: #DD0000">'A'</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$bcl1</span><span style="color: #007700">(), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">$bcl2</span><span style="color: #007700">(), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>1<br>2<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-closure.bind-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><a href="https://www.php.net/manual/zh/functions.anonymous.php" class="link">匿名函数</a></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link Closure::bindTo()} - 用特定的绑定对象和类作用域复制闭包。</span></li>  </ul> </div></div>
     * @return Closure|null Returns the newly created Closure object or null on failure*/
    public static function bind(Closure $closure, ?object $newThis, object|string|null $newScope = 'static'): ?Closure {}

/**
*<div id="closure.call" class="refentry"> <div class="refnamediv">  <h1 class="refname">Closure::call</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Closure::call</span> &mdash; <span class="dc-title">绑定并调用闭包</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-closure.call-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Closure::call</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$newThis</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$args</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   暂时将闭包绑定到 <span class="parameter" style="color:#3A95FF">newThis</span>，并使用任意给定的参数调用它。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-closure.call-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">newThis</span></dt>    <dd>     <span>      在调用期间将闭包绑定到 <span class="type" style="color:#EAB766">object</span>。     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">args</span></dt>    <dd>     <p class="para">      零个或多个参数，他们将作为参数传递给闭包。     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-closure.call-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回闭包的返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-closure.call-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-1184">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Closure::call()</strong></span> 示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Value </span><span style="color: #007700">{<br />    protected </span><span style="color: #9876AA">$value</span><span style="color: #007700">;<br />    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(</span><span style="color: #9876AA">$value</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">value </span><span style="color: #007700">= </span><span style="color: #9876AA">$value</span><span style="color: #007700">;<br />    }<br />    public function </span><span style="color: #9876AA">getValue</span><span style="color: #007700">() {<br />        return </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">value</span><span style="color: #007700">;<br />    }<br />}<br /></span><span style="color: #9876AA">$three </span><span style="color: #007700">= new </span><span style="color: #9876AA">Value</span><span style="color: #007700">(</span><span style="color: #9876AA">3</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$four </span><span style="color: #007700">= new </span><span style="color: #9876AA">Value</span><span style="color: #007700">(</span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$closure </span><span style="color: #007700">= function (</span><span style="color: #9876AA">$delta</span><span style="color: #007700">) { </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getValue</span><span style="color: #007700">() + </span><span style="color: #9876AA">$delta</span><span style="color: #007700">); };<br /></span><span style="color: #9876AA">$closure</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">call</span><span style="color: #007700">(</span><span style="color: #9876AA">$three</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$closure</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">call</span><span style="color: #007700">(</span><span style="color: #9876AA">$four</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(7)<br>int(8)<br></span></div>   </div>  </div> </div></div>
     * @return mixed*/
    public function call(object $newThis, mixed ...$args): mixed {}

/**
*<div id="closure.fromcallable" class="refentry"> <div class="refnamediv">  <h1 class="refname">Closure::fromCallable</h1>  <p class="verinfo">(PHP 7 &gt;= 7.1.0)</p><p class="refpurpose"><span class="refname">Closure::fromCallable</span> &mdash; <span class="dc-title">将 callable 转换为闭包</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-closure.fromcallable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Closure::fromCallable</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.closure.php" class="type Closure" style="color:#EAB766">Closure</a></span></div>  <p class="para rdfs-comment">   使用当前范围从给定的 <span class="parameter" style="color:#3A95FF">callback</span> 创建并返回一个新的    <a href="https://www.php.net/manual/zh/functions.anonymous.php" class="link">匿名函数</a>。    此方法检查 <span class="parameter" style="color:#3A95FF">callback</span> 函数在作用域是否可调用，   如果不能，就抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.typeerror.php" class="classname">TypeError</a></span>。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    从 PHP 8.1.0 开始，<a href="https://www.php.net/manual/zh/functions.first_class_callable_syntax.php" class="link">First-class 可调用语法</a> 的语义与此方法相同。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-closure.fromcallable-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>    <dd>     <span>      要转换的回调。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-closure.fromcallable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回新创建的 <span class="classname"><a href="https://www.php.net/manual/zh/class.closure.php" class="classname">Closure</a></span>，   或者如果 <span class="parameter" style="color:#3A95FF">callback</span> 在当前作用域无法调用，   则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.typeerror.php" class="classname">TypeError</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-closure.fromcallable-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><a href="https://www.php.net/manual/zh/functions.anonymous.php" class="link">匿名函数</a></li>   <li class="member"><a href="https://www.php.net/manual/zh/functions.first_class_callable_syntax.php" class="link">First-class 可调用语法</a></li>  </ul> </div></div>
     * @return Closure*/
    public static function fromCallable(callable $callback): Closure {}
}

/**
 * Classes implementing <b>Countable</b> can be used with the
 * <b>count</b> function.
 * @link https://php.net/manual/en/class.countable.php
 */
interface Countable
{
    /**
     * Count elements of an object
     * @link https://php.net/manual/en/countable.count.php
     * @return int<0,max> The custom count as an integer.
     * <p>
     * The return value is cast to an integer.
     * </p>
     */
    #[TentativeType]
    public function count(): int;
}

/**
*<div id="class.weakreference" class="reference"> <h1 class="title">WeakReference 类</h1>  <div class="partintro"><p class="verinfo">(PHP 7 &gt;= 7.4.0, PHP 8)</p>  <div class="section" id="weakreference.intro">   <h2 class="title">简介</h2>   <p class="para">    弱引用可以指向一个对象，并且不阻止对象的销毁。可以实现具有对象结构的缓存。   </p>   <p class="para">    <span class="classname"><strong class="classname">弱引用类</strong></span>不能序列化。   </p>  </div>  <div class="section" id="weakreference.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">final</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">WeakReference</strong></strong>     {</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/weakreference.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>()</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/weakreference.create.php" class="methodname" style="color:#CC7832">create</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.weakreference.php" class="type WeakReference" style="color:#EAB766">WeakReference</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/weakreference.get.php" class="methodname" style="color:#CC7832">get</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">object</span></span></div>   }</div>  </div>  <div class="section" id="weakreference.examples">   <h2 class="title">弱引用示例</h2>   <p class="para">    <div class="example" id="example-1208">     <p><strong>示例 #1 弱引用的基础用法</strong></p>     <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$obj </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$weakref </span><span style="color: #007700">= </span><span style="color: #9876AA">WeakReference</span><span style="color: #007700">::</span><span style="color: #9876AA">create</span><span style="color: #007700">(</span><span style="color: #9876AA">$obj</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$weakref</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">get</span><span style="color: #007700">());<br />unset(</span><span style="color: #9876AA">$obj</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$weakref</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">get</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>     </div>     <div class="example-contents"><p>以上示例的输出类似于：</p></div>     <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(stdClass)#1 (0) {<br>}<br>NULL<br></span></div>     </div>    </div>   </p>  </div> </div>   <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link WeakReference::__construct} — 不允许实例化的构造函数</li><li>{@link WeakReference::create} — 创建新的弱引用</li><li>{@link WeakReference::get} — 获取弱引用对象</li></ul></div>
*/
final class WeakReference
{
    /**
     * This method exists only to disallow instantiation of the WeakReference
     * class. Weak references are to be instantiated with the factory method
     * <b>WeakReference::create()</b>.
     */
    public function __construct() {}

/**
*<div id="weakreference.create" class="refentry"> <div class="refnamediv">  <h1 class="refname">WeakReference::create</h1>  <p class="verinfo">(PHP 7 &gt;= 7.4.0, PHP 8)</p><p class="refpurpose"><span class="refname">WeakReference::create</span> &mdash; <span class="dc-title">创建新的弱引用</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-weakreference.create-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>WeakReference::create</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.weakreference.php" class="type WeakReference" style="color:#EAB766">WeakReference</a></span></div>  <p class="para rdfs-comment">   创建新的 <span class="classname"><a href="https://www.php.net/manual/zh/class.weakreference.php" class="classname">WeakReference</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-weakreference.create-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <span>      要弱引用的对象。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-weakreference.create-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回刚刚实例化的对象。  </p> </div></div>
     * @return WeakReference<TIn> The freshly instantiated object.*/
    public static function create(object $object): WeakReference {}

/**
*<div id="weakreference.get" class="refentry"> <div class="refnamediv">  <h1 class="refname">WeakReference::get</h1>  <p class="verinfo">(PHP 7 &gt;= 7.4.0, PHP 8)</p><p class="refpurpose"><span class="refname">WeakReference::get</span> &mdash; <span class="dc-title">获取弱引用对象</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-weakreference.get-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>WeakReference::get</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">object</span></span></div>  <p class="para rdfs-comment">   获取弱引用对象。   如果对象已销毁，则返回 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-weakreference.get-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-weakreference.get-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回引用的 <span class="type" style="color:#EAB766">object</span>，如果对象已销毁，则返回 <strong><span>null</span></strong>。  </p> </div></div>
     * @return T|null*/
    public function get(): ?object {}
}

/**
*<div id="class.weakmap" class="reference"> <h1 class="title">WeakMap 类</h1>  <div class="partintro"><p class="verinfo">(PHP 8)</p>    <div class="section" id="weakmap.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">WeakMap</strong></span> 是将对象作为 key 来访问的 map（或者说字典）。然而，与其它类似 <span class="classname"><a href="https://www.php.net/manual/zh/class.splobjectstorage.php" class="classname">SplObjectStorage</a></span>     不同，<span class="classname"><strong class="classname">WeakMap</strong></span> 中的对象 key 不影响对象的引用计数。也就是说，如果在任何时候对其唯一的剩余引用是     <span class="classname"><strong class="classname">WeakMap</strong></span> key，那么该对象将会被垃圾收集并从 <span class="classname"><strong class="classname">WeakMap</strong></span>     移除。它的主要用法是从对象中编译数据派生缓存，这种场景下不需要存活得比对象更久。   </p>   <p class="para">    <span class="classname"><strong class="classname">WeakMap</strong></span> 实现了 <span class="interfacename"><a href="https://www.php.net/manual/zh/class.arrayaccess.php" class="interfacename">ArrayAccess</a></span>、    <span class="interfacename"><a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a></span>、<span class="interfacename"><a href="https://www.php.net/manual/zh/class.countable.php" class="interfacename">Countable</a></span>，    因此大多数情况下，它能和关联数组一样使用。   </p>  </div>    <div class="section" id="weakmap.synopsis">   <h2 class="title">类摘要</h2>      <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">final</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">WeakMap</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.arrayaccess.php" class="interfacename">ArrayAccess</a>,     <a href="https://www.php.net/manual/zh/class.countable.php" class="interfacename">Countable</a>,     <a href="https://www.php.net/manual/zh/class.iteratoraggregate.php" class="interfacename">IteratorAggregate</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/weakmap.count.php" class="methodname" style="color:#CC7832">count</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/weakmap.getiterator.php" class="methodname" style="color:#CC7832">getIterator</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/weakmap.offsetexists.php" class="methodname" style="color:#CC7832">offsetExists</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/weakmap.offsetget.php" class="methodname" style="color:#CC7832">offsetGet</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/weakmap.offsetset.php" class="methodname" style="color:#CC7832">offsetSet</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/weakmap.offsetunset.php" class="methodname" style="color:#CC7832">offsetUnset</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>     </div>    <div class="section" id="weakmap.examples">   <h2 class="title">示例</h2>   <p class="para">    <div class="example" id="example-1211">     <p><strong>示例 #1 <span class="classname"><strong class="classname">Weakmap</strong></span> 用法示例</strong></p>     <div class="example-contents">      <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$wm </span><span style="color: #007700">= new </span><span style="color: #9876AA">WeakMap</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$o </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /><br />class </span><span style="color: #9876AA">A </span><span style="color: #007700">{<br />    public function </span><span style="color: #9876AA">__destruct</span><span style="color: #007700">() {<br />        echo </span><span style="color: #DD0000">"Dead!\n"</span><span style="color: #007700">;<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$wm</span><span style="color: #007700">[</span><span style="color: #9876AA">$o</span><span style="color: #007700">] = new </span><span style="color: #9876AA">A</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$wm</span><span style="color: #007700">));<br />echo </span><span style="color: #DD0000">"Unsetting...\n"</span><span style="color: #007700">;<br />unset(</span><span style="color: #9876AA">$o</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"Done\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$wm</span><span style="color: #007700">));</span></span></span></div>     </div>     <div class="example-contents"><p>以上示例会输出：</p></div>     <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">      <div class="cdata"><span>int(1)<br>Unsetting...<br>Dead!<br>Done<br>int(0)<br></span></div>     </div>    </div>   </p>  </div>   </div>      <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link WeakMap::count} — 统计 map 中存活实体的数量</li><li>{@link WeakMap::getIterator} — 接收一个外部迭代器</li><li>{@link WeakMap::offsetExists} — 检测 map 中是否存在某个对象</li><li>{@link WeakMap::offsetGet} — 返回某个对象指向的值</li><li>{@link WeakMap::offsetSet} — 更新 map 新的键值对</li><li>{@link WeakMap::offsetUnset} — 从 map 中移除一条</li></ul></div>
*/
final class WeakMap implements ArrayAccess, Countable, IteratorAggregate
{
/**
*<div id="weakmap.offsetexists" class="refentry"> <div class="refnamediv">  <h1 class="refname">WeakMap::offsetExists</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">WeakMap::offsetExists</span> &mdash; <span class="dc-title">检测 map 中是否存在某个对象</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-weakmap.offsetexists-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>WeakMap::offsetExists</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查传入的对象在 map 中是否被引用。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-weakmap.offsetexists-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <span>      要检查的对象。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-weakmap.offsetexists-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 map 中包含该对象返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool*/
    public function offsetExists($object): bool {}

/**
*<div id="weakmap.offsetget" class="refentry"> <div class="refnamediv">  <h1 class="refname">WeakMap::offsetGet</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">WeakMap::offsetGet</span> &mdash; <span class="dc-title">返回某个对象指向的值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-weakmap.offsetget-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>WeakMap::offsetGet</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">    返回某个对象指向的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-weakmap.offsetget-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <span>      map 中包含的 key 对象。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-weakmap.offsetget-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回与作为参数传入对象关联的值，   否则返回 <strong><span>null</span></strong>。  </p> </div></div>
     * @return TValue Value associated with the key object*/
    public function offsetGet($object): mixed {}

/**
*<div id="weakmap.offsetset" class="refentry"> <div class="refnamediv">  <h1 class="refname">WeakMap::offsetSet</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">WeakMap::offsetSet</span> &mdash; <span class="dc-title">更新 map 新的键值对</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-weakmap.offsetset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>WeakMap::offsetSet</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   更新 map 新的键值对。如果 key 已经在 map 中存在，   新的值会替换老的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-weakmap.offsetset-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <span>       键值对中作为 key 的对象。     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">value</span></dt>    <dd>     <p class="para">       任意数据作为键值对的值。     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-weakmap.offsetset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function offsetSet($object, mixed $value): void {}

/**
*<div id="weakmap.offsetunset" class="refentry"> <div class="refnamediv">  <h1 class="refname">WeakMap::offsetUnset</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">WeakMap::offsetUnset</span> &mdash; <span class="dc-title">从 map 中移除一条</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-weakmap.offsetunset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>WeakMap::offsetUnset</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">    从 map 中移除一项。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-weakmap.offsetunset-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <span>      从 map 中移除的 key 对象。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-weakmap.offsetunset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function offsetUnset($object): void {}

/**
*<div id="weakmap.getiterator" class="refentry"> <div class="refnamediv">  <h1 class="refname">WeakMap::getIterator</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">WeakMap::getIterator</span> &mdash; <span class="dc-title">接收一个外部迭代器</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-weakmap.getiterator-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>WeakMap::getIterator</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></div>  <p class="para rdfs-comment">    返回一个外部迭代器.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-weakmap.getiterator-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-weakmap.getiterator-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    一个实现了 <span class="classname"><a href="https://www.php.net/manual/zh/class.iterator.php" class="classname">Iterator</a></span> 或者    <span class="classname"><a href="https://www.php.net/manual/zh/class.traversable.php" class="classname">Traversable</a></span> 的类实例  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-weakmap.getiterator-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   失败时抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.exception.php" class="classname">Exception</a></span>。  </p> </div></div>
     * @return Iterator<TKey, TValue>*/
    public function getIterator(): Iterator {}

/**
*<div id="weakmap.count" class="refentry"> <div class="refnamediv">  <h1 class="refname">WeakMap::count</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">WeakMap::count</span> &mdash; <span class="dc-title">统计 map 中存活实体的数量</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-weakmap.count-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>WeakMap::count</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   统计 map 中存活实体的数量。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-weakmap.count-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-weakmap.count-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 map 中存活实体的数量。  </p> </div></div>
     * @return int<0,max>*/
    public function count(): int {}
}

/**
 * Stringable interface denotes a class as having a __toString() method.
 *
 * @since 8.0
 */
interface Stringable
{
    /**
     * Magic method {@see https://www.php.net/manual/en/language.oop5.magic.php#object.tostring}
     * allows a class to decide how it will react when it is treated like a string.
     *
     * @return string Returns string representation of the object that
     * implements this interface (and/or "__toString" magic method).
     */
    public function __toString(): string;
}

/**
 * @since 8.0
 */
#[Attribute(Attribute::TARGET_CLASS)]
final class Attribute
{
    public int $flags;

    /**
     * Marks that attribute declaration is allowed only in classes.
     */
    public const TARGET_CLASS = 1;

    /**
     * Marks that attribute declaration is allowed only in functions.
     */
    public const TARGET_FUNCTION = 2;

    /**
     * Marks that attribute declaration is allowed only in class methods.
     */
    public const TARGET_METHOD = 4;

    /**
     * Marks that attribute declaration is allowed only in class properties.
     */
    public const TARGET_PROPERTY = 8;

    /**
     * Marks that attribute declaration is allowed only in class constants.
     */
    public const TARGET_CLASS_CONSTANT = 16;

    /**
     * Marks that attribute declaration is allowed only in function or method parameters.
     */
    public const TARGET_PARAMETER = 32;

    /**
     * Marks that attribute declaration is allowed anywhere.
     */
    public const TARGET_ALL = 63;

    /**
     * Notes that an attribute declaration in the same place is
     * allowed multiple times.
     */
    public const IS_REPEATABLE = 64;

    /**
     * @param int $flags A value in the form of a bitmask indicating the places
     * where attributes can be defined.
     */
    public function __construct(#[ExpectedValues(flagsFromClass: Attribute::class)] int $flags = self::TARGET_ALL) {}
}

/**
*<div id="class.internaliterator" class="reference"> <h1 class="title">The InternalIterator class</h1>  <div class="partintro"><p class="verinfo">(PHP 8)</p>  <div class="section" id="internaliterator.intro">   <h2 class="title">简介</h2>   <p class="para">    Class to ease implementing <span class="interfacename"><a href="https://www.php.net/manual/zh/class.iteratoraggregate.php" class="interfacename">IteratorAggregate</a></span>    for <em>internal</em> classes.   </p>  </div>  <div class="section" id="internaliterator.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">final</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">InternalIterator</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">private</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/internaliterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>()</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/internaliterator.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/internaliterator.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/internaliterator.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/internaliterator.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/internaliterator.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div> </div>      <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link InternalIterator::__construct} — 禁止直接实例化私有构造方法</li><li>{@link InternalIterator::current} — 返回当前元素</li><li>{@link InternalIterator::key} — 返回当前元素的键</li><li>{@link InternalIterator::next} — 向前移动到下一个元素</li><li>{@link InternalIterator::rewind} — 迭代器返回到第一个元素</li><li>{@link InternalIterator::valid} — 检测当前位置是否有效</li></ul></div>
*/
final class InternalIterator implements Iterator
{
    private function __construct() {}

/**
*<div id="internaliterator.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">InternalIterator::current</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">InternalIterator::current</span> &mdash; <span class="dc-title">返回当前元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-internaliterator.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>InternalIterator::current</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   返回当前元素。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-internaliterator.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-internaliterator.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回当前元素。  </p> </div></div>
*/
    public function current(): mixed {}

/**
*<div id="internaliterator.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">InternalIterator::next</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">InternalIterator::next</span> &mdash; <span class="dc-title">向前移动到下一个元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-internaliterator.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>InternalIterator::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   移动当前位置到下一个元素。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-internaliterator.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-internaliterator.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function next(): void {}

/**
*<div id="internaliterator.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">InternalIterator::key</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">InternalIterator::key</span> &mdash; <span class="dc-title">返回当前元素的键</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-internaliterator.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>InternalIterator::key</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   返回当前元素的键。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-internaliterator.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-internaliterator.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回当前元素的键。  </p> </div></div>
*/
    public function key(): mixed {}

/**
*<div id="internaliterator.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">InternalIterator::valid</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">InternalIterator::valid</span> &mdash; <span class="dc-title">检测当前位置是否有效</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-internaliterator.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>InternalIterator::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检测当前位置是否有效。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-internaliterator.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-internaliterator.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回当前位置是否有效。  </p> </div></div>
*/
    public function valid(): bool {}

/**
*<div id="internaliterator.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">InternalIterator::rewind</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">InternalIterator::rewind</span> &mdash; <span class="dc-title">迭代器返回到第一个元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-internaliterator.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>InternalIterator::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   迭代器返回到第一个元素。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-internaliterator.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-internaliterator.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function rewind(): void {}
}

/**
 * @since 8.1
 */
interface UnitEnum
{
    public readonly string $name;

    /**
     * @return static[]
     */
    #[Pure]
    public static function cases(): array;
}

/**
 * @since 8.1
 */
interface BackedEnum extends UnitEnum
{
    public readonly int|string $value;

    /**
     * @param int|string $value
     * @return static
     */
    #[Pure]
    public static function from(int|string $value): static;

    /**
     * @param int|string $value
     * @return static|null
     */
    #[Pure]
    public static function tryFrom(int|string $value): ?static;
}

/**
 * @since 8.1
 * @internal
 *
 * Internal interface to ensure precise type inference
 */
interface IntBackedEnum extends BackedEnum
{
    public readonly int $value;

    /**
     * @param int $value
     * @return static
     */
    #[Pure]
    public static function from(int $value): static;

    /**
     * @param int $value
     * @return static|null
     */
    #[Pure]
    public static function tryFrom(int $value): ?static;
}

/**
 * @since 8.1
 * @internal
 *
 * Internal interface to ensure precise type inference
 */
interface StringBackedEnum extends BackedEnum
{
    public readonly string $value;

    #[Pure]
    public static function from(string $value): static;

    #[Pure]
    public static function tryFrom(string $value): ?static;
}

/**
*<div id="class.fiber" class="reference"> <h1 class="title">纤程（Fiber）类</h1>  <div class="partintro"><p class="verinfo">(PHP 8 &gt;= 8.1.0)</p>  <div class="section" id="fiber.intro">   <h2 class="title">简介</h2>   <p class="para">    纤程（Fiber）代表了有完整栈、可中断的功能。Fiber 可以从调用堆栈中的任何位置挂起，在 fiber    内暂停执行，直到稍后恢复 fiber。   </p>  </div>  <div class="section" id="fiber.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">final</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">Fiber</strong></strong>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/fiber.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/fiber.start.php" class="methodname" style="color:#CC7832">start</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$args</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/fiber.resume.php" class="methodname" style="color:#CC7832">resume</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/fiber.throw.php" class="methodname" style="color:#CC7832">throw</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span> <span class="parameter" style="color:#3A95FF">$exception</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/fiber.getreturn.php" class="methodname" style="color:#CC7832">getReturn</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/fiber.isstarted.php" class="methodname" style="color:#CC7832">isStarted</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/fiber.issuspended.php" class="methodname" style="color:#CC7832">isSuspended</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/fiber.isrunning.php" class="methodname" style="color:#CC7832">isRunning</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/fiber.isterminated.php" class="methodname" style="color:#CC7832">isTerminated</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/fiber.suspend.php" class="methodname" style="color:#CC7832">suspend</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/fiber.getcurrent.php" class="methodname" style="color:#CC7832">getCurrent</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.fiber.php" class="type Fiber" style="color:#EAB766">Fiber</a></span></span></div>   }</div>  </div>  <div class="section" id="fiber.seealso">   <h2 class="title">参见</h2>   <p class="para"><a href="https://www.php.net/manual/zh/language.fibers.php" class="link">纤程概述</a></p>  </div> </div>           <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Fiber::__construct} — 创建新的 Fiber 实例</li><li>{@link Fiber::start} — 启动 fiber 的执行</li><li>{@link Fiber::resume} — 使用值恢复 fiber 的执行</li><li>{@link Fiber::throw} — 用一个异常来恢复 fiber 的执行</li><li>{@link Fiber::getReturn} — 获取 Fiber 的返回值</li><li>{@link Fiber::isStarted} — 确定 fiber 是否启动</li><li>{@link Fiber::isSuspended} — 确认 fiber 是否挂起</li><li>{@link Fiber::isRunning} — 确认 fiber 是否正在运行</li><li>{@link Fiber::isTerminated} — 确认 fiber 是否终止</li><li>{@link Fiber::suspend} — 暂停当前 fiber 的执行</li><li>{@link Fiber::getCurrent} — 获取当前正在执行的 Fiber 实例</li></ul></div>
*/
final class Fiber
{
    /**
     * @param callable $callback Function to invoke when starting the fiber.
     */
    public function __construct(callable $callback) {}

/**
*<div id="fiber.start" class="refentry"> <div class="refnamediv">  <h1 class="refname">Fiber::start</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">Fiber::start</span> &mdash; <span class="dc-title">启动 fiber 的执行</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-fiber.start-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Fiber::start</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$args</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   当构造 fiber 时提供用于 callable 的可变参数列表。  </p>  <p class="para">   如果调用此方法时 fiber 已经启动，则会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.fibererror.php" class="classname">FiberError</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-fiber.start-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">args</span></dt>    <dd>     <span>      该参数用于调用 fiber 构造函数内指定的 callable。      </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-fiber.start-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   首次调用 <span class="methodname" style="color:#CC7832">{@link Fiber::suspend()}</span> 提供的值；如果 fiber 已返回，则是 <strong><span>null</span></strong>。   如果 fiber 在挂起前抛出异常，那么会在调用此方法时的位置抛出异常。  </p> </div></div>
     * @return TSuspend|null Value from the first suspension point or NULL if the fiber returns.*/
    public function start(mixed ...$args): mixed {}

/**
*<div id="fiber.resume" class="refentry"> <div class="refnamediv">  <h1 class="refname">Fiber::resume</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">Fiber::resume</span> &mdash; <span class="dc-title">使用值恢复 fiber 的执行</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-fiber.resume-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Fiber::resume</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   使用给定值作为当前 <span class="methodname" style="color:#CC7832">{@link Fiber::suspend()}</span> 调用的结果来恢复 fiber。  </p>  <p class="para">   如果调用此方法时 fiber 还没挂起，将会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.fibererror.php" class="classname">FiberError</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-fiber.resume-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">value</span></dt>    <dd>     <span>      恢复 fiber 的值。这个值将会从当前调用 <span class="methodname" style="color:#CC7832">{@link Fiber::suspend()}</span> 中返回。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-fiber.resume-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 fiber 已返回，将是 <strong><span>null</span></strong>；否则就是下次调用 <span class="methodname" style="color:#CC7832">{@link Fiber::suspend()}</span> 时提供的值。   如果 fiber 暂停前抛出一个异常，它将会从调用本方法时的位置抛出异常。  </p> </div></div>
     * @return TSuspend|null Value from the next suspension point or NULL if the fiber returns.*/
    public function resume(mixed $value = null): mixed {}

/**
*<div id="fiber.throw" class="refentry"> <div class="refnamediv">  <h1 class="refname">Fiber::throw</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">Fiber::throw</span> &mdash; <span class="dc-title">用一个异常来恢复 fiber 的执行</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-fiber.throw-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Fiber::throw</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span> <span class="parameter" style="color:#3A95FF">$exception</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   在当前调用 <span class="methodname" style="color:#CC7832">{@link Fiber::suspend()}</span> 的位置抛出指定的异常，恢复 fiber 执行。  </p>  <p class="para">   如果调用此方法时 fiber 未挂起，将抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.fibererror.php" class="classname">FiberError</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-fiber.throw-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">exception</span></dt>    <dd>     <span>      在当前调用 <span class="methodname" style="color:#CC7832">{@link Fiber::suspend()}</span> 所在的位置，要抛出的异常。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-fiber.throw-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   下次调用 <span class="methodname" style="color:#CC7832">{@link Fiber::suspend()}</span> 所提供的值；如果 fiber 已返回，则是 <strong><span>null</span></strong>。   如果 fiber 暂停前抛出一个异常，它将会从调用本方法的位置抛出。  </p> </div></div>
     * @return TSuspend|null Value from the next suspension point or NULL if the fiber returns.*/
    public function throw(Throwable $exception): mixed {}

/**
*<div id="fiber.isstarted" class="refentry"> <div class="refnamediv">  <h1 class="refname">Fiber::isStarted</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">Fiber::isStarted</span> &mdash; <span class="dc-title">确定 fiber 是否启动</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-fiber.isstarted-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Fiber::isStarted</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-fiber.isstarted-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-fiber.isstarted-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   只有在 fiber 启动后返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool True if the fiber has been started.*/
    public function isStarted(): bool {}

/**
*<div id="fiber.issuspended" class="refentry"> <div class="refnamediv">  <h1 class="refname">Fiber::isSuspended</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">Fiber::isSuspended</span> &mdash; <span class="dc-title">确认 fiber 是否挂起</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-fiber.issuspended-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Fiber::isSuspended</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-fiber.issuspended-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-fiber.issuspended-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 fiber 当前挂起则返回 <strong><span>true</span></strong> 否则返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool True if the fiber is suspended.*/
    public function isSuspended(): bool {}

/**
*<div id="fiber.isrunning" class="refentry"> <div class="refnamediv">  <h1 class="refname">Fiber::isRunning</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">Fiber::isRunning</span> &mdash; <span class="dc-title">确认 fiber 是否正在运行</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-fiber.isrunning-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Fiber::isRunning</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-fiber.isrunning-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-fiber.isrunning-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   仅在 fiber 运行时返回 <strong><span>true</span></strong>。在调用 <span class="methodname" style="color:#CC7832">{@link Fiber::start()}</span>、<span class="methodname" style="color:#CC7832">{@link Fiber::resume()}</span>、   <span class="methodname" style="color:#CC7832">{@link Fiber::throw()}</span> 还没有返回之后，将认为 fiber 正在运行。如果 fiber 没有运行则返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool True if the fiber is currently running.*/
    public function isRunning(): bool {}

/**
*<div id="fiber.isterminated" class="refentry"> <div class="refnamediv">  <h1 class="refname">Fiber::isTerminated</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">Fiber::isTerminated</span> &mdash; <span class="dc-title">确认 fiber 是否终止</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-fiber.isterminated-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Fiber::isTerminated</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-fiber.isterminated-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-fiber.isterminated-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 fiber 因为已返回或抛出了异常，处于终止状态，则返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool True if the fiber has completed execution (returned or threw).*/
    public function isTerminated(): bool {}

/**
*<div id="fiber.getreturn" class="refentry"> <div class="refnamediv">  <h1 class="refname">Fiber::getReturn</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">Fiber::getReturn</span> &mdash; <span class="dc-title">获取 Fiber 的返回值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-fiber.getreturn-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Fiber::getReturn</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-fiber.getreturn-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-fiber.getreturn-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回的值是 <span class="methodname" style="color:#CC7832">{@link Fiber::__construct()}</span> 参数 <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>   所返回的值。   如果因为 Fiber 没有启动、没有正常终止、抛出异常等等，导致没有返回值，将抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.fibererror.php" class="classname">FiberError</a></span> 异常。  </p> </div></div>
     * @return TReturn Return value of the fiber callback. NULL is returned if the fiber does not have a return statement.*/
    public function getReturn(): mixed {}

/**
*<div id="fiber.getcurrent" class="refentry"> <div class="refnamediv">  <h1 class="refname">Fiber::getCurrent</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">Fiber::getCurrent</span> &mdash; <span class="dc-title">获取当前正在执行的 Fiber 实例</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-fiber.getcurrent-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Fiber::getCurrent</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.fiber.php" class="type Fiber" style="color:#EAB766">Fiber</a></span></span></div>  <p class="para rdfs-comment">  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-fiber.getcurrent-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-fiber.getcurrent-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回当前正在执行的 <span class="classname"><a href="https://www.php.net/manual/zh/class.fiber.php" class="classname">Fiber</a></span> 实例，如果在 Fiber 外部调用此方法，则返回 <strong><span>null</span></strong>。  </p> </div></div>
     * @return Fiber|null Returns the currently executing fiber instance or NULL if in {main}.*/
    public static function getCurrent(): ?Fiber {}

/**
*<div id="fiber.suspend" class="refentry"> <div class="refnamediv">  <h1 class="refname">Fiber::suspend</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">Fiber::suspend</span> &mdash; <span class="dc-title">暂停当前 fiber 的执行</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-fiber.suspend-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Fiber::suspend</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   暂停当前 fiber 的执行。调用 <span class="methodname" style="color:#CC7832">{@link Fiber::start()}</span>、    <span class="methodname" style="color:#CC7832">{@link Fiber::resume()}</span>、 <span class="methodname" style="color:#CC7832">{@link Fiber::throw()}</span>    将执行切换到当前 fiber 时，提供给本方法的值，也将是这几个方法所返回的值，  </p>  <p class="para">   当 fiber 恢复后，此方法的返回值是 <span class="methodname" style="color:#CC7832">{@link Fiber::resume()}</span> 所提供的值。   如果 fiber 使用 <span class="methodname" style="color:#CC7832">{@link Fiber::throw()}</span> 恢复，则把传入的异常在调用本方法的位置抛出。  </p>  <p class="para">   如果此方法是用 fiber 外部调用，将会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.fibererror.php" class="classname">FiberError</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-fiber.suspend-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">value</span></dt>    <dd>     <span>      该值会在调用 <span class="methodname" style="color:#CC7832">{@link Fiber::start()}</span>、       <span class="methodname" style="color:#CC7832">{@link Fiber::resume()}</span>、 <span class="methodname" style="color:#CC7832">{@link Fiber::throw()}</span> 时作为返回值，并将执行切换到当前 fiber。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-fiber.suspend-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   提供给 <span class="methodname" style="color:#CC7832">{@link Fiber::resume()}</span> 的值。  </p> </div></div>
     * @return TResume Value provided to {@see Fiber::resume()}.*/
    public static function suspend(mixed $value = null): mixed {}
}

/**
*<div id="class.fibererror" class="reference"> <h1 class="title">FiberError</h1>  <div class="partintro"><p class="verinfo">(PHP 8 &gt;= 8.1.0)</p>  <div class="section" id="fibererror.intro">   <h2 class="title">简介</h2>   <p class="para">    当在 <span class="classname"><a href="https://www.php.net/manual/zh/class.fiber.php" class="classname">Fiber</a></span> 上执行无效操作时，会抛出    <span class="ooclass"><span class="classname"><strong class="classname">FiberError</strong></span></span>。   </p>  </div>  <div class="section" id="fibererror.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">final</span>     <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">FiberError</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/fibererror.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>()</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Error::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link FiberError::__construct} — 不允许直接实例化的构造函数</li></ul></div>
*/
final class FiberError extends Error
{
    public function __construct() {}
}

/**
*<div id="class.returntypewillchange" class="reference"> <h1 class="title">ReturnTypeWillChange 类</h1>  <div class="partintro"><p class="verinfo">(PHP 8 &gt;= 8.1.0)</p>  <div class="section" id="returntypewillchange.intro">   <h2 class="title">简介</h2>   <p class="para">    大多数非 final 内部方法现在需要重写方法来声明兼容的返回类型，否则在继承验证期间会发出弃用通知。    如果由于 PHP 跨版本兼容性问题而无法为重写方法声明返回类型，可以添加 <span>#[\ReturnTypeWillChange]</span>    属性以消除弃用通知。   </p>  </div>  <div class="section" id="returntypewillchange.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">final</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">ReturnTypeWillChange</strong></strong>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/returntypewillchange.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>()</div>   }</div>  </div>  <div class="section" id="returntypewillchange.seealso">   <h2 class="title">参见</h2>   <p class="para"><a href="https://www.php.net/manual/zh/language.attributes.php" class="link">注解概览</a></p>  </div> </div>  <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ReturnTypeWillChange::__construct} — 构造新的 ReturnTypeWillChange 注解实例</li></ul></div>
*/
final class ReturnTypeWillChange
{
    public function __construct() {}
}

/**
*<div id="class.allowdynamicproperties" class="reference"> <h1 class="title">AllowDynamicProperties 类</h1>  <div class="partintro"><p class="verinfo">(PHP 8 &gt;= 8.2.0)</p>  <div class="section" id="allowdynamicproperties.intro">   <h2 class="title">简介</h2>   <p class="para">    此注解用于标记 class，允许<a href="https://www.php.net/manual/zh/language.oop5.properties.php#language.oop5.properties.dynamic-properties" class="link">动态属性</a>。   </p>  </div>  <div class="section" id="allowdynamicproperties.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">final</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">AllowDynamicProperties</strong></strong>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/allowdynamicproperties.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>()</div>   }</div>  </div>  <div class="section">   <h2 class="title">示例</h2>   <p class="para">    从 PHP 8.2.0 起弃用动态属性，因此在不使用此注解标记类的情况下使用动态属性将发出弃用通知。   </p>   <div class="example" id="example-1232">    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">DefaultBehaviour </span><span style="color: #007700">{ }<br /><br />#[</span><span style="color: #9876AA">\AllowDynamicProperties</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">ClassAllowsDynamicProperties </span><span style="color: #007700">{ }<br /><br /></span><span style="color: #9876AA">$o1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">DefaultBehaviour</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$o2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">ClassAllowsDynamicProperties</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$o1</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">nonExistingProp </span><span style="color: #007700">= </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o2</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">nonExistingProp </span><span style="color: #007700">= </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例在 PHP 8.2 中的输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Deprecated: Creation of dynamic property DefaultBehaviour::$nonExistingProp is deprecated in file on line 10<br></span></div>    </div>   </div>  </div>  <div class="section" id="allowdynamicproperties.seealso">   <h2 class="title">参见</h2>   <p class="para"><a href="https://www.php.net/manual/zh/language.attributes.php" class="link">注解概览</a></p>  </div> </div>  <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link AllowDynamicProperties::__construct} — 构造新的 AllowDynamicProperties 注解实例</li></ul></div>
*/
final class AllowDynamicProperties
{
    public function __construct() {}
}

/**
*<div id="class.sensitiveparameter" class="reference"> <h1 class="title">SensitiveParameter 类</h1>  <div class="partintro"><p class="verinfo">(PHP 8 &gt;= 8.2.0)</p>  <div class="section" id="sensitiveparameter.intro">   <h2 class="title">简介</h2>   <p class="para">        该注解用于标记敏感参数，如果出现在栈跟踪中，则应编辑其值。   </p>  </div>  <div class="section" id="sensitiveparameter.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">final</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">SensitiveParameter</strong></strong>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/sensitiveparameter.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>()</div>   }</div>  </div>  <div class="section">   <h2 class="title">示例</h2>   <div class="example" id="example-1235">    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">function </span><span style="color: #9876AA">defaultBehavior</span><span style="color: #007700">(<br />    </span><span style="color: #9876AA">string $secret</span><span style="color: #007700">,<br />    </span><span style="color: #9876AA">string $normal<br /></span><span style="color: #007700">) {<br />    throw new </span><span style="color: #9876AA">Exception</span><span style="color: #007700">(</span><span style="color: #DD0000">'Error!'</span><span style="color: #007700">);<br />}<br /><br />function </span><span style="color: #9876AA">sensitiveParametersWithAttribute</span><span style="color: #007700">(<br />    #[</span><span style="color: #9876AA">\SensitiveParameter</span><span style="color: #007700">]<br />    </span><span style="color: #9876AA">string $secret</span><span style="color: #007700">,<br />    </span><span style="color: #9876AA">string $normal<br /></span><span style="color: #007700">) {<br />    throw new </span><span style="color: #9876AA">Exception</span><span style="color: #007700">(</span><span style="color: #DD0000">'Error!'</span><span style="color: #007700">);<br />}<br /><br />try {<br />    </span><span style="color: #9876AA">defaultBehavior</span><span style="color: #007700">(</span><span style="color: #DD0000">'password'</span><span style="color: #007700">, </span><span style="color: #DD0000">'normal'</span><span style="color: #007700">);<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$e</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /><br />try {<br />    </span><span style="color: #9876AA">sensitiveParametersWithAttribute</span><span style="color: #007700">(</span><span style="color: #DD0000">'password'</span><span style="color: #007700">, </span><span style="color: #DD0000">'normal'</span><span style="color: #007700">);<br />} catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$e</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>上述示例在 PHP 8.2 中的输出类似于于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Exception: Error! in example.php:7<br>Stack trace:<br>#0 example.php(19): defaultBehavior(&#039;password&#039;, &#039;normal&#039;)<br>#1 {main}<br><br>Exception: Error! in example.php:15<br>Stack trace:<br>#0 example.php(25): sensitiveParametersWithAttribute(Object(SensitiveParameterValue), &#039;normal&#039;)<br>#1 {main}<br></span></div>    </div>   </div>  </div>  <div class="section" id="sensitiveparameter.seealso">   <h2 class="title">参见</h2>   <p class="para">    <ul class="simplelist">     <li class="member"><a href="https://www.php.net/manual/zh/language.attributes.php" class="link">注解概览</a></li>     <li class="member"><span class="classname"><a href="https://www.php.net/manual/zh/class.sensitiveparametervalue.php" class="classname">SensitiveParameterValue</a></span></li>    </ul>   </p>  </div> </div>  <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link SensitiveParameter::__construct} — Construct a new SensitiveParameter attribute instance</li></ul></div>
*/
final class SensitiveParameter
{
    public function __construct() {}
}

/**
*<div id="class.sensitiveparametervalue" class="reference"> <h1 class="title">The SensitiveParameterValue class</h1>  <div class="partintro"><p class="verinfo">(PHP 8 &gt;= 8.2.0)</p>  <div class="section" id="sensitiveparametervalue.intro">   <h2 class="title">简介</h2>   <p class="para">    The <span class="classname"><strong class="classname">SensitiveParameterValue</strong></span> class allows wrapping sensitive    values to protect them against accidental exposure.   </p>   <p class="para">    Values of parameters having the <span class="classname"><a href="https://www.php.net/manual/zh/class.sensitiveparameter.php" class="classname">SensitiveParameter</a></span> attribute    will automatically be wrapped inside of a <span class="classname"><strong class="classname">SensitiveParameterValue</strong></span>    object within stack traces.   </p>  </div>  <div class="section" id="sensitiveparametervalue.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">final</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">SensitiveParameterValue</strong></strong>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">private</span>     <span class="modifier">readonly</span>     <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.sensitiveparametervalue.php#sensitiveparametervalue.props.value">$<var class="varname">value</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/sensitiveparametervalue.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/sensitiveparametervalue.debuginfo.php" class="methodname" style="color:#CC7832">__debugInfo</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/sensitiveparametervalue.getvalue.php" class="methodname" style="color:#CC7832">getValue</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>   }</div>  </div>  <div class="section" id="sensitiveparametervalue.props">   <h2 class="title">属性</h2>   <dl>         <dt id="sensitiveparametervalue.props.value"><var class="varname">value</var></dt>     <dd>      <p class="para">       The sensitive value to be protected against accidental exposure.      </p>     </dd>       </dl>  </div> </div>   <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link SensitiveParameterValue::__construct} — Constructs a new SensitiveParameterValue object</li><li>{@link SensitiveParameterValue::__debugInfo} — Protects the sensitive value against accidental exposure</li><li>{@link SensitiveParameterValue::getValue} — Returns the sensitive value</li></ul></div>
*/
final class SensitiveParameterValue
{
    private readonly mixed $value;

    public function __construct(mixed $value) {}

/**
*<div id="sensitiveparametervalue.getvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">SensitiveParameterValue::getValue</h1>  <p class="verinfo">(PHP 8 &gt;= 8.2.0)</p><p class="refpurpose"><span class="refname">SensitiveParameterValue::getValue</span> &mdash; <span class="dc-title">Returns the sensitive value</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-sensitiveparametervalue.getvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SensitiveParameterValue::getValue</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-sensitiveparametervalue.getvalue-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-sensitiveparametervalue.getvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The sensitive value.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-sensitiveparametervalue.getvalue-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1229">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SensitiveParameterValue::getValue()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">\SensitiveParameterValue</span><span style="color: #007700">(</span><span style="color: #DD0000">'secret'</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #DD0000">"The protected value is: "</span><span style="color: #007700">, </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getValue</span><span style="color: #007700">(), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>The protected value is: secret<br></span></div>    </div>   </div>  </span> </div></div>
*/
    public function getValue(): mixed {}

    public function __debugInfo(): array {}
}

/**
 * @since 8.3
 */
#[Attribute(Attribute::TARGET_METHOD)]
final class Override
{
    public function __construct() {}
}
