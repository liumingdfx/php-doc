<?php

/**
 * The constants below are defined by this extension,
 * and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
 * @link https://secure.php.net/manual/en/yar.constants.php
 */
define('YAR_VERSION', '2.2.0');
define('YAR_CLIENT_PROTOCOL_HTTP', 1);
define('YAR_OPT_PACKAGER', 1);
define('YAR_OPT_TIMEOUT', 4);
define('YAR_OPT_CONNECT_TIMEOUT', 8);
define('YAR_OPT_PERSISTENT', 2);
/**
*       自 2.0.4 起      
*/
define('YAR_OPT_HEADER', 16);
define('YAR_PACKAGER_PHP', 'PHP');
define('YAR_PACKAGER_JSON', 'JSON');
define('YAR_ERR_OUTPUT', 8);
define('YAR_ERR_OKEY', 0);
define('YAR_ERR_TRANSPORT', 16);
define('YAR_ERR_REQUEST', 4);
define('YAR_ERR_PROTOCOL', 2);
define('YAR_ERR_PACKAGER', 1);
define('YAR_ERR_EXCEPTION', 64);

define('YAR_CLIENT_PROTOCOL_TCP', 2);
define('YAR_CLIENT_PROTOCOL_UNIX', 4);

define('YAR_OPT_RESOLVE', 32);
/**
*<div id="class.yar-server" class="reference"> <h1 class="title">The Yar_Server class</h1>  <div class="partintro"><p class="verinfo">(No version information available, might only be in Git)</p>  <div class="section" id="yar-server.intro">   <h2 class="title">简介</h2>   <p class="para">   </p>  </div>  <div class="section" id="yar-server.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">Yar_Server</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.yar-server.php#yar-server.props.executor">$<var class="varname">_executor</var></a></var>;</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/yar-server.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">Object</span> <span class="parameter" style="color:#3A95FF">$obj</span></span>)</div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/yar-server.handle.php" class="methodname" style="color:#CC7832">handle</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div>    <div class="section" id="yar-server.props">   <h2 class="title">属性</h2>   <dl>         <dt id="yar-server.props.executor"><var class="varname">_executor</var></dt>     <dd>      <p class="para"/>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Yar_Server::__construct} — 注册 HTTP RPC Server</li><li>{@link Yar_Server::handle} — 启动HTTP RPC Server</li></ul></div>
*/
class Yar_Server
{
    protected $_executor;

    /**
     * Register a server
     * Set up a Yar HTTP RPC Server, All the public methods of $obj will be register as a RPC service.
     *
     * Yar_Server constructor.
     * @param object $obj An Object, all public methods of its will be registered as RPC services.
     * @link https://secure.php.net/manual/en/yar-server.construct.php
     */
    final public function __construct($obj, $protocol = null) {}

/**
*<div id="yar-server.handle" class="refentry"> <div class="refnamediv">  <h1 class="refname">Yar_Server::handle</h1>  <p class="verinfo">(PECL yar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Yar_Server::handle</span> &mdash; <span class="dc-title">启动HTTP RPC Server</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-yar-server.handle-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Yar_Server::handle</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   启动服务, 开始接受客户端的调用请求.   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <p class="para">     来自客户端的调用, 都是通过 POST 请求发送过来的.     如果一个 GET 请求访问到这个 Server, 那在 yar.expose_info 开启的情况下,     这个服务的 Server Info 信息会被展现.    </p>   </p></blockquote>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-yar-server.handle-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-yar-server.handle-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   boolean  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-yar-server.handle-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Yar_Server::handle()</strong></span> 示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">API </span><span style="color: #007700">{<br />    </span><span style="color: #FF8000">//*<br />     * the doc info will be generated automatically into service info page.<br />     * @params <br />     * @return<br />     <br />    </span><span style="color: #007700">public function </span><span style="color: #9876AA">some_method</span><span style="color: #007700">(</span><span style="color: #9876AA">$parameter</span><span style="color: #007700">, </span><span style="color: #9876AA">$option </span><span style="color: #007700">= </span><span style="color: #DD0000">"foo"</span><span style="color: #007700">) {<br />    }<br /><br />    protected function </span><span style="color: #9876AA">client_can_not_see</span><span style="color: #007700">() {<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$service </span><span style="color: #007700">= new </span><span style="color: #9876AA">Yar_Server</span><span style="color: #007700">(new </span><span style="color: #9876AA">API</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">$service</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">handle</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-yar-server.handle-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="methodname" style="color:#CC7832">{@link Yar_Server::__construct()} - 注册 HTTP RPC Server</span></li>  </ul> </div></div>
     * @return bool*/
    public function handle() {}
}

/**
*<div id="class.yar-client" class="reference"> <h1 class="title">Yar_Client 类</h1>  <div class="partintro"><p class="verinfo">(No version information available, might only be in Git)</p>  <div class="section" id="yar-client.intro">   <h2 class="title">简介</h2>   <p class="para">   </p>  </div>  <div class="section" id="yar-client.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">Yar_Client</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.yar-client.php#yar-client.props.protocol">$<var class="varname">_protocol</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">protected</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.yar-client.php#yar-client.props.uri">$<var class="varname">_uri</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">protected</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.yar-client.php#yar-client.props.options">$<var class="varname">_options</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">protected</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.yar-client.php#yar-client.props.running">$<var class="varname">_running</var></a></var>;</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/yar-client.call.php" class="methodname" style="color:#CC7832">__call</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$method</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$parameters</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/yar-client.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$url</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$options</span><span class="initializer"> = ?</span></span>)</div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/yar-client.setopt.php" class="methodname" style="color:#CC7832">setOpt</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.yar-client.php" class="type Yar_Client" style="color:#EAB766">Yar_Client</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>   }</div>  </div>    <div class="section" id="yar-client.props">   <h2 class="title">属性</h2>   <dl>         <dt id="yar-client.props.protocol"><var class="varname">_protocol</var></dt>     <dd>      <p class="para"/>     </dd>             <dt id="yar-client.props.uri"><var class="varname">_uri</var></dt>     <dd>      <p class="para"/>     </dd>             <dt id="yar-client.props.options"><var class="varname">_options</var></dt>     <dd>      <p class="para"/>     </dd>             <dt id="yar-client.props.running"><var class="varname">_running</var></dt>     <dd>      <p class="para"/>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Yar_Client::__call} — 调用远程服务</li><li>{@link Yar_Client::__construct} — 创建一个客户端实例</li><li>{@link Yar_Client::setOpt} — 设置调用的配置</li></ul></div>
*/
class Yar_Client
{
    protected $_protocol;
    protected $_uri;
    protected $_options;
    protected $_running;

    /**
     * Call service
     * Issue a call to remote RPC method.
     *
     * @param string $method Remote RPC method name.
     * @param array $parameters Parameters.
     * @link https://secure.php.net/manual/en/yar-client.call.php
     */
    public function __call($method, $parameters) {}

    /**
     * Create a client
     * Yar_Client constructor.
     * @param string $url Yar Server URL.
     * @link https://secure.php.net/manual/en/yar-client.construct.php
     */
    final public function __construct($url, $async = null) {}

/**
*<div id="yar-client.call" class="refentry"> <div class="refnamediv">  <h1 class="refname">Yar_Client::__call</h1>  <p class="verinfo">(PECL yar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Yar_Client::__call</span> &mdash; <span class="dc-title">调用远程服务</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-yar-client.call-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Yar_Client::__call</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$method</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$parameters</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   发起一个 RPC 调用, 并且得到返回值. 如果服务端的远程调用抛出异常,   那么本地也会相应的抛出一个 <span class="classname"><a href="https://www.php.net/manual/zh/class.yar-server-exception.php" class="classname">Yar_Server_Exception</a></span> 异常。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-yar-client.call-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">method</span></dt>    <dd>     <span>      远程服务的名字.     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">parameters</span></dt>    <dd>     <p class="para">      调用参数.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-yar-client.call-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-yar-client.call-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Yar_Client::__call()</strong></span> 示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$client </span><span style="color: #007700">= new </span><span style="color: #9876AA">Yar_Client</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://host/api/"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 调用远程服务的some_method服务 <br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$client</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">some_method</span><span style="color: #007700">(</span><span style="color: #DD0000">"parameter"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-yar-client.call-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="methodname" style="color:#CC7832">{@link Yar_Client::setOpt()} - 设置调用的配置</span></li>  </ul> </div></div>
*/
    public function call($method, $parameters) {}

/**
*<div id="yar-client.setopt" class="refentry"> <div class="refnamediv">  <h1 class="refname">Yar_Client::setOpt</h1>  <p class="verinfo">(PECL yar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Yar_Client::setOpt</span> &mdash; <span class="dc-title">设置调用的配置</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-yar-client.setopt-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Yar_Client::setOpt</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.yar-client.php" class="type Yar_Client" style="color:#EAB766">Yar_Client</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   设置调用远程服务的一些配置，比如超时值、打包类型等。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-yar-client.setopt-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">name</span></dt>    <dd>     <span>      可以是：       <strong><span>YAR_OPT_PACKAGER</span></strong>、       <strong><span>YAR_OPT_PERSISTENT</span></strong>（需要服务端支持）、       <strong><span>YAR_OPT_TIMEOUT</span></strong>、       <strong><span>YAR_OPT_CONNECT_TIMEOUT</span></strong>、       <strong><span>YAR_OPT_HEADER</span></strong>（自 2.0.4 起）、       <strong><span>YAR_OPT_PROXY</span></strong>（自 2.2.0 起）     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">value</span></dt>    <dd>     <p class="para">           </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-yar-client.setopt-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <var class="varname">$this</var> 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-yar-client.setopt-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Yar_Client::setOpt()</strong></span> 示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$cient </span><span style="color: #007700">= new </span><span style="color: #9876AA">Yar_Client</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://host/api/"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//Set timeout to 1s<br /></span><span style="color: #9876AA">$client</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">SetOpt</span><span style="color: #007700">(</span><span style="color: #9876AA">YAR_OPT_CONNECT_TIMEOUT</span><span style="color: #007700">, </span><span style="color: #9876AA">1000</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//Set packager to JSON<br /></span><span style="color: #9876AA">$client</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">SetOpt</span><span style="color: #007700">(</span><span style="color: #9876AA">YAR_OPT_PACKAGER</span><span style="color: #007700">, </span><span style="color: #DD0000">"json"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//Set Custom headers<br /></span><span style="color: #9876AA">$client</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">SetOpt</span><span style="color: #007700">(</span><span style="color: #9876AA">YAR_OPT_HEADER</span><span style="color: #007700">, array(</span><span style="color: #DD0000">"hr1: val1"</span><span style="color: #007700">, </span><span style="color: #DD0000">"hd2: val2"</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// Set Http Proxy<br /></span><span style="color: #9876AA">$client</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">SetOpt</span><span style="color: #007700">(</span><span style="color: #9876AA">YAR_OPT_PROXY</span><span style="color: #007700">, </span><span style="color: #DD0000">"127.0.0.1:8888"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// call remote service <br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$client</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">some_method</span><span style="color: #007700">(</span><span style="color: #DD0000">"parameter"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-yar-client.setopt-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="methodname" style="color:#CC7832">{@link Yar_Client::__call()} - 调用远程服务</span></li>  </ul> </div></div>
     * @return static|false Returns $this on success or FALSE on failure.*/
    public function setOpt($type, $value) {}

    public function getOpt($type) {}
}

/**
*<div id="class.yar-concurrent-client" class="reference"> <h1 class="title">Yar_Concurrent_Client 类</h1>  <div class="partintro"><p class="verinfo">(No version information available, might only be in Git)</p>  <div class="section" id="yar-concurrent-client.intro">   <h2 class="title">简介</h2>   <p class="para">   </p>  </div>  <div class="section" id="yar-concurrent-client.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">Yar_Concurrent_Client</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">static</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.yar-concurrent-client.php#yar-concurrent-client.props.callstack">$<var class="varname">_callstack</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">static</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.yar-concurrent-client.php#yar-concurrent-client.props.callback">$<var class="varname">_callback</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">static</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.yar-concurrent-client.php#yar-concurrent-client.props.error-callback">$<var class="varname">_error_callback</var></a></var>;</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/yar-concurrent-client.call.php" class="methodname" style="color:#CC7832">call</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$uri</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$method</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$parameters</span><span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span><span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$error_callback</span><span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$options</span><span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/yar-concurrent-client.loop.php" class="methodname" style="color:#CC7832">loop</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span><span class="initializer"> = ?</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$error_callback</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/yar-concurrent-client.reset.php" class="methodname" style="color:#CC7832">reset</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div>    <div class="section" id="yar-concurrent-client.props">   <h2 class="title">属性</h2>   <dl>         <dt id="yar-concurrent-client.props.callstack"><var class="varname">_callstack</var></dt>     <dd>      <p class="para"/>     </dd>             <dt id="yar-concurrent-client.props.callback"><var class="varname">_callback</var></dt>     <dd>      <p class="para"/>     </dd>             <dt id="yar-concurrent-client.props.error-callback"><var class="varname">_error_callback</var></dt>     <dd>      <p class="para"/>     </dd>       </dl>  </div> </div>  <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Yar_Concurrent_Client::call} — 注册一个并行的服务调用</li><li>{@link Yar_Concurrent_Client::loop} — 发送所有注册的并行调用</li><li>{@link Yar_Concurrent_Client::reset} — Clean all registered calls</li></ul></div>
*/
class Yar_Concurrent_Client
{
    protected static $_callstack;
    protected static $_callback;
    protected static $_error_callback;
    protected static $_start;

/**
*<div id="yar-concurrent-client.call" class="refentry"> <div class="refnamediv">  <h1 class="refname">Yar_Concurrent_Client::call</h1>  <p class="verinfo">(PECL yar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Yar_Concurrent_Client::call</span> &mdash; <span class="dc-title">注册一个并行的服务调用</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-yar-concurrent-client.call-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Yar_Concurrent_Client::call</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$uri</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$method</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$parameters</span><span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span><span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$error_callback</span><span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$options</span><span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   注册一个并行的(异步的)远程服务调用, 不过这个调用请求不会被立即发出,   而是会在接下来调用   <span class="methodname" style="color:#CC7832">{@link Yar_Concurrent_Client::loop()}</span>的时候才真正的发送出去.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-yar-concurrent-client.call-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">uri</span></dt>    <dd>     <span>      RPC 服务的 URI(http 或 tcp).     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">method</span></dt>    <dd>     <p class="para">      调用的服务名字(也就是服务方法名).     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">parameters</span></dt>    <dd>     <p class="para">      调用的参数.     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>    <dd>     <p class="para">      回调函数, 在远程服务的返回到达的时候被Yar调用, 从而可以处理返回内容.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-yar-concurrent-client.call-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   唯一 ID， 可用于区分到底是那个调用的返回.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-yar-concurrent-client.call-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Yar_Concurrent_Client::call()</strong></span>示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">callback</span><span style="color: #007700">(</span><span style="color: #9876AA">$retval</span><span style="color: #007700">, </span><span style="color: #9876AA">$callinfo</span><span style="color: #007700">) {<br />     </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$retval</span><span style="color: #007700">);<br />}<br /><br />function </span><span style="color: #9876AA">error_callback</span><span style="color: #007700">(</span><span style="color: #9876AA">$type</span><span style="color: #007700">, </span><span style="color: #9876AA">$error</span><span style="color: #007700">, </span><span style="color: #9876AA">$callinfo</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">error_log</span><span style="color: #007700">(</span><span style="color: #9876AA">$error</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">Yar_Concurrent_Client</span><span style="color: #007700">::</span><span style="color: #9876AA">call</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://host/api/"</span><span style="color: #007700">, </span><span style="color: #DD0000">"some_method"</span><span style="color: #007700">, array(</span><span style="color: #DD0000">"parameters"</span><span style="color: #007700">), </span><span style="color: #DD0000">"callback"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">Yar_Concurrent_Client</span><span style="color: #007700">::</span><span style="color: #9876AA">call</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://host/api/"</span><span style="color: #007700">, </span><span style="color: #DD0000">"some_method"</span><span style="color: #007700">, array(</span><span style="color: #DD0000">"parameters"</span><span style="color: #007700">));   </span><span style="color: #FF8000">// if the callback is not specificed, <br />                                                                               // callback in loop will be used<br /></span><span style="color: #9876AA">Yar_Concurrent_Client</span><span style="color: #007700">::</span><span style="color: #9876AA">call</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://host/api/"</span><span style="color: #007700">, </span><span style="color: #DD0000">"some_method"</span><span style="color: #007700">, array(</span><span style="color: #DD0000">"parameters"</span><span style="color: #007700">), </span><span style="color: #DD0000">"callback"</span><span style="color: #007700">, </span><span style="color: #9876AA">NULL</span><span style="color: #007700">, array(</span><span style="color: #9876AA">YAR_OPT_PACKAGER </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"json"</span><span style="color: #007700">));<br />                                                                               </span><span style="color: #FF8000">//this server accept json packager<br /></span><span style="color: #9876AA">Yar_Concurrent_Client</span><span style="color: #007700">::</span><span style="color: #9876AA">call</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://host/api/"</span><span style="color: #007700">, </span><span style="color: #DD0000">"some_method"</span><span style="color: #007700">, array(</span><span style="color: #DD0000">"parameters"</span><span style="color: #007700">), </span><span style="color: #DD0000">"callback"</span><span style="color: #007700">, </span><span style="color: #9876AA">NULL</span><span style="color: #007700">, array(</span><span style="color: #9876AA">YAR_OPT_TIMEOUT</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">1</span><span style="color: #007700">));<br />                                                                               </span><span style="color: #FF8000">//custom timeout <br /><br />// 这个时候请求都还没有发出<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-yar-concurrent-client.call-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="methodname" style="color:#CC7832">{@link Yar_Concurrent_Client::loop()} - 发送所有注册的并行调用</span></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link Yar_Concurrent_Client::reset()} - Clean all registered calls</span></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link Yar_Server::__construct()} - 注册 HTTP RPC Server</span></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link Yar_Server::handle()} - 启动HTTP RPC Server</span></li>  </ul> </div></div>
     * @return int An unique id, can be used to identified which call it is.*/
    public static function call($uri, $method, $parameters, callable $callback = null, callable $error_callback, array $options) {}

/**
*<div id="yar-concurrent-client.loop" class="refentry"> <div class="refnamediv">  <h1 class="refname">Yar_Concurrent_Client::loop</h1>  <p class="verinfo">(PECL yar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Yar_Concurrent_Client::loop</span> &mdash; <span class="dc-title">发送所有注册的并行调用</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-yar-concurrent-client.loop-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Yar_Concurrent_Client::loop</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span><span class="initializer"> = ?</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$error_callback</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   发送所有的已经通过   <span class="methodname" style="color:#CC7832">{@link Yar_Concurrent_Client::call()}</span> 注册的并行调用, 并且等待返回.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-yar-concurrent-client.loop-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>    <dd>     <span>      如果这个回掉函数被设置,      那么 Yar 在发送出所有的请求之后立即调用一次这个回掉函数(此时还没有任何请求返回),      调用的时候 $callinfo 参数是 NULL。     </span>     <p class="para">      如果在注册并行调用的时候制定了 callback, 那么那个 callback 有更高的优先级.     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">error_callback</span></dt>    <dd>     <p class="para">      错误回掉函数, 如果设置了, 那么 Yar 在出错的时候会调用这个回掉函数.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-yar-concurrent-client.loop-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-yar-concurrent-client.loop-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Yar_Concurrent_Client::loop()</strong></span> 示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">callback</span><span style="color: #007700">(</span><span style="color: #9876AA">$retval</span><span style="color: #007700">, </span><span style="color: #9876AA">$callinfo</span><span style="color: #007700">) {<br />     if (</span><span style="color: #9876AA">$callinfo </span><span style="color: #007700">== </span><span style="color: #9876AA">NULL</span><span style="color: #007700">) {<br />        echo </span><span style="color: #DD0000">"现在, 所有的请求都发出去了, 还没有任何请求返回\n"</span><span style="color: #007700">;<br />     } else {<br />        echo </span><span style="color: #DD0000">"这是一个远程调用的返回, 调用的服务名是 "</span><span style="color: #007700">, </span><span style="color: #9876AA">$callinfo</span><span style="color: #007700">[</span><span style="color: #DD0000">"method"</span><span style="color: #007700">], <br />             </span><span style="color: #DD0000">". 调用的 sequence 是 " </span><span style="color: #007700">, </span><span style="color: #9876AA">$callinfo</span><span style="color: #007700">[</span><span style="color: #DD0000">"sequence"</span><span style="color: #007700">] , </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$retval</span><span style="color: #007700">);<br />     }<br />} <br /><br />function </span><span style="color: #9876AA">error_callback</span><span style="color: #007700">(</span><span style="color: #9876AA">$type</span><span style="color: #007700">, </span><span style="color: #9876AA">$error</span><span style="color: #007700">, </span><span style="color: #9876AA">$callinfo</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">error_log</span><span style="color: #007700">(</span><span style="color: #9876AA">$error</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">Yar_Concurrent_Client</span><span style="color: #007700">::</span><span style="color: #9876AA">call</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://host/api/"</span><span style="color: #007700">, </span><span style="color: #DD0000">"some_method"</span><span style="color: #007700">, array(</span><span style="color: #DD0000">"parameters"</span><span style="color: #007700">), </span><span style="color: #DD0000">"callback"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">Yar_Concurrent_Client</span><span style="color: #007700">::</span><span style="color: #9876AA">call</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://host/api/"</span><span style="color: #007700">, </span><span style="color: #DD0000">"some_method"</span><span style="color: #007700">, array(</span><span style="color: #DD0000">"parameters"</span><span style="color: #007700">));   </span><span style="color: #FF8000">// if the callback is not specificed, <br />                                                                               // callback in loop will be used<br /></span><span style="color: #9876AA">Yar_Concurrent_Client</span><span style="color: #007700">::</span><span style="color: #9876AA">call</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://host/api/"</span><span style="color: #007700">, </span><span style="color: #DD0000">"some_method"</span><span style="color: #007700">, array(</span><span style="color: #DD0000">"parameters"</span><span style="color: #007700">), </span><span style="color: #DD0000">"callback"</span><span style="color: #007700">, </span><span style="color: #9876AA">NULL</span><span style="color: #007700">, array(</span><span style="color: #9876AA">YAR_OPT_PACKAGER </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"json"</span><span style="color: #007700">));<br />                                                                               </span><span style="color: #FF8000">//this server accept json packager<br /></span><span style="color: #9876AA">Yar_Concurrent_Client</span><span style="color: #007700">::</span><span style="color: #9876AA">call</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://host/api/"</span><span style="color: #007700">, </span><span style="color: #DD0000">"some_method"</span><span style="color: #007700">, array(</span><span style="color: #DD0000">"parameters"</span><span style="color: #007700">), </span><span style="color: #DD0000">"callback"</span><span style="color: #007700">, </span><span style="color: #9876AA">NULL</span><span style="color: #007700">, array(</span><span style="color: #9876AA">YAR_OPT_TIMEOUT</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">1</span><span style="color: #007700">));<br />                                                                               </span><span style="color: #FF8000">//custom timeout <br /><br /></span><span style="color: #9876AA">Yar_Concurrent_Client</span><span style="color: #007700">::</span><span style="color: #9876AA">loop</span><span style="color: #007700">(</span><span style="color: #DD0000">"callback"</span><span style="color: #007700">, </span><span style="color: #DD0000">"error_callback"</span><span style="color: #007700">); </span><span style="color: #FF8000">//send the requests, <br />                                                           //the error_callback is optional<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>现在, 所有的请求都发出去了, 还没有任何请求返回<br>这是一个远程调用的返回, 调用的服务名是 some_method, 调用的 sequence 是 4<br>string(11) &quot;some_method&quot;<br>这是一个远程调用的返回, 调用的服务名是 some_method, 调用的 sequence 是 1<br>string(11) &quot;some_method&quot;<br>这是一个远程调用的返回, 调用的服务名是 some_method, 调用的 sequence 是 2<br>string(11) &quot;some_method&quot;<br>这是一个远程调用的返回, 调用的服务名是 some_method, 调用的 sequence 是 3<br>string(11) &quot;some_method&quot;<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-yar-concurrent-client.loop-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="methodname" style="color:#CC7832">{@link Yar_Concurrent_Client::call()} - 注册一个并行的服务调用</span></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link Yar_Concurrent_Client::reset()} - Clean all registered calls</span></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link Yar_Server::__construct()} - 注册 HTTP RPC Server</span></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link Yar_Server::handle()} - 启动HTTP RPC Server</span></li>  </ul> </div></div>
     * @return bool*/
    public static function loop($callback = null, $error_callback = null) {}

/**
*<div id="yar-concurrent-client.reset" class="refentry"> <div class="refnamediv">  <h1 class="refname">Yar_Concurrent_Client::reset</h1>  <p class="verinfo">(PECL yar &gt;= 1.2.4)</p><p class="refpurpose"><span class="refname">Yar_Concurrent_Client::reset</span> &mdash; <span class="dc-title">Clean all registered calls</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-yar-concurrent-client.reset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Yar_Concurrent_Client::reset</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Clean all registered calls  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-yar-concurrent-client.reset-parameters">  <h3 class="title">参数</h3> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-yar-concurrent-client.reset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-yar-concurrent-client.reset-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Yar_Concurrent_Client::reset()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-yar-concurrent-client.reset-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="methodname" style="color:#CC7832">{@link Yar_Concurrent_Client::call()} - 注册一个并行的服务调用</span></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link Yar_Concurrent_Client::loop()} - 发送所有注册的并行调用</span></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link Yar_Server::__construct()} - 注册 HTTP RPC Server</span></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link Yar_Server::handle()} - 启动HTTP RPC Server</span></li>  </ul> </div></div>
     * @return bool*/
    public static function reset() {}
}

/**
*<div id="class.yar-server-exception" class="reference"> <h1 class="title">Yar_Server_Exception 类</h1>  <div class="partintro"><p class="verinfo">(No version information available, might only be in Git)</p>  <div class="section" id="yar-server-exception.intro">   <h2 class="title">简介</h2>   <p class="para">     如果服务端抛出异常，将会在客户端抛出 Yar_Server_Exception。   </p>  </div>  <div class="section" id="yar-server-exception.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">Yar_Server_Exception</strong>     </span>          <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://www.php.net/manual/zh/class.exception.php" class="classname">Exception</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.yar-server-exception.php#yar-server-exception.props.type">$<var class="varname">_type</var></a></var>;</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/yar-server-exception.gettype.php" class="methodname" style="color:#CC7832">getType</a></span>(): <span class="type" style="color:#EAB766">string</span></div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>    <div class="section" id="yar-server-exception.props">   <h2 class="title">属性</h2>   <dl>         <dt id="yar-server-exception.props.message"><var class="varname">message</var></dt>     <dd>      <p class="para"/>     </dd>             <dt id="yar-server-exception.props.code"><var class="varname">code</var></dt>     <dd>      <p class="para"/>     </dd>             <dt id="yar-server-exception.props.file"><var class="varname">file</var></dt>     <dd>      <p class="para"/>     </dd>             <dt id="yar-server-exception.props.line"><var class="varname">line</var></dt>     <dd>      <p class="para"/>     </dd>             <dt id="yar-server-exception.props.type"><var class="varname">_type</var></dt>     <dd>      <p class="para"/>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Yar_Server_Exception::getType} — 检索异常的原始类型</li></ul></div>
*/
class Yar_Server_Exception extends Exception
{
    protected $_type;

/**
*<div id="yar-server-exception.gettype" class="refentry"> <div class="refnamediv">  <h1 class="refname">Yar_Server_Exception::getType</h1>  <p class="verinfo">(PECL yar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Yar_Server_Exception::getType</span> &mdash; <span class="dc-title">检索异常的原始类型</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-yar-server-exception.gettype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Yar_Server_Exception::getType</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   当服务端的服务函数抛出异常的时候,   客户端本地会响应的抛出一个 <span class="classname"><a href="https://www.php.net/manual/zh/class.yar-server-exception.php" class="classname">Yar_Server_Exception</a></span> 异常.   有一个属性, 标明了服务端异常的类型. 这个方法就是获取这个异常类型.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-yar-server-exception.gettype-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-yar-server-exception.gettype-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   string  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-yar-server-exception.gettype-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Yar_Server_Exception::getType()</strong></span> 示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000">//Server.php<br /><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Custom_Exception </span><span style="color: #007700">extends </span><span style="color: #9876AA">Exception </span><span style="color: #007700">{};<br /><br />class </span><span style="color: #9876AA">API </span><span style="color: #007700">{<br />    public function </span><span style="color: #9876AA">throw_exception</span><span style="color: #007700">(</span><span style="color: #9876AA">$name</span><span style="color: #007700">) {<br />        throw new </span><span style="color: #9876AA">Custom_Exception</span><span style="color: #007700">(</span><span style="color: #9876AA">$name</span><span style="color: #007700">);<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$service </span><span style="color: #007700">= new </span><span style="color: #9876AA">Yar_Server</span><span style="color: #007700">(new </span><span style="color: #9876AA">API</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">$service</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">handle</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;<br /></span><br />//Client.php<br /><span style="color: #9876AA">&lt;?php<br />$client </span><span style="color: #007700">= new </span><span style="color: #9876AA">Yar_Client</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://host/api.php"</span><span style="color: #007700">);<br /><br />try {<br />    </span><span style="color: #9876AA">$client</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">throw_exception</span><span style="color: #007700">(</span><span style="color: #DD0000">"client"</span><span style="color: #007700">);<br />} catch (</span><span style="color: #9876AA">Yar_Server_Exception $e</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getType</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">());<br />}</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(16) &quot;Custom_Exception&quot;<br>string(6) &quot;client&quot;<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-yar-server-exception.gettype-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"/>  </ul> </div></div>
     * @return string*/
    public function getType() {}
}

/**
*<div id="class.yar-client-exception" class="reference"> <h1 class="title">Yar_Client_Exception 类</h1>  <div class="partintro"><p class="verinfo">(No version information available, might only be in Git)</p>  <div class="section" id="yar-client-exception.intro">   <h2 class="title">简介</h2>   <p class="para">   </p>  </div>  <div class="section" id="yar-client-exception.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">Yar_Client_Exception</strong>     </span>          <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://www.php.net/manual/zh/class.exception.php" class="classname">Exception</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/yar-client-exception.gettype.php" class="methodname" style="color:#CC7832">getType</a></span>(): <span class="type" style="color:#EAB766">string</span></div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>    <div class="section" id="yar-client-exception.props">   <h2 class="title">属性</h2>   <dl>         <dt id="yar-client-exception.props.message"><var class="varname">message</var></dt>     <dd>      <p class="para"/>     </dd>             <dt id="yar-client-exception.props.code"><var class="varname">code</var></dt>     <dd>      <p class="para"/>     </dd>             <dt id="yar-client-exception.props.file"><var class="varname">file</var></dt>     <dd>      <p class="para"/>     </dd>             <dt id="yar-client-exception.props.line"><var class="varname">line</var></dt>     <dd>      <p class="para"/>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Yar_Client_Exception::getType} — 检索异常的类型</li></ul></div>
*/
class Yar_Client_Exception extends Exception
{
/**
*<div id="yar-client-exception.gettype" class="refentry"> <div class="refnamediv">  <h1 class="refname">Yar_Client_Exception::getType</h1>  <p class="verinfo">(PECL yar &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Yar_Client_Exception::getType</span> &mdash; <span class="dc-title">检索异常的类型</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-yar-client-exception.gettype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Yar_Client_Exception::getType</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-yar-client-exception.gettype-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-yar-client-exception.gettype-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span>&quot;Yar_Exception_Client&quot;</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-yar-client-exception.gettype-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Yar_Client_Exception::getType()</strong></span> 示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">// ... <br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>...<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-yar-client-exception.gettype-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="methodname" style="color:#CC7832"><strong>Yaf_Server_Exception::getType()</strong></span></li>  </ul> </div></div>
     * @return string "Yar_Exception_Client".*/
    public function getType() {}
}

class Yar_Server_Request_Exception extends Yar_Server_Exception {}

class Yar_Server_Protocol_Exception extends Yar_Server_Exception {}

class Yar_Server_Packager_Exception extends Yar_Server_Exception {}

class Yar_Server_Output_Exception extends Yar_Server_Exception {}

class Yar_Client_Transport_Exception extends Yar_Client_Exception {}

class Yar_Client_Packager_Exception extends Yar_Client_Exception {}

class Yar_Client_Protocol_Exception extends Yar_Client_Exception {}
