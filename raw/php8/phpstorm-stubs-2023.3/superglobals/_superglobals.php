<?php
/**
*<div id="reserved.variables.globals" class="refentry"> <div class="refnamediv">  <h1 class="refname">$GLOBALS</h1>  <p class="refpurpose"><span class="refname">$GLOBALS</span> &mdash; <span class="dc-title">引用全局作用域中可用的全部变量</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reserved.variables.globals-description">  <h3 class="title">说明</h3>  <p class="para">   关联数组 <span class="type" style="color:#EAB766">array</span>，包含当前脚本内定义成全局范围的所有变量的引用。   数组的键就是变量的名字。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reserved.variables.globals-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1076">    <p><strong>示例 #1 <var class="varname">$GLOBALS</var> 范例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">test</span><span style="color: #007700">() {<br />    </span><span style="color: #9876AA">$foo </span><span style="color: #007700">= </span><span style="color: #DD0000">"local variable"</span><span style="color: #007700">;<br /><br />    echo </span><span style="color: #DD0000">'$foo in global scope: ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$GLOBALS</span><span style="color: #007700">[</span><span style="color: #DD0000">"foo"</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />    echo </span><span style="color: #DD0000">'$foo in current scope: ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$foo </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$foo </span><span style="color: #007700">= </span><span style="color: #DD0000">"Example content"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">test</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>$foo in global scope: Example content<br>$foo in current scope: local variable<br></span></div>    </div>   </div>  </span>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    从 PHP 8.1.0 起，不再支持对整个 <var class="varname">$GLOBALS</var> 数组的写访问：    <div class="example" id="example-1079">     <p><strong>示例 #2 写入整个 <var class="varname">$GLOBALS</var> 将会导致错误。</strong></p>     <div class="example-contents"> <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /> </span><span style="color: #FF8000">// 生成编译时错误：<br /> </span><span style="color: #9876AA">$GLOBALS </span><span style="color: #007700">= [];<br /> </span><span style="color: #9876AA">$GLOBALS </span><span style="color: #007700">+= [];<br /> </span><span style="color: #9876AA">$GLOBALS </span><span style="color: #007700">=&amp; </span><span style="color: #9876AA">$x</span><span style="color: #007700">;<br /> </span><span style="color: #9876AA">$x </span><span style="color: #007700">=&amp; </span><span style="color: #9876AA">$GLOBALS</span><span style="color: #007700">;<br /> unset(</span><span style="color: #9876AA">$GLOBALS</span><span style="color: #007700">);<br /> </span><span style="color: #9876AA">array_pop</span><span style="color: #007700">(</span><span style="color: #9876AA">$GLOBALS</span><span style="color: #007700">);<br /> </span><span style="color: #FF8000">// ...以及对 $GLOBALS 的任何其他写入/读写操作<br /> </span><span style="color: #9876AA">?&gt;</span></span></span></div>     </div>    </div>   </p>  </div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-reserved.variables.globals-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">“Superglobal”也称为自动化的全局变量。这就表示其在脚本的所有作用域中都是可用的。不需要在函数或方法中用<strong class="command">global $variable;</strong> 来访问它。</p></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <strong>变量可用性</strong><br />   <p class="para">    与所有其他<a href="https://www.php.net/manual/zh/language.variables.superglobals.php" class="link">超全局变量</a>不同，<var class="varname">$GLOBALS</var>在PHP中总是可用的。    </p>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">     从 PHP 8.1.0 起， <var class="varname">$GLOBALS</var> 现在是全局符号表的只读副本。     也就是说，全局变量不能通过副本进行修改。     在之前的版本中，<var class="varname">$GLOBALS</var> 数组和 PHP 数组通常传值的行为不一样，全局变量可通过副本修改。     <div class="informalexample">     <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// PHP 8.1.0 之前<br /></span><span style="color: #9876AA">$a </span><span style="color: #007700">= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$globals </span><span style="color: #007700">= </span><span style="color: #9876AA">$GLOBALS</span><span style="color: #007700">; </span><span style="color: #FF8000">// 表面意义的按值复制<br /></span><span style="color: #9876AA">$globals</span><span style="color: #007700">[</span><span style="color: #DD0000">'a'</span><span style="color: #007700">] = </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">); </span><span style="color: #FF8000">// int(2)<br /><br />// 从 PHP 8.1.0 起<br />// 这不再修改 $a。先前的行为违反了按值语义。<br /></span><span style="color: #9876AA">$globals </span><span style="color: #007700">= </span><span style="color: #9876AA">$GLOBALS</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$globals</span><span style="color: #007700">[</span><span style="color: #DD0000">'a'</span><span style="color: #007700">] = </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 要恢复以前的行为，请迭代其副本并将每个属性分配回 $GLOBALS。<br /></span><span style="color: #007700">foreach (</span><span style="color: #9876AA">$globals </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$value</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$GLOBALS</span><span style="color: #007700">[</span><span style="color: #9876AA">$key</span><span style="color: #007700">] = </span><span style="color: #9876AA">$value</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>     </div>    </div>   </p>  </p></blockquote> </div> </div>
*/
$GLOBALS = [];

/**
 * @xglobal $_COOKIE array
 * Variables provided to the script via HTTP cookies. Analogous to the old $HTTP_COOKIE_VARS array
 * (which is still available, but deprecated).
 *
 * <p><a href="https://secure.php.net/manual/en/reserved.variables.php">
 * https://secure.php.net/manual/en/reserved.variables.php</a>
 */
$_COOKIE = [];

/**
 * @xglobal $_ENV array
 * @xglobal $HTTP_ENV_VARS array
 *
 * Variables provided to the script via the environment.
 * Analogous to the old $HTTP_ENV_VARS array (which is still available, but deprecated).
 *
 * <p><a href="https://secure.php.net/manual/en/reserved.variables.php">
 * https://secure.php.net/manual/en/reserved.variables.php</a>
 */
$_ENV = [];
/**
 * @deprecated 4.1
 * @removed 5.4
 */
$HTTP_ENV_VARS = [];

/**
*<div id="reserved.variables.files" class="refentry"> <div class="refnamediv">  <h1 class="refname">$_FILES</h1>  <p class="refpurpose"><span class="refname">$_FILES</span> &mdash; <span class="dc-title">HTTP 文件上传变量</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reserved.variables.files-description">  <h3 class="title">说明</h3>  <p class="para">   通过 HTTP POST 方式上传到当前脚本的项目的<span class="type" style="color:#EAB766"><span class="type 数组" style="color:#EAB766">数组</span></span>。   此数组的概况在    <a href="https://www.php.net/manual/zh/features.file-upload.post-method.php" class="link">POST 方法上传</a> 章节中有描述。  </p> </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-reserved.variables.files-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">“Superglobal”也称为自动化的全局变量。这就表示其在脚本的所有作用域中都是可用的。不需要在函数或方法中用<strong class="command">global $variable;</strong> 来访问它。</p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reserved.variables.files-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link move_uploaded_file()} - 将上传的文件移动到新位置</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/features.file-upload.php" class="link">处理文件上传</a></li>   </ul>  </span> </div></div>
*/
$_FILES = [];
/**
 * @deprecated 4.1
 * @removed 5.4
 */
$HTTP_POST_FILES = [];

/**
*<div id="reserved.variables.get" class="refentry"> <div class="refnamediv">  <h1 class="refname">$_GET</h1>  <p class="refpurpose"><span class="refname">$_GET</span> &mdash; <span class="dc-title">HTTP GET 变量</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reserved.variables.get-description">  <h3 class="title">说明</h3>  <p class="para">  通过 URL 参数（又叫 query string）传递给当前脚本的变量的数组。   注意：该数组不仅仅对 method 为 GET 的请求生效，而是会针对所有带 query string 的请求。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reserved.variables.get-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1085">    <p><strong>示例 #1 <var class="varname">$_GET</var> 范例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #DD0000">'Hello ' </span><span style="color: #007700">. </span><span style="color: #9876AA">htmlspecialchars</span><span style="color: #007700">(</span><span style="color: #9876AA">$_GET</span><span style="color: #007700">[</span><span style="color: #DD0000">"name"</span><span style="color: #007700">]) . </span><span style="color: #DD0000">'!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     假设用户访问的是 http://example.com/?name=Hannes    </p></div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Hello Hannes!<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-reserved.variables.get-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">“Superglobal”也称为自动化的全局变量。这就表示其在脚本的所有作用域中都是可用的。不需要在函数或方法中用<strong class="command">global $variable;</strong> 来访问它。</p></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    GET 是通过 <span class="function">{@link urldecode()}</span> 传递的。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reserved.variables.get-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/language.variables.external.php" class="link">处理外部变量</a></li>    <li class="member"><a href="https://www.php.net/manual/zh/book.filter.php" class="link">过滤器扩展</a></li>   </ul>  </span> </div></div>
*/
$_GET = [];
/**
 * @deprecated 4.1
 * @removed 5.4
 */
$HTTP_GET_VARS = [];

/**
*<div id="reserved.variables.post" class="refentry"> <div class="refnamediv">  <h1 class="refname">$_POST</h1>  <p class="refpurpose"><span class="refname">$_POST</span> &mdash; <span class="dc-title">HTTP POST 变量</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reserved.variables.post-description">  <h3 class="title">说明</h3>  <p class="para">   当  HTTP POST 请求的 Content-Type 是 <span>application/x-www-form-urlencoded</span> 或 <span>multipart/form-data</span> 时，会将变量以关联数组形式传入当前脚本。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reserved.variables.post-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1088">    <p><strong>示例 #1 <var class="varname">$_POST</var> 范例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #DD0000">'Hello ' </span><span style="color: #007700">. </span><span style="color: #9876AA">htmlspecialchars</span><span style="color: #007700">(</span><span style="color: #9876AA">$_POST</span><span style="color: #007700">[</span><span style="color: #DD0000">"name"</span><span style="color: #007700">]) . </span><span style="color: #DD0000">'!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     假设用户通过 HTTP POST 方式传递了参数 name=Hannes    </p></div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Hello Hannes!<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-reserved.variables.post-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">“Superglobal”也称为自动化的全局变量。这就表示其在脚本的所有作用域中都是可用的。不需要在函数或方法中用<strong class="command">global $variable;</strong> 来访问它。</p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reserved.variables.post-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/language.variables.external.php" class="link">处理外部变量</a></li>    <li class="member"><a href="https://www.php.net/manual/zh/book.filter.php" class="link">过滤器扩展</a></li>   </ul>  </span> </div></div>
*/
$_POST = [];
/**
 * @deprecated 4.1
 * @removed 5.4
 */
$HTTP_POST_VARS = [];

/**
*<div id="reserved.variables.request" class="refentry"> <div class="refnamediv">  <h1 class="refname">$_REQUEST</h1>  <p class="refpurpose"><span class="refname">$_REQUEST</span> &mdash; <span class="dc-title">HTTP Request 变量</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reserved.variables.request-description">  <h3 class="title">说明</h3>  <p class="para">   默认情况下包含了 <var class="varname"><a href="https://www.php.net/manual/zh/reserved.variables.get.php" class="classname">$_GET</a></var>，<var class="varname"><a href="https://www.php.net/manual/zh/reserved.variables.post.php" class="classname">$_POST</a></var>  和  <var class="varname"><a href="https://www.php.net/manual/zh/reserved.variables.cookies.php" class="classname">$_COOKIE</a></var> 的<span class="type" style="color:#EAB766"><span class="type 数组" style="color:#EAB766">数组</span></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-reserved.variables.request-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">“Superglobal”也称为自动化的全局变量。这就表示其在脚本的所有作用域中都是可用的。不需要在函数或方法中用<strong class="command">global $variable;</strong> 来访问它。</p></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    以<a href="https://www.php.net/manual/zh/features.commandline.php" class="link">命令行</a>方式运行时，将<em>不</em>包含 <a href="https://www.php.net/manual/zh/reserved.variables.argv.php" class="link">argv</a> 和 <a href="https://www.php.net/manual/zh/reserved.variables.argc.php" class="link">argc</a> 信息；它们将存在于 <var class="varname"><a href="https://www.php.net/manual/zh/reserved.variables.server.php" class="classname">$_SERVER</a></var> <span class="type" style="color:#EAB766"><span class="type 数组" style="color:#EAB766">数组</span></span>。   </p>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    由于 <var class="varname">$_REQUEST</var> 中的变量通过 GET，POST 和 COOKIE 输入机制传递给脚本文件，因此可以被远程用户篡改而并不可信。这个数组的项目及其顺序依赖于 PHP 的     <a href="https://www.php.net/manual/zh/ini.core.php#ini.request-order" class="link">request_order</a> 和 <a href="https://www.php.net/manual/zh/ini.core.php#ini.variables-order" class="link">variables_order</a> 指令的配置。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reserved.variables.request-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><a href="https://www.php.net/manual/zh/language.variables.external.php" class="link">处理外部变量</a></li>   <li class="member"><a href="https://www.php.net/manual/zh/book.filter.php" class="link">过滤器扩展</a></li>  </ul> </div> </div>
*/
$_REQUEST = [];

/**
*<div id="reserved.variables.server" class="refentry"> <div class="refnamediv">  <h1 class="refname">$_SERVER</h1>  <p class="refpurpose"><span class="refname">$_SERVER</span> &mdash; <span class="dc-title">服务器和执行环境信息</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reserved.variables.server-description">  <h3 class="title">说明</h3>  <p class="para">   <var class="varname">$_SERVER</var> 是一个包含了诸如头信息（header）、路径（path）、以及脚本位置（script locations）等信息的   <span class="type" style="color:#EAB766">array</span>。这个数组中的条目由 Web 服务器创建，所以不能保证每个 Web   服务器都提供全部条目；服务器可能会忽略一些，或者提供此处没有列举出来的其它内容。然而，大部分变量在   <a href="http://www.faqs.org/rfcs/rfc3875" class="link external">&raquo;&nbsp;CGI 1.1 规范</a>中都有说明，并且很可能会定义。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    当在<a href="https://www.php.net/manual/zh/features.commandline.php" class="link">命令行</a>运行 PHP    时，这些条目都将无效或者没有任何意义。   </span>  </p></blockquote>  <p class="para">   除了下面列出的元素之外，PHP 还将使用请求报头中的值创建其它元素，这些条目将命名为 <span>HTTP_</span>   后跟报头名称，大写且使用下划线而不是连字符。例如 <span>Accept-Language</span> 报头将作为   <span>$_SERVER[&#039;HTTP_ACCEPT_LANGUAGE&#039;]</span> 提供。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 indices" id="refsect1-reserved.variables.server-indices">  <h3 class="title">目录</h3>  <p class="para">   <dl>         <dt>&#039;<var class="varname">PHP_SELF</var>&#039;</dt>     <dd>      <span class="simpara">       当前执行脚本的文件名，与 document root 有关。例如，在地址为 <var class="filename">http://example.com/foo/bar.php</var> 的脚本中使用 <var class="varname">$_SERVER['PHP_SELF']</var> 将得到 <var class="filename">/foo/bar.php</var>。<a href="https://www.php.net/manual/zh/language.constants.predefined.php" class="link">__FILE__</a> 常量包含当前(例如包含)文件的完整路径和文件名。      </span>      <span class="simpara">       如果 PHP 以命令行模式运行，这个变量将包含脚本名。      </span>     </dd>             <dt>&#039;<a href="https://www.php.net/manual/zh/reserved.variables.argv.php" class="link">argv</a>&#039;</dt>     <dd>      <span class="simpara">        传递给该脚本的参数的数组。当脚本以命令行方式运行时，argv 变量传递给程序 C 语言样式的命令行参数。当通过 GET 方式调用时，该变量包含query string。      </span>     </dd>             <dt>&#039;<a href="https://www.php.net/manual/zh/reserved.variables.argc.php" class="link">argc</a>&#039;</dt>     <dd>      <span class="simpara">       包含命令行模式下传递给该脚本的参数的数目(如果运行在命令行模式下)。      </span>     </dd>             <dt>&#039;<var class="varname">GATEWAY_INTERFACE</var>&#039;</dt>     <dd>      <span class="simpara">       服务器使用的 CGI 规范的版本；例如，<span>&#039;CGI/1.1&#039;</span>。      </span>     </dd>             <dt>&#039;<var class="varname">SERVER_ADDR</var>&#039;</dt>     <dd>      <span class="simpara">       当前运行脚本所在的服务器的 IP 地址。      </span>     </dd>             <dt>&#039;<var class="varname">SERVER_NAME</var>&#039;</dt>     <dd>      <span class="simpara">       当前运行脚本所在的服务器的主机名。如果脚本运行于虚拟主机中，该名称是由那个虚拟主机所设置的值决定。      </span>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <span class="simpara">        在 Apache 2 里，必须设置 <span>UseCanonicalName = On</span> 和        <span>ServerName</span>。否则该值会由客户端提供，就有可能被伪造。上下文有安全性要求的环境里，不应该依赖此值。       </span>      </p></blockquote>     </dd>             <dt>&#039;<var class="varname">SERVER_SOFTWARE</var>&#039;</dt>     <dd>      <span class="simpara">       服务器标识字符串，在响应请求时的头信息中给出。      </span>     </dd>             <dt>&#039;<var class="varname">SERVER_PROTOCOL</var>&#039;</dt>     <dd>      <span class="simpara">       请求页面时通信协议的名称和版本。例如，<span>&#039;HTTP/1.0&#039;</span>。      </span>     </dd>                 <dt>&#039;<var class="varname">REQUEST_METHOD</var>&#039;</dt>     <dd>      <span class="simpara">       访问页面使用的请求方法；例如，<span>&#039;GET&#039;</span>、<span>&#039;HEAD&#039;</span>、<span>&#039;POST&#039;</span>、<span>&#039;PUT&#039;</span>。      </span>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        如果请求方法为 <span>HEAD</span>，PHP 脚本将在发送 Header 头信息之后终止(这意味着在产生任何输出后，不再有输出缓冲)。       </p>      </p></blockquote>     </dd>             <dt>&#039;<var class="varname">REQUEST_TIME</var>&#039;</dt>     <dd>      <span class="simpara">       请求开始时的时间戳。      </span>     </dd>                 <dt>&#039;<var class="varname">REQUEST_TIME_FLOAT</var>&#039;</dt>     <dd>      <span class="simpara">       请求开始时的时间戳，微秒级别的精准度。      </span>     </dd>                  <dt>&#039;<var class="varname">QUERY_STRING</var>&#039;</dt>     <dd>      <span class="simpara">       query string（查询字符串），如果有的话，通过它进行页面访问。      </span>     </dd>             <dt>&#039;<var class="varname">DOCUMENT_ROOT</var>&#039;</dt>     <dd>      <span class="simpara">       当前运行脚本所在的文档根目录。在服务器配置文件中定义。      </span>     </dd>             <dt>&#039;<var class="varname">HTTPS</var>&#039;</dt>     <dd>      <span class="simpara">      如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值。       </span>     </dd>             <dt>&#039;<var class="varname">REMOTE_ADDR</var>&#039;</dt>     <dd>      <span class="simpara">       浏览当前页面的用户的 IP 地址。      </span>     </dd>             <dt>&#039;<var class="varname">REMOTE_HOST</var>&#039;</dt>     <dd>      <span class="simpara">       浏览当前页面的用户的主机名。DNS 反向解析不依赖于用户的 <var class="varname">REMOTE_ADDR</var>。      </span>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <span class="simpara">        必须配置 Web 服务器以创建这个变量。例如在 Apache 中，<span>HostnameLookups On</span>        必须在 <var class="filename">httpd.conf</var> 中设置才能存在。参见 <span class="function">{@link gethostbyaddr()}</span>。       </span>      </p></blockquote>     </dd>             <dt>&#039;<var class="varname">REMOTE_PORT</var>&#039;</dt>     <dd>      <span class="simpara">       用户机器上连接到 Web 服务器所使用的端口号。      </span>     </dd>             <dt>&#039;<var class="varname">REMOTE_USER</var>&#039;</dt>     <dd>      <span class="simpara">        经验证的用户      </span>     </dd>             <dt>&#039;<var class="varname">REDIRECT_REMOTE_USER</var>&#039;</dt>     <dd>      <span class="simpara">        验证的用户，如果请求已在内部重定向。      </span>     </dd>             <dt>&#039;<var class="varname">SCRIPT_FILENAME</var>&#039;</dt>     <dd>      <p class="para">       当前执行脚本的绝对路径。       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:         <p class="para">         如果在命令行界面（Command Line Interface, CLI）使用相对路径执行脚本，例如 <var class="filename">file.php</var> 或 <var class="filename">../file.php</var>，那么 <var class="varname">$_SERVER['SCRIPT_FILENAME']</var> 将包含用户指定的相对路径。        </p>       </p></blockquote>      </p>     </dd>             <dt>&#039;<var class="varname">SERVER_ADMIN</var>&#039;</dt>     <dd>      <span class="simpara">       该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。如果脚本运行在一个虚拟主机上，则该值是那个虚拟主机的值。       </span>     </dd>                 <dt>&#039;<var class="varname">SERVER_PORT</var>&#039;</dt>     <dd>      <span class="simpara">        Web 服务器使用的端口。默认值为 <span>&#039;80&#039;</span>。如果使用 SSL 安全连接，则这个值为用户设置的 HTTP 端口。      </span>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <span class="simpara">        在 Apache 2 里，为了获取真实物理端口，必须设置 <span>UseCanonicalName = On</span> 以及        <span>UseCanonicalPhysicalPort = On</span>，否则可能伪造此值，不一定会返回真实端口值。        上下文有安全性要求的环境里，不应该依赖此值。       </span>      </p></blockquote>     </dd>             <dt>&#039;<var class="varname">SERVER_SIGNATURE</var>&#039;</dt>     <dd>      <span class="simpara">       包含了服务器版本和虚拟主机名的字符串。      </span>     </dd>             <dt>&#039;<var class="varname">PATH_TRANSLATED</var>&#039;</dt>     <dd>      <span class="simpara">       当前脚本所在文件系统（非文档根目录）的基本路径。这是在服务器进行虚拟到真实路径的映像后的结果。      </span>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <span class="simpara">        Apache 2 用户可以在 <var class="filename">httpd.conf</var> 中设置 <span>AcceptPathInfo = On</span> 来定义 <var class="envar">PATH_INFO</var>。       </span>      </p></blockquote>     </dd>             <dt>&#039;<var class="varname">SCRIPT_NAME</var>&#039;</dt>     <dd>      <span class="simpara">       包含当前脚本的路径。这在页面需要指向自己时非常有用。<a href="https://www.php.net/manual/zh/language.constants.predefined.php" class="link">__FILE__</a> 常量包含当前脚本(例如包含文件)的完整路径和文件名。      </span>     </dd>             <dt>&#039;<var class="varname">REQUEST_URI</var>&#039;</dt>     <dd>      <span class="simpara">       URI 用来指定要访问的页面。例如 “<span>/index.html</span>”。      </span>     </dd>             <dt>&#039;<var class="varname">PHP_AUTH_DIGEST</var>&#039;</dt>     <dd>      <span class="simpara">       当作为 Apache 模块运行时，进行 HTTP Digest 认证的过程中，此变量被设置成客户端发送的“Authorization” HTTP 头内容（以便作进一步的认证操作）。       </span>     </dd>             <dt>&#039;<var class="varname">PHP_AUTH_USER</var>&#039;</dt>     <dd>      <span class="simpara">       当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的用户名。      </span>     </dd>             <dt>&#039;<var class="varname">PHP_AUTH_PW</var>&#039;</dt>     <dd>      <span class="simpara">       当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的密码。       </span>     </dd>             <dt>&#039;<var class="varname">AUTH_TYPE</var>&#039;</dt>     <dd>      <span class="simpara">       当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是认证的类型。      </span>     </dd>             <dt>&#039;<var class="varname">PATH_INFO</var>&#039;</dt>     <dd>      <span class="simpara">       如果存在的话，包含由客户端提供的、跟在真实脚本名称之后并且在查询字符串之前的路径信息。例如，如果当前脚本是通过       URI <var class="filename">http://www.example.com/php/path_info.php/some/stuff?foo=bar</var> 访问，那么       <var class="varname">$_SERVER['PATH_INFO']</var> 将包含 <span>/some/stuff</span>。      </span>     </dd>             <dt>&#039;<var class="varname">ORIG_PATH_INFO</var>&#039;</dt>     <dd>      <span class="simpara">       在被 PHP 处理之前，“<var class="varname">PATH_INFO</var>” 的原始版本。      </span>     </dd>       </dl>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reserved.variables.server-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1082">    <p><strong>示例 #1 <var class="varname">$_SERVER</var> 范例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">$_SERVER</span><span style="color: #007700">[</span><span style="color: #DD0000">'SERVER_NAME'</span><span style="color: #007700">];<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>www.example.com<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-reserved.variables.server-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">“Superglobal”也称为自动化的全局变量。这就表示其在脚本的所有作用域中都是可用的。不需要在函数或方法中用<strong class="command">global $variable;</strong> 来访问它。</p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reserved.variables.server-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/book.filter.php" class="link">过滤器扩展</a></li>   </ul>  </span> </div></div>
*/
$_SERVER = [];
/**
 * @deprecated 4.1
 * @removed 5.4
 */
$HTTP_SERVER_VARS = [];

$_SERVER['PHP_SELF'] = '';
$_SERVER['argv'] = '';
$_SERVER['argc'] = '';
$_SERVER['GATEWAY_INTERFACE'] = 'CGI/1.1';
$_SERVER['SERVER_ADDR'] = '127.0.0.1';
$_SERVER['SERVER_NAME'] = 'localhost';
$_SERVER['SERVER_SOFTWARE'] = '';
$_SERVER['SERVER_PROTOCOL'] = 'HTTP/1.0';
$_SERVER['REQUEST_METHOD'] = 'GET';
$_SERVER['REQUEST_TIME'] = '';
$_SERVER['QUERY_STRING'] = '';
$_SERVER['DOCUMENT_ROOT'] = '';
$_SERVER['HTTP_ACCEPT'] = '';
$_SERVER['HTTP_ACCEPT_CHARSET'] = 'iso-8859-1,*,utf-8';
$_SERVER['HTTP_ACCEPT_ENCODING'] = 'gzip';
$_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'en';
$_SERVER['HTTP_CONNECTION'] = 'Keep-Alive';
$_SERVER['HTTP_HOST'] = '';
$_SERVER['HTTP_REFERER'] = '';
$_SERVER['HTTP_USER_AGENT'] = 'Mozilla/4.5 [en] (X11; U; Linux 2.2.9 i586).';
$_SERVER['HTTPS'] = '';
$_SERVER['REMOTE_ADDR'] = '';
$_SERVER['REMOTE_HOST'] = '';
$_SERVER['REMOTE_PORT'] = '';
$_SERVER['SCRIPT_FILENAME'] = '';
$_SERVER['SERVER_ADMIN'] = '';
$_SERVER['SERVER_PORT'] = '80';
$_SERVER['SERVER_SIGNATURE'] = '';
$_SERVER['PATH_TRANSLATED'] = '';
$_SERVER['SCRIPT_NAME'] = '';
$_SERVER['REQUEST_URI'] = '/index.html';
$_SERVER['PHP_AUTH_DIGEST'] = '';
$_SERVER['PHP_AUTH_USER'] = '';
$_SERVER['PHP_AUTH_PW'] = '';
$_SERVER['AUTH_TYPE'] = '';
$_SERVER['PATH_INFO'] = '';
$_SERVER['ORIG_PATH_INFO'] = '';

/**
*<div id="reserved.variables.session" class="refentry"> <div class="refnamediv">  <h1 class="refname">$_SESSION</h1>  <p class="refpurpose"><span class="refname">$_SESSION</span> &mdash; <span class="dc-title">Session 变量</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reserved.variables.session-description">  <h3 class="title">说明</h3>  <p class="para">   当前脚本可用 SESSION 变量的数组。更多关于如何使用的信息，参见 <a href="https://www.php.net/manual/zh/ref.session.php" class="link">Session 函数</a> 文档。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-reserved.variables.session-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para">“Superglobal”也称为自动化的全局变量。这就表示其在脚本的所有作用域中都是可用的。不需要在函数或方法中用<strong class="command">global $variable;</strong> 来访问它。</p></p></blockquote> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reserved.variables.session-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link session_start()} - 启动新会话或者重用现有会话</span></li>   </ul>  </span> </div></div>
*/
$_SESSION = [];
/**
 * @deprecated 4.1
 * @removed 5.4
 */
$HTTP_SESSION_VARS = [];

/**
*<div id="reserved.variables.argc" class="refentry"> <div class="refnamediv">  <h1 class="refname">$argc</h1>  <p class="refpurpose"><span class="refname">$argc</span> &mdash; <span class="dc-title">传递给脚本的参数数目</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reserved.variables.argc-description">  <h3 class="title">说明</h3>  <p class="para">   包含当运行于<a href="https://www.php.net/manual/zh/features.commandline.php" class="link">命令行</a>下时传递给当前脚本的参数的数目。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    脚本的文件名总是作为参数传递给当前脚本，因此 <var class="varname">$argc</var> 的最小值为 <span>1</span>。   </span>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    这个变量仅在 <a href="https://www.php.net/manual/zh/ini.core.php#ini.register-argc-argv" class="link">register_argc_argv</a> 打开时可用。   </span>  </p></blockquote> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reserved.variables.argc-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1103">    <p><strong>示例 #1 <var class="varname">$argc</var> 范例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$argc</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     当使用这个命令执行: php script.php arg1 arg2 arg3    </p></div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(4)<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-reserved.variables.argc-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    也可以在 <var class="varname"><a href="https://www.php.net/manual/zh/reserved.variables.server.php" class="classname">$_SERVER['argc']</a></var> 中获取。   </p>  </p></blockquote> </div><br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reserved.variables.argc-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link getopt()} - 从命令行参数列表中获取选项</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/reserved.variables.argv.php" class="link"><var class="varname"><a href="https://www.php.net/manual/zh/reserved.variables.argv.php" class="classname">$argv</a></var></a></li>   </ul>  </span> </div></div>
*/
$argc = 0;

/**
*<div id="reserved.variables.argv" class="refentry"> <div class="refnamediv">  <h1 class="refname">$argv</h1>  <p class="refpurpose"><span class="refname">$argv</span> &mdash; <span class="dc-title">传递给脚本的参数数组</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reserved.variables.argv-description">  <h3 class="title">说明</h3>  <p class="para">   包含当运行于<a href="https://www.php.net/manual/zh/features.commandline.php" class="link">命令行</a>下时传递给当前脚本的参数的数组。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    第一个参数总是当前脚本的文件名，因此 <var class="varname">$argv[0]</var> 就是脚本文件名。   </span>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    这个变量仅在 <a href="https://www.php.net/manual/zh/ini.core.php#ini.register-argc-argv" class="link">register_argc_argv</a> 打开时可用。   </span>  </p></blockquote> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reserved.variables.argv-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1106">    <p><strong>示例 #1 <var class="varname">$argv</var> 范例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$argv</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     当使用这个命令执行：php script.php arg1 arg2 arg3    </p></div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(4) {<br>  [0]=&gt;<br>  string(10) &quot;script.php&quot;<br>  [1]=&gt;<br>  string(4) &quot;arg1&quot;<br>  [2]=&gt;<br>  string(4) &quot;arg2&quot;<br>  [3]=&gt;<br>  string(4) &quot;arg3&quot;<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-reserved.variables.argv-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    也可以在 <var class="varname"><a href="https://www.php.net/manual/zh/reserved.variables.server.php" class="classname">$_SERVER['argv']</a></var> 中获取。   </p>  </p></blockquote> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reserved.variables.argv-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link getopt()} - 从命令行参数列表中获取选项</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/reserved.variables.argc.php" class="link"><var class="varname"><a href="https://www.php.net/manual/zh/reserved.variables.argc.php" class="classname">$argc</a></var></a></li>   </ul>  </span> </div></div>
*/
$argv = [1 + 1 => "a" . "b"];

/**
 * @xglobal $HTTP_RAW_POST_DATA string
 *
 * Raw POST data
 *
 * <p><a href="https://secure.php.net/manual/en/reserved.variables.php">
 * https://secure.php.net/manual/en/reserved.variables.php</a>
 *
 * @deprecated 5.6 Deprecated as of PHP 5.6.0. Use the php://input stream instead.
 * @removed 7.0
 */
$HTTP_RAW_POST_DATA = '';

/**
*<div id="reserved.variables.httpresponseheader" class="refentry"> <div class="refnamediv">  <h1 class="refname">$http_response_header</h1>  <p class="refpurpose"><span class="refname">$http_response_header</span> &mdash; <span class="dc-title">HTTP 响应头</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reserved.variables.httpresponseheader-description">  <h3 class="title">说明</h3>  <p class="para">   <var class="varname">$http_response_header</var> <span class="type" style="color:#EAB766"><span class="type 数组" style="color:#EAB766">数组</span></span>与 <span class="function">{@link get_headers()}</span> 函数类似。当使用<a href="https://www.php.net/manual/zh/wrappers.http.php" class="link">HTTP 包装器</a>时，<var class="varname">$http_response_header</var> 将会被 HTTP 响应头信息填充。<var class="varname">$http_response_header</var> 将被创建于<a href="https://www.php.net/manual/zh/language.variables.scope.php" class="link">局部作用域</a>中。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reserved.variables.httpresponseheader-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1100">    <p><strong>示例 #1 <var class="varname">$http_response_header</var> 范例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">get_contents</span><span style="color: #007700">() {<br />  </span><span style="color: #9876AA">file_get_contents</span><span style="color: #007700">(</span><span style="color: #DD0000">"http://example.com"</span><span style="color: #007700">);<br />  </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$http_response_header</span><span style="color: #007700">); </span><span style="color: #FF8000">// 变量在本地作用域中填充<br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">get_contents</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$http_response_header</span><span style="color: #007700">); </span><span style="color: #FF8000">// 调用 get_contents() 不会在函数作用域之外填充变量<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(9) {<br>  [0]=&gt;<br>  string(15) &quot;HTTP/1.1 200 OK&quot;<br>  [1]=&gt;<br>  string(35) &quot;Date: Sat, 12 Apr 2008 17:30:38 GMT&quot;<br>  [2]=&gt;<br>  string(29) &quot;Server: Apache/2.2.3 (CentOS)&quot;<br>  [3]=&gt;<br>  string(44) &quot;Last-Modified: Tue, 15 Nov 2005 13:24:10 GMT&quot;<br>  [4]=&gt;<br>  string(27) &quot;ETag: &quot;280100-1b6-80bfd280&quot;&quot;<br>  [5]=&gt;<br>  string(20) &quot;Accept-Ranges: bytes&quot;<br>  [6]=&gt;<br>  string(19) &quot;Content-Length: 438&quot;<br>  [7]=&gt;<br>  string(17) &quot;Connection: close&quot;<br>  [8]=&gt;<br>  string(38) &quot;Content-Type: text/html; charset=UTF-8&quot;<br>}<br><br>Warning: Undefined variable $http_response_header<br>NULL<br></span></div>    </div>   </div>  </span> </div> </div>
*/
$http_response_header = [];

/**
*<div id="reserved.variables.phperrormsg" class="refentry"> <div class="refnamediv">  <h1 class="refname">$php_errormsg</h1>  <p class="refpurpose"><span class="refname">$php_errormsg</span> &mdash; <span class="dc-title">前一个错误信息</span></p> </div> <div id="reserved.variables.phperrormsg-refsynopsisdiv">  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本特性已自 PHP 7.2.0起<em>废弃</em>。强烈建议不要使用本特性。</p></div>  <p class="simpara">   用 <span class="function">{@link error_get_last()}</span> 函数代替。   </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reserved.variables.phperrormsg-description">  <h3 class="title">说明</h3>  <p class="para">   <var class="varname">$php_errormsg</var> 变量包含由 PHP 生成的最新错误信息。这个变量只在错误发生的作用域内可用，并且要求 <a href="https://www.php.net/manual/zh/errorfunc.configuration.php#ini.track-errors" class="link">track_errors</a> 配置项是开启的（默认是关闭的）。  </p>  <div class="warning"><strong class="warning">警告</strong>   <p class="simpara">    如果用户定义了错误处理句柄（<span class="function">{@link set_error_handler()}</span>）并且返回 <strong><span>false</span></strong> 的时候，<var class="varname">$php_errormsg</var> 就会被设置。   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-reserved.variables.phperrormsg-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        可使 <var class="varname">$php_errormsg</var> 可用的         <a href="https://www.php.net/manual/zh/errorfunc.configuration.php#ini.track-errors" class="link">track_errors</a> 指令已被删除。       </td>      </tr>      <tr>       <td>7.2.0</td>       <td>        可使 <var class="varname">$php_errormsg</var> 可用的         <a href="https://www.php.net/manual/zh/errorfunc.configuration.php#ini.track-errors" class="link">track_errors</a> 指令已被弃用。       </td>      </tr>     </tbody>       </table>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reserved.variables.phperrormsg-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1097">    <p><strong>示例 #1 <var class="varname">$php_errormsg</var> 范例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">@</span><span style="color: #9876AA">strpos</span><span style="color: #007700">();<br />echo </span><span style="color: #9876AA">$php_errormsg</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Wrong parameter count for strpos()<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reserved.variables.phperrormsg-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link error_get_last()} - 获取最后发生的错误</span></li>   </ul>  </span> </div> </div>
*/
$php_errormsg = '';
