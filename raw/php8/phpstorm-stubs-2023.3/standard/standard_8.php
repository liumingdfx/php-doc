<?php

use JetBrains\PhpStorm\ArrayShape;
use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\ExpectedValues;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Pure;

/**
*<div id="function.syslog" class="refentry"> <div class="refnamediv">  <h1 class="refname">syslog</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">syslog</span> &mdash; <span class="dc-title">Generate a system log message</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.syslog-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>syslog</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$priority</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">syslog()</strong></span> generates a log message that will be   distributed by the system logger.  </p>  <p class="para">   For information on setting up a user defined log handler, see the   <span class="citerefentry"><span class="refentrytitle">syslog.conf</span>   <span class="manvolnum">(5)</span></span> Unix manual page.  More   information on the syslog facilities and option can be found in the man   pages for <span class="citerefentry"><span class="refentrytitle">syslog</span>   <span class="manvolnum">(3)</span></span> on Unix machines.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.syslog-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">priority</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">priority</span> is a combination of the facility and       the level. Possible values are:       <table class="doctable table">        <caption><strong><span class="function"><strong style="color:#CC7832">syslog()</strong></span> Priorities (in descending order)</strong></caption>                 <thead>          <tr>           <th>Constant</th>           <th>Description</th>          </tr>         </thead>         <tbody class="tbody">          <tr>           <td><strong><span>LOG_EMERG</span></strong></td>           <td>system is unusable</td>          </tr>          <tr>           <td><strong><span>LOG_ALERT</span></strong></td>           <td>action must be taken immediately</td>          </tr>          <tr>           <td><strong><span>LOG_CRIT</span></strong></td>           <td>critical conditions</td>          </tr>          <tr>           <td><strong><span>LOG_ERR</span></strong></td>           <td>error conditions</td>          </tr>          <tr>           <td><strong><span>LOG_WARNING</span></strong></td>           <td>warning conditions</td>          </tr>          <tr>           <td><strong><span>LOG_NOTICE</span></strong></td>           <td>normal, but significant, condition</td>          </tr>          <tr>           <td><strong><span>LOG_INFO</span></strong></td>           <td>informational message</td>          </tr>          <tr>           <td><strong><span>LOG_DEBUG</span></strong></td>           <td>debug-level message</td>          </tr>         </tbody>               </table>      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">message</span></dt>     <dd>      <p class="para">       The message to send.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.syslog-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.syslog-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Using <span class="function"><strong style="color:#CC7832">syslog()</strong></span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// open syslog, include the process ID and also send<br />// the log to standard error, and use a user defined<br />// logging mechanism<br /></span><span style="color: #9876AA">openlog</span><span style="color: #007700">(</span><span style="color: #DD0000">"myScriptLog"</span><span style="color: #007700">, </span><span style="color: #9876AA">LOG_PID </span><span style="color: #007700">| </span><span style="color: #9876AA">LOG_PERROR</span><span style="color: #007700">, </span><span style="color: #9876AA">LOG_LOCAL0</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// some code<br /><br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">authorized_client</span><span style="color: #007700">()) {<br />    </span><span style="color: #FF8000">// do something<br /></span><span style="color: #007700">} else {<br />    </span><span style="color: #FF8000">// unauthorized client!<br />    // log the attempt<br />    </span><span style="color: #9876AA">$access </span><span style="color: #007700">= </span><span style="color: #9876AA">date</span><span style="color: #007700">(</span><span style="color: #DD0000">"Y/m/d H:i:s"</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">syslog</span><span style="color: #007700">(</span><span style="color: #9876AA">LOG_WARNING</span><span style="color: #007700">, </span><span style="color: #DD0000">"Unauthorized client: </span><span style="color: #9876AA">$access</span><span style="color: #DD0000"> </span><span style="color: #007700">{</span><span style="color: #9876AA">$_SERVER</span><span style="color: #007700">[</span><span style="color: #DD0000">'REMOTE_ADDR'</span><span style="color: #007700">]}</span><span style="color: #DD0000"> (</span><span style="color: #007700">{</span><span style="color: #9876AA">$_SERVER</span><span style="color: #007700">[</span><span style="color: #DD0000">'HTTP_USER_AGENT'</span><span style="color: #007700">]}</span><span style="color: #DD0000">)"</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">closelog</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.syslog-notes">  <h3 class="title">注释</h3>  <p class="para">   On Windows, the syslog service is emulated using the Event   Log.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    Use of <span>LOG_LOCAL0</span> through    <span>LOG_LOCAL7</span> for the <span class="parameter" style="color:#3A95FF">facility</span>    parameter of <span class="function">{@link openlog()}</span> is not available    in Windows.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.syslog-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link openlog()} - Open connection to system logger</span></li>    <li class="member"><span class="function">{@link closelog()} - 关闭系统日志链接</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/errorfunc.configuration.php#ini.syslog.filter" class="link">syslog.filter</a> INI setting (starting with PHP 7.3)</li>   </ul>  </span> </div></div>
*/
function syslog(int $priority, string $message) {}

/**
*<div id="function.closelog" class="refentry"> <div class="refnamediv">  <h1 class="refname">closelog</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">closelog</span> &mdash; <span class="dc-title">关闭系统日志链接</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.closelog-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>closelog</strong></span>(): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">closelog()</strong></span> 关闭用于通信的描述符并写入系统日志。<span class="function"><strong style="color:#CC7832">closelog()</strong></span>是可选的。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.closelog-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.closelog-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.closelog-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link syslog()} - Generate a system log message</span></li>    <li class="member"><span class="function">{@link openlog()} - Open connection to system logger</span></li>   </ul>  </span> </div></div>
*/
function closelog() {}

/**
*<div id="function.header-register-callback" class="refentry"> <div class="refnamediv">  <h1 class="refname">header_register_callback</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">header_register_callback</span> &mdash; <span class="dc-title">调用一个 header 函数</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.header-register-callback-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>header_register_callback</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   注册一个函数，在 PHP 开始发送输出时调用。  </p>  <p class="para">   PHP 准备好所有响应头，在发送内容之前执行 <span class="parameter" style="color:#3A95FF">callback</span>，创建了一个发送响应头的操作窗口。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.header-register-callback-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>    <dd>     <span>      在头发送前调用函数。      它没有参数，返回的值也会被忽略。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.header-register-callback-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.header-register-callback-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">header_register_callback()</strong></span> 例子</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />header</span><span style="color: #007700">(</span><span style="color: #DD0000">'Content-Type: text/plain'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">header</span><span style="color: #007700">(</span><span style="color: #DD0000">'X-Test: foo'</span><span style="color: #007700">);<br /><br />function </span><span style="color: #9876AA">foo</span><span style="color: #007700">() {<br /> foreach (</span><span style="color: #9876AA">headers_list</span><span style="color: #007700">() as </span><span style="color: #9876AA">$header</span><span style="color: #007700">) {<br />   if (</span><span style="color: #9876AA">strpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$header</span><span style="color: #007700">, </span><span style="color: #DD0000">'X-Powered-By:'</span><span style="color: #007700">) !== </span><span style="color: #9876AA">false</span><span style="color: #007700">) {<br />     </span><span style="color: #9876AA">header_remove</span><span style="color: #007700">(</span><span style="color: #DD0000">'X-Powered-By'</span><span style="color: #007700">);<br />   }<br />   </span><span style="color: #9876AA">header_remove</span><span style="color: #007700">(</span><span style="color: #DD0000">'X-Test'</span><span style="color: #007700">);<br /> }<br />}<br /><br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">header_register_callback</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"a"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Content-Type: text/plain<br><br>a<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.header-register-callback-notes">  <h3 class="title">注释</h3>  <p class="para">   <span class="function"><strong style="color:#CC7832">header_register_callback()</strong></span> 是在头即将发送前执行的，   所以本函数的任意内容输出都会打断输出过程。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <p class="para"> 数据头只会在SAPI支持时得到处理和输出。</p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.header-register-callback-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link headers_list()} - 返回已发送的 HTTP 响应头（或准备发送的）</span></li>   <li class="member"><span class="function">{@link header_remove()} - 删除之前设置的 HTTP 头</span></li>   <li class="member"><span class="function">{@link header()} - 发送原生 HTTP 头</span></li>  </ul> </div></div>
 * @return bool true on success or false on failure.*/
function header_register_callback(callable $callback): bool {}

/**
*<div id="function.getimagesizefromstring" class="refentry"> <div class="refnamediv">  <h1 class="refname">getimagesizefromstring</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">getimagesizefromstring</span> &mdash; <span class="dc-title">从字符串中获取图像尺寸信息</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.getimagesizefromstring-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>getimagesizefromstring</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$image_info</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   同 <span class="function">{@link getimagesize()}</span> 函数，区别是 <span class="function"><strong style="color:#CC7832">getimagesizefromstring()</strong></span> 的第一个参数是接受字符串而不是文件名。  </p>  <p class="para">   关于本函数如何工作的更多信息请参见 <span class="function">{@link getimagesize()}</span> 函数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.getimagesizefromstring-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">string</span></dt>    <dd>     <span>      图像数据的字符串表示。     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">image_info</span></dt>    <dd>     <p class="para">      参见 <span class="function">{@link getimagesize()}</span>。     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.getimagesizefromstring-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   参见 <span class="function">{@link getimagesize()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.getimagesizefromstring-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">getimagesizefromstring()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$img </span><span style="color: #007700">= </span><span style="color: #DD0000">'/path/to/test.png'</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 以文件方式打开<br /></span><span style="color: #9876AA">$size_info1 </span><span style="color: #007700">= </span><span style="color: #9876AA">getimagesize</span><span style="color: #007700">(</span><span style="color: #9876AA">$img</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 以字符串格式打开<br /></span><span style="color: #9876AA">$data       </span><span style="color: #007700">= </span><span style="color: #9876AA">file_get_contents</span><span style="color: #007700">(</span><span style="color: #9876AA">$img</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$size_info2 </span><span style="color: #007700">= </span><span style="color: #9876AA">getimagesizefromstring</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.getimagesizefromstring-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link getimagesize()} - 取得图像大小</span></li>  </ul> </div> </div>
 * @return array|false Returns an array with 7 elements.<br>*/
function getimagesizefromstring(string $string, &$image_info): array|false {}

/**
*<div id="function.stream-set-chunk-size" class="refentry"> <div class="refnamediv">  <h1 class="refname">stream_set_chunk_size</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">stream_set_chunk_size</span> &mdash; <span class="dc-title">设置资源流区块大小</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stream-set-chunk-size-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>stream_set_chunk_size</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$stream</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$size</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   设置资源流区块大小。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.stream-set-chunk-size-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">stream</span></dt>    <dd>     <span>      目标资源流。     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">size</span></dt>    <dd>     <p class="para">      想设置的新的区块大小。     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.stream-set-chunk-size-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功的情况下返回资源流之前的区块大小。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.stream-set-chunk-size-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   当 <span class="parameter" style="color:#3A95FF">size</span> 比 1 小或者比 <strong><span>PHP_INT_MAX</span></strong> 还大的时候将抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.stream-set-chunk-size-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        当 <span class="parameter" style="color:#3A95FF">size</span> 比 1 小或者比 <strong><span>PHP_INT_MAX</span></strong> 还大的时候现在会抛出        <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。之前产生 <strong><span>E_WARNING</span></strong> 级别的错误并返回 <strong><span>false</span></strong>。       </td>      </tr>     </tbody>       </table>  </span> </div></div>
 * @return int|false Returns the previous chunk size on success.<br>*/
function stream_set_chunk_size($stream, int $size) {}

/**
 * Initializes all syslog related variables
 * @link https://php.net/manual/en/function.define-syslog-variables.php
 * @return void
 * @removed 5.4
 */
#[Deprecated(since: '5.3')]
function define_syslog_variables() {}

/**
*<div id="function.metaphone" class="refentry"> <div class="refnamediv">  <h1 class="refname">metaphone</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">metaphone</span> &mdash; <span class="dc-title">Calculate the metaphone key of a string</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.metaphone-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>metaphone</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$max_phonemes</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Calculates the metaphone key of <span class="parameter" style="color:#3A95FF">string</span>.  </p>  <p class="para">   Similar to <span class="function">{@link soundex()}</span> metaphone creates the same key for   similar sounding words. It&#039;s more accurate than   <span class="function">{@link soundex()}</span> as it knows the basic rules of English   pronunciation.  The metaphone generated keys are of variable length.  </p>  <p class="para">   Metaphone was developed by Lawrence Philips   &lt;lphilips at verity dot com&gt;. It is described in [&quot;Practical   Algorithms for Programmers&quot;, Binstock &amp; Rex, Addison Wesley,   1995].  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.metaphone-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       The input string.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">max_phonemes</span></dt>     <dd>      <p class="para">       This parameter restricts the returned metaphone key to        <span class="parameter" style="color:#3A95FF">max_phonemes</span> <em>characters</em> in length.       However, the resulting phonemes are always transcribed completely, so the       resulting string length may be slightly longer than <span class="parameter" style="color:#3A95FF">max_phonemes</span>.       The default value of <span>0</span> means no restriction.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.metaphone-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the metaphone key as a string.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.metaphone-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       The function returned <strong><span>false</span></strong> on failure.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.metaphone-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">metaphone()</strong></span> basic example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">metaphone</span><span style="color: #007700">(</span><span style="color: #DD0000">'programming'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">metaphone</span><span style="color: #007700">(</span><span style="color: #DD0000">'programmer'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(7) &quot;PRKRMNK&quot;<br>string(6) &quot;PRKRMR&quot;<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 Using the <span class="parameter" style="color:#3A95FF">max_phonemes</span> parameter</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">metaphone</span><span style="color: #007700">(</span><span style="color: #DD0000">'programming'</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">metaphone</span><span style="color: #007700">(</span><span style="color: #DD0000">'programmer'</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(5) &quot;PRKRM&quot;<br>string(5) &quot;PRKRM&quot;<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3 Using the <span class="parameter" style="color:#3A95FF">max_phonemes</span> parameter</strong></p>    <div class="example-contents"><p>     In this example, <span class="function"><strong style="color:#CC7832">metaphone()</strong></span> is advised to produce a string     of five characters, but that would require to split the final phoneme     (<span>&#039;x&#039;</span> is supposed to be transcribed to <span>&#039;KS&#039;</span>),     so the function returns a string with six characters.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">metaphone</span><span style="color: #007700">(</span><span style="color: #DD0000">'Asterix'</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(6) &quot;ASTRKS&quot;<br></span></div>    </div>   </div>  </p> </div></div>
 * @return string|false the metaphone key as a string, or FALSE on failure*/
function metaphone(string $string, int $max_phonemes = 0) {}

/**
*<div id="function.ob-start" class="refentry"> <div class="refnamediv">  <h1 class="refname">ob_start</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ob_start</span> &mdash; <span class="dc-title">打开输出控制缓冲</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-start-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>ob_start</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$chunk_size</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>PHP_OUTPUT_HANDLER_STDFLAGS</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   此函数将打开输出缓冲。当输出缓冲激活后，脚本将不会输出内容（消息头除外），相反需要输出的内容被存储在内部缓冲区中。  </p>  <p class="para">    内部缓冲区的内容可以用 <span class="function">{@link ob_get_contents()}</span>    复制到字符串变量中。想要输出存储在内部缓冲区中的内容，使用 <span class="function">{@link ob_end_flush()}</span>    函数。另外，使用 <span class="function">{@link ob_end_clean()}</span> 函数会静默丢弃掉缓冲区的内容。  </p>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    当有正在调用的回调函数时，一些 Web 服务器（例如 Apache）会改变脚本的工作目录。可以在回调函数中再把它改回来，例如    <span>chdir(dirname($_SERVER[&#039;SCRIPT_FILENAME&#039;]))</span>。   </p>  </div>  <p class="para">   输出缓冲区是可堆叠的，这就意味着，当有一个 <span class="function"><strong style="color:#CC7832">ob_start()</strong></span> 是活跃的时，可以调用另一个   <span class="function"><strong style="color:#CC7832">ob_start()</strong></span>。只要确保正确调用了 <span class="function">{@link ob_end_flush()}</span>   恰当的次数即可。如果有多重输出回调函数是活跃的，输出内容会一直按嵌套的顺序依次过滤。  </p>  <p class="para">   如果脚本结束时输出缓存仍处于激活状态，PHP 会自动输出内容。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ob-start-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para">       可选参数 <span class="parameter" style="color:#3A95FF">callback</span>        函数可以被指定。此函数把一个字符串当作参数并返回一个字符串。当输出缓冲区被（<span class="function">{@link ob_flush()}</span>、<span class="function">{@link ob_clean()}</span>       或者相似的函数）冲刷（送出）或者被清洗的时候；或者在请求结束之际输出缓冲区内容被冲刷到浏览器的时候该函数将会被调用。当调用       <span class="parameter" style="color:#3A95FF">callback</span>       时，它将收到输出缓冲区的内容作为参数并预期返回一个新的输出缓冲区作为结果，这个新返回的输出缓冲区内容将被送到浏览器。如果这个       <span class="parameter" style="color:#3A95FF">callback</span> 不是一个可以调用的函数，此函数会返回 <strong><span>false</span></strong>。以下是回调签名：      </p>      <p class="para">       <div class="methodsynopsis dc-description">        <span class="methodname" style="color:#CC7832"><span class="replaceable">handler</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$buffer</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$phase</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">string</span></div>       <dl>                 <dt><span class="parameter" style="color:#3A95FF">buffer</span></dt>         <dd>          <span class="simpara">           输出缓冲区中的内容。          </span>         </dd>                         <dt><span class="parameter" style="color:#3A95FF">phase</span></dt>         <dd>          <span class="simpara">           比特掩码 <a href="https://www.php.net/manual/zh/outcontrol.constants.php" class="link"><strong><span>PHP_OUTPUT_HANDLER_*</span></strong> 常量</a>。          </span>         </dd>               </dl>      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">callback</span> 返回 <strong><span>false</span></strong> ，其原来的输入内容被直接送到浏览器。      </p>      <p class="para">       这个参数 <span class="parameter" style="color:#3A95FF">callback</span> 可以通过直接给一个 <strong><span>null</span></strong> 值而避开。      </p>      <p class="para">       <span class="function">{@link ob_end_clean()}</span>, <span class="function">{@link ob_end_flush()}</span>,       <span class="function">{@link ob_clean()}</span>, <span class="function">{@link ob_flush()}</span> 和       <span class="function"><strong style="color:#CC7832">ob_start()</strong></span> 不能从一个回调函数中调用。       如果从回调函数中调用了它们，产生的行为是不明确的。       如果想要删除缓冲区的内容，从回调函数中返回一个&quot;&quot; (空字符串)。       更不能从一个回调函数中使用像<span>print_r($expression, true)</span>        或<span>highlight_file($filename, true)</span> 一样的输出缓冲函数。         </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        <span class="function">{@link ob_gzhandler()}</span> 函数的存在有助于将 gz 编码的数据发送到支持压缩网页的 Web        浏览器。<span class="function">{@link ob_gzhandler()}</span> 确定浏览器将接受哪种类型的内容编码并相应的返回输出。       </p>      </p></blockquote>     </dd>                         <dt><span class="parameter" style="color:#3A95FF">chunk_size</span></dt>     <dd>      <p class="para">       如果可选参数 <span class="parameter" style="color:#3A95FF">chunk_size</span> 被赋值了，在任何一个能引起缓冲区的长度等于       或超过 <span class="parameter" style="color:#3A95FF">chunk_size</span> 的输出操作后，缓冲区都会被刷送。       默认值 <span>0</span> 意味着函数仅在最后被调用。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">flags</span>       参数代表了一个掩码位，用来控制对缓冲区的操作。默认是允许清理、刷新和移除输出缓冲区，可以通过       <strong><span>PHP_OUTPUT_HANDLER_CLEANABLE</span></strong> |       <strong><span>PHP_OUTPUT_HANDLER_FLUSHABLE</span></strong> |       <strong><span>PHP_OUTPUT_HANDLER_REMOVABLE</span></strong> 显式设置或使用       <strong><span>PHP_OUTPUT_HANDLER_STDFLAGS</span></strong> 作为简写。      </p>      <p class="para">       每个标志都控制着对一组功能的访问，详细介绍如下：       <table class="doctable informaltable">                 <thead>          <tr>           <th>常量</th>           <th>函数</th>          </tr>         </thead>         <tbody class="tbody">          <tr>           <td><strong><span>PHP_OUTPUT_HANDLER_CLEANABLE</span></strong></td>           <td>            <span class="function">{@link ob_clean()}</span>,            <span class="function">{@link ob_end_clean()}</span> 和            <span class="function">{@link ob_get_clean()}</span>。           </td>          </tr>          <tr>           <td><strong><span>PHP_OUTPUT_HANDLER_FLUSHABLE</span></strong></td>           <td>            <span class="function">{@link ob_end_flush()}</span>,            <span class="function">{@link ob_flush()}</span> 和            <span class="function">{@link ob_get_flush()}</span>。           </td>          </tr>          <tr>           <td><strong><span>PHP_OUTPUT_HANDLER_REMOVABLE</span></strong></td>           <td>            <span class="function">{@link ob_end_clean()}</span>,            <span class="function">{@link ob_end_flush()}</span> 和            <span class="function">{@link ob_get_flush()}</span>。           </td>          </tr>         </tbody>               </table>      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-start-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ob-start-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1625">    <p><strong>示例 #1 用户自定义回调函数的例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">function </span><span style="color: #9876AA">callback</span><span style="color: #007700">(</span><span style="color: #9876AA">$buffer</span><span style="color: #007700">)<br />{<br />  </span><span style="color: #FF8000">// replace all the apples with oranges<br />  </span><span style="color: #007700">return (</span><span style="color: #9876AA">str_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">"apples"</span><span style="color: #007700">, </span><span style="color: #DD0000">"oranges"</span><span style="color: #007700">, </span><span style="color: #9876AA">$buffer</span><span style="color: #007700">));<br />}<br /><br /></span><span style="color: #9876AA">ob_start</span><span style="color: #007700">(</span><span style="color: #DD0000">"callback"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;<br /></span>&lt;html&gt;<br />&lt;body&gt;<br />&lt;p&gt;It's like comparing apples to oranges.&lt;/p&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;<br /><span style="color: #9876AA">&lt;?php<br /><br />ob_end_flush</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>&lt;html&gt;<br>&lt;body&gt;<br>&lt;p&gt;It&#039;s like comparing oranges to oranges.&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></span></div>    </div>   </div>  </span> <p class="para">   <div class="example" id="example-1628">    <p><strong>示例 #2 创建不可擦除的输出缓冲区</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />ob_start</span><span style="color: #007700">(</span><span style="color: #9876AA">null</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_OUTPUT_HANDLER_STDFLAGS </span><span style="color: #007700">^ </span><span style="color: #9876AA">PHP_OUTPUT_HANDLER_REMOVABLE</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-start-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link ob_get_contents()} - 返回输出缓冲区的内容</span></li>    <li class="member"><span class="function">{@link ob_end_clean()} - 清空（擦除）缓冲区并关闭输出缓冲</span></li>    <li class="member"><span class="function">{@link ob_end_flush()} - 冲刷出（送出）输出缓冲区内容并关闭缓冲区</span></li>    <li class="member"><span class="function">{@link ob_implicit_flush()} - 打开/关闭绝对刷送</span></li>    <li class="member"><span class="function">{@link ob_gzhandler()} - ob_start callback function to gzip output buffer</span></li>    <li class="member"><span class="function">{@link ob_iconv_handler()} - 以输出缓冲处理程序转换字符编码</span></li>    <li class="member"><span class="function">{@link mb_output_handler()} - 在输出缓冲中转换字符编码的回调函数</span></li>    <li class="member"><span class="function">{@link ob_tidyhandler()} - ob_start callback function to repair the buffer</span></li>   </ul>  </span> </div>  </div>
 * @return bool true on success or false on failure.*/
function ob_start($callback, int $chunk_size = 0, int $flags = PHP_OUTPUT_HANDLER_STDFLAGS): bool {}

/**
*<div id="function.ob-flush" class="refentry"> <div class="refnamediv">  <h1 class="refname">ob_flush</h1>  <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ob_flush</span> &mdash; <span class="dc-title">冲刷出（送出）输出缓冲区中的内容</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-flush-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>ob_flush</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   这个函数将送出缓冲区的内容（如果里边有内容的话）。如果想进一步处理缓冲区中的内容，必须在<span class="function"><strong style="color:#CC7832">ob_flush()</strong></span>之前调用<span class="function">{@link ob_get_contents()}</span> ，因为在调用<span class="function"><strong style="color:#CC7832">ob_flush()</strong></span>之后缓冲区内容将被丢弃。  </p>  <p class="para">  此函数不会销毁输出缓冲区，而像<span class="function">{@link ob_end_flush()}</span> 函数会销毁缓冲区。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ob-flush-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-flush-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-flush-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link ob_get_contents()} - 返回输出缓冲区的内容</span></li>    <li class="member"><span class="function">{@link ob_clean()} - 清空（擦掉）输出缓冲区</span></li>    <li class="member"><span class="function">{@link ob_end_flush()} - 冲刷出（送出）输出缓冲区内容并关闭缓冲区</span></li>    <li class="member"><span class="function">{@link ob_end_clean()} - 清空（擦除）缓冲区并关闭输出缓冲</span></li>   </ul>  </span> </div> </div>
 * @return bool*/
function ob_flush(): bool {}

/**
*<div id="function.ob-clean" class="refentry"> <div class="refnamediv">  <h1 class="refname">ob_clean</h1>  <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ob_clean</span> &mdash; <span class="dc-title">清空（擦掉）输出缓冲区</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-clean-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>ob_clean</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   此函数用来丢弃输出缓冲区中的内容。  </p>  <p class="para">   此函数不会像 <span class="function">{@link ob_end_clean()}</span> 函数那样销毁输出缓冲区。  </p>  <p class="para">   输出缓冲必须已被   <span class="function">{@link ob_start()}</span> 以 <a href="https://www.php.net/manual/zh/outcontrol.constants.php#constant.php-output-handler-cleanable" class="link">PHP_OUTPUT_HANDLER_CLEANABLE</a>   标记启动。否则 <span class="function"><strong style="color:#CC7832">ob_clean()</strong></span> 不会有效果。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ob-clean-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-clean-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-clean-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link ob_flush()} - 冲刷出（送出）输出缓冲区中的内容</span></li>    <li class="member"><span class="function">{@link ob_end_flush()} - 冲刷出（送出）输出缓冲区内容并关闭缓冲区</span></li>    <li class="member"><span class="function">{@link ob_end_clean()} - 清空（擦除）缓冲区并关闭输出缓冲</span></li>   </ul>  </span> </div> </div>
 * @return bool*/
function ob_clean(): bool {}

/**
*<div id="function.ob-end-flush" class="refentry"> <div class="refnamediv">  <h1 class="refname">ob_end_flush</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ob_end_flush</span> &mdash; <span class="dc-title">冲刷出（送出）输出缓冲区内容并关闭缓冲区</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-end-flush-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>ob_end_flush</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   这个函数将送出最顶层缓冲区的内容（如果有），并关闭此缓冲区。如果想进一步处理缓冲区中的内容，必须在   <span class="function"><strong style="color:#CC7832">ob_end_flush()</strong></span> 之前调用 <span class="function">{@link ob_get_contents()}</span>，因为在调用   <span class="function"><strong style="color:#CC7832">ob_end_flush()</strong></span> 后缓冲区内容被丢弃。  </p>  <p class="para">   输出缓冲区必须带有 <a href="https://www.php.net/manual/zh/outcontrol.constants.php#constant.php-output-handler-flushable" class="link">PHP_OUTPUT_HANDLER_FLUSHABLE</a>   和 <a href="https://www.php.net/manual/zh/outcontrol.constants.php#constant.php-output-handler-removable" class="link">PHP_OUTPUT_HANDLER_REMOVABLE</a> flag   的 <span class="function">{@link ob_start()}</span> 启动。否则 <span class="function"><strong style="color:#CC7832">ob_end_flush()</strong></span> 将不起作用。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">   这个函数与 <span class="function">{@link ob_get_flush()}</span> 相似，不同的是 <span class="function">{@link ob_get_flush()}</span>   会把缓冲区中的内容作为字符串返回。   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ob-end-flush-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-end-flush-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。 错误的原因首先是没有在激活的缓冲区中调用该函数，或者是因为某些原因缓冲区不能被删除（可能是特殊缓冲区）。     </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.ob-end-flush-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果函数失败了，将生成 <strong><span>E_NOTICE</span></strong> 异常。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ob-end-flush-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1607">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ob_end_flush()</strong></span> 示例</strong></p>    <div class="example-contents"><p>     下面的例子给出了一种送出缓冲区内容并关闭所有输出缓冲区的容易的方法：     </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />  </span><span style="color: #007700">while (@</span><span style="color: #9876AA">ob_end_flush</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-end-flush-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link ob_start()} - 打开输出控制缓冲</span></li>    <li class="member"><span class="function">{@link ob_get_contents()} - 返回输出缓冲区的内容</span></li>    <li class="member"><span class="function">{@link ob_get_flush()} - 刷新输出缓冲区，将其作为字符串返回并关闭输出缓冲区</span></li>    <li class="member"><span class="function">{@link ob_flush()} - 冲刷出（送出）输出缓冲区中的内容</span></li>    <li class="member"><span class="function">{@link ob_end_clean()} - 清空（擦除）缓冲区并关闭输出缓冲</span></li>   </ul>  </span> </div> </div>
 * @return bool true on success or false on failure. Reasons for failure are first that you called the*/
function ob_end_flush(): bool {}

/**
*<div id="function.ob-end-clean" class="refentry"> <div class="refnamediv">  <h1 class="refname">ob_end_clean</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ob_end_clean</span> &mdash; <span class="dc-title">清空（擦除）缓冲区并关闭输出缓冲</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-end-clean-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>ob_end_clean</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   此函数丢弃最顶层输出缓冲区的内容并关闭这个缓冲区。如果想要进一步处理缓冲区的内容，必须在   <span class="function"><strong style="color:#CC7832">ob_end_clean()</strong></span> 之前调用 <span class="function">{@link ob_get_contents()}</span>，因为当调用   <span class="function"><strong style="color:#CC7832">ob_end_clean()</strong></span> 时缓冲区内容将被丢弃。  </p>  <p class="para">   输出缓冲区必须由带有 <a href="https://www.php.net/manual/zh/outcontrol.constants.php#constant.php-output-handler-cleanable" class="link">PHP_OUTPUT_HANDLER_CLEANABLE</a>   和 <a href="https://www.php.net/manual/zh/outcontrol.constants.php#constant.php-output-handler-removable" class="link">PHP_OUTPUT_HANDLER_REMOVABLE</a> flag   的 <span class="function">{@link ob_start()}</span> 启动。否则 <span class="function"><strong style="color:#CC7832">ob_end_clean()</strong></span> 将不起作用。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ob-end-clean-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-end-clean-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。 错误的原因首先是，在调用时没有一个起作用的缓冲区，或者是因为某些原因缓冲区不能被删除（可能对特殊缓冲区而言）。     </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.ob-end-clean-errors">  <h3 class="title">错误／异常</h3>  <p class="para">  如果函数失败了，将引发一个<strong><span>E_NOTICE</span></strong>异常。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ob-end-clean-examples">  <h3 class="title">示例</h3>  <span>  下面的例子给出了一种去除所有输出缓冲区的方法：     </span>  <p class="para">   <div class="example" id="example-1604">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ob_end_clean()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />ob_start</span><span style="color: #007700">();<br />echo </span><span style="color: #DD0000">'Text that won\'t get displayed.'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">ob_end_clean</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-end-clean-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link ob_start()} - 打开输出控制缓冲</span></li>    <li class="member"><span class="function">{@link ob_get_contents()} - 返回输出缓冲区的内容</span></li>    <li class="member"><span class="function">{@link ob_flush()} - 冲刷出（送出）输出缓冲区中的内容</span></li>   </ul>  </span> </div> </div>
 * @return bool true on success or false on failure. Reasons for failure are first that you called the*/
function ob_end_clean(): bool {}

/**
*<div id="function.ob-get-flush" class="refentry"> <div class="refnamediv">  <h1 class="refname">ob_get_flush</h1>  <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ob_get_flush</span> &mdash; <span class="dc-title">刷新输出缓冲区，将其作为字符串返回并关闭输出缓冲区</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-get-flush-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>ob_get_flush</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">ob_get_flush()</strong></span> 刷新输出缓冲区，将其作为字符串返回并关闭输出缓冲。  </p>  <p class="para">   输出缓冲区比由带有 <a href="https://www.php.net/manual/zh/outcontrol.constants.php#constant.php-output-handler-flushable" class="link">PHP_OUTPUT_HANDLER_FLUSHABLE</a>   flag 的 <span class="function">{@link ob_start()}</span> 启动。否则 <span class="function"><strong style="color:#CC7832">ob_get_flush()</strong></span> 将不起作用。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    此函数与 <span class="function">{@link ob_end_flush()}</span> 相似，不同的是此函数会把缓冲区作为字符串返回。       </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ob-get-flush-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-get-flush-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回输出缓冲区的内容或者没有缓冲区激活时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ob-get-flush-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1616">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ob_get_flush()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 使用 output_buffering=On<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">ob_list_handlers</span><span style="color: #007700">());<br /><br /></span><span style="color: #FF8000">// 保存缓冲区到文件<br /></span><span style="color: #9876AA">$buffer </span><span style="color: #007700">= </span><span style="color: #9876AA">ob_get_flush</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">file_put_contents</span><span style="color: #007700">(</span><span style="color: #DD0000">'buffer.txt'</span><span style="color: #007700">, </span><span style="color: #9876AA">$buffer</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">ob_list_handlers</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; default output handler<br>)<br>Array<br>(<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-get-flush-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link ob_end_clean()} - 清空（擦除）缓冲区并关闭输出缓冲</span></li>    <li class="member"><span class="function">{@link ob_end_flush()} - 冲刷出（送出）输出缓冲区内容并关闭缓冲区</span></li>    <li class="member"><span class="function">{@link ob_list_handlers()} - 列出所有使用的输出处理程序</span></li>   </ul>  </span> </div> </div>
 * @return string|false the output buffer or false if no buffering is active.*/
function ob_get_flush(): string|false {}

/**
*<div id="function.ob-get-clean" class="refentry"> <div class="refnamediv">  <h1 class="refname">ob_get_clean</h1>  <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ob_get_clean</span> &mdash; <span class="dc-title">得到当前缓冲区的内容并删除当前输出缓冲区</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-get-clean-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>ob_get_clean</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   得到当前缓冲区的内容并删除当前输出缓冲区。  </p>  <p class="para">   <span class="function"><strong style="color:#CC7832">ob_get_clean()</strong></span> 实质上是一起执行了   <span class="function">{@link ob_get_contents()}</span> 和   <span class="function">{@link ob_end_clean()}</span>。  </p>  <p class="para">   输出缓冲区必须由带有 <a href="https://www.php.net/manual/zh/outcontrol.constants.php#constant.php-output-handler-cleanable" class="link">PHP_OUTPUT_HANDLER_CLEANABLE</a>   和 <a href="https://www.php.net/manual/zh/outcontrol.constants.php#constant.php-output-handler-removable" class="link">PHP_OUTPUT_HANDLER_REMOVABLE</a> flag   的 <span class="function">{@link ob_start()}</span> 启动。否则 <span class="function"><strong style="color:#CC7832">ob_get_clean()</strong></span> 将不起作用。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ob-get-clean-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-get-clean-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回输出缓冲区的内容，并结束输出缓冲区。如果输出缓冲区不是活跃的，即返回 <strong><span>false</span></strong> 。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ob-get-clean-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1610">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ob_get_clean()</strong></span> 的简单示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />ob_start</span><span style="color: #007700">();<br /><br />echo </span><span style="color: #DD0000">"Hello World"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$out </span><span style="color: #007700">= </span><span style="color: #9876AA">ob_get_clean</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$out </span><span style="color: #007700">= </span><span style="color: #9876AA">strtolower</span><span style="color: #007700">(</span><span style="color: #9876AA">$out</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$out</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span><br>string(11) &quot;hello world&quot;<br><br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-get-clean-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link ob_get_contents()} - 返回输出缓冲区的内容</span></li>    <li class="member"><span class="function">{@link ob_start()} - 打开输出控制缓冲</span></li>   </ul>  </span> </div> </div>
 * @return string|false the contents of the output buffer and end output buffering.*/
function ob_get_clean(): string|false {}

/**
*<div id="function.ob-get-length" class="refentry"> <div class="refnamediv">  <h1 class="refname">ob_get_length</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.2, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ob_get_length</span> &mdash; <span class="dc-title">返回输出缓冲区内容的长度</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-get-length-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>ob_get_length</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   将返回输出缓冲区内容的长度，单位为字节。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ob-get-length-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-get-length-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回输出缓冲区内容的长度，单位为字节；如果缓冲区无效，则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ob-get-length-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1619">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ob_get_length()</strong></span> 的简单示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />ob_start</span><span style="color: #007700">();<br /><br />echo </span><span style="color: #DD0000">"Hello "</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$len1 </span><span style="color: #007700">= </span><span style="color: #9876AA">ob_get_length</span><span style="color: #007700">();<br /><br />echo </span><span style="color: #DD0000">"World"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$len2 </span><span style="color: #007700">= </span><span style="color: #9876AA">ob_get_length</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">ob_end_clean</span><span style="color: #007700">();<br /><br />echo </span><span style="color: #9876AA">$len1 </span><span style="color: #007700">. </span><span style="color: #DD0000">", " </span><span style="color: #007700">. </span><span style="color: #9876AA">$len2</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>6, 11<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-get-length-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link ob_start()} - 打开输出控制缓冲</span></li>    <li class="member"><span class="function">{@link ob_get_contents()} - 返回输出缓冲区的内容</span></li>   </ul>  </span> </div></div>
 * @return int|false the length of the output buffer contents or false if no*/
function ob_get_length(): int|false {}

/**
*<div id="function.ob-get-level" class="refentry"> <div class="refnamediv">  <h1 class="refname">ob_get_level</h1>  <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ob_get_level</span> &mdash; <span class="dc-title">返回输出缓冲机制的嵌套级别</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-get-level-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>ob_get_level</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   返回输出缓冲机制的嵌套级别。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ob-get-level-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-get-level-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回嵌套的输出缓冲处理程序的级别；或者是，如果输出缓冲区不起作用，返回零。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-get-level-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link ob_start()} - 打开输出控制缓冲</span></li>    <li class="member"><span class="function">{@link ob_get_contents()} - 返回输出缓冲区的内容</span></li>   </ul>  </span> </div></div>
 * @return int the level of nested output buffering handlers or zero if output*/
function ob_get_level(): int {}

/**
 * Get status of output buffers
 * @link https://php.net/manual/en/function.ob-get-status.php
 * @param bool $full_status [optional] <p>
 * true to return all active output buffer levels. If false or not
 * set, only the top level output buffer is returned.
 * </p>
 * @return array If called without the full_status parameter
 * or with full_status = false a simple array
 * with the following elements is returned:
 * <pre>
 * Array
 * (
 *     [level] => 2
 *     [type] => 0
 *     [status] => 0
 *     [name] => URL-Rewriter
 *     [del] => 1
 * )
 * </pre>
 * <table>
 * <tr><th>Key</th><th>Value</th></tr>
 * <tr><td>level</td><td>Output nesting level</td></tr>
 * <tr><td>type</td><td><em>PHP_OUTPUT_HANDLER_INTERNAL (0)</em> or <em>PHP_OUTPUT_HANDLER_USER (1)</em></td></tr>
 * <tr><td>status</td><td>One of <em>PHP_OUTPUT_HANDLER_START</em> (0), <em>PHP_OUTPUT_HANDLER_CONT</em> (1) or <em>PHP_OUTPUT_HANDLER_END</em> (2)</td></tr>
 * <tr><td>name</td><td>Name of active output handler or &#039; default output handler&#039; if none is set</td></tr>
 * <tr><td>del</td><td>Erase-flag as set by ob_start()</td></tr>
 * </table>
 * <p>
 * If called with full_status = TRUE an array with one element for each active output buffer
 * level is returned. The output level is used as key of the top level array and each array
 * element itself is another array holding status information on one active output level.
 * </p>
 * <pre>
 * Array
 * (
 *     [0] => Array
 *         (
 *             [chunk_size] => 0
 *             [size] => 40960
 *             [block_size] => 10240
 *             [type] => 1
 *             [status] => 0
 *             [name] => default output handler
 *             [del] => 1
 *         )
 *
 *     [1] => Array
 *         (
 *             [chunk_size] => 0
 *             [size] => 40960
 *             [block_size] => 10240
 *             [type] => 0
 *             [buffer_size] => 0
 *             [status] => 0
 *             [name] => URL-Rewriter
 *             [del] => 1
 *         )
 *
 * )
 * </pre>
 * <p> The full output contains these additional elements:</p>
 * <table>
 * <tr><th>Key</th><th>Value</th></tr>
 * <tr><td>chunk_size</td><td>Chunk size as set by ob_start()</td></tr>
 * <tr><td>size</td><td>...</td></tr>
 * <tr><td>blocksize</td><td>...</td></tr>
 * </table>
 */
#[ArrayShape([
    "level" => "int",
    "type" => "int",
    "flags" => "int",
    "name" => "string",
    "del" => "int",
    "chunk_size" => "int",
    "buffer_size" => "int",
    "buffer_used" => "int",
])]
/**
*<div id="function.ob-get-status" class="refentry"> <div class="refnamediv">  <h1 class="refname">ob_get_status</h1>  <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ob_get_status</span> &mdash; <span class="dc-title">得到所有输出缓冲区的状态</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-get-status-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>ob_get_status</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$full_status</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">ob_get_status()</strong></span> 返回最顶层输出缓冲区的状态信息；或者如果 <span class="parameter" style="color:#3A95FF">full_status</span>   设为 <strong><span>true</span></strong>，返回所有有效的输出缓冲级别。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ob-get-status-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">full_status</span></dt>     <dd>      <p class="para">        设为 <strong><span>true</span></strong> 返回所有有效的输出缓冲区级别的状态信息。如果设为 <strong><span>false</span></strong> 或者没有设置，仅返回最顶层输出缓冲区的状态信息。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-get-status-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    如果调用时没有 <span class="parameter" style="color:#3A95FF">full_status</span> 参数，或者    <span class="parameter" style="color:#3A95FF">full_status</span> = <strong><span>false</span></strong> 将返回一个包含下面元素的简单数组：   <div class="informalexample">    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="returnvaluescode"><span>Array<br>(<br>    [level] =&gt; 2<br>    [type] =&gt; 0<br>    [status] =&gt; 0<br>    [name] =&gt; URL-Rewriter<br>    [del] =&gt; 1<br>)</span></div>    </div>   </div>   <table class="segmentedlist">    <caption><strong> <span class="function"><strong style="color:#CC7832">ob_get_status()</strong></span> 的简单结果</strong></caption>    <thead><tr><th>Key</th><th>Value</th>    </tr></thead><tbody><tr class="seglistitem"><td class="seg">level</td><td class="seg">输出嵌套级别</td></tr>    <tr class="seglistitem"><td class="seg">type</td><td class="seg"><span>0</span>（内部处理程序）或者 <span>1</span>（用户提供的处理程序）</td></tr>    <tr class="seglistitem"><td class="seg">status</td><td class="seg"><span>PHP_OUTPUT_HANDLER_START</span> (0), <span>PHP_OUTPUT_HANDLER_CONT</span> (1) or <span>PHP_OUTPUT_HANDLER_END</span> (2) 三个之一</td></tr>    <tr class="seglistitem"><td class="seg">name</td><td class="seg">起作用的输出处理程序的名字，或者是默认的输出处理程序的名字（如果没有设置的话）</td></tr>    <tr class="seglistitem"><td class="seg">del</td><td class="seg">由<span class="function">{@link ob_start()}</span>设置的删除标签（Erase-flag）</td></tr>   </tbody></table>  </p>  <p class="para">   如果调用时<span class="parameter" style="color:#3A95FF">full_status</span> = <strong><span>true</span></strong>，将返回一个数组，该数组的每个元素包含有效的输出缓冲区级别的状态信息。缓冲区的级别数用来当作数组的第一维数；每个元素自身是另一个数组，它持有该有效输出级别的状态信息。   <div class="informalexample">    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; Array<br>        (<br>            [chunk_size] =&gt; 0<br>            [size] =&gt; 40960<br>            [block_size] =&gt; 10240<br>            [type] =&gt; 1<br>            [status] =&gt; 0<br>            [name] =&gt; default output handler<br>            [del] =&gt; 1<br>        )<br><br>    [1] =&gt; Array<br>        (<br>            [chunk_size] =&gt; 0<br>            [size] =&gt; 40960<br>            [block_size] =&gt; 10240<br>            [type] =&gt; 0<br>            [buffer_size] =&gt; 0<br>            [status] =&gt; 0<br>            [name] =&gt; URL-Rewriter<br>            [del] =&gt; 1<br>        )<br><br>)<br></span></div>    </div>   </div>  </p>  <p class="para">   完整的输出包含以下附加元素：   <table class="segmentedlist">    <caption><strong>完整的<span class="function"><strong style="color:#CC7832">ob_get_status()</strong></span> 结果</strong></caption>    <thead><tr><th>Key</th><th>Value</th>    </tr></thead><tbody><tr class="seglistitem"><td class="seg">chunk_size</td><td class="seg">由 <span class="function">{@link ob_start()}</span>设置的Chunk size值</td></tr>    <tr class="seglistitem"><td class="seg">size</td><td class="seg">...</td></tr>    <tr class="seglistitem"><td class="seg">blocksize</td><td class="seg">...</td></tr>   </tbody></table>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-get-status-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link ob_get_level()} - 返回输出缓冲机制的嵌套级别</span></li>    <li class="member"><span class="function">{@link ob_list_handlers()} - 列出所有使用的输出处理程序</span></li>   </ul>  </span> </div></div>
*/
function ob_get_status(bool $full_status = false): array {}

/**
*<div id="function.ob-get-contents" class="refentry"> <div class="refnamediv">  <h1 class="refname">ob_get_contents</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ob_get_contents</span> &mdash; <span class="dc-title">返回输出缓冲区的内容</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-get-contents-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>ob_get_contents</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">  只是得到输出缓冲区的内容，但不清除它。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ob-get-contents-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-get-contents-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  此函数返回输出缓冲区的内容，或者如果输出缓冲区无效将返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ob-get-contents-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1613">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ob_get_contents()</strong></span> 简单示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />ob_start</span><span style="color: #007700">();<br /><br />echo </span><span style="color: #DD0000">"Hello "</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$out1 </span><span style="color: #007700">= </span><span style="color: #9876AA">ob_get_contents</span><span style="color: #007700">();<br /><br />echo </span><span style="color: #DD0000">"World"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$out2 </span><span style="color: #007700">= </span><span style="color: #9876AA">ob_get_contents</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">ob_end_clean</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$out1</span><span style="color: #007700">, </span><span style="color: #9876AA">$out2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(6) &quot;Hello &quot;<br>string(11) &quot;Hello World&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-get-contents-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link ob_start()} - 打开输出控制缓冲</span></li>    <li class="member"><span class="function">{@link ob_get_length()} - 返回输出缓冲区内容的长度</span></li>   </ul>  </span> </div> </div>
 * @return string|false This will return the contents of the output buffer or false, if output*/
function ob_get_contents(): string|false {}

/**
*<div id="function.ob-implicit-flush" class="refentry"> <div class="refnamediv">  <h1 class="refname">ob_implicit_flush</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ob_implicit_flush</span> &mdash; <span class="dc-title">打开/关闭绝对刷送</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-implicit-flush-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>ob_implicit_flush</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$enable</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">ob_implicit_flush()</strong></span> 将打开或关闭绝对（隐式）刷送。绝对（隐式）刷送将导致在每次输出调用后有一次刷送操作，以便不再需要对 <span class="function">{@link flush()}</span> 的显式调用。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ob-implicit-flush-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">enable</span></dt>     <dd>      <p class="para">        设为 <strong><span>true</span></strong> 打开绝对刷送，反之是  <strong><span>false</span></strong>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-implicit-flush-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.ob-implicit-flush-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">enable</span> 现在需要 <span class="type" style="color:#EAB766">bool</span> 值；之前，需要 <span class="type" style="color:#EAB766">int</span>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-implicit-flush-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link flush()} - 刷新系统输出缓冲区</span></li>    <li class="member"><span class="function">{@link ob_start()} - 打开输出控制缓冲</span></li>    <li class="member"><span class="function">{@link ob_end_flush()} - 冲刷出（送出）输出缓冲区内容并关闭缓冲区</span></li>   </ul>  </span> </div></div>
 * @return void*/
function ob_implicit_flush(#[LanguageLevelTypeAware(["8.0" => "bool"], default: "int")] $enable = true): void {}

/**
*<div id="function.ob-list-handlers" class="refentry"> <div class="refnamediv">  <h1 class="refname">ob_list_handlers</h1>  <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ob_list_handlers</span> &mdash; <span class="dc-title">列出所有使用的输出处理程序</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ob-list-handlers-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>ob_list_handlers</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   列出所有使用的输出处理程序。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ob-list-handlers-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ob-list-handlers-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   此函数将返回一个数组，数组元素是正在使用中输出处理程序名（如果存在的输出处理程序的话）。如果启用了   <a href="https://www.php.net/manual/zh/outcontrol.configuration.php#ini.output-buffering" class="link">output_buffering</a> 或者在   <span class="function">{@link ob_start()}</span> 中创建了一个匿名函数，<span class="function"><strong style="color:#CC7832">ob_list_handlers()</strong></span>   将返回“default output handler”。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ob-list-handlers-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1622">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ob_list_handlers()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 使用 output_buffering=On<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">ob_list_handlers</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">ob_end_flush</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">ob_start</span><span style="color: #007700">(</span><span style="color: #DD0000">"ob_gzhandler"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">ob_list_handlers</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">ob_end_flush</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 匿名函数<br /></span><span style="color: #9876AA">ob_start</span><span style="color: #007700">(function(</span><span style="color: #9876AA">$string</span><span style="color: #007700">) { return </span><span style="color: #9876AA">$string</span><span style="color: #007700">; });<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">ob_list_handlers</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">ob_end_flush</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; default output handler<br>)<br><br>Array<br>(<br>    [0] =&gt; ob_gzhandler<br>)<br><br>Array<br>(<br>    [0] =&gt; Closure::__invoke<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ob-list-handlers-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link ob_end_clean()} - 清空（擦除）缓冲区并关闭输出缓冲</span></li>    <li class="member"><span class="function">{@link ob_end_flush()} - 冲刷出（送出）输出缓冲区内容并关闭缓冲区</span></li>    <li class="member"><span class="function">{@link ob_get_flush()} - 刷新输出缓冲区，将其作为字符串返回并关闭输出缓冲区</span></li>    <li class="member"><span class="function">{@link ob_start()} - 打开输出控制缓冲</span></li>   </ul>  </span> </div></div>
 * @return array This will return an array with the output handlers in use (if any). If*/
function ob_list_handlers(): array {}

/**
*<div id="function.ksort" class="refentry"> <div class="refnamediv">  <h1 class="refname">ksort</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ksort</span> &mdash; <span class="dc-title">对数组根据键名升序排序</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ksort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>ksort</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>SORT_REGULAR</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   对 <span class="parameter" style="color:#3A95FF">array</span> 本身进行按键（key）升序排序。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">    重置数组中的内部指针，指向第一个元素。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ksort-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>          <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>  <dd>  <p class="para">    可选的第二个参数 <span class="parameter" style="color:#3A95FF">flags</span>     可以用以下值改变排序的行为：  </p>  <p class="para">    排序类型标记：    <ul class="itemizedlist">    <li class="listitem">      <span class="simpara"><strong><span>SORT_REGULAR</span></strong>  - 正常比较单元         详细描述参见 <a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">比较运算符</a> 章节</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_NUMERIC</span></strong> - 单元被作为数字来比较</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_STRING</span></strong> - 单元被作为字符串来比较</span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_LOCALE_STRING</span></strong> -      根据当前的区域（locale）设置来把单元当作字符串比较，可以用      <span class="function">{@link setlocale()}</span> 来改变。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_NATURAL</span></strong> - 和 <span class="function">{@link natsort()}</span>      类似对每个单元以“自然的顺序”对字符串进行排序。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_FLAG_CASE</span></strong> - 能够与      <strong><span>SORT_STRING</span></strong> 或         <strong><span>SORT_NATURAL</span></strong>          合并（OR 位运算），不区分大小写排序字符串。      </span>    </li>    </ul>  </p>  </dd>   </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ksort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.ksort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ksort-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ksort()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"d"</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"lemon"</span><span style="color: #007700">, </span><span style="color: #DD0000">"a"</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b"</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"banana"</span><span style="color: #007700">, </span><span style="color: #DD0000">"c"</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"apple"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">ksort</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$fruits </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$val</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000"> = </span><span style="color: #9876AA">$val</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>a = orange<br>b = banana<br>c = apple<br>d = lemon<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 对使用 <span class="type" style="color:#EAB766">int</span> 键的数组进行 <span class="function"><strong style="color:#CC7832">ksort()</strong></span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$a </span><span style="color: #007700">= [</span><span style="color: #9876AA">0 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'First'</span><span style="color: #007700">, </span><span style="color: #9876AA">2 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Last'</span><span style="color: #007700">, </span><span style="color: #9876AA">1 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Middle'</span><span style="color: #007700">];<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">ksort</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(3) {<br>  [0]=&gt;<br>  string(5) &quot;First&quot;<br>  [2]=&gt;<br>  string(4) &quot;Last&quot;<br>  [1]=&gt;<br>  string(6) &quot;Middle&quot;<br>}<br>array(3) {<br>  [0]=&gt;<br>  string(5) &quot;First&quot;<br>  [1]=&gt;<br>  string(6) &quot;Middle&quot;<br>  [2]=&gt;<br>  string(4) &quot;Last&quot;<br>}<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ksort-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link sort()} - 对数组升序排序</span></li>   <li class="member"><span class="function">{@link krsort()} - 对数组按照键名逆向排序</span></li>   <li class="member"><a href="https://www.php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>  </ul> </div></div>
*/
function ksort(array &$array, int $flags = SORT_REGULAR) {}

/**
*<div id="function.krsort" class="refentry"> <div class="refnamediv">  <h1 class="refname">krsort</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">krsort</span> &mdash; <span class="dc-title">对数组按照键名逆向排序</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.krsort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>krsort</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>SORT_REGULAR</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   对 <span class="parameter" style="color:#3A95FF">array</span> 本身按照键（key）降序排序。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">    重置数组中的内部指针，指向第一个元素。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.krsort-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>          <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>  <dd>  <p class="para">    可选的第二个参数 <span class="parameter" style="color:#3A95FF">flags</span>     可以用以下值改变排序的行为：  </p>  <p class="para">    排序类型标记：    <ul class="itemizedlist">    <li class="listitem">      <span class="simpara"><strong><span>SORT_REGULAR</span></strong>  - 正常比较单元         详细描述参见 <a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">比较运算符</a> 章节</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_NUMERIC</span></strong> - 单元被作为数字来比较</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_STRING</span></strong> - 单元被作为字符串来比较</span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_LOCALE_STRING</span></strong> -      根据当前的区域（locale）设置来把单元当作字符串比较，可以用      <span class="function">{@link setlocale()}</span> 来改变。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_NATURAL</span></strong> - 和 <span class="function">{@link natsort()}</span>      类似对每个单元以“自然的顺序”对字符串进行排序。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_FLAG_CASE</span></strong> - 能够与      <strong><span>SORT_STRING</span></strong> 或         <strong><span>SORT_NATURAL</span></strong>          合并（OR 位运算），不区分大小写排序字符串。      </span>    </li>    </ul>  </p>  </dd>   </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.krsort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.krsort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.krsort-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">krsort()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"d"</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"lemon"</span><span style="color: #007700">, </span><span style="color: #DD0000">"a"</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b"</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"banana"</span><span style="color: #007700">, </span><span style="color: #DD0000">"c"</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"apple"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">krsort</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$fruits </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$val</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000"> = </span><span style="color: #9876AA">$val</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>d = lemon<br>c = apple<br>b = banana<br>a = orange<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.krsort-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link sort()} - 对数组升序排序</span></li>   <li class="member"><span class="function">{@link ksort()} - 对数组根据键名升序排序</span></li>   <li class="member"><a href="https://www.php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>  </ul> </div></div>
*/
function krsort(array &$array, int $flags = SORT_REGULAR) {}

/**
*<div id="function.natsort" class="refentry"> <div class="refnamediv">  <h1 class="refname">natsort</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">natsort</span> &mdash; <span class="dc-title">用“自然排序”算法对数组排序</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.natsort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>natsort</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$array</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   本函数实现了一个和人们通常对字母数字字符串进行排序的方法一样的排序算法并保持原有键／值的关联，这被称为“自然排序”。本算法和通常的计算机字符串排序算法（用于   <span class="function">{@link sort()}</span>）的区别见下面示例。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">    重置数组中的内部指针，指向第一个元素。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.natsort-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的 array。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.natsort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.natsort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.natsort-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">natsort()</strong></span> 基本用法的操作示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array1 </span><span style="color: #007700">= </span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"img12.png"</span><span style="color: #007700">, </span><span style="color: #DD0000">"img10.png"</span><span style="color: #007700">, </span><span style="color: #DD0000">"img2.png"</span><span style="color: #007700">, </span><span style="color: #DD0000">"img1.png"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">asort</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"Standard sorting\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">natsort</span><span style="color: #007700">(</span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"\nNatural order sorting\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Standard sorting<br>Array<br>(<br>    [3] =&gt; img1.png<br>    [1] =&gt; img10.png<br>    [0] =&gt; img12.png<br>    [2] =&gt; img2.png<br>)<br><br>Natural order sorting<br>Array<br>(<br>    [3] =&gt; img1.png<br>    [2] =&gt; img2.png<br>    [1] =&gt; img10.png<br>    [0] =&gt; img12.png<br>)<br></span></div>    </div>    <div class="example-contents"><p>     更多信息见 Martin Pool 的     <a href="https://www.php.net/manual/zh/https://github.com/sourcefrog/natsort" class="link external">&raquo;&nbsp;Natural Order String Comparison</a>     页面。    </p></div>   </div>   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">natsort()</strong></span> 示例，解释了潜在的陷阱</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #DD0000">"Negative numbers\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$negative </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'-5'</span><span style="color: #007700">,</span><span style="color: #DD0000">'3'</span><span style="color: #007700">,</span><span style="color: #DD0000">'-2'</span><span style="color: #007700">,</span><span style="color: #DD0000">'0'</span><span style="color: #007700">,</span><span style="color: #DD0000">'-1000'</span><span style="color: #007700">,</span><span style="color: #DD0000">'9'</span><span style="color: #007700">,</span><span style="color: #DD0000">'1'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$negative</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">natsort</span><span style="color: #007700">(</span><span style="color: #9876AA">$negative</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$negative</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #DD0000">"Zero padding\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$zeros </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'09'</span><span style="color: #007700">, </span><span style="color: #DD0000">'8'</span><span style="color: #007700">, </span><span style="color: #DD0000">'10'</span><span style="color: #007700">, </span><span style="color: #DD0000">'009'</span><span style="color: #007700">, </span><span style="color: #DD0000">'011'</span><span style="color: #007700">, </span><span style="color: #DD0000">'0'</span><span style="color: #007700">); <br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$zeros</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">natsort</span><span style="color: #007700">(</span><span style="color: #9876AA">$zeros</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$zeros</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Negative numbers<br>Array<br>(<br>    [0] =&gt; -5<br>    [1] =&gt; 3<br>    [2] =&gt; -2<br>    [3] =&gt; 0<br>    [4] =&gt; -1000<br>    [5] =&gt; 9<br>    [6] =&gt; 1<br>)<br>Array<br>(<br>    [2] =&gt; -2<br>    [0] =&gt; -5<br>    [4] =&gt; -1000<br>    [3] =&gt; 0<br>    [6] =&gt; 1<br>    [1] =&gt; 3<br>    [5] =&gt; 9<br>)<br><br>Zero padding<br>Array<br>(<br>    [0] =&gt; 09<br>    [1] =&gt; 8<br>    [2] =&gt; 10<br>    [3] =&gt; 009<br>    [4] =&gt; 011<br>    [5] =&gt; 0<br>)<br>Array<br>(<br>    [5] =&gt; 0<br>    [1] =&gt; 8<br>    [3] =&gt; 009<br>    [0] =&gt; 09<br>    [2] =&gt; 10<br>    [4] =&gt; 011<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.natsort-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link natcasesort()} - 用&ldquo;自然排序&rdquo;算法对数组进行不区分大小写字母的排序</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>    <li class="member"><span class="function">{@link strnatcmp()} - 使用自然排序算法比较字符串</span></li>    <li class="member"><span class="function">{@link strnatcasecmp()} - 使用&ldquo;自然顺序&rdquo;算法比较字符串（不区分大小写）</span></li>   </ul>  </span> </div></div>
*/
function natsort(array &$array) {}

/**
*<div id="function.natcasesort" class="refentry"> <div class="refnamediv">  <h1 class="refname">natcasesort</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">natcasesort</span> &mdash; <span class="dc-title">用“自然排序”算法对数组进行不区分大小写字母的排序</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.natcasesort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>natcasesort</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$array</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">natcasesort()</strong></span> 是 <span class="function">{@link natsort()}</span> 函数的不区分大小写字母的版本。  </p>  <p class="para">   本函数实现了一个和人们通常对字母数字字符串进行排序的方法一样的排序算法并保持原有键／值的关联，这被称为“自然排序”。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">    重置数组中的内部指针，指向第一个元素。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.natcasesort-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.natcasesort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.natcasesort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.natcasesort-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">natcasesort()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array1 </span><span style="color: #007700">= </span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'IMG0.png'</span><span style="color: #007700">, </span><span style="color: #DD0000">'img12.png'</span><span style="color: #007700">, </span><span style="color: #DD0000">'img10.png'</span><span style="color: #007700">, </span><span style="color: #DD0000">'img2.png'</span><span style="color: #007700">, </span><span style="color: #DD0000">'img1.png'</span><span style="color: #007700">, </span><span style="color: #DD0000">'IMG3.png'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">sort</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"Standard sorting\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">natcasesort</span><span style="color: #007700">(</span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"\nNatural order sorting (case-insensitive)\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Standard sorting<br>Array<br>(<br>    [0] =&gt; IMG0.png<br>    [1] =&gt; IMG3.png<br>    [2] =&gt; img1.png<br>    [3] =&gt; img10.png<br>    [4] =&gt; img12.png<br>    [5] =&gt; img2.png<br>)<br><br>Natural order sorting (case-insensitive)<br>Array<br>(<br>    [0] =&gt; IMG0.png<br>    [4] =&gt; img1.png<br>    [3] =&gt; img2.png<br>    [5] =&gt; IMG3.png<br>    [2] =&gt; img10.png<br>    [1] =&gt; img12.png<br>)<br></span></div>    </div>    <div class="example-contents"><p>     更多信息见 Martin Pool 的     <a href="https://www.php.net/manual/zh/https://github.com/sourcefrog/natsort" class="link external">&raquo;&nbsp;Natural Order String Comparison</a> 页面。    </p></div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.natcasesort-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link natsort()} - 用&ldquo;自然排序&rdquo;算法对数组排序</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>    <li class="member"><span class="function">{@link strnatcmp()} - 使用自然排序算法比较字符串</span></li>    <li class="member"><span class="function">{@link strnatcasecmp()} - 使用&ldquo;自然顺序&rdquo;算法比较字符串（不区分大小写）</span></li>   </ul>  </span> </div>  </div>
*/
function natcasesort(array &$array) {}

/**
*<div id="function.asort" class="refentry"> <div class="refnamediv">  <h1 class="refname">asort</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">asort</span> &mdash; <span class="dc-title">对数组进行升序排序并保持索引关系</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.asort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>asort</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>SORT_REGULAR</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   对 <span class="parameter" style="color:#3A95FF">array</span> 自身按照升序进行排序，并依然保持数组的键与值的关联。  </p>  <p class="para">   主要用于对那些单元顺序很重要的关联数组进行排序。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">    重置数组中的内部指针，指向第一个元素。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.asort-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>          <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>  <dd>  <p class="para">    可选的第二个参数 <span class="parameter" style="color:#3A95FF">flags</span>     可以用以下值改变排序的行为：  </p>  <p class="para">    排序类型标记：    <ul class="itemizedlist">    <li class="listitem">      <span class="simpara"><strong><span>SORT_REGULAR</span></strong>  - 正常比较单元         详细描述参见 <a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">比较运算符</a> 章节</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_NUMERIC</span></strong> - 单元被作为数字来比较</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_STRING</span></strong> - 单元被作为字符串来比较</span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_LOCALE_STRING</span></strong> -      根据当前的区域（locale）设置来把单元当作字符串比较，可以用      <span class="function">{@link setlocale()}</span> 来改变。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_NATURAL</span></strong> - 和 <span class="function">{@link natsort()}</span>      类似对每个单元以“自然的顺序”对字符串进行排序。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_FLAG_CASE</span></strong> - 能够与      <strong><span>SORT_STRING</span></strong> 或         <strong><span>SORT_NATURAL</span></strong>          合并（OR 位运算），不区分大小写排序字符串。      </span>    </li>    </ul>  </p>  </dd>   </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.asort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.asort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.asort-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">asort()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"d" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"lemon"</span><span style="color: #007700">, </span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"orange"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"banana"</span><span style="color: #007700">, </span><span style="color: #DD0000">"c" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"apple"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">asort</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$fruits </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$val</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000"> = </span><span style="color: #9876AA">$val</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>c = apple<br>b = banana<br>d = lemon<br>a = orange<br></span></div>    </div>    <div class="example-contents"><p>     fruits 按照字母顺序排序，并且值与索引的关系不变。    </p></div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.asort-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link sort()} - 对数组升序排序</span></li>   <li class="member"><span class="function">{@link arsort()} - 对数组进行降向排序并保持索引关系</span></li>   <li class="member"><a href="https://www.php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>  </ul> </div></div>
*/
function asort(array &$array, int $flags = SORT_REGULAR) {}

/**
*<div id="function.arsort" class="refentry"> <div class="refnamediv">  <h1 class="refname">arsort</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">arsort</span> &mdash; <span class="dc-title">对数组进行降向排序并保持索引关系</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.arsort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>arsort</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>SORT_REGULAR</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   对 <span class="parameter" style="color:#3A95FF">array</span> 本身按照降序排序，并保持数组的键与值之间的关联。  </p>  <p class="para">   主要用于对那些单元顺序很重要的结合数组进行排序。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">    重置数组中的内部指针，指向第一个元素。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.arsort-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>          <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>  <dd>  <p class="para">    可选的第二个参数 <span class="parameter" style="color:#3A95FF">flags</span>     可以用以下值改变排序的行为：  </p>  <p class="para">    排序类型标记：    <ul class="itemizedlist">    <li class="listitem">      <span class="simpara"><strong><span>SORT_REGULAR</span></strong>  - 正常比较单元         详细描述参见 <a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">比较运算符</a> 章节</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_NUMERIC</span></strong> - 单元被作为数字来比较</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_STRING</span></strong> - 单元被作为字符串来比较</span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_LOCALE_STRING</span></strong> -      根据当前的区域（locale）设置来把单元当作字符串比较，可以用      <span class="function">{@link setlocale()}</span> 来改变。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_NATURAL</span></strong> - 和 <span class="function">{@link natsort()}</span>      类似对每个单元以“自然的顺序”对字符串进行排序。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_FLAG_CASE</span></strong> - 能够与      <strong><span>SORT_STRING</span></strong> 或         <strong><span>SORT_NATURAL</span></strong>          合并（OR 位运算），不区分大小写排序字符串。      </span>    </li>    </ul>  </p>  </dd>   </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.arsort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.arsort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.arsort-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">arsort()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"d" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"lemon"</span><span style="color: #007700">, </span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"orange"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"banana"</span><span style="color: #007700">, </span><span style="color: #DD0000">"c" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"apple"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">arsort</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$fruits </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$val</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000"> = </span><span style="color: #9876AA">$val</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>a = orange<br>d = lemon<br>b = banana<br>c = apple<br></span></div>    </div>    <div class="example-contents"><p>     fruits 被按照字母顺序逆向排序，并且单元的索引关系不变。    </p></div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.arsort-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link sort()} - 对数组升序排序</span></li>   <li class="member"><span class="function">{@link asort()} - 对数组进行升序排序并保持索引关系</span></li>   <li class="member"><a href="https://www.php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>  </ul> </div></div>
*/
function arsort(array &$array, int $flags = SORT_REGULAR) {}

/**
*<div id="function.sort" class="refentry"> <div class="refnamediv">  <h1 class="refname">sort</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">sort</span> &mdash; <span class="dc-title">对数组升序排序</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.sort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>sort</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>SORT_REGULAR</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   对 <span class="parameter" style="color:#3A95FF">array</span> 本身按照值（value）升序排序。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数为 <span class="parameter" style="color:#3A95FF">array</span>中的元素赋与新的键名。这将删除原有的键名，而不是仅仅将键名重新排序。</span></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">    重置数组中的内部指针，指向第一个元素。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.sort-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>          <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>  <dd>  <p class="para">    可选的第二个参数 <span class="parameter" style="color:#3A95FF">flags</span>     可以用以下值改变排序的行为：  </p>  <p class="para">    排序类型标记：    <ul class="itemizedlist">    <li class="listitem">      <span class="simpara"><strong><span>SORT_REGULAR</span></strong>  - 正常比较单元         详细描述参见 <a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">比较运算符</a> 章节</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_NUMERIC</span></strong> - 单元被作为数字来比较</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_STRING</span></strong> - 单元被作为字符串来比较</span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_LOCALE_STRING</span></strong> -      根据当前的区域（locale）设置来把单元当作字符串比较，可以用      <span class="function">{@link setlocale()}</span> 来改变。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_NATURAL</span></strong> - 和 <span class="function">{@link natsort()}</span>      类似对每个单元以“自然的顺序”对字符串进行排序。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_FLAG_CASE</span></strong> - 能够与      <strong><span>SORT_STRING</span></strong> 或         <strong><span>SORT_NATURAL</span></strong>          合并（OR 位运算），不区分大小写排序字符串。      </span>    </li>    </ul>  </p>  </dd>   </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.sort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.sort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.sort-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">sort()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"lemon"</span><span style="color: #007700">, </span><span style="color: #DD0000">"orange"</span><span style="color: #007700">, </span><span style="color: #DD0000">"banana"</span><span style="color: #007700">, </span><span style="color: #DD0000">"apple"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">sort</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$fruits </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$val</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"fruits[" </span><span style="color: #007700">. </span><span style="color: #9876AA">$key </span><span style="color: #007700">. </span><span style="color: #DD0000">"] = " </span><span style="color: #007700">. </span><span style="color: #9876AA">$val </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>fruits[0] = apple<br>fruits[1] = banana<br>fruits[2] = lemon<br>fruits[3] = orange<br></span></div>    </div>   </div>  </span>  <p class="para">   fruits 被按照字母顺序排序。  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 使用 <span class="function"><strong style="color:#CC7832">sort()</strong></span> 不区分大小写自然排序的示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$fruits </span><span style="color: #007700">= array(<br />    </span><span style="color: #DD0000">"Orange1"</span><span style="color: #007700">, </span><span style="color: #DD0000">"orange2"</span><span style="color: #007700">, </span><span style="color: #DD0000">"Orange3"</span><span style="color: #007700">, </span><span style="color: #DD0000">"orange20"<br /></span><span style="color: #007700">);<br /></span><span style="color: #9876AA">sort</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">, </span><span style="color: #9876AA">SORT_NATURAL </span><span style="color: #007700">| </span><span style="color: #9876AA">SORT_FLAG_CASE</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$fruits </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$val</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"fruits[" </span><span style="color: #007700">. </span><span style="color: #9876AA">$key </span><span style="color: #007700">. </span><span style="color: #DD0000">"] = " </span><span style="color: #007700">. </span><span style="color: #9876AA">$val </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>fruits[0] = Orange1<br>fruits[1] = orange2<br>fruits[2] = Orange3<br>fruits[3] = orange20<br></span></div>    </div>   </div>  </p>  <p class="para">   fruits 排序得像 <span class="function">{@link natcasesort()}</span> 的结果。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.sort-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    和大多数 PHP 排序函数一样，<span class="function"><strong style="color:#CC7832">sort()</strong></span> 使用了 <a href="http://en.wikipedia.org/wiki/Quicksort" class="link external">&raquo;&nbsp;快速排序</a> 实现的。    在已排序的数组分片的中间，选择基准值，具有最优时间。但不应该依赖它实现的细节。   </span>  </p></blockquote>  <div class="warning"><strong class="warning">警告</strong>   <p class="simpara">    在对含有混合类型值的数组以 <span class="parameter" style="color:#3A95FF">flags</span> 为 <strong><span>SORT_REGULAR</span></strong>    排序时要小心，因为 <span class="function"><strong style="color:#CC7832">sort()</strong></span> 可能会产生不可预知的结果。   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.sort-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link rsort()} - 对数组降序排序</span></li>   <li class="member"><a href="https://www.php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>  </ul> </div></div>
*/
function sort(array &$array, int $flags = SORT_REGULAR) {}

/**
*<div id="function.rsort" class="refentry"> <div class="refnamediv">  <h1 class="refname">rsort</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">rsort</span> &mdash; <span class="dc-title">对数组降序排序</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.rsort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>rsort</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>SORT_REGULAR</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   对 <span class="parameter" style="color:#3A95FF">array</span> 本身按照值（value）降序排序。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数为 <span class="parameter" style="color:#3A95FF">array</span>中的元素赋与新的键名。这将删除原有的键名，而不是仅仅将键名重新排序。</span></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">    重置数组中的内部指针，指向第一个元素。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.rsort-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>          <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>  <dd>  <p class="para">    可选的第二个参数 <span class="parameter" style="color:#3A95FF">flags</span>     可以用以下值改变排序的行为：  </p>  <p class="para">    排序类型标记：    <ul class="itemizedlist">    <li class="listitem">      <span class="simpara"><strong><span>SORT_REGULAR</span></strong>  - 正常比较单元         详细描述参见 <a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">比较运算符</a> 章节</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_NUMERIC</span></strong> - 单元被作为数字来比较</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_STRING</span></strong> - 单元被作为字符串来比较</span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_LOCALE_STRING</span></strong> -      根据当前的区域（locale）设置来把单元当作字符串比较，可以用      <span class="function">{@link setlocale()}</span> 来改变。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_NATURAL</span></strong> - 和 <span class="function">{@link natsort()}</span>      类似对每个单元以“自然的顺序”对字符串进行排序。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_FLAG_CASE</span></strong> - 能够与      <strong><span>SORT_STRING</span></strong> 或         <strong><span>SORT_NATURAL</span></strong>          合并（OR 位运算），不区分大小写排序字符串。      </span>    </li>    </ul>  </p>  </dd>   </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.rsort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.rsort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.rsort-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">rsort()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"lemon"</span><span style="color: #007700">, </span><span style="color: #DD0000">"orange"</span><span style="color: #007700">, </span><span style="color: #DD0000">"banana"</span><span style="color: #007700">, </span><span style="color: #DD0000">"apple"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">rsort</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$fruits </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$val</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000"> = </span><span style="color: #9876AA">$val</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>0 = orange<br>1 = lemon<br>2 = banana<br>3 = apple<br></span></div>    </div>    <div class="example-contents"><p>     fruits 被按照字母顺序逆向排序。    </p></div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.rsort-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数为 <span class="parameter" style="color:#3A95FF">array</span>中的元素赋与新的键名。这将删除原有的键名，而不是仅仅将键名重新排序。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.rsort-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link sort()} - 对数组升序排序</span></li>   <li class="member"><span class="function">{@link arsort()} - 对数组进行降向排序并保持索引关系</span></li>   <li class="member"><span class="function">{@link krsort()} - 对数组按照键名逆向排序</span></li>   <li class="member"><a href="https://www.php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>  </ul> </div></div>
*/
function rsort(array &$array, int $flags = SORT_REGULAR) {}

/**
*<div id="function.usort" class="refentry"> <div class="refnamediv">  <h1 class="refname">usort</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">usort</span> &mdash; <span class="dc-title">使用用户自定义的比较函数对数组中的值进行排序</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.usort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>usort</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   根据用户提供的比较函数，对 <span class="parameter" style="color:#3A95FF">array</span> 原地排序。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数为 <span class="parameter" style="color:#3A95FF">array</span>中的元素赋与新的键名。这将删除原有的键名，而不是仅仅将键名重新排序。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.usort-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para"> 在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。</p><div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$b</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="caution"><strong class="caution">警告</strong> <p class="para">  从比较函数中返回<em>非整数</em>值，例如 <span class="type" style="color:#EAB766">float</span>，将导致内部强制转换为 callback 返回值为  <span class="type" style="color:#EAB766">int</span>。因此，诸如 <span>0.99</span> 和 <span>0.1</span> 之类的值都将被转换为整数值  <span>0</span>，将这些值比较的话将会是相等。 </p></div>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.usort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.usort-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     <tr> <td>8.0.0</td> <td>  如果 <span class="parameter" style="color:#3A95FF">callback</span> 接受引用传递参数，该方法将会抛出  <strong><span>E_WARNING</span></strong>。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.usort-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">usort()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">cmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">)<br />{<br />    if (</span><span style="color: #9876AA">$a </span><span style="color: #007700">== </span><span style="color: #9876AA">$b</span><span style="color: #007700">) {<br />        return </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />    }<br />    return (</span><span style="color: #9876AA">$a </span><span style="color: #007700">&lt; </span><span style="color: #9876AA">$b</span><span style="color: #007700">) ? -</span><span style="color: #9876AA">1 </span><span style="color: #007700">: </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$a </span><span style="color: #007700">= array(</span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #9876AA">6</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">usort</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #DD0000">"cmp"</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$a </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$value</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000">: </span><span style="color: #9876AA">$value</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>0: 1<br>1: 2<br>2: 3<br>3: 5<br>4: 6<br></span></div>    </div>   </div>  </span>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    很明显在这个小例子中用 <span class="function">{@link sort()}</span> 函数更合适。   </p>  </p></blockquote>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2      使用多维数组的 <span class="function"><strong style="color:#CC7832">usort()</strong></span> 示例    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">cmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">)<br />{<br />    return </span><span style="color: #9876AA">strcmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">"fruit"</span><span style="color: #007700">], </span><span style="color: #9876AA">$b</span><span style="color: #007700">[</span><span style="color: #DD0000">"fruit"</span><span style="color: #007700">]);<br />}<br /><br /></span><span style="color: #9876AA">$fruits</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">][</span><span style="color: #DD0000">"fruit"</span><span style="color: #007700">] = </span><span style="color: #DD0000">"lemons"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$fruits</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">][</span><span style="color: #DD0000">"fruit"</span><span style="color: #007700">] = </span><span style="color: #DD0000">"apples"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$fruits</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">][</span><span style="color: #DD0000">"fruit"</span><span style="color: #007700">] = </span><span style="color: #DD0000">"grapes"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">usort</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">, </span><span style="color: #DD0000">"cmp"</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$fruits </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$value</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"\$fruits[</span><span style="color: #9876AA">$key</span><span style="color: #DD0000">]: " </span><span style="color: #007700">. </span><span style="color: #9876AA">$value</span><span style="color: #007700">[</span><span style="color: #DD0000">"fruit"</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     当排序多维数组时，<var class="varname">$a</var> 和 <var class="varname">$b</var> 包含到数组第一个索引的引用。    </p></div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>$fruits[0]: apples<br>$fruits[1]: grapes<br>$fruits[2]: lemons<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3      使用一个对象的成员函数的 <span class="function"><strong style="color:#CC7832">usort()</strong></span> 示例    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">TestObj </span><span style="color: #007700">{<br />    private </span><span style="color: #9876AA">string $name</span><span style="color: #007700">;<br /><br />    function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(</span><span style="color: #9876AA">$name</span><span style="color: #007700">)<br />    {<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">name </span><span style="color: #007700">= </span><span style="color: #9876AA">$name</span><span style="color: #007700">;<br />    }<br /><br />    </span><span style="color: #FF8000">// This is the static comparing function: <br />    </span><span style="color: #007700">static function </span><span style="color: #9876AA">cmp_obj</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">)<br />    {<br />        return </span><span style="color: #9876AA">strtolower</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">name</span><span style="color: #007700">) &lt;=&gt; </span><span style="color: #9876AA">strtolower</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">name</span><span style="color: #007700">);<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$a</span><span style="color: #007700">[] = new </span><span style="color: #9876AA">TestObj</span><span style="color: #007700">(</span><span style="color: #DD0000">"c"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$a</span><span style="color: #007700">[] = new </span><span style="color: #9876AA">TestObj</span><span style="color: #007700">(</span><span style="color: #DD0000">"b"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$a</span><span style="color: #007700">[] = new </span><span style="color: #9876AA">TestObj</span><span style="color: #007700">(</span><span style="color: #DD0000">"d"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">usort</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, [</span><span style="color: #9876AA">TestObj</span><span style="color: #007700">::class, </span><span style="color: #DD0000">"cmp_obj"</span><span style="color: #007700">]);<br /><br />foreach (</span><span style="color: #9876AA">$a </span><span style="color: #007700">as </span><span style="color: #9876AA">$item</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$item</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">name </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>b<br>c<br>d<br></span></div>    </div>   </div>    <div class="example" id="">    <p><strong>示例 #4      <span class="function"><strong style="color:#CC7832">usort()</strong></span> 示例，使用<a href="https://www.php.net/manual/zh/functions.anonymous.php" class="link">闭包</a>对多维数组进行排序    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">] = array(</span><span style="color: #DD0000">'key_a' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'z'</span><span style="color: #007700">, </span><span style="color: #DD0000">'key_b' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'c'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">] = array(</span><span style="color: #DD0000">'key_a' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'x'</span><span style="color: #007700">, </span><span style="color: #DD0000">'key_b' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'b'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">] = array(</span><span style="color: #DD0000">'key_a' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'y'</span><span style="color: #007700">, </span><span style="color: #DD0000">'key_b' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'a'</span><span style="color: #007700">);<br /><br />function </span><span style="color: #9876AA">build_sorter</span><span style="color: #007700">(</span><span style="color: #9876AA">$key</span><span style="color: #007700">) {<br />    return function (</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">) use (</span><span style="color: #9876AA">$key</span><span style="color: #007700">) {<br />        return </span><span style="color: #9876AA">strnatcmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #9876AA">$key</span><span style="color: #007700">], </span><span style="color: #9876AA">$b</span><span style="color: #007700">[</span><span style="color: #9876AA">$key</span><span style="color: #007700">]);<br />    };<br />}<br /><br /></span><span style="color: #9876AA">usort</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">, </span><span style="color: #9876AA">build_sorter</span><span style="color: #007700">(</span><span style="color: #DD0000">'key_b'</span><span style="color: #007700">));<br /><br />foreach (</span><span style="color: #9876AA">$array </span><span style="color: #007700">as </span><span style="color: #9876AA">$item</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$item</span><span style="color: #007700">[</span><span style="color: #DD0000">'key_a'</span><span style="color: #007700">] . </span><span style="color: #DD0000">', ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$item</span><span style="color: #007700">[</span><span style="color: #DD0000">'key_b'</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>y, a<br>x, b<br>z, c<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #5      使用太空船运算符的 <span class="function"><strong style="color:#CC7832">usort()</strong></span> 示例    </strong></p>    <div class="example-contents"><p>     太空船运算符允许跨多个轴直接比较复合值。     下面的示例将对 <span>$people</span> 按姓氏排序，如果姓氏匹配，则按名字排序。    </p></div>    <div class="example-contents">     <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$people</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">] = [</span><span style="color: #DD0000">'first' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Adam'</span><span style="color: #007700">, </span><span style="color: #DD0000">'last' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'West'</span><span style="color: #007700">];<br /></span><span style="color: #9876AA">$people</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">] = [</span><span style="color: #DD0000">'first' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Alec'</span><span style="color: #007700">, </span><span style="color: #DD0000">'last' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Baldwin'</span><span style="color: #007700">];<br /></span><span style="color: #9876AA">$people</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">] = [</span><span style="color: #DD0000">'first' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Adam'</span><span style="color: #007700">, </span><span style="color: #DD0000">'last' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Baldwin'</span><span style="color: #007700">];<br /><br />function </span><span style="color: #9876AA">sorter</span><span style="color: #007700">(array </span><span style="color: #9876AA">$a</span><span style="color: #007700">, array </span><span style="color: #9876AA">$b</span><span style="color: #007700">) {<br />    return [</span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'last'</span><span style="color: #007700">], </span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'first'</span><span style="color: #007700">]] &lt;=&gt; [</span><span style="color: #9876AA">$b</span><span style="color: #007700">[</span><span style="color: #DD0000">'last'</span><span style="color: #007700">], </span><span style="color: #9876AA">$b</span><span style="color: #007700">[</span><span style="color: #DD0000">'first'</span><span style="color: #007700">]];<br />}<br /><br /></span><span style="color: #9876AA">usort</span><span style="color: #007700">(</span><span style="color: #9876AA">$people</span><span style="color: #007700">, </span><span style="color: #DD0000">'sorter'</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$people </span><span style="color: #007700">as </span><span style="color: #9876AA">$person</span><span style="color: #007700">) {<br />    print </span><span style="color: #9876AA">$person</span><span style="color: #007700">[</span><span style="color: #DD0000">'last'</span><span style="color: #007700">] . </span><span style="color: #DD0000">', ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$person</span><span style="color: #007700">[</span><span style="color: #DD0000">'first'</span><span style="color: #007700">] . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">     <div class="cdata"><span>Baldwin, Adam<br>Baldwin, Alec<br>West, Adam<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.usort-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link uasort()} - 使用用户定义的比较函数对数组进行排序并保持索引关联</span></li>   <li class="member"><span class="function">{@link uksort()} - 使用用户自定义的比较函数对数组中的键名进行排序</span></li>   <li class="member"><a href="https://www.php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>  </ul> </div></div>
*/
function usort(array &$array, callable $callback) {}

/**
*<div id="function.uasort" class="refentry"> <div class="refnamediv">  <h1 class="refname">uasort</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">uasort</span> &mdash; <span class="dc-title">使用用户定义的比较函数对数组进行排序并保持索引关联</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.uasort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>uasort</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   本函数对 <span class="parameter" style="color:#3A95FF">array</span> 本身排序并保持索引和单元之间的关联。  </p>  <p class="para">    主要用于对那些单元顺序很重要的结合数组进行排序。比较函数是用户自定义的。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">    重置数组中的内部指针，指向第一个元素。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.uasort-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para"> 在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。</p><div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$b</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="caution"><strong class="caution">警告</strong> <p class="para">  从比较函数中返回<em>非整数</em>值，例如 <span class="type" style="color:#EAB766">float</span>，将导致内部强制转换为 callback 返回值为  <span class="type" style="color:#EAB766">int</span>。因此，诸如 <span>0.99</span> 和 <span>0.1</span> 之类的值都将被转换为整数值  <span>0</span>，将这些值比较的话将会是相等。 </p></div>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.uasort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.uasort-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     <tr> <td>8.0.0</td> <td>  如果 <span class="parameter" style="color:#3A95FF">callback</span> 接受引用传递参数，该方法将会抛出  <strong><span>E_WARNING</span></strong>。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.uasort-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">uasort()</strong></span> 的基本示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 比较函数<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">cmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">) {<br />    if (</span><span style="color: #9876AA">$a </span><span style="color: #007700">== </span><span style="color: #9876AA">$b</span><span style="color: #007700">) {<br />        return </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />    }<br />    return (</span><span style="color: #9876AA">$a </span><span style="color: #007700">&lt; </span><span style="color: #9876AA">$b</span><span style="color: #007700">) ? -</span><span style="color: #9876AA">1 </span><span style="color: #007700">: </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// 要排序的数组<br /></span><span style="color: #9876AA">$array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'a' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #DD0000">'b' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">8</span><span style="color: #007700">, </span><span style="color: #DD0000">'c' </span><span style="color: #007700">=&gt; -</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">'d' </span><span style="color: #007700">=&gt; -</span><span style="color: #9876AA">9</span><span style="color: #007700">, </span><span style="color: #DD0000">'e' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #DD0000">'f' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #DD0000">'g' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #DD0000">'h' </span><span style="color: #007700">=&gt; -</span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 排序并打印排序后的数组<br /></span><span style="color: #9876AA">uasort</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">, </span><span style="color: #DD0000">'cmp'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [a] =&gt; 4<br>    [b] =&gt; 8<br>    [c] =&gt; -1<br>    [d] =&gt; -9<br>    [e] =&gt; 2<br>    [f] =&gt; 5<br>    [g] =&gt; 3<br>    [h] =&gt; -4<br>)<br>Array<br>(<br>    [d] =&gt; -9<br>    [h] =&gt; -4<br>    [c] =&gt; -1<br>    [e] =&gt; 2<br>    [g] =&gt; 3<br>    [a] =&gt; 4<br>    [f] =&gt; 5<br>    [b] =&gt; 8<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.uasort-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link usort()} - 使用用户自定义的比较函数对数组中的值进行排序</span></li>   <li class="member"><span class="function">{@link uksort()} - 使用用户自定义的比较函数对数组中的键名进行排序</span></li>   <li class="member"><a href="https://www.php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>  </ul> </div></div>
*/
function uasort(array &$array, callable $callback) {}

/**
*<div id="function.uksort" class="refentry"> <div class="refnamediv">  <h1 class="refname">uksort</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">uksort</span> &mdash; <span class="dc-title">使用用户自定义的比较函数对数组中的键名进行排序</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.uksort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>uksort</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   使用用户自定义的比较函数对 <span class="parameter" style="color:#3A95FF">array</span> 本身进行按键（key）排序以确定顺序。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">    重置数组中的内部指针，指向第一个元素。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.uksort-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para"> 在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。</p><div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$b</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="caution"><strong class="caution">警告</strong> <p class="para">  从比较函数中返回<em>非整数</em>值，例如 <span class="type" style="color:#EAB766">float</span>，将导致内部强制转换为 callback 返回值为  <span class="type" style="color:#EAB766">int</span>。因此，诸如 <span>0.99</span> 和 <span>0.1</span> 之类的值都将被转换为整数值  <span>0</span>，将这些值比较的话将会是相等。 </p></div>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.uksort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.uksort-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     <tr> <td>8.0.0</td> <td>  如果 <span class="parameter" style="color:#3A95FF">callback</span> 接受引用传递参数，该方法将会抛出  <strong><span>E_WARNING</span></strong>。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.uksort-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">uksort()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">cmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">)<br />{<br />    </span><span style="color: #9876AA">$a </span><span style="color: #007700">= </span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">'@^(a|an|the) @'</span><span style="color: #007700">, </span><span style="color: #DD0000">''</span><span style="color: #007700">, </span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$b </span><span style="color: #007700">= </span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">'@^(a|an|the) @'</span><span style="color: #007700">, </span><span style="color: #DD0000">''</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br />    return </span><span style="color: #9876AA">strcasecmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">$a </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"John" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">"the Earth" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #DD0000">"an apple" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #DD0000">"a banana" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">uksort</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #DD0000">"cmp"</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$a </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$value</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000">: </span><span style="color: #9876AA">$value</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>an apple: 3<br>a banana: 4<br>the Earth: 2<br>John: 1<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.uksort-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link usort()} - 使用用户自定义的比较函数对数组中的值进行排序</span></li>   <li class="member"><span class="function">{@link uasort()} - 使用用户定义的比较函数对数组进行排序并保持索引关联</span></li>   <li class="member"><a href="https://www.php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>  </ul> </div></div>
*/
function uksort(array &$array, callable $callback) {}

/**
*<div id="function.shuffle" class="refentry"> <div class="refnamediv">  <h1 class="refname">shuffle</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">shuffle</span> &mdash; <span class="dc-title">打乱数组</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.shuffle-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>shuffle</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$array</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   本函数打乱（随机排列单元的顺序）一个数组。  </p>  <div class="caution"><strong class="caution">警告</strong> <p class="para">  本函数并不会生成安全加密的值，并且<em>不可</em>用于加密或者要求返回值不可猜测的目的。 </p> <p class="para">  如果需要加密安全随机，则可以将 <span class="classname"><a href="https://www.php.net/manual/zh/class.random-engine-secure.php" class="classname">Random\Engine\Secure</a></span> 引擎用于  <span class="classname"><a href="https://www.php.net/manual/zh/class.random-randomizer.php" class="classname">Random\Randomizer</a></span>。对于简单的用例，<span class="function">{@link random_int()}</span>  和 <span class="function">{@link random_bytes()}</span> 函数提供了操作系统的 <abbr title="Cryptographically Secure PseudoRandom Number Generator">CSPRNG</abbr> 支持的方便且安全的 <abbr title="Application Programming Interface">API</abbr>。 </p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.shuffle-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       待操作的数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.shuffle-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.shuffle-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.1.0</td>       <td>        内置的随机数产生算法从 libc rand 函数<a href="https://www.php.net/manual/zh/migration71.incompatible.php#migration71.incompatible.rand-srand-aliases" class="link">改成</a><a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html" class="link external">&raquo;&nbsp;梅森旋转</a>伪随机数生成算法。       </td>      </tr>     </tbody>       </table>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.shuffle-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">shuffle()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$numbers </span><span style="color: #007700">= </span><span style="color: #9876AA">range</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">20</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">shuffle</span><span style="color: #007700">(</span><span style="color: #9876AA">$numbers</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$numbers </span><span style="color: #007700">as </span><span style="color: #9876AA">$number</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$number</span><span style="color: #DD0000"> "</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.shuffle-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数为 <span class="parameter" style="color:#3A95FF">array</span>中的元素赋与新的键名。这将删除原有的键名，而不是仅仅将键名重新排序。</span></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">    重置数组中的内部指针，指向第一个元素。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.shuffle-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Random\Randomizer::shuffleArray()} - Get a permutation of an array</span></li>    <li class="member"><span class="function">{@link Random\Randomizer::shuffleBytes()} - Get a byte-wise permutation of a string</span></li>    <li class="member"><span class="function">{@link Random\Randomizer::pickArrayKeys()} - Select random array keys</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>   </ul>  </span> </div>  </div>
*/
function shuffle(array &$array) {}

/**
*<div id="function.array-walk" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_walk</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_walk</span> &mdash; <span class="dc-title">使用用户自定义函数对数组中的每个元素做回调处理</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-walk-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_walk</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">object</span></span> <span class="parameter" style="color:#3A95FF">&$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$arg</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="simpara">   将用户自定义函数 <span class="parameter" style="color:#3A95FF">callback</span> 应用到   <span class="parameter" style="color:#3A95FF">array</span> 数组中的每个单元。  </p>  <p class="para">   <span class="function"><strong style="color:#CC7832">array_walk()</strong></span> 不会受到 <span class="parameter" style="color:#3A95FF">array</span>   内部数组指针的影响。<span class="function"><strong style="color:#CC7832">array_walk()</strong></span>   会遍历整个数组而不管指针的位置。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-walk-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para">       典型情况下   <span class="parameter" style="color:#3A95FF">callback</span> 接受两个参数。<span class="parameter" style="color:#3A95FF">array</span>   参数的值作为第一个，键名作为第二个。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">       如果 <span class="parameter" style="color:#3A95FF">callback</span> 需要直接作用于数组中的值，则给    <span class="parameter" style="color:#3A95FF">callback</span> 的第一个参数指定为<a href="https://www.php.net/manual/zh/language.references.php" class="link">引用</a>。这样任何对这些单元的改变也将会改变原始数组本身。       </p>      </p></blockquote>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:         <p class="para">         参数数量超过预期，传入内置函数 (例如 <span class="function">{@link strtolower()}</span>)，         将抛出警告，所以不适合当做 <span class="parameter" style="color:#3A95FF">callback</span>。        </p>      </p></blockquote>      <p class="para">       只有 <span class="parameter" style="color:#3A95FF">array</span> 的值才可以被改变，用户不应在回调函数中改变该数组本身的结构。例如增加/删除单元，unset   单元等等。如果 <span class="function"><strong style="color:#CC7832">array_walk()</strong></span>   作用的数组改变了，则此函数的的行为未经定义，且不可预期。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arg</span></dt>     <dd>      <p class="para">       如果提供了可选参数 <span class="parameter" style="color:#3A95FF">arg</span>，将被作为第三个参数传递给       <span class="parameter" style="color:#3A95FF">callback</span>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-walk-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.array-walk-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   从 PHP 7.1.0 起，如果 <span class="parameter" style="color:#3A95FF">callback</span> 函数需要的参数（数组成员的值和键）超过2个或者   也传递了 <span class="parameter" style="color:#3A95FF">arg</span> 参数需要的参数超过3个时，会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.argumentcounterror.php" class="classname">ArgumentCountError</a></span>。   在此之前，每次 <span class="function"><strong style="color:#CC7832">array_walk()</strong></span> 调用 <span class="parameter" style="color:#3A95FF">callback</span>   的时候都会生成 <a href="https://www.php.net/manual/zh/errorfunc.constants.php" class="link">E_WARNING</a> 级别的错误。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-walk-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       如果 <span class="parameter" style="color:#3A95FF">callback</span> 期待通过引用传递第二个和第三个参数，       此函数现在将抛出 <strong><span>E_WARNING</span></strong>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-walk-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_walk()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"d" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"lemon"</span><span style="color: #007700">, </span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"orange"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"banana"</span><span style="color: #007700">, </span><span style="color: #DD0000">"c" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"apple"</span><span style="color: #007700">);<br /><br />function </span><span style="color: #9876AA">test_alter</span><span style="color: #007700">(&amp;</span><span style="color: #9876AA">$item1</span><span style="color: #007700">, </span><span style="color: #9876AA">$key</span><span style="color: #007700">, </span><span style="color: #9876AA">$prefix</span><span style="color: #007700">)<br />{<br />    </span><span style="color: #9876AA">$item1 </span><span style="color: #007700">= </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$prefix</span><span style="color: #DD0000">: </span><span style="color: #9876AA">$item1</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br />}<br /><br />function </span><span style="color: #9876AA">test_print</span><span style="color: #007700">(</span><span style="color: #9876AA">$item2</span><span style="color: #007700">, </span><span style="color: #9876AA">$key</span><span style="color: #007700">)<br />{<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000">. </span><span style="color: #9876AA">$item2</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /><br />echo </span><span style="color: #DD0000">"Before ...:\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">array_walk</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">, </span><span style="color: #DD0000">'test_print'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">array_walk</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">, </span><span style="color: #DD0000">'test_alter'</span><span style="color: #007700">, </span><span style="color: #DD0000">'fruit'</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"... and after:\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">array_walk</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">, </span><span style="color: #DD0000">'test_print'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Before ...:<br>d. lemon<br>a. orange<br>b. banana<br>c. apple<br>... and after:<br>d. fruit: lemon<br>a. fruit: orange<br>b. fruit: banana<br>c. fruit: apple<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">array_walk()</strong></span> example using anonymous function</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$elements </span><span style="color: #007700">= [</span><span style="color: #DD0000">'a'</span><span style="color: #007700">, </span><span style="color: #DD0000">'b'</span><span style="color: #007700">, </span><span style="color: #DD0000">'c'</span><span style="color: #007700">];<br /></span><span style="color: #9876AA">array_walk</span><span style="color: #007700">(</span><span style="color: #9876AA">$elements</span><span style="color: #007700">, function (</span><span style="color: #9876AA">$value</span><span style="color: #007700">, </span><span style="color: #9876AA">$key</span><span style="color: #007700">) {<br />  echo </span><span style="color: #DD0000">"</span><span style="color: #007700">{</span><span style="color: #9876AA">$key</span><span style="color: #007700">}</span><span style="color: #DD0000"> =&gt; </span><span style="color: #007700">{</span><span style="color: #9876AA">$value</span><span style="color: #007700">}</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />});<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>0 =&gt; a<br>1 =&gt; b<br>2 =&gt; c<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-walk-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_walk_recursive()} - 对数组中的每个成员递归地应用用户函数</span></li>    <li class="member"><span class="function">{@link iterator_apply()} - 为迭代器中每个元素调用函数</span></li>    <li class="member"><span class="function">{@link list()} - 把数组中的值赋给一组变量</span></li>    <li class="member"><span class="function">{@link each()} - 返回数组中当前的键／值对并将数组指针向前移动一步</span></li>    <li class="member"><span class="function">{@link call_user_func_array()} - 调用回调函数，并把一个数组参数作为回调函数的参数</span></li>    <li class="member"><span class="function">{@link array_map()} - 为数组的每个元素应用回调函数</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/control-structures.foreach.php" class="link">foreach</a></li>   </ul>  </span> </div></div>
*/
function array_walk(object|array &$array, callable $callback, mixed $arg) {}

/**
*<div id="function.array-walk-recursive" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_walk_recursive</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_walk_recursive</span> &mdash; <span class="dc-title">对数组中的每个成员递归地应用用户函数</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-walk-recursive-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_walk_recursive</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">object</span></span> <span class="parameter" style="color:#3A95FF">&$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$arg</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   将用户自定义函数 <span class="parameter" style="color:#3A95FF">callback</span> 应用到   <span class="parameter" style="color:#3A95FF">array</span> 数组中的每个单元。本函数会递归到更深层的数组中去。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-walk-recursive-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para">       典型情况下   <span class="parameter" style="color:#3A95FF">callback</span> 接受两个参数。<span class="parameter" style="color:#3A95FF">array</span>   参数的值作为第一个，键名作为第二个。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        如果 <span class="parameter" style="color:#3A95FF">callback</span> 需要直接作用于数组中的值，则给         <span class="parameter" style="color:#3A95FF">callback</span> 的第一个参数指定为<a href="https://www.php.net/manual/zh/language.references.php" class="link">引用</a>。这样任何对这些单元的改变也将会改变原始数组本身。       </p>      </p></blockquote>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arg</span></dt>     <dd>      <p class="para">       如果提供了可选参数        <span class="parameter" style="color:#3A95FF">arg</span>，将被作为第三个参数传递给 <span class="parameter" style="color:#3A95FF">callback</span>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-walk-recursive-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-walk-recursive-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_walk_recursive()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$sweet </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'a' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">, </span><span style="color: #DD0000">'b' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'banana'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'sweet' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$sweet</span><span style="color: #007700">, </span><span style="color: #DD0000">'sour' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'lemon'</span><span style="color: #007700">);<br /><br />function </span><span style="color: #9876AA">test_print</span><span style="color: #007700">(</span><span style="color: #9876AA">$item</span><span style="color: #007700">, </span><span style="color: #9876AA">$key</span><span style="color: #007700">)<br />{<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000"> holds </span><span style="color: #9876AA">$item</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">array_walk_recursive</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">, </span><span style="color: #DD0000">'test_print'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>a holds apple<br>b holds banana<br>sour holds lemon<br></span></div>    </div>    <div class="example-contents"><p>     注意上例中的键 &#039;<span>sweet</span>&#039; 并没有显示出来。任何其值为 <span class="type" style="color:#EAB766">array</span> 的键都不会被传递到回调函数中去。    </p></div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-walk-recursive-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_walk()} - 使用用户自定义函数对数组中的每个元素做回调处理</span></li>   </ul>  </span> </div></div>
*/
function array_walk_recursive(object|array &$array, callable $callback, mixed $arg) {}

/**
*<div id="function.count" class="refentry">   <div class="refnamediv">    <h1 class="refname">count</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">count</span> &mdash; <span class="dc-title">统计数组、<span class="interfacename"><a href="https://www.php.net/manual/zh/class.countable.php" class="interfacename">Countable</a></span> 对象中所有元素的数量</span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.count-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>count</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.countable.php" class="type Countable" style="color:#EAB766">Countable</a></span>|<span class="type" style="color:#EAB766">array</span></span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = <strong><span>COUNT_NORMAL</span></strong></span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   用于数组时，统计数组中元素的数量；用于实现了 <span class="interfacename"><a href="https://www.php.net/manual/zh/class.countable.php" class="interfacename">Countable</a></span>   接口的对象时，返回 <span class="methodname" style="color:#CC7832">{@link Countable::count()}</span> 方法的返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.count-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       数组或者 <span class="interfacename"><a href="https://www.php.net/manual/zh/class.countable.php" class="interfacename">Countable</a></span>  对象。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">mode</span></dt>     <dd>      <p class="para">       如果可选的 <span class="parameter" style="color:#3A95FF">mode</span> 参数设为     <strong><span>COUNT_RECURSIVE</span></strong>（或 1），<span class="function"><strong style="color:#CC7832">count()</strong></span>     将递归地对数组计数。对计算多维数组的所有单元尤其有用。      </p>      <div class="caution"><strong class="caution">警告</strong>       <p class="para">        <span class="function"><strong style="color:#CC7832">count()</strong></span> 能检测递归来避免无限循环，但每次出现时会产生 <strong><span>E_WARNING</span></strong> 错误        （如果 array 不止一次包含了自身）并返回大于预期的统计数字。       </p>      </div>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.count-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span class="parameter" style="color:#3A95FF">value</span> 中的元素的数量。在 PHP 8.0.0   之前，如果参数既不是数组也不是实现了 <span>Countable</span> 接口的对象，将返回   <span>1</span>。当 <span class="parameter" style="color:#3A95FF">value</span> 为 <strong><span>null</span></strong> 时返回    <span>0</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.count-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       当 <span class="parameter" style="color:#3A95FF">value</span> 参数传入了无效的 countable 类型，       <span class="function"><strong style="color:#CC7832">count()</strong></span> 现在会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.typeerror.php" class="classname">TypeError</a></span>。      </td>     </tr>     <tr>      <td>7.2.0</td>      <td>       当 <span class="parameter" style="color:#3A95FF">value</span> 参数传入了无效的 countable 类型，       <span class="function"><strong style="color:#CC7832">count()</strong></span> 现在会产生警告。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.count-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">count()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$a</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">] = </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">] = </span><span style="color: #9876AA">3</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">] = </span><span style="color: #9876AA">5</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$b</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]  = </span><span style="color: #9876AA">7</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$b</span><span style="color: #007700">[</span><span style="color: #9876AA">5</span><span style="color: #007700">]  = </span><span style="color: #9876AA">9</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$b</span><span style="color: #007700">[</span><span style="color: #9876AA">10</span><span style="color: #007700">] = </span><span style="color: #9876AA">11</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">     <div class="cdata"><span>int(3)<br>int(3)<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">count()</strong></span> 非 Countable|array 的例子 （这是个反例，请勿模仿）</strong></p>    <div class="example-contents">     <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$b</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]  = </span><span style="color: #9876AA">7</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$b</span><span style="color: #007700">[</span><span style="color: #9876AA">5</span><span style="color: #007700">]  = </span><span style="color: #9876AA">9</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$b</span><span style="color: #007700">[</span><span style="color: #9876AA">10</span><span style="color: #007700">] = </span><span style="color: #9876AA">11</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">null</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">false</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(3)<br>int(0)<br>int(1)<br></span></div>    </div>    <div class="example-contents"><p>Output of the above example in PHP 7.2:</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">     <div class="cdata"><span>int(3)<br><br>Warning: count(): Parameter must be an array or an object that implements Countable in … on line 12<br>int(0)<br><br>Warning: count(): Parameter must be an array or an object that implements Countable in … on line 14<br>int(1)<br></span></div>    </div>    <div class="example-contents"><p>以上示例在 PHP 8 中的输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">     <div class="cdata"><span>int(3)<br><br>Fatal error: Uncaught TypeError: count(): Argument #1 ($var) must be of type Countable .. on line 12<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3 递归 <span class="function"><strong style="color:#CC7832">count()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$food </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'fruits' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'orange'</span><span style="color: #007700">, </span><span style="color: #DD0000">'banana'</span><span style="color: #007700">, </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">),<br />              </span><span style="color: #DD0000">'veggie' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'carrot'</span><span style="color: #007700">, </span><span style="color: #DD0000">'collard'</span><span style="color: #007700">, </span><span style="color: #DD0000">'pea'</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// 递归计数<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$food</span><span style="color: #007700">, </span><span style="color: #9876AA">COUNT_RECURSIVE</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// 常规计数<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$food</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(8)<br>int(2)<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #4 <span class="interfacename"><a href="https://www.php.net/manual/zh/class.countable.php" class="interfacename">Countable</a></span> 对象</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">CountOfMethods </span><span style="color: #007700">implements </span><span style="color: #9876AA">Countable<br /></span><span style="color: #007700">{<br />    private function </span><span style="color: #9876AA">someMethod</span><span style="color: #007700">()<br />    {<br />    }<br /><br />    public function </span><span style="color: #9876AA">count</span><span style="color: #007700">(): </span><span style="color: #9876AA">int<br />    </span><span style="color: #007700">{<br />        return </span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">get_class_methods</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">));<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$obj </span><span style="color: #007700">= new </span><span style="color: #9876AA">CountOfMethods</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$obj</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(2)<br></span></div>    </div>   </div>  </p> </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.count-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link is_array()} - 检测变量是否是数组</span></li>    <li class="member"><span class="function">{@link isset()} - 检测变量是否已声明并且其值不为 null</span></li>    <li class="member"><span class="function">{@link empty()} - 检查变量是否为空</span></li>    <li class="member"><span class="function">{@link strlen()} - 获取字符串长度</span></li>    <li class="member"><span class="function">{@link is_countable()} - 验证变量内容是否为可数值</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.types.array.php" class="link">Array 数组</a></li>   </ul>  </span> </div></div>
 * @return int<0,max> the number of elements in var, which is*/
function count(Countable|array $value, int $mode = COUNT_NORMAL): int {}

/**
*<div id="function.end" class="refentry">   <div class="refnamediv">    <h1 class="refname">end</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">end</span> &mdash; <span class="dc-title">     将数组的内部指针指向最后一个单元    </span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.end-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>end</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">object</span></span> <span class="parameter" style="color:#3A95FF">&$array</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>    <p class="para rdfs-comment">     <span class="function"><strong style="color:#CC7832">end()</strong></span> 将 <span class="parameter" style="color:#3A95FF">array</span>     的内部指针移动到最后一个单元并返回其值。    </p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.end-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       这个数组。       该数组是通过引用传递的，因为它会被这个函数修改。       这意味着你必须传入一个真正的变量，而不是函数返回的数组，因为只有真正的变量才能以引用传递。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.end-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回最后一个元素的值，或者如果是空数组则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.end-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.1.0</td> <td>  弃用在 <span class="type" style="color:#EAB766">object</span> 上调用此函数。  要么首先使用 <span class="function">{@link get_mangled_object_vars()}</span> 将 <span class="type" style="color:#EAB766">object</span> 转换为 <span class="type" style="color:#EAB766">array</span>，要么使用实现  <span class="interfacename"><a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a></span> 的类提供的方法，例如 <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayiterator.php" class="classname">ArrayIterator</a></span>。 </td></tr><tr> <td>7.4.0</td> <td>  <a href="https://www.php.net/manual/zh/book.spl.php" class="link">SPL</a> 类的实例现在被视为没有属性的空对象，而不是调用与此函数同名的 <span class="interfacename"><a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a></span> 方法。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.end-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">end()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">, </span><span style="color: #DD0000">'banana'</span><span style="color: #007700">, </span><span style="color: #DD0000">'cranberry'</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">end</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">); </span><span style="color: #FF8000">// cranberry<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.end-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link current()} - 返回数组中的当前值</span></li>    <li class="member"><span class="function">{@link each()} - 返回数组中当前的键／值对并将数组指针向前移动一步</span></li>    <li class="member"><span class="function">{@link prev()} - 将数组的内部指针倒回一位</span></li>    <li class="member"><span class="function">{@link reset()} - 将数组的内部指针指向第一个单元</span></li>    <li class="member"><span class="function">{@link next()} - 将数组中的内部指针向前移动一位</span></li>    <li class="member"><span class="function">{@link array_key_last()} - 获取一个数组的最后一个键值</span></li>   </ul>  </span> </div>  </div>
 * @return mixed|false the value of the last element or false for empty array.*/
function end(object|array &$array): mixed {}

/**
*<div id="function.prev" class="refentry">   <div class="refnamediv">    <h1 class="refname">prev</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">prev</span> &mdash; <span class="dc-title">将数组的内部指针倒回一位</span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.prev-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>prev</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">object</span></span> <span class="parameter" style="color:#3A95FF">&$array</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   将数组的内部指针倒回一位。  </p>  <p class="para">     <span class="function"><strong style="color:#CC7832">prev()</strong></span> 和     <span class="function">{@link next()}</span> 的行为类似，只除了它将内部指针倒回一位而不是前移一位。    </p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.prev-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       The input array.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.prev-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回数组内部指针指向的前一个单元的值，或当没有更多单元时返回 <strong><span>false</span></strong>。  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数可能返回布尔值<strong><span>false</span></strong>，但也可能返回等同于 <strong><span>false</span></strong> 的非布尔值。请阅读 <a href="https://www.php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">===运算符</a>来测试此函数的返回值。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.prev-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.1.0</td> <td>  弃用在 <span class="type" style="color:#EAB766">object</span> 上调用此函数。  要么首先使用 <span class="function">{@link get_mangled_object_vars()}</span> 将 <span class="type" style="color:#EAB766">object</span> 转换为 <span class="type" style="color:#EAB766">array</span>，要么使用实现  <span class="interfacename"><a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a></span> 的类提供的方法，例如 <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayiterator.php" class="classname">ArrayIterator</a></span>。 </td></tr><tr> <td>7.4.0</td> <td>  <a href="https://www.php.net/manual/zh/book.spl.php" class="link">SPL</a> 类的实例现在被视为没有属性的空对象，而不是调用与此函数同名的 <span class="interfacename"><a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a></span> 方法。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.prev-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">prev()</strong></span> 及相关函数用法示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$transport </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'foot'</span><span style="color: #007700">, </span><span style="color: #DD0000">'bike'</span><span style="color: #007700">, </span><span style="color: #DD0000">'car'</span><span style="color: #007700">, </span><span style="color: #DD0000">'plane'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$mode </span><span style="color: #007700">= </span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">); </span><span style="color: #FF8000">// $mode = 'foot';<br /></span><span style="color: #9876AA">$mode </span><span style="color: #007700">= </span><span style="color: #9876AA">next</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);    </span><span style="color: #FF8000">// $mode = 'bike';<br /></span><span style="color: #9876AA">$mode </span><span style="color: #007700">= </span><span style="color: #9876AA">next</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);    </span><span style="color: #FF8000">// $mode = 'car';<br /></span><span style="color: #9876AA">$mode </span><span style="color: #007700">= </span><span style="color: #9876AA">prev</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);    </span><span style="color: #FF8000">// $mode = 'bike';<br /></span><span style="color: #9876AA">$mode </span><span style="color: #007700">= </span><span style="color: #9876AA">end</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);     </span><span style="color: #FF8000">// $mode = 'plane';<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.prev-notes">  <h3 class="title">注释</h3>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数可能返回布尔值<strong><span>false</span></strong>，但也可能返回等同于 <strong><span>false</span></strong> 的非布尔值。请阅读 <a href="https://www.php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">===运算符</a>来测试此函数的返回值。</p></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    很难区分是遇到 <span class="type" style="color:#EAB766">boolean</span> <strong><span>false</span></strong> 单元还是遇到了数组的开头。    需要用 <span class="function">{@link key()}</span> 检查 <span class="function"><strong style="color:#CC7832">prev()</strong></span> 数组，    是否为 <strong><span>null</span></strong> 来作区分。   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.prev-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link current()} - 返回数组中的当前值</span></li>    <li class="member"><span class="function">{@link end()} - 将数组的内部指针指向最后一个单元</span></li>    <li class="member"><span class="function">{@link next()} - 将数组中的内部指针向前移动一位</span></li>    <li class="member"><span class="function">{@link reset()} - 将数组的内部指针指向第一个单元</span></li>    <li class="member"><span class="function">{@link each()} - 返回数组中当前的键／值对并将数组指针向前移动一步</span></li>   </ul>  </span> </div>  </div>
 * @return mixed|false the array value in the previous place that's pointed to by*/
function prev(object|array &$array): mixed {}

/**
*<div id="function.next" class="refentry">   <div class="refnamediv">    <h1 class="refname">next</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">next</span> &mdash; <span class="dc-title">     将数组中的内部指针向前移动一位    </span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>next</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">object</span></span> <span class="parameter" style="color:#3A95FF">&$array</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>   <p class="para rdfs-comment">     <span class="function"><strong style="color:#CC7832">next()</strong></span> 和 <span class="function">{@link current()}</span>     的行为类似，只有一点区别，在返回值之前将内部指针向前移动一位。这意味着它返回的是下一个数组单元的值并将数组指针向前移动了一位。    </p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.next-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       受影响的 <span class="type" style="color:#EAB766">array</span> 。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回数组内部指针指向的下一个单元的值，或当没有更多单元时返回 <strong><span>false</span></strong>。  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数可能返回布尔值<strong><span>false</span></strong>，但也可能返回等同于 <strong><span>false</span></strong> 的非布尔值。请阅读 <a href="https://www.php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">===运算符</a>来测试此函数的返回值。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.next-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.1.0</td> <td>  弃用在 <span class="type" style="color:#EAB766">object</span> 上调用此函数。  要么首先使用 <span class="function">{@link get_mangled_object_vars()}</span> 将 <span class="type" style="color:#EAB766">object</span> 转换为 <span class="type" style="color:#EAB766">array</span>，要么使用实现  <span class="interfacename"><a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a></span> 的类提供的方法，例如 <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayiterator.php" class="classname">ArrayIterator</a></span>。 </td></tr><tr> <td>7.4.0</td> <td>  <a href="https://www.php.net/manual/zh/book.spl.php" class="link">SPL</a> 类的实例现在被视为没有属性的空对象，而不是调用与此函数同名的 <span class="interfacename"><a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a></span> 方法。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.next-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1  <span class="function"><strong style="color:#CC7832">next()</strong></span> 及相关函数的用法示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$transport </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'foot'</span><span style="color: #007700">, </span><span style="color: #DD0000">'bike'</span><span style="color: #007700">, </span><span style="color: #DD0000">'car'</span><span style="color: #007700">, </span><span style="color: #DD0000">'plane'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$mode </span><span style="color: #007700">= </span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">); </span><span style="color: #FF8000">// $mode = 'foot';<br /></span><span style="color: #9876AA">$mode </span><span style="color: #007700">= </span><span style="color: #9876AA">next</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);    </span><span style="color: #FF8000">// $mode = 'bike';<br /></span><span style="color: #9876AA">$mode </span><span style="color: #007700">= </span><span style="color: #9876AA">next</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);    </span><span style="color: #FF8000">// $mode = 'car';<br /></span><span style="color: #9876AA">$mode </span><span style="color: #007700">= </span><span style="color: #9876AA">prev</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);    </span><span style="color: #FF8000">// $mode = 'bike';<br /></span><span style="color: #9876AA">$mode </span><span style="color: #007700">= </span><span style="color: #9876AA">end</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);     </span><span style="color: #FF8000">// $mode = 'plane';<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.next-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    很难区别是到了数组尾部还是元素为 <span class="type" style="color:#EAB766">bool</span> <strong><span>false</span></strong> 。要正确遍历可能含有 <strong><span>false</span></strong> 单元的数组，参见     <a href="https://www.php.net/manual/zh/control-structures.foreach.php" class="link"><span>foreach</span></a> 函数。   </span>   <span class="simpara">    仍要使用 <span class="function"><strong style="color:#CC7832">next()</strong></span> 并正确检测是否到了数组尾部，需要检查 <span class="function">{@link key()}</span> 是否为 <strong><span>null</span></strong>。   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.next-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link current()} - 返回数组中的当前值</span></li>    <li class="member"><span class="function">{@link end()} - 将数组的内部指针指向最后一个单元</span></li>    <li class="member"><span class="function">{@link prev()} - 将数组的内部指针倒回一位</span></li>    <li class="member"><span class="function">{@link reset()} - 将数组的内部指针指向第一个单元</span></li>    <li class="member"><span class="function">{@link each()} - 返回数组中当前的键／值对并将数组指针向前移动一步</span></li>   </ul>  </span> </div></div>
 * @return mixed|false the array value in the next place that's pointed to by the*/
function next(object|array &$array): mixed {}

/**
*<div id="function.reset" class="refentry"> <div class="refnamediv">  <h1 class="refname">reset</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">reset</span> &mdash; <span class="dc-title">将数组的内部指针指向第一个单元</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.reset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>reset</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">object</span></span> <span class="parameter" style="color:#3A95FF">&$array</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">reset()</strong></span> 将 <span class="parameter" style="color:#3A95FF">array</span>   的内部指针倒回到第一个单元并返回第一个数组单元的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.reset-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.reset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回数组第一个单元的值，如果数组为空则返回 <strong><span>false</span></strong>。  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数可能返回布尔值<strong><span>false</span></strong>，但也可能返回等同于 <strong><span>false</span></strong> 的非布尔值。请阅读 <a href="https://www.php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">===运算符</a>来测试此函数的返回值。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.reset-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.1.0</td> <td>  弃用在 <span class="type" style="color:#EAB766">object</span> 上调用此函数。  要么首先使用 <span class="function">{@link get_mangled_object_vars()}</span> 将 <span class="type" style="color:#EAB766">object</span> 转换为 <span class="type" style="color:#EAB766">array</span>，要么使用实现  <span class="interfacename"><a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a></span> 的类提供的方法，例如 <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayiterator.php" class="classname">ArrayIterator</a></span>。 </td></tr><tr> <td>7.4.0</td> <td>  <a href="https://www.php.net/manual/zh/book.spl.php" class="link">SPL</a> 类的实例现在被视为没有属性的空对象，而不是调用与此函数同名的 <span class="interfacename"><a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a></span> 方法。 </td></tr>    </tbody>     </table> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.reset-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">reset()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'step one'</span><span style="color: #007700">, </span><span style="color: #DD0000">'step two'</span><span style="color: #007700">, </span><span style="color: #DD0000">'step three'</span><span style="color: #007700">, </span><span style="color: #DD0000">'step four'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 默认情况下，指针指向第一个元素<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">) . </span><span style="color: #DD0000">"&lt;br /&gt;\n"</span><span style="color: #007700">; </span><span style="color: #FF8000">// "step one"<br /><br />// 跳过两步<br /></span><span style="color: #9876AA">next</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">next</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">) . </span><span style="color: #DD0000">"&lt;br /&gt;\n"</span><span style="color: #007700">; </span><span style="color: #FF8000">// "step three"<br /><br />// 重置指针，重新指向第一个元素<br /></span><span style="color: #9876AA">reset</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">) . </span><span style="color: #DD0000">"&lt;br /&gt;\n"</span><span style="color: #007700">; </span><span style="color: #FF8000">// "step one"<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.reset-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    返回的值无法区分是空数组，还是第一个元素是 <span class="type" style="color:#EAB766">bool</span> <strong><span>false</span></strong>。    要正确检测数组第一个元素包含 <strong><span>false</span></strong> 的情况，首先要检测数组 <span class="function">{@link count()}</span>，    或在调用 <span class="function"><strong style="color:#CC7832">reset()</strong></span> 后检测 <span class="function">{@link key()}</span> 不为 <strong><span>null</span></strong>。   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.reset-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link current()} - 返回数组中的当前值</span></li>    <li class="member"><span class="function">{@link each()} - 返回数组中当前的键／值对并将数组指针向前移动一步</span></li>    <li class="member"><span class="function">{@link end()} - 将数组的内部指针指向最后一个单元</span></li>    <li class="member"><span class="function">{@link next()} - 将数组中的内部指针向前移动一位</span></li>    <li class="member"><span class="function">{@link prev()} - 将数组的内部指针倒回一位</span></li>    <li class="member"><span class="function">{@link array_key_first()} - 获取指定数组的第一个键</span></li>   </ul>  </span> </div></div>
 * @return mixed|false the value of the first array element, or false if the array is*/
function reset(object|array &$array): mixed {}

/**
*<div id="function.current" class="refentry">   <div class="refnamediv">    <h1 class="refname">current</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">current</span> &mdash; <span class="dc-title">返回数组中的当前值</span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>current</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">object</span></span> <span class="parameter" style="color:#3A95FF">$array</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>    <p class="para rdfs-comment">     每个数组中都有一个内部的指针指向它“当前的”单元，初始化时会指向该数组中的第一个值。    </p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.current-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       要操作的数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="function"><strong style="color:#CC7832">current()</strong></span>   函数返回当前被内部指针指向的数组单元的值，并不移动指针。如果内部指针指向超出了单元列表的末端，<span class="function"><strong style="color:#CC7832">current()</strong></span>   将返回 <strong><span>false</span></strong>。  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数可能返回布尔值<strong><span>false</span></strong>，但也可能返回等同于 <strong><span>false</span></strong> 的非布尔值。请阅读 <a href="https://www.php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">===运算符</a>来测试此函数的返回值。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.current-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.1.0</td> <td>  弃用在 <span class="type" style="color:#EAB766">object</span> 上调用此函数。  要么首先使用 <span class="function">{@link get_mangled_object_vars()}</span> 将 <span class="type" style="color:#EAB766">object</span> 转换为 <span class="type" style="color:#EAB766">array</span>，要么使用实现  <span class="interfacename"><a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a></span> 的类提供的方法，例如 <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayiterator.php" class="classname">ArrayIterator</a></span>。 </td></tr><tr> <td>7.4.0</td> <td>  <a href="https://www.php.net/manual/zh/book.spl.php" class="link">SPL</a> 类的实例现在被视为没有属性的空对象，而不是调用与此函数同名的 <span class="interfacename"><a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a></span> 方法。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.current-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1  <span class="function"><strong style="color:#CC7832">current()</strong></span> 函数使用示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$transport </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'foot'</span><span style="color: #007700">, </span><span style="color: #DD0000">'bike'</span><span style="color: #007700">, </span><span style="color: #DD0000">'car'</span><span style="color: #007700">, </span><span style="color: #DD0000">'plane'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$mode </span><span style="color: #007700">= </span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">); </span><span style="color: #FF8000">// $mode = 'foot';<br /></span><span style="color: #9876AA">$mode </span><span style="color: #007700">= </span><span style="color: #9876AA">next</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);    </span><span style="color: #FF8000">// $mode = 'bike';<br /></span><span style="color: #9876AA">$mode </span><span style="color: #007700">= </span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">); </span><span style="color: #FF8000">// $mode = 'bike';<br /></span><span style="color: #9876AA">$mode </span><span style="color: #007700">= </span><span style="color: #9876AA">prev</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);    </span><span style="color: #FF8000">// $mode = 'foot';<br /></span><span style="color: #9876AA">$mode </span><span style="color: #007700">= </span><span style="color: #9876AA">end</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">);     </span><span style="color: #FF8000">// $mode = 'plane';<br /></span><span style="color: #9876AA">$mode </span><span style="color: #007700">= </span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$transport</span><span style="color: #007700">); </span><span style="color: #FF8000">// $mode = 'plane';<br /><br /></span><span style="color: #9876AA">$arr </span><span style="color: #007700">= array();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">)); </span><span style="color: #FF8000">// bool(false)<br /><br /></span><span style="color: #9876AA">$arr </span><span style="color: #007700">= array(array());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">)); </span><span style="color: #FF8000">// array(0) { }<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.current-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    在一个空数组上使用 <span class="function"><strong style="color:#CC7832">current()</strong></span>    函数，和在一个内部指针指向单元末端以外的数组上使用此函数，结果是相同的，同样都会返回    <span class="type" style="color:#EAB766">bool</span> <strong><span>false</span></strong>。如果希望正确遍历一个包含 <strong><span>false</span></strong> 的数组，请参阅    <a href="https://www.php.net/manual/zh/control-structures.foreach.php" class="link">foreach</a> 控制结构。   </span>   <span class="simpara">    如果仍然希望使用 <span class="function"><strong style="color:#CC7832">current()</strong></span> 来判断数组单元真实的值，应该同时使用    <span class="function">{@link key()}</span> 和 <span class="function"><strong style="color:#CC7832">current()</strong></span>    来检查当前元素是否为 <strong><span>null</span></strong>。   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.current-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link end()} - 将数组的内部指针指向最后一个单元</span></li>    <li class="member"><span class="function">{@link key()} - 从关联数组中取得键名</span></li>    <li class="member"><span class="function">{@link each()} - 返回数组中当前的键／值对并将数组指针向前移动一步</span></li>    <li class="member"><span class="function">{@link prev()} - 将数组的内部指针倒回一位</span></li>    <li class="member"><span class="function">{@link reset()} - 将数组的内部指针指向第一个单元</span></li>    <li class="member"><span class="function">{@link next()} - 将数组中的内部指针向前移动一位</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/control-structures.foreach.php" class="link">foreach</a></li>   </ul>  </span> </div></div>
 * @return mixed|false The current function simply returns the*/
function current(object|array $array): mixed {}

/**
*<div id="function.key" class="refentry">   <div class="refnamediv">    <h1 class="refname">key</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">key</span> &mdash; <span class="dc-title">从关联数组中取得键名</span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>key</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">object</span></span> <span class="parameter" style="color:#3A95FF">$array</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">null</span></span></div>    <p class="para rdfs-comment">     <span class="function"><strong style="color:#CC7832">key()</strong></span> 返回数组中当前单元的键名。    </p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.key-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       该数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="function"><strong style="color:#CC7832">key()</strong></span> 函数返回数组中内部指针指向的当前单元的键名。   但它不会移动指针。如果内部指针超过了元素列表尾部，或者数组是空的，<span class="function"><strong style="color:#CC7832">key()</strong></span> 会返回 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.key-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.1.0</td> <td>  弃用在 <span class="type" style="color:#EAB766">object</span> 上调用此函数。  要么首先使用 <span class="function">{@link get_mangled_object_vars()}</span> 将 <span class="type" style="color:#EAB766">object</span> 转换为 <span class="type" style="color:#EAB766">array</span>，要么使用实现  <span class="interfacename"><a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a></span> 的类提供的方法，例如 <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayiterator.php" class="classname">ArrayIterator</a></span>。 </td></tr><tr> <td>7.4.0</td> <td>  <a href="https://www.php.net/manual/zh/book.spl.php" class="link">SPL</a> 类的实例现在被视为没有属性的空对象，而不是调用与此函数同名的 <span class="interfacename"><a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a></span> 方法。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.key-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">key()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array </span><span style="color: #007700">= array(<br />    </span><span style="color: #DD0000">'fruit1' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'fruit2' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'orange'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'fruit3' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'grape'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'fruit4' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'fruit5' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 此循环将会输出数组中所有值等于 “apple” 的键（key）<br /></span><span style="color: #007700">while (</span><span style="color: #9876AA">$fruit_name </span><span style="color: #007700">= </span><span style="color: #9876AA">current</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">)) {<br />    if (</span><span style="color: #9876AA">$fruit_name </span><span style="color: #007700">== </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">) {<br />        echo </span><span style="color: #9876AA">key</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />    }<br />    </span><span style="color: #9876AA">next</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>fruit1<br>fruit4<br>fruit5<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.key-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link current()} - 返回数组中的当前值</span></li>    <li class="member"><span class="function">{@link next()} - 将数组中的内部指针向前移动一位</span></li>    <li class="member"><span class="function">{@link array_key_first()} - 获取指定数组的第一个键</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/control-structures.foreach.php" class="link">foreach</a></li>   </ul>  </span> </div>  </div>
 * @return int|string|null The key function simply returns the*/
function key(object|array $array): string|int|null {}

/**
*<div id="function.min" class="refentry"> <div class="refnamediv">  <h1 class="refname">min</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">min</span> &mdash; <span class="dc-title">找出最小值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.min-description">  <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">    <span class="methodname" style="color:#CC7832"><strong>min</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$values</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>   <p class="simpara">替代签名（不支持命名参数）：</p>   <div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><strong>min</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$value_array</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   如果仅有一个参数且为数组，<span class="function"><strong style="color:#CC7832">min()</strong></span>   返回该数组中最小的值。如果给出了两个或更多参数,   <span class="function"><strong style="color:#CC7832">min()</strong></span> 会返回这些值中最小的一个。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    不同类型的值将使用<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">标准比较规则</a>进行比较。例如，一个非数字    <span class="type" style="color:#EAB766">string</span> 与 <span class="type" style="color:#EAB766">int</span> 比较时就当做是 <span>0</span>，但多个非数字    <span class="type" style="color:#EAB766">string</span> 值将会按照字母数字比较。返回的实际值是未应用任何转换的原始类型。   </p>  </p></blockquote>  <div class="caution"><strong class="caution">警告</strong>   <p class="simpara">    传递不同类型的参数时要小心，因为 <span class="function"><strong style="color:#CC7832">min()</strong></span> 会产生不可预测的结果。   </p>  </div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.min-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       任何<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">可比较</a>的值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">values</span></dt>     <dd>      <p class="para">       任何<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">可比较</a>的值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value_array</span></dt>     <dd>      <p class="para">       包含值的数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.min-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="function">{@link max()}</span> 根据标准比较返回认为是“最小”的参数值。如果不同类型的多个值认为相等（比如   <span>0</span> 与 <span>&#039;abc&#039;</span>），则将会返回提供给函数的第一个值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.min-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果传递空数组，<span class="function">{@link max()}</span> 抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.min-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="function"><strong style="color:#CC7832">min()</strong></span> 现在失败时会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；之前会返回        <strong><span>false</span></strong> 并发出 <strong><span>E_WARNING</span></strong> 错误。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       由于 <a href="https://www.php.net/manual/zh/migration80.incompatible.php#migration80.incompatible.core.string-number-comparision" class="link">字符串到数字的比较</a>       已经改变，<span class="function"><strong style="color:#CC7832">min()</strong></span> 在这些情况下不再根据参数的顺序返回不同的值。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.min-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">min()</strong></span> 用法的示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">min</span><span style="color: #007700">(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">6</span><span style="color: #007700">, </span><span style="color: #9876AA">7</span><span style="color: #007700">);  </span><span style="color: #FF8000">// 1<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">min</span><span style="color: #007700">(array(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">)); </span><span style="color: #FF8000">// 2<br /><br />// Here we are comparing -1 &lt; 0, so -1 is the lowest value<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">min</span><span style="color: #007700">(</span><span style="color: #DD0000">'hello'</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">);    </span><span style="color: #FF8000">// -1<br /><br />// With multiple arrays of different lengths, min returns the shortest<br /></span><span style="color: #9876AA">$val </span><span style="color: #007700">= </span><span style="color: #9876AA">min</span><span style="color: #007700">(array(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">), array(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">)); </span><span style="color: #FF8000">// array(2, 2, 2)<br /><br />// Multiple arrays of the same length are compared from left to right<br />// so in our example: 2 == 2, but 4 &lt; 5<br /></span><span style="color: #9876AA">$val </span><span style="color: #007700">= </span><span style="color: #9876AA">min</span><span style="color: #007700">(array(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #9876AA">8</span><span style="color: #007700">), array(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">)); </span><span style="color: #FF8000">// array(2, 4, 8)<br /><br />// 如果同时给出数组和非数组，则绝对不会返回数组<br />// 因为比较认为数组大于任何值<br /></span><span style="color: #9876AA">$val </span><span style="color: #007700">= </span><span style="color: #9876AA">min</span><span style="color: #007700">(</span><span style="color: #DD0000">'string'</span><span style="color: #007700">, array(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #9876AA">7</span><span style="color: #007700">), </span><span style="color: #9876AA">42</span><span style="color: #007700">);   </span><span style="color: #FF8000">// string<br /><br />// If one argument is NULL or a boolean, it will be compared against<br />// other values using the rules FALSE &lt; TRUE and NULL == FALSE regardless of the <br />// other types involved<br />// In the below examples, both -10 and 10 are treated as TRUE in the comparison<br /></span><span style="color: #9876AA">$val </span><span style="color: #007700">= </span><span style="color: #9876AA">min</span><span style="color: #007700">(-</span><span style="color: #9876AA">10</span><span style="color: #007700">, </span><span style="color: #9876AA">FALSE</span><span style="color: #007700">, </span><span style="color: #9876AA">10</span><span style="color: #007700">); </span><span style="color: #FF8000">// FALSE<br /></span><span style="color: #9876AA">$val </span><span style="color: #007700">= </span><span style="color: #9876AA">min</span><span style="color: #007700">(-</span><span style="color: #9876AA">10</span><span style="color: #007700">, </span><span style="color: #9876AA">NULL</span><span style="color: #007700">, </span><span style="color: #9876AA">10</span><span style="color: #007700">);  </span><span style="color: #FF8000">// NULL<br /><br />// 0, on the other hand, is treated as FALSE, so is "lower than" TRUE<br /></span><span style="color: #9876AA">$val </span><span style="color: #007700">= </span><span style="color: #9876AA">min</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">TRUE</span><span style="color: #007700">); </span><span style="color: #FF8000">// 0<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.min-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link max()} - 找出最大值</span></li>    <li class="member"><span class="function">{@link count()} - 统计数组、Countable 对象中所有元素的数量</span></li>   </ul>  </span> </div></div>
 * @return mixed min returns the numerically lowest of the*/
function min(
    #[PhpStormStubsElementAvailable(from: '8.0')] mixed $value,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] mixed $values,
    mixed ...$values
): mixed {}

/**
*<div id="function.max" class="refentry"> <div class="refnamediv">  <h1 class="refname">max</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">max</span> &mdash; <span class="dc-title">找出最大值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.max-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>max</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$values</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="simpara">替代签名（不支持命名参数）：</p>  <div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><strong>max</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$value_array</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   如果仅有一个参数且为数组，<span class="function"><strong style="color:#CC7832">max()</strong></span>   返回该数组中最大的值。如果第一个参数是整数、字符串或浮点数，则至少需要两个参数而   <span class="function"><strong style="color:#CC7832">max()</strong></span> 会返回这些值中最大的一个。可以比较无限多个值。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    不同类型的值将使用<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">标准比较规则</a>进行比较。例如，一个非数字    <span class="type" style="color:#EAB766">string</span> 与 <span class="type" style="color:#EAB766">int</span> 比较时就当做是 <span>0</span>，但多个非数字    <span class="type" style="color:#EAB766">string</span> 值将会按照字母数字比较。返回的实际值是未应用任何转换的原始类型。   </p>  </p></blockquote>  <div class="caution"><strong class="caution">警告</strong>   <p class="simpara">    传递不同类型的参数时要小心，因为 <span class="function"><strong style="color:#CC7832">max()</strong></span> 会产生不可预测的结果。   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.max-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       任何<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">可比较</a>的值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">values</span></dt>     <dd>      <p class="para">       任何<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">可比较</a>的值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value_array</span></dt>     <dd>      <p class="para">       包含值的数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.max-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="function"><strong style="color:#CC7832">max()</strong></span> 根据标准比较返回认为是“最大”的参数值。如果不同类型的多个值认为相等（比如   <span>0</span> 与 <span>&#039;abc&#039;</span>），则将会返回提供给函数的第一个值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.max-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果传递空数组，<span class="function"><strong style="color:#CC7832">max()</strong></span> 抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.max-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="function"><strong style="color:#CC7832">max()</strong></span> 现在失败时会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；之前会返回        <strong><span>false</span></strong> 并发出 <strong><span>E_WARNING</span></strong> 错误。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       由于 <a href="https://www.php.net/manual/zh/migration80.incompatible.php#migration80.incompatible.core.string-number-comparision" class="link">字符串到数字的比较</a>       已经改变，<span class="function"><strong style="color:#CC7832">max()</strong></span> 在这些情况下不再根据参数的顺序返回不同的值。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.max-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 使用 <span class="function"><strong style="color:#CC7832">max()</strong></span> 的示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">max</span><span style="color: #007700">(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">6</span><span style="color: #007700">, </span><span style="color: #9876AA">7</span><span style="color: #007700">);  </span><span style="color: #FF8000">// 7<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">max</span><span style="color: #007700">(array(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">)); </span><span style="color: #FF8000">// 5<br /><br />// Here we are comparing -1 &lt; 0, so 'hello' is the highest value<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">max</span><span style="color: #007700">(</span><span style="color: #DD0000">'hello'</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">);    </span><span style="color: #FF8000">// hello<br /><br />// With multiple arrays of different lengths, max returns the longest<br /></span><span style="color: #9876AA">$val </span><span style="color: #007700">= </span><span style="color: #9876AA">max</span><span style="color: #007700">(array(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">), array(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">)); </span><span style="color: #FF8000">// array(1, 1, 1, 1)<br /><br />// Multiple arrays of the same length are compared from left to right<br />// so in our example: 2 == 2, but 5 &gt; 4<br /></span><span style="color: #9876AA">$val </span><span style="color: #007700">= </span><span style="color: #9876AA">max</span><span style="color: #007700">(array(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #9876AA">8</span><span style="color: #007700">), array(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">)); </span><span style="color: #FF8000">// array(2, 5, 1)<br /><br />// 如果同时给出数组和非数组，则绝对不会返回数组<br />// 因为比较认为数组大于任何值<br /></span><span style="color: #9876AA">$val </span><span style="color: #007700">= </span><span style="color: #9876AA">max</span><span style="color: #007700">(</span><span style="color: #DD0000">'string'</span><span style="color: #007700">, array(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #9876AA">7</span><span style="color: #007700">), </span><span style="color: #9876AA">42</span><span style="color: #007700">);   </span><span style="color: #FF8000">// array(2, 5, 7)<br /><br />// If one argument is NULL or a boolean, it will be compared against<br />// other values using the rule FALSE &lt; TRUE regardless of the other types involved<br />// In the below example, -10 is treated as TRUE in the comparison<br /></span><span style="color: #9876AA">$val </span><span style="color: #007700">= </span><span style="color: #9876AA">max</span><span style="color: #007700">(-</span><span style="color: #9876AA">10</span><span style="color: #007700">, </span><span style="color: #9876AA">FALSE</span><span style="color: #007700">); </span><span style="color: #FF8000">// -10<br /><br />// 0, on the other hand, is treated as FALSE, so is "lower than" TRUE<br /></span><span style="color: #9876AA">$val </span><span style="color: #007700">= </span><span style="color: #9876AA">max</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">TRUE</span><span style="color: #007700">); </span><span style="color: #FF8000">// TRUE<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    </div>   </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.max-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link min()} - 找出最小值</span></li>    <li class="member"><span class="function">{@link count()} - 统计数组、Countable 对象中所有元素的数量</span></li>   </ul>  </span> </div></div>
 * @return mixed max returns the numerically highest of the*/
function max(
    #[PhpStormStubsElementAvailable(from: '8.0')] mixed $value,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] mixed $values,
    mixed ...$values
): mixed {}

/**
*<div id="function.in-array" class="refentry">   <div class="refnamediv">    <h1 class="refname">in_array</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">in_array</span> &mdash; <span class="dc-title">检查数组中是否存在某个值</span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.in-array-description">  <h3 class="title">说明</h3>    <div class="methodsynopsis dc-description">     <span class="methodname" style="color:#CC7832"><strong>in_array</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$needle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$haystack</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$strict</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>    <p class="para rdfs-comment">     大海捞针，在大海（<span class="parameter" style="color:#3A95FF">haystack</span>）中搜索针（     <span class="parameter" style="color:#3A95FF">needle</span>），如果没有设置         <span class="parameter" style="color:#3A95FF">strict</span> 则使用宽松的比较。    </p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.in-array-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">needle</span></dt>     <dd>      <p class="para">       待搜索的值。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        如果 <span class="parameter" style="color:#3A95FF">needle</span> 是字符串，则比较是区分大小写的。       </p>      </p></blockquote>     </dd>             <dt><span class="parameter" style="color:#3A95FF">haystack</span></dt>     <dd>      <p class="para">       待搜索的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">strict</span></dt>     <dd>      <p class="para">        如果第三个参数 <span class="parameter" style="color:#3A95FF">strict</span> 的值为     <strong><span>true</span></strong> 则 <span class="function"><strong style="color:#CC7832">in_array()</strong></span> 函数还会检查     <span class="parameter" style="color:#3A95FF">needle</span> 的<a href="https://www.php.net/manual/zh/language.types.php" class="link">类型</a>是否和     <span class="parameter" style="color:#3A95FF">haystack</span> 中的相同。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        在 PHP 8.0.0 之前，<span>string</span> <span class="parameter" style="color:#3A95FF">needle</span> 在非严格模式下将会匹配数组中的值         <span>0</span>，反之亦然。这可能会导致不希望的结果。其它类型也存在类似的边缘情况。如果不是绝对确定有关值的类型，请始终使用        <span class="parameter" style="color:#3A95FF">strict</span> flag 以避免意外行为。       </p>      </p></blockquote>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.in-array-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">如果找到 <span class="parameter" style="color:#3A95FF">needle</span> 则返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.in-array-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">in_array()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$os </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"Mac"</span><span style="color: #007700">, </span><span style="color: #DD0000">"NT"</span><span style="color: #007700">, </span><span style="color: #DD0000">"Irix"</span><span style="color: #007700">, </span><span style="color: #DD0000">"Linux"</span><span style="color: #007700">);<br />if (</span><span style="color: #9876AA">in_array</span><span style="color: #007700">(</span><span style="color: #DD0000">"Irix"</span><span style="color: #007700">, </span><span style="color: #9876AA">$os</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"Got Irix"</span><span style="color: #007700">;<br />}<br />if (</span><span style="color: #9876AA">in_array</span><span style="color: #007700">(</span><span style="color: #DD0000">"mac"</span><span style="color: #007700">, </span><span style="color: #9876AA">$os</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"Got mac"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>      第二个条件失败，因为 <span class="function"><strong style="color:#CC7832">in_array()</strong></span>       是区分大小写的，所以以上程序显示为：    </p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Got Irix<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">in_array()</strong></span> 严格类型检查例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$a </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'1.10'</span><span style="color: #007700">, </span><span style="color: #9876AA">12.4</span><span style="color: #007700">, </span><span style="color: #9876AA">1.13</span><span style="color: #007700">);<br /><br />if (</span><span style="color: #9876AA">in_array</span><span style="color: #007700">(</span><span style="color: #DD0000">'12.4'</span><span style="color: #007700">, </span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"'12.4' found with strict check\n"</span><span style="color: #007700">;<br />}<br /><br />if (</span><span style="color: #9876AA">in_array</span><span style="color: #007700">(</span><span style="color: #9876AA">1.13</span><span style="color: #007700">, </span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"1.13 found with strict check\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>1.13 found with strict check<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3 <span class="function"><strong style="color:#CC7832">in_array()</strong></span> 中用数组作为 needle</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$a </span><span style="color: #007700">= array(array(</span><span style="color: #DD0000">'p'</span><span style="color: #007700">, </span><span style="color: #DD0000">'h'</span><span style="color: #007700">), array(</span><span style="color: #DD0000">'p'</span><span style="color: #007700">, </span><span style="color: #DD0000">'r'</span><span style="color: #007700">), </span><span style="color: #DD0000">'o'</span><span style="color: #007700">);<br /><br />if (</span><span style="color: #9876AA">in_array</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'p'</span><span style="color: #007700">, </span><span style="color: #DD0000">'h'</span><span style="color: #007700">), </span><span style="color: #9876AA">$a</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"'ph' was found\n"</span><span style="color: #007700">;<br />}<br /><br />if (</span><span style="color: #9876AA">in_array</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'f'</span><span style="color: #007700">, </span><span style="color: #DD0000">'i'</span><span style="color: #007700">), </span><span style="color: #9876AA">$a</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"'fi' was found\n"</span><span style="color: #007700">;<br />}<br /><br />if (</span><span style="color: #9876AA">in_array</span><span style="color: #007700">(</span><span style="color: #DD0000">'o'</span><span style="color: #007700">, </span><span style="color: #9876AA">$a</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"'o' was found\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>  &#039;ph&#039; was found<br>  &#039;o&#039; was found<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.in-array-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_search()} - 在数组中搜索给定的值，如果成功则返回首个相应的键名</span></li>    <li class="member"><span class="function">{@link isset()} - 检测变量是否已声明并且其值不为 null</span></li>    <li class="member"><span class="function">{@link array_key_exists()} - 检查数组里是否有指定的键名或索引</span></li>   </ul>  </span> </div>  </div>
 * @return bool true if needle is found in the array,*/
function in_array(mixed $needle, array $haystack, bool $strict = false): bool {}

/**
*<div id="function.array-search" class="refentry">   <div class="refnamediv">    <h1 class="refname">array_search</h1>    <p class="verinfo">(PHP 4 &gt;= 4.0.5, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_search</span> &mdash; <span class="dc-title">     在数组中搜索给定的值，如果成功则返回首个相应的键名    </span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-search-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_search</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$needle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$haystack</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$strict</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>    <p class="para rdfs-comment">     在 <span class="parameter" style="color:#3A95FF">haystack</span> 中搜索 <span class="parameter" style="color:#3A95FF">needle</span>。    </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-search-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">needle</span></dt>     <dd>      <p class="para">       搜索的值。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        如果 <span class="parameter" style="color:#3A95FF">needle</span> 是字符串，则比较以区分大小写的方式进行。       </p>      </p></blockquote>     </dd>             <dt><span class="parameter" style="color:#3A95FF">haystack</span></dt>     <dd>      <p class="para">       这个数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">strict</span></dt>     <dd>      <p class="para">       如果可选的第三个参数 <span class="parameter" style="color:#3A95FF">strict</span> 为 <strong><span>true</span></strong>，则       <span class="function"><strong style="color:#CC7832">array_search()</strong></span> 将在 <span class="parameter" style="color:#3A95FF">haystack</span>       中检查<em>完全相同</em>的元素。       这意味着同样严格比较 <span class="parameter" style="color:#3A95FF">haystack</span> 里 <span class="parameter" style="color:#3A95FF">needle</span> 的 <a href="https://www.php.net/manual/zh/language.types.php" class="link">类型</a>，并且对象需是同一个实例。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-search-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果找到了 <span class="parameter" style="color:#3A95FF">needle</span> 则返回它的键，否则返回 <strong><span>false</span></strong>。  </p>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">needle</span> 在   <span class="parameter" style="color:#3A95FF">haystack</span>   中出现不止一次，则返回第一个匹配的键。要返回所有匹配值的键，应该用   <span class="function">{@link array_keys()}</span> 加上可选参数   <span class="parameter" style="color:#3A95FF">search_value</span> 来代替。  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数可能返回布尔值<strong><span>false</span></strong>，但也可能返回等同于 <strong><span>false</span></strong> 的非布尔值。请阅读 <a href="https://www.php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">===运算符</a>来测试此函数的返回值。</p></div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-search-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_search()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array </span><span style="color: #007700">= array(</span><span style="color: #9876AA">0 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'blue'</span><span style="color: #007700">, </span><span style="color: #9876AA">1 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'red'</span><span style="color: #007700">, </span><span style="color: #9876AA">2 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'green'</span><span style="color: #007700">, </span><span style="color: #9876AA">3 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'red'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$key </span><span style="color: #007700">= </span><span style="color: #9876AA">array_search</span><span style="color: #007700">(</span><span style="color: #DD0000">'green'</span><span style="color: #007700">, </span><span style="color: #9876AA">$array</span><span style="color: #007700">); </span><span style="color: #FF8000">// $key = 2;<br /></span><span style="color: #9876AA">$key </span><span style="color: #007700">= </span><span style="color: #9876AA">array_search</span><span style="color: #007700">(</span><span style="color: #DD0000">'red'</span><span style="color: #007700">, </span><span style="color: #9876AA">$array</span><span style="color: #007700">);   </span><span style="color: #FF8000">// $key = 1;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-search-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_keys()} - 返回数组中部分的或所有的键名</span></li>    <li class="member"><span class="function">{@link array_values()} - 返回数组中所有的值</span></li>    <li class="member"><span class="function">{@link array_key_exists()} - 检查数组里是否有指定的键名或索引</span></li>    <li class="member"><span class="function">{@link in_array()} - 检查数组中是否存在某个值</span></li>   </ul>  </span> </div></div>
 * @return int|string|false the key for needle if it is found in the*/
function array_search(mixed $needle, array $haystack, bool $strict = false): string|int|false {}

/**
*<div id="function.extract" class="refentry"> <div class="refnamediv">  <h1 class="refname">extract</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">extract</span> &mdash; <span class="dc-title">从数组中将变量导入到当前的符号表</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.extract-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>extract</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>EXTR_OVERWRITE</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$prefix</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   本函数用来将变量从数组中导入到当前的符号表中。  </p>  <p class="para">   检查每个键名看是否可以作为一个合法的变量名，同时也检查和符号表中已有的变量名的冲突。  </p>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    不要对不可信的数据使用 <span class="function"><strong style="color:#CC7832">extract()</strong></span>，类似用户输入    （例如 <var class="varname"><a href="https://www.php.net/manual/zh/reserved.variables.get.php" class="classname">$_GET</a></var>、<var class="varname"><a href="https://www.php.net/manual/zh/reserved.variables.files.php" class="classname">$_FILES</a></var>）。   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.extract-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       一个关联数组。此函数会将键名当作变量名，值作为变量的值。       对每个键／值对都会在当前的符号表中建立变量，并受到   <span class="parameter" style="color:#3A95FF">flags</span> 和 <span class="parameter" style="color:#3A95FF">prefix</span> 参数的影响。      </p>      <p class="para">        必须使用关联数组，数字索引的数组将不会产生结果，除非用了   <strong><span>EXTR_PREFIX_ALL</span></strong> 或者 <strong><span>EXTR_PREFIX_INVALID</span></strong>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">        对待非法／数字和冲突的键名的方法将根据取出标记   <span class="parameter" style="color:#3A95FF">flags</span> 参数决定。可以是以下值之一：       <dl>                 <dt><strong><span>EXTR_OVERWRITE</span></strong></dt>         <dd>          <span class="simpara">           如果有冲突，覆盖已有的变量。          </span>         </dd>                         <dt><strong><span>EXTR_SKIP</span></strong></dt>         <dd>          <span class="simpara">           如果有冲突，不覆盖已有的变量。          </span>         </dd>                         <dt><strong><span>EXTR_PREFIX_SAME</span></strong></dt>         <dd>          <span class="simpara">如果有冲突，在变量名前加上前缀 <span class="parameter" style="color:#3A95FF">prefix</span>。          </span>         </dd>                         <dt><strong><span>EXTR_PREFIX_ALL</span></strong></dt>         <dd>          <span class="simpara">           给所有变量名加上前缀       <span class="parameter" style="color:#3A95FF">prefix</span>。          </span>         </dd>                         <dt><strong><span>EXTR_PREFIX_INVALID</span></strong></dt>         <dd>          <span class="simpara">           仅在非法／数字的变量名前加上前缀 <span class="parameter" style="color:#3A95FF">prefix</span>。          </span>         </dd>                         <dt><strong><span>EXTR_IF_EXISTS</span></strong></dt>         <dd>          <span class="simpara">           仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。           举个例子，以下情况非常有用：定义一些有效变量，然后从 <var class="varname"><a href="https://www.php.net/manual/zh/reserved.variables.request.php" class="classname">$_REQUEST</a></var> 中仅导入这些已定义的变量。          </span>         </dd>                         <dt><strong><span>EXTR_PREFIX_IF_EXISTS</span></strong></dt>         <dd>          <span class="simpara">           仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。          </span>         </dd>                         <dt><strong><span>EXTR_REFS</span></strong></dt>         <dd>          <span class="simpara">           将变量作为引用提取。这有力地表明了导入的变量仍然引用了       <span class="parameter" style="color:#3A95FF">array</span> 参数的值。可以单独使用这个标志或者在       <span class="parameter" style="color:#3A95FF">flags</span> 中用 OR 与其它任何标志结合使用。          </span>         </dd>               </dl>      </p>      <p class="para">       如果没有指定 <span class="parameter" style="color:#3A95FF">flags</span>，则被假定为 <strong><span>EXTR_OVERWRITE</span></strong>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">prefix</span></dt>     <dd>      <p class="para">       注意 <span class="parameter" style="color:#3A95FF">prefix</span> 仅在   <span class="parameter" style="color:#3A95FF">flags</span> 的值是   <strong><span>EXTR_PREFIX_SAME</span></strong>，<strong><span>EXTR_PREFIX_ALL</span></strong>，<strong><span>EXTR_PREFIX_INVALID</span></strong>   或 <strong><span>EXTR_PREFIX_IF_EXISTS</span></strong>   时需要。       如果附加了前缀后的结果不是合法的变量名，将不会导入到符号表中。前缀和数组键名之间会自动加上一个下划线。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.extract-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回成功导入到符号表中的变量数目。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.extract-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">extract()</strong></span> 例子</strong></p>    <div class="example-contents"><p>     <span class="function"><strong style="color:#CC7832">extract()</strong></span> 的一种可能用法是将 <span class="function">{@link wddx_deserialize()}</span>   返回的结合数组中的内容导入到符号表变量中去。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">// 假定 $var_array 是 wddx_deserialize 返回的数组<br /><br /></span><span style="color: #9876AA">$size </span><span style="color: #007700">= </span><span style="color: #DD0000">"large"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$var_array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"color" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,<br />                   </span><span style="color: #DD0000">"size"  </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"medium"</span><span style="color: #007700">,<br />                   </span><span style="color: #DD0000">"shape" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"sphere"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">extract</span><span style="color: #007700">(</span><span style="color: #9876AA">$var_array</span><span style="color: #007700">, </span><span style="color: #9876AA">EXTR_PREFIX_SAME</span><span style="color: #007700">, </span><span style="color: #DD0000">"wddx"</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$color</span><span style="color: #DD0000">, </span><span style="color: #9876AA">$size</span><span style="color: #DD0000">, </span><span style="color: #9876AA">$shape</span><span style="color: #DD0000">, </span><span style="color: #9876AA">$wddx_size</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>blue, large, sphere, medium<br></span></div>    </div>    <div class="example-contents"><p>       <var class="varname">$size</var> 没有被覆盖，因为指定了   <strong><span>EXTR_PREFIX_SAME</span></strong>，这使得 <var class="varname">$wddx_size</var>     被建立。如果指定了 <strong><span>EXTR_SKIP</span></strong>，则 <var class="varname">$wddx_size</var>   也不会被建立。<strong><span>EXTR_OVERWRITE</span></strong> 将使 <var class="varname">$size</var>   的值为“medium”，<strong><span>EXTR_PREFIX_ALL</span></strong> 将建立新变量   <var class="varname">$wddx_color</var>，<var class="varname">$wddx_size</var> 和   <var class="varname">$wddx_shape</var>。    </p></div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.extract-notes">  <h3 class="title">注释</h3>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">        不要对不能信任的数据使用    <span class="function"><strong style="color:#CC7832">extract()</strong></span>，例如用户的输入（<var class="varname"><a href="https://www.php.net/manual/zh/reserved.variables.get.php" class="classname">$_GET</a></var>， <var class="varname"><a href="https://www.php.net/manual/zh/reserved.variables.files.php" class="classname">$_FILES</a></var>...）。        如果这样做，要确保使用不会覆盖的    <span class="parameter" style="color:#3A95FF">flags</span> 值，例如    <strong><span>EXTR_SKIP</span></strong>，并且要留意应该按照     <a href="https://www.php.net/manual/zh/ini.core.php#ini.variables-order" class="link">variables_order</a>     在 <a href="https://www.php.net/manual/zh/ini.php" class="link"><var class="filename">php.ini</var></a> 里    定义的顺序来提取。   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.extract-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link compact()} - 建立一个数组，包括变量名和它们的值</span></li>    <li class="member"><span class="function">{@link list()} - 把数组中的值赋给一组变量</span></li>   </ul>  </span> </div></div>
 * @return int the number of variables successfully imported into the symbol*/
function extract(
    array &$array,
    #[ExpectedValues(flags: [
               EXTR_OVERWRITE,
               EXTR_SKIP,
               EXTR_PREFIX_SAME,
               EXTR_PREFIX_ALL,
               EXTR_PREFIX_INVALID,
               EXTR_IF_EXISTS,
               EXTR_PREFIX_IF_EXISTS,
               EXTR_REFS
           ])] int $flags = EXTR_OVERWRITE,
    string $prefix = ""
): int {}

/**
*<div id="function.compact" class="refentry"> <div class="refnamediv">  <h1 class="refname">compact</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">compact</span> &mdash; <span class="dc-title">   建立一个数组，包括变量名和它们的值  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.compact-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>compact</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$var_name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">...$var_names</span></span>): <span class="type" style="color:#EAB766">array</span></div>    <p class="para rdfs-comment">     创建一个包含变量与其值的数组。    </p>    <p class="para">     对每个参数，<span class="function"><strong style="color:#CC7832">compact()</strong></span>     在当前的符号表中查找该变量名并将它添加到输出的数组中，变量名成为键名而变量的内容成为该键的值。简单说，它做的事和     <span class="function">{@link extract()}</span> 正好相反。返回将所有变量添加进去后的数组。    </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    在 PHP 7.3 之前版本，未设置的字符串会被静默忽略。   </p>  </p></blockquote>  </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.compact-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">var_name</span></dt>     <dt><span class="parameter" style="color:#3A95FF">var_names</span></dt>     <dd>      <p class="para">       <span class="function"><strong style="color:#CC7832">compact()</strong></span> 接受可变的参数数量。每个参数不是包含变量名的字符串，就是变量名组成的数组。数组中可以包含由其他变量名组成的数组，<span class="function"><strong style="color:#CC7832">compact()</strong></span> 会递归处理。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.compact-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回输出的数组，包含了添加的所有变量。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.compact-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果字符串指向的变量未定义，<span class="function"><strong style="color:#CC7832">compact()</strong></span> 会产生 <strong><span>E_WARNING</span></strong> 级别的错误。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.compact-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       如果指定字符串引用了未设置的变量，现在会发出 <strong><span>E_WARNING</span></strong> 级别的错误。      </td>     </tr>     <tr>      <td>7.3.0</td>      <td>       现在，如果字符串指向的变量未定义，<span class="function"><strong style="color:#CC7832">compact()</strong></span> 会产生 <strong><span>E_NOTICE</span></strong>       级错误。在此之前，这样的字符串会默默地跳过。      </td>     </tr>    </tbody>     </table> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.compact-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">compact()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$city  </span><span style="color: #007700">= </span><span style="color: #DD0000">"San Francisco"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$state </span><span style="color: #007700">= </span><span style="color: #DD0000">"CA"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$event </span><span style="color: #007700">= </span><span style="color: #DD0000">"SIGGRAPH"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$location_vars </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"city"</span><span style="color: #007700">, </span><span style="color: #DD0000">"state"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">compact</span><span style="color: #007700">(</span><span style="color: #DD0000">"event"</span><span style="color: #007700">, </span><span style="color: #9876AA">$location_vars</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [event] =&gt; SIGGRAPH<br>    [city] =&gt; San Francisco<br>    [state] =&gt; CA<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.compact-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <strong>Gotcha</strong><br />   <p class="para">    因为<a href="https://www.php.net/manual/zh/language.variables.variable.php" class="link">可变变量</a>也许不能在函数内部用于    PHP 的<a href="https://www.php.net/manual/zh/language.variables.superglobals.php" class="link">超全局数组</a>，此时不能将超全局数组传递入    <span class="function"><strong style="color:#CC7832">compact()</strong></span> 中。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.compact-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link extract()} - 从数组中将变量导入到当前的符号表</span></li>   </ul>  </span> </div>   </div>
 * @return array the output array with all the variables added to it.*/
function compact(#[PhpStormStubsElementAvailable(from: '8.0')] $var_name, #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $var_names, ...$var_names): array {}

/**
*<div id="function.array-fill" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_fill</h1>  <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_fill</span> &mdash; <span class="dc-title">用给定的值填充数组</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-fill-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_fill</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$start_index</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$count</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   用 <span class="parameter" style="color:#3A95FF">value</span> 参数的值填充 <span class="parameter" style="color:#3A95FF">count</span> 个元素到数组，   开始键名由 <span class="parameter" style="color:#3A95FF">start_index</span> 参数指定。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-fill-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">start_index</span></dt>     <dd>      <p class="para">       返回的数组的第一个索引值。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">start_index</span> 是负数，在 PHP 8.0.0        之前，返回的数组的第一个索引是 <span class="parameter" style="color:#3A95FF">start_index</span>，       而后面索引则从 0 开始；自 PHP 8.0.0 起，       负数键将会正常递增。（参见 {@link 例子}）      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">count</span></dt>     <dd>      <p class="para">       要插入元素的数量。必须大于或等于 0 且小于或等于 <span>2147483647</span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       用来填充的值。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-fill-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回填充后的数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.array-fill-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">count</span> 超出范围，将会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-fill-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       如果 <span class="function"><strong style="color:#CC7832">array_fill()</strong></span> 的 <span class="parameter" style="color:#3A95FF">count</span>       超出范围现在将会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>，       之前会引发 <strong><span>E_WARNING</span></strong> 且函数返回 <strong><span>false</span></strong>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-fill-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_fill()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$a </span><span style="color: #007700">= </span><span style="color: #9876AA">array_fill</span><span style="color: #007700">(</span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #9876AA">6</span><span style="color: #007700">, </span><span style="color: #DD0000">'banana'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [5]  =&gt; banana<br>    [6]  =&gt; banana<br>    [7]  =&gt; banana<br>    [8]  =&gt; banana<br>    [9]  =&gt; banana<br>    [10] =&gt; banana<br>)<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 开始索引为负数的 <span class="function"><strong style="color:#CC7832">array_fill()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$a </span><span style="color: #007700">= </span><span style="color: #9876AA">array_fill</span><span style="color: #007700">(-</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #DD0000">'pear'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例在 PHP 7 中的输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [-2] =&gt; pear<br>    [0] =&gt; pear<br>    [1] =&gt; pear<br>    [2] =&gt; pear<br>)<br></span></div>    </div>    <div class="example-contents"><p>以上示例在 PHP 8 中的输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [-2] =&gt; pear<br>    [-1] =&gt; pear<br>    [0] =&gt; pear<br>    [1] =&gt; pear<br>)<br></span></div>    </div>   </div>  </p>  <p class="para">   注意 索引 <span>-1</span> 在 PHP 8.0.0 之前不存在。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-fill-notes">  <h3 class="title">注释</h3>  <p class="para">   参见手册上<a href="https://www.php.net/manual/zh/language.types.array.php" class="link">数组</a>一节里关于负数的键的详细解释。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-fill-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_fill_keys()} - 使用指定的键和值填充数组</span></li>    <li class="member"><span class="function">{@link str_repeat()} - 重复一个字符串</span></li>    <li class="member"><span class="function">{@link range()} - 根据范围创建数组，包含指定的元素</span></li>   </ul>  </span> </div></div>
 * @return array the filled array*/
function array_fill(int $start_index, int $count, mixed $value): array {}

/**
*<div id="function.array-fill-keys" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_fill_keys</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_fill_keys</span> &mdash; <span class="dc-title">使用指定的键和值填充数组</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-fill-keys-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_fill_keys</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$keys</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   使用 <span class="parameter" style="color:#3A95FF">value</span> 参数的值作为值，使用 <span class="parameter" style="color:#3A95FF">keys</span> 数组的值作为键来填充一个数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-fill-keys-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">keys</span></dt>     <dd>      <p class="para">       使用该数组的值作为键。非法值将被转换为<span class="type" style="color:#EAB766"><span class="type 字符串" style="color:#EAB766">字符串</span></span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       填充使用的值。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-fill-keys-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回填充后的数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-fill-keys-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_fill_keys()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$keys </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #9876AA">10</span><span style="color: #007700">, </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$a </span><span style="color: #007700">= </span><span style="color: #9876AA">array_fill_keys</span><span style="color: #007700">(</span><span style="color: #9876AA">$keys</span><span style="color: #007700">, </span><span style="color: #DD0000">'banana'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [foo] =&gt; banana<br>    [5] =&gt; banana<br>    [10] =&gt; banana<br>    [bar] =&gt; banana<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-fill-keys-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_fill()} - 用给定的值填充数组</span></li>    <li class="member"><span class="function">{@link array_combine()} - 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值</span></li>   </ul>  </span> </div></div>
 * @return array the filled array*/
function array_fill_keys(array $keys, mixed $value): array {}

/**
*<div id="function.range" class="refentry"> <div class="refnamediv">  <h1 class="refname">range</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">range</span> &mdash; <span class="dc-title">根据范围创建数组，包含指定的元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.range-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>range</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">float</span></span> <span class="parameter" style="color:#3A95FF">$start</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">float</span></span> <span class="parameter" style="color:#3A95FF">$end</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">float</span></span> <span class="parameter" style="color:#3A95FF">$step</span><span class="initializer"> = 1</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   建立一个包含指定范围单元的数组。  </p>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">start</span> 和 <span class="parameter" style="color:#3A95FF">end</span> 都是 <span class="type" style="color:#EAB766">string</span>，<span class="parameter" style="color:#3A95FF">step</span>   是 <span class="type" style="color:#EAB766">int</span>，则生成的数组是字节序列，否则，生成的数组将是数字序列。  </p>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">start</span> 小于或等于 <span class="parameter" style="color:#3A95FF">end</span>，则为递增序列，否则为递减序列。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.range-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">start</span></dt>     <dd>      <p class="para">       序列的第一个值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">end</span></dt>     <dd>      <p class="para">       序列的最后一个可能值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">step</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">step</span> 表示在序列之间产生序列时前进的数量。      </p>      <p class="para">       对于递减序列，<span class="parameter" style="color:#3A95FF">step</span> 可能是负数。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">step</span> 是没有小数部分的 <span class="type" style="color:#EAB766">float</span>，则将解释为 <span class="type" style="color:#EAB766">int</span>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.range-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回  <span class="type" style="color:#EAB766">array</span>，由元素组成的序列，其中第一个元素为 <span class="parameter" style="color:#3A95FF">start</span>，最后一个元素为   <span class="parameter" style="color:#3A95FF">end</span>，序列中每个元素之间的差值为 <span class="parameter" style="color:#3A95FF">step</span>。  </p>  <p class="para">   返回的数组的最后一个元素是 <span class="parameter" style="color:#3A95FF">end</span> 或序列中的前一个元素，具体取决于 <span class="parameter" style="color:#3A95FF">step</span>。  </p>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">start</span> 和 <span class="parameter" style="color:#3A95FF">end</span> 都是 <span class="type" style="color:#EAB766">string</span>，并且   <span class="parameter" style="color:#3A95FF">step</span> 是 <span class="type" style="color:#EAB766">int</span>，则生成的数组将是字节序列，通常是拉丁 <abbr class="abbrev">ASCII</abbr> 字符。  </p>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">start</span>、<span class="parameter" style="color:#3A95FF">end</span> 或 <span class="parameter" style="color:#3A95FF">step</span> 是   <span class="type" style="color:#EAB766">float</span>，则生成的数组将是 <span class="type" style="color:#EAB766">float</span> 序列。  </p>  <p class="para">   否则，生成的数组将是 <span class="type" style="color:#EAB766">int</span> 序列。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.range-errors">  <h3 class="title">错误／异常</h3>  <ul class="itemizedlist">   <li class="listitem">    <span class="simpara">     如果 <span class="parameter" style="color:#3A95FF">step</span> 是 <span>0</span>，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。    </span>   </li>   <li class="listitem">    <span class="simpara">     如果 <span class="parameter" style="color:#3A95FF">start</span>、<span class="parameter" style="color:#3A95FF">end</span> 或 <span class="parameter" style="color:#3A95FF">step</span> 不是      <span class="function">{@link is_finite()}</span>，则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。    </span>   </li>   <li class="listitem">    <span class="simpara">     如果 <span class="parameter" style="color:#3A95FF">step</span> 是负数，但生成的范围是递增的（例如 <span>$start &lt;=     $end</span>），则抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。    </span>   </li>   <li class="listitem">    <span class="simpara">     如果 <span class="parameter" style="color:#3A95FF">start</span> 或 <span class="parameter" style="color:#3A95FF">end</span> 是空字符串 <span>&#039;&#039;</span>，则发出     <strong><span>E_WARNING</span></strong> 并将空字符串解释为 <span>0</span>。    </span>   </li>   <li class="listitem">    <span class="simpara">     如果 <span class="parameter" style="color:#3A95FF">start</span> 或 <span class="parameter" style="color:#3A95FF">end</span> 不是<a href="https://www.php.net/manual/zh/language.types.numeric-strings.php" class="link">数字字符串</a>，并且多于一个字节，将发出 <strong><span>E_WARNING</span></strong>。    </span>   </li>   <li class="listitem">    <span class="simpara">     如果 <span class="parameter" style="color:#3A95FF">start</span> 或 <span class="parameter" style="color:#3A95FF">end</span> 是字符串，并且由于另一个边界值是数字而默默转换为     <span class="type" style="color:#EAB766">int</span>，将发出 <strong><span>E_WARNING</span></strong>。    </span>   </li>   <li class="listitem">    <span class="simpara">     如果 <span class="parameter" style="color:#3A95FF">step</span> 是 <span class="type" style="color:#EAB766">float</span>，并且 <span class="parameter" style="color:#3A95FF">start</span> 和 <span class="parameter" style="color:#3A95FF">end</span>     不是<a href="https://www.php.net/manual/zh/language.types.numeric-strings.php" class="link">数字字符串</a>，将发出 <strong><span>E_WARNING</span></strong>。    </span>   </li>  </ul> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.range-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.3.0</td>      <td>       如果 <span class="parameter" style="color:#3A95FF">start</span> 和 <span class="parameter" style="color:#3A95FF">end</span> 都是字符串，然后 <span class="function"><strong style="color:#CC7832">range()</strong></span>       现在将始终生成字节 <span class="type" style="color:#EAB766">array</span>。之前如果其中一个边界值是数字字符串，然后另外一个边界值也会默默转换为 <span class="type" style="color:#EAB766">int</span>。      </td>     </tr>     <tr>      <td>8.3.0</td>      <td>       如果 <span class="parameter" style="color:#3A95FF">start</span> 或 <span class="parameter" style="color:#3A95FF">end</span> 是字符串，并且由于另一个边界值是数字而默默转换为       <span class="type" style="color:#EAB766">int</span>，现在将发出 <strong><span>E_WARNING</span></strong>。      </td>     </tr>     <tr>      <td>8.3.0</td>      <td>       如果 <span class="parameter" style="color:#3A95FF">start</span> 或 <span class="parameter" style="color:#3A95FF">end</span> 是多于一个字节的非数字字符串，现在将发出 <strong><span>E_WARNING</span></strong>。      </td>     </tr>     <tr>      <td>8.3.0</td>      <td>       如果 <span class="parameter" style="color:#3A95FF">start</span> 或 <span class="parameter" style="color:#3A95FF">end</span> 是空字符串，现在将发出 <strong><span>E_WARNING</span></strong>。      </td>     </tr>     <tr>      <td>8.3.0</td>      <td>       如果 <span class="parameter" style="color:#3A95FF">step</span> 是不带小数部分的 <span class="type" style="color:#EAB766">float</span>，将解释为 <span class="type" style="color:#EAB766">int</span>。      </td>     </tr>     <tr>      <td>8.3.0</td>      <td>       如果 <span class="parameter" style="color:#3A95FF">step</span> 是负数，当生成的范围是递增时，现在将抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。      </td>     </tr>     <tr>      <td>8.3.0</td>      <td>       如果 <span class="parameter" style="color:#3A95FF">step</span> 不是有限数值（finite），现在将抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。      </td>     </tr>     <tr>      <td>8.3.0</td>      <td>       如果 <span class="parameter" style="color:#3A95FF">start</span> 或 <span class="parameter" style="color:#3A95FF">end</span> 是 <span class="type" style="color:#EAB766">array</span>、<span class="type" style="color:#EAB766">object</span> 或       <span class="type" style="color:#EAB766">resource</span>，现在将会抛出  <span class="classname"><a href="https://www.php.net/manual/zh/class.typeerror.php" class="classname">TypeError</a></span>。之前会默默地转换为 <span class="type" style="color:#EAB766">int</span>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.range-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">range()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">', '</span><span style="color: #007700">, </span><span style="color: #9876AA">range</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">12</span><span style="color: #007700">)), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /><br />echo </span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">', '</span><span style="color: #007700">, </span><span style="color: #9876AA">range</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">100</span><span style="color: #007700">, </span><span style="color: #9876AA">10</span><span style="color: #007700">)), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /><br />echo </span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">', '</span><span style="color: #007700">, </span><span style="color: #9876AA">range</span><span style="color: #007700">(</span><span style="color: #DD0000">'a'</span><span style="color: #007700">, </span><span style="color: #DD0000">'i'</span><span style="color: #007700">)), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /><br />echo </span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">', '</span><span style="color: #007700">, </span><span style="color: #9876AA">range</span><span style="color: #007700">(</span><span style="color: #DD0000">'c'</span><span style="color: #007700">, </span><span style="color: #DD0000">'a'</span><span style="color: #007700">)), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /><br />echo </span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">', '</span><span style="color: #007700">, </span><span style="color: #9876AA">range</span><span style="color: #007700">(</span><span style="color: #DD0000">'A'</span><span style="color: #007700">, </span><span style="color: #DD0000">'z'</span><span style="color: #007700">)), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12<br>0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100<br>a, b, c, d, e, f, g, h, i<br>c, b, a<br>A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, [, \, ], ^, _, `, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.range-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link shuffle()} - 打乱数组</span></li>    <li class="member"><span class="function">{@link array_fill()} - 用给定的值填充数组</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/control-structures.foreach.php" class="link">foreach</a></li>   </ul>  </span> </div></div>
 * @return array an array of elements from start to*/
function range(
    #[LanguageLevelTypeAware(['8.3' => 'string|int|float'], default: '')] $start,
    #[LanguageLevelTypeAware(['8.3' => 'string|int|float'], default: '')] $end,
    int|float $step = 1
): array {}

/**
*<div id="function.array-multisort" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_multisort</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_multisort</span> &mdash; <span class="dc-title">对多个数组或多维数组进行排序</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-multisort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_multisort</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$array1</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$array1_sort_order</span><span class="initializer"> = SORT_ASC</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$array1_sort_flags</span><span class="initializer"> = SORT_REGULAR</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$rest</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">array_multisort()</strong></span>   可以用来一次对多个数组进行排序，或者根据某一维或多维对多维数组进行排序。  </p>  <p class="para">   关联（<span class="type" style="color:#EAB766">string</span>）键名保持不变，但数字键名会被重新索引。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-multisort-parameters">  <h3 class="title">参数</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <span>    重置数组中的内部指针，指向第一个元素。 </span></p></blockquote>  <p class="para">   <dl>         <dt><span class="parameter" style="color:#3A95FF">array1</span></dt>     <dd>      <p class="para">       要排序的 <span class="type" style="color:#EAB766">array</span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">array1_sort_order</span></dt>     <dd>      <p class="para">       之前 <span class="type" style="color:#EAB766">array</span>  参数要排列的顺序。       <strong><span>SORT_ASC</span></strong> 按照上升顺序排序， <strong><span>SORT_DESC</span></strong> 按照下降顺序排序。      </p>      <p class="para">       此参数可以和 <span class="parameter" style="color:#3A95FF">array1_sort_flags</span> 互换，也可以完全删除，默认是 <strong><span>SORT_ASC</span></strong> 。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">array1_sort_flags</span></dt>     <dd>      <p class="para">       为 <span class="type" style="color:#EAB766">array</span> 参数设定选项：      </p>      <p class="para">       排序类型标志：       <ul class="itemizedlist">        <li class="listitem">         <span class="simpara"><strong><span>SORT_REGULAR</span></strong> -           将项目按照通常方法比较（不修改类型）         </span>        </li>        <li class="listitem">         <span class="simpara"><strong><span>SORT_NUMERIC</span></strong> - 按照数字大小比较</span>        </li>        <li class="listitem">         <span class="simpara"><strong><span>SORT_STRING</span></strong> -  按照字符串比较</span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>SORT_LOCALE_STRING</span></strong> -  根据当前的本地化设置，按照字符串比较。           它会使用 locale 信息，可以通过 <span class="function">{@link setlocale()}</span> 修改此信息。         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>SORT_NATURAL</span></strong> - 以字符串的&quot;自然排序&quot;，类似 <span class="function">{@link natsort()}</span>         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>SORT_FLAG_CASE</span></strong> - 可以组合          (按位或 OR)           <strong><span>SORT_STRING</span></strong> 或者          <strong><span>SORT_NATURAL</span></strong> 大小写不敏感的方式排序字符串。         </span>        </li>       </ul>      </p>      <p class="para">       参数可以和 <span class="parameter" style="color:#3A95FF">array1_sort_order</span> 交换或者省略，默认情况下是 <strong><span>SORT_REGULAR</span></strong>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">rest</span></dt>     <dd>      <p class="para">       可选的选项，可提供更多数组，跟随在 sort order 和 sort flag 之后。       提供的数组和之前的数组要有相同数量的元素。       换言之，排序是按字典顺序排列的。      </p>     </dd>       </dl>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-multisort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-multisort-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 多个数组排序</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$ar1 </span><span style="color: #007700">= array(</span><span style="color: #9876AA">10</span><span style="color: #007700">, </span><span style="color: #9876AA">100</span><span style="color: #007700">, </span><span style="color: #9876AA">100</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$ar2 </span><span style="color: #007700">= array(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_multisort</span><span style="color: #007700">(</span><span style="color: #9876AA">$ar1</span><span style="color: #007700">, </span><span style="color: #9876AA">$ar2</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ar1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ar2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     这个例子里，排序后，第一个数组会包含  0、     10、 100、 100。     第二个数组会包含 4、1、 2、 3。     第二个数组里的项目对应第一个数组后也进行了排序（100 和 100）。    </p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(4) {<br>  [0]=&gt; int(0)<br>  [1]=&gt; int(10)<br>  [2]=&gt; int(100)<br>  [3]=&gt; int(100)<br>}<br>array(4) {<br>  [0]=&gt; int(4)<br>  [1]=&gt; int(1)<br>  [2]=&gt; int(2)<br>  [3]=&gt; int(3)<br>}<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 排序多维数组</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$ar </span><span style="color: #007700">= array(<br />       array(</span><span style="color: #DD0000">"10"</span><span style="color: #007700">, </span><span style="color: #9876AA">11</span><span style="color: #007700">, </span><span style="color: #9876AA">100</span><span style="color: #007700">, </span><span style="color: #9876AA">100</span><span style="color: #007700">, </span><span style="color: #DD0000">"a"</span><span style="color: #007700">),<br />       array(   </span><span style="color: #9876AA">1</span><span style="color: #007700">,  </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #DD0000">"2"</span><span style="color: #007700">,   </span><span style="color: #9876AA">3</span><span style="color: #007700">,   </span><span style="color: #9876AA">1</span><span style="color: #007700">)<br />      );<br /></span><span style="color: #9876AA">array_multisort</span><span style="color: #007700">(</span><span style="color: #9876AA">$ar</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">], </span><span style="color: #9876AA">SORT_ASC</span><span style="color: #007700">, </span><span style="color: #9876AA">SORT_STRING</span><span style="color: #007700">,<br />                </span><span style="color: #9876AA">$ar</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">], </span><span style="color: #9876AA">SORT_NUMERIC</span><span style="color: #007700">, </span><span style="color: #9876AA">SORT_DESC</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ar</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     本例中在排序后，第一个数组将变成     &quot;10&quot;，100，100，11，&quot;a&quot;（被当作字符串以升序排列）。第二个数组将包含     1, 3, &quot;2&quot;, 2, 1（被当作数字以降序排列）。    </p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(2) {<br>  [0]=&gt; array(5) {<br>    [0]=&gt; string(2) &quot;10&quot;<br>    [1]=&gt; int(100)<br>    [2]=&gt; int(100)<br>    [3]=&gt; int(11)<br>    [4]=&gt; string(1) &quot;a&quot;<br>  }<br>  [1]=&gt; array(5) {<br>    [0]=&gt; int(1)<br>    [1]=&gt; int(3)<br>    [2]=&gt; string(1) &quot;2&quot;<br>    [3]=&gt; int(2)<br>    [4]=&gt; int(1)<br>  }<br>}<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3 对数据库结果进行排序</strong></p>    <div class="example-contents"><p>     本例中 <var class="varname">data</var>     数组中的每个单元表示一个表中的一行。这是典型的数据库记录的数据集合。    </p></div>    <div class="example-contents"><p>     例子中的数据如下：    </p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>volume | edition<br>-------+--------<br>    67 |       2<br>    86 |       1<br>    85 |       6<br>    98 |       2<br>    86 |       6<br>    67 |       7<br></span></div>    </div>    <div class="example-contents"><p>     数据全都存放在名为 <var class="varname">data</var>     的数组中。这通常是通过循环从数据库取得的结果，例如     <span class="function">{@link mysql_fetch_assoc()}</span>。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$data</span><span style="color: #007700">[] = array(</span><span style="color: #DD0000">'volume' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">67</span><span style="color: #007700">, </span><span style="color: #DD0000">'edition' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$data</span><span style="color: #007700">[] = array(</span><span style="color: #DD0000">'volume' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">86</span><span style="color: #007700">, </span><span style="color: #DD0000">'edition' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$data</span><span style="color: #007700">[] = array(</span><span style="color: #DD0000">'volume' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">85</span><span style="color: #007700">, </span><span style="color: #DD0000">'edition' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">6</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$data</span><span style="color: #007700">[] = array(</span><span style="color: #DD0000">'volume' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">98</span><span style="color: #007700">, </span><span style="color: #DD0000">'edition' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$data</span><span style="color: #007700">[] = array(</span><span style="color: #DD0000">'volume' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">86</span><span style="color: #007700">, </span><span style="color: #DD0000">'edition' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">6</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$data</span><span style="color: #007700">[] = array(</span><span style="color: #DD0000">'volume' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">67</span><span style="color: #007700">, </span><span style="color: #DD0000">'edition' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">7</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     本例中将把 <var class="varname">volume</var> 降序排列，把     <var class="varname">edition</var> 升序排列。    </p></div>    <div class="example-contents"><p>     现在有了包含有行的数组，但是 <span class="function"><strong style="color:#CC7832">array_multisort()</strong></span>     需要一个包含列的数组，因此用以下代码来取得列，然后排序。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 取得列的列表<br /></span><span style="color: #007700">foreach (</span><span style="color: #9876AA">$data </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$row</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$volume</span><span style="color: #007700">[</span><span style="color: #9876AA">$key</span><span style="color: #007700">]  = </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #DD0000">'volume'</span><span style="color: #007700">];<br />    </span><span style="color: #9876AA">$edition</span><span style="color: #007700">[</span><span style="color: #9876AA">$key</span><span style="color: #007700">] = </span><span style="color: #9876AA">$row</span><span style="color: #007700">[</span><span style="color: #DD0000">'edition'</span><span style="color: #007700">];<br />}<br /><br /></span><span style="color: #FF8000">// 你可以使用 array_column() 代替上面的代码<br /></span><span style="color: #9876AA">$volume  </span><span style="color: #007700">= </span><span style="color: #9876AA">array_column</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">, </span><span style="color: #DD0000">'volume'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$edition </span><span style="color: #007700">= </span><span style="color: #9876AA">array_column</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">, </span><span style="color: #DD0000">'edition'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 将数据根据 volume 降序排列，根据 edition 升序排列<br />// 把 $data 作为最后一个参数，以通用键排序<br /></span><span style="color: #9876AA">array_multisort</span><span style="color: #007700">(</span><span style="color: #9876AA">$volume</span><span style="color: #007700">, </span><span style="color: #9876AA">SORT_DESC</span><span style="color: #007700">, </span><span style="color: #9876AA">$edition</span><span style="color: #007700">, </span><span style="color: #9876AA">SORT_ASC</span><span style="color: #007700">, </span><span style="color: #9876AA">$data</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     数据集合现在排好序了，结果如下：    </p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>volume | edition<br>-------+--------<br>    98 |       2<br>    86 |       1<br>    86 |       6<br>    85 |       6<br>    67 |       2<br>    67 |       7<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #4 不区分大小写字母排序</strong></p>    <div class="example-contents"><p>     <strong><span>SORT_STRING</span></strong> 和     <strong><span>SORT_REGULAR</span></strong>     都是区分大小写字母的，大写字母会排在小写字母之前。    </p></div>    <div class="example-contents"><p>     要进行不区分大小写的排序，就要按照原数组的小写字母拷贝来排序。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'Alpha'</span><span style="color: #007700">, </span><span style="color: #DD0000">'atomic'</span><span style="color: #007700">, </span><span style="color: #DD0000">'Beta'</span><span style="color: #007700">, </span><span style="color: #DD0000">'bank'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array_lowercase </span><span style="color: #007700">= </span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #DD0000">'strtolower'</span><span style="color: #007700">, </span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">array_multisort</span><span style="color: #007700">(</span><span style="color: #9876AA">$array_lowercase</span><span style="color: #007700">, </span><span style="color: #9876AA">SORT_ASC</span><span style="color: #007700">, </span><span style="color: #9876AA">SORT_STRING</span><span style="color: #007700">, </span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; Alpha<br>    [1] =&gt; atomic<br>    [2] =&gt; bank<br>    [3] =&gt; Beta<br>)<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-multisort-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link usort()} - 使用用户自定义的比较函数对数组中的值进行排序</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/array.sorting.php" class="link">数组排序函数对比</a></li>   </ul>  </span> </div></div>
 * @return bool true on success or false on failure.*/
function array_multisort(
    &$array,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $sort_order = SORT_ASC,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $sort_flags = SORT_REGULAR,
    &...$rest
): bool {}

/**
*<div id="function.array-push" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_push</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_push</span> &mdash; <span class="dc-title">   将一个或多个单元压入数组的末尾（入栈）  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-push-description">  <h3 class="title">说明</h3> <div class="methodsynopsis dc-description">  <span class="methodname" style="color:#CC7832"><strong>array_push</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$...</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">int</span></div> <p class="para rdfs-comment">  <span class="function"><strong style="color:#CC7832">array_push()</strong></span> 将  <span class="parameter" style="color:#3A95FF">array</span> 当成一个栈，并将传入的变量压入  <span class="parameter" style="color:#3A95FF">array</span> 的末尾。<span class="parameter" style="color:#3A95FF">array</span>  的长度将根据入栈变量的数目增加。和如下效果相同：  <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array</span><span style="color: #007700">[] = </span><span style="color: #9876AA">$var</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>     并对每个传入的值重复以上动作。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">      如果用 <span class="function"><strong style="color:#CC7832">array_push()</strong></span> 来给数组增加一个单元，还不如用      <span>$array[] = </span>，因为这样没有调用函数的额外负担。  </span>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    如果第一个参数不是数组，<span class="function"><strong style="color:#CC7832">array_push()</strong></span>    将发出一条警告。这和    <span>$var[]</span> 的行为不同，在 PHP 7.1.0 之前的版本中，后者将会新建一个数组。   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-push-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value1</span></dt>     <dd>      <p class="para">       要压入 <span class="parameter" style="color:#3A95FF">array</span> 末尾的第一个值。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-push-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回处理之后数组的元素个数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-push-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.3.0</td>       <td>        可以只用一个参数来调用此函数，之前版本中至少需要两个参数。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-push-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_push()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$stack </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">, </span><span style="color: #DD0000">"banana"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_push</span><span style="color: #007700">(</span><span style="color: #9876AA">$stack</span><span style="color: #007700">, </span><span style="color: #DD0000">"apple"</span><span style="color: #007700">, </span><span style="color: #DD0000">"raspberry"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$stack</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; orange<br>    [1] =&gt; banana<br>    [2] =&gt; apple<br>    [3] =&gt; raspberry<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-push-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_pop()} - 弹出数组最后一个单元（出栈）</span></li>    <li class="member"><span class="function">{@link array_shift()} - 将数组开头的单元移出数组</span></li>    <li class="member"><span class="function">{@link array_unshift()} - 在数组开头插入一个或多个单元</span></li>   </ul>  </span> </div></div>
 * @return int the number of elements in the array.*/
function array_push(
    array &$array,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.2')] $values,
    mixed ...$values
): int {}

/**
*<div id="function.array-pop" class="refentry">   <div class="refnamediv">    <h1 class="refname">array_pop</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_pop</span> &mdash; <span class="dc-title">弹出数组最后一个单元（出栈）</span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-pop-description">  <h3 class="title">说明</h3> <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_pop</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$array</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>    <p class="para rdfs-comment">     <span class="function"><strong style="color:#CC7832">array_pop()</strong></span> 弹出并返回     <span class="parameter" style="color:#3A95FF">array</span> 最后一个元素的值，并将     <span class="parameter" style="color:#3A95FF">array</span> 的长度减一。    </p>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">使用此函数后会重置（<span class="function">{@link reset()}</span>）<span class="type" style="color:#EAB766">array</span>指针。</span></p></blockquote>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-pop-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       需要弹出栈的数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-pop-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span class="parameter" style="color:#3A95FF">array</span> 最后一个元素的值。如果 <span class="parameter" style="color:#3A95FF">array</span> 是空，将会返回 <strong><span>null</span></strong> 。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-pop-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_pop()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$stack </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">, </span><span style="color: #DD0000">"banana"</span><span style="color: #007700">, </span><span style="color: #DD0000">"apple"</span><span style="color: #007700">, </span><span style="color: #DD0000">"raspberry"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$fruit </span><span style="color: #007700">= </span><span style="color: #9876AA">array_pop</span><span style="color: #007700">(</span><span style="color: #9876AA">$stack</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$stack</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     经过此操作后，<var class="varname">$stack</var> 将只有 3 个单元：    </p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; orange<br>    [1] =&gt; banana<br>    [2] =&gt; apple<br>)<br></span></div>    </div>    <div class="example-contents"><p>     并且 <span>raspberry</span> 将被赋给 <var class="varname">$fruit</var>。    </p></div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-pop-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_push()} - 将一个或多个单元压入数组的末尾（入栈）</span></li>    <li class="member"><span class="function">{@link array_shift()} - 将数组开头的单元移出数组</span></li>    <li class="member"><span class="function">{@link array_unshift()} - 在数组开头插入一个或多个单元</span></li>   </ul>  </span> </div>  </div>
 * @return mixed|null the last value of array.*/
function array_pop(array &$array): mixed {}

/**
*<div id="function.array-shift" class="refentry">   <div class="refnamediv">    <h1 class="refname">array_shift</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_shift</span> &mdash; <span class="dc-title">     将数组开头的单元移出数组    </span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-shift-description">  <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description">      <span class="methodname" style="color:#CC7832"><strong>array_shift</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$array</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>    <p class="para rdfs-comment">     <span class="function"><strong style="color:#CC7832">array_shift()</strong></span> 将     <span class="parameter" style="color:#3A95FF">array</span> 的第一个单元移出并作为结果返回，将     <span class="parameter" style="color:#3A95FF">array</span> 的长度减一并将所有其它单元向前移动一位。所有的数字键名将改为从零开始计数，文字键名将不变。    </p>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">使用此函数后会重置（<span class="function">{@link reset()}</span>）<span class="type" style="color:#EAB766">array</span>指针。</span></p></blockquote>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-shift-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-shift-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回移出的值，如果 <span class="parameter" style="color:#3A95FF">array</span> 为 空或不是一个数组则返回 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-shift-examples">  <h3 class="title">示例</h3>  <span>    <div class="example" id="">     <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_shift()</strong></span> 例子</strong></p>     <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$stack </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">, </span><span style="color: #DD0000">"banana"</span><span style="color: #007700">, </span><span style="color: #DD0000">"apple"</span><span style="color: #007700">, </span><span style="color: #DD0000">"raspberry"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$fruit </span><span style="color: #007700">= </span><span style="color: #9876AA">array_shift</span><span style="color: #007700">(</span><span style="color: #9876AA">$stack</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$stack</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>     </div>     <div class="example-contents"><p>以上示例会输出：</p></div>     <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; banana<br>    [1] =&gt; apple<br>    [2] =&gt; raspberry<br>)<br></span></div>     </div>     <div class="example-contents"><p>      并且 <span>orange</span> 被赋给了 <var class="varname">$fruit</var>。     </p></div>    </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-shift-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_unshift()} - 在数组开头插入一个或多个单元</span></li>    <li class="member"><span class="function">{@link array_push()} - 将一个或多个单元压入数组的末尾（入栈）</span></li>    <li class="member"><span class="function">{@link array_pop()} - 弹出数组最后一个单元（出栈）</span></li>   </ul>  </span> </div>  </div>
 * @return mixed|null the shifted value, or null if array is*/
function array_shift(array &$array): mixed {}

/**
*<div id="function.array-unshift" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_unshift</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_unshift</span> &mdash; <span class="dc-title">在数组开头插入一个或多个单元</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-unshift-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_unshift</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$values</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">array_unshift()</strong></span> 将传入的单元插入到 <span class="parameter" style="color:#3A95FF">array</span>   数组的开头。注意单元是作为整体被插入的，因此传入单元将保持同样的顺序。所有的数值键名将修改为从零开始重新计数，所有的文字键名保持不变。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">    重置数组中的内部指针，指向第一个元素。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-unshift-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">values</span></dt>     <dd>      <p class="para">       插入的变量。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-unshift-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span class="parameter" style="color:#3A95FF">array</span> 数组新的单元数目。  </p> </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-unshift-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.3.0</td>       <td>        现在可以只用一个参数来调用，之前至少需要两个参数。       </td>      </tr>     </tbody>       </table>  </span> </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-unshift-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_unshift()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$queue </span><span style="color: #007700">= [<br />    </span><span style="color: #DD0000">"orange"</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">"banana"<br /></span><span style="color: #007700">];<br /><br /></span><span style="color: #9876AA">array_unshift</span><span style="color: #007700">(</span><span style="color: #9876AA">$queue</span><span style="color: #007700">, </span><span style="color: #DD0000">"apple"</span><span style="color: #007700">, </span><span style="color: #DD0000">"raspberry"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$queue</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(4) {<br>  [0] =&gt;<br>  string(5) &quot;apple&quot;<br>  [1] =&gt;<br>  string(9) &quot;raspberry&quot;<br>  [2] =&gt;<br>  string(6) &quot;orange&quot;<br>  [3] =&gt;<br>  string(6) &quot;banana&quot;<br>}<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 关联数组用法</strong></p>    <div class="example-contents"><p>     如果一个关联数组添加到另一个关联数组开头，则添加到开头的数组将数字索引到前者的数组中。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$foods </span><span style="color: #007700">= [<br />    </span><span style="color: #DD0000">'apples' </span><span style="color: #007700">=&gt; [<br />        </span><span style="color: #DD0000">'McIntosh' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'red'</span><span style="color: #007700">,<br />        </span><span style="color: #DD0000">'Granny Smith' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'green'</span><span style="color: #007700">,<br />    ],<br />    </span><span style="color: #DD0000">'oranges' </span><span style="color: #007700">=&gt; [<br />        </span><span style="color: #DD0000">'Navel' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'orange'</span><span style="color: #007700">,<br />        </span><span style="color: #DD0000">'Valencia' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'orange'</span><span style="color: #007700">,<br />    ],<br />];<br /></span><span style="color: #9876AA">$vegetables </span><span style="color: #007700">= [<br />    </span><span style="color: #DD0000">'lettuce' </span><span style="color: #007700">=&gt; [<br />        </span><span style="color: #DD0000">'Iceberg' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'green'</span><span style="color: #007700">,<br />        </span><span style="color: #DD0000">'Butterhead' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'green'</span><span style="color: #007700">,<br />    ],<br />    </span><span style="color: #DD0000">'carrots' </span><span style="color: #007700">=&gt; [<br />        </span><span style="color: #DD0000">'Deep Purple Hybrid' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'purple'</span><span style="color: #007700">,<br />        </span><span style="color: #DD0000">'Imperator' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'orange'</span><span style="color: #007700">,<br />    ],<br />    </span><span style="color: #DD0000">'cucumber' </span><span style="color: #007700">=&gt; [<br />        </span><span style="color: #DD0000">'Kirby' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'green'</span><span style="color: #007700">,<br />        </span><span style="color: #DD0000">'Gherkin' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'green'</span><span style="color: #007700">,<br />    ],<br />];<br /><br /></span><span style="color: #9876AA">array_unshift</span><span style="color: #007700">(</span><span style="color: #9876AA">$foods</span><span style="color: #007700">, </span><span style="color: #9876AA">$vegetables</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$foods</span><span style="color: #007700">);</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(3) {<br>  [0] =&gt;<br>  array(3) {<br>    &#039;lettuce&#039; =&gt;<br>    array(2) {<br>      &#039;Iceberg&#039; =&gt;<br>      string(5) &quot;green&quot;<br>      &#039;Butterhead&#039; =&gt;<br>      string(5) &quot;green&quot;<br>    }<br>    &#039;carrots&#039; =&gt;<br>    array(2) {<br>      &#039;Deep Purple Hybrid&#039; =&gt;<br>      string(6) &quot;purple&quot;<br>      &#039;Imperator&#039; =&gt;<br>      string(6) &quot;orange&quot;<br>    }<br>    &#039;cucumber&#039; =&gt;<br>    array(2) {<br>      &#039;Kirby&#039; =&gt;<br>      string(5) &quot;green&quot;<br>      &#039;Gherkin&#039; =&gt;<br>      string(5) &quot;green&quot;<br>    }<br>  }<br>  &#039;apples&#039; =&gt;<br>  array(2) {<br>    &#039;McIntosh&#039; =&gt;<br>    string(3) &quot;red&quot;<br>    &#039;Granny Smith&#039; =&gt;<br>    string(5) &quot;green&quot;<br>  }<br>  &#039;oranges&#039; =&gt;<br>  array(2) {<br>    &#039;Navel&#039; =&gt;<br>    string(6) &quot;orange&quot;<br>    &#039;Valencia&#039; =&gt;<br>    string(6) &quot;orange&quot;<br>  }<br>}<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-unshift-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_merge()} - 合并一个或多个数组</span></li>    <li class="member"><span class="function">{@link array_shift()} - 将数组开头的单元移出数组</span></li>    <li class="member"><span class="function">{@link array_push()} - 将一个或多个单元压入数组的末尾（入栈）</span></li>    <li class="member"><span class="function">{@link array_pop()} - 弹出数组最后一个单元（出栈）</span></li>   </ul>  </span> </div>  </div>
 * @return int the number of elements in the array.*/
function array_unshift(array &$array, #[PhpStormStubsElementAvailable(from: '5.3', to: '7.2')] $values, mixed ...$values): int {}

/**
*<div id="function.array-splice" class="refentry">   <div class="refnamediv">    <h1 class="refname">array_splice</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_splice</span> &mdash; <span class="dc-title">     去掉数组中的某一部分并用其它值取代    </span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-splice-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_splice</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">&$array</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$length</span><span class="initializer"> = <strong><span>null</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$replacement</span><span class="initializer"> = []</span></span><br>): <span class="type" style="color:#EAB766">array</span></div>    <p class="para rdfs-comment">     把 <span class="parameter" style="color:#3A95FF">array</span> 数组中由     <span class="parameter" style="color:#3A95FF">offset</span> 和 <span class="parameter" style="color:#3A95FF">length</span>     指定的单元去掉，如果提供了 <span class="parameter" style="color:#3A95FF">replacement</span> 参数，则用其中的单元取代。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <p class="para">       <span class="parameter" style="color:#3A95FF">array</span> 中的数字键名不被保留。    </p>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    如果 <span class="parameter" style="color:#3A95FF">replacement</span> 不是数组，会被    <a href="https://www.php.net/manual/zh/language.types.array.php#language.types.array.casting" class="link">类型转换</a>   成数组 (例如： <span>(array) $replacement</span>)。    当传入的 <span class="parameter" style="color:#3A95FF">replacement</span> 是个对象或者 <strong><span>null</span></strong>，会导致未知的行为出现。    </span>  </p></blockquote>  </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-splice-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">offset</span> 为正，则从 <span class="parameter" style="color:#3A95FF">array</span>     数组中该值指定的偏移量开始移除。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">offset</span>     为负，则从 <span class="parameter" style="color:#3A95FF">array</span> 末尾倒数该值指定的偏移量开始移除。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">length</span></dt>     <dd>      <p class="para">       如果省略 <span class="parameter" style="color:#3A95FF">length</span>，则移除数组中从 <span class="parameter" style="color:#3A95FF">offset</span>     到结尾的所有部分。      </p>      <p class="para">       如果指定了 <span class="parameter" style="color:#3A95FF">length</span>     并且为正值，则移除这么多单元。      </p>      <p class="para">       如果指定了 <span class="parameter" style="color:#3A95FF">length</span>     并且为负值，则移除部分停止于数组末尾该数量的单元。      </p>      <p class="para">      如果设置了 <span class="parameter" style="color:#3A95FF">length</span> 为零，不会移除单元。      </p>      <div class="tip"><strong class="tip">小技巧</strong>       <p class="para">        当给出了      <span class="parameter" style="color:#3A95FF">replacement</span> 时要移除从 <span class="parameter" style="color:#3A95FF">offset</span>      到数组末尾所有单元时，用 <span>count($input)</span> 作为 <span class="parameter" style="color:#3A95FF">length</span>。       </p>      </div>     </dd>             <dt><span class="parameter" style="color:#3A95FF">replacement</span></dt>     <dd>      <p class="para">       如果给出了 <span class="parameter" style="color:#3A95FF">replacement</span> 数组，则被移除的单元被此数组中的单元替代。      </p>      <p class="para">       如果        <span class="parameter" style="color:#3A95FF">offset</span> 和 <span class="parameter" style="color:#3A95FF">length</span>        的组合结果是不会移除任何值，则 <span class="parameter" style="color:#3A95FF">replacement</span>        数组中的单元将被插入到 <span class="parameter" style="color:#3A95FF">offset</span>        指定的位置。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        不保留替换数组 <span class="parameter" style="color:#3A95FF">replacement</span> 中的键名。        </p>      </p></blockquote>      <p class="para">       如果用来替换 <span class="parameter" style="color:#3A95FF">replacement</span> 只有一个单元，那么不需要给它加上        <span>array()</span> 或方括号，除非该单元本身就是一个数组、一个对象或者 <strong><span>null</span></strong>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-splice-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    返回一个包含有被移除单元的数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-splice-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">length</span> 现在可为空（nullable）。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-splice-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_splice()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$input </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"red"</span><span style="color: #007700">, </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">, </span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_splice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$input </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"red"</span><span style="color: #007700">, </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">, </span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_splice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$input </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"red"</span><span style="color: #007700">, </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">, </span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_splice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">), </span><span style="color: #DD0000">"orange"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$input </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"red"</span><span style="color: #007700">, </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">, </span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_splice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, array(</span><span style="color: #DD0000">"black"</span><span style="color: #007700">, </span><span style="color: #DD0000">"maroon"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(2) {<br>  [0]=&gt;<br>  string(3) &quot;red&quot;<br>  [1]=&gt;<br>  string(5) &quot;green&quot;<br>}<br>array(2) {<br>  [0]=&gt;<br>  string(3) &quot;red&quot;<br>  [1]=&gt;<br>  string(6) &quot;yellow&quot;<br>}<br>array(2) {<br>  [0]=&gt;<br>  string(3) &quot;red&quot;<br>  [1]=&gt;<br>  string(6) &quot;orange&quot;<br>}<br>array(5) {<br>  [0]=&gt;<br>  string(3) &quot;red&quot;<br>  [1]=&gt;<br>  string(5) &quot;green&quot;<br>  [2]=&gt;<br>  string(4) &quot;blue&quot;<br>  [3]=&gt;<br>  string(5) &quot;black&quot;<br>  [4]=&gt;<br>  string(6) &quot;maroon&quot;<br>}<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 几个以不同表达式实现相同效果的 <span class="function"><strong style="color:#CC7832">array_splice()</strong></span> 例子</strong></p>    <div class="example-contents"><p>     以下表达式是相同的：    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">// 添加两个新元素到 $input<br /></span><span style="color: #9876AA">array_push</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">$x</span><span style="color: #007700">, </span><span style="color: #9876AA">$y</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_splice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">), </span><span style="color: #9876AA">0</span><span style="color: #007700">, array(</span><span style="color: #9876AA">$x</span><span style="color: #007700">, </span><span style="color: #9876AA">$y</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// 移除 $input 中的最后一个元素<br /></span><span style="color: #9876AA">array_pop</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_splice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 移除 $input 中第一个元素<br /></span><span style="color: #9876AA">array_shift</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_splice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 在 $input 的开头插入一个元素<br /></span><span style="color: #9876AA">array_unshift</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">$x</span><span style="color: #007700">, </span><span style="color: #9876AA">$y</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">array_splice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, array(</span><span style="color: #9876AA">$x</span><span style="color: #007700">, </span><span style="color: #9876AA">$y</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// 在 $input 的索引 $x 处替换值<br /></span><span style="color: #9876AA">$input</span><span style="color: #007700">[</span><span style="color: #9876AA">$x</span><span style="color: #007700">] = </span><span style="color: #9876AA">$y</span><span style="color: #007700">; </span><span style="color: #FF8000">// 对于键名和偏移量等值的数组<br /></span><span style="color: #9876AA">array_splice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">$x</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">$y</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-splice-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_merge()} - 合并一个或多个数组</span></li>    <li class="member"><span class="function">{@link array_slice()} - 从数组中取出一段</span></li>    <li class="member"><span class="function">{@link unset()} - 清除指定变量</span></li>   </ul>  </span> </div>  </div>
 * @return array the array consisting of the extracted elements.*/
function array_splice(array &$array, int $offset, ?int $length, mixed $replacement = []): array {}

/**
*<div id="function.array-slice" class="refentry">   <div class="refnamediv">    <h1 class="refname">array_slice</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_slice</span> &mdash; <span class="dc-title">从数组中取出一段</span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-slice-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_slice</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$length</span><span class="initializer"> = <strong><span>null</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$preserve_keys</span><span class="initializer"> = <strong><span>false</span></strong></span></span><br>): <span class="type" style="color:#EAB766">array</span></div>    <p class="para rdfs-comment">     <span class="function"><strong style="color:#CC7832">array_slice()</strong></span> 返回根据 <span class="parameter" style="color:#3A95FF">offset</span> 和     <span class="parameter" style="color:#3A95FF">length</span> 参数所指定的 <span class="parameter" style="color:#3A95FF">array</span>     数组中的一段序列。    </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-slice-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">        如果 <span class="parameter" style="color:#3A95FF">offset</span> 非负，则序列将从 <span class="parameter" style="color:#3A95FF">array</span>     中的此偏移量开始。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">offset</span> 为负，则序列将从     <span class="parameter" style="color:#3A95FF">array</span> 中距离末端这么远的地方开始。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        参数 <span class="parameter" style="color:#3A95FF">offset</span> 标识的是数组中的位置，而不是键。       </p>      </p></blockquote>     </dd>             <dt><span class="parameter" style="color:#3A95FF">length</span></dt>     <dd>      <p class="para">       如果给出了 <span class="parameter" style="color:#3A95FF">length</span> 并且为正，则序列中将具有这么多的单元。      </p>      <p class="para">       如果 array 比 <span class="parameter" style="color:#3A95FF">length</span> 要短，只会保留有效的数组单元。      </p>      <p class="para">如果给出了     <span class="parameter" style="color:#3A95FF">length</span> 并且为负，则序列将终止在距离数组末端这么远的地方。      </p>      <p class="para">如果省略，则序列将从     <span class="parameter" style="color:#3A95FF">offset</span> 开始一直到 <span class="parameter" style="color:#3A95FF">array</span> 的末端。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">preserve_keys</span></dt>     <dd>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:       <p class="para">        注意 <span class="function"><strong style="color:#CC7832">array_slice()</strong></span> 默认会重新排序并重置数组的数字索引。你可以通过将     <span class="parameter" style="color:#3A95FF">preserve_keys</span> 设为 <strong><span>true</span></strong> 来改变此行为。       无论本参数如何设置，都会保留字符串的键。      </p>      </p></blockquote>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-slice-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回其中一段。 如果 offset 参数大于 array 尺寸，就会返回空的 array。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-slice-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_slice()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$input </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b"</span><span style="color: #007700">, </span><span style="color: #DD0000">"c"</span><span style="color: #007700">, </span><span style="color: #DD0000">"d"</span><span style="color: #007700">, </span><span style="color: #DD0000">"e"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$output </span><span style="color: #007700">= </span><span style="color: #9876AA">array_slice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">);      </span><span style="color: #FF8000">// 返回 "c"， "d" 和 "e"<br /></span><span style="color: #9876AA">$output </span><span style="color: #007700">= </span><span style="color: #9876AA">array_slice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, -</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">);  </span><span style="color: #FF8000">// 返回 "d"<br /></span><span style="color: #9876AA">$output </span><span style="color: #007700">= </span><span style="color: #9876AA">array_slice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">);   </span><span style="color: #FF8000">// 返回 "a"， "b" 和 "c"<br /><br />// 注意数组中 key 的不同<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_slice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_slice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; c<br>    [1] =&gt; d<br>)<br>Array<br>(<br>    [2] =&gt; c<br>    [3] =&gt; d<br>)<br></span></div>    </div>   </div>  </span>    <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">array_slice()</strong></span> 于索引从 1 开始的 array</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$input </span><span style="color: #007700">= array(</span><span style="color: #9876AA">1 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"a"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b"</span><span style="color: #007700">, </span><span style="color: #DD0000">"c"</span><span style="color: #007700">, </span><span style="color: #DD0000">"d"</span><span style="color: #007700">, </span><span style="color: #DD0000">"e"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_slice</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; b<br>    [1] =&gt; c<br>)<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3 <span class="function"><strong style="color:#CC7832">array_slice()</strong></span> 与混合类型键的 array</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$ar </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'a'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">, </span><span style="color: #DD0000">'b'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'banana'</span><span style="color: #007700">, </span><span style="color: #DD0000">'42'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'pear'</span><span style="color: #007700">, </span><span style="color: #DD0000">'d'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'orange'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_slice</span><span style="color: #007700">(</span><span style="color: #9876AA">$ar</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_slice</span><span style="color: #007700">(</span><span style="color: #9876AA">$ar</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [a] =&gt; apple<br>    [b] =&gt; banana<br>    [0] =&gt; pear<br>)<br>Array<br>(<br>    [a] =&gt; apple<br>    [b] =&gt; banana<br>    [42] =&gt; pear<br>)<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-slice-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_splice()} - 去掉数组中的某一部分并用其它值取代</span></li>    <li class="member"><span class="function">{@link unset()} - 清除指定变量</span></li>    <li class="member"><span class="function">{@link array_chunk()} - 将一个数组分割成多个</span></li>   </ul>  </span> </div></div>
 * @return array the slice.*/
function array_slice(array $array, int $offset, ?int $length, bool $preserve_keys = false): array {}

/**
*<div id="function.array-merge" class="refentry">   <div class="refnamediv">    <h1 class="refname">array_merge</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_merge</span> &mdash; <span class="dc-title">合并一个或多个数组</span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-merge-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_merge</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$arrays</span></span>): <span class="type" style="color:#EAB766">array</span></div>    <p class="para rdfs-comment">     将一个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。    </p>    <p class="para">     如果输入的数组中有相同的字符串键名，则该键名后面的值将覆盖前一个值。然而，如果数组包含数字键名，后面的值将     <strong>不会</strong> 覆盖原来的值，而是附加到后面。    </p>    <p class="para">     如果输入的数组存在以数字作为索引的内容，则这项内容的键名会以连续方式重新索引。    </p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-merge-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">arrays</span></dt>     <dd>      <p class="para">       要合并的数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-merge-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回合并后的结果数组。如果参数为空，则返回空 <span class="type" style="color:#EAB766">array</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-merge-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.4.0</td>       <td>        允许不带参数调用，之前版本至少需要一个参数。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-merge-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_merge()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array1 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"color" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"red"</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b"</span><span style="color: #007700">, </span><span style="color: #DD0000">"color" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"shape" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"trapezoid"</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">array_merge</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">, </span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [color] =&gt; green<br>    [0] =&gt; 2<br>    [1] =&gt; 4<br>    [2] =&gt; a<br>    [3] =&gt; b<br>    [shape] =&gt; trapezoid<br>    [4] =&gt; 4<br>)<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 单一结构的 <span class="function"><strong style="color:#CC7832">array_merge()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array1 </span><span style="color: #007700">= array();<br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #9876AA">1 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"data"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">array_merge</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">, </span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     别忘了数字键名将会被重新编号！    </p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; data<br>)<br></span></div>    </div>    <div class="example-contents"><p>     如果你想完全保留原有数组并只想新的数组附加到后面，可以使用     <span>+</span> 运算符：    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array1 </span><span style="color: #007700">= array(</span><span style="color: #9876AA">0 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'zero_a'</span><span style="color: #007700">, </span><span style="color: #9876AA">2 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'two_a'</span><span style="color: #007700">, </span><span style="color: #9876AA">3 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'three_a'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #9876AA">1 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'one_b'</span><span style="color: #007700">, </span><span style="color: #9876AA">3 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'three_b'</span><span style="color: #007700">, </span><span style="color: #9876AA">4 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'four_b'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$array1 </span><span style="color: #007700">+ </span><span style="color: #9876AA">$array2</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     第一个数组的键名将会被保留。在两个数组中存在相同的键名时，第一个数组中的同键名的元素将会被保留，第二个数组中的元素将会被忽略。    </p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(5) {<br>  [0]=&gt;<br>  string(6) &quot;zero_a&quot;<br>  [2]=&gt;<br>  string(5) &quot;two_a&quot;<br>  [3]=&gt;<br>  string(7) &quot;three_a&quot;<br>  [1]=&gt;<br>  string(5) &quot;one_b&quot;<br>  [4]=&gt;<br>  string(6) &quot;four_b&quot;<br>}<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3 <span class="function"><strong style="color:#CC7832">array_merge()</strong></span> 合并非数组的类型</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$beginning </span><span style="color: #007700">= </span><span style="color: #DD0000">'foo'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$end </span><span style="color: #007700">= array(</span><span style="color: #9876AA">1 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">array_merge</span><span style="color: #007700">((array)</span><span style="color: #9876AA">$beginning</span><span style="color: #007700">, (array)</span><span style="color: #9876AA">$end</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">    <div class="cdata"><span>    Array<br>    (<br>        [0] =&gt; foo<br>        [1] =&gt; bar<br>    )<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-merge-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_merge_recursive()} - 递归地合并一个或多个数组</span></li>    <li class="member"><span class="function">{@link array_replace()} - 使用传递的数组替换第一个数组的元素</span></li>    <li class="member"><span class="function">{@link array_combine()} - 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.operators.array.php" class="link">数组操作符</a></li>   </ul>  </span> </div></div>
 * @return array the resulting array.*/
function array_merge(
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.3')] $array,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.0')] $arrays,
    array ...$arrays
): array {}
