<?php

namespace {
    use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;

/**
*<div id="function.array" class="refentry">   <div class="refnamediv">    <h1 class="refname">array</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array</span> &mdash; <span class="dc-title">     新建一个数组    </span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$values</span></span>): <span class="type" style="color:#EAB766">array</span></div>    <p class="para rdfs-comment">     创建一个数组。关于数组是什么的信息请阅读<a href="https://www.php.net/manual/zh/language.types.array.php" class="link">数组</a>一节。    </p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">values</span></dt>     <dd>    <p class="para">     语法“index =&gt; values”，用逗号分开，定义了索引和值。索引可以是字符串或数字。如果省略了索引，会自动产生从     0 开始的整数索引。如果索引是整数，则下一个产生的索引将是目前最大的整数索引     + 1。注意如果定义了两个完全一样的索引，则后面一个会覆盖前一个。    </p>    <p class="para">     在最后一个定义的数组项目之后加一个逗号虽然不常见，却是合法的语法。    </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">     返回根据参数建立的数组。参数可以用 <span>=&gt;</span>     运算符给出索引。关于数组是什么的信息请阅读<a href="https://www.php.net/manual/zh/language.types.array.php" class="link">数组</a>一节。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-examples">  <h3 class="title">示例</h3>  <span>     下面的例子演示了怎样建立一个二维数组，怎样给相应的数组指定键名，以及怎样在普通数组中略过和继续数字索引。   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array()</strong></span>  例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fruits </span><span style="color: #007700">= array (<br />    </span><span style="color: #DD0000">"fruits"  </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"orange"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"banana"</span><span style="color: #007700">, </span><span style="color: #DD0000">"c" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"apple"</span><span style="color: #007700">),<br />    </span><span style="color: #DD0000">"numbers" </span><span style="color: #007700">=&gt; array(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #9876AA">6</span><span style="color: #007700">),<br />    </span><span style="color: #DD0000">"holes"   </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">"first"</span><span style="color: #007700">, </span><span style="color: #9876AA">5 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"second"</span><span style="color: #007700">, </span><span style="color: #DD0000">"third"</span><span style="color: #007700">)<br />);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2  <span class="function"><strong style="color:#CC7832">array()</strong></span> 的自动索引</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array </span><span style="color: #007700">= array(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">,  </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">8 </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">,  </span><span style="color: #9876AA">4 </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">19</span><span style="color: #007700">, </span><span style="color: #9876AA">3 </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">13</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; 1<br>    [1] =&gt; 1<br>    [2] =&gt; 1<br>    [3] =&gt; 13<br>    [4] =&gt; 1<br>    [8] =&gt; 1<br>    [9] =&gt; 19<br>)<br></span></div>    </div>   </div>  </p>  <p class="para">     注意索引 3 被定义了两次，保留了最后的值 13。索引 4 在 索引     8 之后定义，下一个自动生成的索引（值为 19 那个）为 9，因为最大的索引是 8。  </p>  <p class="para">   本例建立了从 1 开始的数组。   <div class="example" id="">    <p><strong>示例 #3 从 1 开始索引的 <span class="function"><strong style="color:#CC7832">array()</strong></span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$firstquarter </span><span style="color: #007700">= array(</span><span style="color: #9876AA">1 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'January'</span><span style="color: #007700">, </span><span style="color: #DD0000">'February'</span><span style="color: #007700">, </span><span style="color: #DD0000">'March'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$firstquarter</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [1] =&gt; January<br>    [2] =&gt; February<br>    [3] =&gt; March<br>)<br></span></div>    </div>   </div>  </p>  <p class="para">   在 Perl 中，可以访问在双引号内的数组的值。但在 PHP     中需要将数组用花括号括起来。   <div class="example" id="">    <p><strong>示例 #4 访问双引号内的数组</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$foo </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'bar' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'baz'</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"Hello </span><span style="color: #007700">{</span><span style="color: #9876AA">$foo</span><span style="color: #007700">[</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">]}</span><span style="color: #DD0000">!"</span><span style="color: #007700">; </span><span style="color: #FF8000">// Hello baz!<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-notes">  <h3 class="title">注释</h3>  <p class="para">   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <p class="para">      <span class="function"><strong style="color:#CC7832">array()</strong></span> 是一个语言结构，用于字面上表示数组，不是常规的函数。    </p>   </p></blockquote>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_pad()} - 以指定长度将一个值填充进数组</span></li>    <li class="member"><span class="function">{@link list()} - 把数组中的值赋给一组变量</span></li>    <li class="member"><span class="function">{@link count()} - 统计数组、Countable 对象中所有元素的数量</span></li>    <li class="member"><span class="function">{@link range()} - 根据范围创建数组，包含指定的元素</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/control-structures.foreach.php" class="link">foreach</a></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.types.array.php" class="link">array</a> 类型</li>   </ul>  </span> </div>  </div>
     * @return array an array of the parameters. The parameters can be given an index with the => operator.*/
    function PS_UNRESERVE_PREFIX_array(...$_) {}

/**
*<div id="function.list" class="refentry">   <div class="refnamediv">    <h1 class="refname">list</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">list</span> &mdash; <span class="dc-title">把数组中的值赋给一组变量 </span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.list-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>list</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$var</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$vars</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">array</span></div>    <p class="para rdfs-comment">     像 <span class="function">{@link array()}</span> 一样，这不是真正的函数，而是语言结构。     <span class="function"><strong style="color:#CC7832">list()</strong></span> 可以在单次操作内为一组变量赋值。字符串不能解包且     <span class="function"><strong style="color:#CC7832">list()</strong></span> 表达式不能完全为空。    </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    在 PHP 7.1.0 之前的版本，<span class="function"><strong style="color:#CC7832">list()</strong></span> 仅能用于数字索引的数组，并假定数字索引从 0 开始。   </p>  </p></blockquote>   </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.list-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">var</span></dt>     <dd>      <p class="para">       一个变量。      </p>     </dd>       </dl>   <dl>         <dt><span class="parameter" style="color:#3A95FF">vars</span></dt>     <dd>      <p class="para">       更多变量。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.list-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回指定的数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.list-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.3.0</td>       <td>        支持在数组解构时传引用。       </td>      </tr>      <tr>       <td>7.1.0</td>       <td>        现在可以指定 <span class="function"><strong style="color:#CC7832">list()</strong></span> 中的键。        这就可以解构非数字键或者无顺序的数组。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.list-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">list()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$info </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'coffee'</span><span style="color: #007700">, </span><span style="color: #DD0000">'brown'</span><span style="color: #007700">, </span><span style="color: #DD0000">'caffeine'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 列出所有变量<br /></span><span style="color: #007700">list(</span><span style="color: #9876AA">$drink</span><span style="color: #007700">, </span><span style="color: #9876AA">$color</span><span style="color: #007700">, </span><span style="color: #9876AA">$power</span><span style="color: #007700">) = </span><span style="color: #9876AA">$info</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$drink</span><span style="color: #DD0000"> is </span><span style="color: #9876AA">$color</span><span style="color: #DD0000"> and </span><span style="color: #9876AA">$power</span><span style="color: #DD0000"> makes it special.\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 列出他们的其中一个<br /></span><span style="color: #007700">list(</span><span style="color: #9876AA">$drink</span><span style="color: #007700">, , </span><span style="color: #9876AA">$power</span><span style="color: #007700">) = </span><span style="color: #9876AA">$info</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$drink</span><span style="color: #DD0000"> has </span><span style="color: #9876AA">$power</span><span style="color: #DD0000">.\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 或者让我们跳到仅第三个<br /></span><span style="color: #007700">list( , , </span><span style="color: #9876AA">$power</span><span style="color: #007700">) = </span><span style="color: #9876AA">$info</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"I need </span><span style="color: #9876AA">$power</span><span style="color: #DD0000">!\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// list() 不能对字符串起作用<br /></span><span style="color: #007700">list(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">) = </span><span style="color: #DD0000">"abcde"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">); </span><span style="color: #FF8000">// NULL<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">list()</strong></span> 用法的一个例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$pdo</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">query</span><span style="color: #007700">(</span><span style="color: #DD0000">"SELECT id, name FROM employees"</span><span style="color: #007700">);<br />while (list(</span><span style="color: #9876AA">$id</span><span style="color: #007700">, </span><span style="color: #9876AA">$name</span><span style="color: #007700">) = </span><span style="color: #9876AA">$result</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetch</span><span style="color: #007700">(</span><span style="color: #9876AA">PDO</span><span style="color: #007700">::</span><span style="color: #9876AA">FETCH_NUM</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"id: </span><span style="color: #9876AA">$id</span><span style="color: #DD0000">, name: </span><span style="color: #9876AA">$name</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3 使用嵌套的  <span class="function"><strong style="color:#CC7832">list()</strong></span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">list(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, list(</span><span style="color: #9876AA">$b</span><span style="color: #007700">, </span><span style="color: #9876AA">$c</span><span style="color: #007700">)) = array(</span><span style="color: #9876AA">1</span><span style="color: #007700">, array(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">, </span><span style="color: #9876AA">$c</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(1)<br>int(2)<br>int(3)<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #4 <span class="function"><strong style="color:#CC7832">list()</strong></span> 和索引顺序定义</strong></p>    <div class="example-contents"><p>     <span class="function"><strong style="color:#CC7832">list()</strong></span> 使用 array 索引的顺序和它何时定义无关。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$foo </span><span style="color: #007700">= array(</span><span style="color: #9876AA">2 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'a'</span><span style="color: #007700">, </span><span style="color: #DD0000">'foo' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'b'</span><span style="color: #007700">, </span><span style="color: #9876AA">0 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'c'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$foo</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">] = </span><span style="color: #DD0000">'d'</span><span style="color: #007700">;<br />list(</span><span style="color: #9876AA">$x</span><span style="color: #007700">, </span><span style="color: #9876AA">$y</span><span style="color: #007700">, </span><span style="color: #9876AA">$z</span><span style="color: #007700">) = </span><span style="color: #9876AA">$foo</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">, </span><span style="color: #9876AA">$x</span><span style="color: #007700">, </span><span style="color: #9876AA">$y</span><span style="color: #007700">, </span><span style="color: #9876AA">$z</span><span style="color: #007700">);</span></span></span></div>    </div>    <div class="example-contents"><p>     得到以下输出（注意比较 <span class="function"><strong style="color:#CC7832">list()</strong></span> 所写的元素顺序）：    </p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(4) {<br>  [2]=&gt;<br>  string(1) &quot;a&quot;<br>  [&quot;foo&quot;]=&gt;<br>  string(1) &quot;b&quot;<br>  [0]=&gt;<br>  string(1) &quot;c&quot;<br>  [1]=&gt;<br>  string(1) &quot;d&quot;<br>}<br>string(1) &quot;c&quot;<br>string(1) &quot;d&quot;<br>string(1) &quot;a&quot;<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #5 带键的 <span class="function"><strong style="color:#CC7832">list()</strong></span></strong></p>    <div class="example-contents"><p>     从 PHP 7.1.0 开始，<span class="function"><strong style="color:#CC7832">list()</strong></span> 可以包含显式的键，可赋值到任意表达式。     可以混合使用数字和字符串键。但是不能混合有键和无键不能混用。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$data </span><span style="color: #007700">= [<br />    [</span><span style="color: #DD0000">"id" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">"name" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Tom'</span><span style="color: #007700">],<br />    [</span><span style="color: #DD0000">"id" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #DD0000">"name" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Fred'</span><span style="color: #007700">],<br />];<br />foreach (</span><span style="color: #9876AA">$data </span><span style="color: #007700">as [</span><span style="color: #DD0000">"id" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$id</span><span style="color: #007700">, </span><span style="color: #DD0000">"name" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$name</span><span style="color: #007700">]) {<br />    echo </span><span style="color: #DD0000">"id: </span><span style="color: #9876AA">$id</span><span style="color: #DD0000">, name: </span><span style="color: #9876AA">$name</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br />echo </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />list(</span><span style="color: #9876AA">1 </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$second</span><span style="color: #007700">, </span><span style="color: #9876AA">3 </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$fourth</span><span style="color: #007700">) = [</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">];<br />echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$second</span><span style="color: #DD0000">, </span><span style="color: #9876AA">$fourth</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>id: 1, name: Tom<br>id: 2, name: Fred<br><br>2, 4<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.list-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link each()} - 返回数组中当前的键／值对并将数组指针向前移动一步</span></li>    <li class="member"><span class="function">{@link array()} - 新建一个数组</span></li>    <li class="member"><span class="function">{@link extract()} - 从数组中将变量导入到当前的符号表</span></li>   </ul>  </span> </div>  </div>
     * @return array the assigned array.*/
    function PS_UNRESERVE_PREFIX_list($var1, ...$_) {}

/**
*<div id="function.die" class="refentry"> <div class="refnamediv">  <h1 class="refname">die</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">die</span> &mdash; <span class="dc-title">等同于 <span class="function">{@link exit()}</span></span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.die-description">  <h3 class="title">说明</h3>  <p class="para">   语法结构等同于 <span class="function">{@link exit()}</span>。  </p> </div></div>
     * @return void*/
    function PS_UNRESERVE_PREFIX_die($status = "") {}

/**
*<div id="function.exit" class="refentry"> <div class="refnamediv">  <h1 class="refname">exit</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">exit</span> &mdash; <span class="dc-title">输出一个消息并且退出当前脚本</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.exit-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>exit</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$status</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><strong>exit</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$status</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   中止脚本的执行。   尽管调用了 <span class="function"><strong style="color:#CC7832">exit()</strong></span>，   {@link Shutdown函数}   以及 <a href="https://www.php.net/manual/zh/language.oop5.decon.php#language.oop5.decon.destructor" class="link">object destructors</a> 总是会被执行。  </p>  <p class="para">   <span>exit</span> 是个语法结构，如果没有 <span class="parameter" style="color:#3A95FF">status</span> 参数要传入，可以省略圆括号。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.exit-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">status</span></dt>     <dd>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">status</span> 是一个字符串，在退出之前该函数会打印       <span class="parameter" style="color:#3A95FF">status</span> 。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">status</span> 是一个 <span class="type" style="color:#EAB766">int</span>，该值会作为退出状态码，并且不会被打印输出。       退出状态码应该在范围0至254，不应使用被PHP保留的退出状态码255。        状态码0用于成功中止程序。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.exit-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.exit-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">exit()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$filename </span><span style="color: #007700">= </span><span style="color: #DD0000">'/path/to/data-file'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$file </span><span style="color: #007700">= </span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #9876AA">$filename</span><span style="color: #007700">, </span><span style="color: #DD0000">'r'</span><span style="color: #007700">)<br />    or exit(</span><span style="color: #DD0000">"unable to open file (</span><span style="color: #9876AA">$filename</span><span style="color: #DD0000">)"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">exit()</strong></span> 状态码例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">//exit program normally<br /></span><span style="color: #007700">exit;<br />exit();<br />exit(</span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//exit with an error code<br /></span><span style="color: #007700">exit(</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br />exit(</span><span style="color: #9876AA">0376</span><span style="color: #007700">); </span><span style="color: #FF8000">//octal<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3 无论如何，Shutdown函数与析构函数都会被执行</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo<br /></span><span style="color: #007700">{<br />    public function </span><span style="color: #9876AA">__destruct</span><span style="color: #007700">()<br />    {<br />        echo </span><span style="color: #DD0000">'Destruct: ' </span><span style="color: #007700">. </span><span style="color: #9876AA">__METHOD__ </span><span style="color: #007700">. </span><span style="color: #DD0000">'()' </span><span style="color: #007700">. </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    }<br />}<br /><br />function </span><span style="color: #9876AA">shutdown</span><span style="color: #007700">()<br />{<br />    echo </span><span style="color: #DD0000">'Shutdown: ' </span><span style="color: #007700">. </span><span style="color: #9876AA">__FUNCTION__ </span><span style="color: #007700">. </span><span style="color: #DD0000">'()' </span><span style="color: #007700">. </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$foo </span><span style="color: #007700">= new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">register_shutdown_function</span><span style="color: #007700">(</span><span style="color: #DD0000">'shutdown'</span><span style="color: #007700">);<br /><br />exit();<br />echo </span><span style="color: #DD0000">'This will not be output.'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"> <div class="cdata"><span> Shutdown: shutdown()<br> Destruct: Foo::__destruct()<br> </span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.exit-notes">  <h3 class="title">注释</h3>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">因为是语言构造器而不是函数，不能被<a href="https://www.php.net/manual/zh/functions.variable-functions.php" class="link">可变函数</a> 或者<a href="https://www.php.net/manual/zh/functions.arguments.php#functions.named-arguments" class="link">命名参数</a> 调用。</span></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    该语法结构等同于 <span class="function">{@link die()}</span>。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.exit-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link register_shutdown_function()} - 注册在关闭时执行的函数</span></li>   </ul>  </span> </div></div>
     * @return void*/
    function PS_UNRESERVE_PREFIX_exit($status = "") {}

/**
*<div id="function.empty" class="refentry"> <div class="refnamediv">  <h1 class="refname">empty</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">empty</span> &mdash; <span class="dc-title">检查变量是否为空</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.empty-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>empty</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$var</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   判断变量是否为是空。当变量不存在或者它的值等于   <strong><span>false</span></strong>，那么视为空。如果变量不存在，<span class="function"><strong style="color:#CC7832">empty()</strong></span> 不会产生警告。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.empty-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">var</span></dt>     <dd>      <p class="para">       待检查的变量      </p>      <p class="para">       没有警告会产生，哪怕变量并不存在。这意味着 <span class="function"><strong style="color:#CC7832">empty()</strong></span> 本质上与       <strong class="command">!isset($var) || $var == false</strong> 等价。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.empty-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   当 <span class="parameter" style="color:#3A95FF">var</span> 不存在、值为空、等于 0、为 false 时，返回 <strong><span>true</span></strong>。参阅 <a href="https://www.php.net/manual/zh/language.types.boolean.php#language.types.boolean.casting" class="link">转换为 boolean</a>。否则返回 <strong><span>false</span></strong>。   否则返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.empty-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1      一个简单的 <span class="function"><strong style="color:#CC7832">empty()</strong></span> 与 <span class="function">{@link isset()}</span> 的比较。    </strong></p>      <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$var </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 因为 $var 为空，所以计算结果为 true<br /></span><span style="color: #007700">if (empty(</span><span style="color: #9876AA">$var</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">'$var is either 0, empty, or not set at all'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// 因为 $var 已赋值，所以计算结果为 true<br /></span><span style="color: #007700">if (isset(</span><span style="color: #9876AA">$var</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">'$var is set even though it is empty'</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>  <div class="example" id="">   <p><strong>示例 #2 在字符串偏移量上使用 <span class="function"><strong style="color:#CC7832">empty()</strong></span></strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$expected_array_got_string </span><span style="color: #007700">= </span><span style="color: #DD0000">'somestring'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(empty(</span><span style="color: #9876AA">$expected_array_got_string</span><span style="color: #007700">[</span><span style="color: #DD0000">'some_key'</span><span style="color: #007700">]));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(empty(</span><span style="color: #9876AA">$expected_array_got_string</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(empty(</span><span style="color: #9876AA">$expected_array_got_string</span><span style="color: #007700">[</span><span style="color: #DD0000">'0'</span><span style="color: #007700">]));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(empty(</span><span style="color: #9876AA">$expected_array_got_string</span><span style="color: #007700">[</span><span style="color: #9876AA">0.5</span><span style="color: #007700">]));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(empty(</span><span style="color: #9876AA">$expected_array_got_string</span><span style="color: #007700">[</span><span style="color: #DD0000">'0.5'</span><span style="color: #007700">]));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(empty(</span><span style="color: #9876AA">$expected_array_got_string</span><span style="color: #007700">[</span><span style="color: #DD0000">'0 Mostel'</span><span style="color: #007700">]));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(false)<br>bool(false)<br>bool(false)<br>bool(true)<br>bool(true)<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.empty-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">因为是语言构造器而不是函数，不能被<a href="https://www.php.net/manual/zh/functions.variable-functions.php" class="link">可变函数</a> 或者<a href="https://www.php.net/manual/zh/functions.arguments.php#functions.named-arguments" class="link">命名参数</a> 调用。</span></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    当对一个不可见的对象属性使用 <span class="function"><strong style="color:#CC7832">empty()</strong></span> 时，如果存在    <a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.isset" class="link">__isset()</a> 方法，它将会被调用。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.empty-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link isset()} - 检测变量是否已声明并且其值不为 null</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.isset" class="link">__isset()</a></li>    <li class="member"><span class="function">{@link unset()} - 清除指定变量</span></li>    <li class="member"><span class="function">{@link array_key_exists()} - 检查数组里是否有指定的键名或索引</span></li>    <li class="member"><span class="function">{@link count()} - 统计数组、Countable 对象中所有元素的数量</span></li>     <li class="member"><span class="function">{@link strlen()} - 获取字符串长度</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/types.comparisons.php" class="link">类型比较表</a></li>   </ul>  </span> </div></div>
     * @return bool <p><b>FALSE</b> if var exists and has a non-empty, non-zero value. Otherwise returns <b>TRUE</b>.<p>*/
    function PS_UNRESERVE_PREFIX_empty($var) {}

/**
*<div id="function.isset" class="refentry">   <div class="refnamediv">    <h1 class="refname">isset</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">isset</span> &mdash; <span class="dc-title">检测变量是否已声明并且其值不为 <strong><span>null</span></strong></span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.isset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>isset</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$var</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$vars</span></span>): <span class="type" style="color:#EAB766">bool</span></div>    <p class="para rdfs-comment">   判断一个变量是否已设置,   即变量已被声明，且其值不为 <strong><span>null</span></strong>。  </p>  <p class="para">   如果一个变量已经被使用 <span class="function">{@link unset()}</span>    释放，它将不再被认为已设置。  </p>  <p class="para">   若使用 <span class="function"><strong style="color:#CC7832">isset()</strong></span>   测试一个被赋值为 <strong><span>null</span></strong> 的变量，将返回 <strong><span>false</span></strong>。   同时要注意的是 null 字符（<span>&quot;\0&quot;</span>）并不等同于   PHP 的  <strong><span>null</span></strong> 常量。  </p>    <p class="para">   如果一次传入多个参数，那么     <span class="function"><strong style="color:#CC7832">isset()</strong></span> 只有在全部参数都已被设置时返回 <strong><span>true</span></strong>。 计算过程从左至右，中途遇到未设置的变量时就会立即停止。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.isset-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">var</span></dt>     <dd>      <p class="para">       要检查的变量。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">vars</span></dt>     <dd>      <p class="para">       其他变量。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.isset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    如果 <span class="parameter" style="color:#3A95FF">var</span> 存在并且值不是 <strong><span>null</span></strong> 则返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.isset-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">isset()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$var </span><span style="color: #007700">= </span><span style="color: #DD0000">''</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 结果为 TRUE，所以后边的文本将被打印出来。<br /></span><span style="color: #007700">if (isset(</span><span style="color: #9876AA">$var</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"This var is set so I will print."</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// 在后边的例子中，我们将使用 var_dump 输出 isset() 的返回值。<br />// the return value of isset().<br /><br /></span><span style="color: #9876AA">$a </span><span style="color: #007700">= </span><span style="color: #DD0000">"test"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$b </span><span style="color: #007700">= </span><span style="color: #DD0000">"anothertest"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(isset(</span><span style="color: #9876AA">$a</span><span style="color: #007700">));      </span><span style="color: #FF8000">// TRUE<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(isset(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">)); </span><span style="color: #FF8000">// TRUE<br /><br /></span><span style="color: #007700">unset (</span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(isset(</span><span style="color: #9876AA">$a</span><span style="color: #007700">));     </span><span style="color: #FF8000">// FALSE<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(isset(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">)); </span><span style="color: #FF8000">// FALSE<br /><br /></span><span style="color: #9876AA">$foo </span><span style="color: #007700">= </span><span style="color: #9876AA">NULL</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(isset(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">));   </span><span style="color: #FF8000">// FALSE<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>  <p class="para">     这对于数组中的元素也同样有效：   <div class="informalexample">    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$a </span><span style="color: #007700">= array (</span><span style="color: #DD0000">'test' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">'hello' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">NULL</span><span style="color: #007700">, </span><span style="color: #DD0000">'pie' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'a' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(isset(</span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'test'</span><span style="color: #007700">]));            </span><span style="color: #FF8000">// TRUE<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(isset(</span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">]));             </span><span style="color: #FF8000">// FALSE<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(isset(</span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'hello'</span><span style="color: #007700">]));           </span><span style="color: #FF8000">// FALSE<br /><br />// 键 'hello' 的值等于 NULL，所以被认为是未置值的。<br />// 如果想检测 NULL 键值，可以试试下边的方法。 <br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_key_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'hello'</span><span style="color: #007700">, </span><span style="color: #9876AA">$a</span><span style="color: #007700">)); </span><span style="color: #FF8000">// TRUE<br /><br />// Checking deeper array values<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(isset(</span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'pie'</span><span style="color: #007700">][</span><span style="color: #DD0000">'a'</span><span style="color: #007700">]));        </span><span style="color: #FF8000">// TRUE<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(isset(</span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'pie'</span><span style="color: #007700">][</span><span style="color: #DD0000">'b'</span><span style="color: #007700">]));        </span><span style="color: #FF8000">// FALSE<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(isset(</span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'cake'</span><span style="color: #007700">][</span><span style="color: #DD0000">'a'</span><span style="color: #007700">][</span><span style="color: #DD0000">'b'</span><span style="color: #007700">]));  </span><span style="color: #FF8000">// FALSE<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p>  <div class="example" id="">   <p><strong>示例 #2 在字符串位移中使用 <span class="function"><strong style="color:#CC7832">isset()</strong></span></strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$expected_array_got_string </span><span style="color: #007700">= </span><span style="color: #DD0000">'somestring'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(isset(</span><span style="color: #9876AA">$expected_array_got_string</span><span style="color: #007700">[</span><span style="color: #DD0000">'some_key'</span><span style="color: #007700">]));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(isset(</span><span style="color: #9876AA">$expected_array_got_string</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(isset(</span><span style="color: #9876AA">$expected_array_got_string</span><span style="color: #007700">[</span><span style="color: #DD0000">'0'</span><span style="color: #007700">]));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(isset(</span><span style="color: #9876AA">$expected_array_got_string</span><span style="color: #007700">[</span><span style="color: #9876AA">0.5</span><span style="color: #007700">]));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(isset(</span><span style="color: #9876AA">$expected_array_got_string</span><span style="color: #007700">[</span><span style="color: #DD0000">'0.5'</span><span style="color: #007700">]));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(isset(</span><span style="color: #9876AA">$expected_array_got_string</span><span style="color: #007700">[</span><span style="color: #DD0000">'0 Mostel'</span><span style="color: #007700">]));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>bool(true)<br>bool(true)<br>bool(true)<br>bool(false)<br>bool(false)<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.isset-notes">  <h3 class="title">注释</h3>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">      <span class="function"><strong style="color:#CC7832">isset()</strong></span>       只能用于变量，因为传递任何其它参数都将造成解析错误。若想检测<a href="https://www.php.net/manual/zh/language.constants.php" class="link">常量</a>是否已设置，可使用       <span class="function">{@link defined()}</span> 函数。   </p>  </div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">因为是语言构造器而不是函数，不能被<a href="https://www.php.net/manual/zh/functions.variable-functions.php" class="link">可变函数</a> 或者<a href="https://www.php.net/manual/zh/functions.arguments.php#functions.named-arguments" class="link">命名参数</a> 调用。</span></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    如果使用 <span class="function"><strong style="color:#CC7832">isset()</strong></span> 来检查对象无法访问的属性，如果 <a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.isset" class="link">__isset()</a>    方法已经定义则会调用这个重载方法。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.isset-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link empty()} - 检查变量是否为空</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.isset" class="link">__isset()</a></li>    <li class="member"><span class="function">{@link unset()} - 清除指定变量</span></li>    <li class="member"><span class="function">{@link defined()} - 检查某个名称的常量是否存在</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/types.comparisons.php" class="link">the type comparison tables</a></li>    <li class="member"><span class="function">{@link array_key_exists()} - 检查数组里是否有指定的键名或索引</span></li>    <li class="member"><span class="function">{@link is_null()} - 检测变量是否是 null</span></li>    <li class="member">错误控制      <a href="https://www.php.net/manual/zh/language.operators.errorcontrol.php" class="link">@</a>     运算符。</li>   </ul>  </span> </div>  </div>
     * @return bool Returns <b>TRUE</b> if var exists and has value other than <b>NULL</b>, <b>FALSE</b> otherwise.*/
    function PS_UNRESERVE_PREFIX_isset($var, ...$_) {}

/**
*<div id="function.unset" class="refentry"> <div class="refnamediv">  <h1 class="refname">unset</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">unset</span> &mdash; <span class="dc-title">清除指定变量</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.unset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>unset</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$var</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$vars</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">unset()</strong></span> 销毁指定变量。  </p>  <p class="para">   <span class="function"><strong style="color:#CC7832">unset()</strong></span> 在函数中的行为会依赖于想要销毁的变量的类型而有所不同。  </p>  <p class="para">   如果在函数中 <span class="function"><strong style="color:#CC7832">unset()</strong></span>    一个全局变量，则只是局部变量被销毁，而在调用环境中的变量将保持调用   <span class="function"><strong style="color:#CC7832">unset()</strong></span> 之前一样的值。   <div class="informalexample">    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">destroy_foo</span><span style="color: #007700">() <br />{<br />    global </span><span style="color: #9876AA">$foo</span><span style="color: #007700">;<br />    unset(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">$foo </span><span style="color: #007700">= </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">destroy_foo</span><span style="color: #007700">();<br />echo </span><span style="color: #9876AA">$foo</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p>  <p class="para">以上示例会输出：</p>  <p class="para">   <div class="informalexample">    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bar<br></span></div>    </div>   </div>  </p>  <p class="para">   如果您想在函数中 <span class="function"><strong style="color:#CC7832">unset()</strong></span>   一个全局变量，可使用 <var class="varname"><a href="https://www.php.net/manual/zh/reserved.variables.globals.php" class="classname">$GLOBALS</a></var>   数组来实现：   <div class="informalexample">    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">foo</span><span style="color: #007700">() <br />{<br />    unset(</span><span style="color: #9876AA">$GLOBALS</span><span style="color: #007700">[</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">]);<br />}<br /><br /></span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #DD0000">"something"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">foo</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p>  <p class="para">   如果在函数中 <span class="function"><strong style="color:#CC7832">unset()</strong></span>    一个通过引用传递的变量，则只是局部变量被销毁，而在调用环境中的变量将保持调用   <span class="function"><strong style="color:#CC7832">unset()</strong></span> 之前一样的值。   <div class="informalexample">    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">foo</span><span style="color: #007700">(&amp;</span><span style="color: #9876AA">$bar</span><span style="color: #007700">) <br />{<br />    unset(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #DD0000">"blah"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #DD0000">'something'</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$bar</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">foo</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$bar</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p>   <p class="para">以上示例会输出：</p>  <p class="para">   <div class="informalexample">    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>something<br>something<br></span></div>    </div>   </div>  </p>  <p class="para">   如果在函数中 <span class="function"><strong style="color:#CC7832">unset()</strong></span>    一个静态变量，那么在函数内部此静态变量将被销毁。但是，当再次调用此函数时，此静态变量将被复原为上次被销毁之前的值。   <div class="informalexample">    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">foo</span><span style="color: #007700">()<br />{<br />    static </span><span style="color: #9876AA">$bar</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$bar</span><span style="color: #007700">++;<br />    echo </span><span style="color: #DD0000">"Before unset: </span><span style="color: #9876AA">$bar</span><span style="color: #DD0000">, "</span><span style="color: #007700">;<br />    unset(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #9876AA">23</span><span style="color: #007700">;<br />    echo </span><span style="color: #DD0000">"after unset: </span><span style="color: #9876AA">$bar</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">foo</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">foo</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">foo</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p>   <p class="para">以上示例会输出：</p>  <p class="para">   <div class="informalexample">    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Before unset: 1, after unset: 23<br>Before unset: 2, after unset: 23<br>Before unset: 3, after unset: 23<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.unset-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">var</span></dt>     <dd>      <p class="para">       要销毁的变量。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">vars</span></dt>     <dd>      <p class="para">       更多变量。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.unset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.unset-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">unset()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 销毁单个变量<br /></span><span style="color: #007700">unset(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 销毁单个数组元素<br /></span><span style="color: #007700">unset(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">[</span><span style="color: #DD0000">'quux'</span><span style="color: #007700">]);<br /><br /></span><span style="color: #FF8000">// 销毁一个以上的变量<br /></span><span style="color: #007700">unset(</span><span style="color: #9876AA">$foo1</span><span style="color: #007700">, </span><span style="color: #9876AA">$foo2</span><span style="color: #007700">, </span><span style="color: #9876AA">$foo3</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #2 使用 <span>(unset)</span> 类型强制转换</strong></p>    <div class="example-contents"><p>     <a href="https://www.php.net/manual/zh/language.types.null.php#language.types.null.casting" class="link"><span>(unset)</span></a>     类型强制转换经常与函数 <span class="function"><strong style="color:#CC7832">unset()</strong></span> 引起困惑。     为了完整性，<span>(unset)</span> 是作为 <span>NULL</span> 类型的强制转换。     它不会改变变量的类型。自 PHP 7.2.0 起，弃用 (unset) 强制转换，自 8.0.0 起移除。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$name </span><span style="color: #007700">= </span><span style="color: #DD0000">'Felipe'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">((unset) </span><span style="color: #9876AA">$name</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$name</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>NULL<br>string(6) &quot;Felipe&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.unset-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">因为是语言构造器而不是函数，不能被<a href="https://www.php.net/manual/zh/functions.variable-functions.php" class="link">可变函数</a> 或者<a href="https://www.php.net/manual/zh/functions.arguments.php#functions.named-arguments" class="link">命名参数</a> 调用。</span></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    它可以取消设置当前上下文中可见的对象属性。   </p>   <p class="para">    如果已声明，则在访问未设置的属性时调用 <a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.get" class="link">__get()</a>，    在设置未设置的属性时调用 <a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.set" class="link">__set()</a>。   </p>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    无法在对象里销毁 <span>$this</span>。   </p>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    在 <span class="function"><strong style="color:#CC7832">unset()</strong></span> 一个无法访问的对象属性时，如果定义了    <a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.unset" class="link">__unset()</a> 则会调用这个重载方法。   </p>  </p></blockquote> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.unset-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link isset()} - 检测变量是否已声明并且其值不为 null</span></li>    <li class="member"><span class="function">{@link empty()} - 检查变量是否为空</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.unset" class="link">__unset()</a></li>    <li class="member"><span class="function">{@link array_splice()} - 去掉数组中的某一部分并用其它值取代</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.types.null.php#language.types.null.casting" class="link">(unset) 强制转换</a></li>   </ul>  </span> </div></div>
     * @return void*/
    function PS_UNRESERVE_PREFIX_unset($var, ...$_) {}

/**
*<div id="function.eval" class="refentry"> <div class="refnamediv">  <h1 class="refname">eval</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">eval</span> &mdash; <span class="dc-title">把字符串作为PHP代码执行</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.eval-description">  <h3 class="title">说明</h3>   <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>eval</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$code</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   把字符串 <span class="parameter" style="color:#3A95FF">code</span> 作为PHP代码执行。  </p>    <div class="caution"><strong class="caution">警告</strong>  <p class="para">      函数<span class="function"><strong style="color:#CC7832">eval()</strong></span>语言结构是 <em>非常危险</em>的，    因为它允许执行任意 PHP 代码。 <em>它这样用是很危险的。</em>    如果您仔细的确认过，除了使用此结构以外    别无方法, 请多加注意，<em>不要允许传入任何由用户    提供的、未经完整验证过的数据</em> 。  </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.eval-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">code</span></dt>     <dd>      <p class="para">       需要被执行的字符串      </p>      <p class="para">       代码不能包含打开/关闭        <a href="https://www.php.net/manual/zh/language.basic-syntax.phpmode.php" class="link">PHP tags</a>。比如，       <span>&#039;echo &quot;Hi!&quot;;&#039;</span> 不能这样传入：       <span>&#039;&lt;?php echo &quot;Hi!&quot;; ?&gt;&#039;</span>。但仍然可以用合适的 PHP tag 来离开、重新进入 PHP 模式。比如       <span>&#039;echo &quot;In PHP mode!&quot;; ?&gt;In HTML mode!&lt;?php echo &quot;Back in PHP mode!&quot;;&#039;</span>。      </p>      <p class="para">       除此之外，传入的必须是有效的 PHP 代码。所有的语句必须以分号结尾。比如        <span>&#039;echo &quot;Hi!&quot;&#039;</span> 会导致一个 parse error，而       <span>&#039;echo &quot;Hi!&quot;;&#039;</span> 则会正常运行。      </p>      <p class="para">       <span>return</span> 语句会立即中止当前字符串的执行。      </p>      <p class="para">       代码执行的作用域是调用 <span class="function"><strong style="color:#CC7832">eval()</strong></span> 处的作用域。因此，<span class="function"><strong style="color:#CC7832">eval()</strong></span> 里任何的变量定义、修改，都会在函数结束后被保留。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.eval-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="function"><strong style="color:#CC7832">eval()</strong></span> 返回 <strong><span>null</span></strong>，除非在执行的代码中 <span>return</span> 了一个值，函数返回传递给 <span>return</span> 的值。 PHP 7 开始，执行的代码里如果有一个 parse error，<span class="function"><strong style="color:#CC7832">eval()</strong></span> 会抛出 ParseError 异常。在 PHP 7 之前，   如果在执行的代码中有 parse error，<span class="function"><strong style="color:#CC7832">eval()</strong></span> 返回   <strong><span>false</span></strong>，之后的代码将正常执行。无法使用 <span class="function">{@link set_error_handler()}</span> 捕获 <span class="function"><strong style="color:#CC7832">eval()</strong></span> 中的解析错误。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.eval-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">eval()</strong></span> 例子 - 简单的文本合并</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$string </span><span style="color: #007700">= </span><span style="color: #DD0000">'cup'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$name </span><span style="color: #007700">= </span><span style="color: #DD0000">'coffee'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$str </span><span style="color: #007700">= </span><span style="color: #DD0000">'This is a $string with my $name in it.'</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">$str</span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />eval(</span><span style="color: #DD0000">"\$str = \"</span><span style="color: #9876AA">$str</span><span style="color: #DD0000">\";"</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$str</span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>This is a $string with my $name in it.<br>This is a cup with my coffee in it.<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.eval-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">因为是语言构造器而不是函数，不能被<a href="https://www.php.net/manual/zh/functions.variable-functions.php" class="link">可变函数</a> 或者<a href="https://www.php.net/manual/zh/functions.arguments.php#functions.named-arguments" class="link">命名参数</a> 调用。</span></p></blockquote>  <div class="tip"><strong class="tip">小技巧</strong><p class="simpara">和直接将结果输出到浏览器一样，可使用<a href="https://www.php.net/manual/zh/book.outcontrol.php" class="link">输出控制函数</a>来捕获当前函数的输出，然后(例如)保存到一个 <span class="type" style="color:#EAB766">string</span> 中。</p></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    如果在执行的代码中产生了一个致命的错误（fatal error），整个脚本会退出。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.eval-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link call_user_func()} - 把第一个参数作为回调函数调用</span></li>   </ul>  </span> </div></div>
     * @return mixed <b>NULL</b> unless return is called in the evaluated code, in which case the value passed to return is returned.*/
    function PS_UNRESERVE_PREFIX_eval($code) {}

/**
*<div id="class.generator" class="reference">  <h1 class="title">生成器类</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p>  <div class="section" id="generator.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">Generator</strong></span> 对象是从 <a href="https://www.php.net/manual/zh/language.generators.php" class="link">generators</a>返回的.   </p>      <div class="caution"><strong class="caution">警告</strong>    <p class="para">     <span class="classname"><strong class="classname">Generator</strong></span> 对象不能通过     <a href="https://www.php.net/manual/zh/language.oop5.basic.php#language.oop5.basic.new" class="link">new</a> 实例化.    </p>   </div>  </div>  <div class="section" id="generator.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">final</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">Generator</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a> {</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/generator.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/generator.getreturn.php" class="methodname" style="color:#CC7832">getReturn</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/generator.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/generator.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/generator.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/generator.send.php" class="methodname" style="color:#CC7832">send</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/generator.throw.php" class="methodname" style="color:#CC7832">throw</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span> <span class="parameter" style="color:#3A95FF">$exception</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/generator.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/generator.wakeup.php" class="methodname" style="color:#CC7832">__wakeup</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>  <div class="section" id="generator.seealso">   <h2 class="title">参见</h2>   <p class="para">也可以参考 <a href="https://www.php.net/manual/zh/language.oop5.iterations.php" class="link">遍历对象</a>。</p>  </div> </div>         <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Generator::current} — 返回当前产生的值</li><li>{@link Generator::getReturn} — 获取生成器的返回值</li><li>{@link Generator::key} — 返回当前产生的键</li><li>{@link Generator::next} — 生成器继续执行</li><li>{@link Generator::rewind} — 重置迭代器</li><li>{@link Generator::send} — 向生成器中传入一个值</li><li>{@link Generator::throw} — 向生成器中抛入一个异常</li><li>{@link Generator::valid} — 检查迭代器是否被关闭</li><li>{@link Generator::__wakeup} — 序列化回调</li></ul></div>
*/
    final class Generator implements Iterator
    {
/**
*<div id="generator.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">Generator::rewind</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Generator::rewind</span> &mdash; <span class="dc-title">重置迭代器</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-generator.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Generator::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   如果迭代已经开始了，这里会抛出一个异常。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-generator.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-generator.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
         * @return void*/
        public function rewind(): void {}

/**
*<div id="generator.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">Generator::valid</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Generator::valid</span> &mdash; <span class="dc-title">检查迭代器是否被关闭</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-generator.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Generator::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-generator.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-generator.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    如果迭代器已被关闭返回 <strong><span>false</span></strong>，否则返回 <strong><span>true</span></strong>。  </p> </div></div>
         * @return bool*/
        public function valid(): bool {}

/**
*<div id="generator.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">Generator::current</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Generator::current</span> &mdash; <span class="dc-title">返回当前产生的值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-generator.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Generator::current</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-generator.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-generator.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回当前产生的值。  </p> </div></div>
         * @return TYield*/
        public function current(): mixed {}

/**
*<div id="generator.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">Generator::key</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Generator::key</span> &mdash; <span class="dc-title">返回当前产生的键</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-generator.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Generator::key</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   获取产生的值的键  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-generator.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-generator.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回当前产生的键。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-generator.key-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1199">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>Generator::key()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">function </span><span style="color: #9876AA">Gen</span><span style="color: #007700">()<br />{<br />    yield </span><span style="color: #DD0000">'key' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'value'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$gen </span><span style="color: #007700">= </span><span style="color: #9876AA">Gen</span><span style="color: #007700">();<br /><br />echo </span><span style="color: #DD0000">"</span><span style="color: #007700">{</span><span style="color: #9876AA">$gen</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">()}</span><span style="color: #DD0000"> =&gt; </span><span style="color: #007700">{</span><span style="color: #9876AA">$gen</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">()}</span><span style="color: #DD0000">"</span><span style="color: #007700">;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>key =&gt; value<br></span></div>    </div>   </div>  </span> </div></div>
         * @return TKey*/
        public function key() {}

/**
*<div id="generator.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">Generator::next</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Generator::next</span> &mdash; <span class="dc-title">生成器继续执行</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-generator.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Generator::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   调用 <span class="methodname" style="color:#CC7832"><strong>Generator::next()</strong></span> 与以 <strong><span>null</span></strong>   作为参数调用 <span class="methodname" style="color:#CC7832">{@link Generator::send()}</span> 具有同样的效果。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-generator.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-generator.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
         * @return void*/
        public function next(): void {}

/**
*<div id="generator.send" class="refentry"> <div class="refnamediv">  <h1 class="refname">Generator::send</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Generator::send</span> &mdash; <span class="dc-title">向生成器中传入一个值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-generator.send-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Generator::send</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   向生成器中传入一个值，并且当做 <a href="https://www.php.net/manual/zh/language.generators.syntax.php#control-structures.yield" class="link">yield</a> 表达式的结果，然后继续执行生成器。  </p>  <p class="para">   如果当这个方法被调用时，生成器不在 <a href="https://www.php.net/manual/zh/language.generators.syntax.php#control-structures.yield" class="link">yield</a> 表达式，那么在传入值之前，它会先运行到第一个 <a href="https://www.php.net/manual/zh/language.generators.syntax.php#control-structures.yield" class="link">yield</a> 表达式。   因此没有必要调用 <span class="methodname" style="color:#CC7832">{@link Generator::next()}</span> 让 PHP 生成器 “准备”（就像是 Python 那样做）。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-generator.send-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">value</span></dt>    <dd>     <span>      传入生成器的值。这个值将会被作为生成器当前所在的 <a href="https://www.php.net/manual/zh/language.generators.syntax.php#control-structures.yield" class="link">yield</a> 的返回值     </span>    </dd>     </dl> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-generator.send-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回生成的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-generator.send-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1202">    <p><strong>示例 #1 用 <span class="methodname" style="color:#CC7832"><strong>Generator::send()</strong></span> 向生成器函数中传值</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">printer</span><span style="color: #007700">() {<br />    echo </span><span style="color: #DD0000">"I'm printer!"</span><span style="color: #007700">.</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    while (</span><span style="color: #9876AA">true</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">$string </span><span style="color: #007700">= yield;<br />        echo </span><span style="color: #9876AA">$string</span><span style="color: #007700">.</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$printer </span><span style="color: #007700">= </span><span style="color: #9876AA">printer</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$printer</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">send</span><span style="color: #007700">(</span><span style="color: #DD0000">'Hello world!'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$printer</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">send</span><span style="color: #007700">(</span><span style="color: #DD0000">'Bye world!'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>I&#039;m printer!<br>Hello world!<br>Bye world!<br></span></div>    </div>   </div>  </span> </div></div>
         * @return TYield|null*/
        public function send(mixed $value): mixed {}

/**
*<div id="generator.throw" class="refentry"> <div class="refnamediv">  <h1 class="refname">Generator::throw</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Generator::throw</span> &mdash; <span class="dc-title">向生成器中抛入一个异常</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-generator.throw-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Generator::throw</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span> <span class="parameter" style="color:#3A95FF">$exception</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   抛出一个异常到生成器并恢复生成器的执行。   与当前 <a href="https://www.php.net/manual/zh/language.generators.syntax.php#control-structures.yield" class="link">yield</a> 表达式被 <span>throw $exception</span> 语句替换是一样的行为。  </p>  <p class="para">   如果调用此方法时生成器已经关闭，则将会在调用者的上下文中抛出异常。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-generator.throw-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">exception</span></dt>    <dd>     <span>      抛出异常到生成器。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-generator.throw-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回生成的值。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-generator.throw-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1205">    <p><strong>示例 #1 抛出异常到生成器</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">gen</span><span style="color: #007700">() {<br />    echo </span><span style="color: #DD0000">"Foo\n"</span><span style="color: #007700">;<br />    try {<br />        yield;<br />    } catch (</span><span style="color: #9876AA">Exception $e</span><span style="color: #007700">) {<br />        echo </span><span style="color: #DD0000">"Exception: </span><span style="color: #007700">{</span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">()}</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />    }<br />    echo </span><span style="color: #DD0000">"Bar\n"</span><span style="color: #007700">;<br />}<br /> <br /></span><span style="color: #9876AA">$gen </span><span style="color: #007700">= </span><span style="color: #9876AA">gen</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$gen</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$gen</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">throw</span><span style="color: #007700">(new </span><span style="color: #9876AA">Exception</span><span style="color: #007700">(</span><span style="color: #DD0000">'Test'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Foo<br>Exception: Test<br>Bar<br></span></div>    </div>   </div>  </span> </div></div>
         * @return TYield*/
        public function PS_UNRESERVE_PREFIX_throw(Throwable $exception): mixed {}

/**
*<div id="generator.getreturn" class="refentry"> <div class="refnamediv">  <h1 class="refname">Generator::getReturn</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">Generator::getReturn</span> &mdash; <span class="dc-title">获取生成器的返回值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-generator.getreturn-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Generator::getReturn</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-generator.getreturn-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-generator.getreturn-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   在生成器执行完成后，获取生成器的 return 值。  </p> </div><br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-generator.getreturn-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1196">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>Generator::getReturn()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$gen </span><span style="color: #007700">= (function() {<br />    yield </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />    yield </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br /><br />    return </span><span style="color: #9876AA">3</span><span style="color: #007700">;<br />})();<br /><br />foreach (</span><span style="color: #9876AA">$gen </span><span style="color: #007700">as </span><span style="color: #9876AA">$val</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$val</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /><br />echo </span><span style="color: #9876AA">$gen</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getReturn</span><span style="color: #007700">(), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>1<br>2<br>3<br></span></div>    </div>   </div>  </span> </div></div>
         * @return TReturn*/
        public function getReturn(): mixed {}

        /**
         * Serialize callback
         * Throws an exception as generators can't be serialized.
         * @link https://php.net/manual/en/generator.wakeup.php
         * @return void
         */
        public function __wakeup() {}
    }

    class ClosedGeneratorException extends Exception {}
}

namespace ___PHPSTORM_HELPERS {
    class PS_UNRESERVE_PREFIX_this {}

    class PS_UNRESERVE_PREFIX_static {}

    class object
    {
        /**
         * PHP 5 allows developers to declare constructor methods for classes.
         * Classes which have a constructor method call this method on each newly-created object,
         * so it is suitable for any initialization that the object may need before it is used.
         *
         * Note: Parent constructors are not called implicitly if the child class defines a constructor.
         * In order to run a parent constructor, a call to parent::__construct() within the child constructor is required.
         *
         * param [ mixed $args [, $... ]]
         * @link https://php.net/manual/en/language.oop5.decon.php
         */
        public function __construct() {}

        /**
         * PHP 5 introduces a destructor concept similar to that of other object-oriented languages, such as C++.
         * The destructor method will be called as soon as all references to a particular object are removed or
         * when the object is explicitly destroyed or in any order in shutdown sequence.
         *
         * Like constructors, parent destructors will not be called implicitly by the engine.
         * In order to run a parent destructor, one would have to explicitly call parent::__destruct() in the destructor body.
         *
         * Note: Destructors called during the script shutdown have HTTP headers already sent.
         * The working directory in the script shutdown phase can be different with some SAPIs (e.g. Apache).
         *
         * Note: Attempting to throw an exception from a destructor (called in the time of script termination) causes a fatal error.
         *
         * @return void
         * @link https://php.net/manual/en/language.oop5.decon.php
         */
        public function __destruct() {}

        /**
         * is triggered when invoking inaccessible methods in an object context.
         *
         * @param string $name
         * @param array $arguments
         * @return mixed
         * @link https://php.net/manual/en/language.oop5.overloading.php#language.oop5.overloading.methods
         */
        public function __call(string $name, array $arguments) {}

        /**
         * is triggered when invoking inaccessible methods in a static context.
         *
         * @param string $name
         * @param array $arguments
         * @return mixed
         * @link https://php.net/manual/en/language.oop5.overloading.php#language.oop5.overloading.methods
         */
        public static function __callStatic(string $name, array $arguments) {}

        /**
         * is utilized for reading data from inaccessible members.
         *
         * @param string $name
         * @return mixed
         * @link https://php.net/manual/en/language.oop5.overloading.php#language.oop5.overloading.members
         */
        public function __get(string $name) {}

        /**
         * run when writing data to inaccessible members.
         *
         * @param string $name
         * @param mixed $value
         * @return void
         * @link https://php.net/manual/en/language.oop5.overloading.php#language.oop5.overloading.members
         */
        public function __set(string $name, $value): void {}

        /**
         * is triggered by calling isset() or empty() on inaccessible members.
         *
         * @param string $name
         * @return bool
         * @link https://php.net/manual/en/language.oop5.overloading.php#language.oop5.overloading.members
         */
        public function __isset(string $name): bool {}

        /**
         * is invoked when unset() is used on inaccessible members.
         *
         * @param string $name
         * @return void
         * @link https://php.net/manual/en/language.oop5.overloading.php#language.oop5.overloading.members
         */
        public function __unset(string $name): void {}

        /**
         * serialize() checks if your class has a function with the magic name __sleep.
         * If so, that function is executed prior to any serialization.
         * It can clean up the object and is supposed to return an array with the names of all variables of that object that should be serialized.
         * If the method doesn't return anything then NULL is serialized and E_NOTICE is issued.
         * The intended use of __sleep is to commit pending data or perform similar cleanup tasks.
         * Also, the function is useful if you have very large objects which do not need to be saved completely.
         *
         * @return string[]
         * @link https://php.net/manual/en/language.oop5.magic.php#language.oop5.magic.sleep
         */
        public function __sleep(): array {}

        /**
         * unserialize() checks for the presence of a function with the magic name __wakeup.
         * If present, this function can reconstruct any resources that the object may have.
         * The intended use of __wakeup is to reestablish any database connections that may have been lost during
         * serialization and perform other reinitialization tasks.
         *
         * @return void
         * @link https://php.net/manual/en/language.oop5.magic.php#language.oop5.magic.sleep
         */
        public function __wakeup(): void {}

        /**
         * The __toString method allows a class to decide how it will react when it is converted to a string.
         *
         * @return string
         * @link https://php.net/manual/en/language.oop5.magic.php#language.oop5.magic.tostring
         */
        public function __toString(): string {}

        /**
         * The __invoke method is called when a script tries to call an object as a function.
         *
         * @return mixed
         * @link https://php.net/manual/en/language.oop5.magic.php#language.oop5.magic.invoke
         */
        public function __invoke() {}

        /**
         * This method is called by var_dump() when dumping an object to get the properties that should be shown.
         * If the method isn't defined on an object, then all public, protected and private properties will be shown.
         *
         * @return array|null
         * @link https://php.net/manual/en/language.oop5.magic.php#language.oop5.magic.debuginfo
         */
        public function __debugInfo(): ?array {}

        /**
         * This static method is called for classes exported by var_export() since PHP 5.1.0.
         * The only parameter of this method is an array containing exported properties in the form array('property' => value, ...).
         *
         * @param array $an_array
         * @return object
         * @link https://php.net/manual/en/language.oop5.magic.php#language.oop5.magic.set-state
         */
        public static function __set_state(array $an_array): object {}

        /**
         * When an object is cloned, PHP 5 will perform a shallow copy of all of the object's properties.
         * Any properties that are references to other variables, will remain references.
         * Once the cloning is complete, if a __clone() method is defined,
         * then the newly created object's __clone() method will be called, to allow any necessary properties that need to be changed.
         * NOT CALLABLE DIRECTLY.
         *
         * @return void
         * @link https://php.net/manual/en/language.oop5.cloning.php
         */
        public function __clone(): void {}

        /**
         * Returns array containing all the necessary state of the object.
         * @since 7.4
         * @link https://wiki.php.net/rfc/custom_object_serialization
         */
        public function __serialize(): array {}

        /**
         * Restores the object state from the given data array.
         * @param array $data
         * @since 7.4
         * @link https://wiki.php.net/rfc/custom_object_serialization
         */
        public function __unserialize(array $data): void {}
    }
}
