<?php

/**
 * @since 5.6
 */

use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\ExpectedValues;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Pure;

define("ARRAY_FILTER_USE_BOTH", 1);

/**
 * @since 5.6
 */
define("ARRAY_FILTER_USE_KEY", 2);

/**
*<div id="function.array-merge-recursive" class="refentry">   <div class="refnamediv">    <h1 class="refname">array_merge_recursive</h1>    <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_merge_recursive</span> &mdash; <span class="dc-title">递归地合并一个或多个数组</span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-merge-recursive-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_merge_recursive</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$arrays</span></span>): <span class="type" style="color:#EAB766">array</span></div>    <p class="para rdfs-comment">     <span class="function"><strong style="color:#CC7832">array_merge_recursive()</strong></span> 将一个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。    </p>    <p class="para">     如果输入的数组中有相同的字符串键名，则这些值会被合并到一个数组中去，这将递归下去，因此如果一个值本身是一个数组，本函数将按照相应的条目把它合并为另一个数组。需要注意的是，如果数组具有相同的数值键名，后一个值将不会覆盖原来的值，而是附加到后面。    </p>   </div>       <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-merge-recursive-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">arrays</span></dt>     <dd>      <p class="para">       数组变量列表，进行递归合并。      </p>     </dd>       </dl>  </span> </div>       <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-merge-recursive-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   一个结果数组，其中的值合并自附加的参数。如果未传递参数调用，则会返回一个空 <span class="type" style="color:#EAB766">array</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-merge-recursive-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.4.0</td>       <td>        允许不传递参数调用，之前的版本中至少需要一个参数。       </td>      </tr>     </tbody>       </table>  </span> </div><br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-merge-recursive-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_merge_recursive()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$ar1 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"color" </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">"favorite" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"red"</span><span style="color: #007700">), </span><span style="color: #9876AA">5</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$ar2 </span><span style="color: #007700">= array(</span><span style="color: #9876AA">10</span><span style="color: #007700">, </span><span style="color: #DD0000">"color" </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">"favorite" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">array_merge_recursive</span><span style="color: #007700">(</span><span style="color: #9876AA">$ar1</span><span style="color: #007700">, </span><span style="color: #9876AA">$ar2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [color] =&gt; Array<br>        (<br>            [favorite] =&gt; Array<br>                (<br>                    [0] =&gt; red<br>                    [1] =&gt; green<br>                )<br><br>            [0] =&gt; blue<br>        )<br><br>    [0] =&gt; 5<br>    [1] =&gt; 10<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-merge-recursive-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_merge()} - 合并一个或多个数组</span></li>    <li class="member"><span class="function">{@link array_replace_recursive()} - 使用传递的数组递归替换第一个数组的元素</span></li>   </ul>  </span> </div>     </div>
 * @return array An array of values resulted from merging the arguments together.*/
function array_merge_recursive(
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.3')] array $arr1,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.0')] array $arrays,
    array ...$arrays
): array {}

/**
*<div id="function.array-replace" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_replace</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_replace</span> &mdash; <span class="dc-title">使用传递的数组替换第一个数组的元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-replace-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_replace</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$replacements</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">array_replace()</strong></span> 函数使用后面数组元素相同 key 的值替换 <span class="parameter" style="color:#3A95FF">array</span> 数组的值。如果一个键存在于第一个数组同时也存在于第二个数组，它的值将被第二个数组中的值替换。如果一个键存在于第二个数组，但是不存在于第一个数组，则会在第一个数组中创建这个元素。如果一个键仅存在于第一个数组，它将保持不变。如果传递了多个替换数组，它们将被按顺序依次处理，后面的数组将覆盖之前的值。  </p>  <p class="para">   <span class="function"><strong style="color:#CC7832">array_replace()</strong></span> 是非递归的：它将第一个数组的值进行替换而不管第二个数组中是什么类型。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-replace-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       替换该数组的值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">replacements</span></dt>     <dd>      <p class="para">       包含要提取元素的数组。       后面的数组里的值会覆盖前面的值。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-replace-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span class="type" style="color:#EAB766">array</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-replace-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_replace()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$base </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">, </span><span style="color: #DD0000">"banana"</span><span style="color: #007700">, </span><span style="color: #DD0000">"apple"</span><span style="color: #007700">, </span><span style="color: #DD0000">"raspberry"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$replacements </span><span style="color: #007700">= array(</span><span style="color: #9876AA">0 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"pineapple"</span><span style="color: #007700">, </span><span style="color: #9876AA">4 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"cherry"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$replacements2 </span><span style="color: #007700">= array(</span><span style="color: #9876AA">0 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"grape"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$basket </span><span style="color: #007700">= </span><span style="color: #9876AA">array_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">, </span><span style="color: #9876AA">$replacements</span><span style="color: #007700">, </span><span style="color: #9876AA">$replacements2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$basket</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; grape<br>    [1] =&gt; banana<br>    [2] =&gt; apple<br>    [3] =&gt; raspberry<br>    [4] =&gt; cherry<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-replace-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_replace_recursive()} - 使用传递的数组递归替换第一个数组的元素</span></li>    <li class="member"><span class="function">{@link array_merge()} - 合并一个或多个数组</span></li>   </ul>  </span> </div></div>
 * @return array or null if an error occurs.*/
function array_replace(
    array $array,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.0')] $replacements,
    array ...$replacements
): array {}

/**
*<div id="function.array-replace-recursive" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_replace_recursive</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_replace_recursive</span> &mdash; <span class="dc-title">使用传递的数组递归替换第一个数组的元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-replace-recursive-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_replace_recursive</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$replacements</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">array_replace_recursive()</strong></span> 使用后面数组元素的值替换数组 <span class="parameter" style="color:#3A95FF">array</span> 的值。   如果一个键存在于第一个数组同时也存在于第二个数组，它的值将被第二个数组中的值替换。   如果一个键存在于第二个数组，但是不存在于第一个数组，则会在第一个数组中创建这个元素。   如果一个键仅存在于第一个数组，它将保持不变。   如果传递了多个替换数组，它们将被按顺序依次处理，后面的数组将覆盖之前的值。  </p>  <p class="para">   <span class="function"><strong style="color:#CC7832">array_replace_recursive()</strong></span> 是递归的：它将遍历数组并将相同的处理应用到数组的内部值。  </p>  <p class="para">   如果第一个数组中的值是标量，它的值将被第二个数组中的值替换，它可能是一个标量或者数组。如果第一个数组和第二个数组中的值都是数组，   <span class="function"><strong style="color:#CC7832">array_replace_recursive()</strong></span> 函数将递归地替换它们各自的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-replace-recursive-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       替换该数组的值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">replacements</span></dt>     <dd>      <p class="para">       包含要提取元素的数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-replace-recursive-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span class="type" style="color:#EAB766">array</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-replace-recursive-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_replace_recursive()</strong></span> 范例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$base </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'citrus' </span><span style="color: #007700">=&gt; array( </span><span style="color: #DD0000">"orange"</span><span style="color: #007700">) , </span><span style="color: #DD0000">'berries' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">"blackberry"</span><span style="color: #007700">, </span><span style="color: #DD0000">"raspberry"</span><span style="color: #007700">), );<br /></span><span style="color: #9876AA">$replacements </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'citrus' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'pineapple'</span><span style="color: #007700">), </span><span style="color: #DD0000">'berries' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'blueberry'</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$basket </span><span style="color: #007700">= </span><span style="color: #9876AA">array_replace_recursive</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">, </span><span style="color: #9876AA">$replacements</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$basket</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$basket </span><span style="color: #007700">= </span><span style="color: #9876AA">array_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">, </span><span style="color: #9876AA">$replacements</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$basket</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [citrus] =&gt; Array<br>        (<br>            [0] =&gt; pineapple<br>        )<br><br>    [berries] =&gt; Array<br>        (<br>            [0] =&gt; blueberry<br>            [1] =&gt; raspberry<br>        )<br><br>)<br>Array<br>(<br>    [citrus] =&gt; Array<br>        (<br>            [0] =&gt; pineapple<br>        )<br><br>    [berries] =&gt; Array<br>        (<br>            [0] =&gt; blueberry<br>        )<br><br>)<br><br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">array_replace_recursive()</strong></span> 及其递归表现</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$base </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'citrus' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">) , </span><span style="color: #DD0000">'berries' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">"blackberry"</span><span style="color: #007700">, </span><span style="color: #DD0000">"raspberry"</span><span style="color: #007700">), </span><span style="color: #DD0000">'others' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'banana' </span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$replacements </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'citrus' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'pineapple'</span><span style="color: #007700">, </span><span style="color: #DD0000">'berries' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'blueberry'</span><span style="color: #007700">), </span><span style="color: #DD0000">'others' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'litchis'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$replacements2 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'citrus' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'pineapple'</span><span style="color: #007700">), </span><span style="color: #DD0000">'berries' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'blueberry'</span><span style="color: #007700">), </span><span style="color: #DD0000">'others' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'litchis'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$basket </span><span style="color: #007700">= </span><span style="color: #9876AA">array_replace_recursive</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">, </span><span style="color: #9876AA">$replacements</span><span style="color: #007700">, </span><span style="color: #9876AA">$replacements2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$basket</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [citrus] =&gt; Array<br>        (<br>            [0] =&gt; pineapple<br>        )<br><br>    [berries] =&gt; Array<br>        (<br>            [0] =&gt; blueberry<br>            [1] =&gt; raspberry<br>        )<br><br>    [others] =&gt; litchis<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-replace-recursive-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_replace()} - 使用传递的数组替换第一个数组的元素</span></li>    <li class="member"><span class="function">{@link array_merge_recursive()} - 递归地合并一个或多个数组</span></li>   </ul>  </span> </div></div>
 * @return array an array, or null if an error occurs.*/
function array_replace_recursive(
    array $array,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.0')] $replacements,
    array ...$replacements
): array {}

/**
*<div id="function.array-keys" class="refentry">   <div class="refnamediv">    <h1 class="refname">array_keys</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_keys</span> &mdash; <span class="dc-title">返回数组中部分的或所有的键名</span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-keys-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><strong>array_keys</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><strong>array_keys</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$filter_value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$strict</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>    <p class="para rdfs-comment">     <span class="function"><strong style="color:#CC7832">array_keys()</strong></span> 返回 <span class="parameter" style="color:#3A95FF">input</span>     数组中的数字或者字符串的键名。    </p>    <p class="para">     如果指定了可选参数 <span class="parameter" style="color:#3A95FF">filter_value</span>，则只返回该值的键名。否则     <span class="parameter" style="color:#3A95FF">input</span> 数组中的所有键名都会被返回。    </p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-keys-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">input</span></dt>     <dd>      <p class="para">       一个数组，包含了要返回的键。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">filter_value</span></dt>     <dd>      <p class="para">       如果指定了这个参数，只有包含此值的键才会返回。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">strict</span></dt>     <dd>      <p class="para">       判断在搜索的时候是否该使用严格的比较（===）。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-keys-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span class="parameter" style="color:#3A95FF">input</span> 里的所有键。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-keys-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_keys()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array </span><span style="color: #007700">= array(</span><span style="color: #9876AA">0 </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">100</span><span style="color: #007700">, </span><span style="color: #DD0000">"color" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_keys</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">, </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">, </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_keys</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">, </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"color" </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">, </span><span style="color: #DD0000">"green"</span><span style="color: #007700">),<br />               </span><span style="color: #DD0000">"size"  </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">"small"</span><span style="color: #007700">, </span><span style="color: #DD0000">"medium"</span><span style="color: #007700">, </span><span style="color: #DD0000">"large"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_keys</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; 0<br>    [1] =&gt; color<br>)<br>Array<br>(<br>    [0] =&gt; 0<br>    [1] =&gt; 3<br>    [2] =&gt; 4<br>)<br>Array<br>(<br>    [0] =&gt; color<br>    [1] =&gt; size<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-keys-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_values()} - 返回数组中所有的值</span></li>    <li class="member"><span class="function">{@link array_combine()} - 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值</span></li>    <li class="member"><span class="function">{@link array_key_exists()} - 检查数组里是否有指定的键名或索引</span></li>    <li class="member"><span class="function">{@link array_search()} - 在数组中搜索给定的值，如果成功则返回首个相应的键名</span></li>   </ul>  </span> </div>  </div>
 * @return int[]|string[] an array of all the keys in input.*/
function array_keys(array $array, mixed $filter_value, bool $strict = false): array {}

/**
*<div id="function.array-values" class="refentry">   <div class="refnamediv">    <h1 class="refname">array_values</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_values</span> &mdash; <span class="dc-title">返回数组中所有的值</span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-values-description">  <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description">      <span class="methodname" style="color:#CC7832"><strong>array_values</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>): <span class="type" style="color:#EAB766">array</span></div>    <p class="para rdfs-comment">     <span class="function"><strong style="color:#CC7832">array_values()</strong></span> 返回     <span class="parameter" style="color:#3A95FF">input</span> 数组中所有的值并给其建立数字索引。    </p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-values-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-values-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回含所有值的索引数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-values-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_values()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"size" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"XL"</span><span style="color: #007700">, </span><span style="color: #DD0000">"color" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"gold"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_values</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; XL<br>    [1] =&gt; gold<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-values-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_keys()} - 返回数组中部分的或所有的键名</span></li>    <li class="member"><span class="function">{@link array_combine()} - 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值</span></li>   </ul>  </span> </div>  </div>
 * @return array an indexed array of values.*/
function array_values(array $array): array {}

/**
*<div id="function.array-count-values" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_count_values</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_count_values</span> &mdash; <span class="dc-title">统计数组中每个不同值的出现次数</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-count-values-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_count_values</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">array_count_values()</strong></span> 返回一个数组：     数组的键（必须是 <span class="type" style="color:#EAB766">int</span> 或 <span class="type" style="color:#EAB766">string</span>）是 <span class="parameter" style="color:#3A95FF">array</span> 里单元的值；     数组的值是 <span class="parameter" style="color:#3A95FF">array</span> 单元的值出现的次数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-count-values-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       统计这个数组的值      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-count-values-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    返回一个关联数组，用 <span class="parameter" style="color:#3A95FF">array</span>    数组中的值作为键名，该值在数组中出现的次数作为值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.array-count-values-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   对数组里面的每个不是 <span class="type" style="color:#EAB766">string</span> 或 <span class="type" style="color:#EAB766">int</span> 类型的元素抛出一个警告错误（<strong><span>E_WARNING</span></strong>）。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-count-values-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_count_values()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array </span><span style="color: #007700">= array(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">"hello"</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">"world"</span><span style="color: #007700">, </span><span style="color: #DD0000">"hello"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_count_values</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [1] =&gt; 2<br>    [hello] =&gt; 2<br>    [world] =&gt; 1<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-count-values-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link count()} - 统计数组、Countable 对象中所有元素的数量</span></li>    <li class="member"><span class="function">{@link array_unique()} - 移除数组中重复的值</span></li>    <li class="member"><span class="function">{@link array_values()} - 返回数组中所有的值</span></li>    <li class="member"><span class="function">{@link count_chars()} - 返回字符串所用字符的信息</span></li>   </ul>  </span> </div></div>
 * @return array an associative array of values from input as*/
function array_count_values(array $array): array {}

/**
*<div id="function.array-column" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_column</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_column</span> &mdash; <span class="dc-title">返回输入数组中指定列的值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-column-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_column</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">null</span></span> <span class="parameter" style="color:#3A95FF">$column_key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">null</span></span> <span class="parameter" style="color:#3A95FF">$index_key</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">array_column()</strong></span> 返回   <span class="parameter" style="color:#3A95FF">array</span> 中键名为   <span class="parameter" style="color:#3A95FF">column_key</span> 的一列值。 如果指定了可选参数   <span class="parameter" style="color:#3A95FF">index_key</span>，则使用输入数组中   <span class="parameter" style="color:#3A95FF">index_key</span> 列的值将作为返回数组中对应值的键。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-column-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       多维数组或对象数组，从中提取一列值。       如果提供的是对象数组，只有 public 的属性会被直接取出。       如果想取出 private 和 protected 的属性，类必须实现       <span class="function"><strong style="color:#CC7832">__get()</strong></span> 和 <span class="function"><strong style="color:#CC7832">__isset()</strong></span> 魔术方法。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">column_key</span></dt>     <dd>      <p class="para">       需要返回值的列。它可以是索引数组的列索引，或者是关联数组的列的键，也可以是属性名。       也可以是 <strong><span>null</span></strong> ，此时将返回整个数组（配合       <span class="parameter" style="color:#3A95FF">index_key</span> 参数来重新索引数组时非常好用）。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">index_key</span></dt>     <dd>      <p class="para">       作为返回数组的索引/键的列。它可以是该列的整数索引，或者字符串键值。       该值会像数组键一样被 <a href="https://www.php.net/manual/zh/language.types.array.php#language.types.array.key-casts" class="link">强制转换</a>       （但是，在 PHP 8.0.0 之前，也被允许支持转换为字符串对象）。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-column-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回输入数组中单列值的数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-column-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        <span class="parameter" style="color:#3A95FF">index_key</span> 参数指定的列中的对象不再强制转换为字符串，而是会抛出        <span class="classname"><a href="https://www.php.net/manual/zh/class.typeerror.php" class="classname">TypeError</a></span>。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-column-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 从结果集中取出 first_name 列</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 表示从数据库返回的记录集的数组<br /></span><span style="color: #9876AA">$records </span><span style="color: #007700">= array(<br />    array(<br />        </span><span style="color: #DD0000">'id' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2135</span><span style="color: #007700">,<br />        </span><span style="color: #DD0000">'first_name' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'John'</span><span style="color: #007700">,<br />        </span><span style="color: #DD0000">'last_name' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Doe'</span><span style="color: #007700">,<br />    ),<br />    array(<br />        </span><span style="color: #DD0000">'id' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">3245</span><span style="color: #007700">,<br />        </span><span style="color: #DD0000">'first_name' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Sally'</span><span style="color: #007700">,<br />        </span><span style="color: #DD0000">'last_name' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Smith'</span><span style="color: #007700">,<br />    ),<br />    array(<br />        </span><span style="color: #DD0000">'id' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">5342</span><span style="color: #007700">,<br />        </span><span style="color: #DD0000">'first_name' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Jane'</span><span style="color: #007700">,<br />        </span><span style="color: #DD0000">'last_name' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Jones'</span><span style="color: #007700">,<br />    ),<br />    array(<br />        </span><span style="color: #DD0000">'id' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">5623</span><span style="color: #007700">,<br />        </span><span style="color: #DD0000">'first_name' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Peter'</span><span style="color: #007700">,<br />        </span><span style="color: #DD0000">'last_name' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Doe'</span><span style="color: #007700">,<br />    )<br />);<br /> <br /></span><span style="color: #9876AA">$first_names </span><span style="color: #007700">= </span><span style="color: #9876AA">array_column</span><span style="color: #007700">(</span><span style="color: #9876AA">$records</span><span style="color: #007700">, </span><span style="color: #DD0000">'first_name'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$first_names</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; John<br>    [1] =&gt; Sally<br>    [2] =&gt; Jane<br>    [3] =&gt; Peter<br>)<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2      从结果集中总取出 last_name 列，用相应的“id”作为键值    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 使用示例 #1 中的 $records 数组<br /></span><span style="color: #9876AA">$last_names </span><span style="color: #007700">= </span><span style="color: #9876AA">array_column</span><span style="color: #007700">(</span><span style="color: #9876AA">$records</span><span style="color: #007700">, </span><span style="color: #DD0000">'last_name'</span><span style="color: #007700">, </span><span style="color: #DD0000">'id'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$last_names</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [2135] =&gt; Doe<br>    [3245] =&gt; Smith<br>    [5342] =&gt; Jones<br>    [5623] =&gt; Doe<br>)<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3      username 列是从对象获取 public 的 &quot;username&quot; 属性    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class </span><span style="color: #9876AA">User<br /></span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">$username</span><span style="color: #007700">;<br /><br />    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(</span><span style="color: #9876AA">string $username</span><span style="color: #007700">)<br />    {<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">username </span><span style="color: #007700">= </span><span style="color: #9876AA">$username</span><span style="color: #007700">;<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$users </span><span style="color: #007700">= [<br />    new </span><span style="color: #9876AA">User</span><span style="color: #007700">(</span><span style="color: #DD0000">'user 1'</span><span style="color: #007700">),<br />    new </span><span style="color: #9876AA">User</span><span style="color: #007700">(</span><span style="color: #DD0000">'user 2'</span><span style="color: #007700">),<br />    new </span><span style="color: #9876AA">User</span><span style="color: #007700">(</span><span style="color: #DD0000">'user 3'</span><span style="color: #007700">),<br />];<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_column</span><span style="color: #007700">(</span><span style="color: #9876AA">$users</span><span style="color: #007700">, </span><span style="color: #DD0000">'username'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; user 1<br>    [1] =&gt; user 2<br>    [2] =&gt; user 3<br>)<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #4      通过 <span class="function"><strong style="color:#CC7832">__get()</strong></span> 魔术方法从对象中获取 private 属性的 &quot;name&quot; 列。    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Person<br /></span><span style="color: #007700">{<br />    private </span><span style="color: #9876AA">$name</span><span style="color: #007700">;<br /><br />    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(</span><span style="color: #9876AA">string $name</span><span style="color: #007700">)<br />    {<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">name </span><span style="color: #007700">= </span><span style="color: #9876AA">$name</span><span style="color: #007700">;<br />    }<br /><br />    public function </span><span style="color: #9876AA">__get</span><span style="color: #007700">(</span><span style="color: #9876AA">$prop</span><span style="color: #007700">)<br />    {<br />        return </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">$prop</span><span style="color: #007700">;<br />    }<br /><br />    public function </span><span style="color: #9876AA">__isset</span><span style="color: #007700">(</span><span style="color: #9876AA">$prop</span><span style="color: #007700">) : </span><span style="color: #9876AA">bool<br />    </span><span style="color: #007700">{<br />        return isset(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">$prop</span><span style="color: #007700">);<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$people </span><span style="color: #007700">= [<br />    new </span><span style="color: #9876AA">Person</span><span style="color: #007700">(</span><span style="color: #DD0000">'Fred'</span><span style="color: #007700">),<br />    new </span><span style="color: #9876AA">Person</span><span style="color: #007700">(</span><span style="color: #DD0000">'Jane'</span><span style="color: #007700">),<br />    new </span><span style="color: #9876AA">Person</span><span style="color: #007700">(</span><span style="color: #DD0000">'John'</span><span style="color: #007700">),<br />];<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_column</span><span style="color: #007700">(</span><span style="color: #9876AA">$people</span><span style="color: #007700">, </span><span style="color: #DD0000">'name'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; Fred<br>    [1] =&gt; Jane<br>    [2] =&gt; John<br>)<br></span></div>    </div>   </div>   如果不提供 <span class="function"><strong style="color:#CC7832">__isset()</strong></span>，会返回空数组。  </p> </div></div>
 * @return array Returns an array of values representing a single column from the input array.*/
function array_column(array $array, string|int|null $column_key, string|int|null $index_key = null): array {}

/**
*<div id="function.array-reverse" class="refentry">   <div class="refnamediv">    <h1 class="refname">array_reverse</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_reverse</span> &mdash; <span class="dc-title">     返回单元顺序相反的数组    </span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-reverse-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_reverse</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$preserve_keys</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>    <p class="para rdfs-comment">     <span class="function"><strong style="color:#CC7832">array_reverse()</strong></span> 接受数组     <span class="parameter" style="color:#3A95FF">array</span> 作为输入并返回一个单元为相反顺序的新数组。    </p>  </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-reverse-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">preserve_keys</span></dt>     <dd>      <p class="para">       如果设置为 <strong><span>true</span></strong> 会保留数字的键。       非数字的键则不受这个设置的影响，总是会被保留。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-reverse-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回反转后的数组。  </p> </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-reverse-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_reverse()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$input  </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"php"</span><span style="color: #007700">, </span><span style="color: #9876AA">4.0</span><span style="color: #007700">, array(</span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$reversed </span><span style="color: #007700">= </span><span style="color: #9876AA">array_reverse</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$preserved </span><span style="color: #007700">= </span><span style="color: #9876AA">array_reverse</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$reversed</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$preserved</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; php<br>    [1] =&gt; 4<br>    [2] =&gt; Array<br>        (<br>            [0] =&gt; green<br>            [1] =&gt; red<br>        )<br><br>)<br>Array<br>(<br>    [0] =&gt; Array<br>        (<br>            [0] =&gt; green<br>            [1] =&gt; red<br>        )<br><br>    [1] =&gt; 4<br>    [2] =&gt; php<br>)<br>Array<br>(<br>    [2] =&gt; Array<br>        (<br>            [0] =&gt; green<br>            [1] =&gt; red<br>        )<br><br>    [1] =&gt; 4<br>    [0] =&gt; php<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-reverse-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_flip()} - 交换数组中的键和值</span></li>   </ul>  </span> </div>  </div>
 * @return array the reversed array.*/
function array_reverse(array $array, bool $preserve_keys = false): array {}

/**
*<div id="function.array-reduce" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_reduce</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.5, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_reduce</span> &mdash; <span class="dc-title">用回调函数迭代地将数组简化为单一的值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-reduce-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_reduce</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$initial</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">array_reduce()</strong></span> 将回调函数   <span class="parameter" style="color:#3A95FF">callback</span> 迭代地作用到   <span class="parameter" style="color:#3A95FF">array</span> 数组中的每一个单元中，从而将数组简化为单一的值。     </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-reduce-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的 array。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <div class="methodsynopsis dc-description">       <span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$carry</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$item</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>    <dl>         <dt><span class="parameter" style="color:#3A95FF">carry</span></dt>     <dd>      <p class="para">        携带上次迭代的返回值；       如果本次迭代是第一次，那么这个值是 <span class="parameter" style="color:#3A95FF">initial</span>。      </p>     </dd>                 <dt><span class="parameter" style="color:#3A95FF">item</span></dt>        <dd>         <p class="para">           携带了本次迭代的值。         </p>        </dd>          </dl>     </dd>             <dt><span class="parameter" style="color:#3A95FF">initial</span></dt>     <dd>      <p class="para">       如果指定了可选参数   <span class="parameter" style="color:#3A95FF">initial</span>，该参数将用作处理开始时的初始值，如果数组为空，则会作为最终结果返回。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-reduce-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回结果值。  </p>  <p class="para">   如果数组为空，并且没有指定   <span class="parameter" style="color:#3A95FF">initial</span> 参数，<span class="function"><strong style="color:#CC7832">array_reduce()</strong></span> 返回 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-reduce-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  如果 <span class="parameter" style="color:#3A95FF">callback</span> 接受引用传递参数，该方法将会抛出  <strong><span>E_WARNING</span></strong>。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-reduce-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_reduce()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">sum</span><span style="color: #007700">(</span><span style="color: #9876AA">$carry</span><span style="color: #007700">, </span><span style="color: #9876AA">$item</span><span style="color: #007700">)<br />{<br />    </span><span style="color: #9876AA">$carry </span><span style="color: #007700">+= </span><span style="color: #9876AA">$item</span><span style="color: #007700">;<br />    return </span><span style="color: #9876AA">$carry</span><span style="color: #007700">;<br />}<br /><br />function </span><span style="color: #9876AA">product</span><span style="color: #007700">(</span><span style="color: #9876AA">$carry</span><span style="color: #007700">, </span><span style="color: #9876AA">$item</span><span style="color: #007700">)<br />{<br />    </span><span style="color: #9876AA">$carry </span><span style="color: #007700">*= </span><span style="color: #9876AA">$item</span><span style="color: #007700">;<br />    return </span><span style="color: #9876AA">$carry</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$a </span><span style="color: #007700">= array(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$x </span><span style="color: #007700">= array();<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_reduce</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #DD0000">"sum"</span><span style="color: #007700">)); </span><span style="color: #FF8000">// int(15)<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_reduce</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #DD0000">"product"</span><span style="color: #007700">, </span><span style="color: #9876AA">10</span><span style="color: #007700">)); </span><span style="color: #FF8000">// int(1200), 因为：10*1*2*3*4*5<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_reduce</span><span style="color: #007700">(</span><span style="color: #9876AA">$x</span><span style="color: #007700">, </span><span style="color: #DD0000">"sum"</span><span style="color: #007700">, </span><span style="color: #DD0000">"No data to reduce"</span><span style="color: #007700">)); </span><span style="color: #FF8000">// string(17) "No data to reduce"<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-reduce-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_filter()} - 使用回调函数过滤数组的元素</span></li>    <li class="member"><span class="function">{@link array_map()} - 为数组的每个元素应用回调函数</span></li>    <li class="member"><span class="function">{@link array_unique()} - 移除数组中重复的值</span></li>    <li class="member"><span class="function">{@link array_count_values()} - 统计数组中每个不同值的出现次数</span></li>   </ul>  </span> </div></div>
 * @return mixed the resulting value.*/
function array_reduce(array $array, callable $callback, mixed $initial = null): mixed {}

/**
*<div id="function.array-pad" class="refentry">   <div class="refnamediv">    <h1 class="refname">array_pad</h1>    <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_pad</span> &mdash; <span class="dc-title">     以指定长度将一个值填充进数组    </span></p>   </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-pad-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_pad</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$length</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766">array</span></div>    <p class="para rdfs-comment">     <span class="function"><strong style="color:#CC7832">array_pad()</strong></span> 返回     <span class="parameter" style="color:#3A95FF">array</span> 的一个拷贝，并用     <span class="parameter" style="color:#3A95FF">value</span> 将其填补到     <span class="parameter" style="color:#3A95FF">length</span> 指定的长度。如果     <span class="parameter" style="color:#3A95FF">length</span> 为正，则填补到数组的右侧，如果为负则从左侧开始填补。如果     <span class="parameter" style="color:#3A95FF">length</span> 的绝对值小于或等于     <span class="parameter" style="color:#3A95FF">array</span> 数组的长度则没有任何填补。有可能一次最多填补     1048576 个单元。    </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-pad-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       需要被填充的原始数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">length</span></dt>     <dd>      <p class="para">        新数组的长度。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       将被填充的值，只有在 <span class="parameter" style="color:#3A95FF">array</span> 的现有长度小于       <span class="parameter" style="color:#3A95FF">length</span> 的长度时才有效。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-pad-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span class="parameter" style="color:#3A95FF">array</span> 用  <span class="parameter" style="color:#3A95FF">value</span> 填充到 <span class="parameter" style="color:#3A95FF">length</span>   指定的长度之后的一个副本。如果 <span class="parameter" style="color:#3A95FF">length</span> 为正，则填补到数组的右侧，如果为负则从左侧开始填补。如果   <span class="parameter" style="color:#3A95FF">length</span> 的绝对值小于或等于 <span class="parameter" style="color:#3A95FF">array</span> 数组的长度则没有任何填补。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-pad-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_pad()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$input </span><span style="color: #007700">= array(</span><span style="color: #9876AA">12</span><span style="color: #007700">, </span><span style="color: #9876AA">10</span><span style="color: #007700">, </span><span style="color: #9876AA">9</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">array_pad</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// result 是 array(12, 10, 9, 0, 0)<br /><br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">array_pad</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, -</span><span style="color: #9876AA">7</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// result 是 array(-1, -1, -1, -1, 12, 10, 9)<br /><br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">array_pad</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #DD0000">"noop"</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// 没有填充<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-pad-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_fill()} - 用给定的值填充数组</span></li>    <li class="member"><span class="function">{@link range()} - 根据范围创建数组，包含指定的元素</span></li>   </ul>  </span> </div></div>
 * @return array a copy of the input padded to size specified*/
function array_pad(array $array, int $length, mixed $value): array {}

/**
*<div id="function.array-flip" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_flip</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_flip</span> &mdash; <span class="dc-title">交换数组中的键和值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-flip-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_flip</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">array_flip()</strong></span> 返回一个反转后的 <span class="type" style="color:#EAB766">array</span>，例如   <span class="parameter" style="color:#3A95FF">array</span> 中的键名变成了值，而   <span class="parameter" style="color:#3A95FF">array</span> 中的值成了键名。  </p>  <p class="para">   注意 <span class="parameter" style="color:#3A95FF">array</span> 中的值需要能够作为合法的键名（例如需要是   <span class="type" style="color:#EAB766">int</span> 或者 <span class="type" style="color:#EAB766">string</span>）。如果类型不对，将出现一个警告，并且有问题的键／值对<em>将不会出现在结果里</em>。  </p>  <p class="para">   如果同一个值出现多次，则最后一个键名将作为它的值，其它键会被丢弃。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-flip-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       要交换键/值对的数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-flip-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回交换后的数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-flip-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_flip()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$input </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"oranges"</span><span style="color: #007700">, </span><span style="color: #DD0000">"apples"</span><span style="color: #007700">, </span><span style="color: #DD0000">"pears"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$flipped </span><span style="color: #007700">= </span><span style="color: #9876AA">array_flip</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$flipped</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [oranges] =&gt; 0<br>    [apples] =&gt; 1<br>    [pears] =&gt; 2<br>)<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">array_flip()</strong></span> 例子 : 冲突</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$input </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">"c" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$flipped </span><span style="color: #007700">= </span><span style="color: #9876AA">array_flip</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$flipped</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [1] =&gt; b<br>    [2] =&gt; c<br>)<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-flip-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_values()} - 返回数组中所有的值</span></li>    <li class="member"><span class="function">{@link array_keys()} - 返回数组中部分的或所有的键名</span></li>    <li class="member"><span class="function">{@link array_reverse()} - 返回单元顺序相反的数组</span></li>   </ul>  </span> </div></div>
 * @return int[]|string[] Returns the flipped array.*/
function array_flip(array $array): array {}

/**
*<div id="function.array-change-key-case" class="refentry">   <div class="refnamediv">    <h1 class="refname">array_change_key_case</h1>    <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_change_key_case</span> &mdash; <span class="dc-title">将数组中的所有键名修改为全大写或小写</span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-change-key-case-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_change_key_case</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$case</span><span class="initializer"> = <strong><span>CASE_LOWER</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>    <p class="para rdfs-comment">     <span class="function"><strong style="color:#CC7832">array_change_key_case()</strong></span> 将 <span class="parameter" style="color:#3A95FF">array</span>     数组中的所有键名改为全小写或大写。本函数不改变数字索引。    </p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-change-key-case-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       需要操作的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">case</span></dt>     <dd>      <p class="para">       可以在这里用两个常量，<strong><span>CASE_UPPER</span></strong> 或     <strong><span>CASE_LOWER</span></strong>（默认值）。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-change-key-case-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    返回一个键全是小写或者全是大写的数组；  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-change-key-case-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_change_key_case()</strong></span>例一</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$input_array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"FirSt" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">"SecOnd" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_change_key_case</span><span style="color: #007700">(</span><span style="color: #9876AA">$input_array</span><span style="color: #007700">, </span><span style="color: #9876AA">CASE_UPPER</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [FIRST] =&gt; 1<br>    [SECOND] =&gt; 4<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-change-key-case-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    如果一个数组中的多个键名经过本函数后变成一样的话（例如     &quot;<span>keY</span>&quot; 和 &quot;<span>kEY</span>&quot;），最后一个值将覆盖其它的值。   </p>  </p></blockquote> </div>  </div>
 * @return array an array with its keys lower or uppercased*/
function array_change_key_case(array $array, int $case = CASE_LOWER): array {}

/**
*<div id="function.array-rand" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_rand</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_rand</span> &mdash; <span class="dc-title">从数组中随机取出一个或多个随机键</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-rand-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_rand</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$num</span><span class="initializer"> = 1</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">array</span></span></div>  <p class="para rdfs-comment">   从数组中取出一个或多个随机的单元，并返回随机条目对应的键（一个或多个）。  </p>  <div class="caution"><strong class="caution">警告</strong> <p class="para">  本函数并不会生成安全加密的值，并且<em>不可</em>用于加密或者要求返回值不可猜测的目的。 </p> <p class="para">  如果需要加密安全随机，则可以将 <span class="classname"><a href="https://www.php.net/manual/zh/class.random-engine-secure.php" class="classname">Random\Engine\Secure</a></span> 引擎用于  <span class="classname"><a href="https://www.php.net/manual/zh/class.random-randomizer.php" class="classname">Random\Randomizer</a></span>。对于简单的用例，<span class="function">{@link random_int()}</span>  和 <span class="function">{@link random_bytes()}</span> 函数提供了操作系统的 <abbr title="Cryptographically Secure PseudoRandom Number Generator">CSPRNG</abbr> 支持的方便且安全的 <abbr title="Application Programming Interface">API</abbr>。 </p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-rand-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">num</span></dt>     <dd>      <p class="para">       指定要取出的单元数量。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-rand-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果只取出一个，<span class="function"><strong style="color:#CC7832">array_rand()</strong></span>   返回随机单元的键名。   否则就返回包含随机键名的数组。   完成后，就可以根据随机的键获取数组的随机值。   如果返回的是包含随机键名的数组，数组单元的顺序按照键名在原数组中的顺序排列。   取出数量如果超过 array 的长度，就会导致 <strong><span>E_WARNING</span></strong> 错误，并返回 NULL。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-rand-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.1.0</td>       <td>        内部随机化算法已从 libc rand 函数<a href="https://www.php.net/manual/zh/migration71.incompatible.php#migration71.incompatible.rand-srand-aliases" class="link">更改为</a>使用        <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html" class="link external">&raquo;&nbsp;梅森旋转算法（Mersenne Twister）</a> 随机数生成器。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-rand-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_rand()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$input </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"Neo"</span><span style="color: #007700">, </span><span style="color: #DD0000">"Morpheus"</span><span style="color: #007700">, </span><span style="color: #DD0000">"Trinity"</span><span style="color: #007700">, </span><span style="color: #DD0000">"Cypher"</span><span style="color: #007700">, </span><span style="color: #DD0000">"Tank"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$rand_keys </span><span style="color: #007700">= </span><span style="color: #9876AA">array_rand</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$input</span><span style="color: #007700">[</span><span style="color: #9876AA">$rand_keys</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">$input</span><span style="color: #007700">[</span><span style="color: #9876AA">$rand_keys</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-rand-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Random\Randomizer::pickArrayKeys()} - Select random array keys</span></li>    <li class="member"><span class="function">{@link Random\Randomizer::shuffleArray()} - Get a permutation of an array</span></li>   </ul>  </span> </div></div>
 * @return int|string|array If you are picking only one entry, array_rand*/
function array_rand(array $array, int $num = 1): array|string|int {}

/**
*<div id="function.array-unique" class="refentry">   <div class="refnamediv">    <h1 class="refname">array_unique</h1>    <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_unique</span> &mdash; <span class="dc-title">移除数组中重复的值</span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-unique-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_unique</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>SORT_STRING</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>    <p class="para rdfs-comment">     <span class="function"><strong style="color:#CC7832">array_unique()</strong></span> 接受     <span class="parameter" style="color:#3A95FF">array</span> 作为输入并返回没有重复值的新数组。    </p>    <p class="para">     注意键名保留不变。如果在指定了 <span class="parameter" style="color:#3A95FF">flags</span> 时存在多个相等的元素，     会保留第一个相等的元素的键（key）和值（value）。    </p>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:      <span class="simpara">      当且仅当      <span>(string) $elem1 === (string) $elem2</span> 时两个单元被认为相同。      例如，字符串表达一样时，会使用首个元素。     </span>    </p></blockquote>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-unique-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       第二个可选参数<span class="parameter" style="color:#3A95FF">flags</span> 可用于修改比较行为：      </p>      <p class="para">       比较类型标记：       <ul class="itemizedlist">        <li class="listitem">         <span class="simpara"><strong><span>SORT_REGULAR</span></strong> - 按照通常方法比较（不修改类型）</span>        </li>        <li class="listitem">         <span class="simpara"><strong><span>SORT_NUMERIC</span></strong> - 按照数字形式比较</span>        </li>        <li class="listitem">         <span class="simpara"><strong><span>SORT_STRING</span></strong> - 按照字符串形式比较</span>        </li>        <li class="listitem">         <span class="simpara"><strong><span>SORT_LOCALE_STRING</span></strong> - 根据当前的本地化设置，按照字符串比较。         </span>        </li>       </ul>      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-unique-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回过滤后的数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-unique-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.2.0</td>       <td>        如果 <span class="parameter" style="color:#3A95FF">flags</span> 是 <strong><span>SORT_STRING</span></strong>，        之前会复制 <span class="parameter" style="color:#3A95FF">array</span> 并移除非唯一数组（之后并不打包数组），        现在是通过添加唯一元素来生成新数组。这可能会导致不同的数字索引。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-unique-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_unique()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$input </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">array_unique</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [a] =&gt; green<br>    [0] =&gt; red<br>    [1] =&gt; blue<br>)<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">array_unique()</strong></span> 和类型</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$input </span><span style="color: #007700">= array(</span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #DD0000">"4"</span><span style="color: #007700">, </span><span style="color: #DD0000">"3"</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #DD0000">"3"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">array_unique</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(2) {<br>  [0] =&gt; int(4)<br>  [2] =&gt; string(1) &quot;3&quot;<br>}<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-unique-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    注意， <span class="function"><strong style="color:#CC7832">array_unique()</strong></span> 不能应用于多维数组。   </span>  </p></blockquote> </div><br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-unique-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_count_values()} - 统计数组中每个不同值的出现次数</span></li>   </ul>  </span> </div></div>
 * @return array the filtered array.*/
function array_unique(array $array, int $flags = SORT_STRING): array {}

/**
*<div id="function.array-intersect" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_intersect</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_intersect</span> &mdash; <span class="dc-title">计算数组的交集</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-intersect-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_intersect</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$arrays</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">array_intersect()</strong></span> 返回一个数组，该数组包含了所有在     <span class="parameter" style="color:#3A95FF">array</span> 和其它参数数组中同时存在的值。注意，键名保留不变。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-intersect-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       要检查的数组，作为主值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arrays</span></dt>     <dd>      <p class="para">       要被对比的数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-intersect-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    返回一个数组，该数组包含了所有在   <span class="parameter" style="color:#3A95FF">array</span> 和其它参数数组中同时存在的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-intersect-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>  <td>8.0.0</td>  <td>  现在可以仅使用一个参数调用此函数。以前，至少需要两个参数。  </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-intersect-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_intersect()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array1 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">, </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">array_intersect</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">, </span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [a] =&gt; green<br>    [0] =&gt; red<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-intersect-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">     两个单元仅在 <span>(string) $elem1 === (string) $elem2</span>    时被认为是相同的。也就是说：当字符串的表达形式相同时。       </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-intersect-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>   </ul>  </span> </div></div>
 * @return array an array containing all of the values in*/
function array_intersect(array $array, #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $arrays, array ...$arrays): array {}

/**
*<div id="function.array-intersect-key" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_intersect_key</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_intersect_key</span> &mdash; <span class="dc-title">使用键名比较计算数组的交集</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-intersect-key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_intersect_key</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$arrays</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">array_intersect_key()</strong></span> 返回一个数组，该数组包含了所有出现在   <span class="parameter" style="color:#3A95FF">array</span> 和其它参数数组中同时存在的键名的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-intersect-key-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       要检查的数组，作为主值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arrays</span></dt>     <dd>      <p class="para">       要被对比的数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-intersect-key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个关联数组，该数组包含了所有出现在   <span class="parameter" style="color:#3A95FF">array</span> 和其它参数数组中同时存在的键名的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-intersect-key-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>  <td>8.0.0</td>  <td>  现在可以仅使用一个参数调用此函数。以前，至少需要两个参数。  </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-intersect-key-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_intersect_key()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array1 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'blue'  </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">'red'  </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #DD0000">'green'  </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #DD0000">'purple' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'green' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #DD0000">'blue' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">6</span><span style="color: #007700">, </span><span style="color: #DD0000">'yellow' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">7</span><span style="color: #007700">, </span><span style="color: #DD0000">'cyan'   </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">8</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_intersect_key</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">, </span><span style="color: #9876AA">$array2</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(2) {<br>  [&quot;blue&quot;]=&gt;<br>  int(1)<br>  [&quot;green&quot;]=&gt;<br>  int(3)<br>}<br></span></div>    </div>   </div>  </span>  <p class="para">   上例中可以看到，只有 <span>&#039;blue&#039;</span>   和 <span>&#039;green&#039;</span> 两个键名同时出现在两个数组中，因此被返回。另外注意   <span>&#039;blue&#039;</span> 和 <span>&#039;green&#039;</span>   的值在两个数组中是不同的。但因为只检查键名，因此还是匹配。返回的只是   <span class="parameter" style="color:#3A95FF">array</span> 中的值。  </p>  <p class="para">   在 <span>key =&gt; value</span> 对中的两个键名仅在   <span>(string) $key1 === (string) $key2 </span>   时才被认为相等。换句话说，执行了严格的类型检查，因此字符串的表达形式必须相同。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-intersect-key-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_udiff()} - 用回调函数比较数据来计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_diff_uassoc()} - 用用户提供的回调函数做索引检查来计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_udiff_assoc()} - 带索引检查计算数组的差集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_udiff_uassoc()} - 带索引检查计算数组的差集，用回调函数比较数据和索引</span></li>    <li class="member"><span class="function">{@link array_diff_key()} - 使用键名比较计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_diff_ukey()} - 用回调函数对键名比较计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_uassoc()} - 带索引检查计算数组的交集，用回调函数比较索引</span></li>    <li class="member"><span class="function">{@link array_intersect_ukey()} - 在键名上使用回调函数来比较计算数组的交集</span></li>   </ul>  </span> </div></div>
 * @return array an associative array containing all the values and keys of*/
function array_intersect_key(array $array, #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $arrays, array ...$arrays): array {}

/**
*<div id="function.array-intersect-ukey" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_intersect_ukey</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_intersect_ukey</span> &mdash; <span class="dc-title">在键名上使用回调函数来比较计算数组的交集</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-intersect-ukey-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_intersect_ukey</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$arrays</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$key_compare_func</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">array_intersect_ukey()</strong></span> 返回一个数组，该数组包含了所有在   <span class="parameter" style="color:#3A95FF">array</span> 和其它参数数组中同时存在的键名的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-intersect-ukey-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       用于数组比较的初始数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arrays</span></dt>     <dd>      <p class="para">       用于比较键的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key_compare_func</span></dt>     <dd>      <p class="para"> 在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。</p><div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$b</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="caution"><strong class="caution">警告</strong> <p class="para">  从比较函数中返回<em>非整数</em>值，例如 <span class="type" style="color:#EAB766">float</span>，将导致内部强制转换为 callback 返回值为  <span class="type" style="color:#EAB766">int</span>。因此，诸如 <span>0.99</span> 和 <span>0.1</span> 之类的值都将被转换为整数值  <span>0</span>，将这些值比较的话将会是相等。 </p></div>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-intersect-ukey-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span class="parameter" style="color:#3A95FF">array</span> 的值，其键名同时存在于所有参数数组中。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-intersect-ukey-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_intersect_ukey()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">key_compare_func</span><span style="color: #007700">(</span><span style="color: #9876AA">$key1</span><span style="color: #007700">, </span><span style="color: #9876AA">$key2</span><span style="color: #007700">)<br />{<br />    if (</span><span style="color: #9876AA">$key1 </span><span style="color: #007700">== </span><span style="color: #9876AA">$key2</span><span style="color: #007700">)<br />        return </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />    else if (</span><span style="color: #9876AA">$key1 </span><span style="color: #007700">&gt; </span><span style="color: #9876AA">$key2</span><span style="color: #007700">)<br />        return </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />    else<br />        return -</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$array1 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'blue'  </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">'red'  </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #DD0000">'green'  </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #DD0000">'purple' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'green' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #DD0000">'blue' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">6</span><span style="color: #007700">, </span><span style="color: #DD0000">'yellow' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">7</span><span style="color: #007700">, </span><span style="color: #DD0000">'cyan'   </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">8</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_intersect_ukey</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">, </span><span style="color: #9876AA">$array2</span><span style="color: #007700">, </span><span style="color: #DD0000">'key_compare_func'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(2) {<br>  [&quot;blue&quot;]=&gt;<br>  int(1)<br>  [&quot;green&quot;]=&gt;<br>  int(3)<br>}<br></span></div>    </div>   </div>  </span>  <p class="para">   上例中可以看到，只有 <span>&#039;blue&#039;</span>   和 <span>&#039;green&#039;</span> 两个键名出现在两个数组中，因此被返回。另外注意   <span>&#039;blue&#039;</span> 和 <span>&#039;green&#039;</span>   的值在两个数组中是不同的。但因为只检查键名，因此还是匹配。返回的是   <span class="parameter" style="color:#3A95FF">array</span> 中的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-intersect-ukey-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_udiff()} - 用回调函数比较数据来计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_diff_uassoc()} - 用用户提供的回调函数做索引检查来计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_udiff_assoc()} - 带索引检查计算数组的差集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_udiff_uassoc()} - 带索引检查计算数组的差集，用回调函数比较数据和索引</span></li>    <li class="member"><span class="function">{@link array_diff_key()} - 使用键名比较计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_diff_ukey()} - 用回调函数对键名比较计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_uassoc()} - 带索引检查计算数组的交集，用回调函数比较索引</span></li>    <li class="member"><span class="function">{@link array_intersect_key()} - 使用键名比较计算数组的交集</span></li>   </ul>  </span> </div></div>
 * @return array the values of array1 whose keys exist*/
function array_intersect_ukey(
    array $array,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] array $array2,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] callable $key_compare_func,
    #[PhpStormStubsElementAvailable(from: '8.0')] ...$rest
): array {}

/**
*<div id="function.array-uintersect" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_uintersect</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_uintersect</span> &mdash; <span class="dc-title">计算数组的交集，用回调函数比较数据</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-uintersect-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_uintersect</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$arrays</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$value_compare_func</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">array_uintersect()</strong></span> 返回一个数组，该数组包含了所有在   <span class="parameter" style="color:#3A95FF">array1</span> 中也同时出现在所有其它参数数组中的值。数据比较是用回调函数进行的。   此比较是通过用户提供的回调函数来进行的。如果认为第一个参数小于，等于，或大于第二个参数时必须分别返回一个小于零，等于零，或大于零的整数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-uintersect-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       第一个数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arrays</span></dt>     <dd>      <p class="para">       要比较的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value_compare_func</span></dt>     <dd>      <p class="para"> 在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。</p><div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$b</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="caution"><strong class="caution">警告</strong> <p class="para">  从比较函数中返回<em>非整数</em>值，例如 <span class="type" style="color:#EAB766">float</span>，将导致内部强制转换为 callback 返回值为  <span class="type" style="color:#EAB766">int</span>。因此，诸如 <span>0.99</span> 和 <span>0.1</span> 之类的值都将被转换为整数值  <span>0</span>，将这些值比较的话将会是相等。 </p></div>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-uintersect-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个数组，数组中包含了 <span class="parameter" style="color:#3A95FF">array</span> 中在所有的参数中都存在的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-uintersect-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_uintersect()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array1 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"brown"</span><span style="color: #007700">, </span><span style="color: #DD0000">"c" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"GREEN"</span><span style="color: #007700">, </span><span style="color: #DD0000">"B" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"brown"</span><span style="color: #007700">, </span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_uintersect</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">, </span><span style="color: #9876AA">$array2</span><span style="color: #007700">, </span><span style="color: #DD0000">"strcasecmp"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [a] =&gt; green<br>    [b] =&gt; brown<br>    [0] =&gt; red<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-uintersect-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_uintersect_assoc()} - 带索引检查计算数组的交集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_uintersect_uassoc()} - 带索引检查计算数组的交集，用单独的回调函数比较数据和索引</span></li>   </ul>  </span> </div></div>
 * @return array an array containing all the values and keys of array1*/
function array_uintersect(
    array $array,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] array $array2,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] callable $data_compare_func,
    #[PhpStormStubsElementAvailable(from: '8.0')] ...$rest
): array {}

/**
*<div id="function.array-intersect-assoc" class="refentry"> <div class="refnamediv">   <h1 class="refname">array_intersect_assoc</h1>  <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_intersect_assoc</span> &mdash; <span class="dc-title">带索引检查计算数组的交集</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-intersect-assoc-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_intersect_assoc</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$arrays</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="simpara">   <span class="function"><strong style="color:#CC7832">array_intersect_assoc()</strong></span> 返回一个数组，该数组包含了所有在   <span class="parameter" style="color:#3A95FF">array</span> 和其它参数数组中同时存在的值。注意和   <span class="function">{@link array_intersect()}</span> 不同的是，键名也用于比较。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-intersect-assoc-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       要检查的数组，作为主值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arrays</span></dt>     <dd>      <p class="para">       要被对比的数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-intersect-assoc-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    返回一个关联数组，该数组包含了所有在   <span class="parameter" style="color:#3A95FF">array</span> 和其它参数数组中同时存在的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-intersect-assoc-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>  <td>8.0.0</td>  <td>  现在可以仅使用一个参数调用此函数。以前，至少需要两个参数。  </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-intersect-assoc-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_intersect_assoc()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array1 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"brown"</span><span style="color: #007700">, </span><span style="color: #DD0000">"c" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">, </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result_array </span><span style="color: #007700">= </span><span style="color: #9876AA">array_intersect_assoc</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">, </span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result_array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [a] =&gt; green<br>)<br></span></div>    </div>   </div>  </span>  <p class="simpara">   上面例子中可以看到，只有键值对 <span>&quot;a&quot; =&gt;   &quot;green&quot;</span> 在两个数组中都存在，从而被返回。   值 <span>&quot;red&quot;</span> 没有被返回，是因为在   <var class="varname">$array1</var> 中它的键名是 <span>0</span>   而在 <var class="varname">$array2</var> 中 &quot;red&quot; 的键名是   <span>1</span>，键 <span>&quot;b&quot;</span> 没有返回的原因是，它的值和其他数组不同。  </p>  <p class="simpara">   仅在 <span>(string) $elem1 === (string) $elem2 </span> 时，   <span>key =&gt; value</span> 才被认为是相等的。   也就是说使用了严格的类型检查，字符串的表达形式必须相同。     </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-intersect-assoc-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>   <li class="member"><span class="function">{@link array_uintersect_assoc()} - 带索引检查计算数组的交集，用回调函数比较数据</span></li>   <li class="member"><span class="function">{@link array_intersect_uassoc()} - 带索引检查计算数组的交集，用回调函数比较索引</span></li>   <li class="member"><span class="function">{@link array_uintersect_uassoc()} - 带索引检查计算数组的交集，用单独的回调函数比较数据和索引</span></li>   <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>   <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>  </ul> </div></div>
 * @return array an associative array containing all the values and keys in*/
function array_intersect_assoc(array $array, #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $arrays, array ...$arrays): array {}

/**
*<div id="function.array-uintersect-assoc" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_uintersect_assoc</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_uintersect_assoc</span> &mdash; <span class="dc-title">带索引检查计算数组的交集，用回调函数比较数据</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-uintersect-assoc-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_uintersect_assoc</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$arrays</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$value_compare_func</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   此比较是通过用户提供的回调函数来进行的。如果认为第一个参数小于，等于，或大于第二个参数时必须分别返回一个小于零，等于零，或大于零的整数。  </p>  <p class="para">   注意和   <span class="function">{@link array_uintersect()}</span> 不同的是键名也要比较。数据是用回调函数比较的。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-uintersect-assoc-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       第一个数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arrays</span></dt>     <dd>      <p class="para">       要比较的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value_compare_func</span></dt>     <dd>      <p class="para"> 在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。</p><div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$b</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="caution"><strong class="caution">警告</strong> <p class="para">  从比较函数中返回<em>非整数</em>值，例如 <span class="type" style="color:#EAB766">float</span>，将导致内部强制转换为 callback 返回值为  <span class="type" style="color:#EAB766">int</span>。因此，诸如 <span>0.99</span> 和 <span>0.1</span> 之类的值都将被转换为整数值  <span>0</span>，将这些值比较的话将会是相等。 </p></div>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-uintersect-assoc-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    返回一个数组，该数组包含了所有在   <span class="parameter" style="color:#3A95FF">array</span> 中也同时出现在所有其它参数数组中的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-uintersect-assoc-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_uintersect_assoc()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array1 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"brown"</span><span style="color: #007700">, </span><span style="color: #DD0000">"c" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"GREEN"</span><span style="color: #007700">, </span><span style="color: #DD0000">"B" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"brown"</span><span style="color: #007700">, </span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_uintersect_assoc</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">, </span><span style="color: #9876AA">$array2</span><span style="color: #007700">, </span><span style="color: #DD0000">"strcasecmp"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [a] =&gt; green<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-uintersect-assoc-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_uintersect()} - 计算数组的交集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_uassoc()} - 带索引检查计算数组的交集，用回调函数比较索引</span></li>    <li class="member"><span class="function">{@link array_uintersect_uassoc()} - 带索引检查计算数组的交集，用单独的回调函数比较数据和索引</span></li>   </ul>  </span> </div></div>
 * @return array an array containing all the values and keys of*/
function array_uintersect_assoc(
    array $array,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] array $array2,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] callable $data_compare_func,
    #[PhpStormStubsElementAvailable(from: '8.0')] ...$rest
): array {}

/**
*<div id="function.array-intersect-uassoc" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_intersect_uassoc</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_intersect_uassoc</span> &mdash; <span class="dc-title">带索引检查计算数组的交集，用回调函数比较索引</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-intersect-uassoc-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_intersect_uassoc</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$arrays</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$key_compare_func</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">array_intersect_uassoc()</strong></span> 返回一个数组，该数组包含了所有在   <span class="parameter" style="color:#3A95FF">array</span> 和其它参数数组中同时存在的值。注意和   <span class="function">{@link array_intersect()}</span> 不同的是，键名也用于比较。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-intersect-uassoc-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       用于数组比较的初始数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arrays</span></dt>     <dd>      <p class="para">       用于比较键的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key_compare_func</span></dt>     <dd>      <p class="para"> 在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。</p><div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$b</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="caution"><strong class="caution">警告</strong> <p class="para">  从比较函数中返回<em>非整数</em>值，例如 <span class="type" style="color:#EAB766">float</span>，将导致内部强制转换为 callback 返回值为  <span class="type" style="color:#EAB766">int</span>。因此，诸如 <span>0.99</span> 和 <span>0.1</span> 之类的值都将被转换为整数值  <span>0</span>，将这些值比较的话将会是相等。 </p></div>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-intersect-uassoc-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span class="parameter" style="color:#3A95FF">array</span> 的值，这些值同时存在于其它参数数组中。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-intersect-uassoc-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_intersect_uassoc()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array1 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"brown"</span><span style="color: #007700">, </span><span style="color: #DD0000">"c" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"GREEN"</span><span style="color: #007700">, </span><span style="color: #DD0000">"B" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"brown"</span><span style="color: #007700">, </span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_intersect_uassoc</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">, </span><span style="color: #9876AA">$array2</span><span style="color: #007700">, </span><span style="color: #DD0000">"strcasecmp"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [b] =&gt; brown<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-intersect-uassoc-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_uintersect_assoc()} - 带索引检查计算数组的交集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_uintersect_uassoc()} - 带索引检查计算数组的交集，用单独的回调函数比较数据和索引</span></li>    <li class="member"><span class="function">{@link array_intersect_key()} - 使用键名比较计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_ukey()} - 在键名上使用回调函数来比较计算数组的交集</span></li>   </ul>  </span> </div></div>
 * @return array the values of array1 whose values exist*/
function array_intersect_uassoc(
    array $array,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] array $array2,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] callable $key_compare_func,
    #[PhpStormStubsElementAvailable(from: '8.0')] ...$rest
): array {}

/**
*<div id="function.array-uintersect-uassoc" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_uintersect_uassoc</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_uintersect_uassoc</span> &mdash; <span class="dc-title">带索引检查计算数组的交集，用单独的回调函数比较数据和索引</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-uintersect-uassoc-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_uintersect_uassoc</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array1</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$arrays</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$value_compare_func</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$key_compare_func</span></span><br>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">  通过额外的索引检查、回调函数比较数据和索引来返回多个数组的交集。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-uintersect-uassoc-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array1</span></dt>     <dd>      <p class="para">       第一个数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arrays</span></dt>     <dd>      <p class="para">       更多数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value_compare_func</span></dt>     <dd>      <p class="para"> 在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。</p><div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$b</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="caution"><strong class="caution">警告</strong> <p class="para">  从比较函数中返回<em>非整数</em>值，例如 <span class="type" style="color:#EAB766">float</span>，将导致内部强制转换为 callback 返回值为  <span class="type" style="color:#EAB766">int</span>。因此，诸如 <span>0.99</span> 和 <span>0.1</span> 之类的值都将被转换为整数值  <span>0</span>，将这些值比较的话将会是相等。 </p></div>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key_compare_func</span></dt>     <dd>      <p class="para">       键名比较的回调函数。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-uintersect-uassoc-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    返回一个数组，该数组包含了所有在   <span class="parameter" style="color:#3A95FF">array1</span> 中也同时出现在所有其它参数数组中的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-uintersect-uassoc-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_uintersect_uassoc()</strong></span>  例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array1 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"brown"</span><span style="color: #007700">, </span><span style="color: #DD0000">"c" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"GREEN"</span><span style="color: #007700">, </span><span style="color: #DD0000">"B" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"brown"</span><span style="color: #007700">, </span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_uintersect_uassoc</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">, </span><span style="color: #9876AA">$array2</span><span style="color: #007700">, </span><span style="color: #DD0000">"strcasecmp"</span><span style="color: #007700">, </span><span style="color: #DD0000">"strcasecmp"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [a] =&gt; green<br>    [b] =&gt; brown<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-uintersect-uassoc-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_uintersect()} - 计算数组的交集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_uassoc()} - 带索引检查计算数组的交集，用回调函数比较索引</span></li>    <li class="member"><span class="function">{@link array_uintersect_assoc()} - 带索引检查计算数组的交集，用回调函数比较数据</span></li>   </ul>  </span> </div></div>
 * @return array an array containing all the values and keys of*/
function array_uintersect_uassoc(
    array $array,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] array $array2,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] callable $data_compare_func,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] callable $key_compare_func,
    #[PhpStormStubsElementAvailable(from: '8.0')] ...$rest
): array {}

/**
*<div id="function.array-diff" class="refentry">   <div class="refnamediv">    <h1 class="refname">array_diff</h1>    <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_diff</span> &mdash; <span class="dc-title">计算数组的差集</span></p>   </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-diff-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_diff</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$arrays</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   对比 <span class="parameter" style="color:#3A95FF">array</span> 和其他一个或者多个数组，返回在     <span class="parameter" style="color:#3A95FF">array</span> 中但是不在其他 array 里的值。  </p> </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-diff-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       要被对比的数组      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arrays</span></dt>     <dd>      <p class="para">       和更多数组进行比较      </p>     </dd>       </dl>  </span> </div>       <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-diff-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    返回一个数组，该数组包括了所有在     <span class="parameter" style="color:#3A95FF">array</span> 中但是不在任何其它参数数组中的值。注意键名保留不变。    保留数组 <span class="parameter" style="color:#3A95FF">array</span> 里的键。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-diff-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>  <td>8.0.0</td>  <td>  现在可以仅使用一个参数调用此函数。以前，至少需要两个参数。  </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-diff-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_diff()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array1 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">, </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">array_diff</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">, </span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     在 <var class="varname">$array1</var> 中多次出现的值一样处理，输出结果为：    </p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [1] =&gt; blue<br>)<br></span></div>    </div>   </div>  </span>    <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">array_diff()</strong></span> 不匹配类型的示例</strong></p>    <div class="example-contents"><p>     两个元素只有在 <span>(string) $elem1 === (string) $elem2</span> 相等时视为一致。 也就是<a href="https://www.php.net/manual/zh/language.types.string.php#language.types.string.casting" class="link">字符串转换表达</a>相同。    </p></div>    <div class="example-contents">     <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 数组无法转换成字符串时会产生 Notice 警告<br /></span><span style="color: #9876AA">$source </span><span style="color: #007700">= [</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">];<br /></span><span style="color: #9876AA">$filter </span><span style="color: #007700">= [</span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">, [</span><span style="color: #9876AA">5</span><span style="color: #007700">], </span><span style="color: #9876AA">6</span><span style="color: #007700">];<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">array_diff</span><span style="color: #007700">(</span><span style="color: #9876AA">$source</span><span style="color: #007700">, </span><span style="color: #9876AA">$filter</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 而这个就可以，因为对象可以转换成字符串<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">S </span><span style="color: #007700">{<br />  private </span><span style="color: #9876AA">$v</span><span style="color: #007700">;<br /><br />  public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(</span><span style="color: #9876AA">string $v</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">v </span><span style="color: #007700">= </span><span style="color: #9876AA">$v</span><span style="color: #007700">;<br />  }<br /><br />  public function </span><span style="color: #9876AA">__toString</span><span style="color: #007700">() {<br />    return </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">v</span><span style="color: #007700">;<br />  }<br />}<br /><br /></span><span style="color: #9876AA">$source </span><span style="color: #007700">= [new </span><span style="color: #9876AA">S</span><span style="color: #007700">(</span><span style="color: #DD0000">'a'</span><span style="color: #007700">), new </span><span style="color: #9876AA">S</span><span style="color: #007700">(</span><span style="color: #DD0000">'b'</span><span style="color: #007700">), new </span><span style="color: #9876AA">S</span><span style="color: #007700">(</span><span style="color: #DD0000">'c'</span><span style="color: #007700">)];<br /></span><span style="color: #9876AA">$filter </span><span style="color: #007700">= [new </span><span style="color: #9876AA">S</span><span style="color: #007700">(</span><span style="color: #DD0000">'b'</span><span style="color: #007700">), new </span><span style="color: #9876AA">S</span><span style="color: #007700">(</span><span style="color: #DD0000">'c'</span><span style="color: #007700">), new </span><span style="color: #9876AA">S</span><span style="color: #007700">(</span><span style="color: #DD0000">'d'</span><span style="color: #007700">)];<br /><br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">array_diff</span><span style="color: #007700">(</span><span style="color: #9876AA">$source</span><span style="color: #007700">, </span><span style="color: #9876AA">$filter</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// $result 包含了一个 S('a'); 实例<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     想要使用函数来比较，可使用 <span class="function">{@link array_udiff()}</span>。    </p></div>   </div>  </p> </div>       <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-diff-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    注意本函数只检查了多维数组中的一维。当然可以用      <span>array_diff($array1[0], $array2[0]);</span>      检查更深的维度。   </p>  </p></blockquote> </div>       <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-diff-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_udiff()} - 用回调函数比较数据来计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>   </ul>  </span> </div>     </div>
 * @return array an array containing all the entries from*/
function array_diff(array $array, #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $arrays, array ...$arrays): array {}

/**
*<div id="function.array-diff-key" class="refentry">   <div class="refnamediv">    <h1 class="refname">array_diff_key</h1>    <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_diff_key</span> &mdash; <span class="dc-title">使用键名比较计算数组的差集</span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-diff-key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_diff_key</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$arrays</span></span>): <span class="type" style="color:#EAB766">array</span></div>    <p class="para rdfs-comment">     根据 <span class="parameter" style="color:#3A95FF">array</span> 中的键名和 <span class="parameter" style="color:#3A95FF">arrays</span> 进行比较，返回不同键名的项。     本函数和     <span class="function">{@link array_diff()}</span> 相同只除了比较是根据键名而不是值来进行的。    </p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-diff-key-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       从这个数组进行比较      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arrays</span></dt>     <dd>      <p class="para">       要进行比较的数组      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-diff-key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个数组，该数组包含了所有出现在 <span class="parameter" style="color:#3A95FF">array</span> 中但是未出现在任何其它数组中的键名的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-diff-key-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>  <td>8.0.0</td>  <td>  现在可以仅使用一个参数调用此函数。以前，至少需要两个参数。  </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-diff-key-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_diff_key()</strong></span> 例</strong></p>    <div class="example-contents"><p>      在 <span>key =&gt; value</span> 对中的两个键名仅在     <span>(string) $key1 === (string) $key2 </span>     时被认为相等。换句话说，执行的是严格类型检查，因此字符串的表达必须完全一样。    </p></div>      <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array1 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'blue' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">'red' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #DD0000">'green' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #DD0000">'purple' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'green' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #DD0000">'yellow' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">7</span><span style="color: #007700">, </span><span style="color: #DD0000">'cyan' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">8</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_diff_key</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">, </span><span style="color: #9876AA">$array2</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(3) {<br>  [&quot;blue&quot;]=&gt;<br>  int(1)<br>  [&quot;red&quot;]=&gt;<br>  int(2)<br>  [&quot;purple&quot;]=&gt;<br>  int(4)<br>}<br></span></div>    </div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array1 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'blue' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">'red'  </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #DD0000">'green' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #DD0000">'purple' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'green' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #DD0000">'yellow' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">7</span><span style="color: #007700">, </span><span style="color: #DD0000">'cyan' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">8</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array3 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'blue' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">6</span><span style="color: #007700">, </span><span style="color: #DD0000">'yellow' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">7</span><span style="color: #007700">, </span><span style="color: #DD0000">'mauve' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">8</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_diff_key</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">, </span><span style="color: #9876AA">$array2</span><span style="color: #007700">, </span><span style="color: #9876AA">$array3</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(2) {<br>  [&quot;red&quot;]=&gt;<br>  int(2)<br>  [&quot;purple&quot;]=&gt;<br>  int(4)<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-diff-key-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">      注意本函数只检查了多维数组中的一维。当然，可以用      <span>array_diff_key($array1[0], $array2[0]);</span>      来检查更深的维度。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-diff-key-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_udiff()} - 用回调函数比较数据来计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_diff_uassoc()} - 用用户提供的回调函数做索引检查来计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_udiff_assoc()} - 带索引检查计算数组的差集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_udiff_uassoc()} - 带索引检查计算数组的差集，用回调函数比较数据和索引</span></li>    <li class="member"><span class="function">{@link array_diff_ukey()} - 用回调函数对键名比较计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_uassoc()} - 带索引检查计算数组的交集，用回调函数比较索引</span></li>    <li class="member"><span class="function">{@link array_intersect_key()} - 使用键名比较计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_ukey()} - 在键名上使用回调函数来比较计算数组的交集</span></li>   </ul>  </span> </div>  </div>
 * @return array an array containing all the values and keys from*/
function array_diff_key(array $array, #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $arrays, array ...$arrays): array {}

/**
*<div id="function.array-diff-ukey" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_diff_ukey</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_diff_ukey</span> &mdash; <span class="dc-title">用回调函数对键名比较计算数组的差集</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-diff-ukey-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_diff_ukey</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$arrays</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$key_compare_func</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   将 <span class="parameter" style="color:#3A95FF">array</span> 的键与 <span class="parameter" style="color:#3A95FF">arrays</span>   的键进行比较并返回不存在于其它数组的键值。本函数和   <span class="function">{@link array_diff()}</span> 很像，区别只是用键名来比较而不是值。  </p>  <p class="para">   此比较是通过用户提供的回调函数来进行的。如果认为第一个参数小于，等于，或大于第二个参数时必须分别返回一个小于零，等于零，或大于零的整数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-diff-ukey-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       要比较的数组      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arrays</span></dt>     <dd>      <p class="para">       要比较的数组      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key_compare_func</span></dt>     <dd>      <p class="para"> 在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。</p><div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$b</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="caution"><strong class="caution">警告</strong> <p class="para">  从比较函数中返回<em>非整数</em>值，例如 <span class="type" style="color:#EAB766">float</span>，将导致内部强制转换为 callback 返回值为  <span class="type" style="color:#EAB766">int</span>。因此，诸如 <span>0.99</span> 和 <span>0.1</span> 之类的值都将被转换为整数值  <span>0</span>，将这些值比较的话将会是相等。 </p></div>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-diff-ukey-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个 <span class="type" style="color:#EAB766">array</span>，该数组包含了 <span class="parameter" style="color:#3A95FF">array</span> 中存在但其它数组不存在的键值。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-diff-ukey-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_diff_ukey()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">key_compare_func</span><span style="color: #007700">(</span><span style="color: #9876AA">$key1</span><span style="color: #007700">, </span><span style="color: #9876AA">$key2</span><span style="color: #007700">)<br />{<br />    if (</span><span style="color: #9876AA">$key1 </span><span style="color: #007700">== </span><span style="color: #9876AA">$key2</span><span style="color: #007700">)<br />        return </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />    else if (</span><span style="color: #9876AA">$key1 </span><span style="color: #007700">&gt; </span><span style="color: #9876AA">$key2</span><span style="color: #007700">)<br />        return </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />    else<br />        return -</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$array1 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'blue'  </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">'red'  </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #DD0000">'green'  </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #DD0000">'purple' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'green' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #DD0000">'blue' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">6</span><span style="color: #007700">, </span><span style="color: #DD0000">'yellow' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">7</span><span style="color: #007700">, </span><span style="color: #DD0000">'cyan'   </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">8</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_diff_ukey</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">, </span><span style="color: #9876AA">$array2</span><span style="color: #007700">, </span><span style="color: #DD0000">'key_compare_func'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(2) {<br>  [&quot;red&quot;]=&gt;<br>  int(2)<br>  [&quot;purple&quot;]=&gt;<br>  int(4)<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-diff-ukey-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    注意本函数只检查了多维数组中的一维。当然，可以用    <span>array_diff_ukey($array1[0], $array2[0], &#039;callback_func&#039;);</span>    来检查更深的维度。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-diff-ukey-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_udiff()} - 用回调函数比较数据来计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_diff_uassoc()} - 用用户提供的回调函数做索引检查来计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_udiff_assoc()} - 带索引检查计算数组的差集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_udiff_uassoc()} - 带索引检查计算数组的差集，用回调函数比较数据和索引</span></li>    <li class="member"><span class="function">{@link array_diff_key()} - 使用键名比较计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_uassoc()} - 带索引检查计算数组的交集，用回调函数比较索引</span></li>    <li class="member"><span class="function">{@link array_intersect_key()} - 使用键名比较计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_ukey()} - 在键名上使用回调函数来比较计算数组的交集</span></li>   </ul>  </span> </div></div>
 * @return array an array containing all the values and keys from*/
function array_diff_ukey(
    array $array,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] array $array2,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] callable $key_compare_func,
    #[PhpStormStubsElementAvailable(from: '8.0')] ...$rest,
): array {}

/**
*<div id="function.array-udiff" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_udiff</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_udiff</span> &mdash; <span class="dc-title">用回调函数比较数据来计算数组的差集</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-udiff-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_udiff</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$arrays</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$value_compare_func</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   使用回调函数比较数据，计算数组的不同之处。和 <span class="function">{@link array_diff()}</span> 不同的是，前者使用内置函数进行数据比较。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-udiff-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       第一个数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arrays</span></dt>     <dd>      <p class="para">       要对比的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value_compare_func</span></dt>     <dd>      <p class="para"> 在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。</p><div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$b</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="caution"><strong class="caution">警告</strong> <p class="para">  从比较函数中返回<em>非整数</em>值，例如 <span class="type" style="color:#EAB766">float</span>，将导致内部强制转换为 callback 返回值为  <span class="type" style="color:#EAB766">int</span>。因此，诸如 <span>0.99</span> 和 <span>0.1</span> 之类的值都将被转换为整数值  <span>0</span>，将这些值比较的话将会是相等。 </p></div>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-udiff-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span class="parameter" style="color:#3A95FF">array</span> 里没有出现在其他参数里的所有值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-udiff-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_udiff()</strong></span> 使用 stdClass 对象的例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 要对比的数组<br /></span><span style="color: #9876AA">$array1 </span><span style="color: #007700">= array(new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">, new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">,<br />                new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">, new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">,<br />               );<br /><br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(<br />                new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">, new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">,<br />               );<br /><br /></span><span style="color: #FF8000">// 为每个对象设置一些属性<br /></span><span style="color: #9876AA">$array1</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">width </span><span style="color: #007700">= </span><span style="color: #9876AA">11</span><span style="color: #007700">; </span><span style="color: #9876AA">$array1</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">height </span><span style="color: #007700">= </span><span style="color: #9876AA">3</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$array1</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">width </span><span style="color: #007700">= </span><span style="color: #9876AA">7</span><span style="color: #007700">;  </span><span style="color: #9876AA">$array1</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">height </span><span style="color: #007700">= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$array1</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">width </span><span style="color: #007700">= </span><span style="color: #9876AA">2</span><span style="color: #007700">;  </span><span style="color: #9876AA">$array1</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">height </span><span style="color: #007700">= </span><span style="color: #9876AA">9</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$array1</span><span style="color: #007700">[</span><span style="color: #9876AA">3</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">width </span><span style="color: #007700">= </span><span style="color: #9876AA">5</span><span style="color: #007700">;  </span><span style="color: #9876AA">$array1</span><span style="color: #007700">[</span><span style="color: #9876AA">3</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">height </span><span style="color: #007700">= </span><span style="color: #9876AA">7</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$array2</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">width </span><span style="color: #007700">= </span><span style="color: #9876AA">7</span><span style="color: #007700">;  </span><span style="color: #9876AA">$array2</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">height </span><span style="color: #007700">= </span><span style="color: #9876AA">5</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$array2</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">width </span><span style="color: #007700">= </span><span style="color: #9876AA">9</span><span style="color: #007700">;  </span><span style="color: #9876AA">$array2</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">height </span><span style="color: #007700">= </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br /><br />function </span><span style="color: #9876AA">compare_by_area</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$areaA </span><span style="color: #007700">= </span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">width </span><span style="color: #007700">* </span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">height</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$areaB </span><span style="color: #007700">= </span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">width </span><span style="color: #007700">* </span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">height</span><span style="color: #007700">;<br />    <br />    if (</span><span style="color: #9876AA">$areaA </span><span style="color: #007700">&lt; </span><span style="color: #9876AA">$areaB</span><span style="color: #007700">) {<br />        return -</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />    } elseif (</span><span style="color: #9876AA">$areaA </span><span style="color: #007700">&gt; </span><span style="color: #9876AA">$areaB</span><span style="color: #007700">) {<br />        return </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />    } else {<br />        return </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />    }<br />}<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_udiff</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">, </span><span style="color: #9876AA">$array2</span><span style="color: #007700">, </span><span style="color: #DD0000">'compare_by_area'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; stdClass Object<br>        (<br>            [width] =&gt; 11<br>            [height] =&gt; 3<br>        )<br><br>    [1] =&gt; stdClass Object<br>        (<br>            [width] =&gt; 7<br>            [height] =&gt; 1<br>        )<br><br>)<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">array_udiff()</strong></span> 使用 DateTime 对象的例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">MyCalendar </span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">$free </span><span style="color: #007700">= array();<br />    public </span><span style="color: #9876AA">$booked </span><span style="color: #007700">= array();<br /><br />    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(</span><span style="color: #9876AA">$week </span><span style="color: #007700">= </span><span style="color: #DD0000">'now'</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">$start </span><span style="color: #007700">= new </span><span style="color: #9876AA">DateTime</span><span style="color: #007700">(</span><span style="color: #9876AA">$week</span><span style="color: #007700">);<br />        </span><span style="color: #9876AA">$start</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">modify</span><span style="color: #007700">(</span><span style="color: #DD0000">'Monday this week midnight'</span><span style="color: #007700">);<br />        </span><span style="color: #9876AA">$end </span><span style="color: #007700">= clone </span><span style="color: #9876AA">$start</span><span style="color: #007700">;<br />        </span><span style="color: #9876AA">$end</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">modify</span><span style="color: #007700">(</span><span style="color: #DD0000">'Friday this week midnight'</span><span style="color: #007700">);<br />        </span><span style="color: #9876AA">$interval </span><span style="color: #007700">= new </span><span style="color: #9876AA">DateInterval</span><span style="color: #007700">(</span><span style="color: #DD0000">'P1D'</span><span style="color: #007700">);<br />        foreach (new </span><span style="color: #9876AA">DatePeriod</span><span style="color: #007700">(</span><span style="color: #9876AA">$start</span><span style="color: #007700">, </span><span style="color: #9876AA">$interval</span><span style="color: #007700">, </span><span style="color: #9876AA">$end</span><span style="color: #007700">) as </span><span style="color: #9876AA">$freeTime</span><span style="color: #007700">) {<br />            </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">free</span><span style="color: #007700">[] = </span><span style="color: #9876AA">$freeTime</span><span style="color: #007700">;<br />        }<br />    }<br /><br />    public function </span><span style="color: #9876AA">bookAppointment</span><span style="color: #007700">(</span><span style="color: #9876AA">DateTime $date</span><span style="color: #007700">, </span><span style="color: #9876AA">$note</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">booked</span><span style="color: #007700">[] = array(</span><span style="color: #DD0000">'date' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$date</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">modify</span><span style="color: #007700">(</span><span style="color: #DD0000">'midnight'</span><span style="color: #007700">), </span><span style="color: #DD0000">'note' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$note</span><span style="color: #007700">);<br />    }<br /><br />    public function </span><span style="color: #9876AA">checkAvailability</span><span style="color: #007700">() {<br />        return </span><span style="color: #9876AA">array_udiff</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">free</span><span style="color: #007700">, </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">booked</span><span style="color: #007700">, array(</span><span style="color: #9876AA">$this</span><span style="color: #007700">, </span><span style="color: #DD0000">'customCompare'</span><span style="color: #007700">));<br />    }<br />    <br />    public function </span><span style="color: #9876AA">customCompare</span><span style="color: #007700">(</span><span style="color: #9876AA">$free</span><span style="color: #007700">, </span><span style="color: #9876AA">$booked</span><span style="color: #007700">) {<br />        if (</span><span style="color: #9876AA">is_array</span><span style="color: #007700">(</span><span style="color: #9876AA">$free</span><span style="color: #007700">)) </span><span style="color: #9876AA">$a </span><span style="color: #007700">= </span><span style="color: #9876AA">$free</span><span style="color: #007700">[</span><span style="color: #DD0000">'date'</span><span style="color: #007700">];<br />        else </span><span style="color: #9876AA">$a </span><span style="color: #007700">= </span><span style="color: #9876AA">$free</span><span style="color: #007700">;<br />        if (</span><span style="color: #9876AA">is_array</span><span style="color: #007700">(</span><span style="color: #9876AA">$booked</span><span style="color: #007700">)) </span><span style="color: #9876AA">$b </span><span style="color: #007700">= </span><span style="color: #9876AA">$booked</span><span style="color: #007700">[</span><span style="color: #DD0000">'date'</span><span style="color: #007700">];<br />        else </span><span style="color: #9876AA">$b </span><span style="color: #007700">= </span><span style="color: #9876AA">$booked</span><span style="color: #007700">;<br />        if (</span><span style="color: #9876AA">$a </span><span style="color: #007700">== </span><span style="color: #9876AA">$b</span><span style="color: #007700">) {<br />            return </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />        } elseif (</span><span style="color: #9876AA">$a </span><span style="color: #007700">&gt; </span><span style="color: #9876AA">$b</span><span style="color: #007700">) {<br />            return </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />        } else {<br />            return -</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />        }<br />    }<br />}<br /><br /></span><span style="color: #FF8000">// 为每周日程创建日历<br /></span><span style="color: #9876AA">$myCalendar </span><span style="color: #007700">= new </span><span style="color: #9876AA">MyCalendar</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 为本周预约一些日程<br /></span><span style="color: #9876AA">$myCalendar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bookAppointment</span><span style="color: #007700">(new </span><span style="color: #9876AA">DateTime</span><span style="color: #007700">(</span><span style="color: #DD0000">'Monday this week'</span><span style="color: #007700">), </span><span style="color: #DD0000">"Cleaning GoogleGuy's apartment."</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$myCalendar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bookAppointment</span><span style="color: #007700">(new </span><span style="color: #9876AA">DateTime</span><span style="color: #007700">(</span><span style="color: #DD0000">'Wednesday this week'</span><span style="color: #007700">), </span><span style="color: #DD0000">"Going on a snowboarding trip."</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$myCalendar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bookAppointment</span><span style="color: #007700">(new </span><span style="color: #9876AA">DateTime</span><span style="color: #007700">(</span><span style="color: #DD0000">'Friday this week'</span><span style="color: #007700">), </span><span style="color: #DD0000">"Fixing buggy code."</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 通过对比 $booked 日期和 $free 日期获取空闲的天数<br /></span><span style="color: #007700">echo </span><span style="color: #DD0000">"I'm available on the following days this week...\n\n"</span><span style="color: #007700">;<br />foreach (</span><span style="color: #9876AA">$myCalendar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">checkAvailability</span><span style="color: #007700">() as </span><span style="color: #9876AA">$free</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$free</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">format</span><span style="color: #007700">(</span><span style="color: #DD0000">'l'</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">; <br />}<br />echo </span><span style="color: #DD0000">"\n\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"I'm busy on the following days this week...\n\n"</span><span style="color: #007700">;<br />foreach (</span><span style="color: #9876AA">$myCalendar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">booked </span><span style="color: #007700">as </span><span style="color: #9876AA">$booked</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$booked</span><span style="color: #007700">[</span><span style="color: #DD0000">'date'</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">format</span><span style="color: #007700">(</span><span style="color: #DD0000">'l'</span><span style="color: #007700">), </span><span style="color: #DD0000">": "</span><span style="color: #007700">, </span><span style="color: #9876AA">$booked</span><span style="color: #007700">[</span><span style="color: #DD0000">'note'</span><span style="color: #007700">], </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">; <br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>I&#039;m available on the following days this week...<br><br>Tuesday<br>Thursday<br><br><br>I&#039;m busy on the following days this week...<br><br>Monday: Cleaning GoogleGuy&#039;s apartment.<br>Wednesday: Going on a snowboarding trip.<br>Friday: Fixing buggy code.<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-udiff-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    注意本函数只检查了多维数组中的一维。当然，可以用    <span>array_udiff($array1[0], $array2[0], &quot;data_compare_func&quot;);</span>    来检查更深的维度。   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-udiff-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_diff_uassoc()} - 用用户提供的回调函数做索引检查来计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_udiff_assoc()} - 带索引检查计算数组的差集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_udiff_uassoc()} - 带索引检查计算数组的差集，用回调函数比较数据和索引</span></li>    <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_uintersect()} - 计算数组的交集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_uintersect_assoc()} - 带索引检查计算数组的交集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_uintersect_uassoc()} - 带索引检查计算数组的交集，用单独的回调函数比较数据和索引</span></li>   </ul>  </span> </div></div>
 * @return array an array containing all the values and keys of array1*/
function array_udiff(
    array $array,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] array $array2,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] callable $data_compare_func,
    #[PhpStormStubsElementAvailable(from: '8.0')] ...$rest,
): array {}

/**
*<div id="function.array-diff-assoc" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_diff_assoc</h1>  <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_diff_assoc</span> &mdash; <span class="dc-title">带索引检查计算数组的差集</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-diff-assoc-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_diff_assoc</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$arrays</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">array_diff_assoc()</strong></span> 返回一个数组，该数组包括了所有在   <span class="parameter" style="color:#3A95FF">array</span> 中但是不在任何其它参数 <span class="parameter" style="color:#3A95FF">arrays</span> 中的值。注意和   <span class="function">{@link array_diff()}</span> 不同的是键名也用于比较。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-diff-assoc-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       从这个数组进行比较      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arrays</span></dt>     <dd>      <p class="para">       要比较的数组      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-diff-assoc-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个 <span class="type" style="color:#EAB766">array</span>，包含所有在   <span class="parameter" style="color:#3A95FF">array</span> 中但是不在任何其它参数数组中的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-diff-assoc-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>  <td>8.0.0</td>  <td>  现在可以仅使用一个参数调用此函数。以前，至少需要两个参数。  </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-diff-assoc-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_diff_assoc()</strong></span> 示例</strong></p>    <div class="example-contents"><p>     在此示例中，键值对 <span>&quot;a&quot; =&gt; &quot;green&quot;</span> 在两个数组中都有，因此不在本函数的输出中。不同的是，键值对     <span>0 =&gt; &quot;red&quot;</span> 出现在输出中，这是因为第一个数组的 <span>&quot;red&quot;</span> 的 key 自动分配为     <span>0</span>，而在第二个数组中，由于键名 <span>0</span> 已经被 <span>yellow</span>     占用，key 分配为 <span>1</span>。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array1 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"brown"</span><span style="color: #007700">, </span><span style="color: #DD0000">"c" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">array_diff_assoc</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">, </span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [b] =&gt; brown<br>    [c] =&gt; blue<br>    [0] =&gt; red<br>)<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">array_diff_assoc()</strong></span> 示例</strong></p>    <div class="example-contents"><p>     键值对 <em>key =&gt; value</em>     中的两个值仅在 <span>(string) $elem1 === (string)     $elem2 </span> 时被认为相等。也就是说使用了严格检查，字符串的表达必须相同。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array1 </span><span style="color: #007700">= array(</span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"00"</span><span style="color: #007700">, </span><span style="color: #DD0000">"01"</span><span style="color: #007700">, </span><span style="color: #DD0000">"2"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">array_diff_assoc</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">, </span><span style="color: #9876AA">$array2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; 0<br>    [1] =&gt; 1<br>)<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-diff-assoc-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    注意本函数只检查了多维数组中的一维。可以用    <span>array_diff_assoc($array1[0], $array2[0]);</span>    检查更深的维度。   </span>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    使用更多的键比较相似数组时，确保参数传入的顺序是正确的。新的数组应该是在列表里的第一个。   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-diff-assoc-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_diff_uassoc()} - 用用户提供的回调函数做索引检查来计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_udiff_assoc()} - 带索引检查计算数组的差集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_udiff_uassoc()} - 带索引检查计算数组的差集，用回调函数比较数据和索引</span></li>    <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>   </ul>  </span> </div></div>
 * @return array an array containing all the values from*/
function array_diff_assoc(
    array $array,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $arrays,
    array ...$arrays
): array {}

/**
*<div id="function.array-udiff-assoc" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_udiff_assoc</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_udiff_assoc</span> &mdash; <span class="dc-title">带索引检查计算数组的差集，用回调函数比较数据</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-udiff-assoc-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_udiff_assoc</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$arrays</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$value_compare_func</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   此比较是通过用户提供的回调函数来进行的。如果认为第一个参数小于，等于，或大于第二个参数时必须分别返回一个小于零，等于零，或大于零的整数。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    注意本函数只检查了多维数组中的一维。当然，可以用    <span>array_udiff_assoc($array1[0], $array2[0], &quot;some_comparison_func&quot;);</span>    来检查更深的维度。   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-udiff-assoc-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       第一个数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arrays</span></dt>     <dd>      <p class="para">       要比较的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value_compare_func</span></dt>     <dd>      <p class="para"> 在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。</p><div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$b</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="caution"><strong class="caution">警告</strong> <p class="para">  从比较函数中返回<em>非整数</em>值，例如 <span class="type" style="color:#EAB766">float</span>，将导致内部强制转换为 callback 返回值为  <span class="type" style="color:#EAB766">int</span>。因此，诸如 <span>0.99</span> 和 <span>0.1</span> 之类的值都将被转换为整数值  <span>0</span>，将这些值比较的话将会是相等。 </p></div>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-udiff-assoc-returnvalues">  <h3 class="title">返回值</h3>  <p class="para"> <span class="function"><strong style="color:#CC7832">array_udiff_assoc()</strong></span> 返回一个数组，该数组包括了所有在   <span class="parameter" style="color:#3A95FF">array</span> 中但是不在任何其它参数数组中的值。注意和   <span class="function">{@link array_diff()}</span> 与 <span class="function">{@link array_udiff()}</span>   不同的是键名也用于比较。数组数据的比较是用用户提供的回调函数进行的。在此方面和   <span class="function">{@link array_diff_assoc()}</span> 的行为正好相反，后者是用内部函数进行比较的。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-udiff-assoc-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_udiff_assoc()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">cr </span><span style="color: #007700">{<br />    private </span><span style="color: #9876AA">$priv_member</span><span style="color: #007700">;<br />    function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(</span><span style="color: #9876AA">$val</span><span style="color: #007700">)<br />    {<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member </span><span style="color: #007700">= </span><span style="color: #9876AA">$val</span><span style="color: #007700">;<br />    }<br /><br />    static function </span><span style="color: #9876AA">comp_func_cr</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">)<br />    {<br />        if (</span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member </span><span style="color: #007700">=== </span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member</span><span style="color: #007700">) return </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />        return (</span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member </span><span style="color: #007700">&gt; </span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member</span><span style="color: #007700">)? </span><span style="color: #9876AA">1</span><span style="color: #007700">:-</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$a </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"0.1" </span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">9</span><span style="color: #007700">), </span><span style="color: #DD0000">"0.5" </span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">12</span><span style="color: #007700">), </span><span style="color: #9876AA">0 </span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">23</span><span style="color: #007700">), </span><span style="color: #9876AA">1</span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">4</span><span style="color: #007700">), </span><span style="color: #9876AA">2 </span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(-</span><span style="color: #9876AA">15</span><span style="color: #007700">),);<br /></span><span style="color: #9876AA">$b </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"0.2" </span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">9</span><span style="color: #007700">), </span><span style="color: #DD0000">"0.5" </span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">22</span><span style="color: #007700">), </span><span style="color: #9876AA">0 </span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">3</span><span style="color: #007700">), </span><span style="color: #9876AA">1</span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">4</span><span style="color: #007700">), </span><span style="color: #9876AA">2 </span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(-</span><span style="color: #9876AA">15</span><span style="color: #007700">),);<br /><br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">array_udiff_assoc</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">, array(</span><span style="color: #DD0000">"cr"</span><span style="color: #007700">, </span><span style="color: #DD0000">"comp_func_cr"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0.1] =&gt; cr Object<br>        (<br>            [priv_member:private] =&gt; 9<br>        )<br><br>    [0.5] =&gt; cr Object<br>        (<br>            [priv_member:private] =&gt; 12<br>        )<br><br>    [0] =&gt; cr Object<br>        (<br>            [priv_member:private] =&gt; 23<br>        )<br>)<br></span></div>    </div>   </div>  </span>  <p class="simpara">   上例中可以看到键值对 <span>&quot;1&quot; =&gt; new cr(4)</span>   同时出现在两个数组中因此不在本函数的输出中。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-udiff-assoc-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_diff_uassoc()} - 用用户提供的回调函数做索引检查来计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_udiff()} - 用回调函数比较数据来计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_udiff_uassoc()} - 带索引检查计算数组的差集，用回调函数比较数据和索引</span></li>    <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_uintersect()} - 计算数组的交集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_uintersect_assoc()} - 带索引检查计算数组的交集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_uintersect_uassoc()} - 带索引检查计算数组的交集，用单独的回调函数比较数据和索引</span></li>   </ul>  </span> </div></div>
 * @return array array_udiff_assoc returns an array*/
function array_udiff_assoc(
    array $array,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] array $array2,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] callable $data_compare_func,
    #[PhpStormStubsElementAvailable(from: '8.0')] ...$rest,
): array {}

/**
*<div id="function.array-diff-uassoc" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_diff_uassoc</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_diff_uassoc</span> &mdash; <span class="dc-title">用用户提供的回调函数做索引检查来计算数组的差集</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-diff-uassoc-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_diff_uassoc</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$arrays</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$key_compare_func</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   比较了 <span class="parameter" style="color:#3A95FF">array</span> 和 <span class="parameter" style="color:#3A95FF">arrays</span> 并返回不同之处。   注意和   <span class="function">{@link array_diff()}</span> 不同的是键名也用于比较。  </p>  <p class="para">   和 <span class="function">{@link array_diff_assoc()}</span>   不同的是使用了用户自定义的回调函数，而不是内置的函数。  </p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-diff-uassoc-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       待比较的数组      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arrays</span></dt>     <dd>      <p class="para">       要比较的数组      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key_compare_func</span></dt>     <dd>      <p class="para"> 在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。</p><div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$b</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="caution"><strong class="caution">警告</strong> <p class="para">  从比较函数中返回<em>非整数</em>值，例如 <span class="type" style="color:#EAB766">float</span>，将导致内部强制转换为 callback 返回值为  <span class="type" style="color:#EAB766">int</span>。因此，诸如 <span>0.99</span> 和 <span>0.1</span> 之类的值都将被转换为整数值  <span>0</span>，将这些值比较的话将会是相等。 </p></div>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-diff-uassoc-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个 <span class="type" style="color:#EAB766">array</span>，该数组包括了所有在   <span class="parameter" style="color:#3A95FF">array</span> 中但是不在任何其它参数数组中的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-diff-uassoc-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_diff_uassoc()</strong></span> 示例</strong></p>    <div class="example-contents"><p>     在此示例中，键值对 <span>&quot;a&quot; =&gt; &quot;green&quot;</span> 在两个数组中都有，因此不在本函数的输出中。不同的是，键值对     <span>0 =&gt; &quot;red&quot;</span> 出现在输出中，这是因为第一个数组的 <span>&quot;red&quot;</span> 的 key 自动分配为     <span>0</span>，而在第二个数组中，由于键名 <span>0</span> 已经被 <span>yellow</span>     占用，key 分配为 <span>1</span>。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">key_compare_func</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">)<br />{<br />    return </span><span style="color: #9876AA">$a </span><span style="color: #007700">&lt;=&gt; </span><span style="color: #9876AA">$b</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$array1 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"brown"</span><span style="color: #007700">, </span><span style="color: #DD0000">"c" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"blue"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"green"</span><span style="color: #007700">, </span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">, </span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">array_diff_uassoc</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">, </span><span style="color: #9876AA">$array2</span><span style="color: #007700">, </span><span style="color: #DD0000">"key_compare_func"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [b] =&gt; brown<br>    [c] =&gt; blue<br>    [0] =&gt; red<br>)<br></span></div>    </div>    <div class="example-contents"><p>     通过用户提供的回调函数检查两个数组的索引是否相等。    </p></div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-diff-uassoc-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    注意本函数只检查了多维数组中的一维。可以用    <span>array_diff_uassoc($array1[0], $array2[0], &quot;key_compare_func&quot;);</span>    检查更深的维度。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-diff-uassoc-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_udiff()} - 用回调函数比较数据来计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_udiff_assoc()} - 带索引检查计算数组的差集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_udiff_uassoc()} - 带索引检查计算数组的差集，用回调函数比较数据和索引</span></li>    <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_uintersect()} - 计算数组的交集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_uintersect_assoc()} - 带索引检查计算数组的交集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_uintersect_uassoc()} - 带索引检查计算数组的交集，用单独的回调函数比较数据和索引</span></li>   </ul>  </span> </div></div>
 * @return array an array containing all the values and keys from*/
function array_diff_uassoc(
    array $array,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] array $array2,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] callable $key_compare_func,
    #[PhpStormStubsElementAvailable(from: '8.0')] ...$rest,
): array {}

/**
*<div id="function.array-udiff-uassoc" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_udiff_uassoc</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_udiff_uassoc</span> &mdash; <span class="dc-title">带索引检查计算数组的差集，用回调函数比较数据和索引</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-udiff-uassoc-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_udiff_uassoc</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$arrays</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$value_compare_func</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$key_compare_func</span></span><br>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">array_udiff_uassoc()</strong></span> 返回一个数组，该数组包括了所有在   <span class="parameter" style="color:#3A95FF">array1</span> 中但是不在任何其它参数数组中的值。  </p>  <p class="para">   注意和   <span class="function">{@link array_diff()}</span> 与 <span class="function">{@link array_udiff()}</span>   不同的是键名也用于比较。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-udiff-uassoc-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       第一个数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arrays</span></dt>     <dd>      <p class="para">       要比较的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value_compare_func</span></dt>     <dd>      <p class="para"> 在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。</p><div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$b</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="caution"><strong class="caution">警告</strong> <p class="para">  从比较函数中返回<em>非整数</em>值，例如 <span class="type" style="color:#EAB766">float</span>，将导致内部强制转换为 callback 返回值为  <span class="type" style="color:#EAB766">int</span>。因此，诸如 <span>0.99</span> 和 <span>0.1</span> 之类的值都将被转换为整数值  <span>0</span>，将这些值比较的话将会是相等。 </p></div>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key_compare_func</span></dt>     <dd>      <p class="para">       对键名（索引）的检查也是由回调函数   <span class="parameter" style="color:#3A95FF">key_compare_func</span> 进行的。这和   <span class="function">{@link array_udiff_assoc()}</span> 的行为不同，后者是用内部函数比较索引的。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-udiff-uassoc-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个 <span class="type" style="color:#EAB766">array</span>，包含 <span class="parameter" style="color:#3A95FF">array</span> 里没有出现在其他参数里的所有值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-udiff-uassoc-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_udiff_uassoc()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">cr </span><span style="color: #007700">{<br />    private </span><span style="color: #9876AA">$priv_member</span><span style="color: #007700">;<br />    function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(</span><span style="color: #9876AA">$val</span><span style="color: #007700">)<br />    {<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member </span><span style="color: #007700">= </span><span style="color: #9876AA">$val</span><span style="color: #007700">;<br />    }<br /><br />    static function </span><span style="color: #9876AA">comp_func_cr</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">)<br />    {<br />        if (</span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member </span><span style="color: #007700">=== </span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member</span><span style="color: #007700">) return </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />        return (</span><span style="color: #9876AA">$a</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member </span><span style="color: #007700">&gt; </span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_member</span><span style="color: #007700">)? </span><span style="color: #9876AA">1</span><span style="color: #007700">:-</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />    }<br /><br />    static function </span><span style="color: #9876AA">comp_func_key</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">)<br />    {<br />        if (</span><span style="color: #9876AA">$a </span><span style="color: #007700">=== </span><span style="color: #9876AA">$b</span><span style="color: #007700">) return </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />        return (</span><span style="color: #9876AA">$a </span><span style="color: #007700">&gt; </span><span style="color: #9876AA">$b</span><span style="color: #007700">)? </span><span style="color: #9876AA">1</span><span style="color: #007700">:-</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />    }<br />}<br /></span><span style="color: #9876AA">$a </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"0.1" </span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">9</span><span style="color: #007700">), </span><span style="color: #DD0000">"0.5" </span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">12</span><span style="color: #007700">), </span><span style="color: #9876AA">0 </span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">23</span><span style="color: #007700">), </span><span style="color: #9876AA">1</span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">4</span><span style="color: #007700">), </span><span style="color: #9876AA">2 </span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(-</span><span style="color: #9876AA">15</span><span style="color: #007700">),);<br /></span><span style="color: #9876AA">$b </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"0.2" </span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">9</span><span style="color: #007700">), </span><span style="color: #DD0000">"0.5" </span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">22</span><span style="color: #007700">), </span><span style="color: #9876AA">0 </span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">3</span><span style="color: #007700">), </span><span style="color: #9876AA">1</span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(</span><span style="color: #9876AA">4</span><span style="color: #007700">), </span><span style="color: #9876AA">2 </span><span style="color: #007700">=&gt; new </span><span style="color: #9876AA">cr</span><span style="color: #007700">(-</span><span style="color: #9876AA">15</span><span style="color: #007700">),);<br /><br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">array_udiff_uassoc</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">, array(</span><span style="color: #DD0000">"cr"</span><span style="color: #007700">, </span><span style="color: #DD0000">"comp_func_cr"</span><span style="color: #007700">), array(</span><span style="color: #DD0000">"cr"</span><span style="color: #007700">, </span><span style="color: #DD0000">"comp_func_key"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0.1] =&gt; cr Object<br>        (<br>            [priv_member:private] =&gt; 9<br>        )<br><br>    [0.5] =&gt; cr Object<br>        (<br>            [priv_member:private] =&gt; 12<br>        )<br><br>    [0] =&gt; cr Object<br>        (<br>            [priv_member:private] =&gt; 23<br>        )<br>)<br></span></div>    </div>   </div>  </span>  <p class="simpara">   在上例中键值对 <span>&quot;1&quot; =&gt; new cr(4)</span>   同时出现在两个数组中，因此不在本函数的输出中。要记住必须提供两个回调函数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-udiff-uassoc-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    注意本函数只检查了多维数组中的一维。当然，可以用    <span>array_udiff_uassoc($array1[0], $array2[0], &quot;data_compare_func&quot;, &quot;key_compare_func&quot;);</span>    来检查更深的维度。   </span>   </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-udiff-uassoc-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_diff()} - 计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_diff_assoc()} - 带索引检查计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_udiff()} - 用回调函数比较数据来计算数组的差集</span></li>    <li class="member"><span class="function">{@link array_udiff_assoc()} - 带索引检查计算数组的差集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_intersect_assoc()} - 带索引检查计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_uintersect()} - 计算数组的交集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_uintersect_assoc()} - 带索引检查计算数组的交集，用回调函数比较数据</span></li>    <li class="member"><span class="function">{@link array_uintersect_uassoc()} - 带索引检查计算数组的交集，用单独的回调函数比较数据和索引</span></li>   </ul>  </span> </div></div>
 * @return array an array containing all the values and keys from*/
function array_udiff_uassoc(
    array $array,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] array $array2,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] callable $data_compare_func,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] callable $key_compare_func,
    #[PhpStormStubsElementAvailable(from: '8.0')] ...$rest
): array {}

/**
*<div id="function.array-sum" class="refentry">   <div class="refnamediv">    <h1 class="refname">array_sum</h1>    <p class="verinfo">(PHP 4 &gt;= 4.0.4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_sum</span> &mdash; <span class="dc-title">     对数组中所有值求和    </span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-sum-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_sum</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">float</span></span></div>    <p class="para rdfs-comment">     <span class="function"><strong style="color:#CC7832">array_sum()</strong></span> 将数组中的所有值相加，并返回结果。    </p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-sum-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入的数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-sum-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   所有值的和以整数或浮点数的结果返回，<span class="parameter" style="color:#3A95FF">array</span> 为空时则返回 <span>0</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-sum-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_sum()</strong></span>  例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$a </span><span style="color: #007700">= array(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #9876AA">6</span><span style="color: #007700">, </span><span style="color: #9876AA">8</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"sum(a) = " </span><span style="color: #007700">. </span><span style="color: #9876AA">array_sum</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$b </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1.2</span><span style="color: #007700">, </span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2.3</span><span style="color: #007700">, </span><span style="color: #DD0000">"c" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">3.4</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"sum(b) = " </span><span style="color: #007700">. </span><span style="color: #9876AA">array_sum</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>sum(a) = 20<br>sum(b) = 6.9<br></span></div>    </div>   </div>  </span> </div></div>
 * @return int|float the sum of values as an integer or float.*/
function array_sum(array $array): int|float {}

/**
*<div id="function.array-product" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_product</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_product</span> &mdash; <span class="dc-title">计算数组中所有值的乘积</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-product-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_product</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">float</span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">array_product()</strong></span> 以整数或浮点数返回一个数组中所有值的乘积。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-product-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       这个数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-product-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   以整数或浮点数返回一个数组中所有值的乘积。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-product-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_product()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$a </span><span style="color: #007700">= array(</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #9876AA">6</span><span style="color: #007700">, </span><span style="color: #9876AA">8</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"product(a) = " </span><span style="color: #007700">. </span><span style="color: #9876AA">array_product</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"product(array()) = " </span><span style="color: #007700">. </span><span style="color: #9876AA">array_product</span><span style="color: #007700">(array()) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>product(a) = 384<br>product(array()) = 1<br></span></div>    </div>   </div>  </span> </div></div>
 * @return int|float the product as an integer or float.*/
function array_product(array $array): int|float {}

/**
*<div id="function.array-filter" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_filter</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.6, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_filter</span> &mdash; <span class="dc-title">使用回调函数过滤数组的元素</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-filter-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_filter</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$callback</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   遍历 <span class="parameter" style="color:#3A95FF">array</span> 数组中的每个值，并将每个值传递给 <span class="parameter" style="color:#3A95FF">callback</span> 回调函数。   如果 <span class="parameter" style="color:#3A95FF">callback</span> 回调函数返回 <strong><span>true</span></strong>，则将 <span class="parameter" style="color:#3A95FF">array</span> 数组中的当前值返回到结果 <span class="type" style="color:#EAB766">array</span> 数组中。  </p>  <p class="para">   返回结果 <span class="type" style="color:#EAB766">array</span> 数组的键名（下标）会维持不变，如果 <span class="parameter" style="color:#3A95FF">array</span> 参数是索引数组，返回的结果 <span class="type" style="color:#EAB766">array</span> 数组键名（下标）可能会不连续。   可以使用 <span class="function">{@link array_values()}</span> 函数对数组重新索引。  </p></div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-filter-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       要遍历的数组      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para">       使用的回调函数      </p>      <p class="para">       如果没有提供 <span class="parameter" style="color:#3A95FF">callback</span> 回调函数，将删除数组中 <span class="parameter" style="color:#3A95FF">array</span> 的所有“空”元素。       有关 PHP 如何判定“空”元素，请参阅 <span class="function">{@link empty()}</span> 。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">mode</span></dt>     <dd>      <p class="para">       决定哪些参数发送到 <span class="parameter" style="color:#3A95FF">callback</span> 回调的标志：       <ul class="itemizedlist">        <li class="listitem">         <span class="simpara"><strong><span>ARRAY_FILTER_USE_KEY</span></strong> - 将键名作为 <span class="parameter" style="color:#3A95FF">callback</span> 回调的唯一参数，而不是值</span>        </li>        <li class="listitem">         <span class="simpara"><strong><span>ARRAY_FILTER_USE_BOTH</span></strong> - 将值和键都作为参数传递给 <span class="parameter" style="color:#3A95FF">callback</span> 回调，而不是仅传递值</span>        </li>       </ul>       默认值为 <span>0</span> ，只传递值作为 <span class="parameter" style="color:#3A95FF">callback</span> 回调的唯一参数。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-filter-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回过滤后的数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-filter-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">callback</span> 现在可为空（nullable）。      </td>     </tr>     <tr> <td>8.0.0</td> <td>  如果 <span class="parameter" style="color:#3A95FF">callback</span> 接受引用传递参数，该方法将会抛出  <strong><span>E_WARNING</span></strong>。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-filter-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_filter()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">odd</span><span style="color: #007700">(</span><span style="color: #9876AA">$var</span><span style="color: #007700">)<br />{<br />    </span><span style="color: #FF8000">// 返回输入整数是否为奇数（单数）<br />    </span><span style="color: #007700">return </span><span style="color: #9876AA">$var </span><span style="color: #007700">&amp; </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />}<br />function </span><span style="color: #9876AA">even</span><span style="color: #007700">(</span><span style="color: #9876AA">$var</span><span style="color: #007700">)<br />{<br />    </span><span style="color: #FF8000">// 返回输入整数是否为偶数<br />    </span><span style="color: #007700">return !(</span><span style="color: #9876AA">$var </span><span style="color: #007700">&amp; </span><span style="color: #9876AA">1</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">$array1 </span><span style="color: #007700">= [</span><span style="color: #DD0000">'a' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">'b' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #DD0000">'c' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #DD0000">'d' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #DD0000">'e' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">5</span><span style="color: #007700">];<br /></span><span style="color: #9876AA">$array2 </span><span style="color: #007700">= [</span><span style="color: #9876AA">6</span><span style="color: #007700">, </span><span style="color: #9876AA">7</span><span style="color: #007700">, </span><span style="color: #9876AA">8</span><span style="color: #007700">, </span><span style="color: #9876AA">9</span><span style="color: #007700">, </span><span style="color: #9876AA">10</span><span style="color: #007700">, </span><span style="color: #9876AA">11</span><span style="color: #007700">, </span><span style="color: #9876AA">12</span><span style="color: #007700">];<br />echo </span><span style="color: #DD0000">"Odd :\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_filter</span><span style="color: #007700">(</span><span style="color: #9876AA">$array1</span><span style="color: #007700">, </span><span style="color: #DD0000">"odd"</span><span style="color: #007700">));<br />echo </span><span style="color: #DD0000">"Even:\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_filter</span><span style="color: #007700">(</span><span style="color: #9876AA">$array2</span><span style="color: #007700">, </span><span style="color: #DD0000">"even"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Odd :<br>Array<br>(<br>    [a] =&gt; 1<br>    [c] =&gt; 3<br>    [e] =&gt; 5<br>)<br>Even:<br>Array<br>(<br>    [0] =&gt; 6<br>    [2] =&gt; 8<br>    [4] =&gt; 10<br>    [6] =&gt; 12<br>)<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">array_filter()</strong></span> 不使用 <span class="parameter" style="color:#3A95FF">callback</span> 参数时</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$entry </span><span style="color: #007700">= [<br />    </span><span style="color: #9876AA">0 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'foo'</span><span style="color: #007700">,<br />    </span><span style="color: #9876AA">1 </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">false</span><span style="color: #007700">,<br />    </span><span style="color: #9876AA">2 </span><span style="color: #007700">=&gt; -</span><span style="color: #9876AA">1</span><span style="color: #007700">,<br />    </span><span style="color: #9876AA">3 </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">null</span><span style="color: #007700">,<br />    </span><span style="color: #9876AA">4 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">''</span><span style="color: #007700">,<br />    </span><span style="color: #9876AA">5 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'0'</span><span style="color: #007700">,<br />    </span><span style="color: #9876AA">6 </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">0</span><span style="color: #007700">,<br />];<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_filter</span><span style="color: #007700">(</span><span style="color: #9876AA">$entry</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; foo<br>    [2] =&gt; -1<br>)<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #3 <span class="function"><strong style="color:#CC7832">array_filter()</strong></span> 不使用 <span class="parameter" style="color:#3A95FF">mode</span> 参数时</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$arr </span><span style="color: #007700">= [</span><span style="color: #DD0000">'a' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">'b' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #DD0000">'c' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #DD0000">'d' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">];<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_filter</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">, function(</span><span style="color: #9876AA">$k</span><span style="color: #007700">) {<br />    return </span><span style="color: #9876AA">$k </span><span style="color: #007700">== </span><span style="color: #DD0000">'b'</span><span style="color: #007700">;<br />}, </span><span style="color: #9876AA">ARRAY_FILTER_USE_KEY</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_filter</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">, function(</span><span style="color: #9876AA">$v</span><span style="color: #007700">, </span><span style="color: #9876AA">$k</span><span style="color: #007700">) {<br />    return </span><span style="color: #9876AA">$k </span><span style="color: #007700">== </span><span style="color: #DD0000">'b' </span><span style="color: #007700">|| </span><span style="color: #9876AA">$v </span><span style="color: #007700">== </span><span style="color: #9876AA">4</span><span style="color: #007700">;<br />}, </span><span style="color: #9876AA">ARRAY_FILTER_USE_BOTH</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(1) {<br>  [&quot;b&quot;]=&gt;<br>  int(2)<br>}<br>array(2) {<br>  [&quot;b&quot;]=&gt;<br>  int(2)<br>  [&quot;d&quot;]=&gt;<br>  int(4)<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-filter-notes">  <h3 class="title">注释</h3>  <div class="caution"><strong class="caution">警告</strong>   <p class="para">    不应该在回调函数中改变数组（如：添加、删除或销毁“unset”当前数组和里面的元素），否则此函数的行为将不可预测。   </p>  </div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-filter-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_intersect()} - 计算数组的交集</span></li>    <li class="member"><span class="function">{@link array_map()} - 为数组的每个元素应用回调函数</span></li>    <li class="member"><span class="function">{@link array_reduce()} - 用回调函数迭代地将数组简化为单一的值</span></li>    <li class="member"><span class="function">{@link array_walk()} - 使用用户自定义函数对数组中的每个元素做回调处理</span></li>   </ul>  </span> </div></div>
 * @return array the filtered array.*/
function array_filter(array $array, ?callable $callback, int $mode = 0): array {}

/**
*<div id="function.array-map" class="refentry">   <div class="refnamediv">    <h1 class="refname">array_map</h1>    <p class="verinfo">(PHP 4 &gt;= 4.0.6, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_map</span> &mdash; <span class="dc-title">     为数组的每个元素应用回调函数    </span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-map-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_map</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">...$arrays</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">array_map()</strong></span> 返回一个 <span class="type" style="color:#EAB766">array</span>，包含将 <span class="parameter" style="color:#3A95FF">array</span> 的相应值作为回调的参数顺序调用    <span class="parameter" style="color:#3A95FF">callback</span> 后的结果（如果提供了更多数组，还会利用 <span class="parameter" style="color:#3A95FF">arrays</span>    传入）。<span class="parameter" style="color:#3A95FF">callback</span> 函数形参的数量必须匹配 <span class="function"><strong style="color:#CC7832">array_map()</strong></span>    实参中数组的数量。多余的实参数组将会被忽略。如果提供的实参数组的数量不足，将抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.argumentcounterror.php" class="classname">ArgumentCountError</a></span>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-map-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para">       回调函数 <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>，应用到每个数组里的每个元素。      </p>      <p class="para">       多个数组操作合并时，<span class="parameter" style="color:#3A95FF">callback</span> 可以设置为 <strong><span>null</span></strong>。       如果只提供了 <span class="parameter" style="color:#3A95FF">array</span> 一个数组，       <span class="methodname" style="color:#CC7832"><strong>array_map()</strong></span> 会返回输入的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       数组，遍历运行 <span class="parameter" style="color:#3A95FF">callback</span> 函数。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arrays</span></dt>     <dd>      <p class="para">       额外的数组列表，每个都遍历运行 <span class="parameter" style="color:#3A95FF">callback</span> 函数。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-map-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回数组，包含将 <span class="parameter" style="color:#3A95FF">array</span> 的相应值作为回调的参数调用 <span class="parameter" style="color:#3A95FF">callback</span>   函数后的结果（如果提供了更多数组，还会利用 <span class="parameter" style="color:#3A95FF">arrays</span> 传入）。  </p>  <p class="para">   当仅仅传入一个数组时，返回的数组会保留传入参数的键（key）。   传入多个数组时，返回的数组键是按顺序的 integer。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-map-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  如果 <span class="parameter" style="color:#3A95FF">callback</span> 接受引用传递参数，该方法将会抛出  <strong><span>E_WARNING</span></strong>。 </td></tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-map-examples">  <h3 class="title">示例</h3>  <span>     <div class="example" id="">      <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_map()</strong></span> 例子</strong></p>      <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">cube</span><span style="color: #007700">(</span><span style="color: #9876AA">$n</span><span style="color: #007700">)<br />{<br />    return (</span><span style="color: #9876AA">$n </span><span style="color: #007700">* </span><span style="color: #9876AA">$n </span><span style="color: #007700">* </span><span style="color: #9876AA">$n</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">$a </span><span style="color: #007700">= [</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">];<br /></span><span style="color: #9876AA">$b </span><span style="color: #007700">= </span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #DD0000">'cube'</span><span style="color: #007700">, </span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>      </div>      <div class="example-contents"><p>       这使得 <var class="varname">$b</var> 成为：      </p></div>      <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; 1<br>    [1] =&gt; 8<br>    [2] =&gt; 27<br>    [3] =&gt; 64<br>    [4] =&gt; 125<br>)<br></span></div>      </div>     </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">array_map()</strong></span> 使用匿名函数</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$func </span><span style="color: #007700">= function(</span><span style="color: #9876AA">int $value</span><span style="color: #007700">): </span><span style="color: #9876AA">int </span><span style="color: #007700">{<br />    return </span><span style="color: #9876AA">$value </span><span style="color: #007700">* </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br />};<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #9876AA">$func</span><span style="color: #007700">, </span><span style="color: #9876AA">range</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">)));<br /><br /></span><span style="color: #FF8000">// 或者从 PHP 7.4.0 起：<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">$value</span><span style="color: #007700">): </span><span style="color: #9876AA">int </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$value </span><span style="color: #007700">* </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">range</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">)));<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; 2<br>    [1] =&gt; 4<br>    [2] =&gt; 6<br>    [3] =&gt; 8<br>    [4] =&gt; 10<br>)<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3 <span class="function"><strong style="color:#CC7832">array_map()</strong></span>：使用更多的数组</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">show_Spanish</span><span style="color: #007700">(</span><span style="color: #9876AA">int $n</span><span style="color: #007700">, </span><span style="color: #9876AA">string $m</span><span style="color: #007700">): </span><span style="color: #9876AA">string<br /></span><span style="color: #007700">{<br />    return </span><span style="color: #DD0000">"The number </span><span style="color: #007700">{</span><span style="color: #9876AA">$n</span><span style="color: #007700">}</span><span style="color: #DD0000"> is called </span><span style="color: #007700">{</span><span style="color: #9876AA">$m</span><span style="color: #007700">}</span><span style="color: #DD0000"> in Spanish"</span><span style="color: #007700">;<br />}<br /><br />function </span><span style="color: #9876AA">map_Spanish</span><span style="color: #007700">(</span><span style="color: #9876AA">int $n</span><span style="color: #007700">, </span><span style="color: #9876AA">string $m</span><span style="color: #007700">): array<br />{<br />    return [</span><span style="color: #9876AA">$n </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$m</span><span style="color: #007700">];<br />}<br /><br /></span><span style="color: #9876AA">$a </span><span style="color: #007700">= [</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">];<br /></span><span style="color: #9876AA">$b </span><span style="color: #007700">= [</span><span style="color: #DD0000">'uno'</span><span style="color: #007700">, </span><span style="color: #DD0000">'dos'</span><span style="color: #007700">, </span><span style="color: #DD0000">'tres'</span><span style="color: #007700">, </span><span style="color: #DD0000">'cuatro'</span><span style="color: #007700">, </span><span style="color: #DD0000">'cinco'</span><span style="color: #007700">];<br /><br /></span><span style="color: #9876AA">$c </span><span style="color: #007700">= </span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #DD0000">'show_Spanish'</span><span style="color: #007700">, </span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$c</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$d </span><span style="color: #007700">= </span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #DD0000">'map_Spanish'</span><span style="color: #007700">, </span><span style="color: #9876AA">$a </span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$d</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>// 打印 $c<br>Array<br>(<br>    [0] =&gt; The number 1 is called uno in Spanish<br>    [1] =&gt; The number 2 is called dos in Spanish<br>    [2] =&gt; The number 3 is called tres in Spanish<br>    [3] =&gt; The number 4 is called cuatro in Spanish<br>    [4] =&gt; The number 5 is called cinco in Spanish<br>)<br><br>// 打印 $d<br>Array<br>(<br>    [0] =&gt; Array<br>        (<br>            [1] =&gt; uno<br>        )<br><br>    [1] =&gt; Array<br>        (<br>            [2] =&gt; dos<br>        )<br><br>    [2] =&gt; Array<br>        (<br>            [3] =&gt; tres<br>        )<br><br>    [3] =&gt; Array<br>        (<br>            [4] =&gt; cuatro<br>        )<br><br>    [4] =&gt; Array<br>        (<br>            [5] =&gt; cinco<br>        )<br><br>)<br></span></div>    </div>   </div>  </p>  <p class="para">   传入两个及以上的数组时，它们元素数量将会相同。因为回调函数会并行地处理相互对应的元素。   如果几个数组的元素数量不一致：空元素会扩展短那个数组，直到长度和最长的数组一样。  </p>  <p class="para">   此函数有个有趣的用法：传入 <strong><span>null</span></strong> 作为回调函数的名称，将创建多维数组（一个数组，内部包含数组。）  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #4 多个数组的合并操作</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$a </span><span style="color: #007700">= [</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">];<br /></span><span style="color: #9876AA">$b </span><span style="color: #007700">= [</span><span style="color: #DD0000">'one'</span><span style="color: #007700">, </span><span style="color: #DD0000">'two'</span><span style="color: #007700">, </span><span style="color: #DD0000">'three'</span><span style="color: #007700">, </span><span style="color: #DD0000">'four'</span><span style="color: #007700">, </span><span style="color: #DD0000">'five'</span><span style="color: #007700">];<br /></span><span style="color: #9876AA">$c </span><span style="color: #007700">= [</span><span style="color: #DD0000">'uno'</span><span style="color: #007700">, </span><span style="color: #DD0000">'dos'</span><span style="color: #007700">, </span><span style="color: #DD0000">'tres'</span><span style="color: #007700">, </span><span style="color: #DD0000">'cuatro'</span><span style="color: #007700">, </span><span style="color: #DD0000">'cinco'</span><span style="color: #007700">];<br /><br /></span><span style="color: #9876AA">$d </span><span style="color: #007700">= </span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #9876AA">null</span><span style="color: #007700">, </span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">, </span><span style="color: #9876AA">$c</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$d</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; Array<br>        (<br>            [0] =&gt; 1<br>            [1] =&gt; one<br>            [2] =&gt; uno<br>        )<br><br>    [1] =&gt; Array<br>        (<br>            [0] =&gt; 2<br>            [1] =&gt; two<br>            [2] =&gt; dos<br>        )<br><br>    [2] =&gt; Array<br>        (<br>            [0] =&gt; 3<br>            [1] =&gt; three<br>            [2] =&gt; tres<br>        )<br><br>    [3] =&gt; Array<br>        (<br>            [0] =&gt; 4<br>            [1] =&gt; four<br>            [2] =&gt; cuatro<br>        )<br><br>    [4] =&gt; Array<br>        (<br>            [0] =&gt; 5<br>            [1] =&gt; five<br>            [2] =&gt; cinco<br>        )<br><br>)<br></span></div>    </div>   </div>  </p>    <p class="para">   <div class="example" id="">    <p><strong>示例 #5      仅有 <span class="parameter" style="color:#3A95FF">array1</span> 时，<span class="parameter" style="color:#3A95FF">callback</span> 设置为 <strong><span>null</span></strong>    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array </span><span style="color: #007700">= [</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">];<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #9876AA">null</span><span style="color: #007700">, </span><span style="color: #9876AA">$array</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(3) {<br>  [0]=&gt;<br>  int(1)<br>  [1]=&gt;<br>  int(2)<br>  [2]=&gt;<br>  int(3)<br>}<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #6 <span class="function"><strong style="color:#CC7832">array_map()</strong></span> 键（key）是 string</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$arr </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"stringkey" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"value"</span><span style="color: #007700">);<br />function </span><span style="color: #9876AA">cb1</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">) {<br />    return [</span><span style="color: #9876AA">$a</span><span style="color: #007700">];<br />}<br />function </span><span style="color: #9876AA">cb2</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">) {<br />    return [</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">];<br />}<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #DD0000">'cb1'</span><span style="color: #007700">, </span><span style="color: #9876AA">$arr</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #DD0000">'cb2'</span><span style="color: #007700">, </span><span style="color: #9876AA">$arr</span><span style="color: #007700">, </span><span style="color: #9876AA">$arr</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #9876AA">null</span><span style="color: #007700">,  </span><span style="color: #9876AA">$arr</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #9876AA">null</span><span style="color: #007700">, </span><span style="color: #9876AA">$arr</span><span style="color: #007700">, </span><span style="color: #9876AA">$arr</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(1) {<br>  [&quot;stringkey&quot;]=&gt;<br>  array(1) {<br>    [0]=&gt;<br>    string(5) &quot;value&quot;<br>  }<br>}<br>array(1) {<br>  [0]=&gt;<br>  array(2) {<br>    [0]=&gt;<br>    string(5) &quot;value&quot;<br>    [1]=&gt;<br>    string(5) &quot;value&quot;<br>  }<br>}<br>array(1) {<br>  [&quot;stringkey&quot;]=&gt;<br>  string(5) &quot;value&quot;<br>}<br>array(1) {<br>  [0]=&gt;<br>  array(2) {<br>    [0]=&gt;<br>    string(5) &quot;value&quot;<br>    [1]=&gt;<br>    string(5) &quot;value&quot;<br>  }<br>}<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #7 <span class="function"><strong style="color:#CC7832">array_map()</strong></span> - 关联数组</strong></p>    <div class="example-contents"><p>     虽然 <span class="function"><strong style="color:#CC7832">array_map()</strong></span> 不能直接支持使用数组的键（key）作为输入，但可以使用     <span class="function">{@link array_keys()}</span> 进行模拟。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$arr </span><span style="color: #007700">= [<br />    </span><span style="color: #DD0000">'v1' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'First release'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'v2' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Second release'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'v3' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Third release'</span><span style="color: #007700">,<br />];<br /><br /></span><span style="color: #FF8000">// 注意： 在 7.4.0 之前，使用较长的语法来代替匿名函数。<br /></span><span style="color: #9876AA">$callback </span><span style="color: #007700">= fn(</span><span style="color: #9876AA">string $k</span><span style="color: #007700">, </span><span style="color: #9876AA">string $v</span><span style="color: #007700">): </span><span style="color: #9876AA">string </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$k</span><span style="color: #DD0000"> was the </span><span style="color: #9876AA">$v</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #9876AA">$callback</span><span style="color: #007700">, </span><span style="color: #9876AA">array_keys</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">), </span><span style="color: #9876AA">array_values</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(3) {<br>  [0]=&gt;<br>  string(24) &quot;v1 was the First release&quot;<br>  [1]=&gt;<br>  string(25) &quot;v2 was the Second release&quot;<br>  [2]=&gt;<br>  string(24) &quot;v3 was the Third release&quot;<br>}<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-map-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_filter()} - 使用回调函数过滤数组的元素</span></li>    <li class="member"><span class="function">{@link array_reduce()} - 用回调函数迭代地将数组简化为单一的值</span></li>    <li class="member"><span class="function">{@link array_walk()} - 使用用户自定义函数对数组中的每个元素做回调处理</span></li>   </ul>  </span> </div></div>
 * @return array an array containing all the elements of arr1*/
function array_map(
    ?callable $callback,
    #[PhpStormStubsElementAvailable(from: '8.0')] array $array,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $arrays,
    array ...$arrays
): array {}

/**
*<div id="function.array-chunk" class="refentry">   <div class="refnamediv">    <h1 class="refname">array_chunk</h1>    <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_chunk</span> &mdash; <span class="dc-title">将一个数组分割成多个</span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-chunk-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_chunk</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$length</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$preserve_keys</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>    <p class="para rdfs-comment">     将一个数组分割成多个数组，其中每个数组的单元数目由     <span class="parameter" style="color:#3A95FF">length</span> 决定。最后一个数组的单元数目可能会少于 <span class="parameter" style="color:#3A95FF">length</span> 个。         </p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-chunk-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       需要操作的数组      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">length</span></dt>     <dd>      <p class="para">       每个数组的单元数目      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">preserve_keys</span></dt>     <dd>      <p class="para">       设为 <strong><span>true</span></strong>，可以使 PHP     保留输入数组中原来的键名。如果你指定了 <strong><span>false</span></strong>，那每个结果数组将用从零开始的新数字索引。默认值是 <strong><span>false</span></strong>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-chunk-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   得到的数组是一个多维数组中的单元，其索引从零开始，每一维包含了 <span class="parameter" style="color:#3A95FF">length</span> 个元素。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.array-chunk-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">length</span> 小于 <span>1</span>，会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-chunk-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       如果 <span class="parameter" style="color:#3A95FF">length</span> 小于 <span>1</span>，现在会抛出       <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；之前会引发 <strong><span>E_WARNING</span></strong>        级别的错误且函数会返回 <strong><span>null</span></strong>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-chunk-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_chunk()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$input_array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'a'</span><span style="color: #007700">, </span><span style="color: #DD0000">'b'</span><span style="color: #007700">, </span><span style="color: #DD0000">'c'</span><span style="color: #007700">, </span><span style="color: #DD0000">'d'</span><span style="color: #007700">, </span><span style="color: #DD0000">'e'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_chunk</span><span style="color: #007700">(</span><span style="color: #9876AA">$input_array</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_chunk</span><span style="color: #007700">(</span><span style="color: #9876AA">$input_array</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; Array<br>        (<br>            [0] =&gt; a<br>            [1] =&gt; b<br>        )<br><br>    [1] =&gt; Array<br>        (<br>            [0] =&gt; c<br>            [1] =&gt; d<br>        )<br><br>    [2] =&gt; Array<br>        (<br>            [0] =&gt; e<br>        )<br><br>)<br>Array<br>(<br>    [0] =&gt; Array<br>        (<br>            [0] =&gt; a<br>            [1] =&gt; b<br>        )<br><br>    [1] =&gt; Array<br>        (<br>            [2] =&gt; c<br>            [3] =&gt; d<br>        )<br><br>    [2] =&gt; Array<br>        (<br>            [4] =&gt; e<br>        )<br><br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-chunk-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_slice()} - 从数组中取出一段</span></li>   </ul>  </span> </div>  </div>
 * @return array a multidimensional numerically indexed array, starting with zero,*/
function array_chunk(array $array, int $length, bool $preserve_keys = false): array {}

/**
*<div id="function.array-combine" class="refentry">   <div class="refnamediv">    <h1 class="refname">array_combine</h1>    <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_combine</span> &mdash; <span class="dc-title">     创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值    </span></p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-combine-description">  <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description">      <span class="methodname" style="color:#CC7832"><strong>array_combine</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$keys</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$values</span></span>): <span class="type" style="color:#EAB766">array</span></div>    <p class="para rdfs-comment">     返回一个 <span class="type" style="color:#EAB766">array</span>，用来自     <span class="parameter" style="color:#3A95FF">keys</span> 数组的值作为键名，来自     <span class="parameter" style="color:#3A95FF">values</span> 数组的值作为相应的值。    </p>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-combine-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">keys</span></dt>     <dd>      <p class="para">       将被作为新数组的键。非法的值将会被转换为字符串类型（<span class="type" style="color:#EAB766">string</span>）。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">values</span></dt>     <dd>      <p class="para">       将被作为 <span class="type" style="color:#EAB766">Array</span> 的值。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-combine-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回合并后的 <span class="type" style="color:#EAB766">array</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.array-combine-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   自 PHP 8.0.0 起，如果 <span class="parameter" style="color:#3A95FF">keys</span> 和 <span class="parameter" style="color:#3A95FF">values</span> 的元素数量不同，将会抛出   <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，会引发 <strong><span>E_WARNING</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.array-combine-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       如果每个数组的元素数量不相等，现在 <span class="function"><strong style="color:#CC7832">array_combine()</strong></span> 将会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>，之前此方法返回 <strong><span>false</span></strong>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-combine-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 一个 <span class="function"><strong style="color:#CC7832">array_combine()</strong></span> 简单的例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$a </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'green'</span><span style="color: #007700">, </span><span style="color: #DD0000">'red'</span><span style="color: #007700">, </span><span style="color: #DD0000">'yellow'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$b </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'avocado'</span><span style="color: #007700">, </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">, </span><span style="color: #DD0000">'banana'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$c </span><span style="color: #007700">= </span><span style="color: #9876AA">array_combine</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$c</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [green]  =&gt; avocado<br>    [red]    =&gt; apple<br>    [yellow] =&gt; banana<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-combine-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_merge()} - 合并一个或多个数组</span></li>    <li class="member"><span class="function">{@link array_walk()} - 使用用户自定义函数对数组中的每个元素做回调处理</span></li>    <li class="member"><span class="function">{@link array_values()} - 返回数组中所有的值</span></li>    <li class="member"><span class="function">{@link array_map()} - 为数组的每个元素应用回调函数</span></li>   </ul>  </span> </div>  </div>
 * @return array|false the combined array, false if the number of elements*/
function array_combine(array $keys, array $values) {}

/**
*<div id="function.array-key-exists" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_key_exists</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.7, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">array_key_exists</span> &mdash; <span class="dc-title">检查数组里是否有指定的键名或索引</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-key-exists-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_key_exists</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">int</span></span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   数组里有键 <span class="parameter" style="color:#3A95FF">key</span> 时，<span class="function"><strong style="color:#CC7832">array_key_exists()</strong></span> 返回 <strong><span>true</span></strong>。   <span class="parameter" style="color:#3A95FF">key</span>   可以是任何能作为数组索引的值。  </p>   </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-key-exists-parameters">    <h3 class="title">参数</h3>    <span>     <dl>             <dt><span class="parameter" style="color:#3A95FF">key</span></dt>       <dd>        <p class="para">         要检查的键。        </p>       </dd>                   <dt><span class="parameter" style="color:#3A95FF">array</span></dt>       <dd>        <p class="para">         一个数组，包含待检查的键。        </p>       </dd>           </dl>    </span>   </div>          <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-key-exists-returnvalues">    <h3 class="title">返回值</h3>    <p class="para">     成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。    </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="function"><strong style="color:#CC7832">array_key_exists()</strong></span> 仅仅搜索第一维的键。    多维数组里嵌套的键不会被搜索到。   </p>  </p></blockquote>   </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-key-exists-examples">    <h3 class="title">示例</h3>    <span>     <div class="example" id="">      <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_key_exists()</strong></span> 例子</strong></p>      <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$search_array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'first' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">'second' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">);<br />if (</span><span style="color: #9876AA">array_key_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'first'</span><span style="color: #007700">, </span><span style="color: #9876AA">$search_array</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"The 'first' element is in the array"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>     </span>     <div class="example" id="">      <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">array_key_exists()</strong></span> 与 <span class="function">{@link isset()}</span> 的对比</strong></p>      <div class="example-contents"><p>       <span class="function">{@link isset()}</span> 对于数组中为 <strong><span>null</span></strong>       的值不会返回 <strong><span>true</span></strong>，而       <span class="function"><strong style="color:#CC7832">array_key_exists()</strong></span> 会。      </p></div>      <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$search_array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'first' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">null</span><span style="color: #007700">, </span><span style="color: #DD0000">'second' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 返回 false<br /></span><span style="color: #007700">isset(</span><span style="color: #9876AA">$search_array</span><span style="color: #007700">[</span><span style="color: #DD0000">'first'</span><span style="color: #007700">]);<br /><br /></span><span style="color: #FF8000">// 返回 true<br /></span><span style="color: #9876AA">array_key_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'first'</span><span style="color: #007700">, </span><span style="color: #9876AA">$search_array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>     </div>   </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-key-exists-notes">    <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <p class="para">     由于为了兼容以前版本，如果 <span class="type" style="color:#EAB766">object</span> 当做 <span class="parameter" style="color:#3A95FF">array</span> 传入      <span class="function"><strong style="color:#CC7832">array_key_exists()</strong></span>，同时 <span class="parameter" style="color:#3A95FF">key</span> 是对象的属性，也会返回 <strong><span>true</span></strong>。     此行为在 PHP 7.4.0 弃用且在 PHP 8.0.0 移除。    </p>    <p class="para">     要检查对象是否有某个属性，应该使用 <span class="function">{@link property_exists()}</span>。    </p>  </p></blockquote>   </div>      <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-key-exists-seealso">    <h3 class="title">参见</h3>    <span>     <ul class="simplelist">      <li class="member"><span class="function">{@link isset()} - 检测变量是否已声明并且其值不为 null</span></li>      <li class="member"><span class="function">{@link array_keys()} - 返回数组中部分的或所有的键名</span></li>      <li class="member"><span class="function">{@link in_array()} - 检查数组中是否存在某个值</span></li>      <li class="member"><span class="function">{@link property_exists()} - 检查对象或类是否具有该属性</span></li>     </ul>    </span>   </div></div>
 * @return bool true on success or false on failure.*/
function array_key_exists($key, #[LanguageLevelTypeAware(["8.0" => "array"], default: "array|ArrayObject")] $array): bool {}

/**
*<div id="function.array-key-first" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_key_first</h1>  <p class="verinfo">(PHP 7 &gt;= 7.3.0, PHP 8)</p><p class="refpurpose"><span class="refname">array_key_first</span> &mdash; <span class="dc-title">获取指定数组的第一个键</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-key-first-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_key_first</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">null</span></span></div>  <p class="para rdfs-comment">   不影响到数组内部指针，取得指定数组的 <span class="parameter" style="color:#3A95FF">array</span>   第一个键。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-key-first-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">array</span></dt>    <dd>     <span>      要操作的数组。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-key-first-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">array</span> 不是空的，返回第一个键，否则返回 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-key-first-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_key_first()</strong></span> 基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array </span><span style="color: #007700">= [</span><span style="color: #DD0000">'a' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">'b' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #DD0000">'c' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">3</span><span style="color: #007700">];<br /><br /></span><span style="color: #9876AA">$firstKey </span><span style="color: #007700">= </span><span style="color: #9876AA">array_key_first</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$firstKey</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(1) &quot;a&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-key-first-notes">  <h3 class="title">注释</h3>  <div class="tip"><strong class="tip">小技巧</strong>    <p class="simpara">     在 PHP 7.3.0 之前，有几种方式可以实现该功能。可以使用     <span class="function">{@link array_keys()}</span> 函数，但是性能会比较低。也可以使用     <span class="function">{@link reset()}</span> 和 <span class="function">{@link key()}</span>     函数，但这可能会影响内部数组指针。实现该功能的 polyfill 写法如下:    </p>   <div class="informalexample">    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if (!</span><span style="color: #9876AA">function_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'array_key_first'</span><span style="color: #007700">)) {<br />    function </span><span style="color: #9876AA">array_key_first</span><span style="color: #007700">(array </span><span style="color: #9876AA">$arr</span><span style="color: #007700">) {<br />        foreach(</span><span style="color: #9876AA">$arr </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$unused</span><span style="color: #007700">) {<br />            return </span><span style="color: #9876AA">$key</span><span style="color: #007700">;<br />        }<br />        return </span><span style="color: #9876AA">NULL</span><span style="color: #007700">;<br />    }<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-key-first-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link array_key_last()} - 获取一个数组的最后一个键值</span></li>   <li class="member"><span class="function">{@link reset()} - 将数组的内部指针指向第一个单元</span></li>  </ul> </div></div>
 * @return string|int|null Returns the first key of array if the array is not empty; NULL otherwise.*/
function array_key_first(array $array): string|int|null {}

/**
*<div id="function.array-key-last" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_key_last</h1>  <p class="verinfo">(PHP 7 &gt;= 7.3.0, PHP 8)</p><p class="refpurpose"><span class="refname">array_key_last</span> &mdash; <span class="dc-title">获取一个数组的最后一个键值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-key-last-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_key_last</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">null</span></span></div>  <p class="para rdfs-comment">   取得指定数组的 <span class="parameter" style="color:#3A95FF">array</span>   最后一个键值，不会影响到原数组的内部指针。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-key-last-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">array</span></dt>    <dd>     <span>      要操作的数组。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-key-last-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span class="parameter" style="color:#3A95FF">array</span> 的最后一个键值（如果不为空），否则返回 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-key-last-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link array_key_first()} - 获取指定数组的第一个键</span></li>   <li class="member"><span class="function">{@link end()} - 将数组的内部指针指向最后一个单元</span></li>  </ul> </div></div>
 * @return string|int|null Returns the last key of array if the array is not empty; NULL otherwise.*/
function array_key_last(array $array): string|int|null {}

/**
*<div id="function.array-is-list" class="refentry"> <div class="refnamediv">  <h1 class="refname">array_is_list</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">array_is_list</span> &mdash; <span class="dc-title">判断给定的 <span class="parameter" style="color:#3A95FF">array</span> 是否为 list</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.array-is-list-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>array_is_list</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   判断指定的 <span class="parameter" style="color:#3A95FF">array</span> 是否是 list。如果 <span class="type" style="color:#EAB766">array</span> 的 key 由 <span>0</span> 到 <span>count($array)-1</span> 的连续数字组成，则该数组就是 list。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.array-is-list-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       被检测的 <span class="type" style="color:#EAB766">array</span>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.array-is-list-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">array</span> 是 list 就返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.array-is-list-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">array_is_list()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />array_is_list</span><span style="color: #007700">([]); </span><span style="color: #FF8000">// true<br /></span><span style="color: #9876AA">array_is_list</span><span style="color: #007700">([</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">]); </span><span style="color: #FF8000">// true<br /></span><span style="color: #9876AA">array_is_list</span><span style="color: #007700">([</span><span style="color: #9876AA">0 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">, </span><span style="color: #DD0000">'orange'</span><span style="color: #007700">]); </span><span style="color: #FF8000">// true<br /><br />// key 未从 0 开始<br /></span><span style="color: #9876AA">array_is_list</span><span style="color: #007700">([</span><span style="color: #9876AA">1 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">, </span><span style="color: #DD0000">'orange'</span><span style="color: #007700">]); </span><span style="color: #FF8000">// false<br /><br />// key 的顺序不正确<br /></span><span style="color: #9876AA">array_is_list</span><span style="color: #007700">([</span><span style="color: #9876AA">1 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">, </span><span style="color: #9876AA">0 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'orange'</span><span style="color: #007700">]); </span><span style="color: #FF8000">// false<br /><br />// 包含非整数 key<br /></span><span style="color: #9876AA">array_is_list</span><span style="color: #007700">([</span><span style="color: #9876AA">0 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">, </span><span style="color: #DD0000">'foo' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">]); </span><span style="color: #FF8000">// false<br /><br />// 非连续 key<br /></span><span style="color: #9876AA">array_is_list</span><span style="color: #007700">([</span><span style="color: #9876AA">0 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">, </span><span style="color: #9876AA">2 </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">]); </span><span style="color: #FF8000">// false<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.array-is-list-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    空数组也会返回 <strong><span>true</span></strong>。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.array-is-list-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_values()} - 返回数组中所有的值</span></li>   </ul>  </span> </div></div>
 * @return bool return true if the array keys are 0 .. count($array)-1 in that order.*/
function array_is_list(array $array): bool {}

/**
*<div id="function.pos" class="refentry"> <div class="refnamediv">  <h1 class="refname">pos</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">pos</span> &mdash; <span class="dc-title"><span class="function">{@link current()}</span> 的别名</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.pos-description">  <h3 class="title">说明</h3>  <p class="simpara">   此函数是该函数的别名：<span class="function">{@link current()}</span>。  </p> </div></div>
 * @return mixed*/
function pos(object|array $array): mixed {}

/**
*<div id="function.sizeof" class="refentry"> <div class="refnamediv">  <h1 class="refname">sizeof</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">sizeof</span> &mdash; <span class="dc-title"><span class="function">{@link count()}</span> 的别名 </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.sizeof-description">  <h3 class="title">说明</h3>  <p class="simpara">   此函数是该函数的别名：<span class="function">{@link count()}</span>。  </p> </div></div>
 * @return int<0, max>*/
function sizeof(Countable|array $value, int $mode = COUNT_NORMAL): int {}

/**
*<div id="function.key-exists" class="refentry"> <div class="refnamediv">  <h1 class="refname">key_exists</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.6, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">key_exists</span> &mdash; <span class="dc-title">别名 <span class="function">{@link array_key_exists()}</span></span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.key-exists-description">  <h3 class="title">说明</h3>  <p class="simpara">   此函数是该函数的别名：   <span class="function">{@link array_key_exists()}</span>.  </p> </div></div>
 * @return bool true on success or false on failure.*/
function key_exists($key, array $array): bool {}

/**
*<div id="function.assert" class="refentry"> <div class="refnamediv">  <h1 class="refname">assert</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">assert</span> &mdash; <span class="dc-title">断言检测</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.assert-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>assert</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$assertion</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span>|<span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">null</span></span> <span class="parameter" style="color:#3A95FF">$description</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">assert()</strong></span> 允许定义预期（expectations）：在开发和测试环境中生效的断言，但在生产环境中会优化掉以达到零成本。  </p>  <p class="para">   断言应该只用于调试功能。其中一个用例是检查健全性的前提条件，应该始终为   <strong><span>true</span></strong>，如果不满足这些条件，则表示存在某些编程错误。   另一个用例是确保某些功能的存在，例如扩展函数或某些系统限制和特性。  </p>  <p class="para">   由于断言可以配置为已消除，因此<em>不</em>应该用于普通运行时操作，比如检查输入参数。一般来说，代码应该在禁用断言检查的情况下仍然按预期运行。  </p>  <p class="para">   <span class="function"><strong style="color:#CC7832">assert()</strong></span> 将检查 <span class="parameter" style="color:#3A95FF">assertion</span> 中指定的预期（expectations）是否成立。如果不成立，也就是结果为   <strong><span>false</span></strong>，它将根据 <span class="function"><strong style="color:#CC7832">assert()</strong></span> 的配置采取适当的操作。  </p>  <p class="para">   <span class="function"><strong style="color:#CC7832">assert()</strong></span> 的行为由以下 INI 设置决定：   <table class="doctable table">    <caption><strong>断言 配置选项</strong></caption>         <thead>      <tr>       <th>名字</th>       <th>默认</th>       <th>说明</th>       <th>更新日志</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td><a href="https://www.php.net/manual/zh/ini.core.php#ini.zend.assertions" class="link">zend.assertions</a></td>       <td><span>1</span></td>       <td>        <ul class="simplelist">         <li class="member">          <span>1</span>：生成并执行代码（开发模式）         </li>         <li class="member">                    <span>0</span>：生成代码但在运行时跳转         </li>         <li class="member">          <span>-1</span>：生成代码但在运行时跳转（生产模式）         </li>        </ul>       </td>       <td class="empty">&nbsp;</td>      </tr>      <tr>       <td><a href="https://www.php.net/manual/zh/info.configuration.php#ini.assert.active" class="link">assert.active</a></td>       <td><strong><span>true</span></strong></td>       <td>        为 <strong><span>false</span></strong> 时，<span class="function"><strong style="color:#CC7832">assert()</strong></span> 将不会检查预期（expectation）并且无条件返回 <strong><span>true</span></strong>。       </td>       <td>        自 PHP 8.3.0 起弃用       </td>      </tr>      <tr>       <td><a href="https://www.php.net/manual/zh/info.configuration.php#ini.assert.callback" class="link">assert.callback</a></td>       <td><strong><span>null</span></strong></td>       <td>        当断言失败时，将调用用户定义的函数，其签名应该是：        <div class="methodsynopsis dc-description">         <span class="methodname" style="color:#CC7832"><strong>assert_callback</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$file</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$line</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">null</span> <span class="parameter" style="color:#3A95FF">$assertion</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$description</span><span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>       </td>       <td>        在 PHP 8.0.0 之前，回调的签名应该是：        <div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><strong>assert_callback</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$file</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$line</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$assertion</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$description</span><span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>        自 PHP 8.3.0 起弃用       </td>      </tr>      <tr>       <td><a href="https://www.php.net/manual/zh/info.configuration.php#ini.assert.exception" class="link">assert.exception</a></td>       <td><strong><span>true</span></strong></td>       <td>        如果为 <strong><span>true</span></strong>，则如果不能满足预期（expectations），将抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.assertionerror.php" class="classname">AssertionError</a></span> 异常。       </td>       <td>        自 PHP 8.3.0 起弃用       </td>      </tr>      <tr>       <td><a href="https://www.php.net/manual/zh/info.configuration.php#ini.assert.bail" class="link">assert.bail</a></td>       <td><strong><span>false</span></strong></td>       <td>        为 <strong><span>true</span></strong> 时，如果预期（expectation）不支持，将会中止 PHP 脚本的执行。       </td>       <td>        自 PHP 8.3.0 起弃用       </td>      </tr>      <tr>       <td><a href="https://www.php.net/manual/zh/info.configuration.php#ini.assert.warning" class="link">assert.warning</a></td>       <td><strong><span>true</span></strong></td>       <td>        为 <strong><span>true</span></strong> 时，则如果预期（expectation）不支持，将发出 <strong><span>E_WARNING</span></strong> 警告。如果启用了        <a href="https://www.php.net/manual/zh/info.configuration.php#ini.assert.exception" class="link">assert.exception</a>，此 INI 设置将无效。       </td>       <td>        自 PHP 8.3.0 起弃用       </td>      </tr>     </tbody>       </table>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.assert-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">assertion</span></dt>     <dd>      <p class="para">       可以是任何带返回值的表达式，运行后的结果用于表示断言成功还是失败。      </p>      <div class="warning"><strong class="warning">警告</strong>       <p class="para">        在 PHP 8.0.0 之前，如果 <span class="parameter" style="color:#3A95FF">assertion</span> 是 <span class="type" style="color:#EAB766">string</span>，将解释为        PHP 代码，并通过 <span class="function">{@link eval()}</span> 执行。这个字符串将作为第三个参数传递给回调函数。这种行为在        PHP 7.2.0 中<em>弃用</em>，并在 PHP 8.0.0 中<em>移除</em>。       </p>      </div>     </dd>             <dt><span class="parameter" style="color:#3A95FF">description</span></dt>     <dd>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">description</span> 是 <span class="classname"><a href="https://www.php.net/manual/zh/class.throwable.php" class="classname">Throwable</a></span>       的实例，只有在 <span class="parameter" style="color:#3A95FF">assertion</span> 执行失败时才会抛出。       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:         <p class="para">         自 PHP 8.0.0 开始，在调用可能定义的断言回调<em>之前</em>执行此操作。        </p>       </p></blockquote>       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:         <p class="para">         自 PHP 8.0.0 开始，无论 <a href="https://www.php.net/manual/zh/info.configuration.php#ini.assert.exception" class="link">assert.exception</a> 的配置如何，都将会抛出该 <span class="type" style="color:#EAB766">object</span>。        </p>       </p></blockquote>       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:         <p class="para">         自 PHP 8.0.0 开始，在这种情况下，<a href="https://www.php.net/manual/zh/info.configuration.php#ini.assert.bail" class="link">assert.bail</a> 设置不起作用。        </p>       </p></blockquote>      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">description</span> 是 <span class="type" style="color:#EAB766">string</span>，当发出异常或警告时，将使用该消息。       如果 <span class="parameter" style="color:#3A95FF">assertion</span> 失败了，可选的 description 将会包括在失败信息里。      </p>      <p class="para">       如果省略 <span class="parameter" style="color:#3A95FF">description</span>，              将在编译时创建默认 description，该 description 等于对 <span class="function"><strong style="color:#CC7832">assert()</strong></span> 调用的源代码。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.assert-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="function"><strong style="color:#CC7832">assert()</strong></span> 总是返回 <strong><span>true</span></strong>，前提是以下条件中至少有一个为真：  </p>  <ul class="simplelist">   <li class="member"><span>zend.assertions=0</span></li>   <li class="member"><span>zend.assertions=-1</span></li>   <li class="member"><span>assert.exception=1</span></li>   <li class="member"><span>assert.bail=1</span></li>   <li class="member">将自定义异常对象传递给 <span class="parameter" style="color:#3A95FF">description</span>。</li>  </ul>  <p class="para">   如果所有条件都不满足， <span class="function"><strong style="color:#CC7832">assert()</strong></span> 将在 <span class="parameter" style="color:#3A95FF">assertion</span> 为真时返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。urn <strong><span>true</span></strong> if   <span class="parameter" style="color:#3A95FF">assertion</span> is truthy and <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.assert-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.3.0</td>       <td>        弃用所有的 <span>assert.</span> INI 设置。       </td>      </tr>      <tr>       <td>8.0.0</td>       <td>         <span class="function"><strong style="color:#CC7832">assert()</strong></span> 将不再对字符串参数求值，而是跟其他参数一样对待。应该使用 <span>assert($a == $b)</span>         替代 <span>assert(&#039;$a == $b&#039;)</span>。已移除 <span>assert.quiet_eval</span> <var class="filename">php.ini</var> 指令和         <strong><span>ASSERT_QUIET_EVAL</span></strong> 常量，因为它们不再有任何作用。       </td>      </tr>      <tr>       <td>8.0.0</td>       <td>        如果 <span class="parameter" style="color:#3A95FF">description</span> 是 <span class="classname"><a href="https://www.php.net/manual/zh/class.throwable.php" class="classname">Throwable</a></span> 的实例，无论        <a href="https://www.php.net/manual/zh/info.configuration.php#ini.assert.exception" class="link">assert.exception</a> 的值如何，如果断言失败，该对象都会被抛出。       </td>      </tr>      <tr>       <td>8.0.0</td>       <td>        如果 <span class="parameter" style="color:#3A95FF">description</span> 是 <span class="classname"><a href="https://www.php.net/manual/zh/class.throwable.php" class="classname">Throwable</a></span> 的实例，即使设置了用户回调，也不会调用该回调。       </td>      </tr>      <tr>       <td>8.0.0</td>       <td>        不再允许在命名空间中声明叫做 <span>assert()</span> 的函数，并发出 <strong><span>E_COMPILE_ERROR</span></strong>。       </td>      </tr>      <tr>       <td>7.3.0</td>       <td>        弃用在命名空间中声明 <span>assert()</span> 函数。这样声明会发出 <strong><span>E_DEPRECATED</span></strong>。       </td>      </tr>      <tr>       <td>7.2.0</td>       <td>        弃用使用 <span class="type" style="color:#EAB766">string</span> 作为 <span class="parameter" style="color:#3A95FF">assertion</span>。当 <a href="https://www.php.net/manual/zh/info.configuration.php#ini.assert.active" class="link">assert.active</a>        和 <a href="https://www.php.net/manual/zh/ini.core.php#ini.zend.assertions" class="link">zend.assertions</a> 都设为 <span>1</span> 时，现在会发出        <strong><span>E_DEPRECATED</span></strong> 通知。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.assert-examples">  <h3 class="title">示例</h3>   <div class="example" id="example-1640">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">assert()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />assert</span><span style="color: #007700">(</span><span style="color: #9876AA">1 </span><span style="color: #007700">&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">'Hi!'</span><span style="color: #007700">;</span></span></span></div>    </div>    <div class="example-contents"><p>     如果启用断言（<a href="https://www.php.net/manual/zh/ini.core.php#ini.zend.assertions" class="link"><span>zend.assertions=1</span></a>）     以上示例会输出：    </p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Fatal error: Uncaught AssertionError: assert(1 &gt; 2) in example.php:2<br>Stack trace:<br>#0 example.php(2): assert(false, &#039;assert(1 &gt; 2)&#039;)<br>#1 {main}<br>  thrown in example.php on line 2<br></span></div>    </div>    <div class="example-contents"><p>     如果禁用断言（<span>zend.assertions=0</span> 或 <span>zend.assertions=-1</span>）     以上示例会输出：    </p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Hi!<br></span></div>    </div>   </div>   <div class="example" id="example-1643">    <p><strong>示例 #2 使用自定义信息</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />assert</span><span style="color: #007700">(</span><span style="color: #9876AA">1 </span><span style="color: #007700">&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #DD0000">"Expected one to be greater than two"</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">'Hi!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     如果启用断言，以上示例会输出：    </p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Fatal error: Uncaught AssertionError: Expected one to be greater than two in example.php:2<br>Stack trace:<br>#0 example.php(2): assert(false, &#039;Expected one to...&#039;)<br>#1 {main}<br>  thrown in example.php on line 2<br></span></div>    </div>    <div class="example-contents"><p>     如果禁用断言，以上示例会输出：    </p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Hi!<br></span></div>    </div>   </div>  <div class="example" id="example-1646">   <p><strong>示例 #3 使用自定义异常类</strong></p>   <div class="example-contents">    <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">ArithmeticAssertionError </span><span style="color: #007700">extends </span><span style="color: #9876AA">AssertionError </span><span style="color: #007700">{}<br /><br /></span><span style="color: #9876AA">assert</span><span style="color: #007700">(</span><span style="color: #9876AA">1 </span><span style="color: #007700">&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">, new </span><span style="color: #9876AA">ArithmeticAssertionError</span><span style="color: #007700">(</span><span style="color: #DD0000">"Expected one to be greater than two"</span><span style="color: #007700">));<br />echo </span><span style="color: #DD0000">'Hi!'</span><span style="color: #007700">;</span></span></span></div>   </div>    <div class="example-contents"><p>     如果启用断言，以上示例会输出：    </p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Fatal error: Uncaught ArithmeticAssertionError: Expected one to be greater than two in example.php:4<br>Stack trace:<br>#0 {main}<br>  thrown in example.php on line 4<br></span></div>    </div>   <div class="example-contents"><p>    如果禁用断言，以上示例会输出：   </p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Hi!<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.assert-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link assert_options()} - 设置/获取各种断言 flag</span></li>   </ul>  </span> </div></div>
 * @return bool false if the assertion is false, true otherwise.*/
function assert(
    mixed $assertion,
    #[PhpStormStubsElementAvailable(from: '7.0')] #[LanguageLevelTypeAware(['7.0' => 'Throwable|string|null'], default: 'string')] $description = null
): bool {}

/**
*<div id="class.assertionerror" class="reference"> <h1 class="title">AssertionError</h1>   <div class="partintro"><p class="verinfo">(PHP 7, PHP 8)</p>   <div class="section" id="assertionerror.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="ooclass"><span class="classname"><strong class="classname">AssertionError</strong></span></span> 在函数 <span class="function">{@link assert()}</span> 断言失败时被抛出。   </p>  </div>   <div class="section" id="assertionerror.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">AssertionError</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.error.php#error.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Error::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Error::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>    </div> </div></div>
*/
class AssertionError extends Error {}

/**
*<div id="function.assert-options" class="refentry"> <div class="refnamediv">  <h1 class="refname">assert_options</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">assert_options</span> &mdash; <span class="dc-title">设置/获取各种断言 flag</span></p> </div> <div id="function.assert-options-refsynopsisdiv">  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数自 PHP 8.3.0起<em>弃用</em>。强烈建议不要应用此函数。</p></div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.assert-options-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>assert_options</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$option</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   设置 <span class="function">{@link assert()}</span> 的各种控制选项，或者是仅仅查询当前的设置。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    不鼓励使用 <span class="function"><strong style="color:#CC7832">assert_options()</strong></span>，而是分别使用    <span class="function">{@link ini_set()}</span> 和 <span class="function">{@link ini_get()}</span> 设置和获取    <var class="filename">php.ini</var> 指令 <a href="https://www.php.net/manual/zh/ini.core.php#ini.zend.assertions" class="link">zend.assertions</a> 和    <a href="https://www.php.net/manual/zh/info.configuration.php#ini.assert.exception" class="link">assert.exception</a>。   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.assert-options-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">option</span></dt>     <dd>      <p class="para">       <table class="doctable table">        <caption><strong>断言选项</strong></caption>                 <thead>          <tr>           <th>选项</th>           <th>INI 设置</th>           <th>默认值</th>           <th>描述</th>          </tr>         </thead>         <tbody class="tbody">          <tr>           <td>ASSERT_ACTIVE</td>           <td>assert.active</td>           <td>1</td>           <td>启用 <span class="function">{@link assert()}</span> 断言</td>          </tr>          <tr>           <td>ASSERT_EXCEPTION</td>           <td>assert.exception</td>           <td>1</td>           <td>每个失败断言，抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.assertionerror.php" class="classname">AssertionError</a></span></td>          </tr>          <tr>           <td>ASSERT_WARNING</td>           <td>assert.warning</td>           <td>1</td>           <td>为每个失败的断言产生一个 PHP 警告（warning）</td>          </tr>          <tr>           <td>ASSERT_BAIL</td>           <td>assert.bail</td>           <td>0</td>           <td>在断言失败时中止执行</td>          </tr>          <tr>           <td>ASSERT_QUIET_EVAL</td>           <td>assert.quiet_eval</td>           <td>0</td>           <td>            在断言表达式求值时禁用 error_reporting。PHP 8.0.0 起移除。           </td>          </tr>          <tr>           <td>ASSERT_CALLBACK</td>           <td>assert.callback</td>           <td>(<strong><span>null</span></strong>)</td>           <td>断言失败时调用回调函数</td>          </tr>         </tbody>               </table>      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       可选的新选项值。      </p>      <p class="para">       通过 <strong><span>ASSERT_CALLBACK</span></strong> 或 <a href="https://www.php.net/manual/zh/info.configuration.php#ini.assert.callback" class="link">assert.callback</a> 设置的回调函数应该有以下签名：       <div class="methodsynopsis dc-description">        <span class="methodname" style="color:#CC7832"><strong>assert_callback</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$file</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$line</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$assertion</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$description</span><span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>       <dl>                 <dt><span class="parameter" style="color:#3A95FF">file</span></dt>         <dd>          <span class="simpara">           调用 <span class="function">{@link assert()}</span> 的文件名。          </span>         </dd>                         <dt><span class="parameter" style="color:#3A95FF">line</span></dt>         <dd>          <span class="simpara">           调用 <span class="function">{@link assert()}</span> 的行数。          </span>         </dd>                         <dt><span class="parameter" style="color:#3A95FF">assertion</span></dt>         <dd>          <span class="simpara">           在 PHP 8.0.0 之前，传递给 <span class="function">{@link assert()}</span> 的断言，仅作为字符串给出。           （如果断言是 boolean 条件，则此参数将为空字符串。）从 PHP 8.0.0 开始，此参数始终为 <strong><span>null</span></strong>。          </span>         </dd>                         <dt><span class="parameter" style="color:#3A95FF">description</span></dt>         <dd>          <span class="simpara">           传递给 <span class="function">{@link assert()}</span> 的描述。          </span>         </dd>               </dl>      </p>     </dd>       </dl>   向 <span class="parameter" style="color:#3A95FF">value</span> 传递空字符串会重置断言回调。  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.assert-options-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回任意选项的原始设置。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.assert-options-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">option</span> 是无效选项，抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.assert-options-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.3.0</td>       <td>        <span class="function"><strong style="color:#CC7832">assert_option()</strong></span> 现在已弃用。       </td>      </tr>      <tr>       <td>8.0.0</td>       <td>        如果 <span class="parameter" style="color:#3A95FF">option</span> 是无效选项，抛出        <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。之前返回 <strong><span>false</span></strong>。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.assert-options-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1637">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">assert_options()</strong></span> 示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 处理断言失败时的函数<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">assert_failure</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">, </span><span style="color: #9876AA">$line</span><span style="color: #007700">, </span><span style="color: #9876AA">$assertion</span><span style="color: #007700">, </span><span style="color: #9876AA">$message</span><span style="color: #007700">)<br />{<br />    echo </span><span style="color: #DD0000">"The assertion </span><span style="color: #9876AA">$assertion</span><span style="color: #DD0000"> in </span><span style="color: #9876AA">$file</span><span style="color: #DD0000"> on line </span><span style="color: #9876AA">$line</span><span style="color: #DD0000"> has failed: </span><span style="color: #9876AA">$message</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// 我们的测试函数<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">test_assert</span><span style="color: #007700">(</span><span style="color: #9876AA">$parameter</span><span style="color: #007700">)<br />{<br />    </span><span style="color: #9876AA">assert</span><span style="color: #007700">(</span><span style="color: #9876AA">is_bool</span><span style="color: #007700">(</span><span style="color: #9876AA">$parameter</span><span style="color: #007700">));<br />}<br /><br /></span><span style="color: #FF8000">// 设置断言选项<br /></span><span style="color: #9876AA">assert_options</span><span style="color: #007700">(</span><span style="color: #9876AA">ASSERT_ACTIVE</span><span style="color: #007700">,   </span><span style="color: #9876AA">true</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">assert_options</span><span style="color: #007700">(</span><span style="color: #9876AA">ASSERT_BAIL</span><span style="color: #007700">,     </span><span style="color: #9876AA">true</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">assert_options</span><span style="color: #007700">(</span><span style="color: #9876AA">ASSERT_WARNING</span><span style="color: #007700">,  </span><span style="color: #9876AA">false</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">assert_options</span><span style="color: #007700">(</span><span style="color: #9876AA">ASSERT_CALLBACK</span><span style="color: #007700">, </span><span style="color: #DD0000">'assert_failure'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 让一个断言会失败<br /></span><span style="color: #9876AA">test_assert</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 由于 ASSERT_BAIL 是 true，这里永远也到不了<br /></span><span style="color: #007700">echo </span><span style="color: #DD0000">'Never reached'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.assert-options-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link assert()} - 断言检测</span></li>   </ul>  </span> </div></div>
 * @return mixed The original setting of any option.*/
function assert_options(int $option, mixed $value): mixed {}

/**
*<div id="function.version-compare" class="refentry"> <div class="refnamediv">  <h1 class="refname">version_compare</h1>  <p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">version_compare</span> &mdash; <span class="dc-title">对比两个「PHP 规范化」的版本数字字符串</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.version-compare-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>version_compare</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$version1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$version2</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$operator</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">bool</span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">version_compare()</strong></span> 用于对比两个「PHP 规范化」的版本数字字符串。  </p>  <p class="para">   此函数首先在版本字符串里用一个点 <span>.</span> 替换 <span>_</span>、<span>-</span> 和 <span>+</span>，也会在任意非数字前后插入一个点 <span>.</span>，这样，类似 &#039;4.3.2RC1&#039; 将会变成 &#039;4.3.2.RC.1&#039;。   接下来它会分割结果，   然后它会从左往右对比各个部分。   如果某部分包含了特定的版本字符串，将会用以下顺序处理：   <span>列表中未找到的任意字符串</span> &lt;    <span>dev</span> &lt; <span>alpha</span> =   <span>a</span> &lt; <span>beta</span> =   <span>b</span> &lt; <span>RC</span> =     <span>rc</span> &lt; <span>#</span> &lt;   <span>pl</span> = <span>p</span>。      这种方式不仅能够对比类似 &#039;4.1&#039; 和 &#039;4.1.2&#039; 那种不同的版本级别，同时也可以指定对比任何包含 PHP 开发状态的版本。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.version-compare-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">version1</span></dt>     <dd>      <p class="para">       第一个版本数。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">version2</span></dt>     <dd>      <p class="para">       第二个版本数。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">operator</span></dt>     <dd>      <p class="para">       可选运算符。可能运算符有：<span>&lt;</span>、<span>lt</span>、<span>&lt;=</span>、<span>le</span>、       <span>&gt;</span>、<span>gt</span>、<span>&gt;=</span>、<span>ge</span>、<span>==</span>、       <span>=</span>、<span>eq</span>、<span>!=</span>、<span>&lt;&gt;</span>、<span>ne</span>。      </p>      <p class="para">       此参数区分大小写，它的值应该是小写的。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.version-compare-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">      默认情况下，在第一个版本低于第二个时，<span class="function"><strong style="color:#CC7832">version_compare()</strong></span> 返回 <span>-1</span>；如果两者相等，返回 <span>0</span>；第二个版本更低时则返回 <span>1</span>。  </p>  <p class="para">   当使用了可选参数 <span class="parameter" style="color:#3A95FF">operator</span> 时，如果关系是操作符所指定的那个，函数将返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.version-compare-examples">  <h3 class="title">示例</h3>  <span>   下例使用了 <strong><span>PHP_VERSION</span></strong> 常量，因为它执行的代码包含了 PHP 版本的值。  </span>  <p class="para">   <div class="example" id="example-1784">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">version_compare()</strong></span> examples</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">version_compare</span><span style="color: #007700">(</span><span style="color: #9876AA">PHP_VERSION</span><span style="color: #007700">, </span><span style="color: #DD0000">'7.0.0'</span><span style="color: #007700">) &gt;= </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'I am at least PHP version 7.0.0, my version: ' </span><span style="color: #007700">. </span><span style="color: #9876AA">PHP_VERSION </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br />if (</span><span style="color: #9876AA">version_compare</span><span style="color: #007700">(</span><span style="color: #9876AA">PHP_VERSION</span><span style="color: #007700">, </span><span style="color: #DD0000">'5.3.0'</span><span style="color: #007700">) &gt;= </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'I am at least PHP version 5.3.0, my version: ' </span><span style="color: #007700">. </span><span style="color: #9876AA">PHP_VERSION </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br />if (</span><span style="color: #9876AA">version_compare</span><span style="color: #007700">(</span><span style="color: #9876AA">PHP_VERSION</span><span style="color: #007700">, </span><span style="color: #DD0000">'5.0.0'</span><span style="color: #007700">, </span><span style="color: #DD0000">'&gt;='</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">'I am at least PHP version 5.0.0, my version: ' </span><span style="color: #007700">. </span><span style="color: #9876AA">PHP_VERSION </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br />if (</span><span style="color: #9876AA">version_compare</span><span style="color: #007700">(</span><span style="color: #9876AA">PHP_VERSION</span><span style="color: #007700">, </span><span style="color: #DD0000">'5.0.0'</span><span style="color: #007700">, </span><span style="color: #DD0000">'&lt;'</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">'I am still PHP 4, my version: ' </span><span style="color: #007700">. </span><span style="color: #9876AA">PHP_VERSION </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.version-compare-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <strong><span>PHP_VERSION</span></strong> 常量包含了当前 PHP 的版本。   </p>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    注意，类似 5.3.0-dev 的预发行版本，被认为是低于它们的最终发行版本（就像 5.3.0）。   </p>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    指定类似 <span>alpha</span>、<span>beta</span> 的版本字符串是大小写敏感的。    版本字符串的来源若不遵循 PHP 标准，可能需要在调用 <span class="function"><strong style="color:#CC7832">version_compare()</strong></span> 之前先用 <span class="function">{@link strtolower()}</span> 转成小写。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.version-compare-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link phpversion()} - 获取当前的PHP版本</span></li>    <li class="member"><span class="function">{@link php_uname()} - 返回运行 PHP 的系统的有关信息</span></li>    <li class="member"><span class="function">{@link function_exists()} - 如果给定的函数已经被定义就返回 true</span></li>   </ul>  </span> </div></div>
 * @return int|bool By default, version_compare returns*/
function version_compare(
    string $version1,
    string $version2,
    #[ExpectedValues(values: [
               "<",
               "lt",
               "<=",
               "le",
               ">",
               "gt",
               ">=",
               "ge",
               "==",
               "=",
               "eq",
               "!=",
               "<>",
               "ne"
           ])] ?string $operator
): int|bool {}

/**
*<div id="function.ftok" class="refentry"> <div class="refnamediv">  <h1 class="refname">ftok</h1>  <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ftok</span> &mdash; <span class="dc-title">Convert a pathname and a project identifier to a System V IPC key</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ftok-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>ftok</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$project_id</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   The function converts the <span class="parameter" style="color:#3A95FF">filename</span> of an existing   accessible file and a project identifier into an   <span>integer</span> for use with for example   <span class="function">{@link shmop_open()}</span> and other System V IPC keys.   </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ftok-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">filename</span></dt>     <dd>      <p class="para">       Path to an accessible file.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">project_id</span></dt>     <dd>      <p class="para">       Project identifier. This must be a one character string.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ftok-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   On success the return value will be the created key value, otherwise   <span>-1</span> is returned.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ftok-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link shmop_open()} - Create or open shared memory block</span></li>    <li class="member"><span class="function">{@link sem_get()} - Get a semaphore id</span></li>   </ul>  </span> </div></div>
 * @return int On success the return value will be the created key value, otherwise*/
function ftok(string $filename, string $project_id): int {}

/**
*<div id="function.str-rot13" class="refentry"> <div class="refnamediv">  <h1 class="refname">str_rot13</h1>  <p class="verinfo">(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">str_rot13</span> &mdash; <span class="dc-title">对字符串执行 ROT13 转换</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.str-rot13-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>str_rot13</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   对 <span class="parameter" style="color:#3A95FF">string</span> 参数执行 ROT13 编码并将结果字符串返回。  </p>  <p class="para">   ROT13 编码简单地使用字母表中后面第 13 个字母替换当前字母，同时忽略非字母表中的字符。编码和解码都使用相同的函数，传递一个编码过的字符串作为参数，将得到原始字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.str-rot13-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       输入字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.str-rot13-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回给定字符串的 ROT13 版本。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.str-rot13-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">str_rot13()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">str_rot13</span><span style="color: #007700">(</span><span style="color: #DD0000">'PHP 4.3.0'</span><span style="color: #007700">); </span><span style="color: #FF8000">// CUC 4.3.0<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div></div>
 * @return string the ROT13 version of the given string.*/
function str_rot13(string $string): string {}

/**
*<div id="function.stream-get-filters" class="refentry"> <div class="refnamediv">  <h1 class="refname">stream_get_filters</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">stream_get_filters</span> &mdash; <span class="dc-title">获取已注册的数据流过滤器列表</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stream-get-filters-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>stream_get_filters</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="simpara">   获取当前运行系统中已注册的数据流过滤器列表。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.stream-get-filters-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.stream-get-filters-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个包含所有有效的数据流过滤器名字的索引数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.stream-get-filters-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 使用 <span class="function"><strong style="color:#CC7832">stream_get_filters()</strong></span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$streamlist </span><span style="color: #007700">= </span><span style="color: #9876AA">stream_get_filters</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$streamlist</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array (<br>  [0] =&gt; string.rot13<br>  [1] =&gt; string.toupper<br>  [2] =&gt; string.tolower<br>  [3] =&gt; string.base64<br>  [4] =&gt; string.quoted-printable<br>)<br></span></div>    </div>   </div>  </span> </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.stream-get-filters-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link stream_filter_register()} - Register a user defined stream filter</span></li>   <li class="member"><span class="function">{@link stream_get_wrappers()} - 获取已注册的流类型</span></li>  </ul> </div></div>
 * @return list<string> an indexed array containing the name of all stream filters*/
function stream_get_filters(): array {}

/**
*<div id="function.stream-isatty" class="refentry"> <div class="refnamediv">  <h1 class="refname">stream_isatty</h1>  <p class="verinfo">(PHP 7 &gt;= 7.2.0, PHP 8)</p><p class="refpurpose"><span class="refname">stream_isatty</span> &mdash; <span class="dc-title">Check if a stream is a TTY</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stream-isatty-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>stream_isatty</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$stream</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Determines if stream <span class="parameter" style="color:#3A95FF">stream</span> refers to a valid terminal type device.   This is a more portable version of <span class="function">{@link posix_isatty()}</span>, since it works on Windows systems too.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.stream-isatty-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">stream</span></dt>    <dd>     <span>           </span>    </dd>     </dl> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.stream-isatty-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.stream-isatty-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">stream_isatty()</strong></span> example</strong></p>    <div class="example-contents"><p>     This command can be used to determine if a standard output / standard error stream is redirected to a file.    </p></div>    <div class="example-contents"><div class="shcode"><span>php -r &quot;var_export(stream_isatty(STDERR));&quot;</span></div></div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><br />     true<br />    </div>    <div class="example-contents"><div class="shcode"><span>php -r &quot;var_export(stream_isatty(STDERR));&quot; 2&gt;output.txt</span></div></div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><br />     false<br />    </div>   </div>   </span> </div> </div>
 * @return bool*/
function stream_isatty($stream): bool {}

/**
*<div id="function.stream-filter-register" class="refentry"> <div class="refnamediv">  <h1 class="refname">stream_filter_register</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">stream_filter_register</span> &mdash; <span class="dc-title">Register a user defined stream filter</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stream-filter-register-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>stream_filter_register</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filter_name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">stream_filter_register()</strong></span> allows you to implement   your own filter on any registered stream used with all the other   filesystem functions (such as <span class="function">{@link fopen()}</span>,   <span class="function">{@link fread()}</span> etc.).  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.stream-filter-register-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">filter_name</span></dt>     <dd>      <p class="para">       The filter name to be registered.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       To implement a filter, you need to define a class as an extension of       <span class="classname"><a href="https://www.php.net/manual/zh/class.php-user-filter.php" class="classname">php_user_filter</a></span> with a number of member       functions. When performing read/write operations on the stream       to which your filter is attached, PHP will pass the data through your       filter (and any other filters attached to that stream) so that the       data may be modified as desired. You must implement the methods       exactly as described in <span class="classname"><a href="https://www.php.net/manual/zh/class.php-user-filter.php" class="classname">php_user_filter</a></span> - doing       otherwise will lead to undefined behaviour.      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.stream-filter-register-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p>  <p class="para">   <span class="function"><strong style="color:#CC7832">stream_filter_register()</strong></span> will return <strong><span>false</span></strong> if the   <span class="parameter" style="color:#3A95FF">filter_name</span> is already defined.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.stream-filter-register-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Filter for capitalizing characters on <var class="filename">foo-bar.txt</var> stream</strong></p>    <div class="example-contents"><p>     The example below implements a filter named <span>strtoupper</span>     on the <var class="filename">foo-bar.txt</var> stream which will capitalize     all letter characters written to/read from that stream.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">// Define our filter class <br /></span><span style="color: #007700">class </span><span style="color: #9876AA">strtoupper_filter </span><span style="color: #007700">extends </span><span style="color: #9876AA">php_user_filter </span><span style="color: #007700">{<br />  function </span><span style="color: #9876AA">filter</span><span style="color: #007700">(</span><span style="color: #9876AA">$in</span><span style="color: #007700">, </span><span style="color: #9876AA">$out</span><span style="color: #007700">, &amp;</span><span style="color: #9876AA">$consumed</span><span style="color: #007700">, </span><span style="color: #9876AA">$closing</span><span style="color: #007700">)<br />  {<br />    while (</span><span style="color: #9876AA">$bucket </span><span style="color: #007700">= </span><span style="color: #9876AA">stream_bucket_make_writeable</span><span style="color: #007700">(</span><span style="color: #9876AA">$in</span><span style="color: #007700">)) {<br />      </span><span style="color: #9876AA">$bucket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">data </span><span style="color: #007700">= </span><span style="color: #9876AA">strtoupper</span><span style="color: #007700">(</span><span style="color: #9876AA">$bucket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">data</span><span style="color: #007700">);<br />      </span><span style="color: #9876AA">$consumed </span><span style="color: #007700">+= </span><span style="color: #9876AA">$bucket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">datalen</span><span style="color: #007700">;<br />      </span><span style="color: #9876AA">stream_bucket_append</span><span style="color: #007700">(</span><span style="color: #9876AA">$out</span><span style="color: #007700">, </span><span style="color: #9876AA">$bucket</span><span style="color: #007700">);<br />    }<br />    return </span><span style="color: #9876AA">PSFS_PASS_ON</span><span style="color: #007700">;<br />  }<br />}<br /><br /></span><span style="color: #FF8000">// Register our filter with PHP <br /></span><span style="color: #9876AA">stream_filter_register</span><span style="color: #007700">(</span><span style="color: #DD0000">"strtoupper"</span><span style="color: #007700">, </span><span style="color: #DD0000">"strtoupper_filter"</span><span style="color: #007700">)<br />    or die(</span><span style="color: #DD0000">"Failed to register filter"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$fp </span><span style="color: #007700">= </span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">"foo-bar.txt"</span><span style="color: #007700">, </span><span style="color: #DD0000">"w"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Attach the registered filter to the stream just opened <br /></span><span style="color: #9876AA">stream_filter_append</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">, </span><span style="color: #DD0000">"strtoupper"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">, </span><span style="color: #DD0000">"Line1\n"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">, </span><span style="color: #DD0000">"Word - 2\n"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">, </span><span style="color: #DD0000">"Easy As 123\n"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">fclose</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Read the contents back out<br /> <br /></span><span style="color: #9876AA">readfile</span><span style="color: #007700">(</span><span style="color: #DD0000">"foo-bar.txt"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>LINE1<br>WORD - 2<br>EASY AS 123<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 Registering a generic filter class to match multiple filter names.</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">// Define our filter class <br /></span><span style="color: #007700">class </span><span style="color: #9876AA">string_filter </span><span style="color: #007700">extends </span><span style="color: #9876AA">php_user_filter </span><span style="color: #007700">{<br />  var </span><span style="color: #9876AA">$mode</span><span style="color: #007700">;<br /><br />  function </span><span style="color: #9876AA">filter</span><span style="color: #007700">(</span><span style="color: #9876AA">$in</span><span style="color: #007700">, </span><span style="color: #9876AA">$out</span><span style="color: #007700">, &amp;</span><span style="color: #9876AA">$consumed</span><span style="color: #007700">, </span><span style="color: #9876AA">$closing</span><span style="color: #007700">)<br />  {<br />    while (</span><span style="color: #9876AA">$bucket </span><span style="color: #007700">= </span><span style="color: #9876AA">stream_bucket_make_writeable</span><span style="color: #007700">(</span><span style="color: #9876AA">$in</span><span style="color: #007700">)) {<br />      if (</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">mode </span><span style="color: #007700">== </span><span style="color: #9876AA">1</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">$bucket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">data </span><span style="color: #007700">= </span><span style="color: #9876AA">strtoupper</span><span style="color: #007700">(</span><span style="color: #9876AA">$bucket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">data</span><span style="color: #007700">);<br />      } elseif (</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">mode </span><span style="color: #007700">== </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">$bucket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">data </span><span style="color: #007700">= </span><span style="color: #9876AA">strtolower</span><span style="color: #007700">(</span><span style="color: #9876AA">$bucket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">data</span><span style="color: #007700">);<br />      }<br /><br />      </span><span style="color: #9876AA">$consumed </span><span style="color: #007700">+= </span><span style="color: #9876AA">$bucket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">datalen</span><span style="color: #007700">;<br />      </span><span style="color: #9876AA">stream_bucket_append</span><span style="color: #007700">(</span><span style="color: #9876AA">$out</span><span style="color: #007700">, </span><span style="color: #9876AA">$bucket</span><span style="color: #007700">);<br />    }<br />    return </span><span style="color: #9876AA">PSFS_PASS_ON</span><span style="color: #007700">;<br />  }<br /><br />  function </span><span style="color: #9876AA">onCreate</span><span style="color: #007700">()<br />  {<br />    if (</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">filtername </span><span style="color: #007700">== </span><span style="color: #DD0000">'str.toupper'</span><span style="color: #007700">) {<br />      </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">mode </span><span style="color: #007700">= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />    } elseif (</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">filtername </span><span style="color: #007700">== </span><span style="color: #DD0000">'str.tolower'</span><span style="color: #007700">) {<br />      </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">mode </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />    } else {<br />      </span><span style="color: #FF8000">// Some other str.* filter was asked for,<br />         report failure so that PHP will keep looking <br />      </span><span style="color: #007700">return </span><span style="color: #9876AA">false</span><span style="color: #007700">;<br />    }<br /><br />    return </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br />  }<br />}<br /><br /></span><span style="color: #FF8000">// Register our filter with PHP <br /></span><span style="color: #9876AA">stream_filter_register</span><span style="color: #007700">(</span><span style="color: #DD0000">"str.*"</span><span style="color: #007700">, </span><span style="color: #DD0000">"string_filter"</span><span style="color: #007700">)<br />    or die(</span><span style="color: #DD0000">"Failed to register filter"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$fp </span><span style="color: #007700">= </span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">"foo-bar.txt"</span><span style="color: #007700">, </span><span style="color: #DD0000">"w"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Attach the registered filter to the stream just opened<br />   We could alternately bind to str.tolower here <br /></span><span style="color: #9876AA">stream_filter_append</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">, </span><span style="color: #DD0000">"str.toupper"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">, </span><span style="color: #DD0000">"Line1\n"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">, </span><span style="color: #DD0000">"Word - 2\n"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">, </span><span style="color: #DD0000">"Easy As 123\n"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">fclose</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Read the contents back out<br /> <br /></span><span style="color: #9876AA">readfile</span><span style="color: #007700">(</span><span style="color: #DD0000">"foo-bar.txt"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>LINE1<br>WORD - 2<br>EASY AS 123<br></span></div>    </div>   </div>  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.stream-filter-register-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link stream_wrapper_register()} - 注册一个用 PHP 类实现的 URL 封装协议</span></li>    <li class="member"><span class="function">{@link stream_filter_append()} - Attach a filter to a stream</span></li>    <li class="member"><span class="function">{@link stream_filter_prepend()} - Attach a filter to a stream</span></li>   </ul>  </span> </div></div>
 * @return bool true on success or false on failure.*/
function stream_filter_register(string $filter_name, string $class): bool {}

/**
*<div id="function.stream-bucket-make-writeable" class="refentry"> <div class="refnamediv">  <h1 class="refname">stream_bucket_make_writeable</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">stream_bucket_make_writeable</span> &mdash; <span class="dc-title">   Returns a bucket object from the brigade to operate on  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stream-bucket-make-writeable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>stream_bucket_make_writeable</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$brigade</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">object</span></span></div>  <p class="para rdfs-comment">   This function is called whenever there is the need to access and operate on the content contains in a brigade. It is   typically called from <span class="methodname" style="color:#CC7832">{@link php_user_filter::filter()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.stream-bucket-make-writeable-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">brigade</span></dt>     <dd>      <p class="para">       The brigade to return a bucket object from.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.stream-bucket-make-writeable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a bucket object with the properties listed below or <strong><span>null</span></strong>.   <dl>         <dt>      <span class="property">data</span>      (<span class="type" style="color:#EAB766">string</span>)     </dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">data</span> <span>bucket</span> The current string in the bucket.      </p>     </dd>             <dt>      <span class="property">datalen</span>      (<span class="type" style="color:#EAB766">integer</span>)     </dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">datalen</span> <span>bucket</span> The length of the string in the bucket.      </p>     </dd>       </dl>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.stream-bucket-make-writeable-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link stream_bucket_append()} - Append bucket to brigade</span></li>    <li class="member"><span class="function">{@link stream_bucket_prepend()} - Prepend bucket to brigade</span></li>   </ul>  </span> </div></div>
 * @return object|null*/
function stream_bucket_make_writeable($brigade): ?object {}

/**
*<div id="function.stream-bucket-prepend" class="refentry"> <div class="refnamediv">  <h1 class="refname">stream_bucket_prepend</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">stream_bucket_prepend</span> &mdash; <span class="dc-title">   Prepend bucket to brigade  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stream-bucket-prepend-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>stream_bucket_prepend</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$brigade</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$bucket</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">    This function can be called to prepend a bucket to a bucket brigade. It    is typically called from <span class="methodname" style="color:#CC7832">{@link php_user_filter::filter()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.stream-bucket-prepend-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">brigade</span></dt>    <dd>     <span>      <span class="parameter" style="color:#3A95FF">brigade</span> is a resource pointing to a <span>bucket brigade</span>      which contains one or more <span>bucket</span> objects.     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">bucket</span></dt>    <dd>     <p class="para">      A bucket object.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.stream-bucket-prepend-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.stream-bucket-prepend-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">stream_bucket_prepend()</strong></span> examples</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class </span><span style="color: #9876AA">foo </span><span style="color: #007700">extends </span><span style="color: #9876AA">php_user_filter </span><span style="color: #007700">{<br />  protected </span><span style="color: #9876AA">$calls </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />  public function </span><span style="color: #9876AA">filter</span><span style="color: #007700">(</span><span style="color: #9876AA">$in</span><span style="color: #007700">, </span><span style="color: #9876AA">$out</span><span style="color: #007700">, &amp;</span><span style="color: #9876AA">$consumed</span><span style="color: #007700">, </span><span style="color: #9876AA">$closing</span><span style="color: #007700">) {<br />    while (</span><span style="color: #9876AA">$bucket </span><span style="color: #007700">= </span><span style="color: #9876AA">stream_bucket_make_writeable</span><span style="color: #007700">(</span><span style="color: #9876AA">$in</span><span style="color: #007700">)) {<br />      </span><span style="color: #9876AA">$consumed </span><span style="color: #007700">+= </span><span style="color: #9876AA">$bucket</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">datalen</span><span style="color: #007700">;<br />      if (</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">calls</span><span style="color: #007700">++ == </span><span style="color: #9876AA">2</span><span style="color: #007700">) {<br />        </span><span style="color: #FF8000">// This bucket will appear again before any other bucket.<br />        </span><span style="color: #9876AA">stream_bucket_prepend</span><span style="color: #007700">(</span><span style="color: #9876AA">$in</span><span style="color: #007700">, </span><span style="color: #9876AA">$bucket</span><span style="color: #007700">);<br />      }<br />    }<br />    return </span><span style="color: #9876AA">PSFS_FEED_ME</span><span style="color: #007700">;<br />  }<br />}<br /></span><span style="color: #9876AA">stream_filter_register</span><span style="color: #007700">(</span><span style="color: #DD0000">'test'</span><span style="color: #007700">, </span><span style="color: #DD0000">'foo'</span><span style="color: #007700">);<br />print  </span><span style="color: #9876AA">file_get_contents</span><span style="color: #007700">(</span><span style="color: #DD0000">'php://filter/read=test/resource=foo'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div></div>
 * @return void*/
function stream_bucket_prepend($brigade, object $bucket): void {}

/**
*<div id="function.stream-bucket-append" class="refentry"> <div class="refnamediv">  <h1 class="refname">stream_bucket_append</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">stream_bucket_append</span> &mdash; <span class="dc-title">   Append bucket to brigade  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stream-bucket-append-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>stream_bucket_append</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$brigade</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$bucket</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div></div>
 * @return void*/
function stream_bucket_append($brigade, object $bucket): void {}

/**
*<div id="function.stream-bucket-new" class="refentry"> <div class="refnamediv">  <h1 class="refname">stream_bucket_new</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">stream_bucket_new</span> &mdash; <span class="dc-title">   Create a new bucket for use on the current stream  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stream-bucket-new-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>stream_bucket_new</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$stream</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$buffer</span></span>): <span class="type" style="color:#EAB766">object</span></div>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div></div>
 * @return object*/
function stream_bucket_new($stream, string $buffer): object {}

/**
*<div id="function.output-add-rewrite-var" class="refentry"> <div class="refnamediv">  <h1 class="refname">output_add_rewrite_var</h1>  <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">output_add_rewrite_var</span> &mdash; <span class="dc-title">添加URL重写器的值（Add URL rewriter values）</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.output-add-rewrite-var-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>output_add_rewrite_var</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   此函数给URL重写机制添加名/值对。   这种名值对将被添加到 URL（以 GET 参数的形式）和表单（以 input 隐藏域的形式），当透明 URL 重写用    <a href="https://www.php.net/manual/zh/session.configuration.php#ini.session.use-trans-sid" class="link">session.use_trans_sid</a>   开启时同样可以添加到 session ID。  </p>  <p class="para">   此函数的行为受 <a href="https://www.php.net/manual/zh/outcontrol.configuration.php#ini.url-rewriter.tags" class="link">url_rewriter.tags</a> 和   <a href="https://www.php.net/manual/zh/outcontrol.configuration.php#ini.url-rewriter.hosts" class="link">url_rewriter.hosts</a> <var class="filename">php.ini</var> 参数控制。  </p>  <p class="para">   注意，每个请求最多可以成功调用此函数一次。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    如果还没有活跃的输出缓冲区，调用此函数将隐式地开启它。   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.output-add-rewrite-var-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       变量名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       变量值。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.output-add-rewrite-var-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.output-add-rewrite-var-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.1.0</td>       <td>        在 PHP 7.1.0 之前，使用 <span class="function"><strong style="color:#CC7832">output_add_rewrite_var()</strong></span> 设置重写变量使用相同的        Session 模块 trans sid 输出缓冲区。从 PHP 7.1.0 起，使用专用的输出缓冲区，<a href="https://www.php.net/manual/zh/outcontrol.configuration.php#ini.url-rewriter.tags" class="link">        url_rewriter.tags</a> 仅用于输出函数，新增 <a href="https://www.php.net/manual/zh/outcontrol.configuration.php#ini.url-rewriter.tags" class="link">url_rewriter.hosts</a>。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.output-add-rewrite-var-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1631">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">output_add_rewrite_var()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />output_add_rewrite_var</span><span style="color: #007700">(</span><span style="color: #DD0000">'var'</span><span style="color: #007700">, </span><span style="color: #DD0000">'value'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// some links<br /></span><span style="color: #007700">echo </span><span style="color: #DD0000">'&lt;a href="file.php"&gt;link&lt;/a&gt;<br />&lt;a href="http://example.com"&gt;link2&lt;/a&gt;'</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// a form<br /></span><span style="color: #007700">echo </span><span style="color: #DD0000">'&lt;form action="script.php" method="post"&gt;<br />&lt;input type="text" name="var2" /&gt;<br />&lt;/form&gt;'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">ob_list_handlers</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>&lt;a href=&quot;file.php?var=value&quot;&gt;link&lt;/a&gt;<br>&lt;a href=&quot;http://example.com&quot;&gt;link2&lt;/a&gt;<br><br>&lt;form action=&quot;script.php&quot; method=&quot;post&quot;&gt;<br>&lt;input type=&quot;hidden&quot; name=&quot;var&quot; value=&quot;value&quot; /&gt;<br>&lt;input type=&quot;text&quot; name=&quot;var2&quot; /&gt;<br>&lt;/form&gt;<br><br>Array<br>(<br>    [0] =&gt; URL-Rewriter<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.output-add-rewrite-var-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link output_reset_rewrite_vars()} - 重设URL重写器的值（Reset URL rewriter values）</span></li>    <li class="member"><span class="function">{@link ob_flush()} - 冲刷出（送出）输出缓冲区中的内容</span></li>    <li class="member"><span class="function">{@link ob_list_handlers()} - 列出所有使用的输出处理程序</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/outcontrol.configuration.php#ini.url-rewriter.tags" class="link">url_rewriter.tags</a></li>    <li class="member"><a href="https://www.php.net/manual/zh/outcontrol.configuration.php#ini.url-rewriter.hosts" class="link">url_rewriter.hosts</a></li>    <li class="member"><a href="https://www.php.net/manual/zh/session.configuration.php#ini.session.trans-sid-tags" class="link">session.trans_sid_tags</a></li>    <li class="member"><a href="https://www.php.net/manual/zh/session.configuration.php#ini.session.trans-sid-hosts" class="link">session.trans_sid_hosts</a></li>   </ul>  </span> </div>  </div>
 * @return bool true on success or false on failure.*/
function output_add_rewrite_var(string $name, string $value): bool {}

/**
*<div id="function.output-reset-rewrite-vars" class="refentry"> <div class="refnamediv">  <h1 class="refname">output_reset_rewrite_vars</h1>  <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">output_reset_rewrite_vars</span> &mdash; <span class="dc-title">重设URL重写器的值（Reset URL rewriter values）</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.output-reset-rewrite-vars-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>output_reset_rewrite_vars</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   此函数重置 URL 重写器并移除所有的先前由 <span class="function">{@link output_add_rewrite_var()}</span>    函数设置的所有重写变量。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.output-reset-rewrite-vars-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.output-reset-rewrite-vars-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.output-reset-rewrite-vars-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.1.0</td>       <td>        在 PHP 7.1.0 之前，使用 <span class="function">{@link output_add_rewrite_var()}</span> 设置重写变量使用相同的        Session 模块 trans sid 输出缓冲区。从 PHP 7.1.0 起，使用专用的输出缓冲区，<span class="function"><strong style="color:#CC7832">output_reset_rewrite_vars()</strong></span>        仅删除由 <span class="function">{@link output_add_rewrite_var()}</span> 定义的重写变量。      </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.output-reset-rewrite-vars-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1634">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">output_reset_rewrite_vars()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />session_start</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">output_add_rewrite_var</span><span style="color: #007700">(</span><span style="color: #DD0000">'var'</span><span style="color: #007700">, </span><span style="color: #DD0000">'value'</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #DD0000">'&lt;a href="file.php"&gt;link&lt;/a&gt;'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">ob_flush</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">output_reset_rewrite_vars</span><span style="color: #007700">();<br />echo </span><span style="color: #DD0000">'&lt;a href="file.php"&gt;link&lt;/a&gt;'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>&lt;a href=&quot;file.php?PHPSESSID=xxx&amp;var=value&quot;&gt;link&lt;/a&gt;<br>&lt;a href=&quot;file.php&quot;&gt;link&lt;/a&gt;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.output-reset-rewrite-vars-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link output_add_rewrite_var()} - 添加URL重写器的值（Add URL rewriter values）</span></li>    <li class="member"><span class="function">{@link ob_flush()} - 冲刷出（送出）输出缓冲区中的内容</span></li>    <li class="member"><span class="function">{@link ob_list_handlers()} - 列出所有使用的输出处理程序</span></li>    <li class="member"><span class="function">{@link session_start()} - 启动新会话或者重用现有会话</span></li>   </ul>  </span> </div>  </div>
 * @return bool true on success or false on failure.*/
function output_reset_rewrite_vars(): bool {}

/**
*<div id="function.sys-get-temp-dir" class="refentry"> <div class="refnamediv">  <h1 class="refname">sys_get_temp_dir</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.1, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">sys_get_temp_dir</span> &mdash; <span class="dc-title">返回用于临时文件的目录</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.sys-get-temp-dir-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>sys_get_temp_dir</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   返回 PHP 储存临时文件的默认目录的路径。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.sys-get-temp-dir-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.sys-get-temp-dir-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回临时目录的路径。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.sys-get-temp-dir-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-1781">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">sys_get_temp_dir()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 使用 sys_get_temp_dir() 在目录里创建临时文件<br /></span><span style="color: #9876AA">$temp_file </span><span style="color: #007700">= </span><span style="color: #9876AA">tempnam</span><span style="color: #007700">(</span><span style="color: #9876AA">sys_get_temp_dir</span><span style="color: #007700">(), </span><span style="color: #DD0000">'Tux'</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #9876AA">$temp_file</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>C:\Windows\Temp\TuxA318.tmp<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.sys-get-temp-dir-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link tmpfile()} - 建立一个临时文件</span></li>    <li class="member"><span class="function">{@link tempnam()} - 建立一个具有唯一文件名的文件</span></li>   </ul>  </span> </div></div>
 * @return string the path of the temporary directory.*/
function sys_get_temp_dir(): string {}

/**
*<div id="function.realpath-cache-get" class="refentry"> <div class="refnamediv">  <h1 class="refname">realpath_cache_get</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">realpath_cache_get</span> &mdash; <span class="dc-title">获取真实目录缓存的详情</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.realpath-cache-get-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>realpath_cache_get</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获得真实路径缓存的详情。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.realpath-cache-get-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.realpath-cache-get-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回真实路径缓存详情的数组。键是原始路径以及值为具体信息数组，含有该解析的路径，过期时间以及其他的更多选项。   </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.realpath-cache-get-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">realpath_cache_get()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">realpath_cache_get</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(2) {<br>  [&quot;/test&quot;]=&gt;<br>  array(4) {<br>    [&quot;key&quot;]=&gt;<br>    int(123456789)<br>    [&quot;is_dir&quot;]=&gt;<br>    bool(true)<br>    [&quot;realpath&quot;]=&gt;<br>    string(5) &quot;/test&quot;<br>    [&quot;expires&quot;]=&gt;<br>    int(1260318939)<br>  }<br>  [&quot;/test/test.php&quot;]=&gt;<br>  array(4) {<br>    [&quot;key&quot;]=&gt;<br>    int(987654321)<br>    [&quot;is_dir&quot;]=&gt;<br>    bool(false)<br>    [&quot;realpath&quot;]=&gt;<br>    string(12) &quot;/root/test.php&quot;<br>    [&quot;expires&quot;]=&gt;<br>    int(1260318939)<br>  }<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.realpath-cache-get-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link realpath_cache_size()} - 获取真实路径缓冲区的大小</span></li>   </ul>  </span> </div></div>
 * @return array Returns an array of realpath cache entries. The keys are*/
function realpath_cache_get(): array {}

/**
*<div id="function.realpath-cache-size" class="refentry"> <div class="refnamediv">  <h1 class="refname">realpath_cache_size</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">realpath_cache_size</span> &mdash; <span class="dc-title">获取真实路径缓冲区的大小</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.realpath-cache-size-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>realpath_cache_size</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   获取真实路径缓存区大小在内存中的使用量。     </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.realpath-cache-size-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.realpath-cache-size-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回真实路径缓存区使用内存的用量。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.realpath-cache-size-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">realpath_cache_size()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">realpath_cache_size</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(412)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.realpath-cache-size-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link realpath_cache_get()} - 获取真实目录缓存的详情</span></li>    <li class="member">     <a href="https://www.php.net/manual/zh/ini.core.php#ini.realpath-cache-size" class="link">realpath_cache_size</a> 方法的配置选项    </li>   </ul>  </span> </div></div>
 * @return int Returns how much memory realpath cache is using.*/
function realpath_cache_size(): int {}

/**
*<div id="function.get-mangled-object-vars" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_mangled_object_vars</h1>  <p class="verinfo">(PHP 7 &gt;= 7.4.0, PHP 8)</p><p class="refpurpose"><span class="refname">get_mangled_object_vars</span> &mdash; <span class="dc-title">返回将对象属性混在一起的数组</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-mangled-object-vars-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_mangled_object_vars</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   返回 <span class="type" style="color:#EAB766">array</span>，其元素是 <span class="parameter" style="color:#3A95FF">object</span> 的属性。key 是成员变量名，但有几个显著的异常：private   变量的变量名前加上类名，protected 变量的变量名前面加上 <span>*</span> 号。这些前置值在两边都带有   <span>NUL</span> 字节。未初始化的<a href="https://www.php.net/manual/zh/language.oop5.properties.php#language.oop5.properties.typed-properties" class="link">类型属性</a>会默默丢弃。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-mangled-object-vars-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       对象实例。      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-mangled-object-vars-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回包含 <span class="parameter" style="color:#3A95FF">object</span> 的所有属性的 <span class="type" style="color:#EAB766">array</span>，无论其可见性如何。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-mangled-object-vars-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">get_mangled_object_vars()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class </span><span style="color: #9876AA">A<br /></span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">$public </span><span style="color: #007700">= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br /><br />    protected </span><span style="color: #9876AA">$protected </span><span style="color: #007700">= </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br /><br />    private </span><span style="color: #9876AA">$private </span><span style="color: #007700">= </span><span style="color: #9876AA">3</span><span style="color: #007700">;<br />}<br /><br />class </span><span style="color: #9876AA">B </span><span style="color: #007700">extends </span><span style="color: #9876AA">A<br /></span><span style="color: #007700">{<br />    private </span><span style="color: #9876AA">$private </span><span style="color: #007700">= </span><span style="color: #9876AA">4</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$object </span><span style="color: #007700">= new </span><span style="color: #9876AA">B</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$object</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">dynamic </span><span style="color: #007700">= </span><span style="color: #9876AA">5</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$object</span><span style="color: #007700">-&gt;{</span><span style="color: #DD0000">'6'</span><span style="color: #007700">} = </span><span style="color: #9876AA">6</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">get_mangled_object_vars</span><span style="color: #007700">(</span><span style="color: #9876AA">$object</span><span style="color: #007700">));<br /><br />class </span><span style="color: #9876AA">AO </span><span style="color: #007700">extends </span><span style="color: #9876AA">ArrayObject<br /></span><span style="color: #007700">{<br />    private </span><span style="color: #9876AA">$private </span><span style="color: #007700">= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$arrayObject </span><span style="color: #007700">= new </span><span style="color: #9876AA">AO</span><span style="color: #007700">([</span><span style="color: #DD0000">'x' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'y'</span><span style="color: #007700">]);<br /></span><span style="color: #9876AA">$arrayObject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">dynamic </span><span style="color: #007700">= </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">get_mangled_object_vars</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayObject</span><span style="color: #007700">));</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(6) {<br>  [&quot;Bprivate&quot;]=&gt;<br>  int(4)<br>  [&quot;public&quot;]=&gt;<br>  int(1)<br>  [&quot;*protected&quot;]=&gt;<br>  int(2)<br>  [&quot;Aprivate&quot;]=&gt;<br>  int(3)<br>  [&quot;dynamic&quot;]=&gt;<br>  int(5)<br>  [6]=&gt;<br>  int(6)<br>}<br>array(2) {<br>  [&quot;AOprivate&quot;]=&gt;<br>  int(1)<br>  [&quot;dynamic&quot;]=&gt;<br>  int(2)<br>}<br><br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-mangled-object-vars-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link get_class_vars()} - 获取类的默认属性</span></li>    <li class="member"><span class="function">{@link get_object_vars()} - 获取指定对象的属性</span></li>   </ul>  </span> </div> </div>
 * @return array returns the mangled object properties*/
function get_mangled_object_vars(object $object): array {}

/**
*<div id="function.get-debug-type" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_debug_type</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">get_debug_type</span> &mdash; <span class="dc-title">以适合调试的方式获取变量的类型名称</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-debug-type-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_debug_type</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   会返回 PHP 变量 <span class="parameter" style="color:#3A95FF">value</span> 的类型名称。   该函数会将对象解析为其类名，资源解析为其资源类型名称，标量值解析为其常用名称，就像在类型声明中使用的那样。  </p>  <p class="para">   该函数与 <span class="function">{@link gettype()}</span> 的区别在于：它返回的类型名称更符合实际用法，而不是那些出于历史原因而存在的名称。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-debug-type-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       要检查类型的变量。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-debug-type-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    返回的字符串可能有以下值：     <table class="doctable informaltable">             <thead>        <tr>         <th>类型 + 状态</th>         <th>返回值</th>         <th>备注</th>        </tr>       </thead>       <tbody class="tbody">        <tr>         <td>null</td>         <td>          <span>&quot;null&quot;</span>         </td>         <td>-</td>        </tr>        <tr>         <td>Booleans (true or false)</td>         <td>          <span>&quot;bool&quot;</span>         </td>         <td>-</td>        </tr>        <tr>         <td>Integers</td>         <td>          <span>&quot;int&quot;</span>         </td>         <td>-</td>        </tr>        <tr>         <td>Floats</td>         <td>          <span>&quot;float&quot;</span>         </td>         <td>-</td>        </tr>        <tr>         <td>Strings</td>         <td>          <span>&quot;string&quot;</span>         </td>         <td>-</td>        </tr>        <tr>         <td>Arrays</td>         <td>          <span>&quot;array&quot;</span>         </td>         <td>-</td>        </tr>        <tr>         <td>Resources</td>         <td>          <span>&quot;resource (resourcename)&quot;</span>         </td>         <td>-</td>        </tr>        <tr>         <td>Resources (Closed)</td>         <td>          <span>&quot;resource (closed)&quot;</span>         </td>         <td>例如：使用 fclose 关闭后的文件流</td>        </tr>        <tr>         <td>Objects from Named Classes</td>         <td>          类的全名，包括其命名空间，例如 <span>Foo\Bar</span>         </td>         <td>-</td>        </tr>        <tr>         <td>Objects from Anonymous Classes</td>         <td>          <span>&quot;class@anonymous&quot;</span>         </td>         <td>          匿名类是通过 $x = new class { ... } 语法创建的类         </td>        </tr>       </tbody>           </table>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-debug-type-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">get_debug_type()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">get_debug_type</span><span style="color: #007700">(</span><span style="color: #9876AA">null</span><span style="color: #007700">) . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">get_debug_type</span><span style="color: #007700">(</span><span style="color: #9876AA">true</span><span style="color: #007700">) . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">get_debug_type</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">) . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">get_debug_type</span><span style="color: #007700">(</span><span style="color: #9876AA">0.1</span><span style="color: #007700">) . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">get_debug_type</span><span style="color: #007700">(</span><span style="color: #DD0000">"foo"</span><span style="color: #007700">) . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">get_debug_type</span><span style="color: #007700">([]) . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$fp </span><span style="color: #007700">= </span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">, </span><span style="color: #DD0000">'rb'</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">get_debug_type</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">) . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">fclose</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">get_debug_type</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">) . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /><br />echo </span><span style="color: #9876AA">get_debug_type</span><span style="color: #007700">(new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">) . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">get_debug_type</span><span style="color: #007700">(new class {}) . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>null<br>bool<br>int<br>float<br>string<br>array<br>resource (stream)<br>resource (closed)<br>stdClass<br>class@anonymous<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-debug-type-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link gettype()} - 获取变量的类型</span></li>    <li class="member"><span class="function">{@link get_class()} - 返回对象的类名</span></li>   </ul>  </span> </div></div>
 * @return string Possibles values for the returned string are:*/
function get_debug_type(mixed $value): string {}

/**
*<div id="function.get-resource-id" class="refentry"> <div class="refnamediv">  <h1 class="refname">get_resource_id</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">get_resource_id</span> &mdash; <span class="dc-title">   返回给定资源的整数标识符  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.get-resource-id-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>get_resource_id</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$resource</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   此函数提供了一种类型安全的方式来生成资源的整数标识符。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.get-resource-id-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">resource</span></dt>     <dd>      <p class="para">       需要获取的资源句柄。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.get-resource-id-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   给定 <span class="parameter" style="color:#3A95FF">resource</span> 的 <span class="type" style="color:#EAB766">int</span> 标识符。   </p>  <p class="para">   此函数本质上是对 <span class="parameter" style="color:#3A95FF">resource</span> 的 <span class="type" style="color:#EAB766">int</span> 转换，使得更容易获取资源的标识符。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.get-resource-id-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">get_resource_id()</strong></span> 与 <span class="type" style="color:#EAB766">int</span> 转换的结果相同</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$handle </span><span style="color: #007700">= </span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">"php://stdout"</span><span style="color: #007700">, </span><span style="color: #DD0000">"w"</span><span style="color: #007700">);<br /><br />echo (int) </span><span style="color: #9876AA">$handle </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br />echo </span><span style="color: #9876AA">get_resource_id</span><span style="color: #007700">(</span><span style="color: #9876AA">$handle</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>698<br>698<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.get-resource-id-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link get_resource_type()} - 返回资源类型</span></li>   </ul>  </span> </div></div>
 * @return int*/
function get_resource_id($resource): int {}
