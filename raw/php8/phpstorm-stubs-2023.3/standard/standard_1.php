<?php

use JetBrains\PhpStorm\ArrayShape;
use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\ExpectedValues;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Pure;

/**
*<div id="function.strtoupper" class="refentry"> <div class="refnamediv">  <h1 class="refname">strtoupper</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">strtoupper</span> &mdash; <span class="dc-title">将字符串转化为大写</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strtoupper-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>strtoupper</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   将 <span class="parameter" style="color:#3A95FF">string</span> 中所有 ASCII 字母字符转换为大写并返回。  </p>  <p class="para">   <span>&quot;a&quot;</span>（0x61）到 <span>&quot;z&quot;</span>（0x7a）范围内的字节会通过将每个字节值减 32 转为相应的大写字母。  </p>  <p class="para">   这可用于转换用 UTF-8 编码的字符串中的 ASCII 字符，但会忽略多字节 UTF-8 字符。要转换多字节非   ASCII 字符，请使用 <span class="function">{@link mb_strtoupper()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strtoupper-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">      输入字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strtoupper-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回转换后的大写字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.strtoupper-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">      <tr>  <td>8.2.0</td>  <td>   大小写转换不在依赖于使用 <span class="function">{@link setlocale()}</span> 设置的区域。只会转换 ASCII 字符。  </td> </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strtoupper-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">strtoupper()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$str </span><span style="color: #007700">= </span><span style="color: #DD0000">"Mary Had A Little Lamb and She LOVED It So"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$str </span><span style="color: #007700">= </span><span style="color: #9876AA">strtoupper</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$str</span><span style="color: #007700">; </span><span style="color: #FF8000">// 打印 MARY HAD A LITTLE LAMB AND SHE LOVED IT SO<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>     </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.strtoupper-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strtoupper-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link strtolower()} - 将字符串转化为小写</span></li>    <li class="member"><span class="function">{@link ucfirst()} - 将字符串的首字母转换为大写</span></li>    <li class="member"><span class="function">{@link ucwords()} - 将字符串中每个单词的首字母转换为大写</span></li>    <li class="member"><span class="function">{@link mb_strtoupper()} - 使字符串大写</span></li>   </ul>  </span> </div></div>
 * @return string the uppercased string.*/
function strtoupper(string $string): string {}

/**
*<div id="function.strtolower" class="refentry"> <div class="refnamediv">  <h1 class="refname">strtolower</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">strtolower</span> &mdash; <span class="dc-title">将字符串转化为小写</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strtolower-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>strtolower</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">  将 <span class="parameter" style="color:#3A95FF">string</span> 中所有的 ASCII 字母字符转换为小写并返回。  </p>  <p class="para">   <span>&quot;A&quot;</span>（0x41）到 <span>&quot;Z&quot;</span>（0x5a）范围内的字节会通过将每个字节值加 32 转为相应的小写字母。  </p>  <p class="para">   这可用于转换用 UTF-8 编码的字符串中的 ASCII 字符，但会忽略多字节 UTF-8 字符。要转换多字节非   ASCII 字符，请使用 <span class="function">{@link mb_strtolower()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strtolower-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       输入字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strtolower-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回转换后的小写字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.strtolower-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">      <tr>  <td>8.2.0</td>  <td>   大小写转换不在依赖于使用 <span class="function">{@link setlocale()}</span> 设置的区域。只会转换 ASCII 字符。  </td> </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strtolower-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">strtolower()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$str </span><span style="color: #007700">= </span><span style="color: #DD0000">"Mary Had A Little Lamb and She LOVED It So"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$str </span><span style="color: #007700">= </span><span style="color: #9876AA">strtolower</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$str</span><span style="color: #007700">; </span><span style="color: #FF8000">// 打印 mary had a little lamb and she loved it so<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>     </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.strtolower-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strtolower-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link strtoupper()} - 将字符串转化为大写</span></li>    <li class="member"><span class="function">{@link ucfirst()} - 将字符串的首字母转换为大写</span></li>    <li class="member"><span class="function">{@link ucwords()} - 将字符串中每个单词的首字母转换为大写</span></li>    <li class="member"><span class="function">{@link mb_strtolower()} - 使字符串小写</span></li>   </ul>  </span> </div></div>
 * @return string the lowercased string.*/
function strtolower(string $string): string {}

/**
*<div id="function.strpos" class="refentry"> <div class="refnamediv">  <h1 class="refname">strpos</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">strpos</span> &mdash; <span class="dc-title">查找字符串首次出现的位置</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strpos-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>strpos</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$haystack</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$needle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   返回 <span class="parameter" style="color:#3A95FF">needle</span> 在 <span class="parameter" style="color:#3A95FF">haystack</span> 中首次出现的数字位置。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strpos-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">haystack</span></dt>     <dd>      <p class="para">       在该字符串中进行查找。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">needle</span></dt>     <dd>      <p class="para">       要搜索的字符串。      </p>       <p class="para">  Prior to PHP 8.0.0, if <span class="parameter" style="color:#3A95FF">needle</span> is not a string, it is converted  to an integer and applied as the ordinal value of a character.  This behavior is deprecated as of PHP 7.3.0, and relying on it is highly  discouraged. Depending on the intended behavior, the  <span class="parameter" style="color:#3A95FF">needle</span> should either be explicitly cast to string,  or an explicit call to <span class="function">{@link chr()}</span> should be performed. </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">           如果提供了此参数，搜索会从字符串该字符数的起始位置开始统计。       如果是负数，搜索会从字符串结尾指定字符数开始。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strpos-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 needle 存在于 <span class="parameter" style="color:#3A95FF">haystack</span> 字符串起始的位置(独立于 offset)。同时注意字符串位置是从0开始，而不是从1开始的。  </p>  <p class="para">   如果没找到 needle，将返回 <strong><span>false</span></strong>。  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数可能返回布尔值<strong><span>false</span></strong>，但也可能返回等同于 <strong><span>false</span></strong> 的非布尔值。请阅读 <a href="https://www.php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">===运算符</a>来测试此函数的返回值。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.strpos-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">needle</span> 现在接受空字符串。 </td></tr>     <tr>      <td>8.0.0</td>      <td>       不再支持 <span class="type" style="color:#EAB766">int</span> 传入 <span class="parameter" style="color:#3A95FF">needle</span>。      </td>     </tr>     <tr>      <td>7.3.0</td>      <td>       弃用 <span class="type" style="color:#EAB766">int</span> 传入 <span class="parameter" style="color:#3A95FF">needle</span>。      </td>     </tr>     <tr>      <td>7.1.0</td>      <td>       开始支持负数的 <span class="parameter" style="color:#3A95FF">offset</span>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strpos-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 使用 <span>===</span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$mystring </span><span style="color: #007700">= </span><span style="color: #DD0000">'abc'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$findme   </span><span style="color: #007700">= </span><span style="color: #DD0000">'a'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$pos </span><span style="color: #007700">= </span><span style="color: #9876AA">strpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$mystring</span><span style="color: #007700">, </span><span style="color: #9876AA">$findme</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 注意这里使用的是 ===。简单的 == 不能像我们期待的那样工作，<br />// 因为 'a' 是第 0 位置上的（第一个）字符。<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">$pos </span><span style="color: #007700">=== </span><span style="color: #9876AA">false</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"The string '</span><span style="color: #9876AA">$findme</span><span style="color: #DD0000">' was not found in the string '</span><span style="color: #9876AA">$mystring</span><span style="color: #DD0000">'"</span><span style="color: #007700">;<br />} else {<br />    echo </span><span style="color: #DD0000">"The string '</span><span style="color: #9876AA">$findme</span><span style="color: #DD0000">' was found in the string '</span><span style="color: #9876AA">$mystring</span><span style="color: #DD0000">'"</span><span style="color: #007700">;<br />    echo </span><span style="color: #DD0000">" and exists at position </span><span style="color: #9876AA">$pos</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #2 使用 !==</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$mystring </span><span style="color: #007700">= </span><span style="color: #DD0000">'abc'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$findme   </span><span style="color: #007700">= </span><span style="color: #DD0000">'a'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$pos </span><span style="color: #007700">= </span><span style="color: #9876AA">strpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$mystring</span><span style="color: #007700">, </span><span style="color: #9876AA">$findme</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 使用 !== 操作符。使用 != 不能像我们期待的那样工作，<br />// 因为 'a' 的位置是 0。语句 (0 != false) 的结果是 false。<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">$pos </span><span style="color: #007700">!== </span><span style="color: #9876AA">false</span><span style="color: #007700">) {<br />     echo </span><span style="color: #DD0000">"The string '</span><span style="color: #9876AA">$findme</span><span style="color: #DD0000">' was found in the string '</span><span style="color: #9876AA">$mystring</span><span style="color: #DD0000">'"</span><span style="color: #007700">;<br />         echo </span><span style="color: #DD0000">" and exists at position </span><span style="color: #9876AA">$pos</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br />} else {<br />     echo </span><span style="color: #DD0000">"The string '</span><span style="color: #9876AA">$findme</span><span style="color: #DD0000">' was not found in the string '</span><span style="color: #9876AA">$mystring</span><span style="color: #DD0000">'"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #3 使用位置偏移量</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 忽视位置偏移量之前的字符进行查找<br /></span><span style="color: #9876AA">$newstring </span><span style="color: #007700">= </span><span style="color: #DD0000">'abcdef abcdef'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$pos </span><span style="color: #007700">= </span><span style="color: #9876AA">strpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$newstring</span><span style="color: #007700">, </span><span style="color: #DD0000">'a'</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">); </span><span style="color: #FF8000">// $pos = 7, 不是 0<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.strpos-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strpos-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link stripos()} - 查找字符串首次出现的位置（不区分大小写）</span></li>    <li class="member"><span class="function">{@link str_contains()} - 确定字符串是否包含指定子串</span></li>    <li class="member"><span class="function">{@link str_ends_with()} - 检查字符串是否以指定子串结尾</span></li>    <li class="member"><span class="function">{@link str_starts_with()} - 检查字符串是否以指定子串开头</span></li>    <li class="member"><span class="function">{@link strrpos()} - 计算指定字符串在目标字符串中最后一次出现的位置</span></li>    <li class="member"><span class="function">{@link strripos()} - 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</span></li>    <li class="member"><span class="function">{@link strstr()} - 查找字符串的首次出现</span></li>    <li class="member"><span class="function">{@link strpbrk()} - 在字符串中查找一组字符的任何一个字符</span></li>    <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>    <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>   </ul>  </span> </div></div>
 * @return int<0,max>|false <p>*/
function strpos(string $haystack, string $needle, int $offset = 0): int|false {}

/**
*<div id="function.stripos" class="refentry"> <div class="refnamediv">  <h1 class="refname">stripos</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">stripos</span> &mdash; <span class="dc-title">查找字符串首次出现的位置（不区分大小写）</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stripos-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>stripos</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$haystack</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$needle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   返回在<span class="type" style="color:#EAB766"><span class="type 字符串" style="color:#EAB766">字符串</span></span> <span class="parameter" style="color:#3A95FF">haystack</span> 中 <span class="parameter" style="color:#3A95FF">needle</span> 首次出现的数字位置。  </p>  <p class="para">   与 <span class="function">{@link strpos()}</span> 不同，<span class="function"><strong style="color:#CC7832">stripos()</strong></span> 不区分大小写。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.stripos-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">haystack</span></dt>     <dd>      <p class="para">       在该字符串中查找。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">needle</span></dt>     <dd>      <p class="para">       要搜索的字符串。      </p>       <p class="para">  Prior to PHP 8.0.0, if <span class="parameter" style="color:#3A95FF">needle</span> is not a string, it is converted  to an integer and applied as the ordinal value of a character.  This behavior is deprecated as of PHP 7.3.0, and relying on it is highly  discouraged. Depending on the intended behavior, the  <span class="parameter" style="color:#3A95FF">needle</span> should either be explicitly cast to string,  or an explicit call to <span class="function">{@link chr()}</span> should be performed. </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">       可选的 <span class="parameter" style="color:#3A95FF">offset</span> 参数，从字符此数量的开始位置进行搜索。       如果是负数，就从字符末尾此数量的字符数开始统计。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.stripos-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 needle 存在于 <span class="parameter" style="color:#3A95FF">haystack</span> 字符串开始的位置(独立于偏移量)。同时注意字符串位置起始于 0，而不是 1。  </p>  <p class="para">   如果未发现 needle 将返回 <strong><span>false</span></strong>。  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数可能返回布尔值<strong><span>false</span></strong>，但也可能返回等同于 <strong><span>false</span></strong> 的非布尔值。请阅读 <a href="https://www.php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">===运算符</a>来测试此函数的返回值。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.stripos-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">      <tr>  <td>8.2.0</td>  <td>   大小写转换不在依赖于使用 <span class="function">{@link setlocale()}</span> 设置的区域。只会进行 ASCII   大小写转换。非 ASCII 字节值将通过它们的字节值进行比较。  </td> </tr>     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">needle</span> 现在接受空字符串。 </td></tr>      <tr>       <td>8.0.0</td>       <td>        不再支持 <span class="type" style="color:#EAB766">int</span> 传递给 <span class="parameter" style="color:#3A95FF">needle</span>。       </td>      </tr>      <tr>       <td>7.3.0</td>       <td>        弃用 <span class="type" style="color:#EAB766">int</span> 传递给 <span class="parameter" style="color:#3A95FF">needle</span>。       </td>      </tr>     <tr>      <td>7.1.0</td>      <td>       开始支持负数的 <span class="parameter" style="color:#3A95FF">offset</span>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.stripos-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">stripos()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$findme    </span><span style="color: #007700">= </span><span style="color: #DD0000">'a'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$mystring1 </span><span style="color: #007700">= </span><span style="color: #DD0000">'xyz'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$mystring2 </span><span style="color: #007700">= </span><span style="color: #DD0000">'ABC'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$pos1 </span><span style="color: #007700">= </span><span style="color: #9876AA">stripos</span><span style="color: #007700">(</span><span style="color: #9876AA">$mystring1</span><span style="color: #007700">, </span><span style="color: #9876AA">$findme</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$pos2 </span><span style="color: #007700">= </span><span style="color: #9876AA">stripos</span><span style="color: #007700">(</span><span style="color: #9876AA">$mystring2</span><span style="color: #007700">, </span><span style="color: #9876AA">$findme</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 'a' 当然不在 'xyz' 中<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">$pos1 </span><span style="color: #007700">=== </span><span style="color: #9876AA">false</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"The string '</span><span style="color: #9876AA">$findme</span><span style="color: #DD0000">' was not found in the string '</span><span style="color: #9876AA">$mystring1</span><span style="color: #DD0000">'"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// 注意这里使用的是 ===。简单的 == 不能像我们期望的那样工作，<br />// 因为 'a' 的位置是 0（第一个字符）。<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">$pos2 </span><span style="color: #007700">!== </span><span style="color: #9876AA">false</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"We found '</span><span style="color: #9876AA">$findme</span><span style="color: #DD0000">' in '</span><span style="color: #9876AA">$mystring2</span><span style="color: #DD0000">' at position </span><span style="color: #9876AA">$pos2</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.stripos-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.stripos-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link mb_stripos()} - 大小写不敏感地查找字符串在另一个字符串中首次出现的位置</span></li>    <li class="member"><span class="function">{@link str_contains()} - 确定字符串是否包含指定子串</span></li>    <li class="member"><span class="function">{@link str_ends_with()} - 检查字符串是否以指定子串结尾</span></li>    <li class="member"><span class="function">{@link str_starts_with()} - 检查字符串是否以指定子串开头</span></li>    <li class="member"><span class="function">{@link strpos()} - 查找字符串首次出现的位置</span></li>    <li class="member"><span class="function">{@link strrpos()} - 计算指定字符串在目标字符串中最后一次出现的位置</span></li>    <li class="member"><span class="function">{@link strripos()} - 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</span></li>    <li class="member"><span class="function">{@link stristr()} - strstr 函数的忽略大小写版本</span></li>    <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>    <li class="member"><span class="function">{@link str_ireplace()} - str_replace 的忽略大小写版本</span></li>   </ul>  </span> </div></div>
 * @return int|false If needle is not found,*/
function stripos(string $haystack, string $needle, int $offset = 0): int|false {}

/**
*<div id="function.strrpos" class="refentry"> <div class="refnamediv">  <h1 class="refname">strrpos</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">strrpos</span> &mdash; <span class="dc-title">计算指定字符串在目标字符串中最后一次出现的位置</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strrpos-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>strrpos</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$haystack</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$needle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   返回 <span class="parameter" style="color:#3A95FF">haystack</span> 字符串中 <span class="parameter" style="color:#3A95FF">needle</span> 最后一次出现的数字位置。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strrpos-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">haystack</span></dt>     <dd>      <p class="para">       在此字符串中进行查找。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">needle</span></dt>     <dd>      <p class="para">       要搜索的字符串。      </p>       <p class="para">  Prior to PHP 8.0.0, if <span class="parameter" style="color:#3A95FF">needle</span> is not a string, it is converted  to an integer and applied as the ordinal value of a character.  This behavior is deprecated as of PHP 7.3.0, and relying on it is highly  discouraged. Depending on the intended behavior, the  <span class="parameter" style="color:#3A95FF">needle</span> should either be explicitly cast to string,  or an explicit call to <span class="function">{@link chr()}</span> should be performed. </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">        如果为 0 或正数，则从左到右搜索，跳过 <span class="parameter" style="color:#3A95FF">haystack</span> 的开头       <span class="parameter" style="color:#3A95FF">offset</span> 个字节。      </p>      <p class="para">       如果为负数，搜索从右侧 <span class="parameter" style="color:#3A95FF">offset</span> 个字节开始，而不是从开头 <span class="parameter" style="color:#3A95FF">haystack</span>       个字节开始。搜索从右往左进行，从所选字节中搜索第一个出现的 <span class="parameter" style="color:#3A95FF">needle</span>。       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:         <p class="para">         这实际是在最后 <span class="parameter" style="color:#3A95FF">offset</span> 个字节之前寻找最后出现的         <span class="parameter" style="color:#3A95FF">needle</span> 的位置。        </p>       </p></blockquote>      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strrpos-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 needle 在 <span class="parameter" style="color:#3A95FF">haystack</span> 字符串中存在的位置（与搜索顺序或者 offset 无关）。   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <span class="simpara">     字符串位置从 0 开始，而不是 1。    </span>   </p></blockquote>  </p>  <p class="para">   如果未找到 needle，则返回 <strong><span>false</span></strong>。  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数可能返回布尔值<strong><span>false</span></strong>，但也可能返回等同于 <strong><span>false</span></strong> 的非布尔值。请阅读 <a href="https://www.php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">===运算符</a>来测试此函数的返回值。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.strrpos-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">needle</span> 现在接受空字符串。 </td></tr>     <tr>      <td>8.0.0</td>      <td>       不再支持将 <span class="type" style="color:#EAB766">int</span> 传递给 <span class="parameter" style="color:#3A95FF">needle</span>。      </td>     </tr>     <tr>      <td>7.3.0</td>      <td>       弃用将 <span class="type" style="color:#EAB766">int</span> 传递给 <span class="parameter" style="color:#3A95FF">needle</span>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strrpos-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 检查字串是否存在</strong></p>    <div class="example-contents"><p>     很容易将“在位置 0 处找到”和“未发现字符串”这两种情况搞错。这是检测区别的办法：    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$pos </span><span style="color: #007700">= </span><span style="color: #9876AA">strrpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$mystring</span><span style="color: #007700">, </span><span style="color: #DD0000">"b"</span><span style="color: #007700">);<br />if (</span><span style="color: #9876AA">$pos </span><span style="color: #007700">=== </span><span style="color: #9876AA">false</span><span style="color: #007700">) { </span><span style="color: #FF8000">// 注意: 三个等号<br />    // 未发现...<br /></span><span style="color: #007700">}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 使用偏移位置进行查找</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$foo </span><span style="color: #007700">= </span><span style="color: #DD0000">"0123456789a123456789b123456789c"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 从第 0 个字节（从头）寻找“0”<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">strrpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">, </span><span style="color: #DD0000">'0'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// 从第 1 个字节（字节“0”之后）寻找“0”<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">strrpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">, </span><span style="color: #DD0000">'0'</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// 从第 21 个字节（20 个字节之后）寻找“7”<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">strrpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">, </span><span style="color: #DD0000">'7'</span><span style="color: #007700">, </span><span style="color: #9876AA">20</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// 从第 29 个字节（28 个字节之后）寻找“7”<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">strrpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">, </span><span style="color: #DD0000">'7'</span><span style="color: #007700">, </span><span style="color: #9876AA">28</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// 从倒数第 5 个字节起从右向左寻找“7”<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">strrpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">, </span><span style="color: #DD0000">'7'</span><span style="color: #007700">, -</span><span style="color: #9876AA">5</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// 从倒数第 2 个字节起从右向左寻找“c”<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">strrpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">, </span><span style="color: #DD0000">'c'</span><span style="color: #007700">, -</span><span style="color: #9876AA">2</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// 从倒数第 2 个字节起从右向左寻找“9c”<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">strrpos</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">, </span><span style="color: #DD0000">'9c'</span><span style="color: #007700">, -</span><span style="color: #9876AA">2</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(0)<br>bool(false)<br>int(27)<br>bool(false)<br>int(17)<br>bool(false)<br>int(29)<br></span></div>   </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strrpos-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link strpos()} - 查找字符串首次出现的位置</span></li>    <li class="member"><span class="function">{@link stripos()} - 查找字符串首次出现的位置（不区分大小写）</span></li>    <li class="member"><span class="function">{@link strripos()} - 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</span></li>    <li class="member"><span class="function">{@link strrchr()} - 查找指定字符在字符串中的最后一次出现</span></li>    <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>   </ul>  </span> </div></div>
 * @return int|false <p>*/
function strrpos(string $haystack, string $needle, int $offset = 0): int|false {}

/**
*<div id="function.strripos" class="refentry"> <div class="refnamediv">  <h1 class="refname">strripos</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">strripos</span> &mdash; <span class="dc-title">计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strripos-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>strripos</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$haystack</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$needle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   以不区分大小写的方式查找指定字符串在目标字符串中最后一次出现的位置。与 <span class="function">{@link strrpos()}</span> 不同，<span class="function"><strong style="color:#CC7832">strripos()</strong></span> 不区分大小写。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strripos-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">haystack</span></dt>     <dd>      <p class="para">       在此字符串中进行查找。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">needle</span></dt>     <dd>      <p class="para">       要搜索的字符串。      </p>       <p class="para">  Prior to PHP 8.0.0, if <span class="parameter" style="color:#3A95FF">needle</span> is not a string, it is converted  to an integer and applied as the ordinal value of a character.  This behavior is deprecated as of PHP 7.3.0, and relying on it is highly  discouraged. Depending on the intended behavior, the  <span class="parameter" style="color:#3A95FF">needle</span> should either be explicitly cast to string,  or an explicit call to <span class="function">{@link chr()}</span> should be performed. </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">        如果为 0 或正数，则从左到右搜索，跳过 <span class="parameter" style="color:#3A95FF">haystack</span> 的开头       <span class="parameter" style="color:#3A95FF">offset</span> 个字节。      </p>      <p class="para">       如果为负数，则从右向左执行搜索，跳过 <span class="parameter" style="color:#3A95FF">haystack</span> 的最后       <span class="parameter" style="color:#3A95FF">offset</span> 个字节并搜索首次出现的 <span class="parameter" style="color:#3A95FF">needle</span>。       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:         <p class="para">         这实际是在最后 <span class="parameter" style="color:#3A95FF">offset</span> 个字节之前寻找最后出现的         <span class="parameter" style="color:#3A95FF">needle</span>。        </p>       </p></blockquote>      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strripos-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 needle 相对于 <span class="parameter" style="color:#3A95FF">haystack</span> 字符串的位置(和搜索的方向和偏移量无关)。   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <span class="simpara">     字符串位置从 0 开始，而不是 1。    </span>   </p></blockquote>  </p>  <p class="para">   如果未找到 needle，则返回 <strong><span>false</span></strong>。  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数可能返回布尔值<strong><span>false</span></strong>，但也可能返回等同于 <strong><span>false</span></strong> 的非布尔值。请阅读 <a href="https://www.php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">===运算符</a>来测试此函数的返回值。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.strripos-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">needle</span> 现在接受空字符串。 </td></tr>      <tr>  <td>8.2.0</td>  <td>   大小写转换不在依赖于使用 <span class="function">{@link setlocale()}</span> 设置的区域。只会进行 ASCII   大小写转换。非 ASCII 字节值将通过它们的字节值进行比较。  </td> </tr>     <tr>      <td>8.0.0</td>      <td>       不再支持将 <span class="type" style="color:#EAB766">int</span> 传递给 <span class="parameter" style="color:#3A95FF">needle</span>。      </td>     </tr>     <tr>      <td>7.3.0</td>      <td>       弃用将 <span class="type" style="color:#EAB766">int</span> 传递给 <span class="parameter" style="color:#3A95FF">needle</span>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strripos-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">strripos()</strong></span> 简单示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$haystack </span><span style="color: #007700">= </span><span style="color: #DD0000">'ababcd'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$needle   </span><span style="color: #007700">= </span><span style="color: #DD0000">'aB'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$pos      </span><span style="color: #007700">= </span><span style="color: #9876AA">strripos</span><span style="color: #007700">(</span><span style="color: #9876AA">$haystack</span><span style="color: #007700">, </span><span style="color: #9876AA">$needle</span><span style="color: #007700">);<br /><br />if (</span><span style="color: #9876AA">$pos </span><span style="color: #007700">=== </span><span style="color: #9876AA">false</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"Sorry, we did not find (</span><span style="color: #9876AA">$needle</span><span style="color: #DD0000">) in (</span><span style="color: #9876AA">$haystack</span><span style="color: #DD0000">)"</span><span style="color: #007700">;<br />} else {<br />    echo </span><span style="color: #DD0000">"Congratulations!\n"</span><span style="color: #007700">;<br />    echo </span><span style="color: #DD0000">"We found the last (</span><span style="color: #9876AA">$needle</span><span style="color: #DD0000">) in (</span><span style="color: #9876AA">$haystack</span><span style="color: #DD0000">) at position (</span><span style="color: #9876AA">$pos</span><span style="color: #DD0000">)"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>   Congratulations!<br>   We found the last (aB) in (ababcd) at position (2)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strripos-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link strpos()} - 查找字符串首次出现的位置</span></li>    <li class="member"><span class="function">{@link stripos()} - 查找字符串首次出现的位置（不区分大小写）</span></li>    <li class="member"><span class="function">{@link strrchr()} - 查找指定字符在字符串中的最后一次出现</span></li>    <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>    <li class="member"><span class="function">{@link stristr()} - strstr 函数的忽略大小写版本</span></li>    <li class="member"><span class="function">{@link strstr()} - 查找字符串的首次出现</span></li>   </ul>  </span> </div></div>
 * @return int|false the numerical position of the last occurrence of*/
function strripos(string $haystack, string $needle, int $offset = 0): int|false {}

/**
*<div id="function.strrev" class="refentry"> <div class="refnamediv">  <h1 class="refname">strrev</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">strrev</span> &mdash; <span class="dc-title">反转字符串</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strrev-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>strrev</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   返回 <span class="parameter" style="color:#3A95FF">string</span> 反转后的字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strrev-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       待反转的原始字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strrev-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回反转后的字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strrev-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 使用 <span class="function"><strong style="color:#CC7832">strrev()</strong></span> 反转字符串</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">strrev</span><span style="color: #007700">(</span><span style="color: #DD0000">"Hello world!"</span><span style="color: #007700">); </span><span style="color: #FF8000">// 输出 "!dlrow olleH"<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>    </div></div>
 * @return string the reversed string.*/
function strrev(string $string): string {}

/**
*<div id="function.hebrev" class="refentry"> <div class="refnamediv">  <h1 class="refname">hebrev</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">hebrev</span> &mdash; <span class="dc-title">将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew）</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.hebrev-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>hebrev</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$max_chars_per_line</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew）  </p>  <p class="para">   函数将会尝试避免破坏单词。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.hebrev-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       逻辑顺序希伯来文字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">max_chars_per_line</span></dt>     <dd>      <p class="para">       可选参数，表示每行可返回的最多字符数。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.hebrev-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回视觉顺序字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.hebrev-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link hebrevc()} - 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew），并且转换换行符</span></li>   </ul>  </span> </div></div>
 * @return string the visual string.*/
function hebrev(string $string, int $max_chars_per_line = 0): string {}

/**
*<div id="function.hebrevc" class="refentry"> <div class="refnamediv">  <h1 class="refname">hebrevc</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">hebrevc</span> &mdash; <span class="dc-title">将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew），并且转换换行符</span></p> </div> <div id="function.hebrevc-refsynopsisdiv">   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数已自 PHP 7.4.0起<em>弃用</em>，自 PHP 8.0.0 起<em>移除</em>。强烈建议不要依赖本函数。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.hebrevc-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>hebrevc</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$hebrew_text</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$max_chars_per_line</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   本函数与<span class="function">{@link hebrev()}</span> 一样，唯一的区别是   本函数会额外将换行符(\n)转换为&quot;&lt;br&gt;\n&quot;。  </p>  <p class="para">   函数将会尝试避免破坏单词。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.hebrevc-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">hebrew_text</span></dt>     <dd>      <p class="para">       逻辑顺序希伯来文字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">max_chars_per_line</span></dt>     <dd>      <p class="para">       可选参数，表示每行可返回的最多字符数。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.hebrevc-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回视觉顺序字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.hebrevc-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link hebrev()} - 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew）</span></li>   </ul>  </span> </div></div>
 * @return string the visual string.*/
function hebrevc(string $hebrew_text, $max_chars_per_line): string {}

/**
*<div id="function.nl2br" class="refentry"> <div class="refnamediv">  <h1 class="refname">nl2br</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">nl2br</span> &mdash; <span class="dc-title">在字符串所有新行之前插入 HTML 换行标记</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.nl2br-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>nl2br</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$use_xhtml</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   在字符串 <span class="parameter" style="color:#3A95FF">string</span> 所有新行之前插入 <span>&#039;&lt;br /&gt;&#039;</span> 或 <span>&#039;&lt;br&gt;&#039;</span>，并返回。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.nl2br-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       输入字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">use_xhtml</span></dt>     <dd>      <p class="para">       是否使用 XHTML 兼容换行符。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.nl2br-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回调整后的字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.nl2br-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">nl2br()</strong></span> 使用示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">nl2br</span><span style="color: #007700">(</span><span style="color: #DD0000">"foo isn't\n bar"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>foo isn&#039;t&lt;br /&gt;<br> bar<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #2 使用 <span class="parameter" style="color:#3A95FF">use_xhtml</span> 生成合法的 HTML 标记</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">nl2br</span><span style="color: #007700">(</span><span style="color: #DD0000">"Welcome\r\nThis is my HTML document"</span><span style="color: #007700">, </span><span style="color: #9876AA">false</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Welcome&lt;br&gt;<br>This is my HTML document<br></span></div>    </div>   </div>      <div class="example" id="">    <p><strong>示例 #3 各种换行分隔符</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$string </span><span style="color: #007700">= </span><span style="color: #DD0000">"This\r\nis\n\ra\nstring\r"</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">nl2br</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>This&lt;br /&gt;<br>is&lt;br /&gt;<br>a&lt;br /&gt;<br>string&lt;br /&gt;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.nl2br-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link htmlspecialchars()} - 将特殊字符转换为 HTML 实体</span></li>    <li class="member"><span class="function">{@link htmlentities()} - 将字符转换为 HTML 转义字符</span></li>    <li class="member"><span class="function">{@link wordwrap()} - 打断字符串为指定数量的字串</span></li>    <li class="member"><span class="function">{@link str_replace()} - 子字符串替换</span></li>   </ul>  </span> </div></div>
 * @return string the altered string.*/
function nl2br(string $string, bool $use_xhtml = true): string {}

/**
*<div id="function.basename" class="refentry"> <div class="refnamediv">  <h1 class="refname">basename</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">basename</span> &mdash; <span class="dc-title">返回路径中的文件名部分</span></p> </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.basename-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>basename</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$path</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$suffix</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   给出一个包含有指向一个文件的全路径的字符串，本函数返回基本的文件名。  </p>     <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="function"><strong style="color:#CC7832">basename()</strong></span> 纯粹基于输入字符串操作，    它不会受实际文件系统和类似 &quot;<span>..</span>&quot; 的路径格式影响。   </p>  </p></blockquote>  <div class="caution"><strong class="caution">警告</strong>   <p class="para">    <span class="function"><strong style="color:#CC7832">basename()</strong></span> 是本地化的，所以如果要正确处理多字节字符的路径，需要用    <span class="function">{@link setlocale()}</span> 正确设置匹配的 locale。如果 <span class="parameter" style="color:#3A95FF">path</span>    包含当前区域设置无效的字符，<span class="function"><strong style="color:#CC7832">basename()</strong></span> 的行为未定义。   </p>  </div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.basename-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">path</span></dt>     <dd>      <p class="para">       一个路径。      </p>      <p class="para">       在 Windows  中，斜线（<span>/</span>）和反斜线（<span>\</span>）都可以用作目录分隔符。在其它环境下是斜线（<span>/</span>）。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">suffix</span></dt>     <dd>      <p class="para">       如果文件名是以  <span class="parameter" style="color:#3A95FF">suffix</span> 结束的，那这一部分也会被去掉。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.basename-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回指定 <span class="parameter" style="color:#3A95FF">path</span> 的基本名称。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.basename-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">basename()</strong></span> 例子</strong></p>        <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #DD0000">"1) "</span><span style="color: #007700">.</span><span style="color: #9876AA">basename</span><span style="color: #007700">(</span><span style="color: #DD0000">"/etc/sudoers.d"</span><span style="color: #007700">, </span><span style="color: #DD0000">".d"</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"2) "</span><span style="color: #007700">.</span><span style="color: #9876AA">basename</span><span style="color: #007700">(</span><span style="color: #DD0000">"/etc/sudoers.d"</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"3) "</span><span style="color: #007700">.</span><span style="color: #9876AA">basename</span><span style="color: #007700">(</span><span style="color: #DD0000">"/etc/passwd"</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"4) "</span><span style="color: #007700">.</span><span style="color: #9876AA">basename</span><span style="color: #007700">(</span><span style="color: #DD0000">"/etc/"</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"5) "</span><span style="color: #007700">.</span><span style="color: #9876AA">basename</span><span style="color: #007700">(</span><span style="color: #DD0000">"."</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"6) "</span><span style="color: #007700">.</span><span style="color: #9876AA">basename</span><span style="color: #007700">(</span><span style="color: #DD0000">"/"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>1) sudoers<br>2) sudoers.d<br>3) passwd<br>4) etc<br>5) .<br>6) <br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.basename-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link dirname()} - 返回路径中的目录部分</span></li>    <li class="member"><span class="function">{@link pathinfo()} - 返回文件路径的信息</span></li>   </ul>  </span> </div></div>
 * @return string the base name of the given path.*/
function basename(string $path, string $suffix = ''): string {}

/**
*<div id="function.dirname" class="refentry"> <div class="refnamediv">  <h1 class="refname">dirname</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">dirname</span> &mdash; <span class="dc-title">返回路径中的目录部分</span></p> </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.dirname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>dirname</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$path</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$levels</span><span class="initializer"> = 1</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   给出一个包含有指向一个文件的全路径的字符串，本函数返回去掉文件名后的目录名，且目录深度为 <span class="parameter" style="color:#3A95FF">levels</span> 级。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="function"><strong style="color:#CC7832">dirname()</strong></span> 纯粹基于输入字符串操作，    它不会受实际文件系统和类似 &quot;<span>..</span>&quot; 的路径格式影响。   </p>  </p></blockquote>  <div class="caution"><strong class="caution">警告</strong>   <p class="para">    在 Windows 上，<span class="function"><strong style="color:#CC7832">dirname()</strong></span>    假设当前设置的代码页，因此要查看具有多字节字符路径的正确目录名称，必须设置匹配的代码页。如果    <span class="parameter" style="color:#3A95FF">path</span> 包含当前代码页无效的字符，则 <span class="function"><strong style="color:#CC7832">dirname()</strong></span>    的行为是未定义的。   </p>   <p class="para">    在其它系统上，<span class="function"><strong style="color:#CC7832">dirname()</strong></span> 假设 <span class="parameter" style="color:#3A95FF">path</span>    是以 ASCII 兼容编码进行编码的。否则函数的行为是未定义的。   </p>  </div> </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.dirname-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">path</span></dt>     <dd>      <p class="para">       一个路径。      </p>      <p class="para">       在 Windows 中，斜线（<span>/</span>）和反斜线（<span>\</span>）都可以用作目录分隔符。在其它环境下是斜线（<span>/</span>）。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">levels</span></dt>     <dd>      <p class="para">       要向上的父目录数量。      </p>      <p class="para">       整型，必须大于 0。      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.dirname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 path 的父目录。如果在 <span class="parameter" style="color:#3A95FF">path</span>   中没有斜线，则返回一个点（&#039;<span>.</span>&#039;），表示当前目录。否则返回的是把   <span class="parameter" style="color:#3A95FF">path</span> 中结尾的   <span>/component</span>（最后一个斜线以及后面部分）去掉之后的字符串。  </p>  <div class="caution"><strong class="caution">警告</strong>   <p class="para">    Be careful when using this function in a loop that can reach the    top-level directory as this can result in an infinite loop.    <div class="informalexample">     <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />dirname</span><span style="color: #007700">(</span><span style="color: #DD0000">'.'</span><span style="color: #007700">);    </span><span style="color: #FF8000">// Will return '.'.<br /></span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #DD0000">'/'</span><span style="color: #007700">);    </span><span style="color: #FF8000">// Will return `\` on Windows and '/' on *nix systems.<br /></span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #DD0000">'\\'</span><span style="color: #007700">);   </span><span style="color: #FF8000">// Will return `\` on Windows and '.' on *nix systems.<br /></span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #DD0000">'C:\\'</span><span style="color: #007700">); </span><span style="color: #FF8000">// Will return 'C:\' on Windows and '.' on *nix systems.<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>     </div>    </div>   </p>  </div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.dirname-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.0.0</td>       <td>        添加可选的 <span class="parameter" style="color:#3A95FF">levels</span> 参数。       </td>      </tr>     </tbody>       </table>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.dirname-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">dirname()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #DD0000">"/etc/passwd"</span><span style="color: #007700">) . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #DD0000">"/etc/"</span><span style="color: #007700">) . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #DD0000">"."</span><span style="color: #007700">) . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #DD0000">"C:\\"</span><span style="color: #007700">) . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #DD0000">"/usr/local/lib"</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">);</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>/etc<br>/ (or \ on Windows)<br>.<br>C:\<br>/usr<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.dirname-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link basename()} - 返回路径中的文件名部分</span></li>    <li class="member"><span class="function">{@link pathinfo()} - 返回文件路径的信息</span></li>    <li class="member"><span class="function">{@link realpath()} - 返回规范化的绝对路径名</span></li>   </ul>  </span> </div> </div>
 * @return string the name of the directory. If there are no slashes in*/
function dirname(string $path, #[PhpStormStubsElementAvailable(from: '7.0')] int $levels = 1): string {}

/**
*<div id="function.pathinfo" class="refentry"> <div class="refnamediv">  <h1 class="refname">pathinfo</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.3, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">pathinfo</span> &mdash; <span class="dc-title">返回文件路径的信息</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.pathinfo-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>pathinfo</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$path</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>PATHINFO_ALL</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">string</span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">pathinfo()</strong></span> 返回一个关联数组包含有 <span class="parameter" style="color:#3A95FF">path</span>   的信息。返回关联数组还是字符串取决于 <span class="parameter" style="color:#3A95FF">flags</span>。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    有关取得当前路径信息的说明，请阅读 <a href="https://www.php.net/manual/zh/language.variables.predefined.php" class="link">预定义变量</a> 一节。   </p>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="function"><strong style="color:#CC7832">pathinfo()</strong></span> 纯粹基于输入字符串操作，    它不会受实际文件系统和类似 &quot;<span>..</span>&quot; 的路径格式影响。   </p>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    反斜线字符 <span>\</span> 仅在 Windows 系统上会解释为目录分隔符。在其他系统上，它将视为普通字符。   </p>  </p></blockquote>  <div class="caution"><strong class="caution">警告</strong>   <p class="para">    <span class="function"><strong style="color:#CC7832">pathinfo()</strong></span> 是本地化的，所以为了让它能正确地解析一个包含多字节编码的路径，    必须使用 <span class="function">{@link setlocale()}</span> 函数来设置地区信息。   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.pathinfo-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">path</span></dt>     <dd>      <p class="para">       要解析的路径。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       如果指定了，将会返回指定元素；它们包括：       <strong><span>PATHINFO_DIRNAME</span></strong>、       <strong><span>PATHINFO_BASENAME</span></strong>、       <strong><span>PATHINFO_EXTENSION</span></strong>、       <strong><span>PATHINFO_FILENAME</span></strong>。      </p>      <p class="para">如果没有指定 <span class="parameter" style="color:#3A95FF">flags</span> 默认是返回全部的单元。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.pathinfo-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果没有传入 <span class="parameter" style="color:#3A95FF">options</span> ，将会返回包括以下单元的数组 <span class="type" style="color:#EAB766">array</span>：<span>dirname</span>，<span>basename</span>   和 <span>extension</span>（如果有），以及<span>filename</span>。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    如果 <span class="parameter" style="color:#3A95FF">path</span> 有一个以上的扩展名，    <strong><span>PATHINFO_EXTENSION</span></strong> 只返回最后一个，而    <strong><span>PATHINFO_FILENAME</span></strong> 仅剥离最后一个。    （参考第一个示例）。   </p>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    如果 <span class="parameter" style="color:#3A95FF">path</span> 没有扩展名，返回数据中就不会有    <span>extension</span> 元素。（参考第二个示例）   </p>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    如果 <span class="parameter" style="color:#3A95FF">path</span> 中的 <span>basename</span> 以点开始，    那后面的字符串将被解释为 <span>extension</span> ，    并且 <span>filename</span> 为空。（参考第三个示例）   </p>  </p></blockquote>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">flags</span> 存在的，   则返回一个包含请求元素的 <span class="type" style="color:#EAB766">string</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.pathinfo-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">pathinfo()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$path_parts </span><span style="color: #007700">= </span><span style="color: #9876AA">pathinfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/www/htdocs/inc/lib.inc.php'</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #9876AA">$path_parts</span><span style="color: #007700">[</span><span style="color: #DD0000">'dirname'</span><span style="color: #007700">], </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">$path_parts</span><span style="color: #007700">[</span><span style="color: #DD0000">'basename'</span><span style="color: #007700">], </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">$path_parts</span><span style="color: #007700">[</span><span style="color: #DD0000">'extension'</span><span style="color: #007700">], </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">$path_parts</span><span style="color: #007700">[</span><span style="color: #DD0000">'filename'</span><span style="color: #007700">], </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>/www/htdocs/inc<br>lib.inc.php<br>php<br>lib.inc<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">pathinfo()</strong></span> 对比空扩展名和无扩展名之间区别的示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$path_parts </span><span style="color: #007700">= </span><span style="color: #9876AA">pathinfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/emptyextension.'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$path_parts</span><span style="color: #007700">[</span><span style="color: #DD0000">'extension'</span><span style="color: #007700">]);<br /><br /></span><span style="color: #9876AA">$path_parts </span><span style="color: #007700">= </span><span style="color: #9876AA">pathinfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/noextension'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$path_parts</span><span style="color: #007700">[</span><span style="color: #DD0000">'extension'</span><span style="color: #007700">]);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(0) &quot;&quot;<br><br>Notice: Undefined index: extension in test.php on line 6<br>NULL<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3 <span class="function"><strong style="color:#CC7832">pathinfo()</strong></span> 形如 .file 的示例</strong></p>    <div class="example-contents">     <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">pathinfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/some/path/.test'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">     <div class="cdata"><span>Array<br>(<br>    [dirname] =&gt; /some/path<br>    [basename] =&gt; .test<br>    [extension] =&gt; test<br>    [filename] =&gt;<br>)<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #4 <span class="function"><strong style="color:#CC7832">pathinfo()</strong></span> 示例和解除数组引用</strong></p>    <div class="example-contents"><p>     <span class="parameter" style="color:#3A95FF">flags</span> 参数不是位掩码。只能提供单个值。要是只选择某些格式化值，请使用数组解构，如下所示：    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">[</span><span style="color: #DD0000">'basename' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$basename</span><span style="color: #007700">, </span><span style="color: #DD0000">'dirname' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$dirname</span><span style="color: #007700">] = </span><span style="color: #9876AA">pathinfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/www/htdocs/inc/lib.inc.php'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$basename</span><span style="color: #007700">, </span><span style="color: #9876AA">$dirname</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(11) &quot;lib.inc.php&quot;<br>string(15) &quot;/www/htdocs/inc&quot;<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.pathinfo-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link dirname()} - 返回路径中的目录部分</span></li>    <li class="member"><span class="function">{@link basename()} - 返回路径中的文件名部分</span></li>    <li class="member"><span class="function">{@link parse_url()} - 解析 URL，返回其组成部分</span></li>    <li class="member"><span class="function">{@link realpath()} - 返回规范化的绝对路径名</span></li>   </ul>  </span> </div></div>
 * @return string|array{dirname: string, basename: string, extension: string, filename: string} The following associative array elements are returned:*/
function pathinfo(string $path, #[ExpectedValues(flags: [
    PATHINFO_DIRNAME,
    PATHINFO_BASENAME,
    PATHINFO_EXTENSION,
    PATHINFO_FILENAME
])] int $flags = PATHINFO_ALL): array|string {}

/**
*<div id="function.stripslashes" class="refentry"> <div class="refnamediv">  <h1 class="refname">stripslashes</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">stripslashes</span> &mdash; <span class="dc-title">反引用一个引用字符串</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stripslashes-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>stripslashes</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   反引用一个引用字符串。  </p>  <p class="para">   如果不需要将数据插入到一个需要转义的位置（例如数据库）则可以使用 <span class="function"><strong style="color:#CC7832">stripslashes()</strong></span>。例如，直接从 HTML 表单输出数据。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.stripslashes-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       输入字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.stripslashes-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个去除转义反斜线后的字符串（<span>\&#039;</span> 转换为 <span>&#039;</span> 等等）。双反斜线（<span>\\</span>）被转换为单个反斜线（<span>\</span>）。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.stripslashes-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">stripslashes()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$str </span><span style="color: #007700">= </span><span style="color: #DD0000">"Is your name O\'reilly?"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 输出: Is your name O'reilly?<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">stripslashes</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="function"><strong style="color:#CC7832">stripslashes()</strong></span> 是非递归的。如果你想要在多维数组中使用该函数，你需要使用递归函数。   </p>  </p></blockquote>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 对数组使用 <span class="function"><strong style="color:#CC7832">stripslashes()</strong></span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">stripslashes_deep</span><span style="color: #007700">(</span><span style="color: #9876AA">$value</span><span style="color: #007700">)<br />{<br />    </span><span style="color: #9876AA">$value </span><span style="color: #007700">= </span><span style="color: #9876AA">is_array</span><span style="color: #007700">(</span><span style="color: #9876AA">$value</span><span style="color: #007700">) ?<br />                </span><span style="color: #9876AA">array_map</span><span style="color: #007700">(</span><span style="color: #DD0000">'stripslashes_deep'</span><span style="color: #007700">, </span><span style="color: #9876AA">$value</span><span style="color: #007700">) :<br />                </span><span style="color: #9876AA">stripslashes</span><span style="color: #007700">(</span><span style="color: #9876AA">$value</span><span style="color: #007700">);<br /><br />    return </span><span style="color: #9876AA">$value</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// 示例<br /></span><span style="color: #9876AA">$array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"f\\'oo"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b\\'ar"</span><span style="color: #007700">, array(</span><span style="color: #DD0000">"fo\\'o"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b\\'ar"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$array </span><span style="color: #007700">= </span><span style="color: #9876AA">stripslashes_deep</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 输出<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; f&#039;oo<br>    [1] =&gt; b&#039;ar<br>    [2] =&gt; Array<br>        (<br>            [0] =&gt; fo&#039;o<br>            [1] =&gt; b&#039;ar<br>        )<br><br>)<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.stripslashes-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link addslashes()} - 使用反斜线引用字符串</span></li>    <li class="member"><span class="function">{@link get_magic_quotes_gpc()} - 获取当前 magic_quotes_gpc 的配置选项设置</span></li>   </ul>  </span> </div></div>
 * @return string a string with backslashes stripped off.*/
function stripslashes(string $string): string {}

/**
*<div id="function.stripcslashes" class="refentry"> <div class="refnamediv">  <h1 class="refname">stripcslashes</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">stripcslashes</span> &mdash; <span class="dc-title">反引用一个使用 <span class="function">{@link addcslashes()}</span> 转义的字符串</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stripcslashes-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>stripcslashes</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   返回反转义后的字符串。可识别类似 C 语言的 <span>\n</span>，<span>\r</span>，... 八进制以及十六进制的描述。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.stripcslashes-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       需要反转义的字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.stripcslashes-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回反转义后的字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.stripcslashes-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">stripcslashes()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">stripcslashes</span><span style="color: #007700">(</span><span style="color: #DD0000">'I\'d have a coffee.\nNot a problem.'</span><span style="color: #007700">) === </span><span style="color: #DD0000">"I'd have a coffee.<br />Not a problem."</span><span style="color: #007700">); </span><span style="color: #FF8000">// true<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.stripcslashes-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link addcslashes()} - 以 C 语言风格使用反斜线转义字符串中的字符</span></li>   </ul>  </span> </div></div>
 * @return string the unescaped string.*/
function stripcslashes(string $string): string {}

/**
*<div id="function.strstr" class="refentry"> <div class="refnamediv">  <h1 class="refname">strstr</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">strstr</span> &mdash; <span class="dc-title">查找字符串的首次出现</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strstr-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>strstr</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$haystack</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$needle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$before_needle</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   返回 <span class="parameter" style="color:#3A95FF">haystack</span> 字符串从 <span class="parameter" style="color:#3A95FF">needle</span> 第一次出现的位置开始到 <span class="parameter" style="color:#3A95FF">haystack</span> 结尾的字符串。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    该函数区分大小写。如果想要不区分大小写，请使用 <span class="function">{@link stristr()}</span>。   </p>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    如果你仅仅想确定 <span class="parameter" style="color:#3A95FF">needle</span> 是否存在于 <span class="parameter" style="color:#3A95FF">haystack</span> 中，请使用速度更快、耗费内存更少的 <span class="function">{@link strpos()}</span> 函数。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strstr-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">haystack</span></dt>     <dd>      <p class="para">       输入字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">needle</span></dt>     <dd>      <p class="para">       要搜索的字符串。      </p>       <p class="para">  Prior to PHP 8.0.0, if <span class="parameter" style="color:#3A95FF">needle</span> is not a string, it is converted  to an integer and applied as the ordinal value of a character.  This behavior is deprecated as of PHP 7.3.0, and relying on it is highly  discouraged. Depending on the intended behavior, the  <span class="parameter" style="color:#3A95FF">needle</span> should either be explicitly cast to string,  or an explicit call to <span class="function">{@link chr()}</span> should be performed. </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">before_needle</span></dt>     <dd>      <p class="para">       若为 <strong><span>true</span></strong>，<span class="function"><strong style="color:#CC7832">strstr()</strong></span> 将返回 <span class="parameter" style="color:#3A95FF">needle</span> 在 <span class="parameter" style="color:#3A95FF">haystack</span> 中的位置之前的部分。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strstr-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回字符串的一部分或者 <strong><span>false</span></strong>（如果未发现 <span class="parameter" style="color:#3A95FF">needle</span>）。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.strstr-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">needle</span> 现在接受空字符串。 </td></tr>      <tr>       <td>8.0.0</td>       <td>        不再支持传递 <span class="type" style="color:#EAB766">int</span> 作为 <span class="parameter" style="color:#3A95FF">needle</span>。       </td>      </tr>      <tr>       <td>7.3.0</td>       <td>        弃用传递 <span class="type" style="color:#EAB766">int</span> 作为 <span class="parameter" style="color:#3A95FF">needle</span>。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strstr-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">strstr()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$email  </span><span style="color: #007700">= </span><span style="color: #DD0000">'name@example.com'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$domain </span><span style="color: #007700">= </span><span style="color: #9876AA">strstr</span><span style="color: #007700">(</span><span style="color: #9876AA">$email</span><span style="color: #007700">, </span><span style="color: #DD0000">'@'</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$domain</span><span style="color: #007700">; </span><span style="color: #FF8000">// 打印 @example.com<br /><br /></span><span style="color: #9876AA">$user </span><span style="color: #007700">= </span><span style="color: #9876AA">strstr</span><span style="color: #007700">(</span><span style="color: #9876AA">$email</span><span style="color: #007700">, </span><span style="color: #DD0000">'@'</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$user</span><span style="color: #007700">; </span><span style="color: #FF8000">// 打印 name<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strstr-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>    <li class="member"><span class="function">{@link stristr()} - strstr 函数的忽略大小写版本</span></li>    <li class="member"><span class="function">{@link strpos()} - 查找字符串首次出现的位置</span></li>    <li class="member"><span class="function">{@link strrchr()} - 查找指定字符在字符串中的最后一次出现</span></li>    <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>   </ul>  </span> </div></div>
 * @return string|false the portion of string, or false if needle*/
function strstr(string $haystack, string $needle, bool $before_needle = false): string|false {}

/**
*<div id="function.stristr" class="refentry"> <div class="refnamediv">  <h1 class="refname">stristr</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">stristr</span> &mdash; <span class="dc-title"><span class="function">{@link strstr()}</span> 函数的忽略大小写版本</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.stristr-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>stristr</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$haystack</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$needle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$before_needle</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   返回 <span class="parameter" style="color:#3A95FF">haystack</span> 字符串从 <span class="parameter" style="color:#3A95FF">needle</span> 第一次出现的位置开始到结尾的字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.stristr-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">haystack</span></dt>     <dd>      <p class="para">       在该字符串中查找。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">needle</span></dt>     <dd>      <p class="para">       要搜索的字符串。      </p>       <p class="para">  Prior to PHP 8.0.0, if <span class="parameter" style="color:#3A95FF">needle</span> is not a string, it is converted  to an integer and applied as the ordinal value of a character.  This behavior is deprecated as of PHP 7.3.0, and relying on it is highly  discouraged. Depending on the intended behavior, the  <span class="parameter" style="color:#3A95FF">needle</span> should either be explicitly cast to string,  or an explicit call to <span class="function">{@link chr()}</span> should be performed. </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">before_needle</span></dt>     <dd>      <p class="para">      若为 <strong><span>true</span></strong>，<span class="function">{@link strstr()}</span> 将返回 <span class="parameter" style="color:#3A95FF">needle</span> 在 <span class="parameter" style="color:#3A95FF">haystack</span> 中的位置之前的部分(不包括 needle)。      </p>     </dd>       </dl>  </span>  <p class="para">   参数 <span class="parameter" style="color:#3A95FF">needle</span> 和 <span class="parameter" style="color:#3A95FF">haystack</span> 将以不区分大小写的方式对待。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.stristr-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回匹配的子字符串。如果 <span class="parameter" style="color:#3A95FF">needle</span> 未找到，返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.stristr-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">       <tr>  <td>8.2.0</td>  <td>   大小写转换不在依赖于使用 <span class="function">{@link setlocale()}</span> 设置的区域。只会进行 ASCII   大小写转换。非 ASCII 字节值将通过它们的字节值进行比较。  </td> </tr>      <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">needle</span> 现在接受空字符串。 </td></tr>      <tr>       <td>8.0.0</td>       <td>        不再支持 <span class="type" style="color:#EAB766">int</span> 传递给 <span class="parameter" style="color:#3A95FF">needle</span>。       </td>      </tr>      <tr>       <td>7.3.0</td>       <td>        弃用 <span class="type" style="color:#EAB766">int</span> 传递给 <span class="parameter" style="color:#3A95FF">needle</span>。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.stristr-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">stristr()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />  $email </span><span style="color: #007700">= </span><span style="color: #DD0000">'USER@EXAMPLE.com'</span><span style="color: #007700">;<br />  echo </span><span style="color: #9876AA">stristr</span><span style="color: #007700">(</span><span style="color: #9876AA">$email</span><span style="color: #007700">, </span><span style="color: #DD0000">'e'</span><span style="color: #007700">); </span><span style="color: #FF8000">// 输出 ER@EXAMPLE.com<br />  </span><span style="color: #007700">echo </span><span style="color: #9876AA">stristr</span><span style="color: #007700">(</span><span style="color: #9876AA">$email</span><span style="color: #007700">, </span><span style="color: #DD0000">'e'</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">); </span><span style="color: #FF8000">// 输出 US<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 测试字符串的存在与否</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />  $string </span><span style="color: #007700">= </span><span style="color: #DD0000">'Hello World!'</span><span style="color: #007700">;<br />  if(</span><span style="color: #9876AA">stristr</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">, </span><span style="color: #DD0000">'earth'</span><span style="color: #007700">) === </span><span style="color: #9876AA">FALSE</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'"earth" not found in string'</span><span style="color: #007700">;<br />  }<br /></span><span style="color: #FF8000">// 输出: "earth" not found in string<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3 使用非字符串 needle</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />  $string </span><span style="color: #007700">= </span><span style="color: #DD0000">'APPLE'</span><span style="color: #007700">;<br />  echo </span><span style="color: #9876AA">stristr</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">, </span><span style="color: #9876AA">97</span><span style="color: #007700">); </span><span style="color: #FF8000">// 97 = 小写字母 a<br />// 输出: APPLE<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.stristr-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.stristr-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link strstr()} - 查找字符串的首次出现</span></li>    <li class="member"><span class="function">{@link strrchr()} - 查找指定字符在字符串中的最后一次出现</span></li>    <li class="member"><span class="function">{@link stripos()} - 查找字符串首次出现的位置（不区分大小写）</span></li>    <li class="member"><span class="function">{@link strpbrk()} - 在字符串中查找一组字符的任何一个字符</span></li>    <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>   </ul>  </span> </div></div>
 * @return string|false the matched substring. If needle is not*/
function stristr(string $haystack, string $needle, bool $before_needle = false): string|false {}

/**
*<div id="function.strrchr" class="refentry"> <div class="refnamediv">  <h1 class="refname">strrchr</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">strrchr</span> &mdash; <span class="dc-title">查找指定字符在字符串中的最后一次出现</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strrchr-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>strrchr</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$haystack</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$needle</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$before_needle</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   该函数返回 <span class="parameter" style="color:#3A95FF">haystack</span> 字符串中的一部分，这部分以 <span class="parameter" style="color:#3A95FF">needle</span>   的最后出现位置开始，直到 <span class="parameter" style="color:#3A95FF">haystack</span> 末尾。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strrchr-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">haystack</span></dt>     <dd>      <p class="para">       在该字符串中查找。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">needle</span></dt>     <dd>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">needle</span> 包含了多个字符，那么仅使用第一个字符。该行为不同于 <span class="function">{@link strstr()}</span>。      </p>       <p class="para">  Prior to PHP 8.0.0, if <span class="parameter" style="color:#3A95FF">needle</span> is not a string, it is converted  to an integer and applied as the ordinal value of a character.  This behavior is deprecated as of PHP 7.3.0, and relying on it is highly  discouraged. Depending on the intended behavior, the  <span class="parameter" style="color:#3A95FF">needle</span> should either be explicitly cast to string,  or an explicit call to <span class="function">{@link chr()}</span> should be performed. </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">before_needle</span></dt>     <dd>      <p class="para">       如果为 <strong><span>true</span></strong>，<span class="function"><strong style="color:#CC7832">strrchr()</strong></span> 返回最后一次出现 <span class="parameter" style="color:#3A95FF">needle</span>       之前的 <span class="parameter" style="color:#3A95FF">haystack</span> 部分（不包括 needle）。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strrchr-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   该函数返回字符串的一部分。如果 <span class="parameter" style="color:#3A95FF">needle</span> 未被找到，返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.strrchr-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.3.0</td>      <td>       新增 <span class="parameter" style="color:#3A95FF">before_needle</span> 参数。      </td>     </tr>     <tr> <td>8.0.0</td> <td>  <span class="parameter" style="color:#3A95FF">needle</span> 现在接受空字符串。 </td></tr>     <tr>      <td>8.0.0</td>      <td>       不再支持将 <span class="type" style="color:#EAB766">int</span> 作为 <span class="parameter" style="color:#3A95FF">needle</span> 传递。      </td>     </tr>     <tr>      <td>7.3.0</td>      <td>       弃用将 <span class="type" style="color:#EAB766">int</span> 作为 <span class="parameter" style="color:#3A95FF">needle</span> 传递。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strrchr-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">strrchr()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$ext </span><span style="color: #007700">= </span><span style="color: #9876AA">strrchr</span><span style="color: #007700">(</span><span style="color: #DD0000">'somefile.txt'</span><span style="color: #007700">, </span><span style="color: #DD0000">'.'</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"file extension: </span><span style="color: #9876AA">$ext</span><span style="color: #DD0000"> \n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$ext </span><span style="color: #007700">= </span><span style="color: #9876AA">$ext </span><span style="color: #007700">? </span><span style="color: #9876AA">strtolower</span><span style="color: #007700">(</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">$ext</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">)) : </span><span style="color: #DD0000">''</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"file extension: </span><span style="color: #9876AA">$ext</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>file extension: .txt<br>file extension: txt<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.strrchr-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strrchr-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link strstr()} - 查找字符串的首次出现</span></li>    <li class="member"><span class="function">{@link strrpos()} - 计算指定字符串在目标字符串中最后一次出现的位置</span></li>   </ul>  </span> </div></div>
 * @return string|false <p>*/
function strrchr(string $haystack, string $needle, #[PhpStormStubsElementAvailable(from: "8.3")] bool $before_needle = false): string|false {}

/**
*<div id="function.str-shuffle" class="refentry"> <div class="refnamediv">  <h1 class="refname">str_shuffle</h1>  <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">str_shuffle</span> &mdash; <span class="dc-title">随机打乱一个字符串</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.str-shuffle-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>str_shuffle</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="simpara">   <span class="function"><strong style="color:#CC7832">str_shuffle()</strong></span> 函数打乱一个字符串，使用任何一种可能的排序方案。  </p>   <div class="caution"><strong class="caution">警告</strong> <p class="para">  本函数并不会生成安全加密的值，并且<em>不可</em>用于加密或者要求返回值不可猜测的目的。 </p> <p class="para">  如果需要加密安全随机，则可以将 <span class="classname"><a href="https://www.php.net/manual/zh/class.random-engine-secure.php" class="classname">Random\Engine\Secure</a></span> 引擎用于  <span class="classname"><a href="https://www.php.net/manual/zh/class.random-randomizer.php" class="classname">Random\Randomizer</a></span>。对于简单的用例，<span class="function">{@link random_int()}</span>  和 <span class="function">{@link random_bytes()}</span> 函数提供了操作系统的 <abbr title="Cryptographically Secure PseudoRandom Number Generator">CSPRNG</abbr> 支持的方便且安全的 <abbr title="Application Programming Interface">API</abbr>。 </p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.str-shuffle-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       输入字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.str-shuffle-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回打乱后的字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.str-shuffle-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.1.0</td>       <td>        内置的随机算法从 libc rand 函数<a href="https://www.php.net/manual/zh/migration71.incompatible.php#migration71.incompatible.rand-srand-aliases" class="link">更改为</a><a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html" class="link external">&raquo;&nbsp;梅森旋转</a>伪随机数生成算法。       </td>      </tr>     </tbody>       </table>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.str-shuffle-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">str_shuffle()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$str </span><span style="color: #007700">= </span><span style="color: #DD0000">'abcdef'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$shuffled </span><span style="color: #007700">= </span><span style="color: #9876AA">str_shuffle</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 输出类似于: bfdaec<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">$shuffled</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.str-shuffle-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link Random\Randomizer::shuffleBytes()} - Get a byte-wise permutation of a string</span></li>    <li class="member"><span class="function">{@link Random\Randomizer::shuffleArray()} - Get a permutation of an array</span></li>   </ul>  </span> </div></div>
 * @return string the shuffled string.*/
function str_shuffle(string $string): string {}

/**
*<div id="function.str-word-count" class="refentry"> <div class="refnamediv">  <h1 class="refname">str_word_count</h1>  <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">str_word_count</span> &mdash; <span class="dc-title">返回字符串中单词的使用情况</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.str-word-count-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>str_word_count</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$format</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$characters</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">int</span></span></div>  <p class="para rdfs-comment">   统计 <span class="parameter" style="color:#3A95FF">string</span> 中单词的数量。如果可选的参数   <span class="parameter" style="color:#3A95FF">format</span> 没有被指定，那么返回值是一个代表单词数量的整型数。如果指定了   <span class="parameter" style="color:#3A95FF">format</span> 参数，返回值将是一个数组，数组的内容则取决于   <span class="parameter" style="color:#3A95FF">format</span> 参数。<span class="parameter" style="color:#3A95FF">format</span> 的可能值和相应的输出结果如下所列。  </p>  <p class="para">   对于这个函数的目的来说，单词的定义是一个与区域设置相关的字符串。这个字符串可以包含字母字符，也可以包含   &quot;&#039;&quot; 和 &quot;-&quot; 字符（但不能以这两个字符开始）。   请注意，不支持多字节编码的字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.str-word-count-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">format</span></dt>     <dd>      <p class="para">       指定函数的返回值。当前支持的值如下：       <ul class="itemizedlist">        <li class="listitem">         <span class="simpara">          0 - 返回单词数量         </span>        </li>        <li class="listitem">         <span class="simpara">          1 - 返回一个包含 <span class="parameter" style="color:#3A95FF">string</span> 中全部单词的数组         </span>        </li>        <li class="listitem">         <span class="simpara">          2 - 返回关联数组。数组的键是单词在 <span class="parameter" style="color:#3A95FF">string</span> 中出现的数值位置，数组的值是这个单词         </span>        </li>        </ul>      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">characters</span></dt>     <dd>      <p class="para">       附加的字符串列表，其中的字符将被视为单词的一部分。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.str-word-count-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个数组或整型数，这取决于 <span class="parameter" style="color:#3A95FF">format</span> 参数的选择。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.str-word-count-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">characters</span> 可为空（Nullable）类型。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.str-word-count-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">str_word_count()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$str </span><span style="color: #007700">= </span><span style="color: #DD0000">"Hello fri3nd, you're<br />       looking          good today!"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">str_word_count</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">str_word_count</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">str_word_count</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">'àáãç3'</span><span style="color: #007700">));<br /><br />echo </span><span style="color: #9876AA">str_word_count</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; Hello<br>    [1] =&gt; fri<br>    [2] =&gt; nd<br>    [3] =&gt; you&#039;re<br>    [4] =&gt; looking<br>    [5] =&gt; good<br>    [6] =&gt; today<br>)<br><br>Array<br>(<br>    [0] =&gt; Hello<br>    [6] =&gt; fri<br>    [10] =&gt; nd<br>    [14] =&gt; you&#039;re<br>    [29] =&gt; looking<br>    [46] =&gt; good<br>    [51] =&gt; today<br>)<br><br>Array<br>(<br>    [0] =&gt; Hello<br>    [1] =&gt; fri3nd<br>    [2] =&gt; you&#039;re<br>    [3] =&gt; looking<br>    [4] =&gt; good<br>    [5] =&gt; today<br>)<br><br>7<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.str-word-count-seealso">  <h3 class="title">参见</h3>   <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link explode()} - 使用一个字符串分割另一个字符串</span></li>    <li class="member"><span class="function">{@link preg_split()} - 通过一个正则表达式分隔字符串</span></li>    <li class="member"><span class="function">{@link count_chars()} - 返回字符串所用字符的信息</span></li>    <li class="member"><span class="function">{@link substr_count()} - 计算字串出现的次数</span></li>   </ul>  </span> </div></div>
 * @return string[]|int an array or an integer, depending on the*/
function str_word_count(string $string, int $format = 0, ?string $characters): array|int {}

/**
*<div id="function.str-split" class="refentry"> <div class="refnamediv">  <h1 class="refname">str_split</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">str_split</span> &mdash; <span class="dc-title">将字符串转换为数组</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.str-split-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>str_split</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$length</span><span class="initializer"> = 1</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   将一个字符串转换为数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.str-split-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       输入字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">length</span></dt>     <dd>      <p class="para">       每一段的长度。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.str-split-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果指定了可选的 <span class="parameter" style="color:#3A95FF">length</span> 参数，返回数组中的每个元素长度均为 <span class="parameter" style="color:#3A95FF">length</span>   的块，除了最后一个块，如果字符串不是均匀划分，则可能会更短。默认 <span class="parameter" style="color:#3A95FF">length</span> 是   <span>1</span>，这意味着每个块的大小是一个字节。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.str-split-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">length</span> 小于 <span>1</span>，将会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.str-split-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.2.0</td>      <td>       如果 <span class="parameter" style="color:#3A95FF">string</span> 为空，现在返回空 <span class="type" style="color:#EAB766">array</span>。之前返回的 <span class="type" style="color:#EAB766">array</span> 包含单个空字符串。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       如果 <span class="parameter" style="color:#3A95FF">length</span> 小于 <span>1</span>，现在会抛出       <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；之前会触发 <strong><span>E_WARNING</span></strong>       级别的错误且函数会返回 <strong><span>false</span></strong>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.str-split-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">str_split()</strong></span> 使用示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$str </span><span style="color: #007700">= </span><span style="color: #DD0000">"Hello Friend"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$arr1 </span><span style="color: #007700">= </span><span style="color: #9876AA">str_split</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$arr2 </span><span style="color: #007700">= </span><span style="color: #9876AA">str_split</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr2</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; H<br>    [1] =&gt; e<br>    [2] =&gt; l<br>    [3] =&gt; l<br>    [4] =&gt; o<br>    [5] =&gt;<br>    [6] =&gt; F<br>    [7] =&gt; r<br>    [8] =&gt; i<br>    [9] =&gt; e<br>    [10] =&gt; n<br>    [11] =&gt; d<br>)<br><br>Array<br>(<br>    [0] =&gt; Hel<br>    [1] =&gt; lo<br>    [2] =&gt; Fri<br>    [3] =&gt; end<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.str-split-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    在处理多字节字符时，<span class="function"><strong style="color:#CC7832">str_split()</strong></span>    会按字节数转换，而非字符数。使用 <span class="function">{@link mb_str_split()}</span>    将字符串拆分为码点。   </p>  </p></blockquote> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.str-split-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link mb_str_split()} - 指定多字节字符串，返回其字符数组</span></li>    <li class="member"><span class="function">{@link chunk_split()} - 将字符串分割成小块</span></li>    <li class="member"><span class="function">{@link preg_split()} - 通过一个正则表达式分隔字符串</span></li>    <li class="member"><span class="function">{@link explode()} - 使用一个字符串分割另一个字符串</span></li>    <li class="member"><span class="function">{@link count_chars()} - 返回字符串所用字符的信息</span></li>    <li class="member"><span class="function">{@link str_word_count()} - 返回字符串中单词的使用情况</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/control-structures.for.php" class="link">for</a></li>   </ul>  </span> </div></div>
 * @return string[]|false <p>If the optional split_length parameter is*/
function str_split(string $string, int $length = 1): array|false {}

/**
*<div id="function.strpbrk" class="refentry"> <div class="refnamediv">  <h1 class="refname">strpbrk</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">strpbrk</span> &mdash; <span class="dc-title">在字符串中查找一组字符的任何一个字符</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strpbrk-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>strpbrk</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$characters</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">strpbrk()</strong></span> 在 <span class="parameter" style="color:#3A95FF">string</span> 字符串中查找 <span class="parameter" style="color:#3A95FF">characters</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strpbrk-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       在此字符串中查找 <span class="parameter" style="color:#3A95FF">string</span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">characters</span></dt>     <dd>      <p class="para">       该参数区分大小写。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strpbrk-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回以找到的字符开始的子字符串。如果没有找到，则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strpbrk-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">strpbrk()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$text </span><span style="color: #007700">= </span><span style="color: #DD0000">'This is a Simple text.'</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 输出 "is is a Simple text."，因为 'i' 先被匹配<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">strpbrk</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">, </span><span style="color: #DD0000">'mi'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 输出 "Simple text."，因为字符区分大小写<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">strpbrk</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">, </span><span style="color: #DD0000">'S'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strpbrk-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link strpos()} - 查找字符串首次出现的位置</span></li>    <li class="member"><span class="function">{@link strstr()} - 查找字符串的首次出现</span></li>    <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>   </ul>  </span> </div></div>
 * @return string|false a string starting from the character found, or false if it is*/
function strpbrk(
    string $string,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.0')] $char_list = '',
    #[PhpStormStubsElementAvailable(from: '7.1')] string $characters
): string|false {}

/**
*<div id="function.substr-compare" class="refentry"> <div class="refnamediv">  <h1 class="refname">substr_compare</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">substr_compare</span> &mdash; <span class="dc-title">二进制安全比较字符串（从偏移位置比较指定长度）</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.substr-compare-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>substr_compare</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$haystack</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$needle</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$length</span><span class="initializer"> = <strong><span>null</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$case_insensitive</span><span class="initializer"> = <strong><span>false</span></strong></span></span><br>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">substr_compare()</strong></span> 从偏移位置   <span class="parameter" style="color:#3A95FF">offset</span> 开始比较   <span class="parameter" style="color:#3A95FF">haystack</span> 与   <span class="parameter" style="color:#3A95FF">needle</span>，比较长度为   <span class="parameter" style="color:#3A95FF">length</span> 个字符。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.substr-compare-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">haystack</span></dt>     <dd>      <p class="para">       待比较的第一个字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">needle</span></dt>     <dd>      <p class="para">       待比较的第二个字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">       比较开始的位置。如果为负数，则从字符串结尾处开始算起。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">length</span></dt>     <dd>      <p class="para">       比较的长度。默认值为 <span class="parameter" style="color:#3A95FF">needle</span> 的长度与       <span class="parameter" style="color:#3A95FF">haystack</span> 的长度减去位置偏移量       <span class="parameter" style="color:#3A95FF">offset</span> 后二者中的较大者。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">case_insensitive</span></dt>     <dd>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">case_insensitive</span> 为 <strong><span>true</span></strong>，比较将不区分大小写。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.substr-compare-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">haystack</span> 从偏移位置   <span class="parameter" style="color:#3A95FF">offset</span> 起的子字符串小于   <span class="parameter" style="color:#3A95FF">needle</span>，则返回 <span>-1</span>；如果大于   <span class="parameter" style="color:#3A95FF">needle</span>，则返回 <span>1</span>；如果二者相等，则返回 <span>0</span>。如果   <span class="parameter" style="color:#3A95FF">offset</span> 等于（在 PHP 7.2.18, 7.3.5 之前）或大于   <span class="parameter" style="color:#3A95FF">haystack</span> 的长度，或设置   <span class="parameter" style="color:#3A95FF">length</span> 小于或等于 0，<span class="function"><strong style="color:#CC7832">substr_compare()</strong></span>   将打印出警告信息并且返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.substr-compare-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在此函数返回 <span>-1</span> 或者 <span>1</span>，之前返回负数或正数。 </td></tr>      <tr>       <td>8.0.0</td>       <td>        <span class="parameter" style="color:#3A95FF">length</span> 现在允许为 null。       </td>      </tr>      <tr>       <td>7.2.18, 7.3.5</td>       <td>        <span class="parameter" style="color:#3A95FF">offset</span> 现在可能等于 <span class="parameter" style="color:#3A95FF">haystack</span>。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.substr-compare-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">substr_compare()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">substr_compare</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcde"</span><span style="color: #007700">, </span><span style="color: #DD0000">"bc"</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">); </span><span style="color: #FF8000">// 0<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">substr_compare</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcde"</span><span style="color: #007700">, </span><span style="color: #DD0000">"de"</span><span style="color: #007700">, -</span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">); </span><span style="color: #FF8000">// 0<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">substr_compare</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcde"</span><span style="color: #007700">, </span><span style="color: #DD0000">"bcg"</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">); </span><span style="color: #FF8000">// 0<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">substr_compare</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcde"</span><span style="color: #007700">, </span><span style="color: #DD0000">"BC"</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">); </span><span style="color: #FF8000">// 0<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">substr_compare</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcde"</span><span style="color: #007700">, </span><span style="color: #DD0000">"bc"</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">); </span><span style="color: #FF8000">// 1<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">substr_compare</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcde"</span><span style="color: #007700">, </span><span style="color: #DD0000">"cd"</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">); </span><span style="color: #FF8000">// -1<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">substr_compare</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcde"</span><span style="color: #007700">, </span><span style="color: #DD0000">"abc"</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">); </span><span style="color: #FF8000">// warning<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.substr-compare-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link strncmp()} - 二进制安全比较字符串开头的若干个字符</span></li>   </ul>  </span> </div> </div>
 * @return int if less than 0 if main_str from position*/
function substr_compare(string $haystack, string $needle, int $offset, ?int $length, bool $case_insensitive = false): int {}

/**
*<div id="function.strcoll" class="refentry"> <div class="refnamediv">  <h1 class="refname">strcoll</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.5, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">strcoll</span> &mdash; <span class="dc-title">基于区域设置的字符串比较</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strcoll-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>strcoll</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string2</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   注意该比较区分大小写。和 <span class="function">{@link strcmp()}</span> 不同，该函数不是二进制安全的。  </p>  <p class="para">   <span class="function"><strong style="color:#CC7832">strcoll()</strong></span> 使用当前区域设置进行比较。如果当前区域为 C 或 POSIX，该函数等同于 <span class="function">{@link strcmp()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strcoll-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string1</span></dt>     <dd>      <p class="para">       第一个字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">string2</span></dt>     <dd>      <p class="para">       第二个字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strcoll-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">     如果 <span class="parameter" style="color:#3A95FF">string1</span> 小于   <span class="parameter" style="color:#3A95FF">string2</span> 返回 &lt; 0；   如果 <span class="parameter" style="color:#3A95FF">string1</span>   大于 <span class="parameter" style="color:#3A95FF">string2</span>   返回 &gt; 0；如果两者相等，返回 0。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strcoll-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>    <li class="member"><span class="function">{@link strcmp()} - 二进制安全字符串比较</span></li>    <li class="member"><span class="function">{@link strcasecmp()} - 二进制安全比较字符串（不区分大小写）</span></li>    <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>    <li class="member"><span class="function">{@link stristr()} - strstr 函数的忽略大小写版本</span></li>    <li class="member"><span class="function">{@link strncasecmp()} - 二进制安全比较字符串开头的若干个字符（不区分大小写）</span></li>    <li class="member"><span class="function">{@link strncmp()} - 二进制安全比较字符串开头的若干个字符</span></li>    <li class="member"><span class="function">{@link strstr()} - 查找字符串的首次出现</span></li>    <li class="member"><span class="function">{@link setlocale()} - 设置区域信息</span></li>   </ul>  </span> </div></div>
 * @return int if less than 0 if str1 is less than*/
function strcoll(string $string1, string $string2): int {}

/**
*<div id="function.money-format" class="refentry"> <div class="refnamediv">  <h1 class="refname">money_format</h1>  <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">money_format</span> &mdash; <span class="dc-title">将数字格式化成货币字符串</span></p> </div>  <div id="function.money-format-refsynopsisdiv">   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数已自 PHP 7.4.0起<em>弃用</em>，自 PHP 8.0.0 起<em>移除</em>。强烈建议不要依赖本函数。</p></div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.money-format-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>money_format</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$format</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">float</span> <span class="parameter" style="color:#3A95FF">$number</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">money_format()</strong></span> 返回格式化好的    <span class="parameter" style="color:#3A95FF">number</span> 版本。   此函数包装了 C 函数库中的 <span class="function"><strong style="color:#CC7832">strfmon()</strong></span>，不同之处是：此实现每次只能转化一个数字。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.money-format-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">format</span></dt>     <dd>      <p class="para">       格式字符串由以下几部分组成：       <ul class="itemizedlist">        <li class="listitem"><p class="para">单个 <span>%</span> 字符</p></li>        <li class="listitem"><p class="para">可选的标记（flags）</p></li>        <li class="listitem"><p class="para">可选的字段宽度</p></li>        <li class="listitem"><p class="para">可选的，左侧精度</p></li>        <li class="listitem"><p class="para">可选的，右侧精度</p></li>        <li class="listitem"><p class="para">必选的，单个转化字符</p></li>       </ul>      </p>      <p class="formalpara">       <h5 class="title">标记(Flags)</h5>       <p class="para">        可选多个标记，分别是：        <dl>                   <dt><span>=</span><span class="replaceable">f</span></dt>          <dd>           <p class="para">            字符：<span>=</span>，并紧跟一个字符（单字节） <span class="replaceable">f</span>，用于数字填充。默认的填充字符是空格。           </p>          </dd>                            <dt><span>^</span></dt>          <dd>           <p class="para">            禁用分组字符（比如金额中的逗号。在本地区域设置 locale 中定义）。           </p>          </dd>                            <dt><span>+</span> or <span>(</span></dt>          <dd>           <p class="para">            正负数字的格式。使用 <span>+</span>，将使用区域设置（locale）中相当于 <span>+</span> 和 <span>-</span> 的符号。            如果使用 <span>(</span>，负数将被圆括号围绕。不设置的话，默认为            <span>+</span>。           </p>          </dd>                            <dt><span>!</span></dt>          <dd>           <p class="para">            不输出货币符号（比如 ¥）。           </p>          </dd>                            <dt><span>-</span></dt>          <dd>           <p class="para">            有这个符号的时候，将使字段左对齐（填充到右边），默认是相反的，是右对齐的（填充到左边）。           </p>          </dd>                 </dl>       </p>      </p>      <p class="formalpara">       <h5 class="title">字段宽度</h5>       <p class="para">        <dl>                   <dt><span class="replaceable">w</span></dt>          <dd>           <p class="para">            十进制数值字符串的宽度。字段将右对齐，除非使用了 <span>-</span> 标记。默认值 0。           </p>          </dd>                 </dl>       </p>      </p>      <p class="formalpara">       <h5 class="title">左侧精度</h5>       <p class="para">        <dl>                   <dt><span>#</span><span class="replaceable">n</span></dt>          <dd>           <p class="para">            小数字符（比如小数点）前的最大位数 (<span class="replaceable">n</span>)。            常用于同一列中的格式对齐。            如果位数小于 <span class="replaceable">n</span> 则使用填充字符填满。            如果实际位数大于 <span class="replaceable">n</span>，此设置将被忽略。           </p>           <p class="para">            如果没用 <span>^</span> 标识禁用分组，分组分隔符会在添加填充字符之前插入（如果有的话）。            分组分隔符不会应用到填充字符里，哪怕填充字符是个数字。           </p>           <p class="para">            为了保证对齐，出现在之前或者之后的字符，都会填充必要的空格，保证正负情况下长度都一样。           </p>          </dd>                 </dl>       </p>      </p>      <p class="formalpara">       <h5 class="title">        右侧精度       </h5>       <p class="para">        <dl>                   <dt><span>.</span><span class="replaceable">p</span></dt>          <dd>           <p class="para">            小数点后的一段数字            (<span class="replaceable">p</span>)。            如果 <span class="replaceable">p</span> 的值是 0（零），小数点右侧的数值将被删除。            如果不使用这个标记，默认展现取决于当前的区域设置。            小数点后指定位数的数字，四舍五入格式化。           </p>          </dd>                 </dl>       </p>      </p>      <p class="formalpara">       <h5 class="title">        转化字符       </h5>       <p class="para">        <dl>                   <dt><span>i</span></dt>          <dd>           <p class="para">            根据国际化区域设置中的货币格式，格式化数值。（比如，locale 是 USA：USD 1,234.56）。           </p>          </dd>                            <dt><span>n</span></dt>          <dd>           <p class="para">            根据国际化区域设置中国家的货币格式，格式化数值。（比如，locale 是 de_DE：EU1.234,56）。           </p>          </dd>                            <dt><span>%</span></dt>          <dd>           <p class="para">            返回字符 <span>%</span>。           </p>          </dd>                 </dl>       </p>      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">number</span></dt>     <dd>      <p class="para">       需要格式化的数字。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.money-format-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回格式化后的字符。格式字符串前后的字符将原封不动返回。   传入的 <span class="parameter" style="color:#3A95FF">number</span> 如果不是数字，将返回  <strong><span>null</span></strong> 并且产生    <strong><span>E_WARNING</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.money-format-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.4.0</td>       <td>        弃用此函数。使用 <span class="methodname" style="color:#CC7832">{@link NumberFormatter::formatCurrency()}</span> 替代。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.money-format-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">money_format()</strong></span> 例子</strong></p>    <div class="example-contents"><p>     使用不同的 locale 和格式字符串，来说明此函数的用法。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$number </span><span style="color: #007700">= </span><span style="color: #9876AA">1234.56</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 让我们打印 en_US locale 的国际化格式<br /></span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_MONETARY</span><span style="color: #007700">, </span><span style="color: #DD0000">'en_US'</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">money_format</span><span style="color: #007700">(</span><span style="color: #DD0000">'%i'</span><span style="color: #007700">, </span><span style="color: #9876AA">$number</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// USD 1,234.56<br /><br />// 意大利国家的格式，带两位浮点小数`<br /></span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_MONETARY</span><span style="color: #007700">, </span><span style="color: #DD0000">'it_IT'</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">money_format</span><span style="color: #007700">(</span><span style="color: #DD0000">'%.2n'</span><span style="color: #007700">, </span><span style="color: #9876AA">$number</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// Eu 1.234,56<br /><br />// 负数的使用<br /></span><span style="color: #9876AA">$number </span><span style="color: #007700">= -</span><span style="color: #9876AA">1234.5672</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 美国国家的格式，使用圆括号 () 标记负数。<br />// 左侧精度使用十位<br /></span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_MONETARY</span><span style="color: #007700">, </span><span style="color: #DD0000">'en_US'</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">money_format</span><span style="color: #007700">(</span><span style="color: #DD0000">'%(#10n'</span><span style="color: #007700">, </span><span style="color: #9876AA">$number</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// ($        1,234.57)<br /><br />// 相似的格式，添加了右侧两位小数点的精度，同时用 * 来填充<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">money_format</span><span style="color: #007700">(</span><span style="color: #DD0000">'%=*(#10.2n'</span><span style="color: #007700">, </span><span style="color: #9876AA">$number</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// ($********1,234.57)<br /><br />// 让我们左对齐，14位宽，左侧八位，右侧两位，不带分组字符<br />// de_DE 的国际化格式<br /></span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_MONETARY</span><span style="color: #007700">, </span><span style="color: #DD0000">'de_DE'</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">money_format</span><span style="color: #007700">(</span><span style="color: #DD0000">'%=*^-14#8.2i'</span><span style="color: #007700">, </span><span style="color: #9876AA">1234.56</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// Eu 1234,56****<br /><br />// 让我们在格式字符串前后，添加一些简介<br /></span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_MONETARY</span><span style="color: #007700">, </span><span style="color: #DD0000">'en_GB'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$fmt </span><span style="color: #007700">= </span><span style="color: #DD0000">'The final value is %i (after a 10%% discount)'</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">money_format</span><span style="color: #007700">(</span><span style="color: #9876AA">$fmt</span><span style="color: #007700">, </span><span style="color: #9876AA">1234.56</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// The final value is  GBP 1,234.56 (after a 10% discount)<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.money-format-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    具有 strfmon 的系统才有 <span class="function"><strong style="color:#CC7832">money_format()</strong></span> 函数。    例如 Windows 不具备，所以 Windows 系统上 <span class="function"><strong style="color:#CC7832">money_format()</strong></span> 未定义。   </p>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    locale 设置中， <strong><span>LC_MONETARY</span></strong> 会影响此函数的行为。在使用函数前，首先要用  <span class="function">{@link setlocale()}</span> 来设置合适的区域设置（locale）。   </p>  </p></blockquote>    </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.money-format-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link setlocale()} - 设置区域信息</span></li>    <li class="member"><span class="function">{@link sscanf()} - 根据指定格式解析输入的字符</span></li>    <li class="member"><span class="function">{@link sprintf()} - 返回格式化字符串</span></li>    <li class="member"><span class="function">{@link printf()} - 输出格式化字符串</span></li>    <li class="member"><span class="function">{@link number_format()} - 以千位分隔符方式格式化一个数字</span></li>   </ul>  </span> </div></div>
 * @return string|null the formatted string. Characters before and after the formatting*/
function money_format(string $format, float $number): ?string {}

/**
*<div id="function.substr" class="refentry"> <div class="refnamediv">  <h1 class="refname">substr</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">substr</span> &mdash; <span class="dc-title">返回字符串的子串</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.substr-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>substr</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$length</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   返回字符串 <span class="parameter" style="color:#3A95FF">string</span> 由 <span class="parameter" style="color:#3A95FF">offset</span> 和 <span class="parameter" style="color:#3A95FF">length</span> 参数指定的子字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.substr-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       输入字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">offset</span> 是非负数，返回的字符串将从 <span class="parameter" style="color:#3A95FF">string</span> 的 <span class="parameter" style="color:#3A95FF">offset</span> 位置开始，从 0 开始计算。例如，在字符串 “<span>abcdef</span>” 中，在位置 <span>0</span> 的字符是 “<span>a</span>”，位置 <span>2</span> 的字符串是 “<span>c</span>” 等等。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">offset</span> 是负数，返回的字符串将从 <span class="parameter" style="color:#3A95FF">string</span> 结尾处向前数第 <span class="parameter" style="color:#3A95FF">offset</span> 个字符开始。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">string</span> 的长度小于 <span class="parameter" style="color:#3A95FF">offset</span>，将返回空字符串。      </p>      <p class="para">       <div class="example" id="">        <p><strong>示例 #1 使用负数 <span class="parameter" style="color:#3A95FF">offset</span></strong></p>        <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$rest </span><span style="color: #007700">= </span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcdef"</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">);    </span><span style="color: #FF8000">// 返回 "f"<br /></span><span style="color: #9876AA">$rest </span><span style="color: #007700">= </span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcdef"</span><span style="color: #007700">, -</span><span style="color: #9876AA">2</span><span style="color: #007700">);    </span><span style="color: #FF8000">// 返回 "ef"<br /></span><span style="color: #9876AA">$rest </span><span style="color: #007700">= </span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcdef"</span><span style="color: #007700">, -</span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">); </span><span style="color: #FF8000">// 返回 "d"<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>        </div>       </div>      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">length</span></dt>     <dd>      <p class="para">       如果提供了正数的 <span class="parameter" style="color:#3A95FF">length</span>，返回的字符串将从 <span class="parameter" style="color:#3A95FF">offset</span> 处开始最多包括 <span class="parameter" style="color:#3A95FF">length</span> 个字符（取决于 <span class="parameter" style="color:#3A95FF">string</span> 的长度）。      </p>      <p class="para">       如果提供了负数的 <span class="parameter" style="color:#3A95FF">length</span>，那么 <span class="parameter" style="color:#3A95FF">string</span> 末尾处的 <span class="parameter" style="color:#3A95FF">length</span> 个字符将会被省略（若 <span class="parameter" style="color:#3A95FF">offset</span> 是负数则从字符串尾部算起）。如果 <span class="parameter" style="color:#3A95FF">offset</span> 不在这段文本中，那么将返回空字符串。      </p>      <p class="para">       如果提供了值为 <span>0</span> 的 <span class="parameter" style="color:#3A95FF">length</span>，那么将返回一个空字符串。      </p>      <p class="para">       如果忽略 <span class="parameter" style="color:#3A95FF">length</span> 或为 <strong><span>null</span></strong>，返回的子字符串将从 <span class="parameter" style="color:#3A95FF">offset</span> 位置开始直到字符串结尾。      </p>      <div class="example" id="">       <p><strong>示例 #2 使用负数 <span class="parameter" style="color:#3A95FF">length</span></strong></p>       <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$rest </span><span style="color: #007700">= </span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcdef"</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">);  </span><span style="color: #FF8000">// 返回 "abcde"<br /></span><span style="color: #9876AA">$rest </span><span style="color: #007700">= </span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcdef"</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">);  </span><span style="color: #FF8000">// 返回 "cde"<br /></span><span style="color: #9876AA">$rest </span><span style="color: #007700">= </span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcdef"</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">, -</span><span style="color: #9876AA">4</span><span style="color: #007700">);  </span><span style="color: #FF8000">// 返回 ""; 在 PHP 8.0.0 之前，返回 false<br /></span><span style="color: #9876AA">$rest </span><span style="color: #007700">= </span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcdef"</span><span style="color: #007700">, -</span><span style="color: #9876AA">3</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">); </span><span style="color: #FF8000">// 返回 "de"<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>       </div>      </div>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.substr-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回提取的 <span class="parameter" style="color:#3A95FF">string</span> 部分或者空字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.substr-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       现在 <span class="parameter" style="color:#3A95FF">length</span> 允许为 null。当 <span class="parameter" style="color:#3A95FF">length</span>       显式设置为 <strong><span>null</span></strong> 时，函数返回在字符串末尾结束的子字符串，而之前将返回空字符串。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       函数将返回空字符串, 在此之前返回 <strong><span>false</span></strong>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.substr-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #3 <span class="function"><strong style="color:#CC7832">substr()</strong></span> 基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">'abcdef'</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">);     </span><span style="color: #FF8000">// bcdef<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">"abcdef"</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">null</span><span style="color: #007700">); </span><span style="color: #FF8000">// bcdef; 在 PHP 8.0.0 之前，返回空字符串<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">'abcdef'</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">);  </span><span style="color: #FF8000">// bcd<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">'abcdef'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">);  </span><span style="color: #FF8000">// abcd<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">'abcdef'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">8</span><span style="color: #007700">);  </span><span style="color: #FF8000">// abcdef<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">'abcdef'</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">); </span><span style="color: #FF8000">// f<br /><br />// 访问字符串中的单个字符<br />// 也可以使用中括号<br /></span><span style="color: #9876AA">$string </span><span style="color: #007700">= </span><span style="color: #DD0000">'abcdef'</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">$string</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">];                 </span><span style="color: #FF8000">// a<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">$string</span><span style="color: #007700">[</span><span style="color: #9876AA">3</span><span style="color: #007700">];                 </span><span style="color: #FF8000">// d<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">$string</span><span style="color: #007700">[</span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">)-</span><span style="color: #9876AA">1</span><span style="color: #007700">]; </span><span style="color: #FF8000">// f<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>      <div class="example" id="">    <p><strong>示例 #4 <span class="function"><strong style="color:#CC7832">substr()</strong></span> casting behaviour</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">apple </span><span style="color: #007700">{<br />    public function </span><span style="color: #9876AA">__toString</span><span style="color: #007700">() {<br />        return </span><span style="color: #DD0000">"green"</span><span style="color: #007700">;<br />    }<br />}<br /><br />echo </span><span style="color: #DD0000">"1) "</span><span style="color: #007700">.</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">"pear"</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">), </span><span style="color: #9876AA">true</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"2) "</span><span style="color: #007700">.</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">54321</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">), </span><span style="color: #9876AA">true</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"3) "</span><span style="color: #007700">.</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">substr</span><span style="color: #007700">(new </span><span style="color: #9876AA">apple</span><span style="color: #007700">(), </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">), </span><span style="color: #9876AA">true</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"4) "</span><span style="color: #007700">.</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">true</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">), </span><span style="color: #9876AA">true</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"5) "</span><span style="color: #007700">.</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">false</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">), </span><span style="color: #9876AA">true</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"6) "</span><span style="color: #007700">.</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">""</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">), </span><span style="color: #9876AA">true</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"7) "</span><span style="color: #007700">.</span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">1.2e3</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">), </span><span style="color: #9876AA">true</span><span style="color: #007700">).</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>1) &#039;pe&#039;<br>2) &#039;54&#039;<br>3) &#039;gr&#039;<br>4) &#039;1&#039;<br>5) &#039;&#039;<br>6) &#039;&#039;<br>7) &#039;1200&#039;<br></span></div>    </div>   </div>   <div class="example" id="">   <p><strong>示例 #5 无效字符范围</strong></p>   <div class="example-contents"><p>    如果请求的字符范围无效, <span class="function"><strong style="color:#CC7832">substr()</strong></span> 从     PHP 8.0.0 开始返回空字符串；在此之前返回 <strong><span>false</span></strong> 。    </p></div>   <div class="example" id="">    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #DD0000">'a'</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例在 PHP 8 中的输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(0) &quot;&quot;<br></span></div>    </div>    <div class="example-contents"><p>以上示例在 PHP 7 中的输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br></span></div>    </div>   </div>   </div>     </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.substr-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link strrchr()} - 查找指定字符在字符串中的最后一次出现</span></li>    <li class="member"><span class="function">{@link substr_replace()} - 替换字符串的子串</span></li>    <li class="member"><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>    <li class="member"><span class="function">{@link trim()} - 去除字符串首尾处的空白字符（或者其他字符）</span></li>    <li class="member"><span class="function">{@link mb_substr()} - 获取部分字符串</span></li>    <li class="member"><span class="function">{@link wordwrap()} - 打断字符串为指定数量的字串</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.types.string.php#language.types.string.substr" class="link">字符串访问和修改</a></li>   </ul>  </span> </div></div>
*/
function substr(string $string, int $offset, ?int $length) {}

/**
*<div id="function.substr-replace" class="refentry"> <div class="refnamediv">  <h1 class="refname">substr_replace</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">substr_replace</span> &mdash; <span class="dc-title">替换字符串的子串</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.substr-replace-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>substr_replace</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$string</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$replace</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">int</span></span> <span class="parameter" style="color:#3A95FF">$offset</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">null</span></span> <span class="parameter" style="color:#3A95FF">$length</span><span class="initializer"> = <strong><span>null</span></strong></span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">array</span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">substr_replace()</strong></span> 在字符串 <span class="parameter" style="color:#3A95FF">string</span> 的副本中将由 <span class="parameter" style="color:#3A95FF">offset</span>   和可选的 <span class="parameter" style="color:#3A95FF">length</span> 参数限定的子字符串使用 <span class="parameter" style="color:#3A95FF">replace</span> 进行替换。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.substr-replace-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       输入字符串。      </p>      <p class="para">       可以提供 <span class="type" style="color:#EAB766">array</span> 类型的 <span class="type" style="color:#EAB766">string</span>，会依次替换出现的字符串。在这种情况下，<span class="parameter" style="color:#3A95FF">replace</span>、<span class="parameter" style="color:#3A95FF">offset</span>       和 <span class="parameter" style="color:#3A95FF">length</span> 参数可以作为标量值依次提供给每个输入字符串，或者作为 <span class="type" style="color:#EAB766">array</span> 提供，然后数组元素将会相应的用于每个输入字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">replace</span></dt>     <dd>      <p class="para">       替换字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">offset</span> 为非负数，替换将从 <span class="parameter" style="color:#3A95FF">string</span> 的 <span class="parameter" style="color:#3A95FF">offset</span> 位置开始。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">offset</span> 为负数，替换将从 <span class="parameter" style="color:#3A95FF">string</span> 的倒数第 <span class="parameter" style="color:#3A95FF">offset</span> 个位置开始。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">length</span></dt>     <dd>      <p class="para">       如果设定了这个参数并且为正数，表示 <span class="parameter" style="color:#3A95FF">string</span> 中被替换的子字符串的长度。如果设定为负数，它表示待替换的子字符串结尾处距离       <span class="parameter" style="color:#3A95FF">string</span> 末端的字符个数。如果没有提供此参数，那么它默认为 strlen( <span class="parameter" style="color:#3A95FF">string</span>       )（字符串的长度）。当然，如果 <span class="parameter" style="color:#3A95FF">length</span> 为 0，那么这个函数的功能为将 <span class="parameter" style="color:#3A95FF">replace</span> 插入到       <span class="parameter" style="color:#3A95FF">string</span> 的 <span class="parameter" style="color:#3A95FF">offset</span> 位置处。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.substr-replace-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回结果字符串。如果 <span class="parameter" style="color:#3A95FF">string</span> 是个数组，那么也将返回一个数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.substr-replace-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        <span class="parameter" style="color:#3A95FF">length</span> 现在允许为 null。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.substr-replace-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">substr_replace()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$var </span><span style="color: #007700">= </span><span style="color: #DD0000">'ABCDEFGH:/MNRPQR/'</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"Original: </span><span style="color: #9876AA">$var</span><span style="color: #DD0000">&lt;hr /&gt;\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 这两个例子使用 “bob” 替换整个 $var。<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">substr_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$var</span><span style="color: #007700">, </span><span style="color: #DD0000">'bob'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">) . </span><span style="color: #DD0000">"&lt;br /&gt;\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">substr_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$var</span><span style="color: #007700">, </span><span style="color: #DD0000">'bob'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">$var</span><span style="color: #007700">)) . </span><span style="color: #DD0000">"&lt;br /&gt;\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 将 “bob” 插入到 $var 的开头处。<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">substr_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$var</span><span style="color: #007700">, </span><span style="color: #DD0000">'bob'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">) . </span><span style="color: #DD0000">"&lt;br /&gt;\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 下面两个例子使用 “bob” 替换 $var 中的 “MNRPQR”。<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">substr_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$var</span><span style="color: #007700">, </span><span style="color: #DD0000">'bob'</span><span style="color: #007700">, </span><span style="color: #9876AA">10</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">) . </span><span style="color: #DD0000">"&lt;br /&gt;\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">substr_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$var</span><span style="color: #007700">, </span><span style="color: #DD0000">'bob'</span><span style="color: #007700">, -</span><span style="color: #9876AA">7</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">) . </span><span style="color: #DD0000">"&lt;br /&gt;\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 从 $var 中删除 “MNRPQR”。<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">substr_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$var</span><span style="color: #007700">, </span><span style="color: #DD0000">''</span><span style="color: #007700">, </span><span style="color: #9876AA">10</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">) . </span><span style="color: #DD0000">"&lt;br /&gt;\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>  </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2      一次性使用 <span class="function"><strong style="color:#CC7832">substr_replace()</strong></span> 替换多个字符串    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$input </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'A: XXX'</span><span style="color: #007700">, </span><span style="color: #DD0000">'B: XXX'</span><span style="color: #007700">, </span><span style="color: #DD0000">'C: XXX'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 简单用例：将每个字符串使用 YYY 替换为 XXX。<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">'; '</span><span style="color: #007700">, </span><span style="color: #9876AA">substr_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #DD0000">'YYY'</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">)).</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 更复杂的情况，每种替换都不同。<br /></span><span style="color: #9876AA">$replace </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'AAA'</span><span style="color: #007700">, </span><span style="color: #DD0000">'BBB'</span><span style="color: #007700">, </span><span style="color: #DD0000">'CCC'</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">'; '</span><span style="color: #007700">, </span><span style="color: #9876AA">substr_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">$replace</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">)).</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 每次替换的字符数不同。<br /></span><span style="color: #9876AA">$length </span><span style="color: #007700">= array(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">'; '</span><span style="color: #007700">, </span><span style="color: #9876AA">substr_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #9876AA">$replace</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #9876AA">$length</span><span style="color: #007700">)).</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>A: YYY; B: YYY; C: YYY<br>A: AAA; B: BBB; C: CCC<br>A: AAAXX; B: BBBX; C: CCC<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.substr-replace-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.substr-replace-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link str_replace()} - 子字符串替换</span></li>    <li class="member"><span class="function">{@link substr()} - 返回字符串的子串</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.types.string.php#language.types.string.substr" class="link">字符串访问与修改</a></li>   </ul>  </span> </div></div>
 * @return string|string[] The result string is returned. If string is an*/
function substr_replace(array|string $string, array|string $replace, array|int $offset, array|int|null $length = null): array|string {}

/**
*<div id="function.quotemeta" class="refentry"> <div class="refnamediv">  <h1 class="refname">quotemeta</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">quotemeta</span> &mdash; <span class="dc-title">转义元字符集</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.quotemeta-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>quotemeta</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   返回 在下面这些特殊字符前加 反斜线(<span>\</span>) 转义后的字符串。   这些特殊字符包含：   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">. \ + * ? [ ^ ] ( $ )</div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.quotemeta-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       输入字符串      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.quotemeta-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 元字符集被转义后的 字符串，如果输入字符串<span class="parameter" style="color:#3A95FF">string</span>为空，   则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.quotemeta-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">quotemeta()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">quotemeta</span><span style="color: #007700">(</span><span style="color: #DD0000">'PHP is a popular scripting language. Fast, flexible, and pragmatic.'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(69) &quot;PHP is a popular scripting language\. Fast, flexible, and pragmatic\.&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.quotemeta-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.quotemeta-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link addslashes()} - 使用反斜线引用字符串</span></li>    <li class="member"><span class="function">{@link addcslashes()} - 以 C 语言风格使用反斜线转义字符串中的字符</span></li>    <li class="member"><span class="function">{@link htmlentities()} - 将字符转换为 HTML 转义字符</span></li>    <li class="member"><span class="function">{@link htmlspecialchars()} - 将特殊字符转换为 HTML 实体</span></li>    <li class="member"><span class="function">{@link nl2br()} - 在字符串所有新行之前插入 HTML 换行标记</span></li>    <li class="member"><span class="function">{@link stripslashes()} - 反引用一个引用字符串</span></li>    <li class="member"><span class="function">{@link stripcslashes()} - 反引用一个使用 addcslashes 转义的字符串</span></li>    <li class="member"><span class="function">{@link preg_quote()} - 转义正则表达式字符</span></li>   </ul>  </span> </div></div>
 * @return string the string with meta characters quoted.*/
function quotemeta(string $string): string {}

/**
*<div id="function.ucfirst" class="refentry"> <div class="refnamediv">  <h1 class="refname">ucfirst</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ucfirst</span> &mdash; <span class="dc-title">将字符串的首字母转换为大写</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ucfirst-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>ucfirst</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   将 <span class="parameter" style="color:#3A95FF">string</span> 的首字符（如果首字符是 <span>&quot;a&quot;</span>（0x61）到   <span>&quot;z&quot;</span>（0x7a）范围内的 ASCII 字符）转换为大写字母，并返回这个字符串。  </p>  <p class="para">   注意字母的定义取决于当前区域设定。例如，在默认的 “C” 区域，字符 umlaut-a（ä）将不会被转换。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ucfirst-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       输入字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ucfirst-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回结果字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.ucfirst-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">      <tr>  <td>8.2.0</td>  <td>   大小写转换不在依赖于使用 <span class="function">{@link setlocale()}</span> 设置的区域。只会转换 ASCII 字符。  </td> </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ucfirst-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ucfirst()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$foo </span><span style="color: #007700">= </span><span style="color: #DD0000">'hello world!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$foo </span><span style="color: #007700">= </span><span style="color: #9876AA">ucfirst</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">);             </span><span style="color: #FF8000">// Hello world!<br /><br /></span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #DD0000">'HELLO WORLD!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #9876AA">ucfirst</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">);             </span><span style="color: #FF8000">// HELLO WORLD!<br /></span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #9876AA">ucfirst</span><span style="color: #007700">(</span><span style="color: #9876AA">strtolower</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">)); </span><span style="color: #FF8000">// Hello world!<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>     </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ucfirst-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link lcfirst()} - 使字符串的第一个字符小写</span></li>    <li class="member"><span class="function">{@link strtolower()} - 将字符串转化为小写</span></li>    <li class="member"><span class="function">{@link strtoupper()} - 将字符串转化为大写</span></li>    <li class="member"><span class="function">{@link ucwords()} - 将字符串中每个单词的首字母转换为大写</span></li>    <li class="member"><span class="function">{@link mb_convert_case()} - 对字符串进行大小写转换</span></li>   </ul>  </span> </div></div>
 * @return string the resulting string.*/
function ucfirst(string $string): string {}

/**
*<div id="function.lcfirst" class="refentry"> <div class="refnamediv">  <h1 class="refname">lcfirst</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">lcfirst</span> &mdash; <span class="dc-title">使字符串的第一个字符小写</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.lcfirst-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>lcfirst</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   如果第一个字符是 <span>&quot;A&quot;</span>（0x41）到 <span>&quot;Z&quot;</span>（0x5a）范围内的   ASCII 字符，则返回第一个字母是小写的 <span class="parameter" style="color:#3A95FF">string</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.lcfirst-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       输入的字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.lcfirst-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回转换后的字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.lcfirst-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">      <tr>  <td>8.2.0</td>  <td>   大小写转换不在依赖于使用 <span class="function">{@link setlocale()}</span> 设置的区域。只会转换 ASCII 字符。  </td> </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.lcfirst-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">lcfirst()</strong></span> 例子：</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$foo </span><span style="color: #007700">= </span><span style="color: #DD0000">'HelloWorld'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$foo </span><span style="color: #007700">= </span><span style="color: #9876AA">lcfirst</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">);             </span><span style="color: #FF8000">// helloWorld<br /><br /></span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #DD0000">'HELLO WORLD!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #9876AA">lcfirst</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">);             </span><span style="color: #FF8000">// hELLO WORLD!<br /></span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #9876AA">lcfirst</span><span style="color: #007700">(</span><span style="color: #9876AA">strtoupper</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">)); </span><span style="color: #FF8000">// hELLO WORLD!<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>     </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.lcfirst-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link ucfirst()} - 将字符串的首字母转换为大写</span></li>    <li class="member"><span class="function">{@link strtolower()} - 将字符串转化为小写</span></li>    <li class="member"><span class="function">{@link strtoupper()} - 将字符串转化为大写</span></li>    <li class="member"><span class="function">{@link ucwords()} - 将字符串中每个单词的首字母转换为大写</span></li>   </ul>  </span> </div></div>
 * @return string the resulting string.*/
function lcfirst(string $string): string {}

/**
*<div id="function.ucwords" class="refentry"> <div class="refnamediv">  <h1 class="refname">ucwords</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ucwords</span> &mdash; <span class="dc-title">将字符串中每个单词的首字母转换为大写</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ucwords-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>ucwords</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$separators</span><span class="initializer"> = &quot; \t\r\n\f\v&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   将 <span class="parameter" style="color:#3A95FF">string</span> 中每个单词的首字符（如果首字符是介于 <span>&quot;a&quot;</span>（0x61）和   <span>&quot;z&quot;</span>（0x7a）之间的 ASCII 字符）转换为大写字母，并返回这个字符串。  </p>  <p class="para">   对于此函数，单词是未在 <span class="parameter" style="color:#3A95FF">separators</span>   参数列出的字符串。默认情况下，它们是：空格、水平制表符、回车、换行符、换页以及垂直制表符。  </p>  <p class="para">   要对多字节进行类似的转换，请使用带 <strong><span>MB_CASE_TITLE</span></strong> 模式的 <span class="function">{@link mb_convert_case()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ucwords-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       输入字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">separators</span></dt>     <dd>      <p class="para">       可选的 <span class="parameter" style="color:#3A95FF">separators</span>，包含了单词分割符。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ucwords-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回转换后的字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.ucwords-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">      <tr>  <td>8.2.0</td>  <td>   大小写转换不在依赖于使用 <span class="function">{@link setlocale()}</span> 设置的区域。只会转换 ASCII 字符。  </td> </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ucwords-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ucwords()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$foo </span><span style="color: #007700">= </span><span style="color: #DD0000">'hello world!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$foo </span><span style="color: #007700">= </span><span style="color: #9876AA">ucwords</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">);             </span><span style="color: #FF8000">// Hello World!<br /><br /></span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #DD0000">'HELLO WORLD!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #9876AA">ucwords</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">);             </span><span style="color: #FF8000">// HELLO WORLD!<br /></span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #9876AA">ucwords</span><span style="color: #007700">(</span><span style="color: #9876AA">strtolower</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">)); </span><span style="color: #FF8000">// Hello World!<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>    <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">ucwords()</strong></span> 自定义分隔符的例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$foo </span><span style="color: #007700">= </span><span style="color: #DD0000">'hello|world!'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #9876AA">ucwords</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">);             </span><span style="color: #FF8000">// Hello|world!<br /><br /></span><span style="color: #9876AA">$baz </span><span style="color: #007700">= </span><span style="color: #9876AA">ucwords</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">, </span><span style="color: #DD0000">"|"</span><span style="color: #007700">);        </span><span style="color: #FF8000">// Hello|World!<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3 带附加分隔符的 <span class="function"><strong style="color:#CC7832">ucwords()</strong></span> 示例</strong></p>    <div class="example-contents">     <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$foo </span><span style="color: #007700">= </span><span style="color: #DD0000">"mike o'hara"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #9876AA">ucwords</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">);                 </span><span style="color: #FF8000">// Mike O'hara<br /><br /></span><span style="color: #9876AA">$baz </span><span style="color: #007700">= </span><span style="color: #9876AA">ucwords</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">, </span><span style="color: #DD0000">" \t\r\n\f\v'"</span><span style="color: #007700">); </span><span style="color: #FF8000">// Mike O'Hara<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.ucwords-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ucwords-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link strtoupper()} - 将字符串转化为大写</span></li>    <li class="member"><span class="function">{@link strtolower()} - 将字符串转化为小写</span></li>    <li class="member"><span class="function">{@link ucfirst()} - 将字符串的首字母转换为大写</span></li>    <li class="member"><span class="function">{@link mb_convert_case()} - 对字符串进行大小写转换</span></li>   </ul>  </span> </div></div>
 * @return string the modified string.*/
function ucwords(string $string, string $separators = " \t\r\n\f\v"): string {}

/**
*<div id="function.strtr" class="refentry"> <div class="refnamediv">  <h1 class="refname">strtr</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">strtr</span> &mdash; <span class="dc-title">转换字符或替换字串</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strtr-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>strtr</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$from</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$to</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="simpara">替代签名（不支持命名参数）：</p>  <div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><strong>strtr</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$replace_pairs</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   如果指定三个参数，则该函数返回 <span class="parameter" style="color:#3A95FF">string</span> 的副本，<span class="parameter" style="color:#3A95FF">from</span>   中所有出现的每个（单字节）字符都已转换为 <span class="parameter" style="color:#3A95FF">to</span> 中的相应字符。例如，每次出现的   <span>$from[$n]</span> 都会替换为 <span>$to[$n]</span>，<span>$n</span>   是两个参数中的有效位移(offset)。  </p>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">from</span> 与 <span class="parameter" style="color:#3A95FF">to</span>   长度不相等，那么忽略两者中较长的多余字符。<span class="parameter" style="color:#3A95FF">string</span> 的长度将与返回的长度一样。  </p>  <p class="para">   如果指定两个参数，则第二个参数应该是 <span>array(&#039;from&#039; =&gt; &#039;to&#039;, ...)</span> 形式的 <span class="type" style="color:#EAB766">array</span>。返回值是   <span class="type" style="color:#EAB766">string</span>，数组中所有所有出现的键都替换为相应的值。首先会尝试最长的键。一旦子字符串被替换，则新值将不会再次搜索。  </p>  <p class="para">   在这种情况下，键和值可以是任意长度，前提是没有空值的键；另外，返回值的长度可以跟 <span class="parameter" style="color:#3A95FF">string</span>   的长度不同。但是，当所有键的长度相同时，函数最有效。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strtr-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       待转换的 <span class="type" style="color:#EAB766">string</span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">from</span></dt>     <dd>      <p class="para">       要转成 <span class="parameter" style="color:#3A95FF">to</span> 的 <span class="type" style="color:#EAB766">string</span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">to</span></dt>     <dd>      <p class="para">       替换 <span class="parameter" style="color:#3A95FF">from</span> 的 <span class="type" style="color:#EAB766">string</span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">replace_pairs</span></dt>     <dd>      <p class="para">       参数 <span class="parameter" style="color:#3A95FF">replace_pairs</span> 可以用来取代 <span class="parameter" style="color:#3A95FF">to</span> 和 <span class="parameter" style="color:#3A95FF">from</span>       ，因为它是 <span>array(&#039;from&#039; =&gt; &#039;to&#039;, ...)</span> 形式的 <span class="type" style="color:#EAB766">array</span>。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">replace_pairs</span> 包含空       <span class="type" style="color:#EAB766">string</span>（<span>&quot;&quot;</span>）键，将忽略该元素；自 PHP 8.0.0       起，这种情况会引发 <strong><span>E_WARNING</span></strong>。      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strtr-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回转换后的 <span class="type" style="color:#EAB766">string</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strtr-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">strtr()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 在这种形式中，strtr() 进行逐字节转换<br />// 因此，假设这里是单字节编码：<br /></span><span style="color: #9876AA">$addr </span><span style="color: #007700">= </span><span style="color: #9876AA">strtr</span><span style="color: #007700">(</span><span style="color: #9876AA">$addr</span><span style="color: #007700">, </span><span style="color: #DD0000">"äåö"</span><span style="color: #007700">, </span><span style="color: #DD0000">"aao"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>  <p class="para">   下面的示例展示了仅使用两个参数调用 <span class="function"><strong style="color:#CC7832">strtr()</strong></span> 的行为。注意优先替换（没有选择   <span>&quot;h&quot;</span>，因为有更长的匹配项）以及不再搜索已替换的文本。  </p>  <div class="example" id="">   <p><strong>示例 #2 使用两个参数的 <span class="function"><strong style="color:#CC7832">strtr()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$trans </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"h" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"-"</span><span style="color: #007700">, </span><span style="color: #DD0000">"hello" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"hi"</span><span style="color: #007700">, </span><span style="color: #DD0000">"hi" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"hello"</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">strtr</span><span style="color: #007700">(</span><span style="color: #DD0000">"hi all, I said hello"</span><span style="color: #007700">, </span><span style="color: #9876AA">$trans</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>hello all, I said hi<br></span></div>    </div>  </div>  <p class="para">   两种行为的模式本质上是不同的。使用三个参数，<span class="function"><strong style="color:#CC7832">strtr()</strong></span>   将按字节替换；使用两个参数，优先替换更长的子字符串，  </p>  <div class="example" id="">   <p><strong>示例 #3 <span class="function"><strong style="color:#CC7832">strtr()</strong></span> 行为比较</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">strtr</span><span style="color: #007700">(</span><span style="color: #DD0000">"baab"</span><span style="color: #007700">, </span><span style="color: #DD0000">"ab"</span><span style="color: #007700">, </span><span style="color: #DD0000">"01"</span><span style="color: #007700">),</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$trans </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"ab" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"01"</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">strtr</span><span style="color: #007700">(</span><span style="color: #DD0000">"baab"</span><span style="color: #007700">, </span><span style="color: #9876AA">$trans</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>1001<br>ba01<br></span></div>    </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strtr-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link str_replace()} - 子字符串替换</span></li>    <li class="member"><span class="function">{@link preg_replace()} - 执行一个正则表达式的搜索和替换</span></li>   </ul>  </span> </div></div>
 * @return string This function returns a copy of str,*/
function strtr(string $string, string $from, string $to): string {}

/**
*<div id="function.strtr" class="refentry"> <div class="refnamediv">  <h1 class="refname">strtr</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">strtr</span> &mdash; <span class="dc-title">转换字符或替换字串</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strtr-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>strtr</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$from</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$to</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="simpara">替代签名（不支持命名参数）：</p>  <div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><strong>strtr</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$replace_pairs</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   如果指定三个参数，则该函数返回 <span class="parameter" style="color:#3A95FF">string</span> 的副本，<span class="parameter" style="color:#3A95FF">from</span>   中所有出现的每个（单字节）字符都已转换为 <span class="parameter" style="color:#3A95FF">to</span> 中的相应字符。例如，每次出现的   <span>$from[$n]</span> 都会替换为 <span>$to[$n]</span>，<span>$n</span>   是两个参数中的有效位移(offset)。  </p>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">from</span> 与 <span class="parameter" style="color:#3A95FF">to</span>   长度不相等，那么忽略两者中较长的多余字符。<span class="parameter" style="color:#3A95FF">string</span> 的长度将与返回的长度一样。  </p>  <p class="para">   如果指定两个参数，则第二个参数应该是 <span>array(&#039;from&#039; =&gt; &#039;to&#039;, ...)</span> 形式的 <span class="type" style="color:#EAB766">array</span>。返回值是   <span class="type" style="color:#EAB766">string</span>，数组中所有所有出现的键都替换为相应的值。首先会尝试最长的键。一旦子字符串被替换，则新值将不会再次搜索。  </p>  <p class="para">   在这种情况下，键和值可以是任意长度，前提是没有空值的键；另外，返回值的长度可以跟 <span class="parameter" style="color:#3A95FF">string</span>   的长度不同。但是，当所有键的长度相同时，函数最有效。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strtr-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       待转换的 <span class="type" style="color:#EAB766">string</span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">from</span></dt>     <dd>      <p class="para">       要转成 <span class="parameter" style="color:#3A95FF">to</span> 的 <span class="type" style="color:#EAB766">string</span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">to</span></dt>     <dd>      <p class="para">       替换 <span class="parameter" style="color:#3A95FF">from</span> 的 <span class="type" style="color:#EAB766">string</span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">replace_pairs</span></dt>     <dd>      <p class="para">       参数 <span class="parameter" style="color:#3A95FF">replace_pairs</span> 可以用来取代 <span class="parameter" style="color:#3A95FF">to</span> 和 <span class="parameter" style="color:#3A95FF">from</span>       ，因为它是 <span>array(&#039;from&#039; =&gt; &#039;to&#039;, ...)</span> 形式的 <span class="type" style="color:#EAB766">array</span>。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">replace_pairs</span> 包含空       <span class="type" style="color:#EAB766">string</span>（<span>&quot;&quot;</span>）键，将忽略该元素；自 PHP 8.0.0       起，这种情况会引发 <strong><span>E_WARNING</span></strong>。      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strtr-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回转换后的 <span class="type" style="color:#EAB766">string</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strtr-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">strtr()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 在这种形式中，strtr() 进行逐字节转换<br />// 因此，假设这里是单字节编码：<br /></span><span style="color: #9876AA">$addr </span><span style="color: #007700">= </span><span style="color: #9876AA">strtr</span><span style="color: #007700">(</span><span style="color: #9876AA">$addr</span><span style="color: #007700">, </span><span style="color: #DD0000">"äåö"</span><span style="color: #007700">, </span><span style="color: #DD0000">"aao"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>  <p class="para">   下面的示例展示了仅使用两个参数调用 <span class="function"><strong style="color:#CC7832">strtr()</strong></span> 的行为。注意优先替换（没有选择   <span>&quot;h&quot;</span>，因为有更长的匹配项）以及不再搜索已替换的文本。  </p>  <div class="example" id="">   <p><strong>示例 #2 使用两个参数的 <span class="function"><strong style="color:#CC7832">strtr()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$trans </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"h" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"-"</span><span style="color: #007700">, </span><span style="color: #DD0000">"hello" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"hi"</span><span style="color: #007700">, </span><span style="color: #DD0000">"hi" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"hello"</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">strtr</span><span style="color: #007700">(</span><span style="color: #DD0000">"hi all, I said hello"</span><span style="color: #007700">, </span><span style="color: #9876AA">$trans</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>hello all, I said hi<br></span></div>    </div>  </div>  <p class="para">   两种行为的模式本质上是不同的。使用三个参数，<span class="function"><strong style="color:#CC7832">strtr()</strong></span>   将按字节替换；使用两个参数，优先替换更长的子字符串，  </p>  <div class="example" id="">   <p><strong>示例 #3 <span class="function"><strong style="color:#CC7832">strtr()</strong></span> 行为比较</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">strtr</span><span style="color: #007700">(</span><span style="color: #DD0000">"baab"</span><span style="color: #007700">, </span><span style="color: #DD0000">"ab"</span><span style="color: #007700">, </span><span style="color: #DD0000">"01"</span><span style="color: #007700">),</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$trans </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"ab" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"01"</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">strtr</span><span style="color: #007700">(</span><span style="color: #DD0000">"baab"</span><span style="color: #007700">, </span><span style="color: #9876AA">$trans</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>1001<br>ba01<br></span></div>    </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strtr-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link str_replace()} - 子字符串替换</span></li>    <li class="member"><span class="function">{@link preg_replace()} - 执行一个正则表达式的搜索和替换</span></li>   </ul>  </span> </div></div>
 * @return string A copy of str, translating all occurrences of each character in from to the corresponding character in to.*/
function strtr(string $str, array $replace_pairs): string {}

/**
*<div id="function.addslashes" class="refentry"> <div class="refnamediv">  <h1 class="refname">addslashes</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">addslashes</span> &mdash; <span class="dc-title">使用反斜线引用字符串</span></p> </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.addslashes-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>addslashes</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   返回需要在转义字符之前添加反斜线的字符串。这些字符是：   <ul class="simplelist">    <li class="member">单引号（<span>&#039;</span>）</li>    <li class="member">双引号（<span>&quot;</span>）</li>    <li class="member">反斜线（<span>\</span>）</li>    <li class="member">NUL（NUL 字节）</li>   </ul>  </p>  <p class="para">   <span class="function"><strong style="color:#CC7832">addslashes()</strong></span> 的一个用法就是转义由 PHP 执行字符串中的上述字符：   <div class="informalexample">    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$str </span><span style="color: #007700">= </span><span style="color: #DD0000">"O'Reilly?"</span><span style="color: #007700">;<br />eval(</span><span style="color: #DD0000">"echo '" </span><span style="color: #007700">. </span><span style="color: #9876AA">addslashes</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">) . </span><span style="color: #DD0000">"';"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p>  <p class="para">   有时会错误的使用 <span class="function"><strong style="color:#CC7832">addslashes()</strong></span> 来防止 <a href="https://www.php.net/manual/zh/security.database.sql-injection.php" class="link">SQL 注入</a>。相反，应该使用数据库特定函数和/或预处理语句。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.addslashes-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       要转义的字符。      </p>     </dd>       </dl>  </span> </div>    <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.addslashes-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回转义后的字符。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.addslashes-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 一个 <span class="function"><strong style="color:#CC7832">addslashes()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$str </span><span style="color: #007700">= </span><span style="color: #DD0000">"Is your name O'Reilly?"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 输出： Is your name O\'Reilly?<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">addslashes</span><span style="color: #007700">(</span><span style="color: #9876AA">$str</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.addslashes-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link stripcslashes()} - 反引用一个使用 addcslashes 转义的字符串</span></li>    <li class="member"><span class="function">{@link stripslashes()} - 反引用一个引用字符串</span></li>    <li class="member"><span class="function">{@link addcslashes()} - 以 C 语言风格使用反斜线转义字符串中的字符</span></li>    <li class="member"><span class="function">{@link htmlspecialchars()} - 将特殊字符转换为 HTML 实体</span></li>    <li class="member"><span class="function">{@link quotemeta()} - 转义元字符集</span></li>    <li class="member"><span class="function">{@link get_magic_quotes_gpc()} - 获取当前 magic_quotes_gpc 的配置选项设置</span></li>   </ul>  </span> </div> </div>
 * @return string the escaped string.*/
function addslashes(string $string): string {}

/**
*<div id="function.addcslashes" class="refentry"> <div class="refnamediv">  <h1 class="refname">addcslashes</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">addcslashes</span> &mdash; <span class="dc-title">以 C 语言风格使用反斜线转义字符串中的字符</span></p> </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.addcslashes-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>addcslashes</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$characters</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   返回字符串，该字符串在属于参数 <span class="parameter" style="color:#3A95FF">characters</span>   列表中的字符前都加上了反斜线。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.addcslashes-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       要转义的字符。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">characters</span></dt>     <dd>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">characters</span> 中包含有 <span>\n</span>，<span>\r</span>       等字符，将以 C 语言风格转换，而其它非字母数字且 ASCII 码低于 32 以及高于 126        的字符均转换成使用八进制表示。      </p>      <p class="para">       当定义 <span class="parameter" style="color:#3A95FF">characters</span> 参数中的字符序列时，需要确保知道设置为开始及结束范围之内的字符都是什么。       <div class="informalexample">        <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">addcslashes</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo[ ]'</span><span style="color: #007700">, </span><span style="color: #DD0000">'A..z'</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// 输出：\f\o\o\[ \]<br />// 所有大小写字母均被转义<br />// ... 但 [\]^_` 以及分隔符、换行符、回车符等也一并被转义了。<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>        </div>       </div>       另外，如果设置范围中的结束字符 ASCII        码高于开始字符，则不会创建范围，只是将开始字符、结束字符以及其间的字符逐个转义。可使用       <span class="function">{@link ord()}</span> 函数获取字符的 ASCII 码值。       <div class="informalexample">        <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">addcslashes</span><span style="color: #007700">(</span><span style="color: #DD0000">"zoo['.']"</span><span style="color: #007700">, </span><span style="color: #DD0000">'z..A'</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// 输出：\zoo['\.']<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>        </div>       </div>      </p>      <p class="para">       当选择对字符 0，a，b，f，n，r，t 和 v 进行转义时需要小心。它们将被转换成       \0，\a，\b，\f，\n，\r，\t 和 \v，这些在 C 中都是预定义的转义序列。其中一些序列也在其它       C 派生语言（包含 PHP）中定义，这意味着如果使用 <span class="function"><strong style="color:#CC7832">addcslashes()</strong></span>       和 <span class="parameter" style="color:#3A95FF">characters</span> 中定义的字符输出生成语言的代码，将不会得到预期的结果。      </p>     </dd>       </dl>  </span> </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.addcslashes-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回转义后的字符。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.addcslashes-examples">  <h3 class="title">示例</h3>  <span>    <span class="parameter" style="color:#3A95FF">characters</span> 参数，如“\0..\37”，将转义所有   ASCII 码介于 0 和 31 之间的字符。   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">addcslashes()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$escaped </span><span style="color: #007700">= </span><span style="color: #9876AA">addcslashes</span><span style="color: #007700">(</span><span style="color: #9876AA">$not_escaped</span><span style="color: #007700">, </span><span style="color: #DD0000">"\0..\37!@\177..\377"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.addcslashes-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link stripcslashes()} - 反引用一个使用 addcslashes 转义的字符串</span></li>    <li class="member"><span class="function">{@link stripslashes()} - 反引用一个引用字符串</span></li>    <li class="member"><span class="function">{@link addslashes()} - 使用反斜线引用字符串</span></li>    <li class="member"><span class="function">{@link htmlspecialchars()} - 将特殊字符转换为 HTML 实体</span></li>    <li class="member"><span class="function">{@link quotemeta()} - 转义元字符集</span></li>   </ul>  </span> </div></div>
 * @return string the escaped string.*/
function addcslashes(string $string, string $characters): string {}

/**
*<div id="function.rtrim" class="refentry"> <div class="refnamediv">  <h1 class="refname">rtrim</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">rtrim</span> &mdash; <span class="dc-title">删除字符串末端的空白字符（或者其他字符）</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.rtrim-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>rtrim</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$characters</span><span class="initializer"> = &quot; \n\r\t\v\x00&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   该函数删除 <span class="parameter" style="color:#3A95FF">string</span> 末端的空白字符（或者其他字符）并返回。  </p>  <p class="para">   不使用第二个参数，<span class="function"><strong style="color:#CC7832">rtrim()</strong></span> 仅删除以下字符：      <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      &quot; &quot; (<abbr title="American Standard Code for Information Interchange">ASCII</abbr> <span>32</span>      (<span>0x20</span>))，普通空白符。     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\t&quot; (<abbr title="American Standard Code for Information Interchange">ASCII</abbr> <span>9</span>      (<span>0x09</span>))，制表符。     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\n&quot; (<abbr title="American Standard Code for Information Interchange">ASCII</abbr> <span>10</span>      (<span>0x0A</span>))，换行符。     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\r&quot; (<abbr title="American Standard Code for Information Interchange">ASCII</abbr> <span>13</span>      (<span>0x0D</span>))，回车符。     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\0&quot; (<abbr title="American Standard Code for Information Interchange">ASCII</abbr> <span>0</span>      (<span>0x00</span>))，<span>NUL</span> 空字节符。     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\v&quot; (<abbr title="American Standard Code for Information Interchange">ASCII</abbr> <span>11</span>      (<span>0x0B</span>))，垂直制表符。     </span>    </li>   </ul>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.rtrim-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       输入字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">characters</span></dt>     <dd>      <p class="para">       通过指定 <span class="parameter" style="color:#3A95FF">characters</span>，可以指定想要删除的字符列表。简单地列出你想要删除的全部字符。使用 <span>..</span> 格式，可以指定一个范围。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.rtrim-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回改变后的字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.rtrim-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">rtrim()</strong></span> 使用示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$text </span><span style="color: #007700">= </span><span style="color: #DD0000">"\t\tThese are a few words :) ...  "</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$binary </span><span style="color: #007700">= </span><span style="color: #DD0000">"\x09Example string\x0A"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$hello  </span><span style="color: #007700">= </span><span style="color: #DD0000">"Hello World"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">, </span><span style="color: #9876AA">$binary</span><span style="color: #007700">, </span><span style="color: #9876AA">$hello</span><span style="color: #007700">);<br /><br />print </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$trimmed </span><span style="color: #007700">= </span><span style="color: #9876AA">rtrim</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$trimmed</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$trimmed </span><span style="color: #007700">= </span><span style="color: #9876AA">rtrim</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">, </span><span style="color: #DD0000">" \t."</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$trimmed</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$trimmed </span><span style="color: #007700">= </span><span style="color: #9876AA">rtrim</span><span style="color: #007700">(</span><span style="color: #9876AA">$hello</span><span style="color: #007700">, </span><span style="color: #DD0000">"Hdle"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$trimmed</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 删除 $binary 末端的 ASCII 码控制字符<br />// (包括 0 - 31)<br /></span><span style="color: #9876AA">$clean </span><span style="color: #007700">= </span><span style="color: #9876AA">rtrim</span><span style="color: #007700">(</span><span style="color: #9876AA">$binary</span><span style="color: #007700">, </span><span style="color: #DD0000">"\x00..\x1F"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$clean</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(32) &quot;        These are a few words :) ...  &quot;<br>string(16) &quot;    Example string<br>&quot;<br>string(11) &quot;Hello World&quot;<br><br>string(30) &quot;        These are a few words :) ...&quot;<br>string(26) &quot;        These are a few words :)&quot;<br>string(9) &quot;Hello Wor&quot;<br>string(15) &quot;    Example string&quot;<br></span></div>    </div>   </div>     </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.rtrim-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link trim()} - 去除字符串首尾处的空白字符（或者其他字符）</span></li>    <li class="member"><span class="function">{@link ltrim()} - 删除字符串开头的空白字符（或其他字符）</span></li>   </ul>  </span> </div></div>
 * @return string the modified string.*/
function rtrim(string $string, string $characters = " \n\r\t\v\0"): string {}

/**
*<div id="function.str-replace" class="refentry"> <div class="refnamediv">  <h1 class="refname">str_replace</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">str_replace</span> &mdash; <span class="dc-title">子字符串替换</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.str-replace-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>str_replace</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$search</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$replace</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">array</span></span> <span class="parameter" style="color:#3A95FF">$subject</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">&$count</span><span class="initializer"> = <strong><span>null</span></strong></span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">array</span></span></div>  <p class="para rdfs-comment">   该函数返回字符串或者数组。该字符串或数组是将 <span class="parameter" style="color:#3A95FF">subject</span> 中全部的 <span class="parameter" style="color:#3A95FF">search</span> 都被 <span class="parameter" style="color:#3A95FF">replace</span> 替换之后的结果。  </p>  <p class="para">   要根据模式而不是固定字符串替换文本，使用 <span class="function">{@link preg_replace()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.str-replace-parameters">  <h3 class="title">参数</h3>  <span>   如果 <span class="parameter" style="color:#3A95FF">search</span> 和 <span class="parameter" style="color:#3A95FF">replace</span> 为数组，那么 <span class="function"><strong style="color:#CC7832">str_replace()</strong></span> 将对 <span class="parameter" style="color:#3A95FF">subject</span> 做二者的映射替换。如果 <span class="parameter" style="color:#3A95FF">replace</span> 的值的个数少于 <span class="parameter" style="color:#3A95FF">search</span> 的个数，多余的替换将使用空字符串来进行。如果 <span class="parameter" style="color:#3A95FF">search</span> 是一个数组而 <span class="parameter" style="color:#3A95FF">replace</span> 是一个字符串，那么 <span class="parameter" style="color:#3A95FF">search</span> 中每个元素的替换将始终使用这个字符串。该转换不会改变大小写。  </span>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">search</span> 和 <span class="parameter" style="color:#3A95FF">replace</span> 都是数组，它们的值将会被依次处理。  </p>  <p class="para">   <dl>         <dt><span class="parameter" style="color:#3A95FF">search</span></dt>     <dd>      <p class="para">       查找的目标值，也就是 <em>needle</em>。一个数组可以指定多个目标。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">replace</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">search</span> 的替换值。一个数组可以被用来指定多重替换。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">subject</span></dt>     <dd>      <p class="para">       执行替换的数组或者字符串。也就是 <em>haystack</em>。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">subject</span> 是一个数组，替换操作将遍历整个 <span class="parameter" style="color:#3A95FF">subject</span>，返回值也将是一个数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">count</span></dt>     <dd>      <p class="para">        如果被指定，它的值将被设置为替换发生的次数。      </p>     </dd>       </dl>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.str-replace-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   该函数返回替换后的数组或者字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.str-replace-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">str_replace()</strong></span> 基本示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 赋值: &lt;body text='black'&gt;<br /></span><span style="color: #9876AA">$bodytag </span><span style="color: #007700">= </span><span style="color: #9876AA">str_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">"%body%"</span><span style="color: #007700">, </span><span style="color: #DD0000">"black"</span><span style="color: #007700">, </span><span style="color: #DD0000">"&lt;body text='%body%'&gt;"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 赋值: Hll Wrld f PHP<br /></span><span style="color: #9876AA">$vowels </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a"</span><span style="color: #007700">, </span><span style="color: #DD0000">"e"</span><span style="color: #007700">, </span><span style="color: #DD0000">"i"</span><span style="color: #007700">, </span><span style="color: #DD0000">"o"</span><span style="color: #007700">, </span><span style="color: #DD0000">"u"</span><span style="color: #007700">, </span><span style="color: #DD0000">"A"</span><span style="color: #007700">, </span><span style="color: #DD0000">"E"</span><span style="color: #007700">, </span><span style="color: #DD0000">"I"</span><span style="color: #007700">, </span><span style="color: #DD0000">"O"</span><span style="color: #007700">, </span><span style="color: #DD0000">"U"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$onlyconsonants </span><span style="color: #007700">= </span><span style="color: #9876AA">str_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$vowels</span><span style="color: #007700">, </span><span style="color: #DD0000">""</span><span style="color: #007700">, </span><span style="color: #DD0000">"Hello World of PHP"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 赋值: You should eat pizza, beer, and ice cream every day<br /></span><span style="color: #9876AA">$phrase  </span><span style="color: #007700">= </span><span style="color: #DD0000">"You should eat fruits, vegetables, and fiber every day."</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$healthy </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"fruits"</span><span style="color: #007700">, </span><span style="color: #DD0000">"vegetables"</span><span style="color: #007700">, </span><span style="color: #DD0000">"fiber"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$yummy   </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"pizza"</span><span style="color: #007700">, </span><span style="color: #DD0000">"beer"</span><span style="color: #007700">, </span><span style="color: #DD0000">"ice cream"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$newphrase </span><span style="color: #007700">= </span><span style="color: #9876AA">str_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$healthy</span><span style="color: #007700">, </span><span style="color: #9876AA">$yummy</span><span style="color: #007700">, </span><span style="color: #9876AA">$phrase</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 赋值: 2<br /></span><span style="color: #9876AA">$str </span><span style="color: #007700">= </span><span style="color: #9876AA">str_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">"ll"</span><span style="color: #007700">, </span><span style="color: #DD0000">""</span><span style="color: #007700">, </span><span style="color: #DD0000">"good golly miss molly!"</span><span style="color: #007700">, </span><span style="color: #9876AA">$count</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$count</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 可能的 <span class="function"><strong style="color:#CC7832">str_replace()</strong></span> 替换示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 替换顺序<br /></span><span style="color: #9876AA">$str     </span><span style="color: #007700">= </span><span style="color: #DD0000">"Line 1\nLine 2\rLine 3\r\nLine 4\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$order   </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"\r\n"</span><span style="color: #007700">, </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">, </span><span style="color: #DD0000">"\r"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$replace </span><span style="color: #007700">= </span><span style="color: #DD0000">'&lt;br /&gt;'</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 首先替换 \r\n 字符，因此它们不会被两次转换<br /></span><span style="color: #9876AA">$newstr </span><span style="color: #007700">= </span><span style="color: #9876AA">str_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$order</span><span style="color: #007700">, </span><span style="color: #9876AA">$replace</span><span style="color: #007700">, </span><span style="color: #9876AA">$str</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 输出 F ，因为 A 被 B 替换，B 又被 C 替换，以此类推...<br />// 由于从左到右依次替换，最终 E 被 F 替换<br /></span><span style="color: #9876AA">$search  </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'A'</span><span style="color: #007700">, </span><span style="color: #DD0000">'B'</span><span style="color: #007700">, </span><span style="color: #DD0000">'C'</span><span style="color: #007700">, </span><span style="color: #DD0000">'D'</span><span style="color: #007700">, </span><span style="color: #DD0000">'E'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$replace </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'B'</span><span style="color: #007700">, </span><span style="color: #DD0000">'C'</span><span style="color: #007700">, </span><span style="color: #DD0000">'D'</span><span style="color: #007700">, </span><span style="color: #DD0000">'E'</span><span style="color: #007700">, </span><span style="color: #DD0000">'F'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$subject </span><span style="color: #007700">= </span><span style="color: #DD0000">'A'</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">str_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$search</span><span style="color: #007700">, </span><span style="color: #9876AA">$replace</span><span style="color: #007700">, </span><span style="color: #9876AA">$subject</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 输出: apearpearle pear<br />// 由于上面提到的原因<br /></span><span style="color: #9876AA">$letters </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'a'</span><span style="color: #007700">, </span><span style="color: #DD0000">'p'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$fruit   </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">, </span><span style="color: #DD0000">'pear'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$text    </span><span style="color: #007700">= </span><span style="color: #DD0000">'a p'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$output  </span><span style="color: #007700">= </span><span style="color: #9876AA">str_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">$letters</span><span style="color: #007700">, </span><span style="color: #9876AA">$fruit</span><span style="color: #007700">, </span><span style="color: #9876AA">$text</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$output</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.str-replace-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote>  <div class="caution"><strong class="caution">警告</strong>   <h1 class="title">了解替换顺序</h1>   <p class="para">    由于 <span class="function"><strong style="color:#CC7832">str_replace()</strong></span> 的替换时从左到右依次进行的，进行多重替换的时候可能会替换掉之前插入的值。参见该文档的示例。   </p>  </div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    该函数区分大小写。使用 <span class="function">{@link str_ireplace()}</span> 可以进行不区分大小写的替换。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.str-replace-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link str_ireplace()} - str_replace 的忽略大小写版本</span></li>    <li class="member"><span class="function">{@link substr_replace()} - 替换字符串的子串</span></li>    <li class="member"><span class="function">{@link preg_replace()} - 执行一个正则表达式的搜索和替换</span></li>    <li class="member"><span class="function">{@link strtr()} - 转换字符或替换字串</span></li>   </ul>  </span> </div></div>
 * @return string|string[] This function returns a string or an array with the replaced values.*/
function str_replace(array|string $search, array|string $replace, array|string $subject, &$count): array|string {}

/**
*<div id="function.str-ireplace" class="refentry"> <div class="refnamediv">  <h1 class="refname">str_ireplace</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">str_ireplace</span> &mdash; <span class="dc-title"><span class="function">{@link str_replace()}</span> 的忽略大小写版本</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.str-ireplace-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>str_ireplace</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$search</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$replace</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">array</span></span> <span class="parameter" style="color:#3A95FF">$subject</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">&$count</span><span class="initializer"> = <strong><span>null</span></strong></span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">array</span></span></div>  <p class="para rdfs-comment">   该函数返回字符串或者数组。该字符串或数组是将 <span class="parameter" style="color:#3A95FF">subject</span> 中全部的 <span class="parameter" style="color:#3A95FF">search</span> 都被 <span class="parameter" style="color:#3A95FF">replace</span> 替换（忽略大小写）之后的结果。  </p>  <p class="para">   要根据模式而不是固定字符串替换文本，将 <span class="function">{@link preg_replace()}</span> 与 <span>i</span> <a href="https://www.php.net/manual/zh/reference.pcre.pattern.modifiers.php" class="link">模式修饰符</a>一起使用。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.str-ireplace-parameters">  <h3 class="title">参数</h3>    <span>   如果 <span class="parameter" style="color:#3A95FF">search</span> 和 <span class="parameter" style="color:#3A95FF">replace</span> 为数组，那么 <span class="function"><strong style="color:#CC7832">str_ireplace()</strong></span> 将对 <span class="parameter" style="color:#3A95FF">subject</span> 做二者的映射替换。如果 <span class="parameter" style="color:#3A95FF">replace</span> 的值的个数少于 <span class="parameter" style="color:#3A95FF">search</span> 的个数，多余的替换将使用空字符串来进行。如果 <span class="parameter" style="color:#3A95FF">search</span> 是一个数组而 <span class="parameter" style="color:#3A95FF">replace</span> 是一个字符串，那么 <span class="parameter" style="color:#3A95FF">search</span> 中每个元素的替换将始终使用这个字符串。  </span>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">search</span> 或 <span class="parameter" style="color:#3A95FF">replace</span> 是数组，他们的元素将从头到尾一个个处理。  </p>  <p class="para">   <dl>         <dt><span class="parameter" style="color:#3A95FF">search</span></dt>     <dd>       <p class="para">        要搜索的值，就像是 <em>needle</em>。可以使用 array 来提供多个 needle。       </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">replace</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">search</span> 的替换值。一个数组可以被用来指定多重替换。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">subject</span></dt>     <dd>      <p class="para">       要被搜索和替换的字符串或数组，就像是      <em>haystack</em>。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">subject</span> 是一个数组，替换操作将遍历整个 <span class="parameter" style="color:#3A95FF">subject</span>，并且也将返回一个数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">count</span></dt>     <dd>      <p class="para">      如果被指定，它的值将被设置为替换发生的次数。      </p>     </dd>       </dl>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.str-ireplace-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回替换后的字符串或者数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.str-ireplace-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">      <tr>  <td>8.2.0</td>  <td>   大小写转换不在依赖于使用 <span class="function">{@link setlocale()}</span> 设置的区域。只会进行 ASCII   大小写转换。非 ASCII 字节值将通过它们的字节值进行比较。  </td> </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.str-ireplace-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">str_ireplace()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$bodytag </span><span style="color: #007700">= </span><span style="color: #9876AA">str_ireplace</span><span style="color: #007700">(</span><span style="color: #DD0000">"%body%"</span><span style="color: #007700">, </span><span style="color: #DD0000">"black"</span><span style="color: #007700">, </span><span style="color: #DD0000">"&lt;body text=%BODY%&gt;"</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$bodytag</span><span style="color: #007700">; </span><span style="color: #FF8000">// &lt;body text=black&gt;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.str-ireplace-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote>  <div class="caution"><strong class="caution">警告</strong>   <h1 class="title">替换顺序陷阱</h1>   <p class="para">    因为 <span class="function"><strong style="color:#CC7832">str_ireplace()</strong></span> 是从左到右替换，当进行多个替换时，可能会替换先前插入的值。<span class="function">{@link str_replace()}</span>    文档中的示例 #2 展示了在实践中受到的影响。   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.str-ireplace-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link str_replace()} - 子字符串替换</span></li>    <li class="member"><span class="function">{@link preg_replace()} - 执行一个正则表达式的搜索和替换</span></li>    <li class="member"><span class="function">{@link strtr()} - 转换字符或替换字串</span></li>   </ul>  </span> </div></div>
 * @return string|string[] a string or an array of replacements.*/
function str_ireplace(array|string $search, array|string $replace, array|string $subject, &$count): array|string {}

/**
*<div id="function.str-repeat" class="refentry"> <div class="refnamediv">  <h1 class="refname">str_repeat</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">str_repeat</span> &mdash; <span class="dc-title">重复一个字符串</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.str-repeat-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>str_repeat</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$times</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   返回 <span class="parameter" style="color:#3A95FF">string</span> 重复   <span class="parameter" style="color:#3A95FF">times</span> 次后的结果。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.str-repeat-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       待操作的字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">times</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">string</span> 被重复的次数。      </p>      <p class="para">       <span class="parameter" style="color:#3A95FF">times</span> 必须大于等于 0。如果 <span class="parameter" style="color:#3A95FF">times</span> 被设置为 0，函数返回空字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.str-repeat-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回重复后的字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.str-repeat-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">str_repeat()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">str_repeat</span><span style="color: #007700">(</span><span style="color: #DD0000">"-="</span><span style="color: #007700">, </span><span style="color: #9876AA">10</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>-=-=-=-=-=-=-=-=-=-=<br></span></div>    </div>   </div>     </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.str-repeat-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/control-structures.for.php" class="link">for</a></li>    <li class="member"><span class="function">{@link str_pad()} - 使用另一个字符串填充字符串为指定长度</span></li>    <li class="member"><span class="function">{@link substr_count()} - 计算字串出现的次数</span></li>   </ul>  </span> </div></div>
 * @return string the repeated string.*/
function str_repeat(string $string, int $times): string {}

/**
*<div id="function.count-chars" class="refentry"> <div class="refnamediv">  <h1 class="refname">count_chars</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">count_chars</span> &mdash; <span class="dc-title">返回字符串所用字符的信息</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.count-chars-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>count_chars</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">string</span></span></div>  <p class="para rdfs-comment">   统计 <span class="parameter" style="color:#3A95FF">string</span>   中每个字节值（0..255）出现的次数，使用多种模式返回结果。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.count-chars-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       需要统计的字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">mode</span></dt>     <dd>      <p class="para">       参见返回的值。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.count-chars-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   根据不同的   <span class="parameter" style="color:#3A95FF">mode</span>，<span class="function"><strong style="color:#CC7832">count_chars()</strong></span>   返回下列不同的结果：   <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      0 - 以所有的每个字节值作为键名，出现次数作为值的数组。     </span>    </li>    <li class="listitem">     <span class="simpara">      1 - 与 0 相同，但只列出出现次数大于零的字节值。     </span>    </li>    <li class="listitem">     <span class="simpara">      2 - 与 0 相同，但只列出出现次数等于零的字节值。     </span>    </li>    <li class="listitem">     <span class="simpara">      3 - 返回由所有使用了的字节值组成的字符串。     </span>    </li>    <li class="listitem">     <span class="simpara">     4 - 返回由所有未使用的字节值组成的字符串。     </span>    </li>   </ul>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.count-chars-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       在此版本之前，函数在失败时返回 <strong><span>false</span></strong>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.count-chars-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">count_chars()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$data </span><span style="color: #007700">= </span><span style="color: #DD0000">"Two Ts and one F."</span><span style="color: #007700">;<br /><br />foreach (</span><span style="color: #9876AA">count_chars</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">) as </span><span style="color: #9876AA">$i </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$val</span><span style="color: #007700">) {<br />   echo </span><span style="color: #DD0000">"There were </span><span style="color: #9876AA">$val</span><span style="color: #DD0000"> instance(s) of \"" </span><span style="color: #007700">, </span><span style="color: #9876AA">chr</span><span style="color: #007700">(</span><span style="color: #9876AA">$i</span><span style="color: #007700">) , </span><span style="color: #DD0000">"\" in the string.\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>There were 4 instance(s) of &quot; &quot; in the string.<br>There were 1 instance(s) of &quot;.&quot; in the string.<br>There were 1 instance(s) of &quot;F&quot; in the string.<br>There were 2 instance(s) of &quot;T&quot; in the string.<br>There were 1 instance(s) of &quot;a&quot; in the string.<br>There were 1 instance(s) of &quot;d&quot; in the string.<br>There were 1 instance(s) of &quot;e&quot; in the string.<br>There were 2 instance(s) of &quot;n&quot; in the string.<br>There were 2 instance(s) of &quot;o&quot; in the string.<br>There were 1 instance(s) of &quot;s&quot; in the string.<br>There were 1 instance(s) of &quot;w&quot; in the string.<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.count-chars-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link strpos()} - 查找字符串首次出现的位置</span></li>    <li class="member"><span class="function">{@link substr_count()} - 计算字串出现的次数</span></li>   </ul>  </span> </div></div>
 * @return int[]|string Depending on mode*/
function count_chars(string $string, int $mode = 0): array|string {}

/**
*<div id="function.chunk-split" class="refentry"> <div class="refnamediv">  <h1 class="refname">chunk_split</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">chunk_split</span> &mdash; <span class="dc-title">将字符串分割成小块</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.chunk-split-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>chunk_split</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$length</span><span class="initializer"> = 76</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$separator</span><span class="initializer"> = &quot;\r\n&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   使用此函数将字符串分割成小块非常有用。例如将   <span class="function">{@link base64_encode()}</span> 的输出转换成符合 RFC 2045 语义的字符串。它会在每   <span class="parameter" style="color:#3A95FF">length</span> 个字符后边插入   <span class="parameter" style="color:#3A95FF">separator</span>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.chunk-split-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       要分割的字符。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">length</span></dt>     <dd>      <p class="para">       分割的尺寸。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">separator</span></dt>     <dd>      <p class="para">       行尾序列符号。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.chunk-split-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回分割后的字符。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.chunk-split-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">chunk_split()</strong></span>  例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 使用 RFC 2045 语义格式化 $data<br /></span><span style="color: #9876AA">$new_string </span><span style="color: #007700">= </span><span style="color: #9876AA">chunk_split</span><span style="color: #007700">(</span><span style="color: #9876AA">base64_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.chunk-split-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link str_split()} - 将字符串转换为数组</span></li>    <li class="member"><span class="function">{@link explode()} - 使用一个字符串分割另一个字符串</span></li>    <li class="member"><span class="function">{@link wordwrap()} - 打断字符串为指定数量的字串</span></li>    <li class="member"><a href="http://www.faqs.org/rfcs/rfc2045" class="link external">&raquo;&nbsp;RFC 2045</a></li>   </ul>  </span> </div></div>
 * @return string the chunked string.*/
function chunk_split(string $string, int $length = 76, string $separator = "\r\n"): string {}

/**
*<div id="function.trim" class="refentry"> <div class="refnamediv">  <h1 class="refname">trim</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">trim</span> &mdash; <span class="dc-title">去除字符串首尾处的空白字符（或者其他字符）</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.trim-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>trim</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$characters</span><span class="initializer"> = &quot; \n\r\t\v\x00&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   此函数返回字符串 <span class="parameter" style="color:#3A95FF">string</span> 去除首尾空白字符后的结果。如果不指定第二个参数，<span class="function"><strong style="color:#CC7832">trim()</strong></span> 将去除这些字符：      <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      &quot; &quot; (<abbr title="American Standard Code for Information Interchange">ASCII</abbr> <span>32</span>       (<span>0x20</span>))，普通空格符。     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\t&quot; (<abbr title="American Standard Code for Information Interchange">ASCII</abbr> <span>9</span>       (<span>0x09</span>))，制表符。     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\n&quot; (<abbr title="American Standard Code for Information Interchange">ASCII</abbr> <span>10</span>       (<span>0x0A</span>))，换行符。     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\r&quot; (<abbr title="American Standard Code for Information Interchange">ASCII</abbr> <span>13</span>       (<span>0x0D</span>))，回车符。     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\0&quot; (<abbr title="American Standard Code for Information Interchange">ASCII</abbr> <span>0</span>       (<span>0x00</span>))，空字节符。     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\v&quot; (<abbr title="American Standard Code for Information Interchange">ASCII</abbr> <span>11</span>       (<span>0x0B</span>))，垂直制表符。     </span>    </li>   </ul>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.trim-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       待处理的<span class="type" style="color:#EAB766"><span class="type 字符串" style="color:#EAB766">字符串</span></span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">characters</span></dt>     <dd>      <p class="para">      可选参数，过滤字符也可由 <span class="parameter" style="color:#3A95FF">characters</span> 参数指定。一般要列出所有希望过滤的字符，也可以使用 “<span>..</span>” 列出一个字符范围。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.trim-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   过滤后的字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.trim-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">trim()</strong></span> 使用示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$text   </span><span style="color: #007700">= </span><span style="color: #DD0000">"\t\tThese are a few words :) ...  "</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$binary </span><span style="color: #007700">= </span><span style="color: #DD0000">"\x09Example string\x0A"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$hello  </span><span style="color: #007700">= </span><span style="color: #DD0000">"Hello World"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">, </span><span style="color: #9876AA">$binary</span><span style="color: #007700">, </span><span style="color: #9876AA">$hello</span><span style="color: #007700">);<br /><br />print </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$trimmed </span><span style="color: #007700">= </span><span style="color: #9876AA">trim</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$trimmed</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$trimmed </span><span style="color: #007700">= </span><span style="color: #9876AA">trim</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">, </span><span style="color: #DD0000">" \t."</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$trimmed</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$trimmed </span><span style="color: #007700">= </span><span style="color: #9876AA">trim</span><span style="color: #007700">(</span><span style="color: #9876AA">$hello</span><span style="color: #007700">, </span><span style="color: #DD0000">"Hdle"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$trimmed</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 清除 $binary 首位的 ASCII 控制字符<br />// （包括 0-31）<br /></span><span style="color: #9876AA">$clean </span><span style="color: #007700">= </span><span style="color: #9876AA">trim</span><span style="color: #007700">(</span><span style="color: #9876AA">$binary</span><span style="color: #007700">, </span><span style="color: #DD0000">"\x00..\x1F"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$clean</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(32) &quot;        These are a few words :) ...  &quot;<br>string(16) &quot;    Example string<br>&quot;<br>string(11) &quot;Hello World&quot;<br><br>string(28) &quot;These are a few words :) ...&quot;<br>string(24) &quot;These are a few words :)&quot;<br>string(5) &quot;o Wor&quot;<br>string(14) &quot;Example string&quot;<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 使用 <span class="function"><strong style="color:#CC7832">trim()</strong></span> 清理数组值</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">trim_value</span><span style="color: #007700">(&amp;</span><span style="color: #9876AA">$value</span><span style="color: #007700">) <br />{ <br />    </span><span style="color: #9876AA">$value </span><span style="color: #007700">= </span><span style="color: #9876AA">trim</span><span style="color: #007700">(</span><span style="color: #9876AA">$value</span><span style="color: #007700">); <br />}<br /><br /></span><span style="color: #9876AA">$fruit </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">,</span><span style="color: #DD0000">'banana '</span><span style="color: #007700">, </span><span style="color: #DD0000">' cranberry '</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruit</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">array_walk</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruit</span><span style="color: #007700">, </span><span style="color: #DD0000">'trim_value'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruit</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(3) {<br>  [0]=&gt;<br>  string(5) &quot;apple&quot;<br>  [1]=&gt;<br>  string(7) &quot;banana &quot;<br>  [2]=&gt;<br>  string(11) &quot; cranberry &quot;<br>}<br>array(3) {<br>  [0]=&gt;<br>  string(5) &quot;apple&quot;<br>  [1]=&gt;<br>  string(6) &quot;banana&quot;<br>  [2]=&gt;<br>  string(9) &quot;cranberry&quot;<br>}<br><br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.trim-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <strong>可能的问题：删除中间字符</strong><br />   <p class="para">    因为 <span class="function"><strong style="color:#CC7832">trim()</strong></span>    从字符串的开始和末尾修剪字符。所以中间是否删除字符可能会造成混淆。<span>trim(&#039;abc&#039;, &#039;bad&#039;)</span>    移除了“a”和“b”，是因为修剪了“a”之后，“b”移动到了开头，所以也被修剪了。所以这就是为什么能正常工作而    <span>trim(&#039;abc&#039;, &#039;b&#039;)</span> 看起来没有的原因。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.trim-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link ltrim()} - 删除字符串开头的空白字符（或其他字符）</span></li>    <li class="member"><span class="function">{@link rtrim()} - 删除字符串末端的空白字符（或者其他字符）</span></li>    <li class="member"><span class="function">{@link str_replace()} - 子字符串替换</span></li>   </ul>  </span> </div></div>
 * @return string The trimmed string.*/
function trim(string $string, string $characters = " \n\r\t\v\0"): string {}

/**
*<div id="function.ltrim" class="refentry"> <div class="refnamediv">  <h1 class="refname">ltrim</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ltrim</span> &mdash; <span class="dc-title">删除字符串开头的空白字符（或其他字符）</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.ltrim-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>ltrim</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$characters</span><span class="initializer"> = &quot; \n\r\t\v\x00&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   删除字符串开头的空白字符（或其他字符）  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.ltrim-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       输入的字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">characters</span></dt>     <dd>      <p class="para">       通过参数 <span class="parameter" style="color:#3A95FF">characters</span>，你也可以指定想要删除的字符，简单地列出你想要删除的所有字符即可。使用<span>..</span>，可以指定字符的范围。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.ltrim-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   该函数返回一个删除了 <span class="parameter" style="color:#3A95FF">string</span> 最左边的空白字符的字符串。   如果不使用第二个参数，   <span class="function"><strong style="color:#CC7832">ltrim()</strong></span> 仅删除以下字符：      <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      &quot; &quot; (<abbr title="American Standard Code for Information Interchange">ASCII</abbr> <span>32</span>      (<span>0x20</span>))，普通空白字符。     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\t&quot; (<abbr title="American Standard Code for Information Interchange">ASCII</abbr> <span>9</span>      (<span>0x09</span>))， 制表符.     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\n&quot; (<abbr title="American Standard Code for Information Interchange">ASCII</abbr> <span>10</span>      (<span>0x0A</span>))，换行符。     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\r&quot; (<abbr title="American Standard Code for Information Interchange">ASCII</abbr> <span>13</span>      (<span>0x0D</span>))，回车符。     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\0&quot; (<abbr title="American Standard Code for Information Interchange">ASCII</abbr> <span>0</span>      (<span>0x00</span>))， <span>NUL</span>空字节符。     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\v&quot; (<abbr title="American Standard Code for Information Interchange">ASCII</abbr> <span>11</span>      (<span>0x0B</span>))，垂直制表符。     </span>    </li>   </ul>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.ltrim-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ltrim()</strong></span>的使用示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$text </span><span style="color: #007700">= </span><span style="color: #DD0000">"\t\tThese are a few words :) ...  "</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$binary </span><span style="color: #007700">= </span><span style="color: #DD0000">"\x09Example string\x0A"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$hello  </span><span style="color: #007700">= </span><span style="color: #DD0000">"Hello World"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">, </span><span style="color: #9876AA">$binary</span><span style="color: #007700">, </span><span style="color: #9876AA">$hello</span><span style="color: #007700">);<br /><br />print </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /><br /></span><span style="color: #9876AA">$trimmed </span><span style="color: #007700">= </span><span style="color: #9876AA">ltrim</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$trimmed</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$trimmed </span><span style="color: #007700">= </span><span style="color: #9876AA">ltrim</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">, </span><span style="color: #DD0000">" \t."</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$trimmed</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$trimmed </span><span style="color: #007700">= </span><span style="color: #9876AA">ltrim</span><span style="color: #007700">(</span><span style="color: #9876AA">$hello</span><span style="color: #007700">, </span><span style="color: #DD0000">"Hdle"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$trimmed</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 删除 $binary 开头的 ASCII 控制字符<br />// (从 0 到 31，包括 0 和 31)<br /></span><span style="color: #9876AA">$clean </span><span style="color: #007700">= </span><span style="color: #9876AA">ltrim</span><span style="color: #007700">(</span><span style="color: #9876AA">$binary</span><span style="color: #007700">, </span><span style="color: #DD0000">"\x00..\x1F"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$clean</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(32) &quot;        These are a few words :) ...  &quot;<br>string(16) &quot;    Example string<br>&quot;<br>string(11) &quot;Hello World&quot;<br><br>string(30) &quot;These are a few words :) ...  &quot;<br>string(30) &quot;These are a few words :) ...  &quot;<br>string(7) &quot;o World&quot;<br>string(15) &quot;Example string<br>&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.ltrim-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link trim()} - 去除字符串首尾处的空白字符（或者其他字符）</span></li>    <li class="member"><span class="function">{@link rtrim()} - 删除字符串末端的空白字符（或者其他字符）</span></li>   </ul>  </span> </div></div>
 * @return string This function returns a string with whitespace stripped from the*/
function ltrim(string $string, string $characters = " \n\r\t\v\0"): string {}

/**
*<div id="function.strip-tags" class="refentry"> <div class="refnamediv">  <h1 class="refname">strip_tags</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">strip_tags</span> &mdash; <span class="dc-title">从字符串中去除 HTML 和 PHP 标签</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.strip-tags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>strip_tags</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">null</span></span> <span class="parameter" style="color:#3A95FF">$allowed_tags</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   该函数尝试返回给定的字符串 <span class="parameter" style="color:#3A95FF">string</span> 去除空字符、HTML 和 PHP   标签后的结果。它使用与函数 <span class="function">{@link fgetss()}</span> 一样的机制去除标签。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.strip-tags-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       输入字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">allowed_tags</span></dt>     <dd>      <p class="para">       使用可选的第二个参数指定不被去除的标签列表。要么是 <span class="type" style="color:#EAB766">string</span>，要么自       PHP 7.4.0 起是 <span class="type" style="color:#EAB766">array</span>。有关此参数的格式，请参考以下示例：      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        HTML 注释和 PHP 标签也会被去除。这里是硬编码处理的，所以无法通过 <span class="parameter" style="color:#3A95FF">allowed_tags</span> 参数进行改变。       </p>      </p></blockquote>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        将会忽略自闭合 XHTML 标签，<span class="parameter" style="color:#3A95FF">allowed_tags</span> 仅可用于非自闭合标签。例如，要同时允许        <span>&lt;br&gt;</span> 和 <span>&lt;br/&gt;</span>，应该使用：       </p>       <div class="informalexample">        <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />strip_tags</span><span style="color: #007700">(</span><span style="color: #9876AA">$input</span><span style="color: #007700">, </span><span style="color: #DD0000">'&lt;br&gt;'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>        </div>       </div>      </p></blockquote>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.strip-tags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回处理后的字符串。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.strip-tags-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">allowed_tags</span> 允许为 null。      </td>     </tr>      <tr>       <td>7.4.0</td>       <td>        <span class="parameter" style="color:#3A95FF">allowed_tags</span> 现在可以接受 <span class="type" style="color:#EAB766">array</span>。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.strip-tags-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">strip_tags()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$text </span><span style="color: #007700">= </span><span style="color: #DD0000">'&lt;p&gt;Test paragraph.&lt;/p&gt;&lt;!-- Comment --&gt; &lt;a href="#fragment"&gt;Other text&lt;/a&gt;'</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">strip_tags</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 允许 &lt;p&gt; 和 &lt;a&gt;<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">strip_tags</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">, </span><span style="color: #DD0000">'&lt;p&gt;&lt;a&gt;'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 自 PHP 7.4.0 起，上面的行可以写成：<br />// echo strip_tags($text, ['p', 'a']);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Test paragraph. Other text<br>&lt;p&gt;Test paragraph.&lt;/p&gt; &lt;a href=&quot;#fragment&quot;&gt;Other text&lt;/a&gt;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.strip-tags-notes">  <h3 class="title">注释</h3>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    此函数不能用于尝试阻拦 XSS 攻击。根据输出的上下文选择更合适的函数（像 <span class="function">{@link htmlspecialchars()}</span>）或者其它方式。   </p>  </div>    <div class="warning"><strong class="warning">警告</strong>   <p class="para">    由于 <span class="function"><strong style="color:#CC7832">strip_tags()</strong></span> 无法实际验证 HTML，不完整或者破损标签将导致更多的数据被删除。   </p>  </div>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    该函数不会修改 <span class="parameter" style="color:#3A95FF">allowed_tags</span> 参数中指定的允许标记的任何属性，包括 <span>style</span> 和 <span>onmouseover</span> 属性，用户可能会在提交的内容中恶意滥用这些属性，从而展示给其他用户。   </p>  </div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    输入 HTML 标签名字如果大于 1023 字节(bytes)将会被认为是无效的，无论    <span class="parameter" style="color:#3A95FF">allowed_tags</span> 参数是怎样的。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.strip-tags-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link htmlspecialchars()} - 将特殊字符转换为 HTML 实体</span></li>   </ul>  </span> </div></div>
 * @return string the stripped string.*/
function strip_tags(string $string, #[LanguageLevelTypeAware(["7.4" => "string[]|string|null"], default: "string|null")] $allowed_tags = null): string {}

/**
*<div id="function.similar-text" class="refentry"> <div class="refnamediv">  <h1 class="refname">similar_text</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">similar_text</span> &mdash; <span class="dc-title">计算两个字符串的相似度</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.similar-text-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>similar_text</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string2</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">float</span> <span class="parameter" style="color:#3A95FF">&$percent</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   两个字符串的相似程度计算依据 Programming Classics: Implementing the World&#039;s Best Algorithms by Oliver (ISBN 0-131-00413-1)  的描述进行。注意该实现没有使用 Oliver 虚拟码中的堆栈，但是却进行了递归调用，这个做法可能会导致整个过程变慢或变快。也请注意，该算法的复杂度是 O(N**3)，N 是最长字符串的长度。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.similar-text-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">string1</span></dt>     <dd>      <p class="para">       第一个字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">string2</span></dt>     <dd>      <p class="para">       第二个字符串。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        交换 <span class="parameter" style="color:#3A95FF">string1</span> 和 <span class="parameter" style="color:#3A95FF">string2</span>        可能会产生不同的结果；请看下面的示例。       </p>      </p></blockquote>      </dd>             <dt><span class="parameter" style="color:#3A95FF">percent</span></dt>     <dd>      <p class="para">       第三个参数通过引用传递，<span class="function"><strong style="color:#CC7832">similar_text()</strong></span> 将以百分比计算相似度，通过将       <span class="function"><strong style="color:#CC7832">similar_text()</strong></span> 的结果除以指定字符串长度的平均值然后乘以 <span>100</span>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.similar-text-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回在两个字符串中匹配字符的数量。  </p>  <p class="para">   The number of matching characters is calculated by finding the longest first   common substring, and then doing this for the prefixes and the suffixes,   recursively. The lengths of all found common substrings are added.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.similar-text-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">similar_text()</strong></span> 交换参数示例</strong></p>   <div class="example-contents"><p>    此示例展示了交换 <span class="parameter" style="color:#3A95FF">string1</span> 和 <span class="parameter" style="color:#3A95FF">string2</span>    可能会产生不同的结果。   </p></div>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$sim </span><span style="color: #007700">= </span><span style="color: #9876AA">similar_text</span><span style="color: #007700">(</span><span style="color: #DD0000">'bafoobar'</span><span style="color: #007700">, </span><span style="color: #DD0000">'barfoo'</span><span style="color: #007700">, </span><span style="color: #9876AA">$perc</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"similarity: </span><span style="color: #9876AA">$sim</span><span style="color: #DD0000"> (</span><span style="color: #9876AA">$perc</span><span style="color: #DD0000"> %)\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$sim </span><span style="color: #007700">= </span><span style="color: #9876AA">similar_text</span><span style="color: #007700">(</span><span style="color: #DD0000">'barfoo'</span><span style="color: #007700">, </span><span style="color: #DD0000">'bafoobar'</span><span style="color: #007700">, </span><span style="color: #9876AA">$perc</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"similarity: </span><span style="color: #9876AA">$sim</span><span style="color: #DD0000"> (</span><span style="color: #9876AA">$perc</span><span style="color: #DD0000"> %)\n"</span><span style="color: #007700">;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>similarity: 5 (71.428571428571 %)<br>similarity: 3 (42.857142857143 %)<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.similar-text-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link levenshtein()} - 计算两个字符串之间的 Levenshtein 距离</span></li>    <li class="member"><span class="function">{@link soundex()} - Calculate the soundex key of a string</span></li>   </ul>  </span> </div></div>
 * @return int the number of matching chars in both strings.*/
function similar_text(string $string1, string $string2, &$percent): int {}

/**
*<div id="function.explode" class="refentry"> <div class="refnamediv">  <h1 class="refname">explode</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">explode</span> &mdash; <span class="dc-title">使用一个字符串分割另一个字符串</span></p>  </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.explode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>explode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$separator</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$limit</span><span class="initializer"> = <strong><span>PHP_INT_MAX</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   此函数返回由字符串组成的数组，每个元素都是   <span class="parameter" style="color:#3A95FF">string</span>   的一个子串，它们被字符串   <span class="parameter" style="color:#3A95FF">separator</span>   作为边界点分割出来。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.explode-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">separator</span></dt>     <dd>      <p class="para">       边界上的分隔字符。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       输入的字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">limit</span></dt>     <dd>      <p class="para">       如果设置了   <span class="parameter" style="color:#3A95FF">limit</span>   参数并且是正数，则返回的数组包含最多   <span class="parameter" style="color:#3A95FF">limit</span>   个元素，而最后那个元素将包含   <span class="parameter" style="color:#3A95FF">string</span>   的剩余部分。      </p>      <p class="para">       如果  <span class="parameter" style="color:#3A95FF">limit</span>  参数是负数，则返回除了最后的  -<span class="parameter" style="color:#3A95FF">limit</span>  个元素外的所有元素。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">limit</span> 是 0，则会被当做 1。      </p>     </dd>       </dl>  </span>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    在 PHP 8.0 之前，<span class="function">{@link implode()}</span> 可以接收两种参数顺序。    但请注意，<span class="function"><strong style="color:#CC7832">explode()</strong></span> 从未支持乱序传入参数：你必须保证    <span class="parameter" style="color:#3A95FF">separator</span> 参数在    <span class="parameter" style="color:#3A95FF">string</span> 参数之前。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.explode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   此函数返回由字符串组成的 <span class="type" style="color:#EAB766">array</span>，每个元素都是   <span class="parameter" style="color:#3A95FF">string</span>   的一个子串，它们被字符串   <span class="parameter" style="color:#3A95FF">separator</span>   作为边界点分割出来。  </p>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">separator</span>   为空字符串（&quot;&quot;），<span class="function"><strong style="color:#CC7832">explode()</strong></span>   将抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。   如果   <span class="parameter" style="color:#3A95FF">separator</span>   所包含的值在   <span class="parameter" style="color:#3A95FF">string</span>   中找不到，并且使用了负数的 <span class="parameter" style="color:#3A95FF">limit</span> ，   那么会返回空的 <span class="type" style="color:#EAB766">array</span>，   否则返回包含 <span class="parameter" style="color:#3A95FF">string</span>   单个元素的数组。   如果 <span class="parameter" style="color:#3A95FF">separator</span> 值出现在了   <span class="parameter" style="color:#3A95FF">string</span> 参数的开头或末尾，   将在返回 <span class="type" style="color:#EAB766">array</span> 相应的头部或尾部添加 <span class="type" style="color:#EAB766">array</span> 空值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1  changelog" id="refsect1-function.explode- changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       现在开始，当 <span class="parameter" style="color:#3A95FF">separator</span> 参数传入空字符串时（<span>&quot;&quot;</span>），       <span class="function"><strong style="color:#CC7832">explode()</strong></span> 会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。       在早期版本中，<span class="function"><strong style="color:#CC7832">explode()</strong></span> 会返回 <strong><span>false</span></strong>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.explode-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">explode()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 示例 1<br /></span><span style="color: #9876AA">$pizza  </span><span style="color: #007700">= </span><span style="color: #DD0000">"piece1 piece2 piece3 piece4 piece5 piece6"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$pieces </span><span style="color: #007700">= </span><span style="color: #9876AA">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">" "</span><span style="color: #007700">, </span><span style="color: #9876AA">$pizza</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$pieces</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]; </span><span style="color: #FF8000">// piece1<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">$pieces</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]; </span><span style="color: #FF8000">// piece2<br /><br />// 示例 2<br /></span><span style="color: #9876AA">$data </span><span style="color: #007700">= </span><span style="color: #DD0000">"foo:*:1023:1000::/home/foo:/bin/sh"</span><span style="color: #007700">;<br />list(</span><span style="color: #9876AA">$user</span><span style="color: #007700">, </span><span style="color: #9876AA">$pass</span><span style="color: #007700">, </span><span style="color: #9876AA">$uid</span><span style="color: #007700">, </span><span style="color: #9876AA">$gid</span><span style="color: #007700">, </span><span style="color: #9876AA">$gecos</span><span style="color: #007700">, </span><span style="color: #9876AA">$home</span><span style="color: #007700">, </span><span style="color: #9876AA">$shell</span><span style="color: #007700">) = </span><span style="color: #9876AA">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">":"</span><span style="color: #007700">, </span><span style="color: #9876AA">$data</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$user</span><span style="color: #007700">; </span><span style="color: #FF8000">// foo<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">$pass</span><span style="color: #007700">; </span><span style="color: #FF8000">// *<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>    <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">explode()</strong></span> return examples</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//<br />  字符串内不包含分隔字符时，<br />  会简单返回只有一个原始字符串元素的 array。<br /><br /></span><span style="color: #9876AA">$input1 </span><span style="color: #007700">= </span><span style="color: #DD0000">"hello"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$input2 </span><span style="color: #007700">= </span><span style="color: #DD0000">"hello,there"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$input3 </span><span style="color: #007700">= </span><span style="color: #DD0000">','</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">( </span><span style="color: #9876AA">explode</span><span style="color: #007700">( </span><span style="color: #DD0000">','</span><span style="color: #007700">, </span><span style="color: #9876AA">$input1 </span><span style="color: #007700">) );<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">( </span><span style="color: #9876AA">explode</span><span style="color: #007700">( </span><span style="color: #DD0000">','</span><span style="color: #007700">, </span><span style="color: #9876AA">$input2 </span><span style="color: #007700">) );<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">( </span><span style="color: #9876AA">explode</span><span style="color: #007700">( </span><span style="color: #DD0000">','</span><span style="color: #007700">, </span><span style="color: #9876AA">$input3 </span><span style="color: #007700">) );<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(1)<br>(<br>    [0] =&gt; string(5) &quot;hello&quot;<br>)<br>array(2)<br>(<br>    [0] =&gt; string(5) &quot;hello&quot;<br>    [1] =&gt; string(5) &quot;there&quot;<br>)<br>array(2)<br>(<br>    [0] =&gt; string(0) &quot;&quot;<br>    [1] =&gt; string(0) &quot;&quot;<br>)<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3 <span class="parameter" style="color:#3A95FF">limit</span> 参数的例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$str </span><span style="color: #007700">= </span><span style="color: #DD0000">'one|two|three|four'</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 正数的 limit<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">'|'</span><span style="color: #007700">, </span><span style="color: #9876AA">$str</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// 负数的 limit<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">'|'</span><span style="color: #007700">, </span><span style="color: #9876AA">$str</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; one<br>    [1] =&gt; two|three|four<br>)<br>Array<br>(<br>    [0] =&gt; one<br>    [1] =&gt; two<br>    [2] =&gt; three<br>)<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.explode-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.explode-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link preg_split()} - 通过一个正则表达式分隔字符串</span></li>    <li class="member"><span class="function">{@link str_split()} - 将字符串转换为数组</span></li>    <li class="member"><span class="function">{@link mb_split()} - 使用正则表达式分割多字节字符串</span></li>    <li class="member"><span class="function">{@link str_word_count()} - 返回字符串中单词的使用情况</span></li>    <li class="member"><span class="function">{@link strtok()} - 标记分割字符串</span></li>    <li class="member"><span class="function">{@link implode()} - 用字符串连接数组元素</span></li>   </ul>  </span> </div></div>
 * @return string[]|false If delimiter is an empty string (""),*/
function explode(string $separator, string $string, int $limit = PHP_INT_MAX) {}

/**
*<div id="function.implode" class="refentry"> <div class="refnamediv">  <h1 class="refname">implode</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">implode</span> &mdash; <span class="dc-title">用字符串连接数组元素</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.implode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>implode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$separator</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="simpara">替代写法（不支持命名参数）：</p>  <div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><strong>implode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="simpara">遗留写法（从 PHP 7.4.0 起废弃，从 PHP 8.0.0 中移除）：</p>  <div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><strong>implode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$separator</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   用一个 <span class="parameter" style="color:#3A95FF">separator</span> 字符串连接数组元素。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.implode-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">separator</span></dt>     <dd>      <p class="para">       可选。默认为空字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       要使用字符串连接的数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.implode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个包含所有数组元素并且顺序相同的字符串，   每个元素之间有 separator 分隔。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.implode-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       在 <span class="parameter" style="color:#3A95FF">array</span> 之后传递 <span class="parameter" style="color:#3A95FF">separator</span> 已不再支持。      </td>     </tr>     <tr>      <td>7.4.0</td>      <td>       在 <span class="parameter" style="color:#3A95FF">array</span> 之后传递 <span class="parameter" style="color:#3A95FF">separator</span> （即：使用遗留写法）已被废弃。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.implode-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">implode()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$array </span><span style="color: #007700">= [</span><span style="color: #DD0000">'lastname'</span><span style="color: #007700">, </span><span style="color: #DD0000">'email'</span><span style="color: #007700">, </span><span style="color: #DD0000">'phone'</span><span style="color: #007700">];<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">","</span><span style="color: #007700">, </span><span style="color: #9876AA">$array</span><span style="color: #007700">)); </span><span style="color: #FF8000">// string(20) "lastname,email,phone"<br /><br />// Empty string when using an empty array:<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">'hello'</span><span style="color: #007700">, [])); </span><span style="color: #FF8000">// string(0) ""<br /><br />// The separator is optional:<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">implode</span><span style="color: #007700">([</span><span style="color: #DD0000">'a'</span><span style="color: #007700">, </span><span style="color: #DD0000">'b'</span><span style="color: #007700">, </span><span style="color: #DD0000">'c'</span><span style="color: #007700">])); </span><span style="color: #FF8000">// string(3) "abc"<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>     </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.implode-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.implode-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link explode()} - 使用一个字符串分割另一个字符串</span></li>    <li class="member"><span class="function">{@link preg_split()} - 通过一个正则表达式分隔字符串</span></li>    <li class="member"><span class="function">{@link http_build_query()} - 生成 URL-encode 之后的请求字符串</span></li>   </ul>  </span> </div></div>
 * @return string a string containing a string representation of all the array*/
function implode(array|string $separator = "", ?array $array): string {}

/**
*<div id="function.join" class="refentry"> <div class="refnamediv">  <h1 class="refname">join</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">join</span> &mdash; <span class="dc-title">别名 <span class="function">{@link implode()}</span></span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.join-description">  <h3 class="title">说明</h3>  <p class="simpara">   此函数是该函数的别名：   <span class="function">{@link implode()}</span>.  </p> </div></div>
 * @return string a string containing a string representation of all the array*/
function join(array|string $separator = "", ?array $array): string {}

/**
*<div id="function.setlocale" class="refentry"> <div class="refnamediv">  <h1 class="refname">setlocale</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">setlocale</span> &mdash; <span class="dc-title">设置区域信息</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.setlocale-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>setlocale</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$category</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$locales</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">...$rest</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="simpara">替代签名（不支持命名参数）：</p>  <div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><strong>setlocale</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$category</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$locale_array</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   设置区域信息。  </p>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    区域信息是按进程维护的，而不是线程。如果在多线程服务器 API 上运行 PHP，区域设置可能在脚本运行时突然变化，尽管脚本本身并没有调用    <span class="function"><strong style="color:#CC7832">setlocale()</strong></span>。这是因为其它脚本在同一时刻的同一进程的不同线程中运行，使用 <span class="function"><strong style="color:#CC7832">setlocale()</strong></span>    改变了进程级别的区域。在 Windows 上，自 PHP 7.0.5 起，每个线程都维护自己的区域信息。   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.setlocale-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">category</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">category</span> 命名常量指定的受区域设置的功能类别:       <ul class="itemizedlist">        <li class="listitem">         <span class="simpara">          <strong><span>LC_ALL</span></strong> 所有的设置         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>LC_COLLATE</span></strong> 字符串比较, 详见          <span class="function">{@link strcoll()}</span>         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>LC_CTYPE</span></strong> 字符串的分类与转换, 参见例子          <span class="function">{@link ctype_alpha()}</span>         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>LC_MONETARY</span></strong> 等同 <span class="function">{@link localeconv()}</span>         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>LC_NUMERIC</span></strong> 对于小数点的分隔（另请参见          <span class="function">{@link localeconv()}</span>）         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>LC_TIME</span></strong> 时间与格式          <span class="function">{@link strftime()}</span>         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>LC_MESSAGES</span></strong> 系统响应（如果 PHP 使用 <span>libintl</span> 编译）         </span>        </li>       </ul>      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">locales</span></dt>     <dd>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">locales</span> 是空字符串       <span>&quot;&quot;</span>，则区域名将从跟上述类别同名的环境变量的值或“LANG”中设置。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">locales</span> 是 <span>&quot;0&quot;</span>，则区域设置不受影响，仅返回当前设置。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">locales</span>       后跟附加参数，则每个参数都会尝试设置为新的区域，直至成功。对于以下情况非常有用：不同的系统已知的区域名称不同；为可能无效的区域提供后备。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">rest</span></dt>     <dd>      <p class="para">       可选的字符串参数，尝试作为区域设置，直至成功。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">locale_array</span></dt>     <dd>      <p class="para">       尝试将数组中的每个元素设置为新的区域，直至成功。对于以下情况非常有用：不同的系统已知的区域名称不同；为可能无效的区域提供后备。      </p>     </dd>       </dl>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <p class="para">     在 Windows 中，setlocale(LC_ALL, &#039;&#039;) 从系统中的区域/语言设置（通过控制面板访问）中设置区域设置信息。    </p>   </span></blockquote>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.setlocale-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回新的当前区域，如果区域功能没有在当前平台实现、指定区域不存在或类别名无效时返回 <strong><span>false</span></strong>。  </p>  <p class="para">   无效的类别名也会导致警告消息。类别/区域名可以在 <a href="http://www.faqs.org/rfcs/rfc1766" class="link external">&raquo;&nbsp;RFC 1766</a>   和 <a href="http://www.loc.gov/standards/iso639-2/php/code_list.php" class="link external">&raquo;&nbsp;ISO 639</a> 中找到。不同的系统有不同的区域命名方案。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="function"><strong style="color:#CC7832">setlocale()</strong></span> 的返回值依赖运行 PHP 的系统。它准确返回系统    <span>setlocale</span> 函数返回的内容。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.setlocale-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">setlocale()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 设置区域为荷兰 <br /></span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_ALL</span><span style="color: #007700">, </span><span style="color: #DD0000">'nl_NL'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 输出：vrijdag 22 december 1978 <br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">strftime</span><span style="color: #007700">(</span><span style="color: #DD0000">"%A %e %B %Y"</span><span style="color: #007700">, </span><span style="color: #9876AA">mktime</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">12</span><span style="color: #007700">, </span><span style="color: #9876AA">22</span><span style="color: #007700">, </span><span style="color: #9876AA">1978</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// 尝试为德语设置不同的可能区域 <br /></span><span style="color: #9876AA">$loc_de </span><span style="color: #007700">= </span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_ALL</span><span style="color: #007700">, </span><span style="color: #DD0000">'de_DE@euro'</span><span style="color: #007700">, </span><span style="color: #DD0000">'de_DE'</span><span style="color: #007700">, </span><span style="color: #DD0000">'de'</span><span style="color: #007700">, </span><span style="color: #DD0000">'ge'</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"Preferred locale for german on this system is '</span><span style="color: #9876AA">$loc_de</span><span style="color: #DD0000">'"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 Windows 的 <span class="function"><strong style="color:#CC7832">setlocale()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 设置区域为荷兰 <br /></span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_ALL</span><span style="color: #007700">, </span><span style="color: #DD0000">'nld_nld'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 输出：vrijdag 22 december 1978 <br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">strftime</span><span style="color: #007700">(</span><span style="color: #DD0000">"%A %d %B %Y"</span><span style="color: #007700">, </span><span style="color: #9876AA">mktime</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">12</span><span style="color: #007700">, </span><span style="color: #9876AA">22</span><span style="color: #007700">, </span><span style="color: #9876AA">1978</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// 尝试为德语设置不同的可能区域 <br /></span><span style="color: #9876AA">$loc_de </span><span style="color: #007700">= </span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_ALL</span><span style="color: #007700">, </span><span style="color: #DD0000">'de_DE@euro'</span><span style="color: #007700">, </span><span style="color: #DD0000">'de_DE'</span><span style="color: #007700">, </span><span style="color: #DD0000">'deu_deu'</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"Preferred locale for german on this system is '</span><span style="color: #9876AA">$loc_de</span><span style="color: #DD0000">'"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.setlocale-notes">  <h3 class="title">注释</h3>  <div class="tip"><strong class="tip">小技巧</strong>   <p class="para">    Windows 用户可以在 Microsoft 的 <abbr title="Microsoft Developer Network">MSDN</abbr> 网站上找到有关    <span class="parameter" style="color:#3A95FF">locales</span> 字符串的有用信息。支持的语言字符串可在<a href="http://msdn.microsoft.com/en-us/library/39cwe7zf.aspx" class="link external">&raquo;&nbsp;语言字符串文档</a>中找到，支持的国家/区域字符串可在<a href="http://msdn.microsoft.com/en-us/library/cdax410z.aspx" class="link external">&raquo;&nbsp;国家/区域文档</a>中找到。   </p>  </div> </div></div>
 * @return string|false <p>the new current locale, or false if the locale functionality is*/
function setlocale(
    #[ExpectedValues([LC_ALL,  LC_COLLATE,  LC_CTYPE,  LC_MONETARY,  LC_NUMERIC,  LC_TIME,  LC_MESSAGES])] int $category,
    #[PhpStormStubsElementAvailable(from: '8.0')] $locales,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $rest,
    ...$rest
): string|false {}

/**
*<div id="function.localeconv" class="refentry"> <div class="refnamediv">  <h1 class="refname">localeconv</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.5, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">localeconv</span> &mdash; <span class="dc-title">Get numeric formatting information</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.localeconv-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>localeconv</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Returns an associative array containing localized numeric and   monetary formatting information.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.localeconv-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.localeconv-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="function"><strong style="color:#CC7832">localeconv()</strong></span> returns data based upon the current locale   as set by <span class="function">{@link setlocale()}</span>.  The associative array that is   returned contains the following fields:   <table class="doctable informaltable">         <thead>      <tr>       <th>Array element</th>       <th>Description</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>decimal_point</td>       <td>Decimal point character</td>      </tr>      <tr>       <td>thousands_sep</td>       <td>Thousands separator</td>      </tr>      <tr>       <td>grouping</td>       <td>Array containing numeric groupings</td>      </tr>      <tr>       <td>int_curr_symbol</td>       <td>International currency symbol (i.e. USD)</td>      </tr>      <tr>       <td>currency_symbol</td>       <td>Local currency symbol (i.e. $)</td>      </tr>      <tr>       <td>mon_decimal_point</td>       <td>Monetary decimal point character</td>      </tr>      <tr>       <td>mon_thousands_sep</td>       <td>Monetary thousands separator</td>      </tr>      <tr>       <td>mon_grouping</td>       <td>Array containing monetary groupings</td>      </tr>      <tr>       <td>positive_sign</td>       <td>Sign for positive values</td>      </tr>      <tr>       <td>negative_sign</td>       <td>Sign for negative values</td>      </tr>      <tr>       <td>int_frac_digits</td>       <td>International fractional digits</td>      </tr>      <tr>       <td>frac_digits</td>       <td>Local fractional digits</td>      </tr>      <tr>       <td>p_cs_precedes</td>       <td>        <strong><span>true</span></strong> if currency_symbol precedes a positive value, <strong><span>false</span></strong>        if it succeeds one       </td>      </tr>      <tr>       <td>p_sep_by_space</td>       <td>        <strong><span>true</span></strong> if a space separates currency_symbol from a positive        value, <strong><span>false</span></strong> otherwise       </td>      </tr>      <tr>       <td>n_cs_precedes</td>       <td>        <strong><span>true</span></strong> if currency_symbol precedes a negative value, <strong><span>false</span></strong>        if it succeeds one       </td>      </tr>      <tr>       <td>n_sep_by_space</td>       <td>        <strong><span>true</span></strong> if a space separates currency_symbol from a negative        value, <strong><span>false</span></strong> otherwise       </td>      </tr>      <tr style="vertical-align: top;">       <td>p_sign_posn</td>       <td>        <ul class="simplelist">         <li class="member">0 - Parentheses surround the quantity and currency_symbol</li>         <li class="member">1 - The sign string precedes the quantity and currency_symbol</li>         <li class="member">2 - The sign string succeeds the quantity and currency_symbol</li>         <li class="member">3 - The sign string immediately precedes the currency_symbol</li>         <li class="member">4 - The sign string immediately succeeds the currency_symbol</li>        </ul>       </td>      </tr>      <tr style="vertical-align: top;">       <td>n_sign_posn</td>       <td>        <ul class="simplelist">         <li class="member">0 - Parentheses surround the quantity and currency_symbol</li>         <li class="member">1 - The sign string precedes the quantity and currency_symbol</li>         <li class="member">2 - The sign string succeeds the quantity and currency_symbol</li>         <li class="member">3 - The sign string immediately precedes the currency_symbol</li>         <li class="member">4 - The sign string immediately succeeds the currency_symbol</li>        </ul>       </td>      </tr>     </tbody>       </table>  </p>  <p class="para">   The <span>p_sign_posn</span>, and <span>n_sign_posn</span> contain a string   of formatting options. Each number representing one of the above listed conditions.  </p>  <p class="para">   The grouping fields contain arrays that define the way numbers should be   grouped. For example, the monetary grouping field for the nl_NL locale (in   UTF-8 mode with the euro sign), would contain a 2 item array with the   values 3 and 3. The higher the index in the array, the farther left the   grouping is. If an array element is equal to <strong><span>CHAR_MAX</span></strong>,   no further grouping is done. If an array element is equal to 0, the previous   element should be used.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.localeconv-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">localeconv()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">false </span><span style="color: #007700">!== </span><span style="color: #9876AA">setlocale</span><span style="color: #007700">(</span><span style="color: #9876AA">LC_ALL</span><span style="color: #007700">, </span><span style="color: #DD0000">'nl_NL.UTF-8@euro'</span><span style="color: #007700">)) {<br />    </span><span style="color: #9876AA">$locale_info </span><span style="color: #007700">= </span><span style="color: #9876AA">localeconv</span><span style="color: #007700">();<br />    </span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$locale_info</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [decimal_point] =&gt; .<br>    [thousands_sep] =&gt;<br>    [int_curr_symbol] =&gt; EUR<br>    [currency_symbol] =&gt; €<br>    [mon_decimal_point] =&gt; ,<br>    [mon_thousands_sep] =&gt;<br>    [positive_sign] =&gt;<br>    [negative_sign] =&gt; -<br>    [int_frac_digits] =&gt; 2<br>    [frac_digits] =&gt; 2<br>    [p_cs_precedes] =&gt; 1<br>    [p_sep_by_space] =&gt; 1<br>    [n_cs_precedes] =&gt; 1<br>    [n_sep_by_space] =&gt; 1<br>    [p_sign_posn] =&gt; 1<br>    [n_sign_posn] =&gt; 2<br>    [grouping] =&gt; Array<br>        (<br>        )<br><br>    [mon_grouping] =&gt; Array<br>        (<br>            [0] =&gt; 3<br>            [1] =&gt; 3<br>        )<br><br>)<br></span></div>    </div>   </div>     </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.localeconv-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link setlocale()} - 设置区域信息</span></li>   </ul>  </span> </div></div>
 * @return array localeconv returns data based upon the current locale*/
function localeconv(): array {}
