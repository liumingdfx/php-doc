<?php

// Start of memcached v.3.1.5
use JetBrains\PhpStorm\Deprecated;

/**
*<div id="class.memcached" class="reference"> <h1 class="title">Memcached 类</h1>  <div class="partintro"><p class="verinfo">(PECL memcached &gt;= 0.1.0)</p>  <div class="section" id="memcached.intro">   <h2 class="title">简介</h2>   <p class="para">    表示与一组 memcached 服务器的连接。   </p>  </div>  <div class="section" id="memcached.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">Memcached</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$persistent_id</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$callback</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$connection_str</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.add.php" class="methodname" style="color:#CC7832">add</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.addbykey.php" class="methodname" style="color:#CC7832">addByKey</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.addserver.php" class="methodname" style="color:#CC7832">addServer</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$host</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$port</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$weight</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.addservers.php" class="methodname" style="color:#CC7832">addServers</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$servers</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.append.php" class="methodname" style="color:#CC7832">append</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">bool</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.appendbykey.php" class="methodname" style="color:#CC7832">appendByKey</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">bool</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.cas.php" class="methodname" style="color:#CC7832">cas</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">float</span></span> <span class="parameter" style="color:#3A95FF">$cas_token</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.casbykey.php" class="methodname" style="color:#CC7832">casByKey</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">float</span></span> <span class="parameter" style="color:#3A95FF">$cas_token</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.decrement.php" class="methodname" style="color:#CC7832">decrement</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span><span class="initializer"> = 1</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$initial_value</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiry</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.decrementbykey.php" class="methodname" style="color:#CC7832">decrementByKey</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span><span class="initializer"> = 1</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$initial_value</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiry</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.delete.php" class="methodname" style="color:#CC7832">delete</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$time</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.deletebykey.php" class="methodname" style="color:#CC7832">deleteByKey</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$time</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.deletemulti.php" class="methodname" style="color:#CC7832">deleteMulti</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$keys</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$time</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.deletemultibykey.php" class="methodname" style="color:#CC7832">deleteMultiByKey</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$keys</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$time</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.fetch.php" class="methodname" style="color:#CC7832">fetch</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.fetchall.php" class="methodname" style="color:#CC7832">fetchAll</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.flush.php" class="methodname" style="color:#CC7832">flush</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$delay</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.get.php" class="methodname" style="color:#CC7832">get</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$cache_cb</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$get_flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.getallkeys.php" class="methodname" style="color:#CC7832">getAllKeys</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.getbykey.php" class="methodname" style="color:#CC7832">getByKey</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$cache_cb</span><span class="initializer"> = <strong><span>null</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$get_flags</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.getdelayed.php" class="methodname" style="color:#CC7832">getDelayed</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$keys</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$with_cas</span><span class="initializer"> = <strong><span>false</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$value_cb</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.getdelayedbykey.php" class="methodname" style="color:#CC7832">getDelayedByKey</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$keys</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$with_cas</span><span class="initializer"> = <strong><span>false</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$value_cb</span><span class="initializer"> = <strong><span>null</span></strong></span></span><br>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.getmulti.php" class="methodname" style="color:#CC7832">getMulti</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$keys</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$get_flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.getmultibykey.php" class="methodname" style="color:#CC7832">getMultiByKey</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$keys</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$get_flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.getoption.php" class="methodname" style="color:#CC7832">getOption</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$option</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.getresultcode.php" class="methodname" style="color:#CC7832">getResultCode</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.getresultmessage.php" class="methodname" style="color:#CC7832">getResultMessage</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.getserverbykey.php" class="methodname" style="color:#CC7832">getServerByKey</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.getserverlist.php" class="methodname" style="color:#CC7832">getServerList</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.getstats.php" class="methodname" style="color:#CC7832">getStats</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$type</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.getversion.php" class="methodname" style="color:#CC7832">getVersion</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.increment.php" class="methodname" style="color:#CC7832">increment</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span><span class="initializer"> = 1</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$initial_value</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiry</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.incrementbykey.php" class="methodname" style="color:#CC7832">incrementByKey</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span><span class="initializer"> = 1</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$initial_value</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiry</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.ispersistent.php" class="methodname" style="color:#CC7832">isPersistent</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.ispristine.php" class="methodname" style="color:#CC7832">isPristine</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.prependbykey.php" class="methodname" style="color:#CC7832">prependByKey</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">bool</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.quit.php" class="methodname" style="color:#CC7832">quit</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.replace.php" class="methodname" style="color:#CC7832">replace</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.replacebykey.php" class="methodname" style="color:#CC7832">replaceByKey</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.resetserverlist.php" class="methodname" style="color:#CC7832">resetServerList</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.set.php" class="methodname" style="color:#CC7832">set</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.setbykey.php" class="methodname" style="color:#CC7832">setByKey</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.setmulti.php" class="methodname" style="color:#CC7832">setMulti</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$items</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.setmultibykey.php" class="methodname" style="color:#CC7832">setMultiByKey</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$items</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.setoption.php" class="methodname" style="color:#CC7832">setOption</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$option</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.setoptions.php" class="methodname" style="color:#CC7832">setOptions</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$options</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.setsaslauthdata.php" class="methodname" style="color:#CC7832">setSaslAuthData</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$username</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$password</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.touch.php" class="methodname" style="color:#CC7832">touch</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/memcached.touchbykey.php" class="methodname" style="color:#CC7832">touchByKey</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div>   </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Memcached::add} — 向新 key 添加元素</li><li>{@link Memcached::addByKey} — 在特定服务器上向新 key 添加元素</li><li>{@link Memcached::addServer} — 向服务器池增加服务器</li><li>{@link Memcached::addServers} — 向服务器池中增加多台服务器</li><li>{@link Memcached::append} — 向已存在元素追加数据</li><li>{@link Memcached::appendByKey} — 向指定服务器上已存在元素追加数据</li><li>{@link Memcached::cas} — 比较并交换值</li><li>{@link Memcached::casByKey} — 在指定服务器上比较并交换值</li><li>{@link Memcached::__construct} — 创建 Memcached 实例</li><li>{@link Memcached::decrement} — 减小数值元素的值</li><li>{@link Memcached::decrementByKey} — Decrement numeric item's value, stored on a specific server</li><li>{@link Memcached::delete} — 删除元素</li><li>{@link Memcached::deleteByKey} — 从指定的服务器删除元素</li><li>{@link Memcached::deleteMulti} — Delete multiple items</li><li>{@link Memcached::deleteMultiByKey} — Delete multiple items from a specific server</li><li>{@link Memcached::fetch} — 读取下一个结果</li><li>{@link Memcached::fetchAll} — 读取所有剩余结果</li><li>{@link Memcached::flush} — 作废缓存中的所有元素</li><li>{@link Memcached::get} — 检索元素</li><li>{@link Memcached::getAllKeys} — Gets the keys stored on all the servers</li><li>{@link Memcached::getByKey} — 从特定的服务器检索元素</li><li>{@link Memcached::getDelayed} — 请求多个元素</li><li>{@link Memcached::getDelayedByKey} — 从指定的服务器上请求多个元素</li><li>{@link Memcached::getMulti} — 检索多个元素</li><li>{@link Memcached::getMultiByKey} — 从特定服务器检索多个元素</li><li>{@link Memcached::getOption} — 获取 Memcached 的选项值</li><li>{@link Memcached::getResultCode} — 返回最后一次操作的结果代码</li><li>{@link Memcached::getResultMessage} — 返回最后一次操作的结果描述消息</li><li>{@link Memcached::getServerByKey} — 获取一个 key 所映射的服务器信息</li><li>{@link Memcached::getServerList} — 获取服务器池中的服务器列表</li><li>{@link Memcached::getStats} — 获取服务器池的统计信息</li><li>{@link Memcached::getVersion} — 获取服务器池中所有服务器的版本信息</li><li>{@link Memcached::increment} — 增加数值元素的值</li><li>{@link Memcached::incrementByKey} — Increment numeric item's value, stored on a specific server</li><li>{@link Memcached::isPersistent} — Check if a persitent connection to memcache is being used</li><li>{@link Memcached::isPristine} — Check if the instance was recently created</li><li>{@link Memcached::prepend} — 向一个已存在的元素前面追加数据</li><li>{@link Memcached::prependByKey} — 在指定服务器上追加数据到已存在的元素</li><li>{@link Memcached::quit} — 关闭所有打开的链接</li><li>{@link Memcached::replace} — 替换已存在 key 下的元素</li><li>{@link Memcached::replaceByKey} — 在指定服务器上，替换已存在 key 下的元素</li><li>{@link Memcached::resetServerList} — Clears all servers from the server list</li><li>{@link Memcached::set} — 存储一个元素</li><li>{@link Memcached::setByKey} — 将元素存储到指定的服务器上</li><li>{@link Memcached::setMulti} — 存储多个元素</li><li>{@link Memcached::setMultiByKey} — 在指定服务器存储多个元素</li><li>{@link Memcached::setOption} — 设置一个 memcached 选项</li><li>{@link Memcached::setOptions} — Set Memcached options</li><li>{@link Memcached::setSaslAuthData} — Set the credentials to use for authentication</li><li>{@link Memcached::touch} — Set a new expiration on an item</li><li>{@link Memcached::touchByKey} — Set a new expiration on an item on a specific server</li></ul></div>
*/
class Memcached
{
    /**
     * <p>Enables or disables payload compression. When enabled,
     * item values longer than a certain threshold (currently 100 bytes) will be
     * compressed during storage and decompressed during retrieval
     * transparently.</p>
     * <p>Type: boolean, default: <b>TRUE</b>.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const OPT_COMPRESSION = -1001;
    public const OPT_COMPRESSION_TYPE = -1004;

    /**
     * <p>This can be used to create a "domain" for your item keys. The value
     * specified here will be prefixed to each of the keys. It cannot be
     * longer than 128 characters and will reduce the
     * maximum available key size. The prefix is applied only to the item keys,
     * not to the server keys.</p>
     * <p>Type: string, default: "".</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const OPT_PREFIX_KEY = -1002;

    /**
     * <p>
     * Specifies the serializer to use for serializing non-scalar values.
     * The valid serializers are <b>Memcached::SERIALIZER_PHP</b>
     * or <b>Memcached::SERIALIZER_IGBINARY</b>. The latter is
     * supported only when memcached is configured with
     * --enable-memcached-igbinary option and the
     * igbinary extension is loaded.
     * </p>
     * <p>Type: integer, default: <b>Memcached::SERIALIZER_PHP</b>.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const OPT_SERIALIZER = -1003;

    /**
     * <p>Indicates whether igbinary serializer support is available.</p>
     * <p>Type: boolean.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const HAVE_IGBINARY = false;

    /**
     * <p>Indicates whether JSON serializer support is available.</p>
     * <p>Type: boolean.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const HAVE_JSON = false;

    /**
     * <p>Indicates whether msgpack serializer support is available.</p>
     * <p>Type: boolean.</p>
     * Available as of Memcached 3.0.0.
     * @since 3.0.0
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const HAVE_MSGPACK = false;

    /**
     * <p>Indicate whether set_encoding_key is available</p>
     * <p>Type: boolean.</p>
     * @link https://github.com/php-memcached-dev/php-memcached/blob/v3.1.5/memcached-api.php, https://github.com/php-memcached-dev/php-memcached/blob/v3.1.5/php_memcached.c#L4387
     */
    public const HAVE_ENCODING = false;

    /**
     * Feature support
     */
    public const HAVE_SESSION = true;
    public const HAVE_SASL = false;

    /**
     * <p>Specifies the hashing algorithm used for the item keys. The valid
     * values are supplied via <b>Memcached::HASH_*</b> constants.
     * Each hash algorithm has its advantages and its disadvantages. Go with the
     * default if you don't know or don't care.</p>
     * <p>Type: integer, default: <b>Memcached::HASH_DEFAULT</b></p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const OPT_HASH = 2;

    /**
     * <p>The default (Jenkins one-at-a-time) item key hashing algorithm.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const HASH_DEFAULT = 0;

    /**
     * <p>MD5 item key hashing algorithm.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const HASH_MD5 = 1;

    /**
     * <p>CRC item key hashing algorithm.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const HASH_CRC = 2;

    /**
     * <p>FNV1_64 item key hashing algorithm.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const HASH_FNV1_64 = 3;

    /**
     * <p>FNV1_64A item key hashing algorithm.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const HASH_FNV1A_64 = 4;

    /**
     * <p>FNV1_32 item key hashing algorithm.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const HASH_FNV1_32 = 5;

    /**
     * <p>FNV1_32A item key hashing algorithm.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const HASH_FNV1A_32 = 6;

    /**
     * <p>Hsieh item key hashing algorithm.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const HASH_HSIEH = 7;

    /**
     * <p>Murmur item key hashing algorithm.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const HASH_MURMUR = 8;

    /**
     * <p>Specifies the method of distributing item keys to the servers.
     * Currently supported methods are modulo and consistent hashing. Consistent
     * hashing delivers better distribution and allows servers to be added to
     * the cluster with minimal cache losses.</p>
     * <p>Type: integer, default: <b>Memcached::DISTRIBUTION_MODULA.</b></p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const OPT_DISTRIBUTION = 9;

    /**
     * <p>Modulo-based key distribution algorithm.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const DISTRIBUTION_MODULA = 0;

    /**
     * <p>Consistent hashing key distribution algorithm (based on libketama).</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const DISTRIBUTION_CONSISTENT = 1;
    public const DISTRIBUTION_VIRTUAL_BUCKET = 6;

    /**
     * <p>Enables or disables compatibility with libketama-like behavior. When
     * enabled, the item key hashing algorithm is set to MD5 and distribution is
     * set to be weighted consistent hashing distribution. This is useful
     * because other libketama-based clients (Python, Ruby, etc.) with the same
     * server configuration will be able to access the keys transparently.
     * </p>
     * <p>
     * It is highly recommended to enable this option if you want to use
     * consistent hashing, and it may be enabled by default in future
     * releases.
     * </p>
     * <p>Type: boolean, default: <b>FALSE</b>.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const OPT_LIBKETAMA_COMPATIBLE = 16;
    public const OPT_LIBKETAMA_HASH = 17;
    public const OPT_TCP_KEEPALIVE = 32;

    /**
     * <p>Enables or disables buffered I/O. Enabling buffered I/O causes
     * storage commands to "buffer" instead of being sent. Any action that
     * retrieves data causes this buffer to be sent to the remote connection.
     * Quitting the connection or closing down the connection will also cause
     * the buffered data to be pushed to the remote connection.</p>
     * <p>Type: boolean, default: <b>FALSE</b>.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const OPT_BUFFER_WRITES = 10;

    /**
     * <p>Enable the use of the binary protocol. Please note that you cannot
     * toggle this option on an open connection.</p>
     * <p>Type: boolean, default: <b>FALSE</b>.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const OPT_BINARY_PROTOCOL = 18;

    /**
     * <p>Enables or disables asynchronous I/O. This is the fastest transport
     * available for storage functions.</p>
     * <p>Type: boolean, default: <b>FALSE</b>.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const OPT_NO_BLOCK = 0;

    /**
     * <p>Enables or disables the no-delay feature for connecting sockets (may
     * be faster in some environments).</p>
     * <p>Type: boolean, default: <b>FALSE</b>.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const OPT_TCP_NODELAY = 1;

    /**
     * <p>The maximum socket send buffer in bytes.</p>
     * <p>Type: integer, default: varies by platform/kernel
     * configuration.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const OPT_SOCKET_SEND_SIZE = 4;

    /**
     * <p>The maximum socket receive buffer in bytes.</p>
     * <p>Type: integer, default: varies by platform/kernel
     * configuration.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const OPT_SOCKET_RECV_SIZE = 5;

    /**
     * <p>In non-blocking mode this set the value of the timeout during socket
     * connection, in milliseconds.</p>
     * <p>Type: integer, default: 1000.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const OPT_CONNECT_TIMEOUT = 14;

    /**
     * <p>The amount of time, in seconds, to wait until retrying a failed
     * connection attempt.</p>
     * <p>Type: integer, default: 0.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const OPT_RETRY_TIMEOUT = 15;

    /**
     * <p>Socket sending timeout, in microseconds. In cases where you cannot
     * use non-blocking I/O this will allow you to still have timeouts on the
     * sending of data.</p>
     * <p>Type: integer, default: 0.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const OPT_SEND_TIMEOUT = 19;

    /**
     * <p>Socket reading timeout, in microseconds. In cases where you cannot
     * use non-blocking I/O this will allow you to still have timeouts on the
     * reading of data.</p>
     * <p>Type: integer, default: 0.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const OPT_RECV_TIMEOUT = 20;

    /**
     * <p>Timeout for connection polling, in milliseconds.</p>
     * <p>Type: integer, default: 1000.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const OPT_POLL_TIMEOUT = 8;

    /**
     * <p>Enables or disables caching of DNS lookups.</p>
     * <p>Type: boolean, default: <b>FALSE</b>.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const OPT_CACHE_LOOKUPS = 6;

    /**
     * <p>Specifies the failure limit for server connection attempts. The
     * server will be removed after this many continuous connection
     * failures.</p>
     * <p>Type: integer, default: 0.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const OPT_SERVER_FAILURE_LIMIT = 21;
    public const OPT_AUTO_EJECT_HOSTS = 28;
    public const OPT_HASH_WITH_PREFIX_KEY = 25;
    public const OPT_NOREPLY = 26;
    public const OPT_SORT_HOSTS = 12;
    public const OPT_VERIFY_KEY = 13;
    public const OPT_USE_UDP = 27;
    public const OPT_NUMBER_OF_REPLICAS = 29;
    public const OPT_RANDOMIZE_REPLICA_READ = 30;
    public const OPT_CORK = 31;
    public const OPT_REMOVE_FAILED_SERVERS = 35;
    public const OPT_DEAD_TIMEOUT = 36;
    public const OPT_SERVER_TIMEOUT_LIMIT = 37;
    public const OPT_MAX = 38;
    public const OPT_IO_BYTES_WATERMARK = 23;
    public const OPT_IO_KEY_PREFETCH = 24;
    public const OPT_IO_MSG_WATERMARK = 22;
    public const OPT_LOAD_FROM_FILE = 34;
    public const OPT_SUPPORT_CAS = 7;
    public const OPT_TCP_KEEPIDLE = 33;
    public const OPT_USER_DATA = 11;

    /**
     * libmemcached result codes
     */
    /**
     * <p>The operation was successful.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_SUCCESS = 0;

    /**
     * <p>The operation failed in some fashion.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_FAILURE = 1;

    /**
     * <p>DNS lookup failed.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_HOST_LOOKUP_FAILURE = 2;

    /**
     * <p>Failed to read network data.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_UNKNOWN_READ_FAILURE = 7;

    /**
     * <p>Bad command in memcached protocol.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_PROTOCOL_ERROR = 8;

    /**
     * <p>Error on the client side.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_CLIENT_ERROR = 9;

    /**
     * <p>Error on the server side.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_SERVER_ERROR = 10;

    /**
     * <p>Failed to write network data.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_WRITE_FAILURE = 5;

    /**
     * <p>Failed to do compare-and-swap: item you are trying to store has been
     * modified since you last fetched it.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_DATA_EXISTS = 12;

    /**
     * <p>Item was not stored: but not because of an error. This normally
     * means that either the condition for an "add" or a "replace" command
     * wasn't met, or that the item is in a delete queue.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_NOTSTORED = 14;

    /**
     * <p>Item with this key was not found (with "get" operation or "cas"
     * operations).</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_NOTFOUND = 16;

    /**
     * <p>Partial network data read error.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_PARTIAL_READ = 18;

    /**
     * <p>Some errors occurred during multi-get.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_SOME_ERRORS = 19;

    /**
     * <p>Server list is empty.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_NO_SERVERS = 20;

    /**
     * <p>End of result set.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_END = 21;

    /**
     * <p>System error.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_ERRNO = 26;

    /**
     * <p>The operation was buffered.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_BUFFERED = 32;

    /**
     * <p>The operation timed out.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_TIMEOUT = 31;

    /**
     * <p>Bad key.</p>
     * @link https://php.net/manual/en/memcached.constants.php, http://docs.libmemcached.org/index.html
     */
    /**
     * <p>MEMCACHED_BAD_KEY_PROVIDED: The key provided is not a valid key.</p>
     */
    public const RES_BAD_KEY_PROVIDED = 33;

    /**
     * <p>MEMCACHED_STORED: The requested object has been successfully stored on the server.</p>
     */
    public const RES_STORED = 15;

    /**
     * <p>MEMCACHED_DELETED: The object requested by the key has been deleted.</p>
     */
    public const RES_DELETED = 22;

    /**
     * <p>MEMCACHED_STAT: A “stat” command has been returned in the protocol.</p>
     */
    public const RES_STAT = 24;

    /**
     * <p>MEMCACHED_ITEM: An item has been fetched (this is an internal error only).</p>
     */
    public const RES_ITEM = 25;

    /**
     * <p>MEMCACHED_NOT_SUPPORTED: The given method is not supported in the server.</p>
     */
    public const RES_NOT_SUPPORTED = 28;

    /**
     * <p>MEMCACHED_FETCH_NOTFINISHED: A request has been made, but the server has not finished the fetch of the last request.</p>
     */
    public const RES_FETCH_NOTFINISHED = 30;

    /**
     * <p>MEMCACHED_SERVER_MARKED_DEAD: The requested server has been marked dead.</p>
     */
    public const RES_SERVER_MARKED_DEAD = 35;

    /**
     * <p>MEMCACHED_UNKNOWN_STAT_KEY: The server you are communicating with has a stat key which has not be defined in the protocol.</p>
     */
    public const RES_UNKNOWN_STAT_KEY = 36;

    /**
     * <p>MEMCACHED_INVALID_HOST_PROTOCOL: The server you are connecting too has an invalid protocol. Most likely you are connecting to an older server that does not speak the binary protocol.</p>
     */
    public const RES_INVALID_HOST_PROTOCOL = 34;

    /**
     * <p>MEMCACHED_MEMORY_ALLOCATION_FAILURE: An error has occurred while trying to allocate memory.</p>
     */
    public const RES_MEMORY_ALLOCATION_FAILURE = 17;

    /**
     * <p>MEMCACHED_E2BIG: Item is too large for the server to store.</p>
     */
    public const RES_E2BIG = 37;

    /**
     * <p>MEMCACHED_KEY_TOO_BIG: The key that has been provided is too large for the given server.</p>
     */
    public const RES_KEY_TOO_BIG = 39;

    /**
     * <p>MEMCACHED_SERVER_TEMPORARILY_DISABLED</p>
     */
    public const RES_SERVER_TEMPORARILY_DISABLED = 47;

    /**
     * <p>MEMORY_ALLOCATION_FAILURE: An error has occurred while trying to allocate memory.
     *
     * #if defined(LIBMEMCACHED_VERSION_HEX) && LIBMEMCACHED_VERSION_HEX >= 0x01000008</p>
     */
    public const RES_SERVER_MEMORY_ALLOCATION_FAILURE = 48;

    /**
     * <p>MEMCACHED_AUTH_PROBLEM: An unknown issue has occured during authentication.</p>
     */
    public const RES_AUTH_PROBLEM = 40;

    /**
     * <p>MEMCACHED_AUTH_FAILURE: The credentials provided are not valid for this server.</p>
     */
    public const RES_AUTH_FAILURE = 41;

    /**
     * <p>MEMCACHED_AUTH_CONTINUE: Authentication has been paused.</p>
     */
    public const RES_AUTH_CONTINUE = 42;

    /**
     * <p>MEMCACHED_CONNECTION_FAILURE: A unknown error has occured while trying to connect to a server.</p>
     */
    public const RES_CONNECTION_FAILURE = 3;

    /**
     * MEMCACHED_CONNECTION_BIND_FAILURE: We were not able to bind() to the socket.
     */
    #[Deprecated('Deprecated since version 0.30(libmemcached)')]
    public const RES_CONNECTION_BIND_FAILURE = 4;

    /**
     * <p>MEMCACHED_READ_FAILURE: A read failure has occurred.</p>
     */
    public const RES_READ_FAILURE = 6;

    /**
     * <p>MEMCACHED_DATA_DOES_NOT_EXIST: The data requested with the key given was not found.</p>
     */
    public const RES_DATA_DOES_NOT_EXIST = 13;

    /**
     * <p>MEMCACHED_VALUE: A value has been returned from the server (this is an internal condition only).</p>
     */
    public const RES_VALUE = 23;

    /**
     * <p>MEMCACHED_FAIL_UNIX_SOCKET: A connection was not established with the server via a unix domain socket.</p>
     */
    public const RES_FAIL_UNIX_SOCKET = 27;

    /**
     * No key was provided.</p>
     */
    #[Deprecated('Deprecated since version 0.30 (libmemcached). Use MEMCACHED_BAD_KEY_PROVIDED instead.')]
    public const RES_NO_KEY_PROVIDED = 29;

    /**
     * <p>MEMCACHED_INVALID_ARGUMENTS: The arguments supplied to the given function were not valid.</p>
     */
    public const RES_INVALID_ARGUMENTS = 38;

    /**
     * <p>MEMCACHED_PARSE_ERROR: An error has occurred while trying to parse the configuration string. You should use memparse to determine what the error was.</p>
     */
    public const RES_PARSE_ERROR = 43;

    /**
     * <p>MEMCACHED_PARSE_USER_ERROR: An error has occurred in parsing the configuration string.</p>
     */
    public const RES_PARSE_USER_ERROR = 44;

    /**
     * <p>MEMCACHED_DEPRECATED: The method that was requested has been deprecated.</p>
     */
    public const RES_DEPRECATED = 45;

    //unknow
    public const RES_IN_PROGRESS = 46;

    /**
     * <p>MEMCACHED_MAXIMUM_RETURN: This in an internal only state.</p>
     */
    public const RES_MAXIMUM_RETURN = 49;

    /**
     * Server callbacks, if compiled with --memcached-protocol
     * @link https://github.com/php-memcached-dev/php-memcached/blob/v3.1.5/memcached-api.php
     */
    public const ON_CONNECT = 0;
    public const ON_ADD = 1;
    public const ON_APPEND = 2;
    public const ON_DECREMENT = 3;
    public const ON_DELETE = 4;
    public const ON_FLUSH = 5;
    public const ON_GET = 6;
    public const ON_INCREMENT = 7;
    public const ON_NOOP = 8;
    public const ON_PREPEND = 9;
    public const ON_QUIT = 10;
    public const ON_REPLACE = 11;
    public const ON_SET = 12;
    public const ON_STAT = 13;
    public const ON_VERSION = 14;

    /**
     * Constants used when compiled with --memcached-protocol
     * @link https://github.com/php-memcached-dev/php-memcached/blob/v3.1.5/memcached-api.php
     */
    public const RESPONSE_SUCCESS = 0;
    public const RESPONSE_KEY_ENOENT = 1;
    public const RESPONSE_KEY_EEXISTS = 2;
    public const RESPONSE_E2BIG = 3;
    public const RESPONSE_EINVAL = 4;
    public const RESPONSE_NOT_STORED = 5;
    public const RESPONSE_DELTA_BADVAL = 6;
    public const RESPONSE_NOT_MY_VBUCKET = 7;
    public const RESPONSE_AUTH_ERROR = 32;
    public const RESPONSE_AUTH_CONTINUE = 33;
    public const RESPONSE_UNKNOWN_COMMAND = 129;
    public const RESPONSE_ENOMEM = 130;
    public const RESPONSE_NOT_SUPPORTED = 131;
    public const RESPONSE_EINTERNAL = 132;
    public const RESPONSE_EBUSY = 133;
    public const RESPONSE_ETMPFAIL = 134;

    /**
     * <p>Failed to create network socket.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_CONNECTION_SOCKET_CREATE_FAILURE = 11;

    /**
     * <p>Payload failure: could not compress/decompress or serialize/unserialize the value.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const RES_PAYLOAD_FAILURE = -1001;

    /**
     * <p>The default PHP serializer.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const SERIALIZER_PHP = 1;

    /**
     * <p>The igbinary serializer.
     * Instead of textual representation it stores PHP data structures in a
     * compact binary form, resulting in space and time gains.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const SERIALIZER_IGBINARY = 2;

    /**
     * <p>The JSON serializer. Requires PHP 5.2.10+.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const SERIALIZER_JSON = 3;
    public const SERIALIZER_JSON_ARRAY = 4;

    /**
     * <p>The msgpack serializer.</p>
     * @link https://github.com/php-memcached-dev/php-memcached/blob/v3.1.5/memcached-api.php
     */
    public const SERIALIZER_MSGPACK = 5;
    public const COMPRESSION_FASTLZ = 2;
    public const COMPRESSION_ZLIB = 1;

    /**
     * <p>A flag for <b>Memcached::getMulti</b> and
     * <b>Memcached::getMultiByKey</b> to ensure that the keys are
     * returned in the same order as they were requested in. Non-existing keys
     * get a default value of NULL.</p>
     * @link https://php.net/manual/en/memcached.constants.php
     */
    public const GET_PRESERVE_ORDER = 1;

    /**
     * A flag for <b>Memcached::get()</b>, <b>Memcached::getMulti()</b> and
     * <b>Memcached::getMultiByKey()</b> to ensure that the CAS token values are returned as well.
     * @link https://php.net/manual/en/memcached.constants.php
     * @since 3.0.0
     */
    public const GET_EXTENDED = 2;
    public const GET_ERROR_RETURN_VALUE = false;

    /**
     * (PECL memcached &gt;= 0.1.0)<br/>
     * Create a Memcached instance
     * @link https://php.net/manual/en/memcached.construct.php, https://github.com/php-memcached-dev/php-memcached/blob/v3.1.5/php_memcached.c
     * @param string $persistent_id [optional]
     * @param callable $on_new_object_cb [optional]
     * @param string $connection_str [optional]
     */
    public function __construct($persistent_id = '', $on_new_object_cb = null, $connection_str = '') {}

/**
*<div id="memcached.getresultcode" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::getResultCode</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::getResultCode</span> &mdash; <span class="dc-title">返回最后一次操作的结果代码</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.getresultcode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::getResultCode</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::getResultCode()</strong></span> 返回 <strong><span>Memcached::RES_*</span></strong> 系列常量中的一个来表明最后一次执行 Memcached 方法的结果。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.getresultcode-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.getresultcode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  最后一次 Memcached 操作的结果代码。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.getresultcode-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::getResultCode()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">add</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">, </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">);<br />if (</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getResultCode</span><span style="color: #007700">() == </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">RES_NOTSTORED</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// ... <br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div></div>
     * @return int Result code of the last Memcached operation.*/
    public function getResultCode() {}

/**
*<div id="memcached.getresultmessage" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::getResultMessage</h1>  <p class="verinfo">(PECL memcached &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">Memcached::getResultMessage</span> &mdash; <span class="dc-title">返回最后一次操作的结果描述消息</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.getresultmessage-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::getResultMessage</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::getResultMessage()</strong></span> 返回一个字符串来描述最后一次 Memcached 方法执行的结果。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.getresultmessage-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.getresultmessage-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  最后一次 Memcached 操作结果的描述消息。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.getresultmessage-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::getResultMessage()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">add</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">, </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">); </span><span style="color: #FF8000">// first time should succeed<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">add</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">, </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getResultMessage</span><span style="color: #007700">(),</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>NOT STORED<br></span></div>    </div>   </div>  </span> </div></div>
     * @return string Message describing the result of the last Memcached operation.*/
    public function getResultMessage() {}

/**
*<div id="memcached.get" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::get</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::get</span> &mdash; <span class="dc-title">检索元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.get-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::get</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$cache_cb</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$get_flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::get()</strong></span> 返回之前存储在 <span class="parameter" style="color:#3A95FF">key</span> 下的元素。如果元素被找到，并且   <span class="parameter" style="color:#3A95FF">get_flags</span> 指定为 <strong><span>Memcached::GET_EXTENDED</span></strong>，也会返回该元素的 CAS   记号。关于 CAS 记号的使用，参阅 <span class="methodname" style="color:#CC7832">{@link Memcached::cas()}</span>。可以通过 <span class="parameter" style="color:#3A95FF">cache_cb</span>   参数指定 <a href="https://www.php.net/manual/zh/memcached.callbacks.php" class="link">通读缓存回调</a>。  </p>  <p class="para">  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.get-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       要检索的元素的 key。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">cache_cb</span></dt>     <dd>      <p class="para">       通读缓存回掉函数或 <strong><span>null</span></strong>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">get_flags</span></dt>     <dd>      <p class="para">       flag 控制返回结果。当指定为 <strong><span>Memcached::GET_EXTENDED</span></strong> 时，该函数还将返回 CAS 记号。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.get-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回存储在缓存中的值，否则返回 <strong><span>false</span></strong>。   如果 <span class="parameter" style="color:#3A95FF">get_flags</span> 设置为 <strong><span>Memcached::GET_EXTENDED</span></strong>，则返回包含值和 CAS   记号的数组，而不仅仅返回值。如果 key 不存在，<span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span> 将返回   <strong><span>Memcached::RES_NOTFOUND</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-memcached.get-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>PECL memcached 3.0.0</td>      <td>       移除 <span class="parameter" style="color:#3A95FF">&cas_token</span> 参数。       相反，添加 <span class="parameter" style="color:#3A95FF">get_flags</span>，当赋予 <strong><span>Memcached::GET_EXTENDED</span></strong> 的值时，将确保获取 CAS 记号。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.get-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::get()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">, </span><span style="color: #9876AA">100</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">get</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(100)<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">Memcached::get()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br />if (!(</span><span style="color: #9876AA">$ip </span><span style="color: #007700">= </span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">get</span><span style="color: #007700">(</span><span style="color: #DD0000">'ip_block'</span><span style="color: #007700">))) {<br />    if (</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getResultCode</span><span style="color: #007700">() == </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">RES_NOTFOUND</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">$ip </span><span style="color: #007700">= array();<br />        </span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'ip_block'</span><span style="color: #007700">, </span><span style="color: #9876AA">$ip</span><span style="color: #007700">);<br />    } else {<br />        </span><span style="color: #FF8000">// log error <br />        // ...       <br />    </span><span style="color: #007700">}<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.get-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::getByKey()} - 从特定的服务器检索元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::getMulti()} - 检索多个元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::getDelayed()} - 请求多个元素</span></li>   </ul>  </span> </div></div>
     * @return mixed the value stored in the cache or <b>FALSE</b> otherwise.*/
    public function get($key, callable $cache_cb = null, $flags = 0) {}

/**
*<div id="memcached.getbykey" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::getByKey</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::getByKey</span> &mdash; <span class="dc-title">从特定的服务器检索元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.getbykey-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::getByKey</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$cache_cb</span><span class="initializer"> = <strong><span>null</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$get_flags</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::getByKey()</strong></span> 除了可以通过 <span class="parameter" style="color:#3A95FF">server_key</span> 参数自由的指定 <span class="parameter" style="color:#3A95FF">key</span>   所映射的服务器外，在功能上等同于 <span class="methodname" style="color:#CC7832">{@link Memcached::get()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.getbykey-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">server_key</span></dt>     <dd>      <p class="para">       本键名用于识别储存和读取值的服务器。没有将实际的键名散列到具体的项目，而是在决定与哪一个 memcached 服务器通信时将其散列为服务器键名。这使得关联的项目在单一的服务上被组合起来以提高多重操作的效率。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       要读取的元素的 key。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">cache_cb</span></dt>     <dd>      <p class="para">       通读缓存回掉函数或 <strong><span>null</span></strong>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">get_flags</span></dt>     <dd>      <p class="para">       flag 控制返回结果。当指定 <strong><span>Memcached::GET_EXTENDED</span></strong> 的值时，将返回 CAS 记号。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.getbykey-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回存储在缓存中的值，否则返回 <strong><span>false</span></strong>。   如果 key 不存在，<span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span> 返回 <strong><span>Memcached::RES_NOTFOUND</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-memcached.getbykey-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>PECL memcached 3.0.0</td>      <td>       移除 <span class="parameter" style="color:#3A95FF">&cas_token</span> 参数。       相反，添加 <span class="parameter" style="color:#3A95FF">get_flags</span>，当赋予 <strong><span>Memcached::GET_EXTENDED</span></strong> 的值时，将确保获取 CAS 记号。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.getbykey-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::get()} - 检索元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::getMulti()} - 检索多个元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::getDelayed()} - 请求多个元素</span></li>   </ul>  </span> </div></div>
     * @return mixed the value stored in the cache or <b>FALSE</b> otherwise.*/
    public function getByKey($server_key, $key, callable $cache_cb = null, $flags = 0) {}

/**
*<div id="memcached.getmulti" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::getMulti</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::getMulti</span> &mdash; <span class="dc-title">检索多个元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.getmulti-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::getMulti</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$keys</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$get_flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::getMulti()</strong></span> 与 <span class="methodname" style="color:#CC7832">{@link Memcached::get()}</span> 类似，但是这个方法用来检索    <span class="parameter" style="color:#3A95FF">keys</span> 数组指定的多个 key 对应的元素。   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <p class="para">     在 v3.0 之前，使用的第二个参数是 <span class="parameter" style="color:#3A95FF">&cas_tokens</span>。     它会填充进元素的 CAS token 值。     在本扩展里，<span class="parameter" style="color:#3A95FF">&cas_tokens</span> 参数在 v3.0 中已经移除。     它被新的附加选项（flag） <strong><span>Memcached::GET_EXTENDED</span></strong> 代替，需要在 <span class="parameter" style="color:#3A95FF">get_flags</span> 值里使用。    </p>   </p></blockquote>  </p>  <p class="para">   <span class="parameter" style="color:#3A95FF">get_flags</span>参数可以用做指定<span class="function"><strong style="color:#CC7832">Memcached::getMulti()</strong></span>的附加选项。   当前，仅可以指定为<strong><span>Memcached::GET_PRESERVE_ORDER</span></strong>以保证返回的key的顺序和请求时一致。   <strong><span>Memcached::GET_EXTENDED</span></strong> 可以确保同时返回了 CAS token 信息。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.getmulti-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">keys</span></dt>     <dd>      <p class="para">       要检索的key的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">get_flags</span></dt>     <dd>      <p class="para">       Get 操作的附加选项。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.getmulti-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回检索到的元素的数组 或者在失败时返回 <strong><span>false</span></strong>。   如需要则使用 <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-memcached.getmulti-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>PECL memcached 3.0.0</td>      <td>       移除 <span class="parameter" style="color:#3A95FF">&cas_tokens</span> 参数。       新增 <strong><span>Memcached::GET_EXTENDED</span></strong>，当作为 flag 传递时，确保获取到 CAS token。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.getmulti-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::getMulti()</strong></span> 的 Memcached v3 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 扩展版本 v3 有效<br /><br /></span><span style="color: #9876AA">$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$items </span><span style="color: #007700">= array(<br />    </span><span style="color: #DD0000">'key1' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'value1'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'key2' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'value2'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'key3' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'value3'<br /></span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setMulti</span><span style="color: #007700">(</span><span style="color: #9876AA">$items</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMulti</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'key1'</span><span style="color: #007700">, </span><span style="color: #DD0000">'key3'</span><span style="color: #007700">, </span><span style="color: #DD0000">'badkey'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(2) {<br>  [&quot;key1&quot;]=&gt;<br>  string(6) &quot;value1&quot;<br>  [&quot;key3&quot;]=&gt;<br>  string(6) &quot;value3&quot;<br>}<br></span></div>    </div>   </div>  </span>    <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">Memcached::getMulti()</strong></span> 的 Memcached v1 和 v2 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 仅在扩展版本 v1 和 v2 中有效<br /><br /></span><span style="color: #9876AA">$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$items </span><span style="color: #007700">= array(<br />    </span><span style="color: #DD0000">'key1' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'value1'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'key2' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'value2'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'key3' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'value3'<br /></span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setMulti</span><span style="color: #007700">(</span><span style="color: #9876AA">$items</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMulti</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'key1'</span><span style="color: #007700">, </span><span style="color: #DD0000">'key3'</span><span style="color: #007700">, </span><span style="color: #DD0000">'badkey'</span><span style="color: #007700">), </span><span style="color: #9876AA">$cas</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">, </span><span style="color: #9876AA">$cas</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(2) {<br>  [&quot;key1&quot;]=&gt;<br>  string(6) &quot;value1&quot;<br>  [&quot;key3&quot;]=&gt;<br>  string(6) &quot;value3&quot;<br>}<br>array(2) {<br>  [&quot;key1&quot;]=&gt;<br>  float(2360)<br>  [&quot;key3&quot;]=&gt;<br>  float(2362)<br>}<br></span></div>    </div>   </div>  </p>   <p class="para">   <div class="example" id="">    <p><strong>示例 #3 <strong><span>Memcached::GET_PRESERVE_ORDER</span></strong> 的 Memcached v3 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//  v3 扩展有效<br /><br /></span><span style="color: #9876AA">$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$data </span><span style="color: #007700">= array(<br />    </span><span style="color: #DD0000">'foo' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'foo-data'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'bar' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'bar-data'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'baz' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'baz-data'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'lol' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'lol-data'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'kek' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'kek-data'</span><span style="color: #007700">,<br />);<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setMulti</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">, </span><span style="color: #9876AA">3600</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$keys </span><span style="color: #007700">= </span><span style="color: #9876AA">array_keys</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$keys</span><span style="color: #007700">[] = </span><span style="color: #DD0000">'zoo'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$got </span><span style="color: #007700">= </span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMulti</span><span style="color: #007700">(</span><span style="color: #9876AA">$keys</span><span style="color: #007700">, </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">GET_PRESERVE_ORDER</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$got </span><span style="color: #007700">as </span><span style="color: #9876AA">$k </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$v</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$k</span><span style="color: #DD0000"> </span><span style="color: #9876AA">$v</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>foo foo-data<br>bar bar-data<br>baz baz-data<br>lol lol-data<br>kek kek-data<br>zoo <br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #4 <strong><span>Memcached::GET_PRESERVE_ORDER</span></strong> 的 Memcached v1 和 v2 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 在扩展版本 v1 和 v2  中有效<br /><br /></span><span style="color: #9876AA">$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$data </span><span style="color: #007700">= array(<br />    </span><span style="color: #DD0000">'foo' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'foo-data'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'bar' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'bar-data'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'baz' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'baz-data'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'lol' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'lol-data'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'kek' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'kek-data'</span><span style="color: #007700">,<br />);<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setMulti</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">, </span><span style="color: #9876AA">3600</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$null </span><span style="color: #007700">= </span><span style="color: #9876AA">null</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$keys </span><span style="color: #007700">= </span><span style="color: #9876AA">array_keys</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$keys</span><span style="color: #007700">[] = </span><span style="color: #DD0000">'zoo'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$got </span><span style="color: #007700">= </span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMulti</span><span style="color: #007700">(</span><span style="color: #9876AA">$keys</span><span style="color: #007700">, </span><span style="color: #9876AA">$null</span><span style="color: #007700">, </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">GET_PRESERVE_ORDER</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$got </span><span style="color: #007700">as </span><span style="color: #9876AA">$k </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$v</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$k</span><span style="color: #DD0000"> </span><span style="color: #9876AA">$v</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>foo foo-data<br>bar bar-data<br>baz baz-data<br>lol lol-data<br>kek kek-data<br>zoo <br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.getmulti-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::getMultiByKey()} - 从特定服务器检索多个元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::get()} - 检索元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::getDelayed()} - 请求多个元素</span></li>   </ul>  </span> </div></div>
     * @return mixed the array of found items or <b>FALSE</b> on failure.*/
    public function getMulti(array $keys, $flags = 0) {}

/**
*<div id="memcached.getmultibykey" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::getMultiByKey</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::getMultiByKey</span> &mdash; <span class="dc-title">从特定服务器检索多个元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.getmultibykey-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::getMultiByKey</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$keys</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$get_flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">  <span class="function"><strong style="color:#CC7832">Memcached::getMultiByKey()</strong></span>除了可以通过<span class="parameter" style="color:#3A95FF">server_key</span>参数自由的指定<span class="parameter" style="color:#3A95FF">key</span>   所映射的服务器外， 在功能上等同于<span class="methodname" style="color:#CC7832">{@link Memcached::getMulti()}</span>。(译注: 关于*ByKey系列方法及$server_key的工作原理请参照addByKey方法文档)  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.getmultibykey-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">server_key</span></dt>     <dd>      <p class="para">       本键名用于识别储存和读取值的服务器。没有将实际的键名散列到具体的项目，而是在决定与哪一个 memcached 服务器通信时将其散列为服务器键名。这使得关联的项目在单一的服务上被组合起来以提高多重操作的效率。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">keys</span></dt>     <dd>      <p class="para">       要检索的key的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">get_flags</span></dt>     <dd>      <p class="para">       get操作的附加选项。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.getmultibykey-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回检索到的元素的数组 或者在失败时返回 <strong><span>false</span></strong>.   如需要则使用 <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-memcached.getmultibykey-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>PECL memcached 3.0.0</td>      <td>       移除 <span class="parameter" style="color:#3A95FF">&cas_tokens</span> 参数。       新增 <strong><span>Memcached::GET_EXTENDED</span></strong>，当作为 flag 传递时，确保获取到 CAS token。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.getmultibykey-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::getMulti()} - 检索多个元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::get()} - 检索元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::getDelayed()} - 请求多个元素</span></li>   </ul>  </span> </div></div>
     * @return array|false the array of found items or <b>FALSE</b> on failure.*/
    public function getMultiByKey($server_key, array $keys, $flags = 0) {}

/**
*<div id="memcached.getdelayed" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::getDelayed</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::getDelayed</span> &mdash; <span class="dc-title">请求多个元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.getdelayed-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::getDelayed</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$keys</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$with_cas</span><span class="initializer"> = <strong><span>false</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$value_cb</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::getDelayed()</strong></span> 向 Memcached 服务端发出一个检索 <span class="parameter" style="color:#3A95FF">keys</span> 指定的多个   key 对应元素的请求。这个方法不会等待响应而是立即返回。当你需要收集元素值时，调用 <span class="methodname" style="color:#CC7832">{@link Memcached::fetch()}</span> 或   <span class="methodname" style="color:#CC7832">{@link Memcached::fetchAll()}</span>。如果 <span class="parameter" style="color:#3A95FF">with_cas</span> 设置为 true，会同时请求每个元素的 CAS 标记。  </p>  <p class="para">  可以通过参数 <span class="parameter" style="color:#3A95FF">value_cb</span> 指定一个 <a href="https://www.php.net/manual/zh/memcached.callbacks.php" class="link">result callback</a> 来替代明确的抓取结果（fetch 或 fetchAll 为明确抓取方式）。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.getdelayed-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">keys</span></dt>     <dd>      <p class="para">       要请求的 key 的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">with_cas</span></dt>     <dd>      <p class="para">       是否同时请求 CAS 标记。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value_cb</span></dt>     <dd>      <p class="para">       结果回调函数或 <strong><span>null</span></strong>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.getdelayed-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   如需要则使用 <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.getdelayed-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::getDelayed()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'int'</span><span style="color: #007700">, </span><span style="color: #9876AA">99</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'string'</span><span style="color: #007700">, </span><span style="color: #DD0000">'a simple string'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'array'</span><span style="color: #007700">, array(</span><span style="color: #9876AA">11</span><span style="color: #007700">, </span><span style="color: #9876AA">12</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDelayed</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'int'</span><span style="color: #007700">, </span><span style="color: #DD0000">'array'</span><span style="color: #007700">), </span><span style="color: #9876AA">true</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetchAll</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(2) {<br>  [0]=&gt;<br>  array(3) {<br>    [&quot;key&quot;]=&gt;<br>    string(3) &quot;int&quot;<br>    [&quot;value&quot;]=&gt;<br>    int(99)<br>    [&quot;cas&quot;]=&gt;<br>    float(2363)<br>  }<br>  [1]=&gt;<br>  array(3) {<br>    [&quot;key&quot;]=&gt;<br>    string(5) &quot;array&quot;<br>    [&quot;value&quot;]=&gt;<br>    array(2) {<br>      [0]=&gt;<br>      int(11)<br>      [1]=&gt;<br>      int(12)<br>    }<br>    [&quot;cas&quot;]=&gt;<br>    float(2365)<br>  }<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.getdelayed-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::getDelayedByKey()} - 从指定的服务器上请求多个元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::fetch()} - 读取下一个结果</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::fetchAll()} - 读取所有剩余结果</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function getDelayed(array $keys, $with_cas = null, callable $value_cb = null) {}

/**
*<div id="memcached.getdelayedbykey" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::getDelayedByKey</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::getDelayedByKey</span> &mdash; <span class="dc-title">从指定的服务器上请求多个元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.getdelayedbykey-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::getDelayedByKey</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$keys</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$with_cas</span><span class="initializer"> = <strong><span>false</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$value_cb</span><span class="initializer"> = <strong><span>null</span></strong></span></span><br>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::getDelayedByKey()</strong></span> 除了可以通过 <span class="parameter" style="color:#3A95FF">server_key</span> 参数自由的指定 <span class="parameter" style="color:#3A95FF">key</span>   所映射的服务器外，在功能上等同于 <span class="methodname" style="color:#CC7832">{@link Memcached::getDelayed()}</span>。(译注: 关于 *ByKey 系列方法及 $server_key 的工作原理请参照 addByKey 方法文档)  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.getdelayedbykey-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">server_key</span></dt>     <dd>      <p class="para">       本键名用于识别储存和读取值的服务器。没有将实际的键名散列到具体的项目，而是在决定与哪一个 memcached 服务器通信时将其散列为服务器键名。这使得关联的项目在单一的服务上被组合起来以提高多重操作的效率。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">keys</span></dt>     <dd>      <p class="para">       要请求的 key 的数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">with_cas</span></dt>     <dd>      <p class="para">       是否同时请求 CAS 标记。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value_cb</span></dt>     <dd>      <p class="para">       结果回调函数或 <strong><span>null</span></strong>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.getdelayedbykey-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   如需要则使用 <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.getdelayedbykey-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::getDelayed()} - 请求多个元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::fetch()} - 读取下一个结果</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::fetchAll()} - 读取所有剩余结果</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function getDelayedByKey($server_key, array $keys, $with_cas = null, callable $value_cb = null) {}

/**
*<div id="memcached.fetch" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::fetch</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::fetch</span> &mdash; <span class="dc-title">读取下一个结果</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.fetch-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::fetch</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::fetch()</strong></span> 从最后一次请求中检索下一个结果。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.fetch-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.fetch-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回下一个结果或其他情况下返回 <strong><span>false</span></strong>。如果结果集已经检索完毕，<span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span> 将返回 <strong><span>Memcached::RES_END</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.fetch-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::fetch()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'int'</span><span style="color: #007700">, </span><span style="color: #9876AA">99</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'string'</span><span style="color: #007700">, </span><span style="color: #DD0000">'a simple string'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'array'</span><span style="color: #007700">, array(</span><span style="color: #9876AA">11</span><span style="color: #007700">, </span><span style="color: #9876AA">12</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDelayed</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'int'</span><span style="color: #007700">, </span><span style="color: #DD0000">'array'</span><span style="color: #007700">), </span><span style="color: #9876AA">true</span><span style="color: #007700">);<br />while (</span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetch</span><span style="color: #007700">()) {<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$result</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(3) {<br>  [&quot;key&quot;]=&gt;<br>  string(3) &quot;int&quot;<br>  &quot;value&quot;]=&gt;<br>  int(99)<br>  [&quot;cas&quot;]=&gt;<br>  float(2363)<br>}<br>array(3) {<br>  [&quot;key&quot;]=&gt;<br>  string(5) &quot;array&quot;<br>  [&quot;value&quot;]=&gt;<br>  array(2) {<br>    [0]=&gt;<br>    int(11)<br>    [1]=&gt;<br>    int(12)<br>  }<br>  [&quot;cas&quot;]=&gt;<br>  float(2365)<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.fetch-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::fetchAll()} - 读取所有剩余结果</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::getDelayed()} - 请求多个元素</span></li>   </ul>  </span> </div></div>
     * @return array|false the next result or <b>FALSE</b> otherwise.*/
    public function fetch() {}

/**
*<div id="memcached.fetchall" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::fetchAll</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::fetchAll</span> &mdash; <span class="dc-title">读取所有剩余结果</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.fetchall-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::fetchAll</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::fetchAll()</strong></span> 从最后一次请求中检索所有剩余结果。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.fetchall-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.fetchall-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回结果集 或者在失败时返回 <strong><span>false</span></strong>。   如需要则使用 <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.fetchall-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function">{@link Memcached::getDelayed()}</span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'int'</span><span style="color: #007700">, </span><span style="color: #9876AA">99</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'string'</span><span style="color: #007700">, </span><span style="color: #DD0000">'a simple string'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'array'</span><span style="color: #007700">, array(</span><span style="color: #9876AA">11</span><span style="color: #007700">, </span><span style="color: #9876AA">12</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDelayed</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'int'</span><span style="color: #007700">, </span><span style="color: #DD0000">'array'</span><span style="color: #007700">), </span><span style="color: #9876AA">true</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fetchAll</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(2) {<br>  [0]=&gt;<br>  array(3) {<br>    [&quot;key&quot;]=&gt;<br>    string(3) &quot;int&quot;<br>    [&quot;value&quot;]=&gt;<br>    int(99)<br>    [&quot;cas&quot;]=&gt;<br>    float(2363)<br>  }<br>  [1]=&gt;<br>  array(3) {<br>    [&quot;key&quot;]=&gt;<br>    string(5) &quot;array&quot;<br>    [&quot;value&quot;]=&gt;<br>    array(2) {<br>      [0]=&gt;<br>      int(11)<br>      [1]=&gt;<br>      int(12)<br>    }<br>    [&quot;cas&quot;]=&gt;<br>    float(2365)<br>  }<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.fetchall-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::fetch()} - 读取下一个结果</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::getDelayed()} - 请求多个元素</span></li>   </ul>  </span> </div></div>
     * @return array|false the results or <b>FALSE</b> on failure.*/
    public function fetchAll() {}

/**
*<div id="memcached.set" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::set</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::set</span> &mdash; <span class="dc-title">存储一个元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.set-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::set</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::set()</strong></span> 将 <span class="parameter" style="color:#3A95FF">value</span>   存储在一个 memcached 服务器上的 <span class="parameter" style="color:#3A95FF">key</span> 下。<span class="parameter" style="color:#3A95FF">expiration</span> 参数   用于控制值的过期时间。  </p>  <p class="para">  值可以是任何有效的非资源型 php 类型，因为资源类型不能被序列化存储。如果 <strong><span>Memcached::OPT_COMPRESSION</span></strong>  选项开启，序列化的值同样会被压缩存储。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.set-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       用于存储值的键名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       存储的值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">expiration</span></dt>     <dd>      <p class="para">       到期时间，默认为 0。 更多信息请参见<a href="https://www.php.net/manual/zh/memcached.expiration.php" class="link">到期时间</a>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.set-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   如需要则使用 <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.set-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::set()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'int'</span><span style="color: #007700">, </span><span style="color: #9876AA">99</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'string'</span><span style="color: #007700">, </span><span style="color: #DD0000">'a simple string'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'array'</span><span style="color: #007700">, array(</span><span style="color: #9876AA">11</span><span style="color: #007700">, </span><span style="color: #9876AA">12</span><span style="color: #007700">));<br /></span><span style="color: #FF8000">// 'object' 这个 key 将在 5 分钟后过期 <br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'object'</span><span style="color: #007700">, new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">, </span><span style="color: #9876AA">time</span><span style="color: #007700">() + </span><span style="color: #9876AA">300</span><span style="color: #007700">);<br /><br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">get</span><span style="color: #007700">(</span><span style="color: #DD0000">'int'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">get</span><span style="color: #007700">(</span><span style="color: #DD0000">'string'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">get</span><span style="color: #007700">(</span><span style="color: #DD0000">'array'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">get</span><span style="color: #007700">(</span><span style="color: #DD0000">'object'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(99)<br>string(15) &quot;a simple string&quot;<br>array(2) {<br>  [0]=&gt;<br>  int(11)<br>  [1]=&gt;<br>  int(12)<br>}<br>object(stdClass)#1 (0) {<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.set-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::setByKey()} - 将元素存储到指定的服务器上</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::add()} - 向新 key 添加元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::replace()} - 替换已存在 key 下的元素</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function set($key, $value, $expiration = 0, $udf_flags = 0) {}

/**
*<div id="memcached.setbykey" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::setByKey</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::setByKey</span> &mdash; <span class="dc-title">将元素存储到指定的服务器上</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.setbykey-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::setByKey</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   除了可以使用 <span class="parameter" style="color:#3A95FF">server_key</span> 自由的将 <span class="parameter" style="color:#3A95FF">key</span> 映射到指定服务器外，   <span class="function"><strong style="color:#CC7832">Memcached::setByKey()</strong></span> 在功能上等同于 <span class="methodname" style="color:#CC7832">{@link Memcached::set()}</span>。   （译注: 关于 *ByKey 系列方法及 $server_key 的工作原理请参照 addByKey 方法文档）。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.setbykey-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">server_key</span></dt>     <dd>      <p class="para">       本键名用于识别储存和读取值的服务器。没有将实际的键名散列到具体的项目，而是在决定与哪一个 memcached 服务器通信时将其散列为服务器键名。这使得关联的项目在单一的服务上被组合起来以提高多重操作的效率。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       用于存储值的键名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       存储的值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">expiration</span></dt>     <dd>      <p class="para">       到期时间，默认为 0。 更多信息请参见<a href="https://www.php.net/manual/zh/memcached.expiration.php" class="link">到期时间</a>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.setbykey-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   如需要则使用 <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.setbykey-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::setByKey()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 保证 block-ip 系列 key 的存储在同一台服务器上。<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setByKey</span><span style="color: #007700">(</span><span style="color: #DD0000">'api-cache'</span><span style="color: #007700">, </span><span style="color: #DD0000">'block-ip:169.254.253.252'</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setByKey</span><span style="color: #007700">(</span><span style="color: #DD0000">'api-cache'</span><span style="color: #007700">, </span><span style="color: #DD0000">'block-ip:169.127.127.202'</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.setbykey-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::set()} - 存储一个元素</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function setByKey($server_key, $key, $value, $expiration = 0, $udf_flags = 0) {}

/**
*<div id="memcached.touch" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::touch</h1>  <p class="verinfo">(PECL memcached &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Memcached::touch</span> &mdash; <span class="dc-title">Set a new expiration on an item</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.touch-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::touch</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::touch()</strong></span> sets a new expiration value on the given key.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.touch-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       用于存储值的键名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">expiration</span></dt>     <dd>      <p class="para">       到期时间，默认为 0。 更多信息请参见<a href="https://www.php.net/manual/zh/memcached.expiration.php" class="link">到期时间</a>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.touch-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   如需要则使用 <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.touch-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::touchByKey()} - Set a new expiration on an item on a specific server</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function touch($key, $expiration = 0) {}

/**
*<div id="memcached.touchbykey" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::touchByKey</h1>  <p class="verinfo">(PECL memcached &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Memcached::touchByKey</span> &mdash; <span class="dc-title">Set a new expiration on an item on a specific server</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.touchbykey-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::touchByKey</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::touchByKey()</strong></span> is functionally equivalent to   <span class="methodname" style="color:#CC7832">{@link Memcached::touch()}</span>, except that the free-form   <span class="parameter" style="color:#3A95FF">server_key</span> can be used to map the   <span class="parameter" style="color:#3A95FF">key</span> to a specific server.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.touchbykey-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">server_key</span></dt>     <dd>      <p class="para">       本键名用于识别储存和读取值的服务器。没有将实际的键名散列到具体的项目，而是在决定与哪一个 memcached 服务器通信时将其散列为服务器键名。这使得关联的项目在单一的服务上被组合起来以提高多重操作的效率。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       用于存储值的键名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">expiration</span></dt>     <dd>      <p class="para">       到期时间，默认为 0。 更多信息请参见<a href="https://www.php.net/manual/zh/memcached.expiration.php" class="link">到期时间</a>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.touchbykey-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   如需要则使用 <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.touchbykey-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::touch()} - Set a new expiration on an item</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function touchByKey($server_key, $key, $expiration) {}

/**
*<div id="memcached.setmulti" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::setMulti</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::setMulti</span> &mdash; <span class="dc-title">存储多个元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.setmulti-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::setMulti</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$items</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::setMulti()</strong></span> 类似于 <span class="methodname" style="color:#CC7832">{@link Memcached::set()}</span>，但是使用了   参数 <span class="parameter" style="color:#3A95FF">items</span> 指定多个元素来替代单独的 key/value 设置以便于对多个元素的操作。<span class="parameter" style="color:#3A95FF">expiration</span>   参数指定的时候一次应用到所有的元素上。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.setmulti-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">items</span></dt>     <dd>      <p class="para">       存放在服务器上的键／值对数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">expiration</span></dt>     <dd>      <p class="para">       到期时间，默认为 0。 更多信息请参见<a href="https://www.php.net/manual/zh/memcached.expiration.php" class="link">到期时间</a>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.setmulti-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   如需要则使用 <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.setmulti-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::setMulti()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$items </span><span style="color: #007700">= array(<br />    </span><span style="color: #DD0000">'key1' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'value1'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'key2' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'value2'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'key3' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'value3'<br /></span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setMulti</span><span style="color: #007700">(</span><span style="color: #9876AA">$items</span><span style="color: #007700">, </span><span style="color: #9876AA">time</span><span style="color: #007700">() + </span><span style="color: #9876AA">300</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.setmulti-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::setMultiByKey()} - 在指定服务器存储多个元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::set()} - 存储一个元素</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function setMulti(array $items, $expiration = 0, $udf_flags = 0) {}

/**
*<div id="memcached.setmultibykey" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::setMultiByKey</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::setMultiByKey</span> &mdash; <span class="dc-title">在指定服务器存储多个元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.setmultibykey-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::setMultiByKey</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$items</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   除了可以使用 <span class="parameter" style="color:#3A95FF">server_key</span> 自由的将 <span class="parameter" style="color:#3A95FF">key</span> 映射到指定服务器外，   <span class="function"><strong style="color:#CC7832">Memcached::setMultiByKey()</strong></span> 在功能上等同于 <span class="methodname" style="color:#CC7832">{@link Memcached::setMulti()}</span>。   （译注: 关于 *ByKey 系列方法及 $server_key 的工作原理请参照 addByKey 方法文档）。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.setmultibykey-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">server_key</span></dt>     <dd>      <p class="para">       本键名用于识别储存和读取值的服务器。没有将实际的键名散列到具体的项目，而是在决定与哪一个 memcached 服务器通信时将其散列为服务器键名。这使得关联的项目在单一的服务上被组合起来以提高多重操作的效率。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">items</span></dt>     <dd>      <p class="para">       存放在服务器上的键／值对数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">expiration</span></dt>     <dd>      <p class="para">       到期时间，默认为 0。 更多信息请参见<a href="https://www.php.net/manual/zh/memcached.expiration.php" class="link">到期时间</a>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.setmultibykey-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   如需要则使用 <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.setmultibykey-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::setMulti()} - 存储多个元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::set()} - 存储一个元素</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function setMultiByKey($server_key, array $items, $expiration = 0, $udf_flags = 0) {}

/**
*<div id="memcached.cas" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::cas</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::cas</span> &mdash; <span class="dc-title">比较并交换值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.cas-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::cas</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">float</span></span> <span class="parameter" style="color:#3A95FF">$cas_token</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::cas()</strong></span> 执行“检查并设置”的操作，因此仅在当前客户端最后一次取值后，该 key   对应的值没有被其他客户端修改的情况下，才能够将值写入。检查是通过 <span class="parameter" style="color:#3A95FF">cas_token</span>   参数进行的，这个参数是 memcache 分配给已存在元素的唯一 64 位值。怎样获取这个值请查看 <span class="methodname" style="color:#CC7832"><strong>Memcached::get*()</strong></span>   系列方法的文档。注意：这个值作为 float 类型是因为 PHP 的整型空间限制。  </p>  <p class="para">  译注：这是 Memcached 扩展比 Memcache 扩展一个非常重要的优势，在这样一个系统级（Memcache 自身提供）的冲突检测机制（乐观锁）下，才能保证高并发下的数据安全。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.cas-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">cas_token</span></dt>     <dd>      <p class="para">      与已存在元素关联的唯一的值，由 Memcache 生成。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       用于存储值的键名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       存储的值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">expiration</span></dt>     <dd>      <p class="para">       到期时间，默认为 0。 更多信息请参见<a href="https://www.php.net/manual/zh/memcached.expiration.php" class="link">到期时间</a>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.cas-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   如果在元素尝试存储时发现在本客户端最后一次获取后被其他客户端修改，<span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span>   将返回 <strong><span>Memcached::RES_DATA_EXISTS</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.cas-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::cas()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br />do {<br />    </span><span style="color: #FF8000">// 获取ip列表以及它的标记 <br />    </span><span style="color: #9876AA">$ips </span><span style="color: #007700">= </span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">get</span><span style="color: #007700">(</span><span style="color: #DD0000">'ip_block'</span><span style="color: #007700">, </span><span style="color: #9876AA">null</span><span style="color: #007700">, </span><span style="color: #9876AA">$cas</span><span style="color: #007700">);<br />    </span><span style="color: #FF8000">// 如果列表不存在， 创建并进行一个原子添加（如果其他客户端已经添加， 这里就返回false）<br />    </span><span style="color: #007700">if (</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getResultCode</span><span style="color: #007700">() == </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">RES_NOTFOUND</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">$ips </span><span style="color: #007700">= array(</span><span style="color: #9876AA">$_SERVER</span><span style="color: #007700">[</span><span style="color: #DD0000">'REMOTE_ADDR'</span><span style="color: #007700">]);<br />        </span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">add</span><span style="color: #007700">(</span><span style="color: #DD0000">'ip_block'</span><span style="color: #007700">, </span><span style="color: #9876AA">$ips</span><span style="color: #007700">);<br />    </span><span style="color: #FF8000">// 其他情况下，添加ip到列表中， 并以cas方式去存储， 这样当其他客户端修改过， 则返回false <br />    </span><span style="color: #007700">} else { <br />        </span><span style="color: #9876AA">$ips</span><span style="color: #007700">[] = </span><span style="color: #9876AA">$_SERVER</span><span style="color: #007700">[</span><span style="color: #DD0000">'REMOTE_ADDR'</span><span style="color: #007700">];<br />        </span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">cas</span><span style="color: #007700">(</span><span style="color: #9876AA">$cas</span><span style="color: #007700">, </span><span style="color: #DD0000">'ip_block'</span><span style="color: #007700">, </span><span style="color: #9876AA">$ips</span><span style="color: #007700">);<br />    }   <br />} while (</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getResultCode</span><span style="color: #007700">() != </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">RES_SUCCESS</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.cas-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::casByKey()} - 在指定服务器上比较并交换值</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function cas($cas_token, $key, $value, $expiration = 0, $udf_flags = 0) {}

/**
*<div id="memcached.casbykey" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::casByKey</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::casByKey</span> &mdash; <span class="dc-title">在指定服务器上比较并交换值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.casbykey-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::casByKey</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">float</span></span> <span class="parameter" style="color:#3A95FF">$cas_token</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   除了可以使用 <span class="parameter" style="color:#3A95FF">server_key</span> 将 <span class="parameter" style="color:#3A95FF">key</span> 自由的映射到指定服务器外，   <span class="function"><strong style="color:#CC7832">Memcached::casByKey()</strong></span> 和 <span class="methodname" style="color:#CC7832">{@link Memcached::cas()}</span> 在功能上是等同的。   这通常用于需要保持一批相关的 key 在一个中心服务器上的情况。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.casbykey-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">cas_token</span></dt>     <dd>      <p class="para">       与已存在元素关联的唯一的值，由 Memcache 生成。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">server_key</span></dt>     <dd>      <p class="para">       本键名用于识别储存和读取值的服务器。没有将实际的键名散列到具体的项目，而是在决定与哪一个 memcached 服务器通信时将其散列为服务器键名。这使得关联的项目在单一的服务上被组合起来以提高多重操作的效率。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       用于存储值的键名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       存储的值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">expiration</span></dt>     <dd>      <p class="para">       到期时间，默认为 0。 更多信息请参见<a href="https://www.php.net/manual/zh/memcached.expiration.php" class="link">到期时间</a>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.casbykey-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   如果在元素尝试存储时发现在本客户端最后一次获取后被其他客户端修改，<span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span>   将返回 <strong><span>Memcached::RES_DATA_EXISTS</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.casbykey-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::cas()} - 比较并交换值</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function casByKey($cas_token, $server_key, $key, $value, $expiration = 0, $udf_flags = 0) {}

/**
*<div id="memcached.add" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::add</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::add</span> &mdash; <span class="dc-title">向新 key 添加元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.add-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::add</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::add()</strong></span> 与 <span class="methodname" style="color:#CC7832">{@link Memcached::set()}</span> 类似，但如果   <span class="parameter" style="color:#3A95FF">key</span> 已经在服务端存在，则操作失败。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.add-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       用于存储值的键名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       存储的值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">expiration</span></dt>     <dd>      <p class="para">       到期时间，默认为 0。 更多信息请参见<a href="https://www.php.net/manual/zh/memcached.expiration.php" class="link">到期时间</a>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.add-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   如果 key 已经存在，<span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span> 将会返回 <strong><span>Memcached::RES_NOTSTORED</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.add-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::addByKey()} - 在特定服务器上向新 key 添加元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::set()} - 存储一个元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::replace()} - 替换已存在 key 下的元素</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function add($key, $value, $expiration = 0, $udf_flags = 0) {}

/**
*<div id="memcached.addbykey" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::addByKey</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::addByKey</span> &mdash; <span class="dc-title">在特定服务器上向新 key 添加元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.addbykey-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::addByKey</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::addByKey()</strong></span> 在功能上等同于 <span class="methodname" style="color:#CC7832">{@link Memcached::add()}</span>，只是可以自由的指定   <span class="parameter" style="color:#3A95FF">server_key</span> 用于将 <span class="parameter" style="color:#3A95FF">key</span> 映射到特定的服务器。如果需要将一堆相关的 key   保存在特定的服务器时非常有用。(译注: $server_key 也是普通的 key, ByKey 系列接口的工作过程是: 首先, 对 $server_key 进行   hash, 得到 $server_key 应该存储的服务器, 然后将相应的操作在 $server_key 所在的服务器上进行。)  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.addbykey-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">server_key</span></dt>     <dd>      <p class="para">       本键名用于识别储存和读取值的服务器。没有将实际的键名散列到具体的项目，而是在决定与哪一个 memcached 服务器通信时将其散列为服务器键名。这使得关联的项目在单一的服务上被组合起来以提高多重操作的效率。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       用于存储值的键名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       存储的值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">expiration</span></dt>     <dd>      <p class="para">       到期时间，默认为 0。 更多信息请参见<a href="https://www.php.net/manual/zh/memcached.expiration.php" class="link">到期时间</a>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.addbykey-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。如果 key 已经存在，<span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span> 将会返回 <strong><span>Memcached::RES_NOTSTORED</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.addbykey-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::add()} - 向新 key 添加元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::set()} - 存储一个元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::replace()} - 替换已存在 key 下的元素</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function addByKey($server_key, $key, $value, $expiration = 0, $udf_flags = 0) {}

/**
*<div id="memcached.append" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::append</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::append</span> &mdash; <span class="dc-title">向已存在元素追加数据</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.append-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::append</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">bool</span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::append()</strong></span> 向已存在的元素值末尾追加 <span class="parameter" style="color:#3A95FF">value</span>   字符串。<span class="parameter" style="color:#3A95FF">value</span> 强制为字符串的原因是因为对于 mix 类型的追加没有明确定义。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    如果启用 <strong><span>Memcached::OPT_COMPRESSION</span></strong>，该操作将会失败并引发警告，因为无法向已压缩的数据追加压缩数据。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.append-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       用于存储值的键名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       将要追加的值。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.append-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   当打开压缩时，返回 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-memcached.append-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   当压缩启用时返回 <strong><span>null</span></strong> 并引发 <strong><span>E_WARNING</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.append-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::append()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setOption</span><span style="color: #007700">(</span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_COMPRESSION</span><span style="color: #007700">, </span><span style="color: #9876AA">false</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">, </span><span style="color: #DD0000">'abc'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">append</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">, </span><span style="color: #DD0000">'def'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">get</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(6) &quot;abcdef&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.append-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::appendByKey()} - 向指定服务器上已存在元素追加数据</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::prepend()} - 向一个已存在的元素前面追加数据</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function append($key, $value) {}

/**
*<div id="memcached.appendbykey" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::appendByKey</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::appendByKey</span> &mdash; <span class="dc-title">向指定服务器上已存在元素追加数据</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.appendbykey-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::appendByKey</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">bool</span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::appendByKey()</strong></span> 在功能上等同于 <span class="methodname" style="color:#CC7832">{@link Memcached::append()}</span>。区别在于使用   <span class="parameter" style="color:#3A95FF">server_key</span> 可以自由的将 <span class="parameter" style="color:#3A95FF">key</span> 映射到指定服务器。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.appendbykey-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">server_key</span></dt>     <dd>      <p class="para">       本键名用于识别储存和读取值的服务器。没有将实际的键名散列到具体的项目，而是在决定与哪一个 memcached 服务器通信时将其散列为服务器键名。这使得关联的项目在单一的服务上被组合起来以提高多重操作的效率。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       用于存储值的键名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       要追加的字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.appendbykey-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   当打开压缩时，返回 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-memcached.appendbykey-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   当压缩启用时返回 <strong><span>null</span></strong> 并引发 <strong><span>E_WARNING</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.appendbykey-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::append()} - 向已存在元素追加数据</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::prepend()} - 向一个已存在的元素前面追加数据</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function appendByKey($server_key, $key, $value) {}

/**
*<div id="memcached.prepend" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::prepend</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::prepend</span> &mdash; <span class="dc-title">向一个已存在的元素前面追加数据</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.prepend-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::prepend</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::prepend()</strong></span> 向已存在元素的字符串值前追加 <span class="parameter" style="color:#3A95FF">value</span>。   <span class="parameter" style="color:#3A95FF">value</span> 被强制转换成字符串类型主要是因为对于 mix 类型的追加没有很好的定义。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    如果 <strong><span>Memcached::OPT_COMPRESSION</span></strong> 常量开启，这个操作会失败，并引发一个警告，因为向压缩数据    后追加数据可能会导致解压不了。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.prepend-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       要向前追加数据的元素的 key。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       要追加的字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.prepend-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   当打开压缩时，返回 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-memcached.prepend-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   当压缩启用时返回 <strong><span>null</span></strong> 并引发 <strong><span>E_WARNING</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.prepend-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::prepend()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setOption</span><span style="color: #007700">(</span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_COMPRESSION</span><span style="color: #007700">, </span><span style="color: #9876AA">false</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">, </span><span style="color: #DD0000">'abc'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prepend</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">, </span><span style="color: #DD0000">'def'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">get</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(6) &quot;defabc&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.prepend-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::prependByKey()} - 在指定服务器上追加数据到已存在的元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::append()} - 向已存在元素追加数据</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function prepend($key, $value) {}

/**
*<div id="memcached.prependbykey" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::prependByKey</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::prependByKey</span> &mdash; <span class="dc-title">在指定服务器上追加数据到已存在的元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.prependbykey-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::prependByKey</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">bool</span></span></div>  <p class="para rdfs-comment">   除了可以使用 <span class="parameter" style="color:#3A95FF">server_key</span> 自由的将 <span class="parameter" style="color:#3A95FF">key</span> 映射到指定服务器外，   <span class="function"><strong style="color:#CC7832">Memcached::prependByKey()</strong></span> 在功能上等同于 <span class="methodname" style="color:#CC7832">{@link Memcached::prepend()}</span>。   （译注: 关于 *ByKey 系列方法及 $server_key 的工作原理请参照 addByKey 方法文档）  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.prependbykey-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">server_key</span></dt>     <dd>      <p class="para">       本键名用于识别储存和读取值的服务器。没有将实际的键名散列到具体的项目，而是在决定与哪一个 memcached 服务器通信时将其散列为服务器键名。这使得关联的项目在单一的服务上被组合起来以提高多重操作的效率。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       要向前追加数据的元素的 key。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       要追加的字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.prependbykey-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   当打开压缩时，返回 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-memcached.prependbykey-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   当压缩启用时返回 <strong><span>null</span></strong> 并引发 <strong><span>E_WARNING</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.prependbykey-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::prepend()} - 向一个已存在的元素前面追加数据</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::append()} - 向已存在元素追加数据</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function prependByKey($server_key, $key, $value) {}

/**
*<div id="memcached.replace" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::replace</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::replace</span> &mdash; <span class="dc-title">替换已存在 key 下的元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.replace-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::replace</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::replace()</strong></span> 和 <span class="methodname" style="color:#CC7832">{@link Memcached::set()}</span> 类似，但是如果   服务端不存在 <span class="parameter" style="color:#3A95FF">key</span>，操作将失败。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.replace-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       用于存储值的键名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       存储的值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">expiration</span></dt>     <dd>      <p class="para">       到期时间，默认为 0。 更多信息请参见<a href="https://www.php.net/manual/zh/memcached.expiration.php" class="link">到期时间</a>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.replace-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   如果 key 不存在，<span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span> 返回 <strong><span>Memcached::RES_NOTSTORED</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.replace-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::replaceByKey()} - 在指定服务器上，替换已存在 key 下的元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::set()} - 存储一个元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::add()} - 向新 key 添加元素</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function replace($key, $value, $expiration = null, $udf_flags = 0) {}

/**
*<div id="memcached.replacebykey" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::replaceByKey</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::replaceByKey</span> &mdash; <span class="dc-title">在指定服务器上，替换已存在 key 下的元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.replacebykey-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::replaceByKey</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiration</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   除了可以使用 <span class="parameter" style="color:#3A95FF">server_key</span> 自由的将 <span class="parameter" style="color:#3A95FF">key</span> 映射到指定服务器外，   <span class="function"><strong style="color:#CC7832">Memcached::replaceByKey()</strong></span> 在功能上等同于 <span class="methodname" style="color:#CC7832">{@link Memcached::replace()}</span>。   （译注: 关于 *ByKey 系列方法及 $server_key 的工作原理请参照 addByKey 方法文档）。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.replacebykey-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">server_key</span></dt>     <dd>      <p class="para">       本键名用于识别储存和读取值的服务器。没有将实际的键名散列到具体的项目，而是在决定与哪一个 memcached 服务器通信时将其散列为服务器键名。这使得关联的项目在单一的服务上被组合起来以提高多重操作的效率。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       用于存储值的键名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       存储的值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">expiration</span></dt>     <dd>      <p class="para">       到期时间，默认为 0。 更多信息请参见<a href="https://www.php.net/manual/zh/memcached.expiration.php" class="link">到期时间</a>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.replacebykey-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   如果 key 不存在，<span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span> 返回 <strong><span>Memcached::RES_NOTSTORED</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.replacebykey-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::replace()} - 替换已存在 key 下的元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::set()} - 存储一个元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::add()} - 向新 key 添加元素</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function replaceByKey($server_key, $key, $value, $expiration = null, $udf_flags = 0) {}

/**
*<div id="memcached.delete" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::delete</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::delete</span> &mdash; <span class="dc-title">删除元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.delete-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::delete</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$time</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   从服务器上删除 <span class="parameter" style="color:#3A95FF">key</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.delete-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       要删除的 key。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">time</span></dt>     <dd>      <p class="para">       服务端等待删除该元素的总时间。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">       As of memcached 1.3.0 (released 2009) this feature is no longer       supported. Passing a non-zero <span class="parameter" style="color:#3A95FF">time</span> will cause       the deletion to fail. <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span>       will return <strong><span>MEMCACHED_INVALID_ARGUMENTS</span></strong>.      </span></p></blockquote>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.delete-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   如果 key 不存在, <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span> 将会返回 <strong><span>Memcached::RES_NOTFOUND</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.delete-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::delete()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">delete</span><span style="color: #007700">(</span><span style="color: #DD0000">'key1'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.delete-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::deleteByKey()} - 从指定的服务器删除元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::deleteMulti()} - Delete multiple items</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function delete($key, $time = 0) {}

/**
*<div id="memcached.deletemulti" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::deleteMulti</h1>  <p class="verinfo">(PECL memcached &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Memcached::deleteMulti</span> &mdash; <span class="dc-title">Delete multiple items</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.deletemulti-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::deleteMulti</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$keys</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$time</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Delete the array of <span class="parameter" style="color:#3A95FF">keys</span> from the server.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.deletemulti-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">keys</span></dt>     <dd>      <p class="para">       The keys to be deleted.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">time</span></dt>     <dd>      <p class="para">       The amount of time the server will wait to delete the items.      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">       As of memcached 1.3.0 (released 2009) this feature is no longer       supported. Passing a non-zero <span class="parameter" style="color:#3A95FF">time</span> will cause       the deletion to fail. <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span>       will return <strong><span>MEMCACHED_INVALID_ARGUMENTS</span></strong>.      </span></p></blockquote>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.deletemulti-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an array indexed by <span class="parameter" style="color:#3A95FF">keys</span>. Each element   is <strong><span>true</span></strong> if the corresponding key was deleted, or one of the   <strong><span>Memcached::RES_*</span></strong> constants if the corresponding deletion   failed.   </p>  <p class="para">   The <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span> will return   the result code for the last executed delete operation, that is, the delete   operation for the last element of <span class="parameter" style="color:#3A95FF">keys</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.deletemulti-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::delete()} - 删除元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::deleteByKey()} - 从指定的服务器删除元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::deleteMultiByKey()} - Delete multiple items from a specific server</span></li>   </ul>  </span> </div></div>
     * @return array Returns array indexed by keys and where values are indicating whether operation succeeded or not.*/
    public function deleteMulti(array $keys, $time = 0) {}

/**
*<div id="memcached.deletebykey" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::deleteByKey</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::deleteByKey</span> &mdash; <span class="dc-title">从指定的服务器删除元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.deletebykey-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::deleteByKey</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$time</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::deleteByKey()</strong></span> 除了可以通过 <span class="parameter" style="color:#3A95FF">server_key</span> 参数自由的指定 <span class="parameter" style="color:#3A95FF">key</span>   所映射的服务器外，在功能上等同于 <span class="methodname" style="color:#CC7832">{@link Memcached::delete()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.deletebykey-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">server_key</span></dt>     <dd>      <p class="para">       本键名用于识别储存和读取值的服务器。没有将实际的键名散列到具体的项目，而是在决定与哪一个 memcached 服务器通信时将其散列为服务器键名。这使得关联的项目在单一的服务上被组合起来以提高多重操作的效率。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       要删除的 key。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">time</span></dt>     <dd>      <p class="para">       服务端等待删除该元素的总时间。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">       As of memcached 1.3.0 (released 2009) this feature is no longer       supported. Passing a non-zero <span class="parameter" style="color:#3A95FF">time</span> will cause       the deletion to fail. <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span>       will return <strong><span>MEMCACHED_INVALID_ARGUMENTS</span></strong>.      </span></p></blockquote>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.deletebykey-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   如果 key 不存在，<span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span> 返回 <strong><span>Memcached::RES_NOTFOUND</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.deletebykey-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::delete()} - 删除元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::deleteMulti()} - Delete multiple items</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::deleteMultiByKey()} - Delete multiple items from a specific server</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function deleteByKey($server_key, $key, $time = 0) {}

/**
*<div id="memcached.deletemultibykey" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::deleteMultiByKey</h1>  <p class="verinfo">(PECL memcached &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Memcached::deleteMultiByKey</span> &mdash; <span class="dc-title">Delete multiple items from a specific server</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.deletemultibykey-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::deleteMultiByKey</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$keys</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$time</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::deleteMultiByKey()</strong></span> is functionally equivalent to   <span class="methodname" style="color:#CC7832">{@link Memcached::deleteMulti()}</span>, except that the free-form   <span class="parameter" style="color:#3A95FF">server_key</span> can be used to map the   <span class="parameter" style="color:#3A95FF">keys</span> to a specific server.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.deletemultibykey-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">server_key</span></dt>     <dd>      <p class="para">       本键名用于识别储存和读取值的服务器。没有将实际的键名散列到具体的项目，而是在决定与哪一个 memcached 服务器通信时将其散列为服务器键名。这使得关联的项目在单一的服务上被组合起来以提高多重操作的效率。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">keys</span></dt>     <dd>      <p class="para">       The keys to be deleted.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">time</span></dt>     <dd>      <p class="para">       The amount of time the server will wait to delete the items.      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">       As of memcached 1.3.0 (released 2009) this feature is no longer       supported. Passing a non-zero <span class="parameter" style="color:#3A95FF">time</span> will cause       the deletion to fail. <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span>       will return <strong><span>MEMCACHED_INVALID_ARGUMENTS</span></strong>.      </span></p></blockquote>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.deletemultibykey-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an array indexed by <span class="parameter" style="color:#3A95FF">keys</span>. Each element   is <strong><span>true</span></strong> if the corresponding key was deleted, or one of the   <strong><span>Memcached::RES_*</span></strong> constants if the corresponding deletion   failed.   </p>  <p class="para">   The <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span> will return   the result code for the last executed delete operation, that is, the delete   operation for the last element of <span class="parameter" style="color:#3A95FF">keys</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.deletemultibykey-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::delete()} - 删除元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::deleteByKey()} - 从指定的服务器删除元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::deleteMulti()} - Delete multiple items</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function deleteMultiByKey($server_key, array $keys, $time = 0) {}

/**
*<div id="memcached.increment" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::increment</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::increment</span> &mdash; <span class="dc-title">增加数值元素的值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.increment-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::increment</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span><span class="initializer"> = 1</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$initial_value</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiry</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::increment()</strong></span>  将数值元素增加 <span class="parameter" style="color:#3A95FF">offset</span> 大小。如果元素的值不是数值类型，将返回错误。如果   key 不存在，<span class="function"><strong style="color:#CC7832">Memcached::increment()</strong></span> 会将元素设置为 <span class="parameter" style="color:#3A95FF">initial_value</span> 参数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.increment-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       要增加值的元素的 key。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">       要将元素的值增加的大小。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">initial_value</span></dt>     <dd>      <p class="para">       如果元素不存在，要设置的默认值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">expiry</span></dt>     <dd>      <p class="para">       设置元素值的过期时间。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.increment-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回元素的新值 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.increment-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::increment()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'counter'</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">increment</span><span style="color: #007700">(</span><span style="color: #DD0000">'counter'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$n </span><span style="color: #007700">= </span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">increment</span><span style="color: #007700">(</span><span style="color: #DD0000">'counter'</span><span style="color: #007700">, </span><span style="color: #9876AA">10</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$n</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'counter'</span><span style="color: #007700">, </span><span style="color: #DD0000">'abc'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$n </span><span style="color: #007700">= </span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">increment</span><span style="color: #007700">(</span><span style="color: #DD0000">'counter'</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// ^ will fail due to item value not being numeric<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$n</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(11)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.increment-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::decrement()} - 减小数值元素的值</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::decrementByKey()} - Decrement numeric item's value, stored on a specific server</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::incrementByKey()} - Increment numeric item's value, stored on a specific server</span></li>   </ul>  </span> </div></div>
     * @return int|false new item's value on success or <b>FALSE</b> on failure.*/
    public function increment($key, $offset = 1, $initial_value = 0, $expiry = 0) {}

/**
*<div id="memcached.decrement" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::decrement</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::decrement</span> &mdash; <span class="dc-title">减小数值元素的值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.decrement-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::decrement</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span><span class="initializer"> = 1</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$initial_value</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiry</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::decrement()</strong></span> 减小数值元素的值，减小多少由参数 <span class="parameter" style="color:#3A95FF">offset</span>   决定。如果元素的值不是数值，则会导致错误。如果减小后的值小于 0,则新值会设为 0。如果键不存在，<span class="function"><strong style="color:#CC7832">Memcached::decrement()</strong></span>   会将元素设置为 <span class="parameter" style="color:#3A95FF">initial_value</span> 参数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.decrement-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       将要减小值的元素的 key。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">      要减少的元素值要减少的数量。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">initial_value</span></dt>     <dd>      <p class="para">       如果 key 不存在的时候设置到元素的值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">expiry</span></dt>     <dd>      <p class="para">       设置的元素过期时间。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.decrement-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回元素的新值， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.decrement-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::decrement()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'counter'</span><span style="color: #007700">, </span><span style="color: #9876AA">5</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$n </span><span style="color: #007700">= </span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">decrement</span><span style="color: #007700">(</span><span style="color: #DD0000">'counter'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$n</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$n </span><span style="color: #007700">= </span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">decrement</span><span style="color: #007700">(</span><span style="color: #DD0000">'counter'</span><span style="color: #007700">, </span><span style="color: #9876AA">10</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$n</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">get</span><span style="color: #007700">(</span><span style="color: #DD0000">'counter'</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'counter'</span><span style="color: #007700">, </span><span style="color: #DD0000">'abc'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$n </span><span style="color: #007700">= </span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">increment</span><span style="color: #007700">(</span><span style="color: #DD0000">'counter'</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// ^ will fail due to item value not being numeric<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$n</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(4)<br>int(0)<br>int(0)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.decrement-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::increment()} - 增加数值元素的值</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::incrementByKey()} - Increment numeric item's value, stored on a specific server</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::decrementByKey()} - Decrement numeric item's value, stored on a specific server</span></li>   </ul>  </span> </div></div>
     * @return int|false item's new value on success or <b>FALSE</b> on failure.*/
    public function decrement($key, $offset = 1, $initial_value = 0, $expiry = 0) {}

/**
*<div id="memcached.incrementbykey" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::incrementByKey</h1>  <p class="verinfo">(PECL memcached &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Memcached::incrementByKey</span> &mdash; <span class="dc-title">Increment numeric item&#039;s value, stored on a specific server</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.incrementbykey-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::incrementByKey</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span><span class="initializer"> = 1</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$initial_value</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiry</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::incrementByKey()</strong></span> increments a numeric item&#039;s value   by the specified <span class="parameter" style="color:#3A95FF">offset</span>. If the item&#039;s value is not   numeric, an error will result.   <span class="function"><strong style="color:#CC7832">Memcached::incrementByKey()</strong></span> will set the item to the   <span class="parameter" style="color:#3A95FF">initial_value</span> parameter if the key doesn&#039;t exist.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.incrementbykey-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">server_key</span></dt>     <dd>      <p class="para">       本键名用于识别储存和读取值的服务器。没有将实际的键名散列到具体的项目，而是在决定与哪一个 memcached 服务器通信时将其散列为服务器键名。这使得关联的项目在单一的服务上被组合起来以提高多重操作的效率。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       The key of the item to increment.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">       The amount by which to increment the item&#039;s value.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">initial_value</span></dt>     <dd>      <p class="para">       The value to set the item to if it doesn&#039;t currently exist.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">expiry</span></dt>     <dd>      <p class="para">       The expiry time to set on the item.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.incrementbykey-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns new item&#039;s value on success 或者在失败时返回 <strong><span>false</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.incrementbykey-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::decrement()} - 减小数值元素的值</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::decrementByKey()} - Decrement numeric item's value, stored on a specific server</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::increment()} - 增加数值元素的值</span></li>   </ul>  </span> </div></div>
     * @return int|false new item's value on success or <b>FALSE</b> on failure.*/
    public function incrementByKey($server_key, $key, $offset = 1, $initial_value = 0, $expiry = 0) {}

/**
*<div id="memcached.decrementbykey" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::decrementByKey</h1>  <p class="verinfo">(PECL memcached &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Memcached::decrementByKey</span> &mdash; <span class="dc-title">Decrement numeric item&#039;s value, stored on a specific server</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.decrementbykey-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::decrementByKey</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span><span class="initializer"> = 1</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$initial_value</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$expiry</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::decrementByKey()</strong></span> decrements a numeric item&#039;s   value by the specified <span class="parameter" style="color:#3A95FF">offset</span>. If the item&#039;s value   is not numeric, an error will result. If the operation   would decrease the value below 0, the new value will be 0.   <span class="function"><strong style="color:#CC7832">Memcached::decrementByKey()</strong></span> will set the item to the   <span class="parameter" style="color:#3A95FF">initial_value</span> parameter if the key doesn&#039;t exist.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.decrementbykey-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">server_key</span></dt>     <dd>      <p class="para">       本键名用于识别储存和读取值的服务器。没有将实际的键名散列到具体的项目，而是在决定与哪一个 memcached 服务器通信时将其散列为服务器键名。这使得关联的项目在单一的服务上被组合起来以提高多重操作的效率。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       The key of the item to decrement.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">       The amount by which to decrement the item&#039;s value.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">initial_value</span></dt>     <dd>      <p class="para">       The value to set the item to if it doesn&#039;t currently exist.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">expiry</span></dt>     <dd>      <p class="para">       The expiry time to set on the item.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.decrementbykey-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns item&#039;s new value on success 或者在失败时返回 <strong><span>false</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.decrementbykey-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::decrement()} - 减小数值元素的值</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::increment()} - 增加数值元素的值</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::incrementByKey()} - Increment numeric item's value, stored on a specific server</span></li>   </ul>  </span> </div></div>
     * @return int|false item's new value on success or <b>FALSE</b> on failure.*/
    public function decrementByKey($server_key, $key, $offset = 1, $initial_value = 0, $expiry = 0) {}

/**
*<div id="memcached.addserver" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::addServer</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::addServer</span> &mdash; <span class="dc-title">向服务器池增加服务器</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.addserver-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::addServer</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$host</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$port</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$weight</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::addServer()</strong></span> 增加指定服务器到服务器池。此时不会与服务端建立连接，但如果使用一致性   key 分发选项（<strong><span>Memcached::DISTRIBUTION_CONSISTENT</span></strong> 或   <strong><span>Memcached::OPT_LIBKETAMA_COMPATIBLE</span></strong>），则必须更新一些内部的数据结构。 因此，如果需要增加多台服务器，最好使用   <span class="methodname" style="color:#CC7832">{@link Memcached::addServers()}</span> 以确保这种更新只发生一次。  </p>  <p class="para">   同一台服务器可以在服务器池中多次出现，因为没有做重复检测。但并不推荐这样做，对于期望提高某台服务器的权重，请使用   <span class="parameter" style="color:#3A95FF">weight</span> 参数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.addserver-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">host</span></dt>     <dd>      <p class="para">       memcached 服务端主机名。如果主机名无效，相关的数据操作的结果代码将被设置为       <strong><span>Memcached::RES_HOST_LOOKUP_FAILURE</span></strong>。从 2.0.0b1 版本开始，这个参数还可以指定 unix       套接字文件的路径。例如：<span>/path/to/memcached.sock</span> 使用 UNIX 域套接字，在这种情况下       <span class="parameter" style="color:#3A95FF">port</span> 也必须设置为 <span>0</span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">port</span></dt>     <dd>      <p class="para">       运行 memcached 的端口号，通常是 <span>11211</span>。从版本 2.0.0b1       开始，在使用 UNIX 域套接字时将此参数设置为 <span>0</span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">weight</span></dt>     <dd>      <p class="para">       此服务器相对于服务器池中所有服务器的权重。此参数用来控制服务器在操作时被选中的概率。这个仅用于一致性分布选项，并且这个值通常是由服务端分配的内存来设置的。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.addserver-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.addserver-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::addServer()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// Add 2 servers, so that the second one<br />   is twice as likely to be selected. <br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'mem1.domain.com'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">, </span><span style="color: #9876AA">33</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'mem2.domain.com'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">, </span><span style="color: #9876AA">67</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.addserver-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::addServers()} - 向服务器池中增加多台服务器</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::resetServerList()} - Clears all servers from the server list</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function addServer($host, $port, $weight = 0) {}

/**
*<div id="memcached.addservers" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::addServers</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.1)</p><p class="refpurpose"><span class="refname">Memcached::addServers</span> &mdash; <span class="dc-title">向服务器池中增加多台服务器</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.addservers-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::addServers</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$servers</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::addServers()</strong></span> 向服务器池中增加 <span class="parameter" style="color:#3A95FF">servers</span>。<span class="parameter" style="color:#3A95FF">servers</span>   中的每个条目都应该是包含主机名、端口以及可选权重的数组。此时并不会与这些服务端建立连接。  </p>  <p class="para">   同一台服务器可能会在服务器池中多次出现，因为这里没有做重复检测。但这并不可取；相反，应该使用   <span class="parameter" style="color:#3A95FF">weight</span> 选项增加此服务器的选择权重。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.addservers-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">      增加到池中的服务器数组。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.addservers-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.addservers-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::addServers()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$servers </span><span style="color: #007700">= array(<br />    array(</span><span style="color: #DD0000">'mem1.domain.com'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">, </span><span style="color: #9876AA">33</span><span style="color: #007700">),<br />    array(</span><span style="color: #DD0000">'mem2.domain.com'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">, </span><span style="color: #9876AA">67</span><span style="color: #007700">)<br />);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServers</span><span style="color: #007700">(</span><span style="color: #9876AA">$servers</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.addservers-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::addServer()} - 向服务器池增加服务器</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::resetServerList()} - Clears all servers from the server list</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function addServers(array $servers) {}

/**
*<div id="memcached.getserverlist" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::getServerList</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::getServerList</span> &mdash; <span class="dc-title">获取服务器池中的服务器列表</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.getserverlist-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::getServerList</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::getServerList()</strong></span> 返回服务器池中所有服务器列表.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.getserverlist-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.getserverlist-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   服务器池中所有服务器列表.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.getserverlist-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::getServerList()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServers</span><span style="color: #007700">(array(<br />    array(</span><span style="color: #DD0000">'mem1.domain.com'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">, </span><span style="color: #9876AA">20</span><span style="color: #007700">),<br />    array(</span><span style="color: #DD0000">'mem2.domain.com'</span><span style="color: #007700">, </span><span style="color: #9876AA">11311</span><span style="color: #007700">, </span><span style="color: #9876AA">80</span><span style="color: #007700">),<br />));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getServerList</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(2) {<br>  [0]=&gt;<br>  array(3) {<br>    [&quot;host&quot;]=&gt;<br>    string(15) &quot;mem1.domain.com&quot;<br>    [&quot;port&quot;]=&gt;<br>    int(11211)<br>    [&quot;weight&quot;]=&gt;<br>    int(20)<br>  }<br>  [1]=&gt;<br>  array(3) {<br>    [&quot;host&quot;]=&gt;<br>    string(15) &quot;mem2.domain.com&quot;<br>    [&quot;port&quot;]=&gt;<br>    int(11311)<br>    [&quot;weight&quot;]=&gt;<br>    int(80)<br>  }<br>}<br></span></div>    </div>   </div>  </span> </div></div>
     * @return array The list of all servers in the server pool.*/
    public function getServerList() {}

/**
*<div id="memcached.getserverbykey" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::getServerByKey</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::getServerByKey</span> &mdash; <span class="dc-title">获取一个 key 所映射的服务器信息</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.getserverbykey-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::getServerByKey</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$server_key</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::getServerByKey()</strong></span> 返回 <span class="parameter" style="color:#3A95FF">server_key</span> 所映射的服务器,    <span class="function"><strong style="color:#CC7832">Memcached::*ByKey()</strong></span> 系列方法的中的 <span class="parameter" style="color:#3A95FF">server_key</span> 参数, 实际上就是用来获取   操作的服务器的。（译注: 可以这样理解, *ByKey 系列函数首先调用 <span class="function"><strong style="color:#CC7832">Memcached::getServerByKey()</strong></span> 获取服务器,    然后在此服务器上进行操作）  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.getserverbykey-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">server_key</span></dt>     <dd>      <p class="para">       本键名用于识别储存和读取值的服务器。没有将实际的键名散列到具体的项目，而是在决定与哪一个 memcached 服务器通信时将其散列为服务器键名。这使得关联的项目在单一的服务上被组合起来以提高多重操作的效率。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.getserverbykey-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回数组，包含三个 key <span>host</span>、<span>port</span> 和 <span>weight</span> 或者在失败时返回 <strong><span>false</span></strong>。   如需要则使用 <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.getserverbykey-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::getServerByKey()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServers</span><span style="color: #007700">(array(<br />    array(</span><span style="color: #DD0000">'mem1.domain.com'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">, </span><span style="color: #9876AA">40</span><span style="color: #007700">),<br />    array(</span><span style="color: #DD0000">'mem2.domain.com'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">, </span><span style="color: #9876AA">40</span><span style="color: #007700">),<br />    array(</span><span style="color: #DD0000">'mem3.domain.com'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">, </span><span style="color: #9876AA">20</span><span style="color: #007700">),<br />));<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setOption</span><span style="color: #007700">(</span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_LIBKETAMA_COMPATIBLE</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getServerByKey</span><span style="color: #007700">(</span><span style="color: #DD0000">'user'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getServerByKey</span><span style="color: #007700">(</span><span style="color: #DD0000">'log'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getServerByKey</span><span style="color: #007700">(</span><span style="color: #DD0000">'ip'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(3) {<br>  [&quot;host&quot;]=&gt;<br>  string(15) &quot;mem3.domain.com&quot;<br>  [&quot;port&quot;]=&gt;<br>  int(11211)<br>  [&quot;weight&quot;]=&gt;<br>  int(20)<br>}<br>array(3) {<br>  [&quot;host&quot;]=&gt;<br>  string(15) &quot;mem2.domain.com&quot;<br>  [&quot;port&quot;]=&gt;<br>  int(11211)<br>  [&quot;weight&quot;]=&gt;<br>  int(40)<br>}<br>array(3) {<br>  [&quot;host&quot;]=&gt;<br>  string(15) &quot;mem2.domain.com&quot;<br>  [&quot;port&quot;]=&gt;<br>  int(11211)<br>  [&quot;weight&quot;]=&gt;<br>  int(40)<br>}<br></span></div>    </div>   </div>  </span> </div></div>
     * @return array an array containing three keys of host,*/
    public function getServerByKey($server_key) {}

/**
*<div id="memcached.resetserverlist" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::resetServerList</h1>  <p class="verinfo">(PECL memcached &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Memcached::resetServerList</span> &mdash; <span class="dc-title">Clears all servers from the server list</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.resetserverlist-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::resetServerList</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::resetserverlist()</strong></span> removes all memcache   servers from the known server list, resetting it back to empty.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.resetserverlist-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.resetserverlist-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.resetserverlist-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::addServer()} - 向服务器池增加服务器</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::addServers()} - 向服务器池中增加多台服务器</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function resetServerList() {}

/**
*<div id="memcached.quit" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::quit</h1>  <p class="verinfo">(PECL memcached &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Memcached::quit</span> &mdash; <span class="dc-title">关闭所有打开的链接</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.quit-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::quit</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::quit()</strong></span> 关闭所有 memcache 服务器的链接。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.quit-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.quit-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function quit() {}

/**
*<div id="memcached.getstats" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::getStats</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::getStats</span> &mdash; <span class="dc-title">获取服务器池的统计信息</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.getstats-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::getStats</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$type</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::getStats()</strong></span> 返回一个包含所有可用 memcache 服务器状态的数组。   返回的统计信息的详细描述参见 <a href="https://www.php.net/manual/zh/https://github.com/memcached/memcached/blob/master/doc/protocol.txt" class="link external">&raquo;&nbsp;memcache 协议</a>。   （译注：经实验，服务器池中有不可用服务器时，返回 false）  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.getstats-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">type</span></dt>     <dd>      <p class="para">       要获取的统计的类型。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.getstats-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   服务器统计信息数组，每个服务器一项， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.getstats-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::getStats()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getStats</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [localhost:11211] =&gt; Array<br>        (<br>            [pid] =&gt; 4933<br>            [uptime] =&gt; 786123<br>            [threads] =&gt; 1<br>            [time] =&gt; 1233868010<br>            [pointer_size] =&gt; 32<br>            [rusage_user_seconds] =&gt; 0<br>            [rusage_user_microseconds] =&gt; 140000<br>            [rusage_system_seconds] =&gt; 23<br>            [rusage_system_microseconds] =&gt; 210000<br>            [curr_items] =&gt; 145<br>            [total_items] =&gt; 2374<br>            [limit_maxbytes] =&gt; 67108864<br>            [curr_connections] =&gt; 2<br>            [total_connections] =&gt; 151<br>            [connection_structures] =&gt; 3<br>            [bytes] =&gt; 20345<br>            [cmd_get] =&gt; 213343<br>            [cmd_set] =&gt; 2381<br>            [get_hits] =&gt; 204223<br>            [get_misses] =&gt; 9120<br>            [evictions] =&gt; 0<br>            [bytes_read] =&gt; 9092476<br>            [bytes_written] =&gt; 15420512<br>            [version] =&gt; 1.2.6<br>        )<br><br>)<br></span></div>    </div>   </div>  </span> </div></div>
     * @return array|false Array of server statistics, one entry per server.*/
    public function getStats($type = null) {}

/**
*<div id="memcached.getversion" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::getVersion</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.5)</p><p class="refpurpose"><span class="refname">Memcached::getVersion</span> &mdash; <span class="dc-title">获取服务器池中所有服务器的版本信息</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.getversion-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::getVersion</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::getVersion()</strong></span> 返回一个包含所有可用 memcached 服务器版本信息的数组。   （译注：经实验，服务器池中有不可用服务器时，返回 false）  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.getversion-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.getversion-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   服务器版本信息的数组，每个服务器占一项。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.getversion-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::getVersion()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getVersion</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [localhost:11211] =&gt; 1.2.6<br>)<br></span></div>    </div>   </div>  </span> </div></div>
     * @return array Array of server versions, one entry per server.*/
    public function getVersion() {}

/**
*<div id="memcached.getallkeys" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::getAllKeys</h1>  <p class="verinfo">(PECL memcached &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Memcached::getAllKeys</span> &mdash; <span class="dc-title">Gets the keys stored on all the servers</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.getallkeys-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::getAllKeys</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::getAllKeys()</strong></span> queries each memcache server   and retrieves an array of all keys stored on them at that point in time.   This is not an atomic operation, so it isn&#039;t a truly consistent snapshot of   the keys at point in time. As memcache doesn&#039;t guarantee to return all keys   you also cannot assume that all keys have been returned.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    This method is intended for debugging purposes and should not be used at scale!   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.getallkeys-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.getallkeys-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the keys stored on all the servers on success 或者在失败时返回 <strong><span>false</span></strong>.  </p> </div></div>
     * @return array|false the keys stored on all the servers on success or <b>FALSE</b> on failure.*/
    public function getAllKeys() {}

/**
*<div id="memcached.flush" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::flush</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::flush</span> &mdash; <span class="dc-title">作废缓存中的所有元素</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.flush-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::flush</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$delay</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::flush()</strong></span> 立即（默认）或者在 <span class="parameter" style="color:#3A95FF">delay</span> 延迟后作废所有缓存中已经存在的元素。   在作废之后检索命令将不会有任何返回（除非在执行 <span class="function"><strong style="color:#CC7832">Memcached::flush()</strong></span> 作废之后，该 key 下被重新存储过）。flush   不会真正的释放已有元素的内存，而是逐渐的存入新元素重用那些内存。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.flush-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">delay</span></dt>     <dd>      <p class="para">      在作废所有元素之前等待的时间（单位秒）。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.flush-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。   如需要则使用 <span class="methodname" style="color:#CC7832">{@link Memcached::getResultCode()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.flush-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">Memcached::flush()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addServer</span><span style="color: #007700">(</span><span style="color: #DD0000">'localhost'</span><span style="color: #007700">, </span><span style="color: #9876AA">11211</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 10 秒内清除所有元素 <br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">flush</span><span style="color: #007700">(</span><span style="color: #9876AA">10</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function flush($delay = 0) {}

/**
*<div id="memcached.getoption" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::getOption</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::getOption</span> &mdash; <span class="dc-title">获取 Memcached 的选项值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.getoption-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::getOption</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$option</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   这个方法返回 <span class="parameter" style="color:#3A95FF">option</span> 指定的 Memcached 选项的值。一些选项是和 libmemcached 中相对应的，   也有一些特殊的选项仅仅是扩展自身的。关于选项的更多信息请查看 <a href="https://www.php.net/manual/zh/memcached.constants.php" class="link">Memcached 常量</a>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.getoption-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">option</span></dt>     <dd>      <p class="para">       <span>Memcached::OPT_*</span> 系列常量中的一个。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.getoption-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  返回请求的选项的值，或者在发生错误时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.getoption-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 获取 Memcached 选项</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getOption</span><span style="color: #007700">(</span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_COMPRESSION</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getOption</span><span style="color: #007700">(</span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_POLL_TIMEOUT</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>int(1000)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.getoption-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832"><strong>Memcached::getOption()</strong></span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::setOption()} - 设置一个 memcached 选项</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/memcached.constants.php" class="link">Memcached 常量</a></li>   </ul>  </span> </div></div>
     * @return mixed the value of the requested option, or <b>FALSE</b> on*/
    public function getOption($option) {}

/**
*<div id="memcached.setoption" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::setOption</h1>  <p class="verinfo">(PECL memcached &gt;= 0.1.0)</p><p class="refpurpose"><span class="refname">Memcached::setOption</span> &mdash; <span class="dc-title">设置一个 memcached 选项</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.setoption-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::setOption</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$option</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   这个方法用来设置 Memcached <span class="parameter" style="color:#3A95FF">option</span> 的值。一些选项和 libmemcached 中定义的类似，还有一些则是   扩展所特有的。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.setoption-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">option</span></dt>     <dd>      <p class="para">       <span>Memcached::OPT_*</span> 常量之一。       参阅 <a href="https://www.php.net/manual/zh/memcached.constants.php" class="link">Memcached 常量</a>获取更多信息。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       要设置的值      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        下面的选项列表需要通过特定的常量指定值。        <ul class="simplelist">         <li class="member"><span>Memcached::OPT_HASH</span> 需要 <span>Memcached::HASH_*</span> 值。</li>         <li class="member"><span>Memcached::OPT_DISTRIBUTION</span> 需要 <span>Memcached::DISTRIBUTION_*</span> 值。</li>        </ul>       </p>      </p></blockquote>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.setoption-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.setoption-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 设置一个 memcached 选项值</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getOption</span><span style="color: #007700">(</span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_HASH</span><span style="color: #007700">) == </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">HASH_DEFAULT</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setOption</span><span style="color: #007700">(</span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_HASH</span><span style="color: #007700">, </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">HASH_MURMUR</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setOption</span><span style="color: #007700">(</span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_PREFIX_KEY</span><span style="color: #007700">, </span><span style="color: #DD0000">"widgets"</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"Prefix key is now: "</span><span style="color: #007700">, </span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getOption</span><span style="color: #007700">(</span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_PREFIX_KEY</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>Prefix key is now: widgets<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.setoption-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::getOption()} - 获取 Memcached 的选项值</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::setOptions()} - Set Memcached options</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/memcached.constants.php" class="link">Memcached 常量</a></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function setOption($option, $value) {}

/**
*<div id="memcached.setoptions" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::setOptions</h1>  <p class="verinfo">(PECL memcached &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Memcached::setOptions</span> &mdash; <span class="dc-title">Set Memcached options</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.setoptions-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::setOptions</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$options</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::setOptions()</strong></span> is a variation of the   <span class="methodname" style="color:#CC7832">{@link Memcached::setOption()}</span> that takes an array of   options to be set.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.setoptions-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">options</span></dt>    <dd>     <span>      An associative array of options where the key is the option to set and      the value is the new value for the option.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.setoptions-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-memcached.setoptions-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Setting Memcached options</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$m </span><span style="color: #007700">= new </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getOption</span><span style="color: #007700">(</span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_HASH</span><span style="color: #007700">) == </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">HASH_DEFAULT</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setOptions</span><span style="color: #007700">(array(</span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_HASH </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">HASH_MURMUR</span><span style="color: #007700">, </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_PREFIX_KEY </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"widgets"</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getOption</span><span style="color: #007700">(</span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_HASH</span><span style="color: #007700">) == </span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">HASH_DEFAULT</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"Prefix key is now: "</span><span style="color: #007700">, </span><span style="color: #9876AA">$m</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getOption</span><span style="color: #007700">(</span><span style="color: #9876AA">Memcached</span><span style="color: #007700">::</span><span style="color: #9876AA">OPT_PREFIX_KEY</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(false)<br>Prefix key is now: widgets<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.setoptions-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::getOption()} - 获取 Memcached 的选项值</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::setOption()} - 设置一个 memcached 选项</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/memcached.constants.php" class="link">Memcached Constants</a></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function setOptions(array $options) {}

/**
*<div id="memcached.setsaslauthdata" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::setSaslAuthData</h1>  <p class="verinfo">(PECL memcached &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Memcached::setSaslAuthData</span> &mdash; <span class="dc-title">Set the credentials to use for authentication</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.setsaslauthdata-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::setSaslAuthData</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$username</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$password</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::setSaslAuthData()</strong></span> sets the username and   password that should be used for SASL authentication with the memcache   servers.  </p>  <p class="para">   <em>This method is only available when the memcached extension is    built with SASL support.</em> Please refer to   <a href="https://www.php.net/manual/zh/memcached.setup.php" class="link">Memcached setup</a> for how to do this.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.setsaslauthdata-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">username</span></dt>     <dd>      <p class="para">       The username to use for authentication.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">password</span></dt>     <dd>      <p class="para">       The password to use for authentication.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.setsaslauthdata-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return void*/
    public function setSaslAuthData(string $username, string $password) {}

/**
*<div id="memcached.ispersistent" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::isPersistent</h1>  <p class="verinfo">(PECL memcached &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Memcached::isPersistent</span> &mdash; <span class="dc-title">Check if a persitent connection to memcache is being used</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.ispersistent-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::isPersistent</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::isPersistent()</strong></span> checks if the connections to   the memcache servers are persistent connections.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.ispersistent-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.ispersistent-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if Memcache instance uses a persistent connection, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.ispersistent-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::isPristine()} - Check if the instance was recently created</span></li>   </ul>  </span> </div></div>
     * @return bool true if Memcache instance uses a persistent connection, false otherwise.*/
    public function isPersistent() {}

/**
*<div id="memcached.ispristine" class="refentry"> <div class="refnamediv">  <h1 class="refname">Memcached::isPristine</h1>  <p class="verinfo">(PECL memcached &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Memcached::isPristine</span> &mdash; <span class="dc-title">Check if the instance was recently created</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-memcached.ispristine-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Memcached::isPristine</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">Memcached::isPristine()</strong></span> checks if the Memcache instance   was recently created.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-memcached.ispristine-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-memcached.ispristine-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if instance is recently created, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-memcached.ispristine-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Memcached::isPersistent()} - Check if a persitent connection to memcache is being used</span></li>   </ul>  </span> </div></div>
     * @return bool the true if instance is recently created, false otherwise.*/
    public function isPristine() {}

    /**
     * (PECL memcached &gt;= 3.2.0)<br/>
     * Check if the given key is valid.
     * @param string $key
     * @return bool
     */
    public function checkKey($key) {}

    /**
     * Flush and send buffered commands
     * @link https://github.com/php-memcached-dev/php-memcached/blob/v3.1.5/php_memcached.c
     * @return bool
     */
    public function flushBuffers() {}

    /**
     * Sets AES encryption key (libmemcached 1.0.6 and higher)
     * @link https://github.com/php-memcached-dev/php-memcached/blob/v3.1.5/php_memcached.c
     * @param string $key
     * @return bool
     */
    public function setEncodingKey($key) {}

    /**
     * Returns the last disconnected server. Was added in 0.34 according to libmemcached's Changelog
     * @link https://github.com/php-memcached-dev/php-memcached/blob/v3.1.5/php_memcached.c
     * @return array|false
     */
    public function getLastDisconnectedServer() {}

    /**
     * Returns the last error errno that occurred
     * @link https://github.com/php-memcached-dev/php-memcached/blob/v3.1.5/php_memcached.c
     * @return int
     */
    public function getLastErrorErrno() {}

    /**
     * Returns the last error code that occurred
     * @link https://github.com/php-memcached-dev/php-memcached/blob/v3.1.5/php_memcached.c
     * @return int
     */
    public function getLastErrorCode() {}

    /**
     * Returns the last error message that occurred
     * @link https://github.com/php-memcached-dev/php-memcached/blob/v3.1.5/php_memcached.c
     * @return string
     */
    public function getLastErrorMessage() {}

    /**
     * Sets the memcached virtual buckets
     * @link https://github.com/php-memcached-dev/php-memcached/blob/v3.1.5/php_memcached.c
     * @param array $host_map
     * @param array $forward_map
     * @param int $replicas
     * @return bool
     */
    public function setBucket(array $host_map, array $forward_map, $replicas) {}
}

/**
*<div id="class.memcachedexception" class="reference"> <h1 class="title">MemcachedException类</h1>  <div class="partintro"><p class="verinfo">(PECL memcached &gt;= 0.1.0)</p>  <div class="section" id="memcachedexception.intro">   <h2 class="title">简介</h2>   <p class="para">       </p>  </div>  <div class="section" id="memcachedexception.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">MemcachedException</strong>     </span>          <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a>     </span>     {</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>   </div></div>
*/
class MemcachedException extends RuntimeException
{
    #[\JetBrains\PhpStorm\Pure]
    public function __construct($errmsg = "", $errcode = 0) {}
}
// End of memcached v.3.1.5
