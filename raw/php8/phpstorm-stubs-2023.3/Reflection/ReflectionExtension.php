<?php

use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\Immutable;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\TentativeType;
use JetBrains\PhpStorm\Pure;

/**
*<div id="class.reflectionextension" class="reference"> <h1 class="title">ReflectionExtension 类</h1>  <div class="partintro"><p class="verinfo">(PHP 5, PHP 7, PHP 8)</p>  <div class="section" id="reflectionextension.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">ReflectionExtension</strong></span> 报告有关扩展的信息。   </p>  </div>  <div class="section" id="reflectionextension.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">ReflectionExtension</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.reflector.php" class="interfacename">Reflector</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.reflectionextension.php#reflectionextension.props.name">$<var class="varname">name</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionextension.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionextension.clone.php" class="methodname" style="color:#CC7832">__clone</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionextension.export.php" class="methodname" style="color:#CC7832">export</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$return</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionextension.getclasses.php" class="methodname" style="color:#CC7832">getClasses</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionextension.getclassnames.php" class="methodname" style="color:#CC7832">getClassNames</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionextension.getconstants.php" class="methodname" style="color:#CC7832">getConstants</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionextension.getdependencies.php" class="methodname" style="color:#CC7832">getDependencies</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionextension.getfunctions.php" class="methodname" style="color:#CC7832">getFunctions</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionextension.getinientries.php" class="methodname" style="color:#CC7832">getINIEntries</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionextension.getname.php" class="methodname" style="color:#CC7832">getName</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionextension.getversion.php" class="methodname" style="color:#CC7832">getVersion</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">string</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionextension.info.php" class="methodname" style="color:#CC7832">info</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionextension.ispersistent.php" class="methodname" style="color:#CC7832">isPersistent</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionextension.istemporary.php" class="methodname" style="color:#CC7832">isTemporary</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionextension.tostring.php" class="methodname" style="color:#CC7832">__toString</a></span>(): <span class="type" style="color:#EAB766">string</span></div>   }</div>  </div>    <div class="section" id="reflectionextension.props">   <h2 class="title">属性</h2>   <dl>         <dt id="reflectionextension.props.name"><var class="varname">name</var></dt>     <dd>      <p class="para">       扩展名，跟调用 <span class="methodname" style="color:#CC7832">{@link ReflectionExtension::getName()}</span> 方法相同。      </p>     </dd>       </dl>  </div>  <div class="section">   <h2 class="title">更新日志</h2>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        移除 <span class="methodname" style="color:#CC7832">{@link ReflectionExtension::export()}</span>。       </td>      </tr>     </tbody>       </table>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ReflectionExtension::__clone} — 克隆</li><li>{@link ReflectionExtension::__construct} — 构造 ReflectionExtension</li><li>{@link ReflectionExtension::export} — Export</li><li>{@link ReflectionExtension::getClasses} — 获取类列表</li><li>{@link ReflectionExtension::getClassNames} — 获取类名列表</li><li>{@link ReflectionExtension::getConstants} — 获取常量</li><li>{@link ReflectionExtension::getDependencies} — 获取依赖</li><li>{@link ReflectionExtension::getFunctions} — 获取扩展中的函数</li><li>{@link ReflectionExtension::getINIEntries} — 获取 ini 配置</li><li>{@link ReflectionExtension::getName} — 获取扩展名称</li><li>{@link ReflectionExtension::getVersion} — 获取扩展版本</li><li>{@link ReflectionExtension::info} — 输出扩展信息</li><li>{@link ReflectionExtension::isPersistent} — 返回扩展是否持久化的</li><li>{@link ReflectionExtension::isTemporary} — 返回扩展是否是临时载入</li><li>{@link ReflectionExtension::__toString} — 生成字符串</li></ul></div>
*/
class ReflectionExtension implements Reflector
{
    /**
     * @var string Name of the extension, same as calling the {@see ReflectionExtension::getName()} method
     */
    #[Immutable]
    #[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
    public $name;

    /**
     * Constructs a ReflectionExtension
     *
     * @link https://php.net/manual/en/reflectionextension.construct.php
     * @param string $name Name of the extension.
     * @throws ReflectionException if the extension does not exist.
     */
    public function __construct(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $name) {}

/**
*<div id="reflectionextension.export" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionExtension::export</h1>  <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ReflectionExtension::export</span> &mdash; <span class="dc-title">Export</span></p> </div> <div id="reflectionextension.export-refsynopsisdiv">   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数已自 PHP 7.4.0起<em>弃用</em>，自 PHP 8.0.0 起<em>移除</em>。强烈建议不要依赖本函数。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionextension.export-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::export</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$return</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   导出可以被反射的扩展。输出格式同CLI argument <span>--re [extension]</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionextension.export-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       导出的反射。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">return</span></dt>     <dd>      <p class="para">       设为 <strong><span>true</span></strong> 时返回导出结果，设为 <strong><span>false</span></strong>（默认值）则忽略返回。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionextension.export-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果参数 <span class="parameter" style="color:#3A95FF">return</span> 设为 <strong><span>true</span></strong>，导出结果将作为 <span class="type" style="color:#EAB766">string</span>返回，否则返回 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionextension.export-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionExtension::info()} - 输出扩展信息</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionExtension::__toString()} - 生成字符串</span></li>   </ul>  </span> </div></div>
     * @return string|null If the $return parameter is set to {@see true}, then*/
    public static function export($name, $return = false) {}

    /**
     * To string
     *
     * @link https://php.net/manual/en/reflectionextension.tostring.php
     * @return string the exported extension as a string, in the same way as
     * the {@see ReflectionExtension::export()}.
     */
    #[TentativeType]
    public function __toString(): string {}

/**
*<div id="reflectionextension.getname" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionExtension::getName</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionExtension::getName</span> &mdash; <span class="dc-title">获取扩展名称</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionextension.getname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::getName</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   获取扩展名称。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionextension.getname-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionextension.getname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   扩展名称。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionextension.getname-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::getName()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$ext </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionExtension</span><span style="color: #007700">(</span><span style="color: #DD0000">'mysqli'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ext</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(6) &quot;mysqli&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionextension.getname-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionExtension::getClassNames()} - 获取类名列表</span></li>   </ul>  </span> </div></div>
     * @return string The extensions name.*/
    public function getName(): string {}

/**
*<div id="reflectionextension.getversion" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionExtension::getVersion</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionExtension::getVersion</span> &mdash; <span class="dc-title">获取扩展版本</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionextension.getversion-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::getVersion</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">string</span></span></div>  <p class="para rdfs-comment">   获取扩展的版本。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionextension.getversion-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionextension.getversion-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   扩展的版本，如果扩展没有版本返回 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionextension.getversion-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::getVersion()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$ext </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionExtension</span><span style="color: #007700">(</span><span style="color: #DD0000">'mysqli'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ext</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getVersion</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(3) &quot;0.1&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionextension.getversion-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionExtension::info()} - 输出扩展信息</span></li>   </ul>  </span> </div></div>
     * @return string|null The version of the extension.*/
    public function getVersion(): ?string {}

/**
*<div id="reflectionextension.getfunctions" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionExtension::getFunctions</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionExtension::getFunctions</span> &mdash; <span class="dc-title">获取扩展中的函数</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionextension.getfunctions-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::getFunctions</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取扩展中定义的函数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionextension.getfunctions-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionextension.getfunctions-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <span class="classname">{@link ReflectionFunction}</span> 对象数组，数组索引为函数名。如果扩展中没有定义函数，将返回空数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionextension.getfunctions-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::getFunctions()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$dom </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionExtension</span><span style="color: #007700">(</span><span style="color: #DD0000">'SimpleXML'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$dom</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFunctions</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [simplexml_load_file] =&gt; ReflectionFunction Object<br>        (<br>            [name] =&gt; simplexml_load_file<br>        )<br><br>    [simplexml_load_string] =&gt; ReflectionFunction Object<br>        (<br>            [name] =&gt; simplexml_load_string<br>        )<br><br>    [simplexml_import_dom] =&gt; ReflectionFunction Object<br>        (<br>            [name] =&gt; simplexml_import_dom<br>        )<br><br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionextension.getfunctions-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionExtension::getClasses()} - 获取类列表</span></li>    <li class="member"><span class="function">{@link get_extension_funcs()} - 返回模块函数名称的数组</span></li>   </ul>  </span> </div></div>
     * @return ReflectionFunction[] An associative array of {@see ReflectionFunction} objects,*/
    public function getFunctions(): array {}

/**
*<div id="reflectionextension.getconstants" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionExtension::getConstants</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionExtension::getConstants</span> &mdash; <span class="dc-title">获取常量</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionextension.getconstants-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::getConstants</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取扩展中定义的常量。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionextension.getconstants-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionextension.getconstants-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个以常量名称为索引的数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionextension.getconstants-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::getConstants()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$ext </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionExtension</span><span style="color: #007700">(</span><span style="color: #DD0000">'DOM'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$ext</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getConstants</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [XML_ELEMENT_NODE] =&gt; 1<br>    [XML_ATTRIBUTE_NODE] =&gt; 2<br>    [XML_TEXT_NODE] =&gt; 3<br>    [XML_CDATA_SECTION_NODE] =&gt; 4<br>    [XML_ENTITY_REF_NODE] =&gt; 5<br>    [XML_ENTITY_NODE] =&gt; 6<br>    [XML_PI_NODE] =&gt; 7<br>    [XML_COMMENT_NODE] =&gt; 8<br>    [XML_DOCUMENT_NODE] =&gt; 9<br>    [XML_DOCUMENT_TYPE_NODE] =&gt; 10<br>    [XML_DOCUMENT_FRAG_NODE] =&gt; 11<br>    [XML_NOTATION_NODE] =&gt; 12<br>    [XML_HTML_DOCUMENT_NODE] =&gt; 13<br>    [XML_DTD_NODE] =&gt; 14<br>    [XML_ELEMENT_DECL_NODE] =&gt; 15<br>    [XML_ATTRIBUTE_DECL_NODE] =&gt; 16<br>    [XML_ENTITY_DECL_NODE] =&gt; 17<br>    [XML_NAMESPACE_DECL_NODE] =&gt; 18<br>    [XML_LOCAL_NAMESPACE] =&gt; 18<br>    [XML_ATTRIBUTE_CDATA] =&gt; 1<br>    [XML_ATTRIBUTE_ID] =&gt; 2<br>    [XML_ATTRIBUTE_IDREF] =&gt; 3<br>    [XML_ATTRIBUTE_IDREFS] =&gt; 4<br>    [XML_ATTRIBUTE_ENTITY] =&gt; 6<br>    [XML_ATTRIBUTE_NMTOKEN] =&gt; 7<br>    [XML_ATTRIBUTE_NMTOKENS] =&gt; 8<br>    [XML_ATTRIBUTE_ENUMERATION] =&gt; 9<br>    [XML_ATTRIBUTE_NOTATION] =&gt; 10<br>    [DOM_PHP_ERR] =&gt; 0<br>    [DOM_INDEX_SIZE_ERR] =&gt; 1<br>    [DOMSTRING_SIZE_ERR] =&gt; 2<br>    [DOM_HIERARCHY_REQUEST_ERR] =&gt; 3<br>    [DOM_WRONG_DOCUMENT_ERR] =&gt; 4<br>    [DOM_INVALID_CHARACTER_ERR] =&gt; 5<br>    [DOM_NO_DATA_ALLOWED_ERR] =&gt; 6<br>    [DOM_NO_MODIFICATION_ALLOWED_ERR] =&gt; 7<br>    [DOM_NOT_FOUND_ERR] =&gt; 8<br>    [DOM_NOT_SUPPORTED_ERR] =&gt; 9<br>    [DOM_INUSE_ATTRIBUTE_ERR] =&gt; 10<br>    [DOM_INVALID_STATE_ERR] =&gt; 11<br>    [DOM_SYNTAX_ERR] =&gt; 12<br>    [DOM_INVALID_MODIFICATION_ERR] =&gt; 13<br>    [DOM_NAMESPACE_ERR] =&gt; 14<br>    [DOM_INVALID_ACCESS_ERR] =&gt; 15<br>    [DOM_VALIDATION_ERR] =&gt; 16<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionextension.getconstants-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionExtension::getINIEntries()} - 获取 ini 配置</span></li>   </ul>  </span> </div></div>
     * @return array An associative array with constant names as keys.*/
    public function getConstants(): array {}

/**
*<div id="reflectionextension.getinientries" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionExtension::getINIEntries</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionExtension::getINIEntries</span> &mdash; <span class="dc-title">获取 ini 配置</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionextension.getinientries-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::getINIEntries</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取扩展在 ini 配置文件中的配置。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionextension.getinientries-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionextension.getinientries-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回数组，数组索引是配置名称，值是配置值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionextension.getinientries-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::getINIEntries()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$ext </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionExtension</span><span style="color: #007700">(</span><span style="color: #DD0000">'mysql'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$ext</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getINIEntries</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [mysql.allow_persistent] =&gt; 1<br>    [mysql.max_persistent] =&gt; -1<br>    [mysql.max_links] =&gt; -1<br>    [mysql.default_host] =&gt; <br>    [mysql.default_user] =&gt; <br>    [mysql.default_password] =&gt; <br>    [mysql.default_port] =&gt; <br>    [mysql.default_socket] =&gt; <br>    [mysql.connect_timeout] =&gt; 60<br>    [mysql.trace_mode] =&gt; <br>    [mysql.allow_local_infile] =&gt; 1<br>    [mysql.cache_size] =&gt; 2000<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionextension.getinientries-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link ini_get_all()} - 获取所有配置选项</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionExtension::getConstants()} - 获取常量</span></li>   </ul>  </span> </div></div>
     * @return array An associative array with the ini entries as keys,*/
    public function getINIEntries(): array {}

/**
*<div id="reflectionextension.getclasses" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionExtension::getClasses</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionExtension::getClasses</span> &mdash; <span class="dc-title">获取类列表</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionextension.getclasses-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::getClasses</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   从扩展中获取类列表。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionextension.getclasses-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionextension.getclasses-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="classname">ReflectionClass</a></span> 对象数组，包括扩展中所有类。如果没有类，将返回空数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionextension.getclasses-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::getClasses()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$ext </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionExtension</span><span style="color: #007700">(</span><span style="color: #DD0000">'XMLWriter'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ext</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClasses</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(1) {<br>  [&quot;XMLWriter&quot;]=&gt;<br>  object(ReflectionClass)#2 (1) {<br>    [&quot;name&quot;]=&gt;<br>    string(9) &quot;XMLWriter&quot;<br>  }<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionextension.getclasses-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionExtension::getClassNames()} - 获取类名列表</span></li>   </ul>  </span> </div></div>
     * @return ReflectionClass[] An array of {@see ReflectionClass} objects, one*/
    public function getClasses(): array {}

/**
*<div id="reflectionextension.getclassnames" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionExtension::getClassNames</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionExtension::getClassNames</span> &mdash; <span class="dc-title">获取类名列表</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionextension.getclassnames-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::getClassNames</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取扩展中的类名列表。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionextension.getclassnames-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionextension.getclassnames-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   扩展中定义的类名 <span class="type" style="color:#EAB766">array</span>。如果扩展中没有定义类，将返回空数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionextension.getclassnames-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::getClassNames()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$ext </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionExtension</span><span style="color: #007700">(</span><span style="color: #DD0000">'XMLWriter'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ext</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClassNames</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(1) {<br>  [0]=&gt;<br>  string(9) &quot;XMLWriter&quot;<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionextension.getclassnames-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionExtension::getClasses()} - 获取类列表</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionExtension::getName()} - 获取扩展名称</span></li>   </ul>  </span> </div></div>
     * @return string[] An array of class names, as defined in the extension.*/
    public function getClassNames(): array {}

/**
*<div id="reflectionextension.getdependencies" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionExtension::getDependencies</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.3, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionExtension::getDependencies</span> &mdash; <span class="dc-title">获取依赖</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionextension.getdependencies-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::getDependencies</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取依赖，包括必需的、冲突的、可选的。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionextension.getdependencies-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionextension.getdependencies-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回以依赖的扩展名称为索引的数组，每一项的取值为 <span>Required</span>、<span>Optional</span> 或者 <span>Conflicts</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionextension.getdependencies-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::getDependencies()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$dom </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionExtension</span><span style="color: #007700">(</span><span style="color: #DD0000">'dom'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$dom</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDependencies</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [libxml] =&gt; Required<br>    [domxml] =&gt; Conflicts<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionextension.getdependencies-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getVersion()</strong></span></li>   </ul>  </span> </div></div>
     * @return string[] An associative array with dependencies as keys and*/
    public function getDependencies(): array {}

/**
*<div id="reflectionextension.info" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionExtension::info</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.4, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionExtension::info</span> &mdash; <span class="dc-title">输出扩展信息</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionextension.info-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::info</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   输出“<span class="function">{@link phpinfo()}</span>”信息中的扩展信息。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionextension.info-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionextension.info-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   扩展信息。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionextension.info-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::info()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$ext </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionExtension</span><span style="color: #007700">(</span><span style="color: #DD0000">'mysqli'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$ext</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">info</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>mysqli<br><br>MysqlI Support =&gt; enabled<br>Client API library version =&gt; mysqlnd 5.0.5-dev - 081106 - $Revision$<br>Active Persistent Links =&gt; 0<br>Inactive Persistent Links =&gt; 0<br>Active Links =&gt; 0<br>Persistent cache =&gt; enabled<br>put_hits =&gt; 0<br>put_misses =&gt; 0<br>get_hits =&gt; 0<br>get_misses =&gt; 0<br>size =&gt; 2000<br>free_items =&gt; 2000<br>references =&gt; 2<br><br>Directive =&gt; Local Value =&gt; Master Value<br>mysqli.max_links =&gt; Unlimited =&gt; Unlimited<br>mysqli.max_persistent =&gt; Unlimited =&gt; Unlimited<br>mysqli.allow_persistent =&gt; On =&gt; On<br>mysqli.default_host =&gt; no value =&gt; no value<br>mysqli.default_user =&gt; no value =&gt; no value<br>mysqli.default_pw =&gt; no value =&gt; no value<br>mysqli.default_port =&gt; 3306 =&gt; 3306<br>mysqli.default_socket =&gt; no value =&gt; no value<br>mysqli.reconnect =&gt; Off =&gt; Off<br>mysqli.allow_local_infile =&gt; On =&gt; On<br>mysqli.cache_size =&gt; 2000 =&gt; 2000<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionextension.info-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionExtension::getName()} - 获取扩展名称</span></li>    <li class="member"><span class="function">{@link phpinfo()} - 输出关于 PHP 配置的信息</span></li>   </ul>  </span> </div></div>
     * @return void Print extension info*/
    public function info(): void {}

/**
*<div id="reflectionextension.ispersistent" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionExtension::isPersistent</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionExtension::isPersistent</span> &mdash; <span class="dc-title">返回扩展是否持久化的</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionextension.ispersistent-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::isPersistent</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检测扩展是否为持久化的。  </p>  <p class="para">   当使用 <var class="filename">php.ini</var> 加载时，则扩展是持久化的。当使用 <span class="function">{@link dl()}</span> 加载扩展时，扩展是临时的，而不是持久化的。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionextension.ispersistent-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionextension.ispersistent-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   扩展在 <a href="https://www.php.net/manual/zh/ini.core.php#ini.extension" class="link"><span>extension</span></a> 配置中被载入返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionextension.ispersistent-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionExtension::isTemporary()} - 返回扩展是否是临时载入</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} for extensions loaded by extension, {@see false} otherwise.*/
    public function isPersistent(): bool {}

/**
*<div id="reflectionextension.istemporary" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionExtension::isTemporary</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionExtension::isTemporary</span> &mdash; <span class="dc-title">返回扩展是否是临时载入</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionextension.istemporary-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionExtension::isTemporary</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检测扩展是否为临时的。  </p>  <p class="para">   当使用 <span class="function">{@link dl()}</span> 加载扩展时，扩展是临时的。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionextension.istemporary-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionextension.istemporary-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果扩展被<span class="function">{@link dl()}</span>载入则返回<strong><span>true</span></strong> ，否则返回 <strong><span>false</span></strong> 。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionextension.istemporary-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionExtension::isPersistent()} - 返回扩展是否持久化的</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} for extensions loaded by {@see dl()}, {@see false} otherwise.*/
    public function isTemporary(): bool {}

    /**
     * Clones
     *
     * @link https://php.net/manual/en/reflectionextension.clone.php
     * @return void No value is returned, if called a fatal error will occur.
     */
    #[PhpStormStubsElementAvailable(from: "5.4", to: "8.0")]
    final private function __clone(): void {}

    /**
     * Clones
     *
     * @link https://php.net/manual/en/reflectionextension.clone.php
     * @return void No value is returned, if called a fatal error will occur.
     */
    #[PhpStormStubsElementAvailable(from: "8.1")]
    private function __clone(): void {}
}
