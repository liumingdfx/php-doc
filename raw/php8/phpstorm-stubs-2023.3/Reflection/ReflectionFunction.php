<?php

use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\Immutable;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\TentativeType;
use JetBrains\PhpStorm\Pure;

/**
*<div id="class.reflectionfunction" class="reference"> <h1 class="title">ReflectionFunction 类</h1>  <div class="partintro"><p class="verinfo">(PHP 5, PHP 7, PHP 8)</p>  <div class="section" id="reflectionfunction.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">ReflectionFunction</strong></span> 类报告有关函数的信息。   </p>  </div>  <div class="section" id="reflectionfunction.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">ReflectionFunction</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.reflectionfunctionabstract.php" class="classname">ReflectionFunctionAbstract</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">IS_DEPRECATED</var>}</var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.reflectionfunctionabstract.php#reflectionfunctionabstract.props.name">$<var class="varname">name</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link __construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.closure.php" class="type Closure" style="color:#EAB766">Closure</a></span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$function</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832">{@link export}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$return</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link getClosure}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.closure.php" class="type Closure" style="color:#EAB766">Closure</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link invoke}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$args</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link invokeArgs}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$args</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link isAnonymous}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link isDisabled}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link __toString}</span>(): <span class="type" style="color:#EAB766">string</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getAttributes}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$name</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureScopeClass}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureThis}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">object</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureUsedVariables}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getDocComment}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getEndLine}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getExtension}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionextension.php" class="type ReflectionExtension" style="color:#EAB766">ReflectionExtension</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getExtensionName}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getFileName}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getName}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getNamespaceName}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getNumberOfParameters}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getNumberOfRequiredParameters}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getParameters}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getReturnType}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectiontype.php" class="type ReflectionType" style="color:#EAB766">ReflectionType</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getShortName}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getStartLine}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getStaticVariables}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getTentativeReturnType}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectiontype.php" class="type ReflectionType" style="color:#EAB766">ReflectionType</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::hasReturnType}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::hasTentativeReturnType}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::inNamespace}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isClosure}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isDeprecated}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isGenerator}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isInternal}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isStatic}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isUserDefined}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isVariadic}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::returnsReference}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">abstract</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::__toString}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div>    <div class="section" id="reflectionfunction.constants">   <h2 class="title">预定义常量</h2>   <div class="section" id="reflectionfunction.constants.modifiers">    <h2 class="title">ReflectionFunction 修饰符</h2>    <dl>           <dt id="reflectionfunction.constants.is-deprecated"><strong><span>ReflectionFunction::IS_DEPRECATED</span></strong></dt>      <dd>       <p class="para">        表示弃用函数。       </p>      </dd>         </dl>   </div>  </div>  <div class="section">   <h2 class="title">更新日志</h2>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        已移除 <span class="methodname" style="color:#CC7832">{@link ReflectionFunction::export()}</span>。       </td>      </tr>     </tbody>       </table>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ReflectionFunction::__construct} — Constructs a ReflectionFunction object</li><li>{@link ReflectionFunction::export} — Exports function</li><li>{@link ReflectionFunction::getClosure} — Returns a dynamically created closure for the function</li><li>{@link ReflectionFunction::invoke} — Invokes function</li><li>{@link ReflectionFunction::invokeArgs} — Invokes function args</li><li>{@link ReflectionFunction::isAnonymous} — Checks if a function is anonymous</li><li>{@link ReflectionFunction::isDisabled} — Checks if function is disabled</li><li>{@link ReflectionFunction::__toString} — Returns the string representation of the ReflectionFunction object</li></ul></div>
*/
class ReflectionFunction extends ReflectionFunctionAbstract
{
    /**
     * @var string Function name, same as calling the {@see ReflectionFunction::getName()} method
     */
    #[Immutable]
    public $name;

    /**
     * Indicates deprecated functions.
     *
     * @link https://www.php.net/manual/en/class.reflectionfunction.php#reflectionfunction.constants.is-deprecated
     */
    public const IS_DEPRECATED = 2048;

    /**
     * Constructs a ReflectionFunction object
     *
     * @link https://php.net/manual/en/reflectionfunction.construct.php
     * @param string|Closure $function The name of the function to reflect or a closure.
     * @throws ReflectionException if the function does not exist.
     */
    public function __construct(#[LanguageLevelTypeAware(['8.0' => 'Closure|string'], default: '')] $function) {}

    /**
     * Returns the string representation of the ReflectionFunction object.
     *
     * @link https://php.net/manual/en/reflectionfunction.tostring.php
     */
    #[TentativeType]
    public function __toString(): string {}

/**
*<div id="reflectionfunction.export" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunction::export</h1>  <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ReflectionFunction::export</span> &mdash; <span class="dc-title">Exports function</span></p> </div> <div id="reflectionfunction.export-refsynopsisdiv">   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数已自 PHP 7.4.0起<em>弃用</em>，自 PHP 8.0.0 起<em>移除</em>。强烈建议不要依赖本函数。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionfunction.export-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunction::export</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$return</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Exports a Reflected function.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionfunction.export-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       导出的反射。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">return</span></dt>     <dd>      <p class="para">       设为 <strong><span>true</span></strong> 时返回导出结果，设为 <strong><span>false</span></strong>（默认值）则忽略返回。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionfunction.export-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果参数 <span class="parameter" style="color:#3A95FF">return</span> 设为 <strong><span>true</span></strong>，导出结果将作为 <span class="type" style="color:#EAB766">string</span>返回，否则返回 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionfunction.export-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionFunction::invoke()} - Invokes function</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionFunction::__toString()} - Returns the string representation of the ReflectionFunction object</span></li>   </ul>  </span> </div></div>
     * @return string|null If the $return parameter is set to {@see true}, then*/
    public static function export($name, $return = false) {}

/**
*<div id="reflectionfunction.isdisabled" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunction::isDisabled</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunction::isDisabled</span> &mdash; <span class="dc-title">Checks if function is disabled</span></p> </div> <div id="reflectionfunction.isdisabled-refsynopsisdiv">   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数已自 PHP 8.0.0 起被<em>废弃</em>。强烈建议不要依赖本函数。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionfunction.isdisabled-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunction::isDisabled</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the function is disabled, via the    <a href="https://www.php.net/manual/zh/ini.core.php#ini.disable-functions" class="link">disable_functions</a>   directive.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionfunction.isdisabled-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionfunction.isdisabled-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if it&#039;s disable, otherwise <strong><span>false</span></strong>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionfunction.isdisabled-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isUserDefined()} - 检查是否是用户定义</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/ini.core.php#ini.disable-functions" class="link">disable_functions directive</a></li>   </ul>  </span> </div></div>
     * @return bool {@see true} if it's disable, otherwise {@see false}*/
    public function isDisabled(): bool {}

/**
*<div id="reflectionfunction.invoke" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunction::invoke</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunction::invoke</span> &mdash; <span class="dc-title">Invokes function</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionfunction.invoke-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunction::invoke</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$args</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Invokes a reflected function.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionfunction.invoke-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">args</span></dt>     <dd>      <p class="para">       The passed in argument list. It accepts a variable number of       arguments which are passed to the function much like       <span class="function">{@link call_user_func()}</span> is.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionfunction.invoke-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the result of the invoked function call.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionfunction.invoke-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionFunction::invoke()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">title</span><span style="color: #007700">(</span><span style="color: #9876AA">$title</span><span style="color: #007700">, </span><span style="color: #9876AA">$name</span><span style="color: #007700">)<br />{<br />    return </span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%s. %s\r\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$title</span><span style="color: #007700">, </span><span style="color: #9876AA">$name</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">$function </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'title'</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">invoke</span><span style="color: #007700">(</span><span style="color: #DD0000">'Dr'</span><span style="color: #007700">, </span><span style="color: #DD0000">'Phil'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Dr. Phil<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-reflectionfunction.invoke-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="methodname" style="color:#CC7832"><strong>ReflectionFunction::invoke()</strong></span> cannot be used when reference parameters are expected.    <span class="methodname" style="color:#CC7832">{@link ReflectionFunction::invokeArgs()}</span> has to be used instead (passing references in the argument list).   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionfunction.invoke-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionFunction::export()} - Exports function</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.invoke" class="link">__invoke()</a></li>    <li class="member"><span class="function">{@link call_user_func()} - 把第一个参数作为回调函数调用</span></li>   </ul>  </span> </div></div>
     * @return mixed Returns the result of the invoked function call.*/
    public function invoke(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] ...$args): mixed {}

/**
*<div id="reflectionfunction.invokeargs" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunction::invokeArgs</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunction::invokeArgs</span> &mdash; <span class="dc-title">Invokes function args</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionfunction.invokeargs-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunction::invokeArgs</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$args</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Invokes the function and pass its arguments as array.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionfunction.invokeargs-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">args</span></dt>     <dd>      <p class="para">       The passed arguments to the function as an array, much like        <span class="function">{@link call_user_func_array()}</span> works.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionfunction.invokeargs-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the result of the invoked function  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-reflectionfunction.invokeargs-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        <span class="parameter" style="color:#3A95FF">args</span> keys will now be interpreted as parameter names, instead of being silently ignored.       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionfunction.invokeargs-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionFunction::invokeArgs()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">title</span><span style="color: #007700">(</span><span style="color: #9876AA">$title</span><span style="color: #007700">, </span><span style="color: #9876AA">$name</span><span style="color: #007700">)<br />{<br />    return </span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%s. %s\r\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$title</span><span style="color: #007700">, </span><span style="color: #9876AA">$name</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">$function </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'title'</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">invokeArgs</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'Dr'</span><span style="color: #007700">, </span><span style="color: #DD0000">'Phil'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Dr. Phil<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="methodname" style="color:#CC7832"><strong>ReflectionFunction::invokeArgs()</strong></span> with references example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">get_false_conditions</span><span style="color: #007700">(array </span><span style="color: #9876AA">$conditions</span><span style="color: #007700">, array &amp;</span><span style="color: #9876AA">$false_conditions</span><span style="color: #007700">)<br />{<br />    foreach (</span><span style="color: #9876AA">$conditions </span><span style="color: #007700">as </span><span style="color: #9876AA">$condition</span><span style="color: #007700">) {<br />        if (!</span><span style="color: #9876AA">$condition</span><span style="color: #007700">) {<br />            </span><span style="color: #9876AA">$false_conditions</span><span style="color: #007700">[] = </span><span style="color: #9876AA">$condition</span><span style="color: #007700">;<br />        }<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$function_ref     </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'get_false_conditions'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$conditions       </span><span style="color: #007700">= array(</span><span style="color: #9876AA">true</span><span style="color: #007700">, </span><span style="color: #9876AA">false</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$false_conditions </span><span style="color: #007700">= array();<br /><br /></span><span style="color: #9876AA">$function_ref</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">invokeArgs</span><span style="color: #007700">(array(</span><span style="color: #9876AA">$conditions</span><span style="color: #007700">, &amp;</span><span style="color: #9876AA">$false_conditions</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$false_conditions</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(2) {<br>  [0]=&gt;<br>  bool(false)<br>  [1]=&gt;<br>  int(0)<br>}<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-reflectionfunction.invokeargs-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    如果函数有参数需为引用，那么它们必须以引用方式传入。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionfunction.invokeargs-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionFunction::invoke()} - Invokes function</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getNumberOfParameters()} - 获取参数数目</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.invoke" class="link">__invoke()</a></li>    <li class="member"><span class="function">{@link call_user_func_array()} - 调用回调函数，并把一个数组参数作为回调函数的参数</span></li>   </ul>  </span> </div></div>
     * @return mixed the result of the invoked function*/
    public function invokeArgs(array $args): mixed {}

/**
*<div id="reflectionfunction.getclosure" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunction::getClosure</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunction::getClosure</span> &mdash; <span class="dc-title">Returns a dynamically created closure for the function</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionfunction.getclosure-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunction::getClosure</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.closure.php" class="type Closure" style="color:#EAB766">Closure</a></span></div>  <p class="para rdfs-comment">   Get a dynamically created closure for the function.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionfunction.getclosure-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionfunction.getclosure-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the newly created <span class="classname"><a href="https://www.php.net/manual/zh/class.closure.php" class="classname">Closure</a></span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionfunction.getclosure-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><a href="https://www.php.net/manual/zh/functions.first_class_callable_syntax.php" class="link">First class callable syntax</a></li>  </ul> </div></div>
     * @return Closure|null Returns {@see Closure} or {@see null} in case of an error.*/
    public function getClosure(): Closure {}

/**
*<div id="reflectionfunction.isanonymous" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunction::isAnonymous</h1>  <p class="verinfo">(PHP 8 &gt;= 8.2.0)</p><p class="refpurpose"><span class="refname">ReflectionFunction::isAnonymous</span> &mdash; <span class="dc-title">Checks if a function is anonymous</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionfunction.isanonymous-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunction::isAnonymous</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if a function is <a href="https://www.php.net/manual/zh/functions.anonymous.php" class="link">anonymous</a>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionfunction.isanonymous-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionfunction.isanonymous-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the function is anonymous, otherwise <strong><span>false</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionfunction.isanonymous-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionFunction::isAnonymous()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$rf </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(function() {});<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rf</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isAnonymous</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$rf </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'strlen'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rf</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isAnonymous</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionfunction.isanonymous-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/functions.anonymous.php" class="link">Anonymous functions</a></li>   </ul>  </span> </div></div>
*/
    public function isAnonymous(): bool {}
}
