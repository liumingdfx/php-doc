<?php

/**
*<div id="class.reflectionfiber" class="reference"> <h1 class="title">ReflectionFiber 类</h1>  <div class="partintro"><p class="verinfo">(PHP 8 &gt;= 8.1.0)</p>  <div class="section" id="reflectionfiber.intro">   <h2 class="title">简介</h2>   <p class="para">   </p>  </div>  <div class="section" id="reflectionfiber.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">final</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">ReflectionFiber</strong></strong>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionfiber.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.fiber.php" class="type Fiber" style="color:#EAB766">Fiber</a></span> <span class="parameter" style="color:#3A95FF">$fiber</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionfiber.getcallable.php" class="methodname" style="color:#CC7832">getCallable</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionfiber.getexecutingfile.php" class="methodname" style="color:#CC7832">getExecutingFile</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionfiber.getexecutingline.php" class="methodname" style="color:#CC7832">getExecutingLine</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionfiber.getfiber.php" class="methodname" style="color:#CC7832">getFiber</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.fiber.php" class="type Fiber" style="color:#EAB766">Fiber</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionfiber.gettrace.php" class="methodname" style="color:#CC7832">getTrace</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$options</span><span class="initializer"> = <strong><span>DEBUG_BACKTRACE_PROVIDE_OBJECT</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ReflectionFiber::__construct} — Constructs a ReflectionFiber object</li><li>{@link ReflectionFiber::getCallable} — Gets the callable used to create the Fiber</li><li>{@link ReflectionFiber::getExecutingFile} — Get the file name of the current execution point</li><li>{@link ReflectionFiber::getExecutingLine} — Get the line number of the current execution point</li><li>{@link ReflectionFiber::getFiber} — Get the reflected Fiber instance</li><li>{@link ReflectionFiber::getTrace} — Get the backtrace of the current execution point</li></ul></div>
*/
final class ReflectionFiber
{
    public function __construct(Fiber $fiber) {}

/**
*<div id="reflectionfiber.getfiber" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFiber::getFiber</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">ReflectionFiber::getFiber</span> &mdash; <span class="dc-title">Get the reflected Fiber instance</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionfiber.getfiber-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFiber::getFiber</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.fiber.php" class="type Fiber" style="color:#EAB766">Fiber</a></span></div>  <p class="para rdfs-comment">   Returns the <span class="classname"><a href="https://www.php.net/manual/zh/class.fiber.php" class="classname">Fiber</a></span> instance being reflected.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionfiber.getfiber-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionfiber.getfiber-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The <span class="classname"><a href="https://www.php.net/manual/zh/class.fiber.php" class="classname">Fiber</a></span> instance being reflected.  </p> </div></div>
*/
    public function getFiber(): Fiber {}

/**
*<div id="reflectionfiber.getexecutingfile" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFiber::getExecutingFile</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">ReflectionFiber::getExecutingFile</span> &mdash; <span class="dc-title">Get the file name of the current execution point</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionfiber.getexecutingfile-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFiber::getExecutingFile</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Returns the full path and file name of the current execution point in the reflected <span class="classname"><a href="https://www.php.net/manual/zh/class.fiber.php" class="classname">Fiber</a></span>.   If the fiber has not been started or has terminated, an <span class="classname"><a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a></span> is thrown.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionfiber.getexecutingfile-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionfiber.getexecutingfile-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The full path and file name of the reflected fiber.  </p> </div></div>
*/
    public function getExecutingFile(): ?string {}

/**
*<div id="reflectionfiber.getexecutingline" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFiber::getExecutingLine</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">ReflectionFiber::getExecutingLine</span> &mdash; <span class="dc-title">Get the line number of the current execution point</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionfiber.getexecutingline-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFiber::getExecutingLine</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Returns the line number of the current execution point in the reflected <span class="classname"><a href="https://www.php.net/manual/zh/class.fiber.php" class="classname">Fiber</a></span>. If the fiber   has not been started or has terminated, an <span class="classname"><a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a></span> is thrown.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionfiber.getexecutingline-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionfiber.getexecutingline-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The line number of the current execution point in the fiber.  </p> </div></div>
*/
    public function getExecutingLine(): ?int {}

/**
*<div id="reflectionfiber.getcallable" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFiber::getCallable</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">ReflectionFiber::getCallable</span> &mdash; <span class="dc-title">Gets the callable used to create the Fiber</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionfiber.getcallable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFiber::getCallable</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span></div>  <p class="para rdfs-comment">   Returns the callable used to construct the <span class="classname"><a href="https://www.php.net/manual/zh/class.fiber.php" class="classname">Fiber</a></span>. If the fiber has terminated, an   <span class="classname"><a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a></span> is thrown.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionfiber.getcallable-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionfiber.getcallable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The callable used to create the <span class="classname"><a href="https://www.php.net/manual/zh/class.fiber.php" class="classname">Fiber</a></span>.  </p> </div></div>
*/
    public function getCallable(): callable {}

/**
*<div id="reflectionfiber.gettrace" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFiber::getTrace</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">ReflectionFiber::getTrace</span> &mdash; <span class="dc-title">Get the backtrace of the current execution point</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionfiber.gettrace-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFiber::getTrace</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$options</span><span class="initializer"> = <strong><span>DEBUG_BACKTRACE_PROVIDE_OBJECT</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Get the backtrace of the current execution point in the reflected <span class="classname"><a href="https://www.php.net/manual/zh/class.fiber.php" class="classname">Fiber</a></span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionfiber.gettrace-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">options</span></dt>     <dd>      <p class="para">       The value of <span class="parameter" style="color:#3A95FF">options</span> can be any of       the following flags.      </p>      <p class="para">       <table class="doctable table">        <caption><strong>Available options</strong></caption>                 <thead>          <tr>           <th>Option</th>           <th>说明</th>          </tr>         </thead>         <tbody class="tbody">          <tr>           <td>            <strong><span>DEBUG_BACKTRACE_PROVIDE_OBJECT</span></strong>           </td>           <td>            Default.           </td>          </tr>          <tr>           <td>            <strong><span>DEBUG_BACKTRACE_IGNORE_ARGS</span></strong>           </td>           <td>            Don&#039;t include the argument information for functions in the stack            trace.           </td>          </tr>         </tbody>               </table>      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionfiber.gettrace-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The backtrace of the current execution point in the fiber.  </p> </div></div>
*/
    public function getTrace(int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT): array {}
}
