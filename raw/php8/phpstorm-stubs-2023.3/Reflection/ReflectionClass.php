<?php

use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\Immutable;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\TentativeType;
use JetBrains\PhpStorm\Pure;

/**
*<div id="class.reflectionclass" class="reference"> <h1 class="title">ReflectionClass 类</h1>  <div class="partintro"><p class="verinfo">(PHP 5, PHP 7, PHP 8)</p>  <div class="section" id="reflectionclass.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">ReflectionClass</strong></span> 类报告了一个类的有关信息。   </p>  </div>  <div class="section" id="reflectionclass.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">ReflectionClass</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.reflector.php" class="interfacename">Reflector</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.reflectionclass.php#reflectionclass.constants.is-implicit-abstract"><var class="varname">IS_IMPLICIT_ABSTRACT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.reflectionclass.php#reflectionclass.constants.is-explicit-abstract"><var class="varname">IS_EXPLICIT_ABSTRACT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.reflectionclass.php#reflectionclass.constants.is-final"><var class="varname">IS_FINAL</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.reflectionclass.php#reflectionclass.constants.is-readonly"><var class="varname">IS_READONLY</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.reflectionclass.php#reflectionclass.props.name">$<var class="varname">name</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$objectOrClass</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.export.php" class="methodname" style="color:#CC7832">export</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$argument</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$return</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getattributes.php" class="methodname" style="color:#CC7832">getAttributes</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$name</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getconstant.php" class="methodname" style="color:#CC7832">getConstant</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getconstants.php" class="methodname" style="color:#CC7832">getConstants</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$filter</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getconstructor.php" class="methodname" style="color:#CC7832">getConstructor</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionmethod.php" class="type ReflectionMethod" style="color:#EAB766">ReflectionMethod</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getdefaultproperties.php" class="methodname" style="color:#CC7832">getDefaultProperties</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getdoccomment.php" class="methodname" style="color:#CC7832">getDocComment</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getendline.php" class="methodname" style="color:#CC7832">getEndLine</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getextension.php" class="methodname" style="color:#CC7832">getExtension</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionextension.php" class="type ReflectionExtension" style="color:#EAB766">ReflectionExtension</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getextensionname.php" class="methodname" style="color:#CC7832">getExtensionName</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getfilename.php" class="methodname" style="color:#CC7832">getFileName</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getinterfacenames.php" class="methodname" style="color:#CC7832">getInterfaceNames</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getinterfaces.php" class="methodname" style="color:#CC7832">getInterfaces</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getmethod.php" class="methodname" style="color:#CC7832">getMethod</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionmethod.php" class="type ReflectionMethod" style="color:#EAB766">ReflectionMethod</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getmethods.php" class="methodname" style="color:#CC7832">getMethods</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$filter</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getmodifiers.php" class="methodname" style="color:#CC7832">getModifiers</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getname.php" class="methodname" style="color:#CC7832">getName</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getnamespacename.php" class="methodname" style="color:#CC7832">getNamespaceName</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getparentclass.php" class="methodname" style="color:#CC7832">getParentClass</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getproperties.php" class="methodname" style="color:#CC7832">getProperties</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$filter</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getproperty.php" class="methodname" style="color:#CC7832">getProperty</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionproperty.php" class="type ReflectionProperty" style="color:#EAB766">ReflectionProperty</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getreflectionconstant.php" class="methodname" style="color:#CC7832">getReflectionConstant</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionclassconstant.php" class="type ReflectionClassConstant" style="color:#EAB766">ReflectionClassConstant</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getreflectionconstants.php" class="methodname" style="color:#CC7832">getReflectionConstants</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$filter</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getshortname.php" class="methodname" style="color:#CC7832">getShortName</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getstartline.php" class="methodname" style="color:#CC7832">getStartLine</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getstaticproperties.php" class="methodname" style="color:#CC7832">getStaticProperties</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.getstaticpropertyvalue.php" class="methodname" style="color:#CC7832">getStaticPropertyValue</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">&$def_value</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.gettraitaliases.php" class="methodname" style="color:#CC7832">getTraitAliases</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.gettraitnames.php" class="methodname" style="color:#CC7832">getTraitNames</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.gettraits.php" class="methodname" style="color:#CC7832">getTraits</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.hasconstant.php" class="methodname" style="color:#CC7832">hasConstant</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.hasmethod.php" class="methodname" style="color:#CC7832">hasMethod</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.hasproperty.php" class="methodname" style="color:#CC7832">hasProperty</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.implementsinterface.php" class="methodname" style="color:#CC7832">implementsInterface</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$interface</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.innamespace.php" class="methodname" style="color:#CC7832">inNamespace</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.isabstract.php" class="methodname" style="color:#CC7832">isAbstract</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.isanonymous.php" class="methodname" style="color:#CC7832">isAnonymous</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.iscloneable.php" class="methodname" style="color:#CC7832">isCloneable</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.isenum.php" class="methodname" style="color:#CC7832">isEnum</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.isfinal.php" class="methodname" style="color:#CC7832">isFinal</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.isinstance.php" class="methodname" style="color:#CC7832">isInstance</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.isinstantiable.php" class="methodname" style="color:#CC7832">isInstantiable</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.isinterface.php" class="methodname" style="color:#CC7832">isInterface</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.isinternal.php" class="methodname" style="color:#CC7832">isInternal</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.isiterable.php" class="methodname" style="color:#CC7832">isIterable</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.isreadonly.php" class="methodname" style="color:#CC7832">isReadOnly</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.issubclassof.php" class="methodname" style="color:#CC7832">isSubclassOf</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$class</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.istrait.php" class="methodname" style="color:#CC7832">isTrait</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.isuserdefined.php" class="methodname" style="color:#CC7832">isUserDefined</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.newinstance.php" class="methodname" style="color:#CC7832">newInstance</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$args</span></span>): <span class="type" style="color:#EAB766">object</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.newinstanceargs.php" class="methodname" style="color:#CC7832">newInstanceArgs</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$args</span><span class="initializer"> = []</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">object</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.newinstancewithoutconstructor.php" class="methodname" style="color:#CC7832">newInstanceWithoutConstructor</a></span>(): <span class="type" style="color:#EAB766">object</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.setstaticpropertyvalue.php" class="methodname" style="color:#CC7832">setStaticPropertyValue</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionclass.tostring.php" class="methodname" style="color:#CC7832">__toString</a></span>(): <span class="type" style="color:#EAB766">string</span></div>   }</div>  </div>    <div class="section" id="reflectionclass.props">   <h2 class="title">属性</h2>   <dl>         <dt id="reflectionclass.props.name"><var class="varname">name</var></dt>     <dd>      <p class="para">       类名。只读，尝试赋值时抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。      </p>     </dd>       </dl>  </div>    <div class="section" id="reflectionclass.constants">   <h2 class="title">预定义常量</h2>   <div class="section" id="reflectionclass.constants.modifiers">    <h2 class="title">ReflectionClass 修饰符</h2>    <dl>           <dt id="reflectionclass.constants.is-implicit-abstract"><strong><span>ReflectionClass::IS_IMPLICIT_ABSTRACT</span></strong></dt>      <dd>       <p class="para">        表示该类是 <a href="https://www.php.net/manual/zh/language.oop5.abstract.php" class="link">abstract</a>，因为有一些抽象方法。       </p>      </dd>                <dt id="reflectionclass.constants.is-explicit-abstract"><strong><span>ReflectionClass::IS_EXPLICIT_ABSTRACT</span></strong></dt>      <dd>       <p class="para">        表示该类是 <a href="https://www.php.net/manual/zh/language.oop5.abstract.php" class="link">abstract</a>，因为已明确定义。       </p>      </dd>                <dt id="reflectionclass.constants.is-final"><strong><span>ReflectionClass::IS_FINAL</span></strong></dt>      <dd>       <p class="para">        表示该类是 <a href="https://www.php.net/manual/zh/language.oop5.final.php" class="link">final</a>。       </p>      </dd>                <dt id="reflectionclass.constants.is-readonly"><strong><span>ReflectionClass::IS_READONLY</span></strong></dt>      <dd>       <p class="para">        表示该类是 <a href="https://www.php.net/manual/zh/language.oop5.basic.php#language.oop5.basic.class.readonly" class="link">readonly</a>。       </p>      </dd>         </dl>   </div>  </div>  <div class="section">   <h2 class="title">更新日志</h2>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        移除 <span class="methodname" style="color:#CC7832">{@link ReflectionClass::export()}</span>。       </td>      </tr>     </tbody>       </table>  </div></div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ReflectionClass::__construct} — 初始化 ReflectionClass 类</li><li>{@link ReflectionClass::export} — 导出类</li><li>{@link ReflectionClass::getAttributes} — 获取所有属性</li><li>{@link ReflectionClass::getConstant} — 获取已定义的常量</li><li>{@link ReflectionClass::getConstants} — 获取常量</li><li>{@link ReflectionClass::getConstructor} — 获取类的构造函数</li><li>{@link ReflectionClass::getDefaultProperties} — 获取默认属性</li><li>{@link ReflectionClass::getDocComment} — 获取文档注释</li><li>{@link ReflectionClass::getEndLine} — 获取最后一行的行数</li><li>{@link ReflectionClass::getExtension} — 根据已定义的类获取所在扩展的 ReflectionExtension 对象</li><li>{@link ReflectionClass::getExtensionName} — 获取定义的类所在的扩展的名称</li><li>{@link ReflectionClass::getFileName} — 获取定义类的文件名</li><li>{@link ReflectionClass::getInterfaceNames} — 获取接口（interface）名称</li><li>{@link ReflectionClass::getInterfaces} — 获取接口</li><li>{@link ReflectionClass::getMethod} — 获取类方法的 ReflectionMethod</li><li>{@link ReflectionClass::getMethods} — 获取方法的数组</li><li>{@link ReflectionClass::getModifiers} — 获取类的修饰符</li><li>{@link ReflectionClass::getName} — 获取类名</li><li>{@link ReflectionClass::getNamespaceName} — 获取命名空间的名称</li><li>{@link ReflectionClass::getParentClass} — 获取父类</li><li>{@link ReflectionClass::getProperties} — 获取属性</li><li>{@link ReflectionClass::getProperty} — 获取类的一个属性的 ReflectionProperty</li><li>{@link ReflectionClass::getReflectionConstant} — Gets a ReflectionClassConstant for a class's constant</li><li>{@link ReflectionClass::getReflectionConstants} — Gets class constants</li><li>{@link ReflectionClass::getShortName} — 获取短名</li><li>{@link ReflectionClass::getStartLine} — 获取起始行号</li><li>{@link ReflectionClass::getStaticProperties} — 获取静态（static）属性</li><li>{@link ReflectionClass::getStaticPropertyValue} — 获取静态（static）属性的值</li><li>{@link ReflectionClass::getTraitAliases} — 返回 trait 别名数组</li><li>{@link ReflectionClass::getTraitNames} — 返回这个类所使用 traits 的名称的数组</li><li>{@link ReflectionClass::getTraits} — 返回这个类所使用的 traits 数组</li><li>{@link ReflectionClass::hasConstant} — 检查常量是否已经定义</li><li>{@link ReflectionClass::hasMethod} — 检查方法是否已定义</li><li>{@link ReflectionClass::hasProperty} — 检查属性是否已定义</li><li>{@link ReflectionClass::implementsInterface} — 实现接口</li><li>{@link ReflectionClass::inNamespace} — 检查是否位于命名空间中</li><li>{@link ReflectionClass::isAbstract} — 检查类是否是抽象类（abstract）</li><li>{@link ReflectionClass::isAnonymous} — 检查类是否是匿名类</li><li>{@link ReflectionClass::isCloneable} — 返回了一个类是否可复制</li><li>{@link ReflectionClass::isEnum} — Returns whether this is an enum</li><li>{@link ReflectionClass::isFinal} — 检查类是否声明为 final</li><li>{@link ReflectionClass::isInstance} — 检查类的实例</li><li>{@link ReflectionClass::isInstantiable} — 检查类是否可实例化</li><li>{@link ReflectionClass::isInterface} — 检查类是否是一个接口（interface）</li><li>{@link ReflectionClass::isInternal} — 检查类是否由扩展或核心在内部定义</li><li>{@link ReflectionClass::isIterable} — Check whether this class is iterable</li><li>{@link ReflectionClass::isIterateable} — 别名 ReflectionClass::isIterable</li><li>{@link ReflectionClass::isReadOnly} — Checks if class is readonly</li><li>{@link ReflectionClass::isSubclassOf} — 检查是否为子类</li><li>{@link ReflectionClass::isTrait} — 返回了是否是 trait</li><li>{@link ReflectionClass::isUserDefined} — 检查是否由用户定义的</li><li>{@link ReflectionClass::newInstance} — 从指定的参数创建新类实例</li><li>{@link ReflectionClass::newInstanceArgs} — 从给出的参数创建一个新的类实例</li><li>{@link ReflectionClass::newInstanceWithoutConstructor} — 创建新的类实例而不调用它的构造函数</li><li>{@link ReflectionClass::setStaticPropertyValue} — 设置静态属性的值</li><li>{@link ReflectionClass::__toString} — 返回 ReflectionClass 对象字符串的表示形式</li></ul></div>
*/
class ReflectionClass implements Reflector
{
    /**
     * @var class-string<T> Name of the class, same as calling the {@see ReflectionClass::getName()} method
     */
    #[Immutable]
    #[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
    public $name;

    /**
     * Indicates class that is abstract because it has some abstract methods.
     *
     * @link https://www.php.net/manual/en/class.reflectionclass.php#reflectionclass.constants.is-implicit-abstract
     */
    public const IS_IMPLICIT_ABSTRACT = 16;

    /**
     * Indicates class that is abstract because of its definition.
     *
     * @link https://www.php.net/manual/en/class.reflectionclass.php#reflectionclass.constants.is-explicit-abstract
     */
    public const IS_EXPLICIT_ABSTRACT = 64;

    /**
     * Indicates final class.
     *
     * @link https://www.php.net/manual/en/class.reflectionclass.php#reflectionclass.constants.is-final
     */
    public const IS_FINAL = 32;

    /**
     * @since 8.2
     */
    public const IS_READONLY = 65536;

    /**
     * Constructs a ReflectionClass
     *
     * @link https://php.net/manual/en/reflectionclass.construct.php
     * @param class-string<T>|T $objectOrClass Either a string containing the name of
     * the class to reflect, or an object.
     * @throws ReflectionException if the class does not exist.
     */
    public function __construct(#[LanguageLevelTypeAware(['8.0' => 'object|string'], default: '')] $objectOrClass) {}

/**
*<div id="reflectionclass.export" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::export</h1>  <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ReflectionClass::export</span> &mdash; <span class="dc-title">导出类</span></p> </div> <div id="reflectionclass.export-refsynopsisdiv">   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数已自 PHP 7.4.0起<em>弃用</em>，自 PHP 8.0.0 起<em>移除</em>。强烈建议不要依赖本函数。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.export-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::export</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$argument</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$return</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   导出反射后的类。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.export-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">argument</span></dt>     <dd>      <p class="para">       导出的反射。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">return</span></dt>     <dd>      <p class="para">       设为 <strong><span>true</span></strong> 时返回导出结果，设为 <strong><span>false</span></strong>（默认值）则忽略返回。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.export-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果参数 <span class="parameter" style="color:#3A95FF">return</span> 设为 <strong><span>true</span></strong>，导出结果将作为 <span class="type" style="color:#EAB766">string</span>返回，否则返回 <strong><span>null</span></strong>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.export-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::export()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Apple </span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">$var1</span><span style="color: #007700">;<br />    public </span><span style="color: #9876AA">$var2 </span><span style="color: #007700">= </span><span style="color: #DD0000">'Orange'</span><span style="color: #007700">;<br /><br />    public function </span><span style="color: #9876AA">type</span><span style="color: #007700">() {<br />        return </span><span style="color: #DD0000">'Apple'</span><span style="color: #007700">;<br />    }<br />}<br /></span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">::</span><span style="color: #9876AA">export</span><span style="color: #007700">(</span><span style="color: #DD0000">'Apple'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Class [ &lt;user&gt; class Apple ] {<br>  @@ php shell code 1-8<br><br>  - Constants [0] {<br>  }<br><br>  - Static properties [0] {<br>  }<br><br>  - Static methods [0] {<br>  }<br><br>  - Properties [2] {<br>    Property [ &lt;default&gt; public $var1 ]<br>    Property [ &lt;default&gt; public $var2 ]<br>  }<br><br>  - Methods [1] {<br>    Method [ &lt;user&gt; public method type ] {<br>      @@ php shell code 5 - 7<br>    }<br>  }<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.export-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getName()} - 获取类名</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::__toString()} - 返回 ReflectionClass 对象字符串的表示形式</span></li>   </ul>  </span> </div></div>
     * @return string|null If the $return parameter is set to {@see true}, then the*/
    public static function export($argument, $return = false) {}

    /**
     * Returns the string representation of the ReflectionClass object.
     *
     * @link https://php.net/manual/en/reflectionclass.tostring.php
     * @return string A string representation of this {@see ReflectionClass} instance.
     */
    #[TentativeType]
    public function __toString(): string {}

/**
*<div id="reflectionclass.getname" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getName</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getName</span> &mdash; <span class="dc-title">获取类名</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getName</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   获取类的名称。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getname-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   类名。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.getname-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getName()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">namespace </span><span style="color: #9876AA">A\B</span><span style="color: #007700">;<br /><br />class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{ }<br /><br /></span><span style="color: #9876AA">$function </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'stdClass'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">inNamespace</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getNamespaceName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getShortName</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$function </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'A\\B\\Foo'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">inNamespace</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getNamespaceName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getShortName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>string(8) &quot;stdClass&quot;<br>string(0) &quot;&quot;<br>string(8) &quot;stdClass&quot;<br><br>bool(true)<br>string(7) &quot;A\B\Foo&quot;<br>string(3) &quot;A\B&quot;<br>string(3) &quot;Foo&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getname-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getNamespaceName()} - 获取命名空间的名称</span></li>   </ul>  </span> </div></div>
     * @return string The class name.*/
    public function getName(): string {}

/**
*<div id="reflectionclass.isinternal" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isInternal</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isInternal</span> &mdash; <span class="dc-title">检查类是否由扩展或核心在内部定义</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.isinternal-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isInternal</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查类是否由扩展或核心在内部定义，与用户定义相反。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.isinternal-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.isinternal-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.isinternal-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isInternal()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$internalclass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'ReflectionClass'</span><span style="color: #007700">);<br /><br />class </span><span style="color: #9876AA">Apple </span><span style="color: #007700">{}<br /></span><span style="color: #9876AA">$userclass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Apple'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$internalclass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isInternal</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$userclass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isInternal</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.isinternal-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isUserDefined()} - 检查是否由用户定义的</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} on success or {@see false} on failure.*/
    public function isInternal(): bool {}

/**
*<div id="reflectionclass.isuserdefined" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isUserDefined</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isUserDefined</span> &mdash; <span class="dc-title">检查是否由用户定义的</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.isuserdefined-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isUserDefined</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查一个类是否由用户定义，和内置相对。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.isuserdefined-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.isuserdefined-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.isuserdefined-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isInternal()} - 检查类是否由扩展或核心在内部定义</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} on success or {@see false} on failure.*/
    public function isUserDefined(): bool {}

/**
*<div id="reflectionclass.isinstantiable" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isInstantiable</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isInstantiable</span> &mdash; <span class="dc-title">检查类是否可实例化</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.isinstantiable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isInstantiable</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查这个类是否可实例化。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.isinstantiable-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.isinstantiable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.isinstantiable-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isInstantiable()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">C </span><span style="color: #007700">{ }<br /><br />interface </span><span style="color: #9876AA">iface </span><span style="color: #007700">{<br />    function </span><span style="color: #9876AA">f1</span><span style="color: #007700">();<br />}<br /><br />class </span><span style="color: #9876AA">ifaceImpl </span><span style="color: #007700">implements </span><span style="color: #9876AA">iface </span><span style="color: #007700">{<br />    function </span><span style="color: #9876AA">f1</span><span style="color: #007700">() {}<br />}<br /><br />abstract class </span><span style="color: #9876AA">abstractClass </span><span style="color: #007700">{<br />    function </span><span style="color: #9876AA">f1</span><span style="color: #007700">() { }<br />    abstract function </span><span style="color: #9876AA">f2</span><span style="color: #007700">();<br />}<br /><br />class </span><span style="color: #9876AA">D </span><span style="color: #007700">extends </span><span style="color: #9876AA">abstractClass </span><span style="color: #007700">{<br />    function </span><span style="color: #9876AA">f2</span><span style="color: #007700">() { }<br />}<br /><br />trait </span><span style="color: #9876AA">T </span><span style="color: #007700">{<br />    function </span><span style="color: #9876AA">f1</span><span style="color: #007700">() {}<br />}<br /><br />class </span><span style="color: #9876AA">privateConstructor </span><span style="color: #007700">{<br />    private function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">() { }<br />}<br /><br /></span><span style="color: #9876AA">$classes </span><span style="color: #007700">= array(<br />    </span><span style="color: #DD0000">"C"</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">"iface"</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">"ifaceImpl"</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">"abstractClass"</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">"D"</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">"T"</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">"privateConstructor"</span><span style="color: #007700">,<br />);<br /><br />foreach(</span><span style="color: #9876AA">$classes  </span><span style="color: #007700">as </span><span style="color: #9876AA">$class </span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$reflectionClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">);<br />    echo </span><span style="color: #DD0000">"Is </span><span style="color: #9876AA">$class</span><span style="color: #DD0000"> instantiable?  "</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflectionClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isInstantiable</span><span style="color: #007700">()); <br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Is C instantiable?  bool(true)<br>Is iface instantiable?  bool(false)<br>Is ifaceImpl instantiable?  bool(true)<br>Is abstractClass instantiable?  bool(false)<br>Is D instantiable?  bool(true)<br>Is T instantiable?  bool(false)<br>Is privateConstructor instantiable?  bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.isinstantiable-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isInstance()} - 检查类的实例</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} on success or {@see false} on failure.*/
    public function isInstantiable(): bool {}

/**
*<div id="reflectionclass.iscloneable" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isCloneable</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isCloneable</span> &mdash; <span class="dc-title">返回了一个类是否可复制</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.iscloneable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isCloneable</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   返回了这个类是否可复制。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.iscloneable-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.iscloneable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果这个类可以复制返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.iscloneable-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isCloneable()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">NotCloneable </span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">$var1</span><span style="color: #007700">;<br />    <br />    private function </span><span style="color: #9876AA">__clone</span><span style="color: #007700">() {<br />    }<br />}<br /><br />class </span><span style="color: #9876AA">Cloneable </span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">$var1</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$notCloneable </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'NotCloneable'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$cloneable </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Cloneable'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$notCloneable</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCloneable</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$cloneable</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCloneable</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>bool(true)<br></span></div>    </div>   </div>  </span> </div></div>
     * @return bool Returns {@see true} if the class is cloneable, {@see false} otherwise.*/
    public function isCloneable(): bool {}

/**
*<div id="reflectionclass.getfilename" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getFileName</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getFileName</span> &mdash; <span class="dc-title">获取定义类的文件名</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getfilename-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getFileName</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   获取类被定义的文件的文件名。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getfilename-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getfilename-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回类所定义的文件名。如果这个类是在 PHP 核心或 PHP 扩展中定义的，则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getfilename-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getExtensionName()} - 获取定义的类所在的扩展的名称</span></li>   </ul>  </span> </div></div>
     * @return string|false the filename of the file in which the class has been defined.*/
    public function getFileName(): string|false {}

/**
*<div id="reflectionclass.getstartline" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getStartLine</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getStartLine</span> &mdash; <span class="dc-title">获取起始行号</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getstartline-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getStartLine</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   获取起始的行号。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getstartline-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getstartline-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   起始的行号，类型是 <span class="type" style="color:#EAB766">int</span>，如果未知，则为 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getstartline-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getEndLine()} - 获取最后一行的行数</span></li>   </ul>  </span> </div></div>
     * @return int The starting line number, as an integer.*/
    public function getStartLine(): int|false {}

/**
*<div id="reflectionclass.getendline" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getEndLine</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getEndLine</span> &mdash; <span class="dc-title">获取最后一行的行数</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getendline-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getEndLine</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   从用户定义的类获取其最后一行的行数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getendline-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getendline-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回用户定义的类最后一行的行数，如果未知则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.getendline-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getEndLine()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Test Class<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">TestClass </span><span style="color: #007700">{ }<br /><br /></span><span style="color: #9876AA">$rc </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestClass'</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #9876AA">$rc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getEndLine</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>3<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getendline-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getStartLine()} - 获取起始行号</span></li>   </ul>  </span> </div></div>
     * @return int|false The ending line number of the user defined class, or*/
    public function getEndLine(): int|false {}

/**
*<div id="reflectionclass.getdoccomment" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getDocComment</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getDocComment</span> &mdash; <span class="dc-title">获取文档注释</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getdoccomment-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getDocComment</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   从类中获取文档注释。文档注释以 <span>//*</span> 开头，后跟空格。   如果类定义上方有多个文档注释，则采用最接近该类的注释。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getdoccomment-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getdoccomment-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果存在则返回文档注释，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.getdoccomment-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getDocComment()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//*<br /> * A test class<br /> *<br /> * @param  foo bar<br /> * @return baz<br /> <br /></span><span style="color: #007700">class </span><span style="color: #9876AA">TestClass </span><span style="color: #007700">{ }<br /><br /></span><span style="color: #9876AA">$rc </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestClass'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDocComment</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(61) &quot;//* <br> * A test class<br> *<br> * @param  foo bar<br> * @return baz<br> &quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getdoccomment-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getName()} - 获取类名</span></li>   </ul>  </span> </div></div>
     * @return string|false The doc comment if it exists, otherwise {@see false}*/
    public function getDocComment(): string|false {}

/**
*<div id="reflectionclass.getconstructor" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getConstructor</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getConstructor</span> &mdash; <span class="dc-title">获取类的构造函数</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getconstructor-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getConstructor</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionmethod.php" class="type ReflectionMethod" style="color:#EAB766">ReflectionMethod</a></span></span></div>  <p class="para rdfs-comment">   获取已反射的类的构造函数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getconstructor-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getconstructor-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   一个 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span> 对象，反射了类的构造函数，或者当类不存在构造函数时返回 <strong><span>null</span></strong>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.getconstructor-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getConstructor()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'ReflectionClass'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$constructor </span><span style="color: #007700">= </span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getConstructor</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$constructor</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(ReflectionMethod)#2 (2) {<br>  [&quot;name&quot;]=&gt;<br>  string(11) &quot;__construct&quot;<br>  [&quot;class&quot;]=&gt;<br>  string(15) &quot;ReflectionClass&quot;<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getconstructor-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getName()} - 获取类名</span></li>   </ul>  </span> </div></div>
     * @return ReflectionMethod|null A {@see ReflectionMethod} object reflecting*/
    public function getConstructor(): ?ReflectionMethod {}

/**
*<div id="reflectionclass.hasmethod" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::hasMethod</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::hasMethod</span> &mdash; <span class="dc-title">检查方法是否已定义</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.hasmethod-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::hasMethod</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查一个类中指定的方法是否已定义。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.hasmethod-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       要检查的方法的名称。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.hasmethod-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果有这个方法返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.hasmethod-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::hasMethod()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">Class </span><span style="color: #9876AA">C </span><span style="color: #007700">{<br />    public function </span><span style="color: #9876AA">publicFoo</span><span style="color: #007700">() {<br />        return </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br />    }<br /><br />    protected function </span><span style="color: #9876AA">protectedFoo</span><span style="color: #007700">() {<br />        return </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br />    }<br /><br />    private function </span><span style="color: #9876AA">privateFoo</span><span style="color: #007700">() {<br />        return </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br />    }<br /><br />    static function </span><span style="color: #9876AA">staticFoo</span><span style="color: #007700">() {<br />        return </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$rc </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">"C"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'publicFoo'</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'protectedFoo'</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'privateFoo'</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'staticFoo'</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// C should not have method bar<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// Method names are case insensitive<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'PUBLICfOO'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(true)<br>bool(true)<br>bool(true)<br>bool(false)<br>bool(true)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.hasmethod-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::hasConstant()} - 检查常量是否已经定义</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::hasProperty()} - 检查属性是否已定义</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} if it has the method, otherwise {@see false}*/
    public function hasMethod(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $name): bool {}

/**
*<div id="reflectionclass.getmethod" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getMethod</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getMethod</span> &mdash; <span class="dc-title">获取类方法的 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span></span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getmethod-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getMethod</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionmethod.php" class="type ReflectionMethod" style="color:#EAB766">ReflectionMethod</a></span></div>  <p class="para rdfs-comment">   获取类方法的 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getmethod-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       要反射的方法名称。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getmethod-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   一个 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-reflectionclass.getmethod-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果方法不存在则会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span> 异常。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.getmethod-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getMethod()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'ReflectionClass'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$method </span><span style="color: #007700">= </span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'getMethod'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$method</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(ReflectionMethod)#2 (2) {<br>  [&quot;name&quot;]=&gt;<br>  string(9) &quot;getMethod&quot;<br>  [&quot;class&quot;]=&gt;<br>  string(15) &quot;ReflectionClass&quot;<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getmethod-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getMethods()} - 获取方法的数组</span></li>   </ul>  </span> </div></div>
     * @return ReflectionMethod A {@see ReflectionMethod}*/
    public function getMethod(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $name): ReflectionMethod {}

/**
*<div id="reflectionclass.getmethods" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getMethods</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getMethods</span> &mdash; <span class="dc-title">获取方法的数组</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getmethods-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getMethods</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$filter</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取类的方法的数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getmethods-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">filter</span></dt>     <dd>      <p class="para">       过滤结果为仅包含某些属性的方法。默认不过滤。      </p>      <p class="para">              <strong><span>ReflectionMethod::IS_STATIC</span></strong>、       <strong><span>ReflectionMethod::IS_PUBLIC</span></strong>、       <strong><span>ReflectionMethod::IS_PROTECTED</span></strong>、       <strong><span>ReflectionMethod::IS_PRIVATE</span></strong>、       <strong><span>ReflectionMethod::IS_ABSTRACT</span></strong>、       <strong><span>ReflectionMethod::IS_FINAL</span></strong> 的按位或（OR），就会返回<em>任意</em>满足条件的属性。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <span class="simpara">        请注意：其他位操作，例如 <span>~</span> 无法按预期运行。这个示例也就是说，无法获取所有的非静态方法。       </span>      </p></blockquote>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getmethods-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   包含每个方法 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span> 对象的<span class="type" style="color:#EAB766"><span class="type 数组" style="color:#EAB766">数组</span></span>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-reflectionclass.getmethods-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>7.2.0</td>      <td>       <span class="parameter" style="color:#3A95FF">filter</span> 现在允许为 null。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.getmethods-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getMethods()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Apple </span><span style="color: #007700">{<br />    public function </span><span style="color: #9876AA">firstMethod</span><span style="color: #007700">() { }<br />    final protected function </span><span style="color: #9876AA">secondMethod</span><span style="color: #007700">() { }<br />    private static function </span><span style="color: #9876AA">thirdMethod</span><span style="color: #007700">() { }<br />}<br /><br /></span><span style="color: #9876AA">$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Apple'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$methods </span><span style="color: #007700">= </span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMethods</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$methods</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(3) {<br>  [0]=&gt;<br>  object(ReflectionMethod)#2 (2) {<br>    [&quot;name&quot;]=&gt;<br>    string(11) &quot;firstMethod&quot;<br>    [&quot;class&quot;]=&gt;<br>    string(5) &quot;Apple&quot;<br>  }<br>  [1]=&gt;<br>  object(ReflectionMethod)#3 (2) {<br>    [&quot;name&quot;]=&gt;<br>    string(12) &quot;secondMethod&quot;<br>    [&quot;class&quot;]=&gt;<br>    string(5) &quot;Apple&quot;<br>  }<br>  [2]=&gt;<br>  object(ReflectionMethod)#4 (2) {<br>    [&quot;name&quot;]=&gt;<br>    string(11) &quot;thirdMethod&quot;<br>    [&quot;class&quot;]=&gt;<br>    string(5) &quot;Apple&quot;<br>  }<br>}<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 从 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getMethods()</strong></span> 中过滤结果</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Apple </span><span style="color: #007700">{<br />    public function </span><span style="color: #9876AA">firstMethod</span><span style="color: #007700">() { }<br />    final protected function </span><span style="color: #9876AA">secondMethod</span><span style="color: #007700">() { }<br />    private static function </span><span style="color: #9876AA">thirdMethod</span><span style="color: #007700">() { }<br />}<br /><br /></span><span style="color: #9876AA">$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Apple'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$methods </span><span style="color: #007700">= </span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMethods</span><span style="color: #007700">(</span><span style="color: #9876AA">ReflectionMethod</span><span style="color: #007700">::</span><span style="color: #9876AA">IS_STATIC </span><span style="color: #007700">| </span><span style="color: #9876AA">ReflectionMethod</span><span style="color: #007700">::</span><span style="color: #9876AA">IS_FINAL</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$methods</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(2) {<br>  [0]=&gt;<br>  object(ReflectionMethod)#2 (2) {<br>    [&quot;name&quot;]=&gt;<br>    string(12) &quot;secondMethod&quot;<br>    [&quot;class&quot;]=&gt;<br>    string(5) &quot;Apple&quot;<br>  }<br>  [1]=&gt;<br>  object(ReflectionMethod)#3 (2) {<br>    [&quot;name&quot;]=&gt;<br>    string(11) &quot;thirdMethod&quot;<br>    [&quot;class&quot;]=&gt;<br>    string(5) &quot;Apple&quot;<br>  }<br>}<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getmethods-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getMethod()} - 获取类方法的 ReflectionMethod</span></li>        <li class="member"><span class="function">{@link get_class_methods()} - 返回由类的方法名组成的数组</span></li>   </ul>  </span> </div></div>
     * @return ReflectionMethod[] An array of {@see ReflectionMethod} objects*/
    public function getMethods(#[LanguageLevelTypeAware(['8.0' => 'int|null'], default: '')] $filter = null): array {}

/**
*<div id="reflectionclass.hasproperty" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::hasProperty</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::hasProperty</span> &mdash; <span class="dc-title">检查属性是否已定义</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.hasproperty-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::hasProperty</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查指定的属性是否已定义。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.hasproperty-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       待检查的属性的名称。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.hasproperty-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果有这个属性返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.hasproperty-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::hasProperty()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br />    public    </span><span style="color: #9876AA">$p1</span><span style="color: #007700">;<br />    protected </span><span style="color: #9876AA">$p2</span><span style="color: #007700">;<br />    private   </span><span style="color: #9876AA">$p3</span><span style="color: #007700">;<br /><br />}<br /><br /></span><span style="color: #9876AA">$obj </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionObject</span><span style="color: #007700">(new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$obj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">"p1"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$obj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">"p2"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$obj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">"p3"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$obj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">"p4"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(true)<br>bool(true)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.hasproperty-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::hasConstant()} - 检查常量是否已经定义</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::hasMethod()} - 检查方法是否已定义</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} if it has the property, otherwise {@see false}*/
    public function hasProperty(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $name): bool {}

/**
*<div id="reflectionclass.getproperty" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getProperty</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getProperty</span> &mdash; <span class="dc-title">获取类的一个属性的 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionproperty.php" class="classname">ReflectionProperty</a></span></span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getproperty-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getProperty</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionproperty.php" class="type ReflectionProperty" style="color:#EAB766">ReflectionProperty</a></span></div>  <p class="para rdfs-comment">   获取类的一个属性的 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionproperty.php" class="classname">ReflectionProperty</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getproperty-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       属性名。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getproperty-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   一个 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionproperty.php" class="classname">ReflectionProperty</a></span>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.getproperty-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getProperty()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'ReflectionClass'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$property </span><span style="color: #007700">= </span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'name'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$property</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(ReflectionProperty)#2 (2) {<br>  [&quot;name&quot;]=&gt;<br>  string(4) &quot;name&quot;<br>  [&quot;class&quot;]=&gt;<br>  string(15) &quot;ReflectionClass&quot;<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getproperty-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getProperties()} - 获取属性</span></li>   </ul>  </span> </div></div>
     * @return ReflectionProperty A {@see ReflectionProperty}*/
    public function getProperty(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $name): ReflectionProperty {}

/**
*<div id="reflectionclass.getproperties" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getProperties</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getProperties</span> &mdash; <span class="dc-title">获取属性</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getproperties-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getProperties</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$filter</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取反射过的属性。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getproperties-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">filter</span></dt>     <dd>      <p class="para">       可选的过滤器，过滤为所需类型的属性。它使用 <a href="https://www.php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.modifiers" class="link">ReflectionProperty 常量</a> 来配置，默认获取所有类型的属性。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getproperties-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionproperty.php" class="classname">ReflectionProperty</a></span> 对象的数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-reflectionclass.getproperties-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>7.2.0</td>      <td>       <span class="parameter" style="color:#3A95FF">filter</span> 现在允许为 null。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.getproperties-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ReflectionClass::getProperties()</strong></span> 过滤示例</strong></p>   <div class="example-contents"><p>    这个示例延时了可选 <span class="parameter" style="color:#3A95FF">filter</span> 参数的用法，示例里实际上忽略了私有属性。   </p></div>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br />    public    </span><span style="color: #9876AA">$foo  </span><span style="color: #007700">= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />    protected </span><span style="color: #9876AA">$bar  </span><span style="color: #007700">= </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br />    private   </span><span style="color: #9876AA">$baz  </span><span style="color: #007700">= </span><span style="color: #9876AA">3</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$foo </span><span style="color: #007700">= new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$reflect </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$props   </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflect</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperties</span><span style="color: #007700">(</span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">::</span><span style="color: #9876AA">IS_PUBLIC </span><span style="color: #007700">| </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">::</span><span style="color: #9876AA">IS_PROTECTED</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$props </span><span style="color: #007700">as </span><span style="color: #9876AA">$prop</span><span style="color: #007700">) {<br />    print </span><span style="color: #9876AA">$prop</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$props</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>foo<br>bar<br>array(2) {<br>  [0]=&gt;<br>  object(ReflectionProperty)#3 (2) {<br>    [&quot;name&quot;]=&gt;<br>    string(3) &quot;foo&quot;<br>    [&quot;class&quot;]=&gt;<br>    string(3) &quot;Foo&quot;<br>  }<br>  [1]=&gt;<br>  object(ReflectionProperty)#4 (2) {<br>    [&quot;name&quot;]=&gt;<br>    string(3) &quot;bar&quot;<br>    [&quot;class&quot;]=&gt;<br>    string(3) &quot;Foo&quot;<br>  }<br>}<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getproperties-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getProperty()} - 获取类的一个属性的 ReflectionProperty</span></li>    <li class="member"><span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionproperty.php" class="classname">ReflectionProperty</a></span></li>    <li class="member"><a href="https://www.php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.modifiers" class="link">ReflectionProperty 修饰符常量</a></li>   </ul>  </span> </div></div>
     * @return ReflectionProperty[]*/
    public function getProperties(#[LanguageLevelTypeAware(['8.0' => 'int|null'], default: '')] $filter = null): array {}

/**
*<div id="reflectionclass.getreflectionconstant" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getReflectionConstant</h1>  <p class="verinfo">(PHP 7 &gt;= 7.1.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getReflectionConstant</span> &mdash; <span class="dc-title">Gets a <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionclassconstant.php" class="classname">ReflectionClassConstant</a></span> for a class&#039;s constant</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getreflectionconstant-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getReflectionConstant</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionclassconstant.php" class="type ReflectionClassConstant" style="color:#EAB766">ReflectionClassConstant</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Gets a <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionclassconstant.php" class="classname">ReflectionClassConstant</a></span> for a class&#039;s property.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getreflectionconstant-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       The class constant name.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getreflectionconstant-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   A <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionclassconstant.php" class="classname">ReflectionClassConstant</a></span>,  或者在失败时返回 <strong><span>false</span></strong>.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getreflectionconstant-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getReflectionConstants()} - Gets class constants</span></li>    <li class="member"><span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionclassconstant.php" class="classname">ReflectionClassConstant</a></span></li>   </ul>  </span> </div></div>
     * @return ReflectionClassConstant|false A {@see ReflectionClassConstant}.*/
    public function getReflectionConstant(string $name): ReflectionClassConstant|false {}

/**
*<div id="reflectionclass.getreflectionconstants" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getReflectionConstants</h1>  <p class="verinfo">(PHP 7 &gt;= 7.1.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getReflectionConstants</span> &mdash; <span class="dc-title">Gets class constants</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getreflectionconstants-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getReflectionConstants</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$filter</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Retrieves reflected constants.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getreflectionconstants-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">filter</span></dt>    <dd>     <span>      The optional filter, for filtering desired constant visibilities. It&#039;s configured using      the <a href="https://www.php.net/manual/zh/class.reflectionclassconstant.php#reflectionclassconstant.constants.modifiers" class="link">ReflectionClassConstant constants</a>,      and defaults to all constant visibilities.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getreflectionconstants-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   An array of <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionclassconstant.php" class="classname">ReflectionClassConstant</a></span> objects.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-reflectionclass.getreflectionconstants-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">filter</span> has been added.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.getreflectionconstants-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 Basic <span class="function"><strong style="color:#CC7832">ReflectionClass::getReflectionConstants()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br />    public    const </span><span style="color: #9876AA">FOO  </span><span style="color: #007700">= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />    protected const </span><span style="color: #9876AA">BAR  </span><span style="color: #007700">= </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br />    private   const </span><span style="color: #9876AA">BAZ  </span><span style="color: #007700">= </span><span style="color: #9876AA">3</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$foo </span><span style="color: #007700">= new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$reflect </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$consts  </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflect</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getReflectionConstants</span><span style="color: #007700">();<br /><br />foreach (</span><span style="color: #9876AA">$consts </span><span style="color: #007700">as </span><span style="color: #9876AA">$const</span><span style="color: #007700">) {<br />    print </span><span style="color: #9876AA">$const</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$consts</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>FOO<br>BAR<br>BAZ<br>array(3) {<br>  [0]=&gt;<br>  object(ReflectionClassConstant)#3 (2) {<br>    [&quot;name&quot;]=&gt;<br>    string(3) &quot;FOO&quot;<br>    [&quot;class&quot;]=&gt;<br>    string(3) &quot;Foo&quot;<br>  }<br>  [1]=&gt;<br>  object(ReflectionClassConstant)#4 (2) {<br>    [&quot;name&quot;]=&gt;<br>    string(3) &quot;BAR&quot;<br>    [&quot;class&quot;]=&gt;<br>    string(3) &quot;Foo&quot;<br>  }<br>  [2]=&gt;<br>  object(ReflectionClassConstant)#5 (2) {<br>    [&quot;name&quot;]=&gt;<br>    string(3) &quot;BAZ&quot;<br>    [&quot;class&quot;]=&gt;<br>    string(3) &quot;Foo&quot;<br>  }<br>}<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getreflectionconstants-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getReflectionConstant()} - Gets a ReflectionClassConstant for a class's constant</span></li>    <li class="member"><span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionclassconstant.php" class="classname">ReflectionClassConstant</a></span></li>   </ul>  </span> </div></div>
     * @return ReflectionClassConstant[] An array of ReflectionClassConstant objects.*/
    public function getReflectionConstants(#[PhpStormStubsElementAvailable(from: '8.0')] ?int $filter = null): array {}

/**
*<div id="reflectionclass.hasconstant" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::hasConstant</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::hasConstant</span> &mdash; <span class="dc-title">检查常量是否已经定义</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.hasconstant-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::hasConstant</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查类中是否已经定义了指定的常量。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.hasconstant-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       要被检查的常量名称。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.hasconstant-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果已定义返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.hasconstant-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::hasConstant()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br />    const </span><span style="color: #9876AA">c1 </span><span style="color: #007700">= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">"Foo"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">"c1"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">"c2"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.hasconstant-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::hasMethod()} - 检查方法是否已定义</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::hasProperty()} - 检查属性是否已定义</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} if the constant is defined, otherwise {@see false}*/
    public function hasConstant(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $name): bool {}

/**
*<div id="reflectionclass.getconstants" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getConstants</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getConstants</span> &mdash; <span class="dc-title">获取常量</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getconstants-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getConstants</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$filter</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   从类中获取所有已定义的常量，而不管它们的可见性如何。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getconstants-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">filter</span></dt>    <dd>     <span>      可选过滤器，传入过滤所需的可见性常量。可用      <a href="https://www.php.net/manual/zh/class.reflectionclassconstant.php#reflectionclassconstant.constants.modifiers" class="link">ReflectionClassConstant 常量</a>      进行配置，默认为所有可见性常量。     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getconstants-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   常量的<span class="type" style="color:#EAB766"><span class="type 数组" style="color:#EAB766">数组</span></span>，常量名是数组的键，常量的值是数组的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-reflectionclass.getconstants-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       添加 <span class="parameter" style="color:#3A95FF">filter</span> 。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getconstants-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getConstant()} - 获取已定义的常量</span></li>   </ul>  </span> </div></div>
     * @return array An array of constants, where the keys hold the name and*/
    public function getConstants(#[PhpStormStubsElementAvailable(from: '8.0')] ?int $filter = null): array {}

/**
*<div id="reflectionclass.getconstant" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getConstant</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getConstant</span> &mdash; <span class="dc-title">获取已定义的常量</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getconstant-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getConstant</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   获取已定义的常量。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getconstant-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       要获取的类常量的名称。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getconstant-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   常量名称为 <span class="parameter" style="color:#3A95FF">name</span> 的值。   如果在类中没有找到该常量，则返回 <strong><span>false</span></strong> 。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.getconstant-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 使用 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getConstant()</strong></span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Example </span><span style="color: #007700">{<br />    const </span><span style="color: #9876AA">C1 </span><span style="color: #007700">= </span><span style="color: #9876AA">false</span><span style="color: #007700">;<br />    const </span><span style="color: #9876AA">C2 </span><span style="color: #007700">= </span><span style="color: #DD0000">'I am a constant'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$reflection </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Example'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflection</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">'C1'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflection</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">'C2'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflection</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">'C3'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>string(15) &quot;I am a constant&quot;<br>bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getconstant-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getConstants()} - 获取常量</span></li>   </ul>  </span> </div></div>
     * @return mixed|false Value of the constant with the name name.*/
    public function getConstant(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $name): mixed {}

/**
*<div id="reflectionclass.getinterfaces" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getInterfaces</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getInterfaces</span> &mdash; <span class="dc-title">获取接口</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getinterfaces-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getInterfaces</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取接口。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getinterfaces-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getinterfaces-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   接口的关联<span class="type" style="color:#EAB766"><span class="type 数组" style="color:#EAB766">数组</span></span>，数组键是接口（interface）的名称，数组的值是 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="classname">ReflectionClass</a></span> 对象。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.getinterfaces-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getInterfaces()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">interface </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{ }<br /><br />interface </span><span style="color: #9876AA">Bar </span><span style="color: #007700">{ }<br /><br />class </span><span style="color: #9876AA">Baz </span><span style="color: #007700">implements </span><span style="color: #9876AA">Foo</span><span style="color: #007700">, </span><span style="color: #9876AA">Bar </span><span style="color: #007700">{ }<br /><br /></span><span style="color: #9876AA">$rc1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">"Baz"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$rc1</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getInterfaces</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [Foo] =&gt; ReflectionClass Object<br>        (<br>            [name] =&gt; Foo<br>        )<br><br>    [Bar] =&gt; ReflectionClass Object<br>        (<br>            [name] =&gt; Bar<br>        )<br><br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getinterfaces-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getInterfaceNames()} - 获取接口（interface）名称</span></li>   </ul>  </span> </div></div>
     * @return ReflectionClass[] An associative array of interfaces, with keys as interface*/
    public function getInterfaces(): array {}

/**
*<div id="reflectionclass.getinterfacenames" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getInterfaceNames</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getInterfaceNames</span> &mdash; <span class="dc-title">获取接口（interface）名称</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getinterfacenames-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getInterfaceNames</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取接口（interface）名称。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getinterfacenames-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getinterfacenames-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   一个数值数组，接口（interface）的名称是数组的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.getinterfacenames-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getInterfaceNames()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">interface </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{ }<br /><br />interface </span><span style="color: #9876AA">Bar </span><span style="color: #007700">{ }<br /><br />class </span><span style="color: #9876AA">Baz </span><span style="color: #007700">implements </span><span style="color: #9876AA">Foo</span><span style="color: #007700">, </span><span style="color: #9876AA">Bar </span><span style="color: #007700">{ }<br /><br /></span><span style="color: #9876AA">$rc1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">"Baz"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$rc1</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getInterfaceNames</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; Foo<br>    [1] =&gt; Bar<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getinterfacenames-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getInterfaces()} - 获取接口</span></li>   </ul>  </span> </div></div>
     * @return string[] A numerical array with interface names as the values.*/
    public function getInterfaceNames(): array {}

/**
*<div id="reflectionclass.isanonymous" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isAnonymous</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isAnonymous</span> &mdash; <span class="dc-title">检查类是否是匿名类</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.isanonymous-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isAnonymous</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查类是否是匿名类。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.isanonymous-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.isanonymous-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.isanonymous-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isAnonymous()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">TestClass </span><span style="color: #007700">{}<br /></span><span style="color: #9876AA">$anonClass </span><span style="color: #007700">= new class {};<br /><br /></span><span style="color: #9876AA">$normalClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestClass'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$anonClass  </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">$anonClass</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$normalClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isAnonymous</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$anonClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isAnonymous</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>bool(true)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.isanonymous-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isFinal()} - 检查类是否声明为 final</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} on success or {@see false} on failure.*/
    public function isAnonymous(): bool {}

/**
*<div id="reflectionclass.isinterface" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isInterface</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isInterface</span> &mdash; <span class="dc-title">检查类是否是一个接口（interface）</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.isinterface-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isInterface</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查类是否是一个接口（interface）。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.isinterface-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.isinterface-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.isinterface-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isInterface()</strong></span> 基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">interface </span><span style="color: #9876AA">SomeInterface </span><span style="color: #007700">{<br />    public function </span><span style="color: #9876AA">interfaceMethod</span><span style="color: #007700">();<br />}<br /><br /></span><span style="color: #9876AA">$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'SomeInterface'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isInterface</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.isinterface-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isInstance()} - 检查类的实例</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} on success or {@see false} on failure.*/
    public function isInterface(): bool {}

/**
*<div id="reflectionclass.gettraits" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getTraits</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getTraits</span> &mdash; <span class="dc-title">返回这个类所使用的 traits 数组</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.gettraits-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getTraits</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取该类使用的 trait 数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.gettraits-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.gettraits-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回了数组，键是 trait 的名称，值是 trait 实例的 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="classname">ReflectionClass</a></span>。   出现错误的情况下返回 <strong><span>null</span></strong>。  </p> </div></div>
     * @return ReflectionClass[] an array with trait names in keys and*/
    public function getTraits(): array {}

/**
*<div id="reflectionclass.gettraitnames" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getTraitNames</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getTraitNames</span> &mdash; <span class="dc-title">返回这个类所使用 traits 的名称的数组</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.gettraitnames-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getTraitNames</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取该类使用的 trait 名称。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.gettraitnames-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.gettraitnames-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回的数组的值包含了 trait 的名称。  </p> </div></div>
     * @return string[] An array with trait names in values.*/
    public function getTraitNames(): array {}

/**
*<div id="reflectionclass.gettraitaliases" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getTraitAliases</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getTraitAliases</span> &mdash; <span class="dc-title">返回 trait 别名数组</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.gettraitaliases-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getTraitAliases</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取当前类中定义的 trait 方法别名数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.gettraitaliases-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.gettraitaliases-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回数组，新的方法名位于键中，原始名称（格式是   <span>&quot;TraitName::original&quot;</span>）位于数组的值中。  </p> </div></div>
     * @return string[] an array with new method names in keys and original*/
    public function getTraitAliases(): array {}

/**
*<div id="reflectionclass.istrait" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isTrait</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isTrait</span> &mdash; <span class="dc-title">返回了是否是 trait</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.istrait-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isTrait</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查 <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span> 是否指向 trait。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.istrait-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.istrait-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果是 trait 返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool Returns {@see true} if this is a trait, {@see false} otherwise.*/
    public function isTrait(): bool {}

/**
*<div id="reflectionclass.isabstract" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isAbstract</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isAbstract</span> &mdash; <span class="dc-title">检查类是否是抽象类（abstract）</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.isabstract-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isAbstract</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查这个类是否是抽象类（abstract）。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.isabstract-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.isabstract-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.isabstract-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isAbstract()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class          </span><span style="color: #9876AA">TestClass </span><span style="color: #007700">{ }<br />abstract class </span><span style="color: #9876AA">TestAbstractClass </span><span style="color: #007700">{ }<br /><br /></span><span style="color: #9876AA">$testClass     </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestClass'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$abstractClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestAbstractClass'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$testClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isAbstract</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$abstractClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isAbstract</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>bool(true)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.isabstract-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isInterface()} - 检查类是否是一个接口（interface）</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.abstract.php" class="link">类的抽象</a></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} on success or {@see false} on failure.*/
    public function isAbstract(): bool {}

/**
*<div id="reflectionclass.isfinal" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isFinal</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isFinal</span> &mdash; <span class="dc-title">检查类是否声明为 final</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.isfinal-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isFinal</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查类是否声明为 final。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.isfinal-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.isfinal-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.isfinal-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isFinal()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class       </span><span style="color: #9876AA">TestClass </span><span style="color: #007700">{ }<br />final class </span><span style="color: #9876AA">TestFinalClass </span><span style="color: #007700">{ }<br /><br /></span><span style="color: #9876AA">$normalClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestClass'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$finalClass  </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestFinalClass'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$normalClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isFinal</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$finalClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isFinal</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>bool(true)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.isfinal-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isAbstract()} - 检查类是否是抽象类（abstract）</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.final.php" class="link">Final 关键字</a></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} on success or {@see false} on failure.*/
    public function isFinal(): bool {}

/**
*<div id="reflectionclass.isreadonly" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isReadOnly</h1>  <p class="verinfo">(PHP 8 &gt;= 8.2.0)</p><p class="refpurpose"><span class="refname">ReflectionClass::isReadOnly</span> &mdash; <span class="dc-title">Checks if class is readonly</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.isreadonly-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isReadOnly</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if a class is <a href="https://www.php.net/manual/zh/language.oop5.basic.php#language.oop5.basic.class.readonly" class="link">readonly</a>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.isreadonly-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.isreadonly-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if a class is readonly, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.isreadonly-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isReadOnly()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">TestClass </span><span style="color: #007700">{ }<br />readonly class </span><span style="color: #9876AA">TestReadOnlyClass </span><span style="color: #007700">{ }<br /><br /></span><span style="color: #9876AA">$normalClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestClass'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$readonlyClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestReadOnlyClass'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$normalClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isReadOnly</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$readonlyClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isReadOnly</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>bool(true)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.isreadonly-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isAbstract()} - 检查类是否是抽象类（abstract）</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.basic.php#language.oop5.basic.class.readonly" class="link">Readonly classes</a></li>   </ul>  </span> </div></div>
     * @return bool*/
    public function isReadOnly(): bool {}

/**
*<div id="reflectionclass.getmodifiers" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getModifiers</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getModifiers</span> &mdash; <span class="dc-title">获取类的修饰符</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getmodifiers-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getModifiers</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   返回这个类访问修饰符的位字段。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getmodifiers-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getmodifiers-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <a href="https://www.php.net/manual/zh/class.reflectionclass.php#reflectionclass.constants.modifiers" class="link">   修饰符常量</a> 的位掩码。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getmodifiers-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getProperties()} - 获取属性</span></li>     <li class="member"><span class="methodname" style="color:#CC7832">{@link Reflection::getModifierNames()} - 获取修饰符的名称</span></li>   </ul>  </span> </div></div>
     * @return int bitmask of modifier constants.*/
    public function getModifiers(): int {}

/**
*<div id="reflectionclass.isinstance" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isInstance</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isInstance</span> &mdash; <span class="dc-title">检查类的实例</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.isinstance-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isInstance</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查对象是否为一个类的实例。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.isinstance-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       待比较的对象。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.isinstance-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.isinstance-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isInstance()</strong></span> 相关示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Example usage<br /></span><span style="color: #9876AA">$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Foo'</span><span style="color: #007700">);<br /><br />if (</span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isInstance</span><span style="color: #007700">(</span><span style="color: #9876AA">$arg</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"Yes"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// Equivalent to<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">$arg </span><span style="color: #007700">instanceof </span><span style="color: #9876AA">Foo</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"Yes"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// Equivalent to<br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">is_a</span><span style="color: #007700">(</span><span style="color: #9876AA">$arg</span><span style="color: #007700">, </span><span style="color: #DD0000">'Foo'</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"Yes"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Yes<br>Yes<br>Yes<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.isinstance-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isInterface()} - 检查类是否是一个接口（interface）</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.operators.type.php" class="link">类型运算符（instanceof）</a></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.interfaces.php" class="link">对象接口</a></li>    <li class="member"><span class="function">{@link is_a()} - 检查对象是否属于一个给定的类型或子类型。</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} on success or {@see false} on failure.*/
    public function isInstance(#[LanguageLevelTypeAware(['8.0' => 'object'], default: '')] $object): bool {}

/**
*<div id="reflectionclass.newinstance" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::newInstance</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::newInstance</span> &mdash; <span class="dc-title">从指定的参数创建新类实例</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.newinstance-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::newInstance</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$args</span></span>): <span class="type" style="color:#EAB766">object</span></div>  <p class="para rdfs-comment">   创建类的新的实例。给出的参数将会传递到类的构造函数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.newinstance-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">args</span></dt>     <dd>      <p class="para">       接受可变数目的参数，用于传递到类的构造函数，和 <span class="function">{@link call_user_func()}</span> 很相似。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.newinstance-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-reflectionclass.newinstance-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果类的构造函数不是 public 的将会导致一个 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。  </p>  <p class="para">   当 <span class="parameter" style="color:#3A95FF">args</span> 指定了一个或多个参数，而类不具有构造函数时,将导致一个 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.newinstance-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newInstanceArgs()} - 从给出的参数创建一个新的类实例</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newInstanceWithoutConstructor()} - 创建新的类实例而不调用它的构造函数</span></li>   </ul>  </span> </div></div>
     * @return T a new instance of the class.*/
    public function newInstance(...$args) {}

/**
*<div id="reflectionclass.newinstancewithoutconstructor" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::newInstanceWithoutConstructor</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::newInstanceWithoutConstructor</span> &mdash; <span class="dc-title">创建新的类实例而不调用它的构造函数</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.newinstancewithoutconstructor-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::newInstanceWithoutConstructor</strong></span>(): <span class="type" style="color:#EAB766">object</span></div>  <p class="para rdfs-comment">   创建一个新的类的实例而不调用它的构造函数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.newinstancewithoutconstructor-parameters">  <h3 class="title">参数</h3>  <span>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.newinstancewithoutconstructor-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-reflectionclass.newinstancewithoutconstructor-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果这个类是必须调用构造函数来实例化的内置类，将导致 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。此异常仅限于   <a href="https://www.php.net/manual/zh/language.oop5.final.php" class="link">final</a> 的内置类。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.newinstancewithoutconstructor-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newInstance()} - 从指定的参数创建新类实例</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newInstanceArgs()} - 从给出的参数创建一个新的类实例</span></li>   </ul>  </span> </div></div>
     * @return T a new instance of the class.*/
    public function newInstanceWithoutConstructor(): object {}

/**
*<div id="reflectionclass.newinstanceargs" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::newInstanceArgs</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.3, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::newInstanceArgs</span> &mdash; <span class="dc-title">从给出的参数创建一个新的类实例</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.newinstanceargs-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::newInstanceArgs</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$args</span><span class="initializer"> = []</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">object</span></span></div>  <p class="para rdfs-comment">   创建一个类的新实例，给出的参数将传递到类的构造函数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.newinstanceargs-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">args</span></dt>     <dd>      <p class="para">       这个参数以 <span class="type" style="color:#EAB766">array</span> 形式传递到类的构造函数。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.newinstanceargs-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回类的新实例，失败时返回 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-reflectionclass.newinstanceargs-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果类的构造函数不是 public 的将导致产生 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。  </p>  <p class="para">   当 <span class="parameter" style="color:#3A95FF">args</span> 指定了一个或多个参数，而类不具有构造函数时,将导致 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.newinstanceargs-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::newInstanceArgs()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'ReflectionFunction'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$instance </span><span style="color: #007700">= </span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">newInstanceArgs</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'substr'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$instance</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(ReflectionFunction)#2 (1) {<br>  [&quot;name&quot;]=&gt;<br>  string(6) &quot;substr&quot;<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.newinstanceargs-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newInstance()} - 从指定的参数创建新类实例</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newInstanceWithoutConstructor()} - 创建新的类实例而不调用它的构造函数</span></li>   </ul>  </span> </div></div>
     * @return T|null a new instance of the class.*/
    public function newInstanceArgs(array $args = []): ?object {}

/**
*<div id="reflectionclass.getparentclass" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getParentClass</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getParentClass</span> &mdash; <span class="dc-title">获取父类</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getparentclass-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getParentClass</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   获取父级类。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getparentclass-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getparentclass-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="classname">ReflectionClass</a></span>，没有父类为 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getparentclass-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::__construct()} - 初始化 ReflectionClass 类</span></li>   </ul>  </span> </div></div>
     * @return ReflectionClass|false A {@see ReflectionClass} or {@see false}*/
    public function getParentClass(): ReflectionClass|false {}

/**
*<div id="reflectionclass.issubclassof" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isSubclassOf</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isSubclassOf</span> &mdash; <span class="dc-title">检查是否为子类</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.issubclassof-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isSubclassOf</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$class</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查类是否为指定类的子类，或者实现了指定的接口。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.issubclassof-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       要检查的 <span class="type" style="color:#EAB766">string</span> 形式的类名或者类的 <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span> 对象。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.issubclassof-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.issubclassof-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isInterface()} - 检查类是否是一个接口（interface）</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::implementsInterface()} - 实现接口</span></li>    <li class="member"><span class="function">{@link is_subclass_of()} - 检查对象是否继承或者实现（implement）此类</span></li>    <li class="member"><span class="function">{@link get_parent_class()} - 检索对象或者类的父级类名</span></li>   </ul>  </span> </div></div>
     * @return bool {@see true} on success or {@see false} on failure.*/
    public function isSubclassOf(#[LanguageLevelTypeAware(['8.0' => 'ReflectionClass|string'], default: '')] $class): bool {}

/**
*<div id="reflectionclass.getstaticproperties" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getStaticProperties</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getStaticProperties</span> &mdash; <span class="dc-title">获取静态（static）属性</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getstaticproperties-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getStaticProperties</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取静态（static）属性。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getstaticproperties-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getstaticproperties-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   静态（static）的属性，类型是 <span class="type" style="color:#EAB766">array</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-reflectionclass.getstaticproperties-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.3.0</td>      <td>       <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getStaticProperties()</strong></span> 的返回类型已经从       <span class="type" style="color:#EAB766">array</span> 更改为 <span>?array</span>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getstaticproperties-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getStaticPropertyValue()} - 获取静态（static）属性的值</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::setStaticPropertyValue()} - 设置静态属性的值</span></li>   </ul>  </span> </div></div>
     * @return array|null The static properties, as an array where the keys hold*/
    public function getStaticProperties() {}

/**
*<div id="reflectionclass.getstaticpropertyvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getStaticPropertyValue</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getStaticPropertyValue</span> &mdash; <span class="dc-title">获取静态（static）属性的值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getstaticpropertyvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getStaticPropertyValue</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">&$def_value</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   获取这个类里静态（static）属性的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getstaticpropertyvalue-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       静态属性的名称，来返回它的值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">def_value</span></dt>     <dd>      <p class="para">       假如类没有定义 <span class="parameter" style="color:#3A95FF">name</span> 的 static 属性，将返回一个默认值。       如果属性不存在，并且省略了此参数，将会抛出       <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span> 。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getstaticpropertyvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   静态属性的值。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.getstaticpropertyvalue-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getStaticPropertyValue()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Apple </span><span style="color: #007700">{<br />    public static </span><span style="color: #9876AA">$color </span><span style="color: #007700">= </span><span style="color: #DD0000">'Red'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Apple'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getStaticPropertyValue</span><span style="color: #007700">(</span><span style="color: #DD0000">'color'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(3) &quot;Red&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getstaticpropertyvalue-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getStaticProperties()} - 获取静态（static）属性</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::setStaticPropertyValue()} - 设置静态属性的值</span></li>   </ul>  </span> </div></div>
     * @return mixed The value of the static property.*/
    public function getStaticPropertyValue(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $name,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $default
    ): mixed {}

/**
*<div id="reflectionclass.setstaticpropertyvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::setStaticPropertyValue</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::setStaticPropertyValue</span> &mdash; <span class="dc-title">设置静态属性的值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.setstaticpropertyvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::setStaticPropertyValue</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   设置静态属性的值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.setstaticpropertyvalue-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       属性的名称。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       属性的值。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.setstaticpropertyvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.setstaticpropertyvalue-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getStaticPropertyValue()} - 获取静态（static）属性的值</span></li>   </ul>  </span> </div></div>
     * @return void No value is returned.*/
    public function setStaticPropertyValue(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $name,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value
    ): void {}

/**
*<div id="reflectionclass.getdefaultproperties" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getDefaultProperties</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getDefaultProperties</span> &mdash; <span class="dc-title">获取默认属性</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getdefaultproperties-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getDefaultProperties</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取类的默认属性（包括了继承的属性）。  </p>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    当在内部类中使用时，此方法仅用于静态属性，当在用户定义类中使用此方法时，无法追踪静态类属性的默认值。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getdefaultproperties-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getdefaultproperties-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   默认属性的 <span class="type" style="color:#EAB766">array</span>，其键是属性的名称，其值是属性的默认值或者   <strong><span>null</span></strong>（如果没有默认值）。这个函数不区分静态和非静态属性，也不考虑可见性修饰符。   </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.getdefaultproperties-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getDefaultProperties()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Bar </span><span style="color: #007700">{<br />    protected </span><span style="color: #9876AA">$inheritedProperty </span><span style="color: #007700">= </span><span style="color: #DD0000">'inheritedDefault'</span><span style="color: #007700">;<br />}<br /><br />class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">extends </span><span style="color: #9876AA">Bar </span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">$property </span><span style="color: #007700">= </span><span style="color: #DD0000">'propertyDefault'</span><span style="color: #007700">;<br />    private </span><span style="color: #9876AA">$privateProperty </span><span style="color: #007700">= </span><span style="color: #DD0000">'privatePropertyDefault'</span><span style="color: #007700">;<br />    public static </span><span style="color: #9876AA">$staticProperty </span><span style="color: #007700">= </span><span style="color: #DD0000">'staticProperty'</span><span style="color: #007700">;<br />    public </span><span style="color: #9876AA">$defaultlessProperty</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$reflectionClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Foo'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflectionClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDefaultProperties</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(5) {<br>   [&quot;staticProperty&quot;]=&gt;<br>   string(14) &quot;staticProperty&quot;<br>   [&quot;property&quot;]=&gt;<br>   string(15) &quot;propertyDefault&quot;<br>   [&quot;privateProperty&quot;]=&gt;<br>   string(22) &quot;privatePropertyDefault&quot;<br>   [&quot;defaultlessProperty&quot;]=&gt;<br>   NULL<br>   [&quot;inheritedProperty&quot;]=&gt;<br>   string(16) &quot;inheritedDefault&quot;<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getdefaultproperties-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getProperties()} - 获取属性</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getStaticProperties()} - 获取静态（static）属性</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getProperty()} - 获取类的一个属性的 ReflectionProperty</span></li>   </ul>  </span> </div></div>
     * @return mixed[] An array of default properties, with the key being the name*/
    public function getDefaultProperties(): array {}

/**
*<div id="reflectionclass.isiterateable" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isIterateable</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isIterateable</span> &mdash; <span class="dc-title">别名 <span class="methodname" style="color:#CC7832">{@link ReflectionClass::isIterable()}</span></span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.isiterateable-description">  <h3 class="title">说明</h3>  <p class="para">别名 <span class="methodname" style="color:#CC7832">{@link ReflectionClass::isIterable()}</span></p>  <p class="para">   自 PHP 7.2.0 起，应该首选 <span class="methodname" style="color:#CC7832"><strong>RefectionClass::isIterable()</strong></span>，而不是拼写错误的   <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isIterateable()</strong></span>。  </p> </div></div>
     * @return bool Returns {@see true} on success or {@see false} on failure.*/
    public function isIterateable(): bool {}

/**
*<div id="reflectionclass.isiterable" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isIterable</h1>  <p class="verinfo">(PHP 7 &gt;= 7.2.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isIterable</span> &mdash; <span class="dc-title">Check whether this class is iterable</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.isiterable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isIterable</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Check whether this class is iterable (i.e. can be used inside <a href="https://www.php.net/manual/zh/control-structures.foreach.php" class="link">foreach</a>).  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.isiterable-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.isiterable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.isiterable-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Basic <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isIterable()</strong></span> Usage</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class </span><span style="color: #9876AA">IteratorClass </span><span style="color: #007700">implements </span><span style="color: #9876AA">Iterator </span><span style="color: #007700">{<br />    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">() { }<br />    public function </span><span style="color: #9876AA">key</span><span style="color: #007700">() { }<br />    public function </span><span style="color: #9876AA">current</span><span style="color: #007700">() { }<br />    function </span><span style="color: #9876AA">next</span><span style="color: #007700">() { }<br />    function </span><span style="color: #9876AA">valid</span><span style="color: #007700">() { }<br />    function </span><span style="color: #9876AA">rewind</span><span style="color: #007700">() { }<br />}<br />class </span><span style="color: #9876AA">DerivedClass </span><span style="color: #007700">extends </span><span style="color: #9876AA">IteratorClass </span><span style="color: #007700">{ }<br />class </span><span style="color: #9876AA">NonIterator </span><span style="color: #007700">{ }<br /><br />function </span><span style="color: #9876AA">dump_iterable</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$reflection </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflection</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isIterable</span><span style="color: #007700">());<br />}<br /><br /></span><span style="color: #9876AA">$classes </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"ArrayObject"</span><span style="color: #007700">, </span><span style="color: #DD0000">"IteratorClass"</span><span style="color: #007700">, </span><span style="color: #DD0000">"DerivedClass"</span><span style="color: #007700">, </span><span style="color: #DD0000">"NonIterator"</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$classes </span><span style="color: #007700">as </span><span style="color: #9876AA">$class</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"Is </span><span style="color: #9876AA">$class</span><span style="color: #DD0000"> iterable? "</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">dump_iterable</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Is ArrayObject iterable? bool(true)<br>Is IteratorClass iterable? bool(true)<br>Is DerivedClass iterable? bool(true)<br>Is NonIterator iterable? bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.isiterable-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::__construct()} - 初始化 ReflectionClass 类</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} on success or {@see false} on failure.*/
    public function isIterable(): bool {}

/**
*<div id="reflectionclass.implementsinterface" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::implementsInterface</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::implementsInterface</span> &mdash; <span class="dc-title">实现接口</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.implementsinterface-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::implementsInterface</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$interface</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查其是否实现了接口（interface）。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.implementsinterface-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">interface</span></dt>     <dd>      <p class="para">       接口（interface）的名称。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.implementsinterface-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-reflectionclass.implementsinterface-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">interface</span> 不是接口，则   <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::implementsInterface()</strong></span> 会抛出   <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.implementsinterface-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isInterface()} - 检查类是否是一个接口（interface）</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isSubclassOf()} - 检查是否为子类</span></li>    <li class="member"><span class="function">{@link interface_exists()} - 检查接口是否已被定义</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.interfaces.php" class="link">对象接口</a></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} on success or {@see false} on failure.*/
    public function implementsInterface(#[LanguageLevelTypeAware(['8.0' => 'ReflectionClass|string'], default: '')] $interface): bool {}

/**
*<div id="reflectionclass.getextension" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getExtension</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getExtension</span> &mdash; <span class="dc-title">根据已定义的类获取所在扩展的 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionextension.php" class="classname">ReflectionExtension</a></span> 对象</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getextension-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getExtension</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionextension.php" class="type ReflectionExtension" style="color:#EAB766">ReflectionExtension</a></span></span></div>  <p class="para rdfs-comment">   获取已定义类的扩展的 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionextension.php" class="classname">ReflectionExtension</a></span> 对象。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getextension-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getextension-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   类所处的扩展的 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionextension.php" class="classname">ReflectionExtension</a></span> 对象的表示，如果是用户定义的类则返回 <strong><span>null</span></strong>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.getextension-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getExtension()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'ReflectionClass'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$extension </span><span style="color: #007700">= </span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getExtension</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$extension</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(ReflectionExtension)#2 (1) {<br>  [&quot;name&quot;]=&gt;<br>  string(10) &quot;Reflection&quot;<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getextension-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getExtensionName()} - 获取定义的类所在的扩展的名称</span></li>   </ul>  </span> </div></div>
     * @return ReflectionExtension|null A {@see ReflectionExtension} object representing*/
    public function getExtension(): ?ReflectionExtension {}

/**
*<div id="reflectionclass.getextensionname" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getExtensionName</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getExtensionName</span> &mdash; <span class="dc-title">获取定义的类所在的扩展的名称</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getextensionname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getExtensionName</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   获取定义的类所在的扩展的名称。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getextensionname-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getextensionname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   获取定义的类所在的扩展的名称，如果是用户定义的类，则返回 <strong><span>false</span></strong>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.getextensionname-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getExtensionName()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'ReflectionClass'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$extension </span><span style="color: #007700">= </span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getExtensionName</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$extension</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(10) &quot;Reflection&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getextensionname-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getExtension()} - 根据已定义的类获取所在扩展的 ReflectionExtension 对象</span></li>   </ul>  </span> </div></div>
     * @return string|false The name of the extension which defined the class,*/
    public function getExtensionName(): string|false {}

/**
*<div id="reflectionclass.innamespace" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::inNamespace</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::inNamespace</span> &mdash; <span class="dc-title">检查是否位于命名空间中</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.innamespace-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::inNamespace</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查这个类是否定义于一个命名空间中里。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.innamespace-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.innamespace-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.innamespace-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::inNamespace()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">namespace </span><span style="color: #9876AA">A\B</span><span style="color: #007700">;<br /><br />class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{ }<br /><br /></span><span style="color: #9876AA">$function </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'stdClass'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">inNamespace</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getNamespaceName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getShortName</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$function </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'A\\B\\Foo'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">inNamespace</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getNamespaceName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getShortName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>string(8) &quot;stdClass&quot;<br>string(0) &quot;&quot;<br>string(8) &quot;stdClass&quot;<br><br>bool(true)<br>string(7) &quot;A\B\Foo&quot;<br>string(3) &quot;A\B&quot;<br>string(3) &quot;Foo&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.innamespace-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getNamespaceName()} - 获取命名空间的名称</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.namespaces.php" class="link">PHP Namespaces</a></li>   </ul>  </span> </div></div>
     * @return bool {@see true} on success or {@see false} on failure.*/
    public function inNamespace(): bool {}

/**
*<div id="reflectionclass.getnamespacename" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getNamespaceName</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getNamespaceName</span> &mdash; <span class="dc-title">获取命名空间的名称</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getnamespacename-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getNamespaceName</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   获取命名空间（namespace）的名称。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getnamespacename-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getnamespacename-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   命名空间的名称。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.getnamespacename-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getNamespaceName()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">namespace </span><span style="color: #9876AA">A\B</span><span style="color: #007700">;<br /><br />class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{ }<br /><br /></span><span style="color: #9876AA">$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'stdClass'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">inNamespace</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getNamespaceName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getShortName</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'A\\B\\Foo'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">inNamespace</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getNamespaceName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getShortName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>string(8) &quot;stdClass&quot;<br>string(0) &quot;&quot;<br>string(8) &quot;stdClass&quot;<br><br>bool(true)<br>string(7) &quot;A\B\Foo&quot;<br>string(3) &quot;A\B&quot;<br>string(3) &quot;Foo&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getnamespacename-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getParentClass()} - 获取父类</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.namespaces.php" class="link">namespaces</a></li>   </ul>  </span> </div></div>
     * @return string The namespace name.*/
    public function getNamespaceName(): string {}

/**
*<div id="reflectionclass.getshortname" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getShortName</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getShortName</span> &mdash; <span class="dc-title">获取短名</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getshortname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getShortName</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   获取类的短名，就是不含命名空间（namespace）的那一部分。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getshortname-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getshortname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   类的短名。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.getshortname-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getShortName()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">namespace </span><span style="color: #9876AA">A\B</span><span style="color: #007700">;<br /><br />class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{ }<br /><br /></span><span style="color: #9876AA">$function </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'stdClass'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">inNamespace</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getNamespaceName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getShortName</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$function </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'A\\B\\Foo'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">inNamespace</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getNamespaceName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getShortName</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>string(8) &quot;stdClass&quot;<br>string(0) &quot;&quot;<br>string(8) &quot;stdClass&quot;<br><br>bool(true)<br>string(7) &quot;A\B\Foo&quot;<br>string(3) &quot;A\B&quot;<br>string(3) &quot;Foo&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getshortname-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getName()} - 获取类名</span></li>   </ul>  </span> </div></div>
     * @return string The class short name.*/
    public function getShortName(): string {}

/**
*<div id="reflectionclass.getattributes" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getAttributes</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getAttributes</span> &mdash; <span class="dc-title">获取所有属性</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.getattributes-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getAttributes</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$name</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   返回类中声明的所有属性，类型是由 <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionattribute.php" class="type ReflectionAttribute" style="color:#EAB766">ReflectionAttribute</a></span> 组成的 array。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.getattributes-parameters">  <h3 class="title">参数</h3>  <dl>   <dt><span class="parameter" style="color:#3A95FF">name</span></dt><dd> <span>  过滤结果，匹配此类名，仅包含 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionattribute.php" class="classname">ReflectionAttribute</a></span> 实例的属性。 </span></dd>   <dt><span class="parameter" style="color:#3A95FF">flags</span></dt><dd> <p class="para">  如果提供了 <span class="parameter" style="color:#3A95FF">name</span>，则用于确定如何过滤结果的 flag。 </p> <p class="para">  默认值为 <span>0</span>，这将导致返回的结果只属于类 <span class="parameter" style="color:#3A95FF">name</span> 的属性。 </p> <p class="para">  唯一可用的其他选项是使用 <strong><span>ReflectionAttribute::IS_INSTANCEOF</span></strong>，它将改为使用 <span>instanceof</span> 进行过滤。 </p></dd>  </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.getattributes-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   由 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionattribute.php" class="classname">ReflectionAttribute</a></span> 对象组成的属性数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionclass.getattributes-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 基础用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br />}<br /><br />#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Red </span><span style="color: #007700">{<br />}<br /><br />#[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br />#[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Apple </span><span style="color: #007700">{<br />}<br /><br /></span><span style="color: #9876AA">$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Apple'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">$attributes</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; Fruit<br>    [1] =&gt; Red<br>)<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 通过类名过滤结果</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br />}<br /><br />#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Red </span><span style="color: #007700">{<br />}<br /><br />#[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br />#[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Apple </span><span style="color: #007700">{<br />}<br /><br /></span><span style="color: #9876AA">$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Apple'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">(</span><span style="color: #DD0000">'Fruit'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">$attributes</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; Fruit<br>)<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3 通过类名和继承过滤结果</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">interface </span><span style="color: #9876AA">Color </span><span style="color: #007700">{<br />}<br /><br />#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br />}<br /><br />#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Red </span><span style="color: #007700">implements </span><span style="color: #9876AA">Color </span><span style="color: #007700">{<br />}<br /><br />#[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br />#[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Apple </span><span style="color: #007700">{<br />}<br /><br /></span><span style="color: #9876AA">$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Apple'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">(</span><span style="color: #9876AA">Color</span><span style="color: #007700">::class, </span><span style="color: #9876AA">ReflectionAttribute</span><span style="color: #007700">::</span><span style="color: #9876AA">IS_INSTANCEOF</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">$attributes</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; Red<br>)<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionclass.getattributes-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::getAttributes()} - Gets Attributes</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getAttributes()} - Gets Attributes</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::getAttributes()} - Gets Attributes</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getAttributes()} - Gets Attributes</span></li>   </ul>  </span> </div></div>
     * @return ReflectionAttribute<T>[]*/
    public function getAttributes(?string $name = null, int $flags = 0): array {}

    /**
     * Clones object
     *
     * @link https://php.net/manual/en/reflectionclass.clone.php
     * @return void
     */
    #[PhpStormStubsElementAvailable(from: "5.4", to: "8.0")]
    final private function __clone(): void {}

    /**
     * Clones object
     *
     * @link https://php.net/manual/en/reflectionclass.clone.php
     * @return void
     */
    #[PhpStormStubsElementAvailable(from: "8.1")]
    private function __clone(): void {}

/**
*<div id="reflectionclass.isenum" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isEnum</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">ReflectionClass::isEnum</span> &mdash; <span class="dc-title">Returns whether this is an enum</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionclass.isenum-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isEnum</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if a class is an <a href="https://www.php.net/manual/zh/language.enumerations.php" class="link">enum</a>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionclass.isenum-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionclass.isenum-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if this is an <a href="https://www.php.net/manual/zh/language.enumerations.php" class="link">enum</a>, <strong><span>false</span></strong> otherwise.  </p> </div></div>
*/
    public function isEnum(): bool {}
}
