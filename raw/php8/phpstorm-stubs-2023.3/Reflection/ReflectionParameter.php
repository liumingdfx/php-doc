<?php

use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\Immutable;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\TentativeType;
use JetBrains\PhpStorm\Pure;

/**
*<div id="class.reflectionparameter" class="reference"> <h1 class="title">ReflectionParameter 类</h1>  <div class="partintro"><p class="verinfo">(PHP 5, PHP 7, PHP 8)</p>  <div class="section" id="reflectionparameter.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">ReflectionParameter</strong></span> 检索函数或方法参数的相关信息。   </p>   <p class="para">    要自行检查函数的参数，首先创建 <span class="classname">{@link ReflectionFunction}</span> 或    <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span> 的实例，然后使用它们的    <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getParameters()}</span> 方法来检索参数的数组。   </p>  </div>  <div class="section" id="reflectionparameter.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">ReflectionParameter</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.reflector.php" class="interfacename">Reflector</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.reflectionparameter.php#reflectionparameter.props.name">$<var class="varname">name</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">object</span></span> <span class="parameter" style="color:#3A95FF">$function</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$param</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.allowsnull.php" class="methodname" style="color:#CC7832">allowsNull</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.canbepassedbyvalue.php" class="methodname" style="color:#CC7832">canBePassedByValue</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.clone.php" class="methodname" style="color:#CC7832">__clone</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.export.php" class="methodname" style="color:#CC7832">export</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$function</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$parameter</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$return</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.getattributes.php" class="methodname" style="color:#CC7832">getAttributes</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$name</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.getclass.php" class="methodname" style="color:#CC7832">getClass</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.getdeclaringclass.php" class="methodname" style="color:#CC7832">getDeclaringClass</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link getDeclaringFunction}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionfunctionabstract.php" class="type ReflectionFunctionAbstract" style="color:#EAB766">ReflectionFunctionAbstract</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.getdefaultvalue.php" class="methodname" style="color:#CC7832">getDefaultValue</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.getdefaultvalueconstantname.php" class="methodname" style="color:#CC7832">getDefaultValueConstantName</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">string</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.getname.php" class="methodname" style="color:#CC7832">getName</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.getposition.php" class="methodname" style="color:#CC7832">getPosition</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.gettype.php" class="methodname" style="color:#CC7832">getType</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectiontype.php" class="type ReflectionType" style="color:#EAB766">ReflectionType</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.hastype.php" class="methodname" style="color:#CC7832">hasType</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.isarray.php" class="methodname" style="color:#CC7832">isArray</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.iscallable.php" class="methodname" style="color:#CC7832">isCallable</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.isdefaultvalueavailable.php" class="methodname" style="color:#CC7832">isDefaultValueAvailable</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.isdefaultvalueconstant.php" class="methodname" style="color:#CC7832">isDefaultValueConstant</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.isoptional.php" class="methodname" style="color:#CC7832">isOptional</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.ispassedbyreference.php" class="methodname" style="color:#CC7832">isPassedByReference</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.isvariadic.php" class="methodname" style="color:#CC7832">isVariadic</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionparameter.tostring.php" class="methodname" style="color:#CC7832">__toString</a></span>(): <span class="type" style="color:#EAB766">string</span></div>   }</div>  </div>    <div class="section" id="reflectionparameter.props">   <h2 class="title">属性</h2>   <dl>         <dt id="reflectionparameter.props.name"><var class="varname">name</var></dt>     <dd>      <p class="para">       参数名。只读，在尝试赋值的时候会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。      </p>     </dd>       </dl>  </div>  <div class="section">   <h2 class="title">更新日志</h2>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        已移除 <span class="methodname" style="color:#CC7832">{@link ReflectionParameter::export()}</span>。       </td>      </tr>     </tbody>       </table>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ReflectionParameter::allowsNull} — Checks if null is allowed</li><li>{@link ReflectionParameter::canBePassedByValue} — Returns whether this parameter can be passed by value</li><li>{@link ReflectionParameter::__clone} — Clone</li><li>{@link ReflectionParameter::__construct} — Construct</li><li>{@link ReflectionParameter::export} — Exports</li><li>{@link ReflectionParameter::getAttributes} — Gets Attributes</li><li>{@link ReflectionParameter::getClass} — 获取参数的 ReflectionClass 对象或为 null</li><li>{@link ReflectionParameter::getDeclaringClass} — Gets declaring class</li><li>{@link ReflectionParameter::getDeclaringFunction} — Gets declaring function</li><li>{@link ReflectionParameter::getDefaultValue} — Gets default parameter value</li><li>{@link ReflectionParameter::getDefaultValueConstantName} — Returns the default value's constant name if default value is constant or null</li><li>{@link ReflectionParameter::getName} — Gets parameter name</li><li>{@link ReflectionParameter::getPosition} — Gets parameter position</li><li>{@link ReflectionParameter::getType} — Gets a parameter's type</li><li>{@link ReflectionParameter::hasType} — Checks if parameter has a type</li><li>{@link ReflectionParameter::isArray} — Checks if parameter expects an array</li><li>{@link ReflectionParameter::isCallable} — Returns whether parameter MUST be callable</li><li>{@link ReflectionParameter::isDefaultValueAvailable} — 检查默认是否可用</li><li>{@link ReflectionParameter::isDefaultValueConstant} — Returns whether the default value of this parameter is a constant</li><li>{@link ReflectionParameter::isOptional} — Checks if optional</li><li>{@link ReflectionParameter::isPassedByReference} — Checks if passed by reference</li><li>{@link ReflectionParameter::isVariadic} — Checks if the parameter is variadic</li><li>{@link ReflectionParameter::__toString} — To string</li></ul></div>
*/
class ReflectionParameter implements Reflector
{
    /**
     * @var string Name of the parameter, same as calling the {@see ReflectionParameter::getName()} method
     */
    #[Immutable]
    #[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
    public $name;

    /**
     * Construct
     *
     * @link https://php.net/manual/en/reflectionparameter.construct.php
     * @param callable $function The function to reflect parameters from.
     * @param string|int $param Either an integer specifying the position
     * of the parameter (starting with zero), or a the parameter name as string.
     * @throws ReflectionException if the function or parameter does not exist.
     */
    public function __construct($function, #[LanguageLevelTypeAware(['8.0' => 'string|int'], default: '')] $param) {}

/**
*<div id="reflectionparameter.export" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::export</h1>  <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ReflectionParameter::export</span> &mdash; <span class="dc-title">Exports</span></p> </div> <div id="reflectionparameter.export-refsynopsisdiv">   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数已自 PHP 7.4.0起<em>弃用</em>，自 PHP 8.0.0 起<em>移除</em>。强烈建议不要依赖本函数。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.export-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::export</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$function</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$parameter</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$return</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Exports.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.export-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">function</span></dt>     <dd>      <p class="para">       The function name.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">parameter</span></dt>     <dd>      <p class="para">       The parameter name.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">return</span></dt>     <dd>      <p class="para">       设为 <strong><span>true</span></strong> 时返回导出结果，设为 <strong><span>false</span></strong>（默认值）则忽略返回。             </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.export-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The exported reflection.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionparameter.export-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::__toString()} - To string</span></li>   </ul>  </span> </div></div>
     * @return string|null The exported reflection.*/
    public static function export($function, $parameter, $return = false) {}

    /**
     * Returns the string representation of the ReflectionParameter object.
     *
     * @link https://php.net/manual/en/reflectionparameter.tostring.php
     * @return string
     */
    #[TentativeType]
    public function __toString(): string {}

/**
*<div id="reflectionparameter.getname" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::getName</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionParameter::getName</span> &mdash; <span class="dc-title">Gets parameter name</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.getname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::getName</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Gets the name of the parameter.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.getname-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.getname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The name of the reflected parameter.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionparameter.getname-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::getValue()</strong></span></li>   </ul>  </span> </div></div>
     * @return string The name of the reflected parameter.*/
    public function getName(): string {}

/**
*<div id="reflectionparameter.ispassedbyreference" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::isPassedByReference</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionParameter::isPassedByReference</span> &mdash; <span class="dc-title">Checks if passed by reference</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.ispassedbyreference-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::isPassedByReference</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the parameter is passed in by reference.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.ispassedbyreference-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.ispassedbyreference-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the parameter is passed in by reference, otherwise <strong><span>false</span></strong>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionparameter.ispassedbyreference-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::getName()} - Gets parameter name</span></li>   </ul>  </span> </div></div>
     * @return bool {@see true} if the parameter is passed in by reference, otherwise {@see false}*/
    public function isPassedByReference(): bool {}

/**
*<div id="reflectionparameter.canbepassedbyvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::canBePassedByValue</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionParameter::canBePassedByValue</span> &mdash; <span class="dc-title">Returns whether this parameter can be passed by value</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.canbepassedbyvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::canBePassedByValue</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.canbepassedbyvalue-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.canbepassedbyvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the parameter can be passed by value, <strong><span>false</span></strong> otherwise.   Returns <strong><span>null</span></strong> in case of an error.  </p> </div></div>
     * @return bool|null {@see true} if the parameter can be passed by value, {@see false} otherwise.*/
    public function canBePassedByValue(): bool {}

/**
*<div id="reflectionparameter.getdeclaringfunction" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::getDeclaringFunction</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.3, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionParameter::getDeclaringFunction</span> &mdash; <span class="dc-title">Gets declaring function</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.getdeclaringfunction-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::getDeclaringFunction</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionfunctionabstract.php" class="type ReflectionFunctionAbstract" style="color:#EAB766">ReflectionFunctionAbstract</a></span></div>  <p class="para rdfs-comment">   Gets the declaring function.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.getdeclaringfunction-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.getdeclaringfunction-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   A <span class="classname">{@link ReflectionFunction}</span> object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionparameter.getdeclaringfunction-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::getDeclaringClass()} - Gets declaring class</span></li>   </ul>  </span> </div></div>
     * @return ReflectionFunctionAbstract A {@see ReflectionFunctionAbstract} object.*/
    public function getDeclaringFunction(): ReflectionFunctionAbstract {}

/**
*<div id="reflectionparameter.getdeclaringclass" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::getDeclaringClass</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.3, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionParameter::getDeclaringClass</span> &mdash; <span class="dc-title">Gets declaring class</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.getdeclaringclass-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::getDeclaringClass</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></span></div>  <p class="para rdfs-comment">   Gets the declaring class.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.getdeclaringclass-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.getdeclaringclass-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   A <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="classname">ReflectionClass</a></span> object or <strong><span>null</span></strong> if called on function.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionparameter.getdeclaringclass-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Getting the class that declared the method</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo<br /></span><span style="color: #007700">{<br />    public function </span><span style="color: #9876AA">bar</span><span style="color: #007700">(</span><span style="color: #9876AA">\DateTime $datetime</span><span style="color: #007700">)<br />    {<br />    }<br />}<br /><br />class </span><span style="color: #9876AA">Baz </span><span style="color: #007700">extends </span><span style="color: #9876AA">Foo<br /></span><span style="color: #007700">{<br />}<br /><br /></span><span style="color: #9876AA">$param </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionParameter</span><span style="color: #007700">([</span><span style="color: #DD0000">'Baz'</span><span style="color: #007700">, </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">], </span><span style="color: #9876AA">0</span><span style="color: #007700">); <br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$param</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDeclaringClass</span><span style="color: #007700">());</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(ReflectionClass)#2 (1) {<br>  [&quot;name&quot;]=&gt;<br>  string(3) &quot;Foo&quot;<br>}<br></span></div>   </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionparameter.getdeclaringclass-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::getClass()} - 获取参数的 ReflectionClass 对象或为 null</span></li>   </ul>  </span> </div></div>
     * @return ReflectionClass|null A {@see ReflectionClass} object or {@see null} if*/
    public function getDeclaringClass(): ?ReflectionClass {}

/**
*<div id="reflectionparameter.getclass" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::getClass</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionParameter::getClass</span> &mdash; <span class="dc-title">获取参数的 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="classname">ReflectionClass</a></span> 对象或为 <strong><span>null</span></strong></span></p> </div> <div id="reflectionparameter.getclass-refsynopsisdiv">   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数已自 PHP 8.0.0 起被<em>废弃</em>。强烈建议不要依赖本函数。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.getclass-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::getClass</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></span></div>  <p class="para rdfs-comment">   获取参数的 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="classname">ReflectionClass</a></span> 对象或为 <strong><span>null</span></strong>。  </p>  <p class="para">   自 PHP 8.0.0 起，弃用此函数且不推荐使用。反而应该使用 <span class="methodname" style="color:#CC7832">{@link ReflectionParameter::getType()}</span>   获取参数的 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectiontype.php" class="classname">ReflectionType</a></span>，然后询问该对象以确定参数类型。  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.getclass-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.getclass-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="classname">ReflectionClass</a></span> 对象，如果没有声明类型或者声明的类型为类或接口则为 <strong><span>null</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionparameter.getclass-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 使用 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionparameter.php" class="classname">ReflectionParameter</a></span> 类</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">foo</span><span style="color: #007700">(</span><span style="color: #9876AA">Exception $a</span><span style="color: #007700">) { }<br /><br /></span><span style="color: #9876AA">$functionReflection </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$parameters </span><span style="color: #007700">= </span><span style="color: #9876AA">$functionReflection</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getParameters</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$aParameter </span><span style="color: #007700">= </span><span style="color: #9876AA">$parameters</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">];<br /><br />echo </span><span style="color: #9876AA">$aParameter</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClass</span><span style="color: #007700">()-&gt;</span><span style="color: #9876AA">name</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionparameter.getclass-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::getDeclaringClass()} - Gets declaring class</span></li>   </ul>  </span> </div></div>
     * @return ReflectionClass|null A {@see ReflectionClass} object.*/
    public function getClass(): ?ReflectionClass {}

/**
*<div id="reflectionparameter.hastype" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::hasType</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionParameter::hasType</span> &mdash; <span class="dc-title">Checks if parameter has a type</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.hastype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::hasType</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the parameter has a type associated with it.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.hastype-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.hastype-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if a type is specified, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionparameter.hastype-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::hasType()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">someFunction</span><span style="color: #007700">(</span><span style="color: #9876AA">string $param</span><span style="color: #007700">, </span><span style="color: #9876AA">$param2 </span><span style="color: #007700">= </span><span style="color: #9876AA">null</span><span style="color: #007700">) {}<br /><br /></span><span style="color: #9876AA">$reflectionFunc </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'someFunction'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$reflectionParams </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflectionFunc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getParameters</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflectionParams</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">hasType</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflectionParams</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">hasType</span><span style="color: #007700">());</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionparameter.hastype-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::getType()} - Gets a parameter's type</span></li>   </ul>  </span> </div></div>
     * @return bool {@see true} if a type is specified, {@see false} otherwise.*/
    public function hasType(): bool {}

    /**
     * Gets a parameter's type
     *
     * @link https://php.net/manual/en/reflectionparameter.gettype.php
     * @return ReflectionType|null Returns a {@see ReflectionType} object if a
     * parameter type is specified, {@see null} otherwise.
     * @since 7.0
     */
    #[Pure]
    #[LanguageLevelTypeAware(
        [
            '7.1' => 'ReflectionNamedType|null',
            '8.0' => 'ReflectionNamedType|ReflectionUnionType|null',
            '8.1' => 'ReflectionNamedType|ReflectionUnionType|ReflectionIntersectionType|null'
        ],
        default: 'ReflectionType|null'
    )]
/**
*<div id="reflectionparameter.gettype" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::getType</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionParameter::getType</span> &mdash; <span class="dc-title">Gets a parameter&#039;s type</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.gettype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::getType</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectiontype.php" class="type ReflectionType" style="color:#EAB766">ReflectionType</a></span></span></div>  <p class="para rdfs-comment">   Gets the associated type of a parameter.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.gettype-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.gettype-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectiontype.php" class="classname">ReflectionType</a></span> object if a parameter type is   specified, <strong><span>null</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionparameter.gettype-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::getType()</strong></span> Usage as of PHP 7.1.0</strong></p>    <div class="example-contents"><p>     As of PHP 7.1.0, <span class="methodname" style="color:#CC7832">{@link ReflectionType::__toString()}</span> is deprecated, and     <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::getType()</strong></span> <em>may</em> return an     instance of <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionnamedtype.php" class="classname">ReflectionNamedType</a></span>. To get the name of the parameter type,     <span class="methodname" style="color:#CC7832"><strong>ReflectionNamedType()</strong></span> is available in this case.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">someFunction</span><span style="color: #007700">(</span><span style="color: #9876AA">int $param</span><span style="color: #007700">, </span><span style="color: #9876AA">$param2</span><span style="color: #007700">) {}<br /><br /></span><span style="color: #9876AA">$reflectionFunc </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'someFunction'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$reflectionParams </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflectionFunc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getParameters</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$reflectionType1 </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflectionParams</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">getType</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$reflectionType2 </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflectionParams</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">getType</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">assert</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflectionType1 </span><span style="color: #007700">instanceof </span><span style="color: #9876AA">ReflectionNamedType</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$reflectionType1</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflectionType2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int<br>NULL<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::getType()</strong></span> Usage before PHP 7.1.0</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">someFunction</span><span style="color: #007700">(</span><span style="color: #9876AA">int $param</span><span style="color: #007700">, </span><span style="color: #9876AA">$param2</span><span style="color: #007700">) {}<br /><br /></span><span style="color: #9876AA">$reflectionFunc </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'someFunction'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$reflectionParams </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflectionFunc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getParameters</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$reflectionType1 </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflectionParams</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">getType</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$reflectionType2 </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflectionParams</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">getType</span><span style="color: #007700">();<br /><br />echo </span><span style="color: #9876AA">$reflectionType1</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflectionType2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例在 PHP 7.0 中的输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int<br>NULL<br></span></div>    </div>   </div>   <div class="example" id="">   <p><strong>示例 #3 <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::getType()</strong></span> Usage in PHP 8.0.0 and later</strong></p>    <div class="example-contents"><p>     As of PHP 8.0.0, this method may return a <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionnamedtype.php" class="classname">ReflectionNamedType</a></span> instance or     a <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionuniontype.php" class="classname">ReflectionUnionType</a></span> instance.  The latter is a collection of the former.     To analyze a type, it is often convenient to normalize it to an array of <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionnamedtype.php" class="classname">ReflectionNamedType</a></span>     objects.  The following function will return an array of <span>0</span> or more <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionnamedtype.php" class="classname">ReflectionNamedType</a></span>     instances.    </p></div>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">getAllTypes</span><span style="color: #007700">(</span><span style="color: #9876AA">ReflectionParameter $reflectionParameter</span><span style="color: #007700">): array<br />{<br />    </span><span style="color: #9876AA">$reflectionType </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflectionParameter</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getType</span><span style="color: #007700">();<br /><br />    if (!</span><span style="color: #9876AA">$reflectionType</span><span style="color: #007700">) return [];<br /><br />    return </span><span style="color: #9876AA">$reflectionType </span><span style="color: #007700">instanceof </span><span style="color: #9876AA">ReflectionUnionType<br />        </span><span style="color: #007700">? </span><span style="color: #9876AA">$reflectionType</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getTypes</span><span style="color: #007700">()<br />        : [</span><span style="color: #9876AA">$reflectionType</span><span style="color: #007700">];<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionparameter.gettype-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::hasType()} - Checks if parameter has a type</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionType::__toString()} - To string</span></li>   </ul>  </span> </div></div>
*/
    public function getType(): ?ReflectionType {}

/**
*<div id="reflectionparameter.isarray" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::isArray</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionParameter::isArray</span> &mdash; <span class="dc-title">Checks if parameter expects an array</span></p> </div> <div id="reflectionparameter.isarray-refsynopsisdiv">   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数已自 PHP 8.0.0 起被<em>废弃</em>。强烈建议不要依赖本函数。</p></div>  <p class="para">See the example below for an alternative way to derive this information.</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.isarray-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::isArray</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the parameter expects an array.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.isarray-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.isarray-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if an <span class="type" style="color:#EAB766">array</span> is expected, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionparameter.isarray-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 PHP 8.0.0 equivalent</strong></p>    <div class="example-contents"><p>     As of PHP 8.0.0, the following code will report if a type declares arrays,     including as part of a union.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">declaresArray</span><span style="color: #007700">(</span><span style="color: #9876AA">ReflectionParameter $reflectionParameter</span><span style="color: #007700">): </span><span style="color: #9876AA">bool<br /></span><span style="color: #007700">{<br />    </span><span style="color: #9876AA">$reflectionType </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflectionParameter</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getType</span><span style="color: #007700">();<br /><br />    if (!</span><span style="color: #9876AA">$reflectionType</span><span style="color: #007700">) return </span><span style="color: #9876AA">false</span><span style="color: #007700">;<br /><br />    </span><span style="color: #9876AA">$types </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflectionType </span><span style="color: #007700">instanceof </span><span style="color: #9876AA">ReflectionUnionType<br />        </span><span style="color: #007700">? </span><span style="color: #9876AA">$reflectionType</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getTypes</span><span style="color: #007700">()<br />        : [</span><span style="color: #9876AA">$reflectionType</span><span style="color: #007700">];<br /><br />   return </span><span style="color: #9876AA">in_array</span><span style="color: #007700">(</span><span style="color: #DD0000">'array'</span><span style="color: #007700">, </span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">ReflectionNamedType $t</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">$t</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">$types</span><span style="color: #007700">));<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionparameter.isarray-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::isOptional()} - Checks if optional</span></li>   </ul>  </span> </div></div>
     * @return bool {@see true} if an array is expected, {@see false} otherwise.*/
    public function isArray(): bool {}

/**
*<div id="reflectionparameter.iscallable" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::isCallable</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionParameter::isCallable</span> &mdash; <span class="dc-title">Returns whether parameter MUST be callable</span></p> </div> <div id="reflectionparameter.iscallable-refsynopsisdiv">   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数已自 PHP 8.0.0 起被<em>废弃</em>。强烈建议不要依赖本函数。</p></div>  <p class="para">See the example below for an alternative way to derive this information.</p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.iscallable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::isCallable</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.iscallable-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.iscallable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the parameter is <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>, <strong><span>false</span></strong> if it is   not or <strong><span>null</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionparameter.iscallable-examples"> <h3 class="title">示例</h3> <span>  <div class="example" id="">   <p><strong>示例 #1 PHP 8.0.0 equivalent</strong></p>   <div class="example-contents"><p>    As of PHP 8.0.0, the following code will report if a type supports callables,    including as part of a union.   </p></div>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">declaresCallable</span><span style="color: #007700">(</span><span style="color: #9876AA">ReflectionParameter $reflectionParameter</span><span style="color: #007700">): </span><span style="color: #9876AA">bool<br /></span><span style="color: #007700">{<br />    </span><span style="color: #9876AA">$reflectionType </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflectionParameter</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getType</span><span style="color: #007700">();<br /><br />    if (!</span><span style="color: #9876AA">$reflectionType</span><span style="color: #007700">) return </span><span style="color: #9876AA">false</span><span style="color: #007700">;<br /><br />    </span><span style="color: #9876AA">$types </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflectionType </span><span style="color: #007700">instanceof </span><span style="color: #9876AA">ReflectionUnionType<br />        </span><span style="color: #007700">? </span><span style="color: #9876AA">$reflectionType</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getTypes</span><span style="color: #007700">()<br />        : [</span><span style="color: #9876AA">$reflectionType</span><span style="color: #007700">];<br /><br />   return </span><span style="color: #9876AA">in_array</span><span style="color: #007700">(</span><span style="color: #DD0000">'callable'</span><span style="color: #007700">, </span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">ReflectionNamedType $t</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">$t</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">$types</span><span style="color: #007700">));<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div> </span> </div></div>
     * @return bool|null Returns {@see true} if the parameter is callable, {@see false}*/
    public function isCallable(): bool {}

/**
*<div id="reflectionparameter.allowsnull" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::allowsNull</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionParameter::allowsNull</span> &mdash; <span class="dc-title">Checks if null is allowed</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.allowsnull-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::allowsNull</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks whether the parameter allows <strong><span>null</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.allowsnull-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.allowsnull-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if <strong><span>null</span></strong> is allowed, otherwise <strong><span>false</span></strong>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionparameter.allowsnull-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::isOptional()} - Checks if optional</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} if {@see null} is allowed,*/
    public function allowsNull(): bool {}

/**
*<div id="reflectionparameter.getposition" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::getPosition</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.3, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionParameter::getPosition</span> &mdash; <span class="dc-title">Gets parameter position</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.getposition-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::getPosition</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Gets the position of the parameter.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.getposition-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.getposition-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The position of the parameter, left to right, starting at position #0.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionparameter.getposition-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::getName()} - Gets parameter name</span></li>   </ul>  </span> </div></div>
     * @return int The position of the parameter, left to right, starting at position #0.*/
    public function getPosition(): int {}

/**
*<div id="reflectionparameter.isoptional" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::isOptional</h1>  <p class="verinfo">(PHP 5 &gt;= 5.0.3, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionParameter::isOptional</span> &mdash; <span class="dc-title">Checks if optional</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.isoptional-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::isOptional</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the parameter is optional.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.isoptional-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.isoptional-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the parameter is optional, otherwise <strong><span>false</span></strong>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionparameter.isoptional-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::getName()} - Gets parameter name</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} if the parameter is optional, otherwise {@see false}*/
    public function isOptional(): bool {}

/**
*<div id="reflectionparameter.isdefaultvalueavailable" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::isDefaultValueAvailable</h1>  <p class="verinfo">(PHP 5 &gt;= 5.0.3, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionParameter::isDefaultValueAvailable</span> &mdash; <span class="dc-title">检查默认是否可用</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.isdefaultvalueavailable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::isDefaultValueAvailable</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查参数默认值是否可用。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.isdefaultvalueavailable-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.isdefaultvalueavailable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果默认值可用为 <strong><span>true</span></strong> 否则为 <strong><span>false</span></strong>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionparameter.isdefaultvalueavailable-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::getDefaultValue()} - Gets default parameter value</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::isDefaultValueConstant()} - Returns whether the default value of this parameter is a constant</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::getName()} - Gets parameter name</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} if a default value is available, otherwise {@see false}*/
    public function isDefaultValueAvailable(): bool {}

/**
*<div id="reflectionparameter.getdefaultvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::getDefaultValue</h1>  <p class="verinfo">(PHP 5 &gt;= 5.0.3, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionParameter::getDefaultValue</span> &mdash; <span class="dc-title">Gets default parameter value</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.getdefaultvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::getDefaultValue</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Gets the default value of the parameter for any user-defined or internal function or method.   If the parameter is not optional a <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>   will be thrown.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.getdefaultvalue-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.getdefaultvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The parameters default value.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-reflectionparameter.getdefaultvalue-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        This method now allows getting the default value of parameters of built-in functions and        built-in class methods. Previously, a <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span> was thrown.       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionparameter.getdefaultvalue-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Getting default values of function parameters</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">foo</span><span style="color: #007700">(</span><span style="color: #9876AA">$test</span><span style="color: #007700">, </span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #DD0000">'baz'</span><span style="color: #007700">)<br />{<br />    echo </span><span style="color: #9876AA">$test </span><span style="color: #007700">. </span><span style="color: #9876AA">$bar</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$function </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getParameters</span><span style="color: #007700">() as </span><span style="color: #9876AA">$param</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Name: ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$param</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">() . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    if (</span><span style="color: #9876AA">$param</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isOptional</span><span style="color: #007700">()) {<br />        echo </span><span style="color: #DD0000">'Default value: ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$param</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDefaultValue</span><span style="color: #007700">() . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    }<br />    echo </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Name: test<br><br>Name: bar<br>Default value: baz<br></span></div>   </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionparameter.getdefaultvalue-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::isOptional()} - Checks if optional</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::isDefaultValueAvailable()} - 检查默认是否可用</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::getDefaultValueConstantName()} - Returns the default value's constant name if default value is constant or null</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::isPassedByReference()} - Checks if passed by reference</span></li>   </ul>  </span> </div></div>
     * @return mixed The parameters default value.*/
    public function getDefaultValue(): mixed {}

/**
*<div id="reflectionparameter.isdefaultvalueconstant" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::isDefaultValueConstant</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.6, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionParameter::isDefaultValueConstant</span> &mdash; <span class="dc-title">Returns whether the default value of this parameter is a constant</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.isdefaultvalueconstant-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::isDefaultValueConstant</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Returns whether the default value of this parameter is a constant.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.isdefaultvalueconstant-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.isdefaultvalueconstant-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the default value is constant, and <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionparameter.isdefaultvalueconstant-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::getDefaultValueConstantName()} - Returns the default value's constant name if default value is constant or null</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::isDefaultValueAvailable()} - 检查默认是否可用</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} if the default value is constant, and {@see false} otherwise.*/
    public function isDefaultValueConstant(): bool {}

/**
*<div id="reflectionparameter.getdefaultvalueconstantname" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::getDefaultValueConstantName</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.6, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionParameter::getDefaultValueConstantName</span> &mdash; <span class="dc-title">Returns the default value&#039;s constant name if default value is constant or null</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.getdefaultvalueconstantname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::getDefaultValueConstantName</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">string</span></span></div>  <p class="para rdfs-comment">   Returns the default value&#039;s constant name of the parameter of any user-defined   or internal function or method, if default value is constant or null.   If the parameter is not optional a <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>   will be thrown.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.getdefaultvalueconstantname-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.getdefaultvalueconstantname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns string on success or <strong><span>null</span></strong> on failure.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-reflectionparameter.getdefaultvalueconstantname-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        This method now allows getting the default values&#039; constant names of built-in functions and        built-in class methods. Previously, a <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span> was thrown.       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionparameter.getdefaultvalueconstantname-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Getting default values&#039; constant names of function parameters</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">foo</span><span style="color: #007700">(</span><span style="color: #9876AA">$test</span><span style="color: #007700">, </span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #9876AA">PHP_INT_MIN</span><span style="color: #007700">)<br />{<br />    echo </span><span style="color: #9876AA">$test </span><span style="color: #007700">. </span><span style="color: #9876AA">$bar</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$function </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getParameters</span><span style="color: #007700">() as </span><span style="color: #9876AA">$param</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Name: ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$param</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">() . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    if (</span><span style="color: #9876AA">$param</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isOptional</span><span style="color: #007700">()) {<br />        echo </span><span style="color: #DD0000">'Default value: ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$param</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDefaultValueConstantName</span><span style="color: #007700">() . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    }<br />    echo </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Name: test<br><br>Name: bar<br>Default value: PHP_INT_MIN<br></span></div>   </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionparameter.getdefaultvalueconstantname-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::isOptional()} - Checks if optional</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::isDefaultValueConstant()} - Returns whether the default value of this parameter is a constant</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::getDefaultValue()} - Gets default parameter value</span></li>   </ul>  </span> </div></div>
     * @return string|null Returns string on success or {@see null} on failure.*/
    public function getDefaultValueConstantName(): ?string {}

/**
*<div id="reflectionparameter.isvariadic" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::isVariadic</h1>  <p class="verinfo">(PHP 5 &gt;= 5.6.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionParameter::isVariadic</span> &mdash; <span class="dc-title">Checks if the parameter is variadic</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.isvariadic-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::isVariadic</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the parameter was declared as a   <a href="https://www.php.net/manual/zh/functions.arguments.php#functions.variable-arg-list" class="link">variadic parameter</a>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.isvariadic-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.isvariadic-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the parameter is variadic, otherwise <strong><span>false</span></strong>.  </p> </div></div>
     * @return bool Returns {@see true} if the function is variadic, otherwise {@see false}*/
    public function isVariadic(): bool {}

    /**
     * Returns information about whether the parameter is a promoted.
     *
     * @return bool Returns {@see true} if the parameter promoted or {@see false} instead
     * @since 8.0
     */
    #[Pure]
    public function isPromoted(): bool {}

/**
*<div id="reflectionparameter.getattributes" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionParameter::getAttributes</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionParameter::getAttributes</span> &mdash; <span class="dc-title">Gets Attributes</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionparameter.getattributes-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionParameter::getAttributes</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$name</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Returns all attributes declared on this parameter as an array of <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionattribute.php" class="type ReflectionAttribute" style="color:#EAB766">ReflectionAttribute</a></span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionparameter.getattributes-parameters">  <h3 class="title">参数</h3>  <dl>   <dt><span class="parameter" style="color:#3A95FF">name</span></dt><dd> <span>  过滤结果，匹配此类名，仅包含 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionattribute.php" class="classname">ReflectionAttribute</a></span> 实例的属性。 </span></dd>   <dt><span class="parameter" style="color:#3A95FF">flags</span></dt><dd> <p class="para">  如果提供了 <span class="parameter" style="color:#3A95FF">name</span>，则用于确定如何过滤结果的 flag。 </p> <p class="para">  默认值为 <span>0</span>，这将导致返回的结果只属于类 <span class="parameter" style="color:#3A95FF">name</span> 的属性。 </p> <p class="para">  唯一可用的其他选项是使用 <strong><span>ReflectionAttribute::IS_INSTANCEOF</span></strong>，它将改为使用 <span>instanceof</span> 进行过滤。 </p></dd>  </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionparameter.getattributes-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Array of attributes, as a <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionattribute.php" class="classname">ReflectionAttribute</a></span> object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionparameter.getattributes-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Basic usage</strong></p>    <div class="example-contents">     <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br />}<br /><br />#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Red </span><span style="color: #007700">{<br />}<br /><br />function </span><span style="color: #9876AA">fruitBasket</span><span style="color: #007700">(<br />   #[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br />   #[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br />   </span><span style="color: #9876AA">string $apple<br /></span><span style="color: #007700">) { }<br /><br /></span><span style="color: #9876AA">$reflection </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'fruitBasket'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$parameter </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflection</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getParameter</span><span style="color: #007700">(</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">$parameter</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">$attributes</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">     <div class="cdata"><span>Array<br>(<br>    [0] =&gt; Fruit<br>    [1] =&gt; Red<br>)<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 Filtering results by class name</strong></p>    <div class="example-contents">     <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br />}<br /><br />#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Red </span><span style="color: #007700">{<br />}<br /><br />function </span><span style="color: #9876AA">fruitBasket</span><span style="color: #007700">(<br />   #[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br />   #[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br />   </span><span style="color: #9876AA">string $apple<br /></span><span style="color: #007700">) { }<br /><br /></span><span style="color: #9876AA">$reflection </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'fruitBasket'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$parameter </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflection</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getParameter</span><span style="color: #007700">(</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">$parameter</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">(</span><span style="color: #DD0000">'Fruit'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">$attributes</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">     <div class="cdata"><span>Array<br>(<br>    [0] =&gt; Fruit<br>)<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3 Filtering results by class name, with inheritance</strong></p>    <div class="example-contents">     <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">interface </span><span style="color: #9876AA">Color </span><span style="color: #007700">{<br />}<br /><br />#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br />}<br /><br />function </span><span style="color: #9876AA">fruitBasket</span><span style="color: #007700">(<br />   #[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br />   #[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br />   </span><span style="color: #9876AA">string $apple<br /></span><span style="color: #007700">) { }<br /><br /></span><span style="color: #9876AA">$reflection </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'fruitBasket'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$parameter </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflection</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getParameter</span><span style="color: #007700">(</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">$parameter</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">(</span><span style="color: #DD0000">'Color'</span><span style="color: #007700">, </span><span style="color: #9876AA">ReflectionAttribute</span><span style="color: #007700">::</span><span style="color: #9876AA">IS_INSTANCEOF</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">$attributes</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">     <div class="cdata"><span>Array<br>(<br>    [0] =&gt; Red<br>)<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionparameter.getattributes-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getAttributes()} - 获取所有属性</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::getAttributes()} - Gets Attributes</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getAttributes()} - Gets Attributes</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getAttributes()} - Gets Attributes</span></li>   </ul>  </span> </div></div>
     * @return ReflectionAttribute<T>[]*/
    public function getAttributes(?string $name = null, int $flags = 0): array {}

    /**
     * Clone
     *
     * @link https://php.net/manual/en/reflectionparameter.clone.php
     * @return void
     */
    #[PhpStormStubsElementAvailable(from: "5.4", to: "8.0")]
    final private function __clone(): void {}

    /**
     * Clone
     *
     * @link https://php.net/manual/en/reflectionparameter.clone.php
     * @return void
     */
    #[PhpStormStubsElementAvailable(from: "8.1")]
    private function __clone(): void {}
}
