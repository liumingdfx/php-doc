<?php

use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\Immutable;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\TentativeType;
use JetBrains\PhpStorm\Pure;

/**
*<div id="class.reflectionproperty" class="reference"> <h1 class="title">ReflectionProperty 类</h1>  <div class="partintro"><p class="verinfo">(PHP 5, PHP 7, PHP 8)</p>  <div class="section" id="reflectionproperty.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">ReflectionProperty</strong></span> 类报告有关类属性的信息。   </p>  </div>  <div class="section" id="reflectionproperty.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">ReflectionProperty</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.reflector.php" class="interfacename">Reflector</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.is-static"><var class="varname">IS_STATIC</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.is-readonly"><var class="varname">IS_READONLY</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.is-public"><var class="varname">IS_PUBLIC</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.is-protected"><var class="varname">IS_PROTECTED</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.is-private"><var class="varname">IS_PRIVATE</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.props.name">$<var class="varname">name</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.props.class">$<var class="varname">class</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$property</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.clone.php" class="methodname" style="color:#CC7832">__clone</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.export.php" class="methodname" style="color:#CC7832">export</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$return</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.getattributes.php" class="methodname" style="color:#CC7832">getAttributes</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$name</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.getdeclaringclass.php" class="methodname" style="color:#CC7832">getDeclaringClass</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.getdefaultvalue.php" class="methodname" style="color:#CC7832">getDefaultValue</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.getdoccomment.php" class="methodname" style="color:#CC7832">getDocComment</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.getmodifiers.php" class="methodname" style="color:#CC7832">getModifiers</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.getname.php" class="methodname" style="color:#CC7832">getName</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.gettype.php" class="methodname" style="color:#CC7832">getType</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectiontype.php" class="type ReflectionType" style="color:#EAB766">ReflectionType</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.getvalue.php" class="methodname" style="color:#CC7832">getValue</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$object</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.hasdefaultvalue.php" class="methodname" style="color:#CC7832">hasDefaultValue</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.hastype.php" class="methodname" style="color:#CC7832">hasType</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.isdefault.php" class="methodname" style="color:#CC7832">isDefault</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.isinitialized.php" class="methodname" style="color:#CC7832">isInitialized</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$object</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.isprivate.php" class="methodname" style="color:#CC7832">isPrivate</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.ispromoted.php" class="methodname" style="color:#CC7832">isPromoted</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.isprotected.php" class="methodname" style="color:#CC7832">isProtected</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.ispublic.php" class="methodname" style="color:#CC7832">isPublic</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.isreadonly.php" class="methodname" style="color:#CC7832">isReadOnly</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.isstatic.php" class="methodname" style="color:#CC7832">isStatic</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.setaccessible.php" class="methodname" style="color:#CC7832">setAccessible</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$accessible</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.setvalue.php" class="methodname" style="color:#CC7832">setValue</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/reflectionproperty.tostring.php" class="methodname" style="color:#CC7832">__toString</a></span>(): <span class="type" style="color:#EAB766">string</span></div>   }</div>  </div>    <div class="section" id="reflectionproperty.props">   <h2 class="title">属性</h2>   <dl>         <dt id="reflectionproperty.props.name"><var class="varname">name</var></dt>     <dd>      <p class="para">       属性名。只读，在尝试赋值的时候抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。      </p>     </dd>             <dt id="reflectionproperty.props.class"><var class="varname">class</var></dt>     <dd>      <p class="para">       定义的属性所在的类。只读，在尝试赋值的时候抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。      </p>     </dd>       </dl>  </div>    <div class="section" id="reflectionproperty.constants">   <h2 class="title">预定义常量</h2>   <div class="section" id="reflectionproperty.constants.modifiers">    <h2 class="title">ReflectionProperty 修饰符</h2>    <dl>           <dt id="reflectionproperty.constants.is-static"><strong><span>ReflectionProperty::IS_STATIC</span></strong></dt>      <dd>       <p class="para">        表示 <a href="https://www.php.net/manual/zh/language.oop5.static.php" class="link">static</a> 属性。在 PHP 7.4.0 之前，值为 <span>1</span>。       </p>      </dd>                <dt id="reflectionproperty.constants.is-readonly"><strong><span>ReflectionProperty::IS_READONLY</span></strong></dt>      <dd>       <p class="para">        表示 <a href="https://www.php.net/manual/zh/language.oop5.properties.php#language.oop5.properties.readonly-properties" class="link">readonly</a>        属性。自 PHP 8.1.0 起可用。       </p>      </dd>                <dt id="reflectionproperty.constants.is-public"><strong><span>ReflectionProperty::IS_PUBLIC</span></strong></dt>      <dd>       <p class="para">        表示 <a href="https://www.php.net/manual/zh/language.oop5.visibility.php" class="link">public</a> 属性。在 PHP 7.4.0 之前，值为 <span>256</span>。       </p>      </dd>                <dt id="reflectionproperty.constants.is-protected"><strong><span>ReflectionProperty::IS_PROTECTED</span></strong></dt>      <dd>       <p class="para">        表示 <a href="https://www.php.net/manual/zh/language.oop5.visibility.php" class="link">protected</a> 属性。在 PHP 7.4.0 之前，值为 <span>512</span>。       </p>      </dd>                <dt id="reflectionproperty.constants.is-private"><strong><span>ReflectionProperty::IS_PRIVATE</span></strong></dt>      <dd>       <p class="para">        表示 <a href="https://www.php.net/manual/zh/language.oop5.visibility.php" class="link">private</a> 属性。在 PHP 7.4.0 之前，值为 <span>1024</span>。       </p>      </dd>         </dl>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:      <p class="para">      这些常量的值可能会在不同 PHP 版本间发生更改。建议始终使用常量而不直接依赖值。     </p>    </p></blockquote>   </div>  </div>  <div class="section">   <h2 class="title">更新日志</h2>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        已移除 <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::export()}</span>。       </td>      </tr>     </tbody>       </table>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ReflectionProperty::__clone} — Clone</li><li>{@link ReflectionProperty::__construct} — Construct a ReflectionProperty object</li><li>{@link ReflectionProperty::export} — Export</li><li>{@link ReflectionProperty::getAttributes} — Gets Attributes</li><li>{@link ReflectionProperty::getDeclaringClass} — Gets declaring class</li><li>{@link ReflectionProperty::getDefaultValue} — Returns the default value declared for a property</li><li>{@link ReflectionProperty::getDocComment} — Gets the property doc comment</li><li>{@link ReflectionProperty::getModifiers} — Gets the property modifiers</li><li>{@link ReflectionProperty::getName} — Gets property name</li><li>{@link ReflectionProperty::getType} — Gets a property's type</li><li>{@link ReflectionProperty::getValue} — Gets value</li><li>{@link ReflectionProperty::hasDefaultValue} — Checks if property has a default value declared</li><li>{@link ReflectionProperty::hasType} — Checks if property has a type</li><li>{@link ReflectionProperty::isDefault} — Checks if property is a default property</li><li>{@link ReflectionProperty::isInitialized} — Checks whether a property is initialized</li><li>{@link ReflectionProperty::isPrivate} — Checks if property is private</li><li>{@link ReflectionProperty::isPromoted} — Checks if property is promoted</li><li>{@link ReflectionProperty::isProtected} — Checks if property is protected</li><li>{@link ReflectionProperty::isPublic} — Checks if property is public</li><li>{@link ReflectionProperty::isReadOnly} — 检查属性是否为只读</li><li>{@link ReflectionProperty::isStatic} — Checks if property is static</li><li>{@link ReflectionProperty::setAccessible} — Set property accessibility</li><li>{@link ReflectionProperty::setValue} — Set property value</li><li>{@link ReflectionProperty::__toString} — To string</li></ul></div>
*/
class ReflectionProperty implements Reflector
{
    /**
     * @var string Name of the property, same as calling the {@see ReflectionProperty::getName()} method
     */
    #[Immutable]
    #[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
    public $name;

    /**
     * @var string Fully qualified class name where this property was defined
     */
    #[Immutable]
    #[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
    public $class;

    /**
     * Indicates that the property is static.
     *
     * @link https://www.php.net/manual/en/class.reflectionproperty.php#reflectionproperty.constants.is-static
     */
    public const IS_STATIC = 16;

    /**
     * Indicates that the property is public.
     *
     * @link https://www.php.net/manual/en/class.reflectionproperty.php#reflectionproperty.constants.is-public
     */
    public const IS_PUBLIC = 1;

    /**
     * Indicates that the property is protected.
     *
     * @link https://www.php.net/manual/en/class.reflectionproperty.php#reflectionproperty.constants.is-protected
     */
    public const IS_PROTECTED = 2;

    /**
     * Indicates that the property is private.
     *
     * @link https://www.php.net/manual/en/class.reflectionproperty.php#reflectionproperty.constants.is-private
     */
    public const IS_PRIVATE = 4;

    /**
     * @since 8.1
     */
    public const IS_READONLY = 5;

    /**
     * Construct a ReflectionProperty object
     *
     * @link https://php.net/manual/en/reflectionproperty.construct.php
     * @param string|object $class The class name, that contains the property.
     * @param string $property The name of the property being reflected.
     * @throws ReflectionException if the class or property does not exist.
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'object|string'], default: '')] $class,
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $property
    ) {}

/**
*<div id="reflectionproperty.export" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::export</h1>  <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ReflectionProperty::export</span> &mdash; <span class="dc-title">Export</span></p> </div> <div id="reflectionproperty.export-refsynopsisdiv">   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数已自 PHP 7.4.0起<em>弃用</em>，自 PHP 8.0.0 起<em>移除</em>。强烈建议不要依赖本函数。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.export-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::export</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$return</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Exports a reflection.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.export-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">argument</span></dt>     <dd>      <p class="para">       导出的反射。             </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       The property name.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">return</span></dt>     <dd>      <p class="para">       设为 <strong><span>true</span></strong> 时返回导出结果，设为 <strong><span>false</span></strong>（默认值）则忽略返回。                    </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.export-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">     </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.export-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::__toString()} - To string</span></li>   </ul>  </span> </div></div>
     * @return string|null*/
    public static function export($class, $name, $return = false) {}

    /**
     * To string
     *
     * @link https://php.net/manual/en/reflectionproperty.tostring.php
     * @return string
     */
    #[TentativeType]
    public function __toString(): string {}

/**
*<div id="reflectionproperty.getname" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getName</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getName</span> &mdash; <span class="dc-title">Gets property name</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.getname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getName</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Gets the properties name.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.getname-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.getname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The name of the reflected property.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.getname-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getValue()} - Gets value</span></li>   </ul>  </span> </div></div>
     * @return string The name of the reflected property.*/
    public function getName(): string {}

/**
*<div id="reflectionproperty.getvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getValue</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getValue</span> &mdash; <span class="dc-title">Gets value</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.getvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getValue</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$object</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Gets the property&#039;s value.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.getvalue-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       If the property is non-static an object must be provided to fetch the       property from. If you want to fetch the default property without       providing an object use <span class="methodname" style="color:#CC7832">{@link ReflectionClass::getDefaultProperties()}</span>       instead.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.getvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current value of the property.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-reflectionproperty.getvalue-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.1.0</td>      <td>       Private and protected properties can be accessed by       <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getValue()</strong></span> right away.       Previously, they needed to be made accessible by calling       <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setAccessible()}</span>; otherwise       a <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span> was thrown.      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">object</span> is nullable now.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionproperty.getvalue-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getValue()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br />    public static </span><span style="color: #9876AA">$staticProperty </span><span style="color: #007700">= </span><span style="color: #DD0000">'foobar'</span><span style="color: #007700">;<br />    <br />    public </span><span style="color: #9876AA">$property </span><span style="color: #007700">= </span><span style="color: #DD0000">'barfoo'</span><span style="color: #007700">;<br />    protected </span><span style="color: #9876AA">$privateProperty </span><span style="color: #007700">= </span><span style="color: #DD0000">'foofoo'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$reflectionClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Foo'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflectionClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'staticProperty'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">getValue</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflectionClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'property'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">getValue</span><span style="color: #007700">(new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$reflectionProperty </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflectionClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'privateProperty'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$reflectionProperty</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setAccessible</span><span style="color: #007700">(</span><span style="color: #9876AA">true</span><span style="color: #007700">); </span><span style="color: #FF8000">// only required prior to PHP 8.1.0<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflectionProperty</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getValue</span><span style="color: #007700">(new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(6) &quot;foobar&quot;<br>string(6) &quot;barfoo&quot;<br>string(6) &quot;foofoo&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.getvalue-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setValue()} - Set property value</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setAccessible()} - Set property accessibility</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getDefaultProperties()} - 获取默认属性</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getStaticPropertyValue()} - 获取静态（static）属性的值</span></li>   </ul>  </span> </div></div>
     * @return mixed The current value of the property.*/
    public function getValue(#[LanguageLevelTypeAware(['8.0' => 'object|null'], default: '')] $object = null): mixed {}

/**
*<div id="reflectionproperty.setvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::setValue</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::setValue</span> &mdash; <span class="dc-title">Set property value</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.setvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::setValue</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::setValue</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets (changes) the property&#039;s value.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    As of PHP 8.3.0, calling this method with a single argument is deprecated, use <span class="methodname" style="color:#CC7832">{@link ReflectionClass::setStaticPropertyValue()}</span> instead.   </span>  </p></blockquote> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.setvalue-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       If the property is non-static an object must be provided to change       the property on.       If the property is static a value of <strong><span>null</span></strong> <em>must</em> be to be provided.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The new value.      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.setvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-reflectionproperty.setvalue-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.3.0</td>      <td>       Calling this method with a single argument is deprecated,       <span class="methodname" style="color:#CC7832">{@link ReflectionClass::setStaticPropertyValue()}</span>       should be used instead to modify static properties.      </td>     </tr>     <tr>      <td>8.1.0</td>      <td>       Private and protected properties can be accessed by       <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::setValue()</strong></span> right away.       Previously, they needed to be made accessible by calling       <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setAccessible()}</span>; otherwise       a <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span> was thrown.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionproperty.setvalue-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::setValue()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br />    public static </span><span style="color: #9876AA">$staticProperty</span><span style="color: #007700">;<br />    <br />    public </span><span style="color: #9876AA">$property</span><span style="color: #007700">;<br />    protected </span><span style="color: #9876AA">$privateProperty</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$reflectionClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Foo'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// As of PHP 8.3, setValue should no longer be used to set static property value, use setStaticPropertyValue() instead<br /></span><span style="color: #9876AA">$reflectionClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setStaticPropertyValue</span><span style="color: #007700">(</span><span style="color: #DD0000">'staticProperty'</span><span style="color: #007700">, </span><span style="color: #DD0000">'foo'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">Foo</span><span style="color: #007700">::</span><span style="color: #9876AA">$staticProperty</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$foo </span><span style="color: #007700">= new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$reflectionClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'property'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">setValue</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">, </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">property</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$reflectionProperty </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflectionClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'privateProperty'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$reflectionProperty</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setAccessible</span><span style="color: #007700">(</span><span style="color: #9876AA">true</span><span style="color: #007700">); </span><span style="color: #FF8000">// only required prior to PHP 8.1.0<br /></span><span style="color: #9876AA">$reflectionProperty</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setValue</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">, </span><span style="color: #DD0000">'foobar'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflectionProperty</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getValue</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(3) &quot;foo&quot;<br>string(3) &quot;bar&quot;<br>string(6) &quot;foobar&quot;<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.setvalue-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getValue()} - Gets value</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setAccessible()} - Set property accessibility</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::setStaticPropertyValue()} - 设置静态属性的值</span></li>   </ul>  </span> </div> </div>
     * @return void No value is returned.*/
    public function setValue(
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $objectOrValue,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value
    ): void {}

/**
*<div id="reflectionproperty.ispublic" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isPublic</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isPublic</span> &mdash; <span class="dc-title">Checks if property is public</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.ispublic-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isPublic</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks whether the property is public.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.ispublic-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.ispublic-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the property is public, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.ispublic-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isProtected()} - Checks if property is protected</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPrivate()} - Checks if property is private</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isReadOnly()} - 检查属性是否为只读</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isStatic()} - Checks if property is static</span></li>   </ul>  </span> </div></div>
     * @return bool Return {@see true} if the property is public, {@see false} otherwise.*/
    public function isPublic(): bool {}

/**
*<div id="reflectionproperty.isprivate" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isPrivate</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isPrivate</span> &mdash; <span class="dc-title">Checks if property is private</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.isprivate-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isPrivate</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks whether the property is private.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.isprivate-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.isprivate-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the property is private, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.isprivate-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPublic()} - Checks if property is public</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isProtected()} - Checks if property is protected</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isReadOnly()} - 检查属性是否为只读</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isStatic()} - Checks if property is static</span></li>   </ul>  </span> </div></div>
     * @return bool Return {@see true} if the property is private, {@see false} otherwise.*/
    public function isPrivate(): bool {}

/**
*<div id="reflectionproperty.isprotected" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isProtected</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isProtected</span> &mdash; <span class="dc-title">Checks if property is protected</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.isprotected-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isProtected</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks whether the property is protected.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.isprotected-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.isprotected-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the property is protected, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.isprotected-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPublic()} - Checks if property is public</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPrivate()} - Checks if property is private</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isReadOnly()} - 检查属性是否为只读</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isStatic()} - Checks if property is static</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} if the property is protected, {@see false} otherwise.*/
    public function isProtected(): bool {}

/**
*<div id="reflectionproperty.isstatic" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isStatic</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isStatic</span> &mdash; <span class="dc-title">Checks if property is static</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.isstatic-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isStatic</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks whether the property is static.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.isstatic-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.isstatic-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the property is static, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.isstatic-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPublic()} - Checks if property is public</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isProtected()} - Checks if property is protected</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPrivate()} - Checks if property is private</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isReadOnly()} - 检查属性是否为只读</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} if the property is static, {@see false} otherwise.*/
    public function isStatic(): bool {}

/**
*<div id="reflectionproperty.isdefault" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isDefault</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isDefault</span> &mdash; <span class="dc-title">Checks if property is a default property</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.isdefault-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isDefault</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks whether the property was declared at compile-time, or whether the   property was dynamically declared at run-time.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.isdefault-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.isdefault-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the property was declared at compile-time, or <strong><span>false</span></strong> if   it was created at run-time.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionproperty.isdefault-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isDefault()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">$bar</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$o </span><span style="color: #007700">= new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$o</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bar </span><span style="color: #007700">= </span><span style="color: #9876AA">42</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">baz </span><span style="color: #007700">= </span><span style="color: #9876AA">42</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$ro </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$o</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">isDefault</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'baz'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">isDefault</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.isdefault-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getValue()} - Gets value</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} if the property was declared at*/
    public function isDefault(): bool {}

/**
*<div id="reflectionproperty.getmodifiers" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getModifiers</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getModifiers</span> &mdash; <span class="dc-title">Gets the property modifiers</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.getmodifiers-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getModifiers</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Gets the modifiers.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.getmodifiers-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.getmodifiers-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   A numeric representation of the modifiers.   The actual meaning of these modifiers are described under   <a href="https://www.php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.modifiers" class="link">predefined constants</a>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.getmodifiers-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPrivate()} - Checks if property is private</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Reflection::getModifierNames()} - 获取修饰符的名称</span></li>   </ul>  </span> </div></div>
     * @return int A numeric representation of the modifiers.*/
    public function getModifiers(): int {}

/**
*<div id="reflectionproperty.getdeclaringclass" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getDeclaringClass</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getDeclaringClass</span> &mdash; <span class="dc-title">Gets declaring class</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.getdeclaringclass-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getDeclaringClass</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></div>  <p class="para rdfs-comment">   Gets the declaring class.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.getdeclaringclass-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.getdeclaringclass-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   A <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionclass.php" class="classname">ReflectionClass</a></span> object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.getdeclaringclass-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getName()} - Gets property name</span></li>   </ul>  </span> </div></div>
     * @return ReflectionClass A {@see ReflectionClass} object.*/
    public function getDeclaringClass(): ReflectionClass {}

/**
*<div id="reflectionproperty.getdoccomment" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getDocComment</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getDocComment</span> &mdash; <span class="dc-title">Gets the property doc comment</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.getdoccomment-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getDocComment</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Gets the doc comment for a property.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.getdoccomment-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.getdoccomment-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The doc comment if it exists, otherwise <strong><span>false</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionproperty.getdoccomment-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getDocComment()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Str<br /></span><span style="color: #007700">{<br />    </span><span style="color: #FF8000">//*<br />     * @var int  The length of the string<br />     <br />    </span><span style="color: #007700">public </span><span style="color: #9876AA">$length </span><span style="color: #007700">= </span><span style="color: #9876AA">5</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$prop </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'Str'</span><span style="color: #007700">, </span><span style="color: #DD0000">'length'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$prop</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDocComment</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(53) &quot;//*<br>     * @var int  The length of the string<br>     &quot;<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 Multiple property declarations</strong></p>    <div class="example-contents"><p>     If multiple property declarations are preceeded by a single doc comment,     the doc comment refers to the first property only.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo<br /></span><span style="color: #007700">{<br />    </span><span style="color: #FF8000">//* @var string <br />    </span><span style="color: #007700">public </span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Foo'</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperties</span><span style="color: #007700">() as </span><span style="color: #9876AA">$property</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$property</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">() . </span><span style="color: #DD0000">': ' </span><span style="color: #007700">. </span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">$property</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDocComment</span><span style="color: #007700">(), </span><span style="color: #9876AA">true</span><span style="color: #007700">) . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>a: &#039;//* @var string &#039;<br>b: false<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.getdoccomment-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getModifiers()} - Gets the property modifiers</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getName()} - Gets property name</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getValue()} - Gets value</span></li>   </ul>  </span> </div></div>
     * @return string|false The doc comment if it exists, otherwise {@see false}*/
    public function getDocComment(): string|false {}

/**
*<div id="reflectionproperty.setaccessible" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::setAccessible</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::setAccessible</span> &mdash; <span class="dc-title">Set property accessibility</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.setaccessible-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::setAccessible</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$accessible</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Enables access to a protected or private property via the <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getValue()}</span> and   <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setValue()}</span> methods.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    As of PHP 8.1.0, calling this method has no effect; all properties are accessible by default.   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.setaccessible-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">accessible</span></dt>     <dd>      <p class="para">       <strong><span>true</span></strong> to allow accessibility, or <strong><span>false</span></strong>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.setaccessible-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionproperty.setaccessible-examples"> <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 Simple Class definition</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">MyClass<br /></span><span style="color: #007700">{<br />    private </span><span style="color: #9876AA">$foo </span><span style="color: #007700">= </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$property </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">"MyClass"</span><span style="color: #007700">, </span><span style="color: #DD0000">"foo"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$property</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setAccessible</span><span style="color: #007700">(</span><span style="color: #9876AA">true</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$obj </span><span style="color: #007700">= new </span><span style="color: #9876AA">MyClass</span><span style="color: #007700">();<br />echo </span><span style="color: #9876AA">$property</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getValue</span><span style="color: #007700">(</span><span style="color: #9876AA">$obj</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$obj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">foo</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bar<br>Fatal error: Uncaught Error: Cannot access private property MyClass::$foo in /in/WJqTv:12<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.setaccessible-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPrivate()} - Checks if property is private</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isProtected()} - Checks if property is protected</span></li>   </ul>  </span> </div></div>
     * @return void No value is returned.*/
    public function setAccessible(#[LanguageLevelTypeAware(['8.0' => 'bool'], default: '')] $accessible): void {}

/**
*<div id="reflectionproperty.setaccessible" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::setAccessible</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::setAccessible</span> &mdash; <span class="dc-title">Set property accessibility</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.setaccessible-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::setAccessible</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$accessible</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Enables access to a protected or private property via the <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getValue()}</span> and   <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setValue()}</span> methods.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    As of PHP 8.1.0, calling this method has no effect; all properties are accessible by default.   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.setaccessible-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">accessible</span></dt>     <dd>      <p class="para">       <strong><span>true</span></strong> to allow accessibility, or <strong><span>false</span></strong>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.setaccessible-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionproperty.setaccessible-examples"> <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 Simple Class definition</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">MyClass<br /></span><span style="color: #007700">{<br />    private </span><span style="color: #9876AA">$foo </span><span style="color: #007700">= </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$property </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">"MyClass"</span><span style="color: #007700">, </span><span style="color: #DD0000">"foo"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$property</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setAccessible</span><span style="color: #007700">(</span><span style="color: #9876AA">true</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$obj </span><span style="color: #007700">= new </span><span style="color: #9876AA">MyClass</span><span style="color: #007700">();<br />echo </span><span style="color: #9876AA">$property</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getValue</span><span style="color: #007700">(</span><span style="color: #9876AA">$obj</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$obj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">foo</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bar<br>Fatal error: Uncaught Error: Cannot access private property MyClass::$foo in /in/WJqTv:12<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.setaccessible-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPrivate()} - Checks if property is private</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isProtected()} - Checks if property is protected</span></li>   </ul>  </span> </div></div>
     * @return void No value is returned.*/
    public function setAccessible(bool $accessible): void {}

    /**
     * Gets property type
     *
     * @link https://php.net/manual/en/reflectionproperty.gettype.php
     * @return ReflectionNamedType|ReflectionUnionType|null Returns a {@see ReflectionType} if the
     * property has a type, and {@see null} otherwise.
     * @since 7.4
     */
    #[Pure]
    #[LanguageLevelTypeAware(
        [
            '8.0' => 'ReflectionNamedType|ReflectionUnionType|null',
            '8.1' => 'ReflectionNamedType|ReflectionUnionType|ReflectionIntersectionType|null'
        ],
        default: 'ReflectionNamedType|null'
    )]
/**
*<div id="reflectionproperty.gettype" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getType</h1>  <p class="verinfo">(PHP 7 &gt;= 7.4.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getType</span> &mdash; <span class="dc-title">Gets a property&#039;s type</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.gettype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getType</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectiontype.php" class="type ReflectionType" style="color:#EAB766">ReflectionType</a></span></span></div>  <p class="para rdfs-comment">   Gets the associated type of a property.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.gettype-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.gettype-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectiontype.php" class="classname">ReflectionType</a></span> if the property has a type,   and <strong><span>null</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionproperty.gettype-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getType()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">User<br /></span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">string $name</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$rp </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'User'</span><span style="color: #007700">, </span><span style="color: #DD0000">'name'</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$rp</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getType</span><span style="color: #007700">()-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.gettype-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::hasType()} - Checks if property has a type</span></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isInitialized()} - Checks whether a property is initialized</span></li>  </ul> </div></div>
*/
    public function getType(): ?ReflectionType {}

/**
*<div id="reflectionproperty.hastype" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::hasType</h1>  <p class="verinfo">(PHP 7 &gt;= 7.4.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::hasType</span> &mdash; <span class="dc-title">Checks if property has a type</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.hastype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::hasType</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the property has a type associated with it.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.hastype-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.hastype-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if a type is specified, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionproperty.hastype-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::hasType()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">User<br /></span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">string $name</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$rp </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'User'</span><span style="color: #007700">, </span><span style="color: #DD0000">'name'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rp</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasType</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.hastype-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getType()} - Gets a property's type</span></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isInitialized()} - Checks whether a property is initialized</span></li>  </ul> </div></div>
     * @return bool Returns {@see true} if a type is specified, {@see false} otherwise.*/
    public function hasType(): bool {}

/**
*<div id="reflectionproperty.isinitialized" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isInitialized</h1>  <p class="verinfo">(PHP 7 &gt;= 7.4.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isInitialized</span> &mdash; <span class="dc-title">Checks whether a property is initialized</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.isinitialized-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isInitialized</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$object</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks whether a property is initialized.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.isinitialized-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <span>      If the property is non-static an object must be provided to fetch the      property from.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.isinitialized-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>false</span></strong> for typed properties prior to initialization,   and for properties that have been explicitly <span class="function">{@link unset()}</span>.   For all other properties <strong><span>true</span></strong> will be returned.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-reflectionproperty.isinitialized-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span> if the property is inaccessible.   You can make a protected or private property accessible using   <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setAccessible()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-reflectionproperty.isinitialized-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">object</span> is nullable now.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionproperty.isinitialized-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isInitialized()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">User<br /></span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">string $name</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$rp </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'User'</span><span style="color: #007700">, </span><span style="color: #DD0000">'name'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$user </span><span style="color: #007700">= new </span><span style="color: #9876AA">User</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rp</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isInitialized</span><span style="color: #007700">(</span><span style="color: #9876AA">$user</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$user</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">name </span><span style="color: #007700">= </span><span style="color: #DD0000">'Nikita'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rp</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isInitialized</span><span style="color: #007700">(</span><span style="color: #9876AA">$user</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>bool(true)<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.isinitialized-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::hasType()} - Checks if property has a type</span></li>  </ul> </div></div>
     * @return bool Returns {@see false} for typed properties prior to initialization, and for properties that have*/
    public function isInitialized(?object $object = null): bool {}

/**
*<div id="reflectionproperty.ispromoted" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isPromoted</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isPromoted</span> &mdash; <span class="dc-title">Checks if property is promoted</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.ispromoted-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isPromoted</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks whether the property is <a href="https://www.php.net/manual/zh/language.oop5.decon.php#language.oop5.decon.constructor.promotion" class="link">promoted</a>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.ispromoted-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.ispromoted-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the property is promoted, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionproperty.ispromoted-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isPromoted()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">$baz</span><span style="color: #007700">;<br /><br />    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(public </span><span style="color: #9876AA">$bar</span><span style="color: #007700">) {}<br />}<br /><br /></span><span style="color: #9876AA">$o </span><span style="color: #007700">= new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">(</span><span style="color: #9876AA">42</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$o</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">baz </span><span style="color: #007700">= </span><span style="color: #9876AA">42</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$ro </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$o</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">isPromoted</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'baz'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">isPromoted</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.ispromoted-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isDefault()} - Checks if property is a default property</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isInitialized()} - Checks whether a property is initialized</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getValue()} - Gets value</span></li>   </ul>  </span> </div></div>
     * @return bool Returns {@see true} if the property was promoted or {@see false} instead.*/
    public function isPromoted(): bool {}

    /**
     * Clone
     *
     * @link https://php.net/manual/en/reflectionproperty.clone.php
     * @return void
     */
    #[PhpStormStubsElementAvailable(from: "5.4", to: "8.0")]
    final private function __clone(): void {}

    /**
     * Clone
     *
     * @link https://php.net/manual/en/reflectionproperty.clone.php
     * @return void
     */
    #[PhpStormStubsElementAvailable(from: "8.1")]
    private function __clone(): void {}

/**
*<div id="reflectionproperty.hasdefaultvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::hasDefaultValue</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::hasDefaultValue</span> &mdash; <span class="dc-title">Checks if property has a default value declared</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.hasdefaultvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::hasDefaultValue</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks whether the property was declared with a default value, including an implicit   <strong><span>null</span></strong> default value. Only returns <strong><span>false</span></strong> for typed properties without default value (or   dynamic properties).  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.hasdefaultvalue-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.hasdefaultvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   If the property has any default value (including <strong><span>null</span></strong>) <strong><span>true</span></strong> is returned;   if the property is typed without a default value declared or is a dynamic property, <strong><span>false</span></strong> is returned.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionproperty.hasdefaultvalue-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id=""> <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::hasDefaultValue()</strong></span> example</strong></p> <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">$bar</span><span style="color: #007700">;<br />    public ?</span><span style="color: #9876AA">int $baz</span><span style="color: #007700">;<br />    public ?</span><span style="color: #9876AA">int $foo </span><span style="color: #007700">= </span><span style="color: #9876AA">null</span><span style="color: #007700">;<br />    public </span><span style="color: #9876AA">int $boing</span><span style="color: #007700">;<br />    <br />    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">()<br />    {<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ping </span><span style="color: #007700">= </span><span style="color: #DD0000">''</span><span style="color: #007700">;<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$ro </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionObject</span><span style="color: #007700">(new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">hasDefaultValue</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'baz'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">hasDefaultValue</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">hasDefaultValue</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'boing'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">hasDefaultValue</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'ping'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">hasDefaultValue</span><span style="color: #007700">()); </span><span style="color: #FF8000">// Dynamic property<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'pong'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">hasDefaultValue</span><span style="color: #007700">()); </span><span style="color: #FF8000">// Not defined property<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div> </div> <div class="example-contents"><p>以上示例会输出：</p></div> <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(false)<br>bool(true)<br>bool(false)<br>bool(false)<br><br>Fatal error: Uncaught ReflectionException: Property Foo::$pong does not exist in example.php<br></span></div> </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.hasdefaultvalue-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist"> <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getDefaultValue()} - Returns the default value declared for a property</span></li>   </ul>  </span> </div></div>
     * @return bool*/
    public function hasDefaultValue(): bool {}

/**
*<div id="reflectionproperty.getdefaultvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getDefaultValue</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getDefaultValue</span> &mdash; <span class="dc-title">Returns the default value declared for a property</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.getdefaultvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getDefaultValue</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Gets the implicit or explicitly declared default value for a property.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.getdefaultvalue-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.getdefaultvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The default value if the property has any default value (including <strong><span>null</span></strong>).   If there is no default value, then <strong><span>null</span></strong> is returned. It is not possible to differentiate   between a <strong><span>null</span></strong> default value and an unitialized typed property.   Use <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::hasDefaultValue()}</span> to detect the difference.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionproperty.getdefaultvalue-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id=""> <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getDefaultValue()</strong></span> example</strong></p> <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />    public ?</span><span style="color: #9876AA">int $baz</span><span style="color: #007700">;<br />    public </span><span style="color: #9876AA">int $boing </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(public </span><span style="color: #9876AA">string $bak </span><span style="color: #007700">= </span><span style="color: #DD0000">"default"</span><span style="color: #007700">) { }<br />}<br /><br /></span><span style="color: #9876AA">$ro </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">Foo</span><span style="color: #007700">::class);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">getDefaultValue</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'baz'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">getDefaultValue</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'boing'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">getDefaultValue</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'bak'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">getDefaultValue</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div> </div> <div class="example-contents"><p>以上示例会输出：</p></div> <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(1)<br>NULL<br>int(0)<br>NULL<br></span></div> </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.getdefaultvalue-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::hasDefaultValue()} - Checks if property has a default value declared</span></li>   </ul>  </span> </div></div>
     * @return mixed*/
    public function getDefaultValue(): mixed {}

/**
*<div id="reflectionproperty.getattributes" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getAttributes</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getAttributes</span> &mdash; <span class="dc-title">Gets Attributes</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.getattributes-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getAttributes</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$name</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Returns all attributes declared on this class property as an array of <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.reflectionattribute.php" class="type ReflectionAttribute" style="color:#EAB766">ReflectionAttribute</a></span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.getattributes-parameters">  <h3 class="title">参数</h3>  <dl>   <dt><span class="parameter" style="color:#3A95FF">name</span></dt><dd> <span>  过滤结果，匹配此类名，仅包含 <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionattribute.php" class="classname">ReflectionAttribute</a></span> 实例的属性。 </span></dd>   <dt><span class="parameter" style="color:#3A95FF">flags</span></dt><dd> <p class="para">  如果提供了 <span class="parameter" style="color:#3A95FF">name</span>，则用于确定如何过滤结果的 flag。 </p> <p class="para">  默认值为 <span>0</span>，这将导致返回的结果只属于类 <span class="parameter" style="color:#3A95FF">name</span> 的属性。 </p> <p class="para">  唯一可用的其他选项是使用 <strong><span>ReflectionAttribute::IS_INSTANCEOF</span></strong>，它将改为使用 <span>instanceof</span> 进行过滤。 </p></dd>  </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.getattributes-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Array of attributes, as a <span class="classname"><a href="https://www.php.net/manual/zh/class.reflectionattribute.php" class="classname">ReflectionAttribute</a></span> object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-reflectionproperty.getattributes-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Basic usage</strong></p>    <div class="example-contents">     <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br />}<br /><br />#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Red </span><span style="color: #007700">{<br />}<br /><br />class </span><span style="color: #9876AA">Basket </span><span style="color: #007700">{<br />    #[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br />    #[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br />    public </span><span style="color: #9876AA">string $apple </span><span style="color: #007700">= </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$property </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'Basket'</span><span style="color: #007700">, </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">$property</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">$attributes</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">     <div class="cdata"><span>Array<br>(<br>    [0] =&gt; Fruit<br>    [1] =&gt; Red<br>)<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 Filtering results by class name</strong></p>    <div class="example-contents">     <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br />}<br /><br />#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Red </span><span style="color: #007700">{<br />}<br /><br />class </span><span style="color: #9876AA">Basket </span><span style="color: #007700">{<br />    #[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br />    #[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br />    public </span><span style="color: #9876AA">string $apple </span><span style="color: #007700">= </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$property </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'Basket'</span><span style="color: #007700">, </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">$property</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">(</span><span style="color: #DD0000">'Fruit'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">$attributes</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">     <div class="cdata"><span>Array<br>(<br>    [0] =&gt; Fruit<br>)<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3 Filtering results by class name, with inheritance</strong></p>    <div class="example-contents">     <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">interface </span><span style="color: #9876AA">Color </span><span style="color: #007700">{<br />}<br /><br />#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br />}<br /><br />#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br />class </span><span style="color: #9876AA">Red </span><span style="color: #007700">implements </span><span style="color: #9876AA">Color </span><span style="color: #007700">{<br />}<br /><br />class </span><span style="color: #9876AA">Basket </span><span style="color: #007700">{<br />    #[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br />    #[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br />    public </span><span style="color: #9876AA">string $apple </span><span style="color: #007700">= </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$property </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'Basket'</span><span style="color: #007700">, </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">$property</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">(</span><span style="color: #DD0000">'Color'</span><span style="color: #007700">, </span><span style="color: #9876AA">ReflectionAttribute</span><span style="color: #007700">::</span><span style="color: #9876AA">IS_INSTANCEOF</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">$attributes</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">     <div class="cdata"><span>Array<br>(<br>    [0] =&gt; Red<br>)<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.getattributes-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getAttributes()} - 获取所有属性</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::getAttributes()} - Gets Attributes</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getAttributes()} - Gets Attributes</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::getAttributes()} - Gets Attributes</span></li>   </ul>  </span> </div></div>
     * @return ReflectionAttribute<T>[]*/
    public function getAttributes(?string $name = null, int $flags = 0): array {}

/**
*<div id="reflectionproperty.isreadonly" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isReadOnly</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isReadOnly</span> &mdash; <span class="dc-title">检查属性是否为只读</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-reflectionproperty.isreadonly-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isReadOnly</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查<a href="https://www.php.net/manual/zh/language.oop5.properties.php#language.oop5.properties.readonly-properties" class="link">属性是否为只读</a>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-reflectionproperty.isreadonly-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-reflectionproperty.isreadonly-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果属性是只读的，则返回 <strong><span>true</span></strong>，否则为 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-reflectionproperty.isreadonly-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPublic()} - Checks if property is public</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isProtected()} - Checks if property is protected</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPrivate()} - Checks if property is private</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isStatic()} - Checks if property is static</span></li>   </ul>  </span> </div></div>
     * @return bool*/
    public function isReadOnly(): bool {}
}
