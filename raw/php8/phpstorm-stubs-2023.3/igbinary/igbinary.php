<?php

// Start of igbinary v.1.0.0

/**
*<div id="function.igbinary-serialize" class="refentry"> <div class="refnamediv">  <h1 class="refname">igbinary_serialize</h1>  <p class="verinfo">(PECL igbinary &gt;= 1.1.1)</p><p class="refpurpose"><span class="refname">igbinary_serialize</span> &mdash; <span class="dc-title">Generates a compact, storable binary representation of a value</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.igbinary-serialize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>igbinary_serialize</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Generates a storable representation of a value.  </p>  <p class="para">   This is useful for storing or passing PHP values around without   losing their type and structure.  </p>  <p class="para">   To make the serialized string into a PHP value again,   <span class="function">{@link igbinary_unserialize()}</span> can be used.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.igbinary-serialize-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">value</span></dt>    <dd>      <span>       The value to be serialized. <span class="function"><strong style="color:#CC7832">igbinary_serialize()</strong></span>       handles all types, except the <span class="type" style="color:#EAB766">resource</span>-type and some <span class="type" style="color:#EAB766">object</span>s (see note below).       Even <span class="type" style="color:#EAB766">array</span>s that contain references to itself can be processed by <span class="function"><strong style="color:#CC7832">igbinary_serialize()</strong></span>.       Circular references inside the <span class="type" style="color:#EAB766">array</span> or <span class="type" style="color:#EAB766">object</span> that is being serializend will also be stored.       Any other reference will be lost.      </span>      <p class="para">       When serializing objects, igbinary will attempt to call the member functions       <a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.serialize" class="link">__serialize()</a> or       <a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.sleep" class="link">__sleep()</a> prior to serialization.       This is to allow the object to do any last minute clean-up, etc. prior       to being serialized. Likewise, when the object is restored using       <span class="function">{@link igbinary_unserialize()}</span> the <a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.unserialize" class="link">__unserialize()</a> or       <a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.wakeup" class="link">__wakeup()</a> member function is called.      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        Private members of <span class="type" style="color:#EAB766">object</span>s have the class name prepended to the member        name; protected members have a <span>&#039;*&#039;</span> prepended to the member name.        These prepended values have null bytes on either side.       </p>      </p></blockquote>     </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.igbinary-serialize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a string containing a byte-stream representation of   <span class="parameter" style="color:#3A95FF">value</span> that can be stored anywhere.  </p>  <p class="para">   Note that this is a binary string which can include any byte value, and needs   to be stored and handled as such. For example,   <span class="function"><strong style="color:#CC7832">igbinary_serialize()</strong></span> output should generally be stored in a <span>BLOB</span>   field in a database, rather than a <span>CHAR</span> or <span>TEXT</span> field.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.igbinary-serialize-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">igbinary_serialize()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$ser </span><span style="color: #007700">= </span><span style="color: #9876AA">igbinary_serialize</span><span style="color: #007700">([</span><span style="color: #DD0000">'test'</span><span style="color: #007700">, </span><span style="color: #DD0000">'test'</span><span style="color: #007700">]);<br />echo </span><span style="color: #9876AA">urlencode</span><span style="color: #007700">(</span><span style="color: #9876AA">$ser</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">igbinary_unserialize</span><span style="color: #007700">(</span><span style="color: #9876AA">$ser</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>%00%00%00%02%14%02%06%00%11%04test%06%01%0E%00<br>array (<br>  0 =&gt; &#039;test&#039;,<br>  1 =&gt; &#039;test&#039;,<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.igbinary-serialize-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    Note that many built-in PHP objects cannot be serialized. However, those with    this ability either implement the <span class="interfacename"><a href="https://www.php.net/manual/zh/class.serializable.php" class="interfacename">Serializable</a></span> interface or the    magic <a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.serialize" class="link">__serialize()</a>/<a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.unserialize" class="link">__unserialize()</a>    or <a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.sleep" class="link">__sleep()</a>/<a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.wakeup" class="link">__wakeup()</a> methods. If an    internal class does not fulfill any of those requirements, it cannot reliably be    serialized with any serializer.   </p>   <p class="para">    There are some historical exceptions to the above rule, where some internal objects    could be serialized without implementing the interface or exposing the methods.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.igbinary-serialize-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link serialize()} - 生成值的可存储表示</span></li>    <li class="member"><span class="function">{@link igbinary_unserialize()} - Creates a PHP value from a stored representation from igbinary_serialize</span></li>    <li class="member"><span class="function">{@link var_export()} - 输出或返回变量的可解析字符串表示</span></li>    <li class="member"><span class="function">{@link json_encode()} - 对变量进行 JSON 编码</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.serialization.php" class="link">Serializing Objects</a></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.sleep" class="link">__sleep()</a></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.wakeup" class="link">__wakeup()</a></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.serialize" class="link">__serialize()</a></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.unserialize" class="link">__unserialize()</a></li>   </ul>  </span> </div></div>
 * @return string|null Returns a string containing a byte-stream representation of value that can be stored anywhere or <b>NULL</b> on error.*/
function igbinary_serialize($value) {}

/**
*<div id="function.igbinary-unserialize" class="refentry"> <div class="refnamediv">  <h1 class="refname">igbinary_unserialize</h1>  <p class="verinfo">(PECL igbinary &gt;= 1.1.1)</p><p class="refpurpose"><span class="refname">igbinary_unserialize</span> &mdash; <span class="dc-title">   Creates a PHP value from a stored representation from <span class="function">{@link igbinary_serialize()}</span>  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.igbinary-unserialize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>igbinary_unserialize</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$str</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="simpara">   <span class="function"><strong style="color:#CC7832">igbinary_unserialize()</strong></span> takes a single serialized variable from   <span class="function">{@link igbinary_serialize()}</span> and converts it back into a PHP value.  </p>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    Untrusted user input must not be passed to <span class="function"><strong style="color:#CC7832">igbinary_unserialize()</strong></span>.    Unserialization can result in code being loaded and executed due to object    instantiation and autoloading, and a malicious user may be able to exploit    this. Instead a safe, standard data interchange format such as JSON (via    <span class="function">{@link json_decode()}</span> and <span class="function">{@link json_encode()}</span>) should be used,    if serialized data needs to be passed to a client.   </p>   <p class="para">    If there is the need to unserialize externally-stored serialized data,    <span class="function">{@link hash_hmac()}</span> can be used for data validation.    It is important to ensure that nobody has tampered with the data.   </p>  </div>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    The igbinary serialization format does not provide a way to distinguish between different reference    groups for the same value. All PHP references to a given value as treated as part    of the same reference group when unserialized,    even if they were parts of difference reference groups when serialized.   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.igbinary-unserialize-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">str</span></dt>    <dd>     <span>      The serialized string generated by <span class="function">{@link igbinary_serialize()}</span>.     </span>     <p class="para">      If the value being unserialized is an <span class="type" style="color:#EAB766">object</span>, after successfully      reconstructing the object igbinary will automatically attempt to call the      <a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.unserialize" class="link">__unserialize()</a> or      <a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.wakeup" class="link">__wakeup()</a> methods (if one exists).     </p>     <p class="para">      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <strong>unserialize_callback_func directive</strong><br />       <p class="para">        It is possible to set a callback function which will be called,        if an undefined class should be instantiated during unserializing.        (to prevent getting an incomplete <span class="type" style="color:#EAB766">object</span> <span>__PHP_Incomplete_Class</span>.)        The <var class="filename">php.ini</var>, <span class="function">{@link ini_set()}</span> or <var class="filename">.htaccess</var> can be used        to define <a href="https://www.php.net/manual/zh/var.configuration.php#ini.unserialize-callback-func" class="link">unserialize_callback_func</a>.        Everytime an undefined class should be instantiated, it will be called.        To disable this feature this setting should be emptied.       </p>      </p></blockquote>     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.igbinary-unserialize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The converted value is returned, and can be a <span class="type" style="color:#EAB766">bool</span>,   <span class="type" style="color:#EAB766">int</span>, <span class="type" style="color:#EAB766">float</span>, <span class="type" style="color:#EAB766">string</span>,   <span class="type" style="color:#EAB766">array</span>, <span class="type" style="color:#EAB766">object</span>, or <span class="type" style="color:#EAB766">null</span>.  </p>  <p class="para">   In case the passed string is not unserializeable, <strong><span>false</span></strong> is returned and   <strong><span>E_NOTICE</span></strong> or <strong><span>E_WARNING</span></strong> is issued.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.igbinary-unserialize-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Objects may throw <span class="classname"><a href="https://www.php.net/manual/zh/class.throwable.php" class="classname">Throwable</a></span>s in their unserialization handlers.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.igbinary-unserialize-notes">  <h3 class="title">注释</h3>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    <strong><span>null</span></strong> or <strong><span>false</span></strong> is returned both in the case of an error and if unserializing    the serialized <strong><span>null</span></strong> or <strong><span>false</span></strong> value. It is possible to catch this special case by    comparing <span class="parameter" style="color:#3A95FF">str</span> with    <span>igbinary_serialize(null)</span> or <span>igbinary_serialize(false)</span>    or by catching the issued <strong><span>E_NOTICE</span></strong>.   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.igbinary-unserialize-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link unserialize()} - 从已存储的表示中创建 PHP 的值</span></li>    <li class="member"><span class="function">{@link json_encode()} - 对变量进行 JSON 编码</span></li>    <li class="member"><span class="function">{@link json_decode()} - 对 JSON 格式的字符串进行解码</span></li>    <li class="member"><span class="function">{@link hash_hmac()} - 使用 HMAC 方法生成带有密钥的散列值</span></li>    <li class="member"><span class="function">{@link igbinary_serialize()} - Generates a compact, storable binary representation of a value</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.autoload.php" class="link">Autoloading Classes</a></li>    <li class="member"><a href="https://www.php.net/manual/zh/var.configuration.php#ini.unserialize-callback-func" class="link">unserialize_callback_func</a></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.wakeup" class="link">__wakeup()</a></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.serialize" class="link">__serialize()</a></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.unserialize" class="link">__unserialize()</a></li>   </ul>  </span> </div></div>
 * @return mixed|false The converted value is returned, and can be a boolean, integer, float, string, array, object or <b>false</b> by empty string input.*/
function igbinary_unserialize($str) {}

// End of igbinary v.1.0.0
