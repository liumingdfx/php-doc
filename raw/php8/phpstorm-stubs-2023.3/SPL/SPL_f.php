<?php

// Start of SPL v.0.2
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Pure;

/**
*<div id="function.spl-classes" class="refentry"> <div class="refnamediv">  <h1 class="refname">spl_classes</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">spl_classes</span> &mdash; <span class="dc-title">返回所有可用的SPL类</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.spl-classes-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>spl_classes</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   本函数返回当前所有可用的 SPL 类的数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.spl-classes-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.spl-classes-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an <span class="type" style="color:#EAB766">array</span> containing the currently available SPL classes.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.spl-classes-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">spl_classes()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">spl_classes</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [ArrayObject] =&gt; ArrayObject<br>    [ArrayIterator] =&gt; ArrayIterator<br>    [CachingIterator] =&gt; CachingIterator<br>    [RecursiveCachingIterator] =&gt; RecursiveCachingIterator<br>    [DirectoryIterator] =&gt; DirectoryIterator<br>    [FilterIterator] =&gt; FilterIterator<br>    [LimitIterator] =&gt; LimitIterator<br>    [ParentIterator] =&gt; ParentIterator<br>    [RecursiveDirectoryIterator] =&gt; RecursiveDirectoryIterator<br>    [RecursiveIterator] =&gt; RecursiveIterator<br>    [RecursiveIteratorIterator] =&gt; RecursiveIteratorIterator<br>    [SeekableIterator] =&gt; SeekableIterator<br>    [SimpleXMLIterator] =&gt; SimpleXMLIterator<br>)<br></span></div>    </div>   </div>  </span> </div></div>
 * @return array*/
function spl_classes(): array {}

/**
*<div id="function.spl-autoload" class="refentry"> <div class="refnamediv">  <h1 class="refname">spl_autoload</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">spl_autoload</span> &mdash; <span class="dc-title">__autoload()函数的默认实现</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.spl-autoload-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>spl_autoload</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$file_extensions</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   本函数用于 <span class="function">{@link __autoload()}</span> 的默认实现。如果未指定任何参数调用   <span class="function">{@link spl_autoload_register()}</span>，则此函数在 <span class="function">{@link __autoload()}</span>   调用时会自动使用此函数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.spl-autoload-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       已实例化的类（和命名空间）的名字。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">file_extensions</span></dt>     <dd>      <p class="para">      在默认情况下，本函数先将类名转换成小写，再在小写的类名后加上 .inc      或 .php 的扩展名作为文件名，然后在所有的包含路径（include paths）中检查是否存在该文件。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.spl-autoload-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.spl-autoload-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   当未找到类或者没有注册其它自动加载器时抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.logicexception.php" class="classname">LogicException</a></span>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.spl-autoload-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        <span class="parameter" style="color:#3A95FF">file_extensions</span> 现在允许为 null。       </td>      </tr>     </tbody>       </table>  </span> </div> </div>
 * @return void*/
function spl_autoload(string $class, ?string $file_extensions): void {}

/**
*<div id="function.spl-autoload-extensions" class="refentry"> <div class="refnamediv">  <h1 class="refname">spl_autoload_extensions</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">spl_autoload_extensions</span> &mdash; <span class="dc-title">注册并返回 spl_autoload 的默认文件扩展名</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.spl-autoload-extensions-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>spl_autoload_extensions</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$file_extensions</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   本函数可以修改和检查 <span class="function">{@link __autoload()}</span> 后备函数   <span class="function">{@link spl_autoload()}</span> 将使用的扩展名。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <span class="simpara">      在定义的文件扩展名之间不应该有空格。    </span>  </p></blockquote>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.spl-autoload-extensions-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">file_extensions</span></dt>     <dd>      <p class="para">       如果为 <strong><span>null</span></strong>，只返回当前扩展名列表，每个扩展名用逗号分隔。要修改文件扩展名列表，只需在单个字符串中，用逗号分割的新文件扩展名列表调用此函数即可。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.spl-autoload-extensions-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   逗号分隔的 <span class="function">{@link spl_autoload()}</span> 的默认文件扩展名。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.spl-autoload-extensions-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        <span class="parameter" style="color:#3A95FF">file_extensions</span> 现在可以为 null。       </td>      </tr>     </tbody>       </table>  </span> </div><br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.spl-autoload-extensions-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">spl_autoload_extensions()</strong></span> 示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />spl_autoload_extensions</span><span style="color: #007700">(</span><span style="color: #DD0000">".php,.inc"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>  </div> </div></div>
 * @return string A comma delimited list of default file extensions for*/
function spl_autoload_extensions(?string $file_extensions): string {}

/**
*<div id="function.spl-autoload-register" class="refentry"> <div class="refnamediv"> <h1 class="refname">spl_autoload_register</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">spl_autoload_register</span> &mdash; <span class="dc-title">注册指定的函数作为 __autoload 的实现</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.spl-autoload-register-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>spl_autoload_register</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$callback</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$throw</span><span class="initializer"> = <strong><span>true</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$prepend</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   使用 spl 提供的 __autoload 队列注册函数。如果队列尚未激活，则将激活。  </p>  <p class="para">   如果在代码中已经实现了 <span class="function">{@link __autoload()}</span> 函数，必须显式注册到   <span class="function">{@link __autoload()}</span> 队列中。因为 <span class="function"><strong style="color:#CC7832">spl_autoload_register()</strong></span>   通过 <span class="function">{@link spl_autoload()}</span> 或 <span class="function">{@link spl_autoload_call()}</span>   有效替换 <span class="function">{@link __autoload()}</span> 函数的存储缓存。  </p>  <p class="para">   如果需要多个自动加载函数，则 <span class="function"><strong style="color:#CC7832">spl_autoload_register()</strong></span>    允许这么做。它有效的创建了自动加载函数队列，并按定义的顺序进行遍历。相比之下，<span class="function">{@link __autoload()}</span> 只能定义一次。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.spl-autoload-register-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para">       正在注册的自动装载函数。如果为 <strong><span>null</span></strong>，则将注册 <span class="function">{@link spl_autoload()}</span> 的默认实现。      </p>      <div class="methodsynopsis dc-description">       <span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>      <p class="para">       <span class="parameter" style="color:#3A95FF">class</span> 将是不包含开头反斜线的完整标识符。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">throw</span></dt>     <dd>      <p class="para">       此参数指定 <span class="function"><strong style="color:#CC7832">spl_autoload_register()</strong></span> 在无法注册       <span class="parameter" style="color:#3A95FF">callback</span> 时是否应抛出异常。      </p>      <div class="warning"><strong class="warning">警告</strong>        <p class="para">          从 PHP 8.0.0 开始，将忽略该参数，如果设置为 <strong><span>false</span></strong>，则会发出 notice。<span class="function"><strong style="color:#CC7832">spl_autoload_register()</strong></span>          现在总是会在无效参数上抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.typeerror.php" class="classname">TypeError</a></span>。        </p>      </div>     </dd>             <dt><span class="parameter" style="color:#3A95FF">prepend</span></dt>     <dd>      <p class="para">       如果是 true，<span class="function"><strong style="color:#CC7832">spl_autoload_register()</strong></span> 会添加函数到队列之首，而不是队列尾部。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.spl-autoload-register-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.spl-autoload-register-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        <span class="parameter" style="color:#3A95FF">callback</span> 现在可以为 null。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.spl-autoload-register-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">spl_autoload_register()</strong></span> 作为 <span class="function">{@link __autoload()}</span> 函数的替代</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">// function __autoload($class) {<br />//     include 'classes/' . $class . '.class.php';<br />// }<br /><br /></span><span style="color: #007700">function </span><span style="color: #9876AA">my_autoloader</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">) {<br />    include </span><span style="color: #DD0000">'classes/' </span><span style="color: #007700">. </span><span style="color: #9876AA">$class </span><span style="color: #007700">. </span><span style="color: #DD0000">'.class.php'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">spl_autoload_register</span><span style="color: #007700">(</span><span style="color: #DD0000">'my_autoloader'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 或者可以使用匿名函数<br /></span><span style="color: #9876AA">spl_autoload_register</span><span style="color: #007700">(function (</span><span style="color: #9876AA">$class</span><span style="color: #007700">) {<br />    include </span><span style="color: #DD0000">'classes/' </span><span style="color: #007700">. </span><span style="color: #9876AA">$class </span><span style="color: #007700">. </span><span style="color: #DD0000">'.class.php'</span><span style="color: #007700">;<br />});<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #2 类未能加载的 <span class="function"><strong style="color:#CC7832">spl_autoload_register()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">namespace </span><span style="color: #9876AA">Foobar</span><span style="color: #007700">;<br /><br />class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br />    static public function </span><span style="color: #9876AA">test</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">) {<br />        print </span><span style="color: #DD0000">'[['</span><span style="color: #007700">. </span><span style="color: #9876AA">$class </span><span style="color: #007700">.</span><span style="color: #DD0000">']]'</span><span style="color: #007700">;<br />    }<br />}<br /><br /></span><span style="color: #9876AA">spl_autoload_register</span><span style="color: #007700">(</span><span style="color: #9876AA">__NAMESPACE__ </span><span style="color: #007700">.</span><span style="color: #DD0000">'\Foo::test'</span><span style="color: #007700">);<br /><br />new </span><span style="color: #9876AA">InexistentClass</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>[[Foobar\InexistentClass]]<br>Fatal error: Class &#039;Foobar\InexistentClass&#039; not found in ...<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #3 提供的标识符将不包含开头的反斜线</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />spl_autoload_register</span><span style="color: #007700">(static function (</span><span style="color: #9876AA">$class</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$class</span><span style="color: #007700">);<br />});<br /><br /></span><span style="color: #9876AA">class_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'RelativeName'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">class_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'RelativeName\\WithNamespace'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">class_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'\\AbsoluteName'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">class_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'\\AbsoluteName\\WithNamespace'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(12) &quot;RelativeName&quot;<br>string(26) &quot;RelativeName\WithNamespace&quot;<br>string(12) &quot;AbsoluteName&quot;<br>string(26) &quot;AbsoluteName\WithNamespace&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.spl-autoload-register-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link __autoload()} - 尝试加载未定义的类</span></li>   </ul>  </span> </div></div>
 * @return bool true on success or false on failure.*/
function spl_autoload_register(?callable $callback, bool $throw = true, bool $prepend = false): bool {}

/**
*<div id="function.spl-autoload-unregister" class="refentry"> <div class="refnamediv">  <h1 class="refname">spl_autoload_unregister</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">spl_autoload_unregister</span> &mdash; <span class="dc-title">注销已实现的 __autoload() 函数</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.spl-autoload-unregister-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>spl_autoload_unregister</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   从自动装载函数队列中移除函数。如果该函数队列处于激活状态且在指定函数移除后为空，则函数队列将会失效。  </p>  <p class="para">   如果该函数导致自动装载函数队列失效，之前存在的 __autoload 函数也不会重新激活。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.spl-autoload-unregister-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para">       要注销的自动装载函数。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.spl-autoload-unregister-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
 * @return bool true on success or false on failure.*/
function spl_autoload_unregister(callable $callback): bool {}

/**
*<div id="function.spl-autoload-functions" class="refentry"> <div class="refnamediv">  <h1 class="refname">spl_autoload_functions</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">spl_autoload_functions</span> &mdash; <span class="dc-title">返回所有已注册的 __autoload() 函数</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.spl-autoload-functions-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>spl_autoload_functions</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   获取所有已注册的 __autoload() 函数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.spl-autoload-functions-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.spl-autoload-functions-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   包含所有已注册的 __autoload 函数的 <span class="type" style="color:#EAB766">array</span>。如果没有已注册的函数或者自动加载队列未激活，则返回值将是空数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.spl-autoload-functions-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       将更新返回值始终是 <span class="type" style="color:#EAB766">array</span>；之前如果自动加载队列未激活，此函数返回 <strong><span>false</span></strong>。      </td>     </tr>    </tbody>     </table> </div></div>
 * @return array|false An array of all registered __autoload functions.*/
function spl_autoload_functions() {}

/**
*<div id="function.spl-autoload-call" class="refentry"> <div class="refnamediv">  <h1 class="refname">spl_autoload_call</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">spl_autoload_call</span> &mdash; <span class="dc-title">尝试所有已注册的 __autoload() 函数来装载请求类</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.spl-autoload-call-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>spl_autoload_call</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   该函数可用于使用已注册的 __autoload 函数手动搜索类或接口。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.spl-autoload-call-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       搜索的类名。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.spl-autoload-call-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
 * @return void*/
function spl_autoload_call(string $class): void {}

/**
*<div id="function.class-parents" class="refentry"> <div class="refnamediv">  <h1 class="refname">class_parents</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">class_parents</span> &mdash; <span class="dc-title">   返回指定类的父类  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.class-parents-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>class_parents</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$object_or_class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$autoload</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   本函数返回包含了指定 <span class="parameter" style="color:#3A95FF">object_or_class</span> 父类名的数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.class-parents-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object_or_class</span></dt>     <dd>      <p class="para">       对象（类实例）或字符串（类名称）。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">autoload</span></dt>     <dd>      <p class="para">       如果尚未加载，是否<a href="https://www.php.net/manual/zh/language.oop5.autoload.php" class="link">自动加载</a>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.class-parents-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时为数组，当指定类不存在则为 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.class-parents-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">class_parents()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">class </span><span style="color: #9876AA">foo </span><span style="color: #007700">{ }<br />class </span><span style="color: #9876AA">bar </span><span style="color: #007700">extends </span><span style="color: #9876AA">foo </span><span style="color: #007700">{}<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">class_parents</span><span style="color: #007700">(new </span><span style="color: #9876AA">bar</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// 可以指定参数为字符串<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">class_parents</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">spl_autoload_register</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 使用自动加载去加载“not_loaded”类<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">class_parents</span><span style="color: #007700">(</span><span style="color: #DD0000">'not_loaded'</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [foo] =&gt; foo<br>)<br>Array<br>(<br>    [foo] =&gt; foo<br>)<br>Array<br>(<br>    [parent_of_not_loaded] =&gt; parent_of_not_loaded<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.class-parents-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    检测对象是否 implements interface，应该使用  <a href="https://www.php.net/manual/zh/language.operators.type.php" class="link"><span>instanceof</span></a> 或 <span class="function">{@link is_a()}</span> 函数。   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.class-parents-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link class_implements()} - 返回指定的类或接口实现的所有接口</span></li>    <li class="member"><span class="function">{@link is_a()} - 检查对象是否属于一个给定的类型或子类型。</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.operators.type.php" class="link"><span>instanceof</span></a></li>   </ul>  </span> </div></div>
 * @return string[]|false An array on success, or false on error.*/
function class_parents($object_or_class, bool $autoload = true): array|false {}

/**
*<div id="function.class-implements" class="refentry"> <div class="refnamediv">  <h1 class="refname">class_implements</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">class_implements</span> &mdash; <span class="dc-title">   返回指定的类或接口实现的所有接口  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.class-implements-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>class_implements</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$object_or_class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$autoload</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   本函数返回数组，包含指定 <span class="parameter" style="color:#3A95FF">object_or_class</span> 及其父类所实现的所有接口的名称。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.class-implements-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object_or_class</span></dt>     <dd>      <p class="para">        对象（类实例）或字符串（类名或接口名）。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">autoload</span></dt>     <dd>      <p class="para">       如果尚未加载，是否<a href="https://www.php.net/manual/zh/language.oop5.autoload.php" class="link">自动加载</a>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.class-implements-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时为数组，当指定类不存在则为 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.class-implements-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">class_implements()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">interface </span><span style="color: #9876AA">foo </span><span style="color: #007700">{ }<br />class </span><span style="color: #9876AA">bar </span><span style="color: #007700">implements </span><span style="color: #9876AA">foo </span><span style="color: #007700">{}<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">class_implements</span><span style="color: #007700">(new </span><span style="color: #9876AA">bar</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// 可以指定参数为字符串<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">class_implements</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">spl_autoload_register</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// 使用自动加载去加载“not_loaded”类<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">class_implements</span><span style="color: #007700">(</span><span style="color: #DD0000">'not_loaded'</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [foo] =&gt; foo<br>)<br>Array<br>(<br>    [foo] =&gt; foo<br>)<br>Array<br>(<br>    [interface_of_not_loaded] =&gt; interface_of_not_loaded<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.class-implements-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    检测对象是否 implements interface，应该使用  <a href="https://www.php.net/manual/zh/language.operators.type.php" class="link"><span>instanceof</span></a> 或 <span class="function">{@link is_a()}</span> 函数。   </span>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.class-implements-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link class_parents()} - 返回指定类的父类</span></li>    <li class="member"><span class="function">{@link get_declared_interfaces()} - 返回一个数组包含所有已声明的接口</span></li>    <li class="member"><span class="function">{@link is_a()} - 检查对象是否属于一个给定的类型或子类型。</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.operators.type.php" class="link"><span>instanceof</span></a></li>   </ul>  </span> </div></div>
 * @return string[]|false An array on success, or false on error.*/
function class_implements($object_or_class, bool $autoload = true): array|false {}

/**
*<div id="function.spl-object-hash" class="refentry"> <div class="refnamediv">  <h1 class="refname">spl_object_hash</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">spl_object_hash</span> &mdash; <span class="dc-title">   返回指定对象的 hash id  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.spl-object-hash-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>spl_object_hash</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   本函数为对象返回唯一标识符。只要对象没有销毁，这个 id   可用作保存对象的散列键，或者用于标识对象。一旦对象销毁，它的散列值可能会被其它对象重用。此行为类似为   <span class="function">{@link spl_object_id()}</span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.spl-object-hash-parameters">   <h3 class="title">参数</h3>   <span>    <dl>           <dt><span class="parameter" style="color:#3A95FF">object</span></dt>      <dd>       <p class="para">        任何对象。        </p>      </dd>         </dl>   </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.spl-object-hash-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   字符串，对于当前存在的每个对象都是唯一的，且对同一个对象始终相同。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.spl-object-hash-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">spl_object_hash()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$id </span><span style="color: #007700">= </span><span style="color: #9876AA">spl_object_hash</span><span style="color: #007700">(</span><span style="color: #9876AA">$object</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$storage</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">] = </span><span style="color: #9876AA">$object</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.spl-object-hash-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    当对象销毁后，它的散列值可能会被其它对象重用。   </p>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    对象散列应该使用 <span>===</span> 和 <span>!==</span> 标识符比较，因为返回的散列可能是<a href="https://www.php.net/manual/zh/language.types.numeric-strings.php" class="link">数字字符串</a>。例如：<span>0000000000000e600000000000000000</span>。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.spl-object-hash-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link spl_object_id()} - Return the integer object handle for given object</span></li>   </ul>  </span> </div></div>
 * @return string A string that is unique for each object and is always the same for*/
function spl_object_hash(object $object): string {}

/**
*<div id="function.iterator-to-array" class="refentry"> <div class="refnamediv">  <h1 class="refname">iterator_to_array</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">iterator_to_array</span> &mdash; <span class="dc-title">复制迭代器中的元素到数组</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.iterator-to-array-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>iterator_to_array</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.traversable.php" class="type Traversable" style="color:#EAB766">Traversable</a></span>|<span class="type" style="color:#EAB766">array</span></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$preserve_keys</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   复制迭代器中的元素到数组。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.iterator-to-array-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">iterator</span></dt>     <dd>      <p class="para">       被复制的迭代器。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">preserve_keys</span></dt>     <dd>      <p class="para">       是否使用迭代器元素键作为索引。      </p>      <p class="para">       如果键是 <span class="type" style="color:#EAB766">array</span> 或 <span class="type" style="color:#EAB766">object</span>，将会生成警告。<strong><span>null</span></strong>       键将会转换为空字符串，<span class="type" style="color:#EAB766">float</span> 键将截断为对应的 <span class="type" style="color:#EAB766">int</span>，<span class="type" style="color:#EAB766">resource</span>       键将生成警告并转换为它们的资源 ID，<span class="type" style="color:#EAB766">bool</span> 键将转换为整数。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        如果此参数未设置或为 <strong><span>true</span></strong>，则覆盖重复的键。指定键的最后一个值将在返回的 <span class="type" style="color:#EAB766">array</span>        中。设置此参数为 <strong><span>false</span></strong> 以获得任何情况下的所有值。       </p>      </p></blockquote>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.iterator-to-array-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   一个数组，包含迭代器中的元素。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.iterator-to-array-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.2.0</td>      <td>       <span class="parameter" style="color:#3A95FF">iterator</span> 的类型从 <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.traversable.php" class="type Traversable" style="color:#EAB766">Traversable</a></span>       扩展为 <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.traversable.php" class="type Traversable" style="color:#EAB766">Traversable</a></span>|<span class="type" style="color:#EAB766">array</span></span>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.iterator-to-array-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">iterator_to_array()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'recipe'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'pancakes'</span><span style="color: #007700">, </span><span style="color: #DD0000">'egg'</span><span style="color: #007700">, </span><span style="color: #DD0000">'milk'</span><span style="color: #007700">, </span><span style="color: #DD0000">'flour'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">iterator_to_array</span><span style="color: #007700">(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">iterator_to_array</span><span style="color: #007700">(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">, </span><span style="color: #9876AA">false</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(4) {<br>  [&quot;recipe&quot;]=&gt;<br>  string(8) &quot;pancakes&quot;<br>  [0]=&gt;<br>  string(3) &quot;egg&quot;<br>  [1]=&gt;<br>  string(4) &quot;milk&quot;<br>  [2]=&gt;<br>  string(5) &quot;flour&quot;<br>}<br>array(4) {<br>  [0]=&gt;<br>  string(8) &quot;pancakes&quot;<br>  [1]=&gt;<br>  string(3) &quot;egg&quot;<br>  [2]=&gt;<br>  string(4) &quot;milk&quot;<br>  [3]=&gt;<br>  string(5) &quot;flour&quot;<br>}<br></span></div>     </div>   </div>  </span> </div></div>
 * @return array An array containing the elements of the iterator.*/
function iterator_to_array(#[LanguageLevelTypeAware(['8.2' => 'Traversable|array'], default: 'Traversable')] $iterator, bool $preserve_keys = true): array {}

/**
*<div id="function.iterator-count" class="refentry"> <div class="refnamediv">  <h1 class="refname">iterator_count</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">iterator_count</span> &mdash; <span class="dc-title">计算迭代器中元素的个数</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.iterator-count-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>iterator_count</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.traversable.php" class="type Traversable" style="color:#EAB766">Traversable</a></span>|<span class="type" style="color:#EAB766">array</span></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   对迭代器中的元素计数。<span class="function"><strong style="color:#CC7832">iterator_count()</strong></span> 不能保留   <span class="parameter" style="color:#3A95FF">iterator</span> 的当前位置。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.iterator-count-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">iterator</span></dt>     <dd>      <p class="para">       要计数的迭代器。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.iterator-count-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="parameter" style="color:#3A95FF">iterator</span> 中的元素个数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.iterator-count-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.2.0</td>      <td>       <span class="parameter" style="color:#3A95FF">iterator</span> 的类型从 <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.traversable.php" class="type Traversable" style="color:#EAB766">Traversable</a></span>       扩展为 <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.traversable.php" class="type Traversable" style="color:#EAB766">Traversable</a></span>|<span class="type" style="color:#EAB766">array</span></span>。      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.iterator-count-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">iterator_count()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'recipe'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'pancakes'</span><span style="color: #007700">, </span><span style="color: #DD0000">'egg'</span><span style="color: #007700">, </span><span style="color: #DD0000">'milk'</span><span style="color: #007700">, </span><span style="color: #DD0000">'flour'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">iterator_count</span><span style="color: #007700">(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(4)<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #2 <span class="function"><strong style="color:#CC7832">iterator_count()</strong></span> 修改位置</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">([</span><span style="color: #DD0000">'one'</span><span style="color: #007700">, </span><span style="color: #DD0000">'two'</span><span style="color: #007700">, </span><span style="color: #DD0000">'three'</span><span style="color: #007700">]);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">iterator_count</span><span style="color: #007700">(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(3) &quot;one&quot;<br>int(3)<br>NULL<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #3 <span class="function"><strong style="color:#CC7832">iterator_count()</strong></span> 在 <a href="https://www.php.net/manual/zh/control-structures.foreach.php" class="link">foreach</a> 中循环</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">([</span><span style="color: #DD0000">'one'</span><span style="color: #007700">, </span><span style="color: #DD0000">'two'</span><span style="color: #007700">, </span><span style="color: #DD0000">'three'</span><span style="color: #007700">]);<br />foreach (</span><span style="color: #9876AA">$iterator </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$value</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000">: </span><span style="color: #9876AA">$value</span><span style="color: #DD0000"> ("</span><span style="color: #007700">, </span><span style="color: #9876AA">iterator_count</span><span style="color: #007700">(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">), </span><span style="color: #DD0000">")\n"</span><span style="color: #007700">;<br />}</span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>0: one (3)<br></span></div>    </div>   </div>  </span> </div></div>
 * @return int The number of elements in iterator.*/
function iterator_count(#[LanguageLevelTypeAware(['8.2' => 'Traversable|array'], default: 'Traversable')] $iterator): int {}

/**
*<div id="function.iterator-apply" class="refentry"> <div class="refnamediv">  <h1 class="refname">iterator_apply</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">iterator_apply</span> &mdash; <span class="dc-title">为迭代器中每个元素调用函数</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.iterator-apply-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>iterator_apply</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.traversable.php" class="type Traversable" style="color:#EAB766">Traversable</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$args</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   循环迭代每个元素时调用函数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.iterator-apply-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">iterator</span></dt>     <dd>      <p class="para">       要迭代的迭代对象。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para">       每个元素要调用的回调函数。此函数仅接收指定的 <span class="parameter" style="color:#3A95FF">args</span>，因此默认为 null。如果       <span>count($args) === 3</span>，则回调函数是三个参数。       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:         <span class="simpara">         为了遍历 <span class="parameter" style="color:#3A95FF">iterator</span>，此函数必须返回 <strong><span>true</span></strong>。        </span>       </p></blockquote>      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">args</span></dt>     <dd>      <p class="para">       参数 <span class="type" style="color:#EAB766">array</span>；<span class="parameter" style="color:#3A95FF">args</span>       的每个元素都会作为单独的参数传递给回调 <span class="parameter" style="color:#3A95FF">callback</span>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.iterator-apply-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回已迭代的元素个数。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.iterator-apply-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">iterator_apply()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">print_caps</span><span style="color: #007700">(</span><span style="color: #9876AA">Iterator $iterator</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">strtoupper</span><span style="color: #007700">(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">()) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />    return </span><span style="color: #9876AA">TRUE</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$it </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(array(</span><span style="color: #DD0000">"Apples"</span><span style="color: #007700">, </span><span style="color: #DD0000">"Bananas"</span><span style="color: #007700">, </span><span style="color: #DD0000">"Cherries"</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">iterator_apply</span><span style="color: #007700">(</span><span style="color: #9876AA">$it</span><span style="color: #007700">, </span><span style="color: #DD0000">"print_caps"</span><span style="color: #007700">, array(</span><span style="color: #9876AA">$it</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>APPLES<br>BANANAS<br>CHERRIES<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.iterator-apply-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link array_walk()} - 使用用户自定义函数对数组中的每个元素做回调处理</span></li>   </ul>  </span> </div></div>
 * @return int the iteration count.*/
function iterator_apply(Traversable $iterator, callable $callback, ?array $args): int {}

// End of SPL v.0.2

/**
*<div id="function.class-uses" class="refentry"> <div class="refnamediv">  <h1 class="refname">class_uses</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">class_uses</span> &mdash; <span class="dc-title">   Return the traits used by the given class  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.class-uses-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>class_uses</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">object</span>|<span class="type" style="color:#EAB766">string</span></span> <span class="parameter" style="color:#3A95FF">$object_or_class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$autoload</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   This function returns an array with the names of the traits that the   given <span class="parameter" style="color:#3A95FF">object_or_class</span> uses. This does however not include   any traits used by a parent class.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.class-uses-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object_or_class</span></dt>     <dd>      <p class="para">       An object (class instance) or a string (class name).      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">autoload</span></dt>     <dd>      <p class="para">       Whether to <a href="https://www.php.net/manual/zh/language.oop5.autoload.php" class="link">autoload</a>       if not already loaded.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.class-uses-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   An array on success, or <strong><span>false</span></strong> when the given class doesn&#039;t exist.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.class-uses-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">class_uses()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">trait </span><span style="color: #9876AA">foo </span><span style="color: #007700">{ }<br />class </span><span style="color: #9876AA">bar </span><span style="color: #007700">{<br />  use </span><span style="color: #9876AA">foo</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">class_uses</span><span style="color: #007700">(new </span><span style="color: #9876AA">bar</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">class_uses</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">spl_autoload_register</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// use autoloading to load the 'not_loaded' class<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">class_uses</span><span style="color: #007700">(</span><span style="color: #DD0000">'not_loaded'</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [foo] =&gt; foo<br>)<br>Array<br>(<br>    [foo] =&gt; foo<br>)<br>Array<br>(<br>    [trait_of_not_loaded] =&gt; trait_of_not_loaded<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.class-uses-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link class_parents()} - 返回指定类的父类</span></li>    <li class="member"><span class="function">{@link get_declared_traits()} - 返回所有已定义的 traits 的数组</span></li>   </ul>  </span> </div></div>
 * @return string[]|false An array on success, or false on error.*/
function class_uses($object_or_class, bool $autoload = true): array|false {}

/**
*<div id="function.spl-object-id" class="refentry"> <div class="refnamediv">  <h1 class="refname">spl_object_id</h1>  <p class="verinfo">(PHP 7 &gt;= 7.2.0, PHP 8)</p><p class="refpurpose"><span class="refname">spl_object_id</span> &mdash; <span class="dc-title">   Return the integer object handle for given object  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.spl-object-id-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>spl_object_id</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   This function returns a unique identifier for the object. The object id is   unique for the lifetime of the object. Once the object is destroyed, its id   may be reused for other objects. This behavior is similar to   <span class="function">{@link spl_object_hash()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.spl-object-id-parameters">   <h3 class="title">参数</h3>   <span>    <dl>           <dt><span class="parameter" style="color:#3A95FF">object</span></dt>      <dd>       <p class="para">        Any object.        </p>      </dd>         </dl>   </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.spl-object-id-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   An integer identifier that is unique for each currently existing object and   is always the same for each object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.spl-object-id-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 A <span class="function"><strong style="color:#CC7832">spl_object_id()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$id </span><span style="color: #007700">= </span><span style="color: #9876AA">spl_object_id</span><span style="color: #007700">(</span><span style="color: #9876AA">$object</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$storage</span><span style="color: #007700">[</span><span style="color: #9876AA">$id</span><span style="color: #007700">] = </span><span style="color: #9876AA">$object</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.spl-object-id-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    When an object is destroyed, its id may be reused for other objects.   </p>  </p></blockquote> </div> </div>
 * @return int*/
function spl_object_id(object $object): int {}
