<?php

// Start of SPL v.0.2
use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\TentativeType;

/**
*<div id="class.splfileinfo" class="reference"> <h1 class="title">The SplFileInfo class</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p>  <div class="section" id="splfileinfo.intro">   <h2 class="title">简介</h2>   <p class="para">    The SplFileInfo class offers a high-level object-oriented interface to    information for an individual file.   </p>  </div>  <div class="section" id="splfileinfo.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">SplFileInfo</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.stringable.php" class="interfacename">Stringable</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.getatime.php" class="methodname" style="color:#CC7832">getATime</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.getbasename.php" class="methodname" style="color:#CC7832">getBasename</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$suffix</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.getctime.php" class="methodname" style="color:#CC7832">getCTime</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.getextension.php" class="methodname" style="color:#CC7832">getExtension</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.getfileinfo.php" class="methodname" style="color:#CC7832">getFileInfo</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.getfilename.php" class="methodname" style="color:#CC7832">getFilename</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.getgroup.php" class="methodname" style="color:#CC7832">getGroup</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.getinode.php" class="methodname" style="color:#CC7832">getInode</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.getlinktarget.php" class="methodname" style="color:#CC7832">getLinkTarget</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.getmtime.php" class="methodname" style="color:#CC7832">getMTime</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.getowner.php" class="methodname" style="color:#CC7832">getOwner</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.getpath.php" class="methodname" style="color:#CC7832">getPath</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.getpathinfo.php" class="methodname" style="color:#CC7832">getPathInfo</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.getpathname.php" class="methodname" style="color:#CC7832">getPathname</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.getperms.php" class="methodname" style="color:#CC7832">getPerms</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.getrealpath.php" class="methodname" style="color:#CC7832">getRealPath</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.getsize.php" class="methodname" style="color:#CC7832">getSize</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.gettype.php" class="methodname" style="color:#CC7832">getType</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.isdir.php" class="methodname" style="color:#CC7832">isDir</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.isexecutable.php" class="methodname" style="color:#CC7832">isExecutable</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.isfile.php" class="methodname" style="color:#CC7832">isFile</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.islink.php" class="methodname" style="color:#CC7832">isLink</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.isreadable.php" class="methodname" style="color:#CC7832">isReadable</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.iswritable.php" class="methodname" style="color:#CC7832">isWritable</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.openfile.php" class="methodname" style="color:#CC7832">openFile</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = &quot;r&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$useIncludePath</span><span class="initializer"> = <strong><span>false</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$context</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="type SplFileObject" style="color:#EAB766">SplFileObject</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.setfileclass.php" class="methodname" style="color:#CC7832">setFileClass</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileObject::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.setinfoclass.php" class="methodname" style="color:#CC7832">setInfoClass</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileInfo::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileinfo.tostring.php" class="methodname" style="color:#CC7832">__toString</a></span>(): <span class="type" style="color:#EAB766">string</span></div>   }</div>  </div>  <div class="section">   <h2 class="title">更新日志</h2>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        <span class="classname"><strong class="classname">SplFileInfo</strong></span> implements        <span class="interfacename"><a href="https://www.php.net/manual/zh/class.stringable.php" class="interfacename">Stringable</a></span> now.       </td>      </tr>     </tbody>       </table>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link SplFileInfo::__construct} — 构造新的 SplFileInfo 对象</li><li>{@link SplFileInfo::getATime} — Gets last access time of the file</li><li>{@link SplFileInfo::getBasename} — Gets the base name of the file</li><li>{@link SplFileInfo::getCTime} — 获取文件 inode 修改时间</li><li>{@link SplFileInfo::getExtension} — Gets the file extension</li><li>{@link SplFileInfo::getFileInfo} — Gets an SplFileInfo object for the file</li><li>{@link SplFileInfo::getFilename} — Gets the filename</li><li>{@link SplFileInfo::getGroup} — Gets the file group</li><li>{@link SplFileInfo::getInode} — Gets the inode for the file</li><li>{@link SplFileInfo::getLinkTarget} — Gets the target of a link</li><li>{@link SplFileInfo::getMTime} — Gets the last modified time</li><li>{@link SplFileInfo::getOwner} — Gets the owner of the file</li><li>{@link SplFileInfo::getPath} — Gets the path without filename</li><li>{@link SplFileInfo::getPathInfo} — Gets an SplFileInfo object for the path</li><li>{@link SplFileInfo::getPathname} — Gets the path to the file</li><li>{@link SplFileInfo::getPerms} — Gets file permissions</li><li>{@link SplFileInfo::getRealPath} — Gets absolute path to file</li><li>{@link SplFileInfo::getSize} — Gets file size</li><li>{@link SplFileInfo::getType} — Gets file type</li><li>{@link SplFileInfo::isDir} — Tells if the file is a directory</li><li>{@link SplFileInfo::isExecutable} — Tells if the file is executable</li><li>{@link SplFileInfo::isFile} — Tells if the object references a regular file</li><li>{@link SplFileInfo::isLink} — Tells if the file is a link</li><li>{@link SplFileInfo::isReadable} — Tells if file is readable</li><li>{@link SplFileInfo::isWritable} — Tells if the entry is writable</li><li>{@link SplFileInfo::openFile} — Gets an SplFileObject object for the file</li><li>{@link SplFileInfo::setFileClass} — Sets the class used with SplFileInfo::openFile</li><li>{@link SplFileInfo::setInfoClass} — Sets the class used with SplFileInfo::getFileInfo and SplFileInfo::getPathInfo</li><li>{@link SplFileInfo::__toString} — Returns the path to the file as a string</li></ul></div>
*/
class SplFileInfo implements Stringable
{
    /**
     * Construct a new SplFileInfo object
     * @link https://php.net/manual/en/splfileinfo.construct.php
     * @param string $filename
     * @since 5.1.2
     */
    public function __construct(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $filename) {}

/**
*<div id="splfileinfo.getpath" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::getPath</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::getPath</span> &mdash; <span class="dc-title">Gets the path without filename</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.getpath-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getPath</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Returns the path to the file, omitting the filename and any trailing slash.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.getpath-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.getpath-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the path to the file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.getpath-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplFileInfo::getPath()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/usr/bin/php'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getPath</span><span style="color: #007700">());<br /><br /><br /></span><span style="color: #9876AA">$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/usr/'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getPath</span><span style="color: #007700">());</span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(8) &quot;/usr/bin&quot;<br>string(4) &quot;/usr&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.getpath-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::getRealPath()} - Gets absolute path to file</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFilename()} - Gets the filename</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathInfo()} - Gets an SplFileInfo object for the path</span></li>   </ul>  </span> </div></div>
     * @return string the path to the file.*/
    public function getPath(): string {}

/**
*<div id="splfileinfo.getfilename" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::getFilename</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::getFilename</span> &mdash; <span class="dc-title">Gets the filename</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.getfilename-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getFilename</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Gets the filename without any path information.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.getfilename-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.getfilename-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The filename.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.getfilename-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplFileInfo::getFilename()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo.txt'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFilename</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/foo.txt'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFilename</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'http://www.php.net/'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFilename</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'http://www.php.net/svn.php'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFilename</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(7) &quot;foo.txt&quot;<br>string(7) &quot;foo.txt&quot;<br>string(0) &quot;&quot;<br>string(7) &quot;svn.php&quot; <br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.getfilename-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::getBasename()} - Gets the base name of the file</span></li>   </ul>  </span> </div></div>
     * @return string The filename.*/
    public function getFilename(): string {}

/**
*<div id="splfileinfo.getextension" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::getExtension</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.6, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::getExtension</span> &mdash; <span class="dc-title">Gets the file extension</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.getextension-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getExtension</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">    Retrieves the file extension.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.getextension-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.getextension-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    Returns a <span class="type" style="color:#EAB766">string</span> containing the file extension, or an    empty <span class="type" style="color:#EAB766">string</span> if the file has no extension.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.getextension-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplFileInfo::getExtension()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo.txt'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getExtension</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'photo.jpg'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getExtension</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'something.tar.gz'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getExtension</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(3) &quot;txt&quot;<br>string(3) &quot;jpg&quot;<br>string(2) &quot;gz&quot;<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-splfileinfo.getextension-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    Another way of getting the extension is to use the     <span class="function">{@link pathinfo()}</span> function.   </p>   <div class="example" id="">    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$extension </span><span style="color: #007700">= </span><span style="color: #9876AA">pathinfo</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFilename</span><span style="color: #007700">(), </span><span style="color: #9876AA">PATHINFO_EXTENSION</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </p></blockquote> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.getextension-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFilename()} - Gets the filename</span></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::getBasename()} - Gets the base name of the file</span></li>   <li class="member"><span class="function">{@link pathinfo()} - 返回文件路径的信息</span></li>  </ul> </div></div>
     * @return string a string containing the file extension, or an*/
    public function getExtension(): string {}

/**
*<div id="splfileinfo.getbasename" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::getBasename</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::getBasename</span> &mdash; <span class="dc-title">Gets the base name of the file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.getbasename-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getBasename</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$suffix</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   This method returns the base name of the file, directory, or link without   path info.  </p>  <div class="caution"><strong class="caution">警告</strong>   <p class="para">    <span class="function"><strong style="color:#CC7832">SplFileInfo::getBasename()</strong></span> is locale aware, so for it to see the     correct basename with multibyte character paths, the matching locale must     be set using the <span class="function">{@link setlocale()}</span> function.   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.getbasename-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">suffix</span></dt>     <dd>      <p class="para">       Optional suffix to omit from the base name returned.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.getbasename-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the base name without path information.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.getbasename-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplFileInfo::getBasename()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'file.txt'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getBasename</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/file.txt'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getBasename</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/file.txt'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getBasename</span><span style="color: #007700">(</span><span style="color: #DD0000">'.txt'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(8) &quot;file.txt&quot;<br>string(8) &quot;file.txt&quot;<br>string(4) &quot;file&quot; <br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.getbasename-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFilename()} - Gets the filename</span></li>   </ul>  </span> </div></div>
     * @return string the base name without path information.*/
    public function getBasename(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $suffix = ''): string {}

/**
*<div id="splfileinfo.getpathname" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::getPathname</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::getPathname</span> &mdash; <span class="dc-title">Gets the path to the file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.getpathname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getPathname</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Returns the path to the file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.getpathname-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.getpathname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The path to the file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.getpathname-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplFileInfo::getPathname()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/usr/bin/php'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getPathname</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(12) &quot;/usr/bin/php&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.getpathname-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::getRealPath()} - Gets absolute path to file</span></li>   </ul>  </span> </div></div>
     * @return string The path to the file.*/
    public function getPathname(): string {}

/**
*<div id="splfileinfo.getperms" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::getPerms</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::getPerms</span> &mdash; <span class="dc-title">Gets file permissions</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.getperms-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getPerms</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Gets the file permissions for the file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.getperms-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.getperms-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the file permissions on success, or <strong><span>false</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.getperms-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplFileInfo::getPerms()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/tmp'</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">'%o'</span><span style="color: #007700">, </span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getPerms</span><span style="color: #007700">()), -</span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">'%o'</span><span style="color: #007700">, </span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getPerms</span><span style="color: #007700">()), -</span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>1777<br>0644<br></span></div>    </div>   </div>  </span> </div></div>
     * @return int|false The file permissions on success, or <b>FALSE</b> on failure.*/
    public function getPerms(): int|false {}

/**
*<div id="splfileinfo.getinode" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::getInode</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::getInode</span> &mdash; <span class="dc-title">Gets the inode for the file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.getinode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getInode</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Gets the inode number for the filesystem object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.getinode-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.getinode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the inode number for the filesystem object on success, or <strong><span>false</span></strong> on failure.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splfileinfo.getinode-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> on error.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.getinode-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link fileinode()} - 取得文件的 inode</span></li>   </ul>  </span> </div></div>
     * @return int|false The inode number for the filesystem object on success, or <b>FALSE</b> on failure.*/
    public function getInode(): int|false {}

/**
*<div id="splfileinfo.getsize" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::getSize</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::getSize</span> &mdash; <span class="dc-title">Gets file size</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.getsize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getSize</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Returns the filesize in bytes for the file referenced.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.getsize-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.getsize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The filesize in bytes on success, or <strong><span>false</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splfileinfo.getsize-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   A <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> will be thrown if the file does not exist or an error occurs.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.getsize-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getSize()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'example.jpg'</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$fileinfo</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFilename</span><span style="color: #007700">() . </span><span style="color: #DD0000">" " </span><span style="color: #007700">. </span><span style="color: #9876AA">$fileinfo</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getSize</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>example.jpg 15385<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.getsize-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link filesize()} - 取得文件大小</span></li>   </ul>  </span> </div></div>
     * @return int|false The filesize in bytes on success, or <b>FALSE</b> on failure.*/
    public function getSize(): int|false {}

/**
*<div id="splfileinfo.getowner" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::getOwner</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::getOwner</span> &mdash; <span class="dc-title">Gets the owner of the file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.getowner-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getOwner</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Gets the file owner. The owner ID is returned in numerical format.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.getowner-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.getowner-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The owner id in numerical format on success, or <strong><span>false</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splfileinfo.getowner-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> on error.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.getowner-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getOwner()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'example.jpg'</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFilename</span><span style="color: #007700">() . </span><span style="color: #DD0000">' belongs to owner id ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getOwner</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">posix_getpwuid</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getOwner</span><span style="color: #007700">()));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>example.jpg belongs to user id 501<br>Array<br>(<br>    [name] =&gt; tom<br>    [passwd] =&gt; x<br>    [uid] =&gt; 501<br>    [gid] =&gt; 42<br>    [gecos] =&gt; Tom Cat<br>    [dir] =&gt; /home/tom<br>    [shell] =&gt; /bin/bash<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.getowner-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link posix_getpwuid()} - Return info about a user by user id</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::getGroup()} - Gets the file group</span></li>   </ul>  </span> </div></div>
     * @return int|false The owner id in numerical format on success, or <b>FALSE</b> on failure.*/
    public function getOwner(): int|false {}

/**
*<div id="splfileinfo.getgroup" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::getGroup</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::getGroup</span> &mdash; <span class="dc-title">Gets the file group</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.getgroup-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getGroup</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Gets the file group. The group ID is returned in numerical format.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.getgroup-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.getgroup-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The group id in numerical format on success, or <strong><span>false</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splfileinfo.getgroup-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> on error.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.getgroup-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getGroup()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'example.jpg'</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFilename</span><span style="color: #007700">() . </span><span style="color: #DD0000">' belongs to group id ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getGroup</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">posix_getgrgid</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getGroup</span><span style="color: #007700">()));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>example.jpg belongs to group id 42<br>Array<br>(<br>    [name] =&gt; toons<br>    [passwd] =&gt; x<br>    [members] =&gt; Array<br>        (<br>            [0] =&gt; tom<br>            [1] =&gt; jerry<br>        )<br>    [gid] =&gt; 42<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.getgroup-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link filegroup()} - 取得文件的组</span></li>    <li class="member"><span class="function">{@link posix_getgrgid()} - Return info about a group by group id</span></li>   </ul>  </span> </div></div>
     * @return int|false The group id in numerical format on success, or <b>FALSE</b> on failure.*/
    public function getGroup(): int|false {}

/**
*<div id="splfileinfo.getatime" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::getATime</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::getATime</span> &mdash; <span class="dc-title">Gets last access time of the file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.getatime-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getATime</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Gets the last access time for the file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.getatime-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.getatime-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the time the file was last accessed on success, or <strong><span>false</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splfileinfo.getatime-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> on error.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.getatime-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getATime()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'example.jpg'</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">'Last accessed at ' </span><span style="color: #007700">. </span><span style="color: #9876AA">date</span><span style="color: #007700">(</span><span style="color: #DD0000">'g:i a'</span><span style="color: #007700">, </span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getATime</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Last accessed at 1:49 pm<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.getatime-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link fileatime()} - 取得文件的上次访问时间</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::getCTime()} - 获取文件 inode 修改时间</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::getMTime()} - Gets the last modified time</span></li>   </ul>  </span> </div></div>
     * @return int|false The time the file was last accessed on success, or <b>FALSE</b> on failure.*/
    public function getATime(): int|false {}

/**
*<div id="splfileinfo.getmtime" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::getMTime</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::getMTime</span> &mdash; <span class="dc-title">Gets the last modified time</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.getmtime-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getMTime</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Returns the time when the contents of the file were changed. The time returned is a Unix timestamp.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.getmtime-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.getmtime-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the last modified time for the file, in a Unix timestamp on success, or <strong><span>false</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.getmtime-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getMTime()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'example.jpg'</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">'Last modified at ' </span><span style="color: #007700">. </span><span style="color: #9876AA">date</span><span style="color: #007700">(</span><span style="color: #DD0000">'g:i a'</span><span style="color: #007700">, </span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMTime</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Last modified at 1:49 pm<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.getmtime-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link filemtime()} - 取得文件修改时间</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::getATime()} - Gets last access time of the file</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::getCTime()} - 获取文件 inode 修改时间</span></li>   </ul>  </span> </div></div>
     * @return int|false The last modified time for the file, in a Unix timestamp on success, or <b>FALSE</b> on failure.*/
    public function getMTime(): int|false {}

/**
*<div id="splfileinfo.getctime" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::getCTime</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::getCTime</span> &mdash; <span class="dc-title">获取文件 inode 修改时间</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.getctime-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getCTime</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   返回此文件 inode 的修改时间，返回的时间是 Unix 时间戳。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.getctime-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.getctime-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时为 inode 最后一次变更的时间（Unix 时间戳），失败时为 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splfileinfo.getctime-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   错误时抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.getctime-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getCTime()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'example.jpg'</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">'Last changed at ' </span><span style="color: #007700">. </span><span style="color: #9876AA">date</span><span style="color: #007700">(</span><span style="color: #DD0000">'g:i a'</span><span style="color: #007700">, </span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getCTime</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Last changed at 1:49 pm<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.getctime-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link filectime()} - 取得文件的 inode 修改时间</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::getATime()} - Gets last access time of the file</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::getMTime()} - Gets the last modified time</span></li>   </ul>  </span> </div></div>
     * @return int|false The last change time, in a Unix timestamp on success, or <b>FALSE</b> on failure.*/
    public function getCTime(): int|false {}

/**
*<div id="splfileinfo.gettype" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::getType</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::getType</span> &mdash; <span class="dc-title">Gets file type</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.gettype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getType</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Returns the type of the file referenced.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.gettype-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.gettype-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   A <span class="type" style="color:#EAB766">string</span> representing the type of the entry.   May be one of <span>file</span>, <span>link</span>,   <span>dir</span>, <span>block</span>, <span>fifo</span>,   <span>char</span>, <span>socket</span>, or <span>unknown</span>, or <strong><span>false</span></strong> on failure.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splfileinfo.gettype-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> on error.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.gettype-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplFileInfo::getType()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getType</span><span style="color: #007700">().</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">));<br />echo </span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getType</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>file<br>dir<br></span></div>    </div>   </div>  </span> </div></div>
     * @return string|false A string representing the type of the entry. May be one of file, link, dir, block, fifo, char, socket, or unknown, or <b>FALSE</b> on failure.*/
    public function getType(): string|false {}

/**
*<div id="splfileinfo.iswritable" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::isWritable</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::isWritable</span> &mdash; <span class="dc-title">Tells if the entry is writable</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.iswritable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::isWritable</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the current entry is writable.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.iswritable-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.iswritable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if writable, <strong><span>false</span></strong> otherwise;  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.iswritable-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::isWriteable()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'locked.jpg'</span><span style="color: #007700">);<br />if (!</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isWriteable</span><span style="color: #007700">()) {<br />    echo </span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFilename</span><span style="color: #007700">() . </span><span style="color: #DD0000">' is not writeable'</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>locked.jpg is not writeable<br></span></div>    </div>   </div>  </span> </div></div>
     * @return bool true if writable, false otherwise;*/
    public function isWritable(): bool {}

/**
*<div id="splfileinfo.isreadable" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::isReadable</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::isReadable</span> &mdash; <span class="dc-title">Tells if file is readable</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.isreadable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::isReadable</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Check if the file is readable.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.isreadable-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.isreadable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if readable, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.isreadable-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::isReadable()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'readable.jpg'</span><span style="color: #007700">);<br />if (</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isReadable</span><span style="color: #007700">()) {<br />    echo </span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFilename</span><span style="color: #007700">() . </span><span style="color: #DD0000">' is readable'</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>readable.jpg is readable<br></span></div>    </div>   </div>  </span> </div></div>
     * @return bool true if readable, false otherwise.*/
    public function isReadable(): bool {}

/**
*<div id="splfileinfo.isexecutable" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::isExecutable</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::isExecutable</span> &mdash; <span class="dc-title">Tells if the file is executable</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.isexecutable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::isExecutable</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the file is executable.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.isexecutable-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.isexecutable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if executable, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.isexecutable-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplFileInfo::isExecutable()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/usr/bin/php'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isExecutable</span><span style="color: #007700">()); <br /><br /></span><span style="color: #9876AA">$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/usr/bin'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isExecutable</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isExecutable</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(true)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div></div>
     * @return bool true if executable, false otherwise.*/
    public function isExecutable(): bool {}

/**
*<div id="splfileinfo.isfile" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::isFile</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::isFile</span> &mdash; <span class="dc-title">Tells if the object references a regular file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.isfile-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::isFile</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the file referenced by this SplFileInfo object exists and is a regular file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.isfile-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.isfile-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the file exists and is a regular file (not a link), <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.isfile-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplFileInfo::isFile()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isFile</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isFile</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div></div>
     * @return bool true if the file exists and is a regular file (not a link), false otherwise.*/
    public function isFile(): bool {}

/**
*<div id="splfileinfo.isdir" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::isDir</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::isDir</span> &mdash; <span class="dc-title">Tells if the file is a directory</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.isdir-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::isDir</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   This method can be used to determine if the file is a directory.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.isdir-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.isdir-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if a directory, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.isdir-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplFileInfo::isDir()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$d </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$d</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isDir</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$d </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$d</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isDir</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div></div>
     * @return bool true if a directory, false otherwise.*/
    public function isDir(): bool {}

/**
*<div id="splfileinfo.islink" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::isLink</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::isLink</span> &mdash; <span class="dc-title">Tells if the file is a link</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.islink-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::isLink</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Use this method to check if the file referenced by the SplFileInfo object   is a link.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.islink-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.islink-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the file is a link, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.islink-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplFileInfo::isLink()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/path/to/symlink'</span><span style="color: #007700">);<br />if (</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isLink</span><span style="color: #007700">()) {<br />    echo </span><span style="color: #DD0000">'The real path is '</span><span style="color: #007700">.</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getRealPath</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.islink-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::getRealPath()} - Gets absolute path to file</span></li>   </ul>  </span> </div></div>
     * @return bool true if the file is a link, false otherwise.*/
    public function isLink(): bool {}

/**
*<div id="splfileinfo.getlinktarget" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::getLinkTarget</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::getLinkTarget</span> &mdash; <span class="dc-title">Gets the target of a link</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.getlinktarget-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getLinkTarget</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Gets the target of a filesystem link.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    The target may not be the real path on the filesystem. Use <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getRealPath()}</span>    to determine the true path on the filesystem.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.getlinktarget-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.getlinktarget-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the target of the filesystem link on success, or <strong><span>false</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splfileinfo.getlinktarget-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> on error.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.getlinktarget-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplFileInfo::getLinkTarget()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/Users/bbieber/workspace'</span><span style="color: #007700">);<br />if (</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isLink</span><span style="color: #007700">()) {<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getLinkTarget</span><span style="color: #007700">());<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getRealPath</span><span style="color: #007700">());<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(19) &quot;Documents/workspace&quot;<br>string(34) &quot;/Users/bbieber/Documents/workspace&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.getlinktarget-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::isLink()} - Tells if the file is a link</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::getRealPath()} - Gets absolute path to file</span></li>   </ul>  </span> </div></div>
     * @return string|false The target of the filesystem link on success, or <b>FALSE</b> on failure.*/
    public function getLinkTarget(): string|false {}

/**
*<div id="splfileinfo.getrealpath" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::getRealPath</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::getRealPath</span> &mdash; <span class="dc-title">Gets absolute path to file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.getrealpath-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getRealPath</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   This method expands all symbolic links, resolves relative references and returns the real path to the file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.getrealpath-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.getrealpath-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the path to the file, or <strong><span>false</span></strong> if the file does not exist.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.getrealpath-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplFileInfo::getRealPath()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/..//./../../'</span><span style="color: #007700">.</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getRealPath</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/tmp'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getRealPath</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/I/Do/Not/Exist'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getRealPath</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'php://output'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getRealPath</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">""</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getRealPath</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(28) &quot;/private/tmp/phptempfile.php&quot; <br>string(12) &quot;/private/tmp&quot;<br>bool(false)<br>bool(false)<br>string(12) &quot;/private/tmp&quot; <br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.getrealpath-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::isLink()} - Tells if the file is a link</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link realpath()} - 返回规范化的绝对路径名</span></li>   </ul>  </span> </div></div>
     * @return string|false the path to the file, or <b>FALSE</b> if the file does not exist.*/
    public function getRealPath(): string|false {}

/**
*<div id="splfileinfo.getfileinfo" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::getFileInfo</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::getFileInfo</span> &mdash; <span class="dc-title">Gets an SplFileInfo object for the file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.getfileinfo-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getFileInfo</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></div>  <p class="para rdfs-comment">   This method gets an <span class="classname"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="classname">SplFileInfo</a></span> object for the referenced file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.getfileinfo-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       Name of an <span class="classname"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="classname">SplFileInfo</a></span> derived class to use.       </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.getfileinfo-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   An <span class="classname"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="classname">SplFileInfo</a></span> object created for the file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-splfileinfo.getfileinfo-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        <span class="parameter" style="color:#3A95FF">class</span> is now nullable.       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.getfileinfo-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::setInfoClass()} - Sets the class used with SplFileInfo::getFileInfo and SplFileInfo::getPathInfo</span></li>   </ul>  </span> </div></div>
     * @return SplFileInfo An <b>SplFileInfo</b> object created for the file.*/
    public function getFileInfo(#[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $class = null): SplFileInfo {}

/**
*<div id="splfileinfo.getpathinfo" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::getPathInfo</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::getPathInfo</span> &mdash; <span class="dc-title">Gets an SplFileInfo object for the path</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.getpathinfo-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::getPathInfo</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></span></div>  <p class="para rdfs-comment">   Gets an <span class="classname"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="classname">SplFileInfo</a></span> object for the parent of the current file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.getpathinfo-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       Name of an <span class="classname"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="classname">SplFileInfo</a></span> derived class to use, or itself if <strong><span>null</span></strong>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.getpathinfo-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an <span class="classname"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="classname">SplFileInfo</a></span> object for the parent path of the file on success, or <strong><span>null</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-splfileinfo.getpathinfo-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        <span class="parameter" style="color:#3A95FF">class</span> is now nullable.       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.getpathinfo-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplFileInfo::getPathInfo()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/usr/bin/php'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$parent_info </span><span style="color: #007700">= </span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getPathInfo</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$parent_info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getRealPath</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(8) &quot;/usr/bin&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.getpathinfo-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::setInfoClass()} - Sets the class used with SplFileInfo::getFileInfo and SplFileInfo::getPathInfo</span></li>   </ul>  </span> </div></div>
     * @return SplFileInfo|null A <b>SplFileInfo</b> object for the parent path of the file on success, or <b>NULL</b> on failure.*/
    public function getPathInfo(#[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $class = null): ?SplFileInfo {}

/**
*<div id="splfileinfo.openfile" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::openFile</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::openFile</span> &mdash; <span class="dc-title">Gets an SplFileObject object for the file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.openfile-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::openFile</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = &quot;r&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$useIncludePath</span><span class="initializer"> = <strong><span>false</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$context</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="type SplFileObject" style="color:#EAB766">SplFileObject</a></span></div>  <p class="para rdfs-comment">   Creates an <span class="classname"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="classname">SplFileObject</a></span> <span class="type" style="color:#EAB766">object</span> of   the file. This is useful because <span class="classname"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="classname">SplFileObject</a></span>   contains additional methods for manipulating the file whereas   <span class="classname"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="classname">SplFileInfo</a></span> is only useful for gaining information,   like whether the file is writable.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.openfile-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">mode</span></dt>     <dd>      <p class="para">       The mode for opening the file. See the <span class="function">{@link fopen()}</span>       documentation for descriptions of possible modes. The default        is read only.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">useIncludePath</span></dt>     <dd>      <p class="para">       值设为 <strong><span>true</span></strong> 时，也会在<a href="https://www.php.net/manual/zh/ini.core.php#ini.include-path" class="link">include_path</a> 中搜索文件名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">context</span></dt>     <dd>      <p class="para">       <span>上下文（context）</span>的说明请参考手册中的 <a href="https://www.php.net/manual/zh/context.php" class="link">上下文（context）</a>章节。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.openfile-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The opened file as an <span class="classname"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="classname">SplFileObject</a></span> <span class="type" style="color:#EAB766">object</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splfileinfo.openfile-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   A <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> if the file cannot be   opened (e.g. insufficient access rights).  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-splfileinfo.openfile-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        <span class="parameter" style="color:#3A95FF">context</span> is now nullable.       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.openfile-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::openFile()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fileinfo </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/tmp/foo.txt'</span><span style="color: #007700">);<br /><br />if (</span><span style="color: #9876AA">$fileinfo</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isWritable</span><span style="color: #007700">()) {<br /><br />    </span><span style="color: #9876AA">$fileobj </span><span style="color: #007700">= </span><span style="color: #9876AA">$fileinfo</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">openFile</span><span style="color: #007700">(</span><span style="color: #DD0000">'a'</span><span style="color: #007700">);<br /><br />    </span><span style="color: #9876AA">$fileobj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #DD0000">"appended this sample text"</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.openfile-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="classname"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="classname">SplFileObject</a></span></li>    <li class="member"><span class="function">{@link stream_context_create()} - 创建资源流上下文</span></li>    <li class="member"><span class="function">{@link fopen()} - 打开文件或者 URL</span></li>   </ul>  </span> </div></div>
     * @return SplFileObject The opened file as an <b>SplFileObject</b> object.*/
    public function openFile(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $mode = 'r',
        #[LanguageLevelTypeAware(['8.0' => 'bool'], default: '')] $useIncludePath = false,
        $context = null
    ): SplFileObject {}

/**
*<div id="splfileinfo.setfileclass" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::setFileClass</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::setFileClass</span> &mdash; <span class="dc-title">Sets the class used with <span class="methodname" style="color:#CC7832">{@link SplFileInfo::openFile()}</span></span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.setfileclass-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::setFileClass</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileObject::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Use this method to set a custom class which will be used when   <span class="methodname" style="color:#CC7832">{@link SplFileInfo::openFile()}</span> is called. The class name   passed to this method must be <span class="classname"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="classname">SplFileObject</a></span> or a class   derived from <span class="classname"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="classname">SplFileObject</a></span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.setfileclass-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       The class name to use when <span class="methodname" style="color:#CC7832">{@link SplFileInfo::openFile()}</span>       is called.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.setfileclass-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.setfileclass-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplFileInfo::setFileClass()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Create a class extending SplFileObject<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">MyFoo </span><span style="color: #007700">extends </span><span style="color: #9876AA">SplFileObject </span><span style="color: #007700">{}<br /><br /></span><span style="color: #9876AA">$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// Set the class to use<br /></span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setFileClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'MyFoo'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">openFile</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(MyFoo)#2 (0) { } <br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.setfileclass-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::openFile()} - Gets an SplFileObject object for the file</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function setFileClass(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $class = SplFileObject::class): void {}

/**
*<div id="splfileinfo.setinfoclass" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileInfo::setInfoClass</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileInfo::setInfoClass</span> &mdash; <span class="dc-title">Sets the class used with <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFileInfo()}</span> and <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathInfo()}</span></span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileinfo.setinfoclass-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileInfo::setInfoClass</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileInfo::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Use this method to set a custom class which will be used when   <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFileInfo()}</span> and   <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathInfo()}</span> are called. The class name   passed to this method must be <span class="classname"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="classname">SplFileInfo</a></span> or a class   derived from <span class="classname"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="classname">SplFileInfo</a></span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileinfo.setinfoclass-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       The class name to use when       <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFileInfo()}</span> and       <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathInfo()}</span> are called.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileinfo.setinfoclass-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileinfo.setinfoclass-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function">{@link SplFileInfo::setFileClass()}</span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Define a class which extends SplFileInfo<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">MyFoo </span><span style="color: #007700">extends </span><span style="color: #9876AA">SplFileInfo </span><span style="color: #007700">{}<br /><br /></span><span style="color: #9876AA">$info </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// Set the class name to use<br /></span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setInfoClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'MyFoo'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$info</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFileInfo</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(MyFoo)#2 (0) { } <br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileinfo.setinfoclass-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFileInfo()} - Gets an SplFileInfo object for the file</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function setInfoClass(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $class = SplFileInfo::class): void {}

    /**
     * Returns the path to the file as a string
     * @link https://php.net/manual/en/splfileinfo.tostring.php
     * @return string the path to the file.
     * @since 5.1.2
     */
    #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')]
    public function __toString() {}

    #[TentativeType]
    final public function _bad_state_ex(): void {}

    public function __wakeup() {}

    /**
     * @return array
     * @since 7.4
     */
    #[TentativeType]
    public function __debugInfo(): array {}
}

/**
*<div id="class.directoryiterator" class="reference"> <h1 class="title">The DirectoryIterator class</h1>   <div class="partintro"><p class="verinfo">(PHP 5, PHP 7, PHP 8)</p>   <div class="section" id="directoryiterator.intro">   <h2 class="title">简介</h2>   <p class="para">    The DirectoryIterator class provides a simple interface for viewing    the contents of filesystem directories.   </p>  </div>   <div class="section" id="directoryiterator.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">DirectoryIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="classname">SplFileInfo</a>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.seekableiterator.php" class="interfacename">SeekableIterator</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/directoryiterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$directory</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/directoryiterator.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/directoryiterator.getbasename.php" class="methodname" style="color:#CC7832">getBasename</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$suffix</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/directoryiterator.getextension.php" class="methodname" style="color:#CC7832">getExtension</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/directoryiterator.getfilename.php" class="methodname" style="color:#CC7832">getFilename</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/directoryiterator.isdot.php" class="methodname" style="color:#CC7832">isDot</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/directoryiterator.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/directoryiterator.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/directoryiterator.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/directoryiterator.seek.php" class="methodname" style="color:#CC7832">seek</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/directoryiterator.tostring.php" class="methodname" style="color:#CC7832">__toString</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/directoryiterator.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getATime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getBasename}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$suffix</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getCTime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getExtension}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFileInfo}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFilename}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getGroup}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getInode}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getLinkTarget}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getMTime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getOwner}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPath}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathInfo}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathname}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPerms}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getRealPath}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getSize}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getType}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isDir}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isExecutable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isFile}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isLink}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isReadable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isWritable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::openFile}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = &quot;r&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$useIncludePath</span><span class="initializer"> = <strong><span>false</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$context</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="type SplFileObject" style="color:#EAB766">SplFileObject</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::setFileClass}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileObject::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::setInfoClass}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileInfo::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div>   }</div>   </div>  </div>   <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link DirectoryIterator::__construct} — Constructs a new directory iterator from a path</li><li>{@link DirectoryIterator::current} — Return the current DirectoryIterator item</li><li>{@link DirectoryIterator::getBasename} — Get base name of current DirectoryIterator item</li><li>{@link DirectoryIterator::getExtension} — Gets the file extension</li><li>{@link DirectoryIterator::getFilename} — Return file name of current DirectoryIterator item</li><li>{@link DirectoryIterator::isDot} — Determine if current DirectoryIterator item is '.' or '..'</li><li>{@link DirectoryIterator::key} — Return the key for the current DirectoryIterator item</li><li>{@link DirectoryIterator::next} — Move forward to next DirectoryIterator item</li><li>{@link DirectoryIterator::rewind} — Rewind the DirectoryIterator back to the start</li><li>{@link DirectoryIterator::seek} — Seek to a DirectoryIterator item</li><li>{@link DirectoryIterator::__toString} — Get file name as a string</li><li>{@link DirectoryIterator::valid} — Check whether current DirectoryIterator position is a valid file</li></ul></div>
*/
class DirectoryIterator extends SplFileInfo implements SeekableIterator
{
    /**
     * Constructs a new directory iterator from a path
     * @link https://php.net/manual/en/directoryiterator.construct.php
     * @param string $directory
     * @throws UnexpectedValueException if the path cannot be opened.
     * @throws RuntimeException if the path is an empty string.
     */
    public function __construct(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $directory) {}

/**
*<div id="directoryiterator.isdot" class="refentry"> <div class="refnamediv">  <h1 class="refname">DirectoryIterator::isDot</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">DirectoryIterator::isDot</span> &mdash; <span class="dc-title">Determine if current DirectoryIterator item is &#039;.&#039; or &#039;..&#039;</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-directoryiterator.isdot-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>DirectoryIterator::isDot</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Determines if the current <span class="classname"><a href="https://www.php.net/manual/zh/class.directoryiterator.php" class="classname">DirectoryIterator</a></span>   item is a directory and either   <span>.</span> or <span>..</span>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-directoryiterator.isdot-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-directoryiterator.isdot-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the entry is <span>.</span> or <span>..</span>,   otherwise <strong><span>false</span></strong>  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-directoryiterator.isdot-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 A <span class="methodname" style="color:#CC7832"><strong>DirectoryIterator::isDot()</strong></span> example</strong></p>    <div class="example-contents"><p>      This example will list all files, omitting the <span>.</span> and      <span>..</span> entries.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">DirectoryIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">));<br />foreach (</span><span style="color: #9876AA">$iterator </span><span style="color: #007700">as </span><span style="color: #9876AA">$fileinfo</span><span style="color: #007700">) {<br />    if (!</span><span style="color: #9876AA">$fileinfo</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isDot</span><span style="color: #007700">()) {<br />        echo </span><span style="color: #9876AA">$fileinfo</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFilename</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />    }<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>apple.jpg<br>banana.jpg<br>example.php<br>pears.jpg<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-directoryiterator.isdot-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832"><strong>DirectoryIterator::getType()</strong></span></li>    <li class="member"><span class="methodname" style="color:#CC7832"><strong>DirectoryIterator::isDir()</strong></span></li>    <li class="member"><span class="methodname" style="color:#CC7832"><strong>DirectoryIterator::isFile()</strong></span></li>    <li class="member"><span class="methodname" style="color:#CC7832"><strong>DirectoryIterator::isLink()</strong></span></li>   </ul>  </span> </div></div>
     * @return bool true if the entry is . or ..,*/
    public function isDot(): bool {}

/**
*<div id="directoryiterator.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">DirectoryIterator::rewind</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">DirectoryIterator::rewind</span> &mdash; <span class="dc-title">Rewind the DirectoryIterator back to the start</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-directoryiterator.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>DirectoryIterator::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Rewind the <span class="classname"><a href="https://www.php.net/manual/zh/class.directoryiterator.php" class="classname">DirectoryIterator</a></span> back to the start.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-directoryiterator.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-directoryiterator.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-directoryiterator.rewind-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>DirectoryIterator::rewind()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">DirectoryIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />echo </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">(); </span><span style="color: #FF8000">//1<br /><br /></span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">(); </span><span style="color: #FF8000">//rewinding to the beginning<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">(); </span><span style="color: #FF8000">//0<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-directoryiterator.rewind-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::current()} - Return the current DirectoryIterator item</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::key()} - Return the key for the current DirectoryIterator item</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::next()} - Move forward to next DirectoryIterator item</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::valid()} - Check whether current DirectoryIterator position is a valid file</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Iterator::rewind()} - 返回到迭代器的第一个元素</span></li>   </ul>  </span> </div> </div>
     * @return void*/
    public function rewind(): void {}

/**
*<div id="directoryiterator.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">DirectoryIterator::valid</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">DirectoryIterator::valid</span> &mdash; <span class="dc-title">Check whether current DirectoryIterator position is a valid file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-directoryiterator.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>DirectoryIterator::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Check whether current <span class="classname"><a href="https://www.php.net/manual/zh/class.directoryiterator.php" class="classname">DirectoryIterator</a></span> position is a valid file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-directoryiterator.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-directoryiterator.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the position is valid, otherwise <strong><span>false</span></strong>  </p> </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-directoryiterator.valid-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 A <span class="methodname" style="color:#CC7832"><strong>DirectoryIterator::valid()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">DirectoryIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// Loop to end of iterator<br /></span><span style="color: #007700">while(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()) {<br />    </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />}<br /><br /></span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">(); </span><span style="color: #FF8000">// FALSE<br /></span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">(); <br /></span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">(); </span><span style="color: #FF8000">// TRUE<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-directoryiterator.valid-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::current()} - Return the current DirectoryIterator item</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::key()} - Return the key for the current DirectoryIterator item</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::next()} - Move forward to next DirectoryIterator item</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::rewind()} - Rewind the DirectoryIterator back to the start</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Iterator::valid()} - 检查当前位置是否有效</span></li>   </ul>  </span> </div></div>
     * @return bool true if the position is valid, otherwise false*/
    public function valid(): bool {}

/**
*<div id="directoryiterator.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">DirectoryIterator::key</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">DirectoryIterator::key</span> &mdash; <span class="dc-title">Return the key for the current DirectoryIterator item</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-directoryiterator.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>DirectoryIterator::key</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Get the key for the current <span class="classname"><a href="https://www.php.net/manual/zh/class.directoryiterator.php" class="classname">DirectoryIterator</a></span> item.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-directoryiterator.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-directoryiterator.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The key for the current <span class="classname"><a href="https://www.php.net/manual/zh/class.directoryiterator.php" class="classname">DirectoryIterator</a></span> item as an <span class="type" style="color:#EAB766">int</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-directoryiterator.key-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.1.0</td>       <td>        When the iterator is uninitialized, an <span class="classname"><a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a></span> is        thrown now. Previously, the method returned <strong><span>false</span></strong>.       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-directoryiterator.key-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 A <span class="methodname" style="color:#CC7832"><strong>DirectoryIterator::key()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$dir </span><span style="color: #007700">= new </span><span style="color: #9876AA">DirectoryIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">));<br />foreach (</span><span style="color: #9876AA">$dir </span><span style="color: #007700">as </span><span style="color: #9876AA">$fileinfo</span><span style="color: #007700">) {<br />    if (!</span><span style="color: #9876AA">$fileinfo</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isDot</span><span style="color: #007700">()) {<br />        echo </span><span style="color: #9876AA">$fileinfo</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">() . </span><span style="color: #DD0000">" =&gt; " </span><span style="color: #007700">. </span><span style="color: #9876AA">$fileinfo</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFilename</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />    }<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>0 =&gt; apple.jpg<br>1 =&gt; banana.jpg<br>2 =&gt; index.php<br>3 =&gt; pear.jpg<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-directoryiterator.key-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::current()} - Return the current DirectoryIterator item</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::next()} - Move forward to next DirectoryIterator item</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::rewind()} - Rewind the DirectoryIterator back to the start</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::valid()} - Check whether current DirectoryIterator position is a valid file</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Iterator::key()} - 返回当前元素的键</span></li>   </ul>  </span> </div></div>
     * @return string The key for the current <b>DirectoryIterator</b> item.*/
    public function key(): mixed {}

/**
*<div id="directoryiterator.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">DirectoryIterator::current</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">DirectoryIterator::current</span> &mdash; <span class="dc-title">Return the current DirectoryIterator item</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-directoryiterator.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>DirectoryIterator::current</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Get the current <span class="classname"><a href="https://www.php.net/manual/zh/class.directoryiterator.php" class="classname">DirectoryIterator</a></span> item.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-directoryiterator.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-directoryiterator.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current <span class="classname"><a href="https://www.php.net/manual/zh/class.directoryiterator.php" class="classname">DirectoryIterator</a></span> item.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-directoryiterator.current-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 A <span class="methodname" style="color:#CC7832"><strong>DirectoryIterator::current()</strong></span> example</strong></p>    <div class="example-contents"><p>     This example will list the contents of the directory containing the script.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">DirectoryIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">__DIR__</span><span style="color: #007700">);<br />while(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()) {<br />    </span><span style="color: #9876AA">$file </span><span style="color: #007700">= </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">();<br />    echo </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">() . </span><span style="color: #DD0000">" =&gt; " </span><span style="color: #007700">. </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFilename</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>0 =&gt; .<br>1 =&gt; ..<br>2 =&gt; apple.jpg<br>3 =&gt; banana.jpg<br>4 =&gt; index.php<br>5 =&gt; pear.jpg<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-directoryiterator.current-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::key()} - Return the key for the current DirectoryIterator item</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::next()} - Move forward to next DirectoryIterator item</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::rewind()} - Rewind the DirectoryIterator back to the start</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::valid()} - Check whether current DirectoryIterator position is a valid file</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Iterator::current()} - 返回当前元素</span></li>   </ul>  </span> </div></div>
     * @return DirectoryIterator The current <b>DirectoryIterator</b> item.*/
    public function current(): mixed {}

/**
*<div id="directoryiterator.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">DirectoryIterator::next</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">DirectoryIterator::next</span> &mdash; <span class="dc-title">Move forward to next DirectoryIterator item</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-directoryiterator.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>DirectoryIterator::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Move forward to the next <span class="classname"><a href="https://www.php.net/manual/zh/class.directoryiterator.php" class="classname">DirectoryIterator</a></span> item.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-directoryiterator.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-directoryiterator.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-directoryiterator.next-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>DirectoryIterator::next()</strong></span> example</strong></p>    <div class="example-contents"><p>     List the contents of a directory using a while loop.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">DirectoryIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">));<br />while(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()) {<br />    echo </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFilename</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>.<br>..<br>apple.jpg<br>banana.jpg<br>index.php<br>pear.jpg<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-directoryiterator.next-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::current()} - Return the current DirectoryIterator item</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::key()} - Return the key for the current DirectoryIterator item</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::rewind()} - Rewind the DirectoryIterator back to the start</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::valid()} - Check whether current DirectoryIterator position is a valid file</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link Iterator::next()} - 向前移动到下一个元素</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function next(): void {}

/**
*<div id="directoryiterator.seek" class="refentry"> <div class="refnamediv">  <h1 class="refname">DirectoryIterator::seek</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">DirectoryIterator::seek</span> &mdash; <span class="dc-title">Seek to a DirectoryIterator item</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-directoryiterator.seek-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>DirectoryIterator::seek</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Seek to a given position in the <span class="classname"><a href="https://www.php.net/manual/zh/class.directoryiterator.php" class="classname">DirectoryIterator</a></span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-directoryiterator.seek-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">       The zero-based numeric position to seek to.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-directoryiterator.seek-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-directoryiterator.seek-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>DirectoryIterator::seek()</strong></span> example</strong></p>    <div class="example-contents"><p>     Seek to the fourth item in the directory containing the script.      The first two are usually <span>.</span> and <span>..</span>    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">DirectoryIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">seek</span><span style="color: #007700">(</span><span style="color: #9876AA">3</span><span style="color: #007700">);<br />if (</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()) {<br />    echo </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFilename</span><span style="color: #007700">();<br />} else {<br />    echo </span><span style="color: #DD0000">'No file at position 3'</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-directoryiterator.seek-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::rewind()} - Rewind the DirectoryIterator back to the start</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::next()} - Move forward to next DirectoryIterator item</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SeekableIterator::seek()} - Seeks to a position</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function seek(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $offset): void {}
}

/**
*<div id="class.filesystemiterator" class="reference"> <h1 class="title">The FilesystemIterator class</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p>    <div class="section" id="filesystemiterator.intro">   <h2 class="title">简介</h2>   <p class="para">    The Filesystem iterator   </p>  </div>    <div class="section" id="filesystemiterator.synopsis">   <h2 class="title">类摘要</h2>      <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">FilesystemIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.directoryiterator.php" class="classname">DirectoryIterator</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php#filesystemiterator.constants.current-mode-mask"><var class="varname">CURRENT_MODE_MASK</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php#filesystemiterator.constants.current-as-pathname"><var class="varname">CURRENT_AS_PATHNAME</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php#filesystemiterator.constants.current-as-fileinfo"><var class="varname">CURRENT_AS_FILEINFO</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php#filesystemiterator.constants.current-as-self"><var class="varname">CURRENT_AS_SELF</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php#filesystemiterator.constants.key-mode-mask"><var class="varname">KEY_MODE_MASK</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php#filesystemiterator.constants.key-as-pathname"><var class="varname">KEY_AS_PATHNAME</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php#filesystemiterator.constants.follow-symlinks"><var class="varname">FOLLOW_SYMLINKS</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php#filesystemiterator.constants.key-as-filename"><var class="varname">KEY_AS_FILENAME</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php#filesystemiterator.constants.new-current-and-key"><var class="varname">NEW_CURRENT_AND_KEY</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php#filesystemiterator.constants.other-mode-mask"><var class="varname">OTHER_MODE_MASK</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php#filesystemiterator.constants.skip-dots"><var class="varname">SKIP_DOTS</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php#filesystemiterator.constants.unix-paths"><var class="varname">UNIX_PATHS</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/filesystemiterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$directory</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/filesystemiterator.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span>|<span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php" class="type FilesystemIterator" style="color:#EAB766">FilesystemIterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/filesystemiterator.getflags.php" class="methodname" style="color:#CC7832">getFlags</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/filesystemiterator.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/filesystemiterator.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/filesystemiterator.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/filesystemiterator.setflags.php" class="methodname" style="color:#CC7832">setFlags</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::getBasename}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$suffix</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::getExtension}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::getFilename}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::isDot}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::seek}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getATime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getBasename}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$suffix</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getCTime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getExtension}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFileInfo}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFilename}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getGroup}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getInode}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getLinkTarget}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getMTime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getOwner}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPath}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathInfo}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathname}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPerms}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getRealPath}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getSize}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getType}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isDir}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isExecutable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isFile}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isLink}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isReadable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isWritable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::openFile}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = &quot;r&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$useIncludePath</span><span class="initializer"> = <strong><span>false</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$context</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="type SplFileObject" style="color:#EAB766">SplFileObject</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::setFileClass}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileObject::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::setInfoClass}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileInfo::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div>   }</div>     </div>    <div class="section" id="filesystemiterator.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="filesystemiterator.constants.current-as-pathname"><strong><span>FilesystemIterator::CURRENT_AS_PATHNAME</span></strong></dt>     <dd>      <p class="para">Makes <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::current()}</span> return the pathname.</p>     </dd>             <dt id="filesystemiterator.constants.current-as-fileinfo"><strong><span>FilesystemIterator::CURRENT_AS_FILEINFO</span></strong></dt>     <dd>      <p class="para">Makes <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::current()}</span> return an <span class="classname"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="classname">SplFileInfo</a></span> instance.</p>     </dd>             <dt id="filesystemiterator.constants.current-as-self"><strong><span>FilesystemIterator::CURRENT_AS_SELF</span></strong></dt>     <dd>      <p class="para">Makes <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::current()}</span> return $this (the FilesystemIterator).</p>     </dd>             <dt id="filesystemiterator.constants.current-mode-mask"><strong><span>FilesystemIterator::CURRENT_MODE_MASK</span></strong></dt>     <dd>      <p class="para">Masks <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::current()}</span></p>     </dd>             <dt id="filesystemiterator.constants.key-as-pathname"><strong><span>FilesystemIterator::KEY_AS_PATHNAME</span></strong></dt>     <dd>      <p class="para">Makes <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::key()}</span> return the pathname.</p>     </dd>             <dt id="filesystemiterator.constants.key-as-filename"><strong><span>FilesystemIterator::KEY_AS_FILENAME</span></strong></dt>     <dd>      <p class="para">Makes <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::key()}</span> return the filename.</p>     </dd>             <dt id="filesystemiterator.constants.follow-symlinks"><strong><span>FilesystemIterator::FOLLOW_SYMLINKS</span></strong></dt>     <dd>      <p class="para">Makes <span class="methodname" style="color:#CC7832">{@link RecursiveDirectoryIterator::hasChildren()}</span> follow symlinks.</p>     </dd>             <dt id="filesystemiterator.constants.key-mode-mask"><strong><span>FilesystemIterator::KEY_MODE_MASK</span></strong></dt>     <dd>      <p class="para">Masks <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::key()}</span></p>     </dd>             <dt id="filesystemiterator.constants.new-current-and-key"><strong><span>FilesystemIterator::NEW_CURRENT_AND_KEY</span></strong></dt>     <dd>      <p class="para">Same as <span>FilesystemIterator::KEY_AS_FILENAME | FilesystemIterator::CURRENT_AS_FILEINFO</span>.</p>     </dd>             <dt id="filesystemiterator.constants.other-mode-mask"><strong><span>FilesystemIterator::OTHER_MODE_MASK</span></strong></dt>     <dd>      <p class="para">Mask used for <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::getFlags()}</span> and <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::setFlags()}</span>.</p>     </dd>             <dt id="filesystemiterator.constants.skip-dots"><strong><span>FilesystemIterator::SKIP_DOTS</span></strong></dt>     <dd>      <p class="para">Skips dot files (<span>.</span> and <span>..</span>).</p>     </dd>             <dt id="filesystemiterator.constants.unix-paths"><strong><span>FilesystemIterator::UNIX_PATHS</span></strong></dt>     <dd>      <p class="para">       Makes paths use Unix-style forward slash irrespective of system default.       Note that the <span class="parameter" style="color:#3A95FF">path</span> that is passed to the       constructor is not modified.      </p>     </dd>       </dl>  </div>   </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link FilesystemIterator::__construct} — Constructs a new filesystem iterator</li><li>{@link FilesystemIterator::current} — The current file</li><li>{@link FilesystemIterator::getFlags} — Get the handling flags</li><li>{@link FilesystemIterator::key} — Retrieve the key for the current file</li><li>{@link FilesystemIterator::next} — Move to the next file</li><li>{@link FilesystemIterator::rewind} — Rewinds back to the beginning</li><li>{@link FilesystemIterator::setFlags} — Sets handling flags</li></ul></div>
*/
class FilesystemIterator extends DirectoryIterator
{
    public const CURRENT_MODE_MASK = 240;
    public const CURRENT_AS_PATHNAME = 32;
    public const CURRENT_AS_FILEINFO = 0;
    public const CURRENT_AS_SELF = 16;
    public const KEY_MODE_MASK = 3840;
    public const KEY_AS_PATHNAME = 0;
    public const FOLLOW_SYMLINKS = 16384;
    public const KEY_AS_FILENAME = 256;
    public const NEW_CURRENT_AND_KEY = 256;
    public const SKIP_DOTS = 4096;
    public const UNIX_PATHS = 8192;
    public const OTHER_MODE_MASK = 28672;

    /**
     * Constructs a new filesystem iterator
     * @link https://php.net/manual/en/filesystemiterator.construct.php
     * @param string $directory
     * @param int $flags [optional]
     * @throws UnexpectedValueException if the path cannot be found.
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $directory,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags = FilesystemIterator::KEY_AS_PATHNAME|FilesystemIterator::CURRENT_AS_FILEINFO|FilesystemIterator::SKIP_DOTS
    ) {}

/**
*<div id="filesystemiterator.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">FilesystemIterator::rewind</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">FilesystemIterator::rewind</span> &mdash; <span class="dc-title">Rewinds back to the beginning</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-filesystemiterator.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>FilesystemIterator::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Rewinds the directory back to the start.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-filesystemiterator.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-filesystemiterator.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-filesystemiterator.rewind-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>FilesystemIterator::rewind()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">FilesystemIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">), </span><span style="color: #9876AA">FilesystemIterator</span><span style="color: #007700">::</span><span style="color: #9876AA">KEY_AS_FILENAME</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />echo </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">();<br />echo </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>apple.jpg<br>banana.jpg<br>apple.jpg<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-filesystemiterator.rewind-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::rewind()} - Rewind the DirectoryIterator back to the start</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function rewind(): void {}

/**
*<div id="filesystemiterator.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">FilesystemIterator::next</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">FilesystemIterator::next</span> &mdash; <span class="dc-title">Move to the next file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-filesystemiterator.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>FilesystemIterator::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Move to the next file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-filesystemiterator.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-filesystemiterator.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-filesystemiterator.next-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>FilesystemIterator::next()</strong></span> example</strong></p>    <div class="example-contents"><p>     List the contents of a directory using a while loop.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">FilesystemIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">));<br />while(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()) {<br />    echo </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFilename</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>apple.jpg<br>banana.jpg<br>example.php<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-filesystemiterator.next-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::next()} - Move forward to next DirectoryIterator item</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function next() {}

/**
*<div id="filesystemiterator.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">FilesystemIterator::key</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">FilesystemIterator::key</span> &mdash; <span class="dc-title">Retrieve the key for the current file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-filesystemiterator.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>FilesystemIterator::key</strong></span>(): <span class="type" style="color:#EAB766">string</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-filesystemiterator.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-filesystemiterator.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the pathname or filename depending on the set flags.   See the <a href="https://www.php.net/manual/zh/class.filesystemiterator.php#filesystemiterator.constants" class="link">FilesystemIterator constants</a>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-filesystemiterator.key-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>FilesystemIterator::key()</strong></span> example</strong></p>    <div class="example-contents"><p>     This example will list the contents of the directory containing the script.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">FilesystemIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">), </span><span style="color: #9876AA">FilesystemIterator</span><span style="color: #007700">::</span><span style="color: #9876AA">KEY_AS_FILENAME</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$iterator </span><span style="color: #007700">as </span><span style="color: #9876AA">$fileinfo</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>上述示例在 PHP 8.2 中的输出类似于于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>.<br>..<br>apple.jpg<br>banana.jpg<br>example.php<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-filesystemiterator.key-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php#filesystemiterator.constants" class="link">FilesystemIterator constants</a></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::key()} - Return the key for the current DirectoryIterator item</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::getFilename()} - Return file name of current DirectoryIterator item</span></li>    <li class="member"><span class="methodname" style="color:#CC7832"><strong>DirectoryIterator::getPathname()</strong></span></li>   </ul>  </span> </div></div>
     * @return string the pathname or filename depending on the set flags.*/
    public function key(): string {}

/**
*<div id="filesystemiterator.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">FilesystemIterator::current</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">FilesystemIterator::current</span> &mdash; <span class="dc-title">The current file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-filesystemiterator.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>FilesystemIterator::current</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span>|<span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php" class="type FilesystemIterator" style="color:#EAB766">FilesystemIterator</a></span></span></div>  <p class="para rdfs-comment">   Get file information of the current element.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-filesystemiterator.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-filesystemiterator.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The filename, file information, or $this depending on the set flags.   See the <a href="https://www.php.net/manual/zh/class.filesystemiterator.php#filesystemiterator.constants" class="link">FilesystemIterator constants</a>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-filesystemiterator.current-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>FilesystemIterator::current()</strong></span> example</strong></p>    <div class="example-contents"><p>     This example will list the contents of the directory containing the script.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">FilesystemIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">__DIR__</span><span style="color: #007700">, </span><span style="color: #9876AA">FilesystemIterator</span><span style="color: #007700">::</span><span style="color: #9876AA">CURRENT_AS_PATHNAME</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$iterator </span><span style="color: #007700">as </span><span style="color: #9876AA">$fileinfo</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>上述示例在 PHP 8.2 中的输出类似于于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>/www/examples/.<br>/www/examples/..<br>/www/examples/apple.jpg<br>/www/examples/banana.jpg<br>/www/examples/example.php<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-filesystemiterator.current-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php#filesystemiterator.constants" class="link">FilesystemIterator constants</a></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::current()} - Return the current DirectoryIterator item</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link DirectoryIterator::getFileName()} - Return file name of current DirectoryIterator item</span></li>   </ul>  </span> </div></div>
     * @return string|SplFileInfo|self The filename, file information, or $this depending on the set flags.*/
    public function current(): SplFileInfo|FilesystemIterator|string {}

/**
*<div id="filesystemiterator.getflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">FilesystemIterator::getFlags</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">FilesystemIterator::getFlags</span> &mdash; <span class="dc-title">Get the handling flags</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-filesystemiterator.getflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>FilesystemIterator::getFlags</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Gets the handling flags, as set in <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::__construct()}</span> or <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::setFlags()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-filesystemiterator.getflags-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-filesystemiterator.getflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The integer value of the set flags.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-filesystemiterator.getflags-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link FilesystemIterator::__construct()} - Constructs a new filesystem iterator</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link FilesystemIterator::setFlags()} - Sets handling flags</span></li>   </ul>  </span> </div></div>
     * @return int The integer value of the set flags.*/
    public function getFlags(): int {}

/**
*<div id="filesystemiterator.setflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">FilesystemIterator::setFlags</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">FilesystemIterator::setFlags</span> &mdash; <span class="dc-title">Sets handling flags</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-filesystemiterator.setflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>FilesystemIterator::setFlags</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets handling flags.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-filesystemiterator.setflags-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       The handling flags to set.       See the <a href="https://www.php.net/manual/zh/class.filesystemiterator.php#filesystemiterator.constants" class="link">FilesystemIterator constants</a>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-filesystemiterator.setflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-filesystemiterator.setflags-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::key()}</span> example</strong></p>    <div class="example-contents"><p>     This example demonstrates the difference between the     {@link FilesystemIterator::KEY_AS_PATHNAME} and     {@link FilesystemIterator::KEY_AS_FILENAME} flags.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">FilesystemIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">dirname</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">), </span><span style="color: #9876AA">FilesystemIterator</span><span style="color: #007700">::</span><span style="color: #9876AA">KEY_AS_PATHNAME</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"Key as Pathname:\n"</span><span style="color: #007700">;<br />foreach (</span><span style="color: #9876AA">$iterator </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$fileinfo</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$key </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setFlags</span><span style="color: #007700">(</span><span style="color: #9876AA">FilesystemIterator</span><span style="color: #007700">::</span><span style="color: #9876AA">KEY_AS_FILENAME</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"\nKey as Filename:\n"</span><span style="color: #007700">;<br />foreach (</span><span style="color: #9876AA">$iterator </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$fileinfo</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$key </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>上述示例在 PHP 8.2 中的输出类似于于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Key as Pathname:<br>/www/examples/.<br>/www/examples/..<br>/www/examples/apple.jpg<br>/www/examples/banana.jpg<br>/www/examples/example.php<br><br>Key as Filename:<br>.<br>..<br>apple.jpg<br>banana.jpg<br>example.php<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-filesystemiterator.setflags-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link FilesystemIterator::__construct()} - Constructs a new filesystem iterator</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link FilesystemIterator::getFlags()} - Get the handling flags</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function setFlags(
        #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $flags = null,
        #[PhpStormStubsElementAvailable(from: '8.0')] int $flags
    ): void {}
}

/**
*<div id="class.recursivedirectoryiterator" class="reference"> <h1 class="title">The RecursiveDirectoryIterator class</h1>   <div class="partintro"><p class="verinfo">(PHP 5, PHP 7, PHP 8)</p>   <div class="section" id="recursivedirectoryiterator.intro">   <h2 class="title">简介</h2>   <p class="para">    The <span class="classname"><strong class="classname">RecursiveDirectoryIterator</strong></span> provides    an interface for iterating recursively over filesystem directories.   </p>  </div>   <div class="section" id="recursivedirectoryiterator.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">RecursiveDirectoryIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.filesystemiterator.php" class="classname">FilesystemIterator</a>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="interfacename">RecursiveIterator</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::CURRENT_MODE_MASK</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::CURRENT_AS_PATHNAME</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::CURRENT_AS_FILEINFO</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::CURRENT_AS_SELF</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::KEY_MODE_MASK</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::KEY_AS_PATHNAME</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::FOLLOW_SYMLINKS</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::KEY_AS_FILENAME</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::NEW_CURRENT_AND_KEY</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::OTHER_MODE_MASK</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::SKIP_DOTS</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::UNIX_PATHS</var>}</var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivedirectoryiterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$directory</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivedirectoryiterator.getchildren.php" class="methodname" style="color:#CC7832">getChildren</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursivedirectoryiterator.php" class="type RecursiveDirectoryIterator" style="color:#EAB766">RecursiveDirectoryIterator</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivedirectoryiterator.getsubpath.php" class="methodname" style="color:#CC7832">getSubPath</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivedirectoryiterator.getsubpathname.php" class="methodname" style="color:#CC7832">getSubPathname</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivedirectoryiterator.haschildren.php" class="methodname" style="color:#CC7832">hasChildren</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$allowLinks</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivedirectoryiterator.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivedirectoryiterator.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivedirectoryiterator.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::current}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span>|<span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php" class="type FilesystemIterator" style="color:#EAB766">FilesystemIterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::getFlags}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::key}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::setFlags}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::getBasename}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$suffix</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::getExtension}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::getFilename}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::isDot}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::seek}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getATime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getBasename}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$suffix</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getCTime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getExtension}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFileInfo}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFilename}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getGroup}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getInode}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getLinkTarget}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getMTime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getOwner}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPath}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathInfo}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathname}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPerms}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getRealPath}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getSize}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getType}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isDir}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isExecutable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isFile}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isLink}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isReadable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isWritable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::openFile}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = &quot;r&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$useIncludePath</span><span class="initializer"> = <strong><span>false</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$context</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="type SplFileObject" style="color:#EAB766">SplFileObject</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::setFileClass}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileObject::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::setInfoClass}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileInfo::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div>   }</div>   </div>  </div>   <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link RecursiveDirectoryIterator::__construct} — Constructs a RecursiveDirectoryIterator</li><li>{@link RecursiveDirectoryIterator::getChildren} — Returns an iterator for the current entry if it is a directory</li><li>{@link RecursiveDirectoryIterator::getSubPath} — Get sub path</li><li>{@link RecursiveDirectoryIterator::getSubPathname} — Get sub path and name</li><li>{@link RecursiveDirectoryIterator::hasChildren} — Returns whether current entry is a directory and not '.' or '..'</li><li>{@link RecursiveDirectoryIterator::key} — Return path and filename of current dir entry</li><li>{@link RecursiveDirectoryIterator::next} — Move to next entry</li><li>{@link RecursiveDirectoryIterator::rewind} — Rewind dir back to the start</li></ul></div>
*/
class RecursiveDirectoryIterator extends FilesystemIterator implements RecursiveIterator
{
    /**
     * Constructs a RecursiveDirectoryIterator
     * @link https://php.net/manual/en/recursivedirectoryiterator.construct.php
     * @param string $directory
     * @param int $flags [optional]
     * @throws UnexpectedValueException if the path cannot be found or is not a directory.
     * @since 5.1.2
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $directory,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags = FilesystemIterator::KEY_AS_PATHNAME|FilesystemIterator::CURRENT_AS_FILEINFO
    ) {}

/**
*<div id="recursivedirectoryiterator.haschildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveDirectoryIterator::hasChildren</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveDirectoryIterator::hasChildren</span> &mdash; <span class="dc-title">Returns whether current entry is a directory and not &#039;.&#039; or &#039;..&#039;</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivedirectoryiterator.haschildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveDirectoryIterator::hasChildren</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$allowLinks</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivedirectoryiterator.haschildren-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">allowLinks</span></dt>     <dd>      <p class="para">             </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivedirectoryiterator.haschildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns whether the current entry is a directory, but not &#039;.&#039; or &#039;..&#039;  </p> </div></div>
     * @return bool whether the current entry is a directory, but not '.' or '..'*/
    public function hasChildren(#[LanguageLevelTypeAware(['8.0' => 'bool'], default: '')] $allowLinks = false): bool {}

/**
*<div id="recursivedirectoryiterator.getchildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveDirectoryIterator::getChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveDirectoryIterator::getChildren</span> &mdash; <span class="dc-title">Returns an iterator for the current entry if it is a directory</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivedirectoryiterator.getchildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveDirectoryIterator::getChildren</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursivedirectoryiterator.php" class="type RecursiveDirectoryIterator" style="color:#EAB766">RecursiveDirectoryIterator</a></span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivedirectoryiterator.getchildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivedirectoryiterator.getchildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The filename, file information, or $this depending on the set flags.   See the <a href="https://www.php.net/manual/zh/class.filesystemiterator.php#filesystemiterator.constants" class="link">FilesystemIterator   constants</a>.  </p> </div></div>
     * @return RecursiveDirectoryIterator An iterator for the current entry, if it is a directory.*/
    public function getChildren(): RecursiveDirectoryIterator {}

/**
*<div id="recursivedirectoryiterator.getsubpath" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveDirectoryIterator::getSubPath</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveDirectoryIterator::getSubPath</span> &mdash; <span class="dc-title">Get sub path</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivedirectoryiterator.getsubpath-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveDirectoryIterator::getSubPath</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Returns the sub path relative to the directory given in the constructor.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivedirectoryiterator.getsubpath-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivedirectoryiterator.getsubpath-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The sub path.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-recursivedirectoryiterator.getsubpath-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">getSubPath()</strong></span> example</strong></p>     <div class="example-contents"><p>          </p></div>    <div class="example-contents">    <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000">$directory = '/tmp';<br />      <br />      $it = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($directory));<br />      <br />      foreach ($it as $file) {<br />          echo 'SubPathName: ' . $it-&gt;getSubPathName() . "\n";<br />          echo 'SubPath:     ' . $it-&gt;getSubPath() . "\n\n";<br />      }</span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">    <div class="cdata"><span>     SubPathName: fruit/apple.xml<br>     SubPath:     fruit<br>     <br>     SubPathName: stuff.xml<br>     SubPath:     <br>     <br>     SubPathName: veggies/carrot.xml<br>     SubPath:     veggies<br>    </span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-recursivedirectoryiterator.getsubpath-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link RecursiveDirectoryIterator::getSubPathName()} - Get sub path and name</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link RecursiveDirectoryIterator::key()} - Return path and filename of current dir entry</span></li>   </ul>  </span> </div></div>
     * @return string The sub path (sub directory).*/
    public function getSubPath(): string {}

/**
*<div id="recursivedirectoryiterator.getsubpathname" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveDirectoryIterator::getSubPathname</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveDirectoryIterator::getSubPathname</span> &mdash; <span class="dc-title">Get sub path and name</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivedirectoryiterator.getsubpathname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveDirectoryIterator::getSubPathname</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Gets the sub path and filename.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivedirectoryiterator.getsubpathname-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivedirectoryiterator.getsubpathname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The sub path (sub directory) and filename.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-recursivedirectoryiterator.getsubpathname-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">getSubPathname()</strong></span> example</strong></p>     <div class="example-contents"><p>          </p></div>    <div class="example-contents">    <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000">$directory = '/tmp';<br />      <br />      $it = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($directory));<br />      <br />      foreach ($it as $file) {<br />          echo 'SubPathName: ' . $it-&gt;getSubPathname() . "\n";<br />          echo 'SubPath:     ' . $it-&gt;getSubPath() . "\n\n";<br />      }</span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">    <div class="cdata"><span>     SubPathName: fruit/apple.xml<br>     SubPath:     fruit<br>     <br>     SubPathName: stuff.xml<br>     SubPath:     <br>     <br>     SubPathName: veggies/carrot.xml<br>     SubPath:     veggies<br>    </span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-recursivedirectoryiterator.getsubpathname-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link RecursiveDirectoryIterator::getSubPath()} - Get sub path</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link RecursiveDirectoryIterator::key()} - Return path and filename of current dir entry</span></li>   </ul>  </span> </div></div>
     * @return string The sub path (sub directory) and filename.*/
    public function getSubPathname(): string {}

/**
*<div id="recursivedirectoryiterator.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveDirectoryIterator::rewind</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveDirectoryIterator::rewind</span> &mdash; <span class="dc-title">Rewind dir back to the start</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivedirectoryiterator.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveDirectoryIterator::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivedirectoryiterator.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivedirectoryiterator.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function rewind() {}

/**
*<div id="recursivedirectoryiterator.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveDirectoryIterator::next</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveDirectoryIterator::next</span> &mdash; <span class="dc-title">Move to next entry</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivedirectoryiterator.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveDirectoryIterator::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivedirectoryiterator.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivedirectoryiterator.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function next() {}

/**
*<div id="recursivedirectoryiterator.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveDirectoryIterator::key</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveDirectoryIterator::key</span> &mdash; <span class="dc-title">Return path and filename of current dir entry</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivedirectoryiterator.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveDirectoryIterator::key</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivedirectoryiterator.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivedirectoryiterator.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The path and filename of the current dir entry.  </p> </div></div>
     * @return string the pathname or filename depending on the set flags.*/
    public function key() {}

    /**
     * The current file
     * @link https://php.net/manual/en/filesystemiterator.current.php
     * @return string|SplFileInfo|self The filename, file information, or $this depending on the set flags.
     * See the FilesystemIterator constants.
     */
    public function current() {}
}

/**
*<div id="class.globiterator" class="reference"> <h1 class="title">GlobIterator 类</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p>  <div class="section" id="globiterator.intro">   <h2 class="title">简介</h2>   <p class="para">    遍历一个文件系统行为类似于     <span class="function">{@link glob()}</span>。   </p>  </div>  <div class="section" id="globiterator.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">GlobIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.filesystemiterator.php" class="classname">FilesystemIterator</a>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.countable.php" class="interfacename">Countable</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::CURRENT_MODE_MASK</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::CURRENT_AS_PATHNAME</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::CURRENT_AS_FILEINFO</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::CURRENT_AS_SELF</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::KEY_MODE_MASK</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::KEY_AS_PATHNAME</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::FOLLOW_SYMLINKS</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::KEY_AS_FILENAME</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::NEW_CURRENT_AND_KEY</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::OTHER_MODE_MASK</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::SKIP_DOTS</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">FilesystemIterator::UNIX_PATHS</var>}</var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/globiterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$pattern</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/globiterator.count.php" class="methodname" style="color:#CC7832">count</a></span>(): <span class="type" style="color:#EAB766">int</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::current}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span>|<span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.filesystemiterator.php" class="type FilesystemIterator" style="color:#EAB766">FilesystemIterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::getFlags}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::key}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilesystemIterator::setFlags}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::getBasename}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$suffix</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::getExtension}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::getFilename}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::isDot}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::seek}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link DirectoryIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getATime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getBasename}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$suffix</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getCTime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getExtension}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFileInfo}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFilename}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getGroup}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getInode}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getLinkTarget}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getMTime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getOwner}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPath}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathInfo}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathname}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPerms}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getRealPath}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getSize}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getType}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isDir}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isExecutable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isFile}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isLink}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isReadable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isWritable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::openFile}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = &quot;r&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$useIncludePath</span><span class="initializer"> = <strong><span>false</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$context</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="type SplFileObject" style="color:#EAB766">SplFileObject</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::setFileClass}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileObject::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::setInfoClass}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileInfo::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link GlobIterator::__construct} — Construct a directory using glob</li><li>{@link GlobIterator::count} — Get the number of directories and files</li></ul></div>
*/
class GlobIterator extends FilesystemIterator implements Countable
{
    /**
     * Construct a directory using glob
     * @link https://php.net/manual/en/globiterator.construct.php
     * @param $pattern
     * @param int $flags [optional]
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $pattern,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags = FilesystemIterator::KEY_AS_PATHNAME|FilesystemIterator::CURRENT_AS_FILEINFO
    ) {}

/**
*<div id="globiterator.count" class="refentry"> <div class="refnamediv">  <h1 class="refname">GlobIterator::count</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">GlobIterator::count</span> &mdash; <span class="dc-title">Get the number of directories and files</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-globiterator.count-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>GlobIterator::count</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Gets the number of directories and files found by   the glob expression.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-globiterator.count-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-globiterator.count-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The number of returned directories and files, as an   <span class="type" style="color:#EAB766">int</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-globiterator.count-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>GlobIterator::count()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">GlobIterator</span><span style="color: #007700">(</span><span style="color: #DD0000">'*.xml'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"Matched %d item(s)\r\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">count</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Matched 8 item(s)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-globiterator.count-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link GlobIterator::__construct()} - Construct a directory using glob</span></li>    <li class="member"><span class="function">{@link count()} - 统计数组、Countable 对象中所有元素的数量</span></li>    <li class="member"><span class="function">{@link glob()} - 寻找与模式匹配的文件路径</span></li>   </ul>  </span> </div></div>
     * @return int<0,max> The number of returned directories and files, as an*/
    public function count(): int {}
}

/**
*<div id="class.splfileobject" class="reference"> <h1 class="title">SplFileObject 类</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>  <div class="section" id="splfileobject.intro">   <h2 class="title">简介</h2>   <p class="para">     SplFileObject 类为文件提供了一个面向对象接口。   </p>  </div>  <div class="section" id="splfileobject.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">SplFileObject</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="classname">SplFileInfo</a>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="interfacename">RecursiveIterator</a>,     <a href="https://www.php.net/manual/zh/class.seekableiterator.php" class="interfacename">SeekableIterator</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.splfileobject.php#splfileobject.constants.drop-new-line"><var class="varname">DROP_NEW_LINE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.splfileobject.php#splfileobject.constants.read-ahead"><var class="varname">READ_AHEAD</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.splfileobject.php#splfileobject.constants.skip-empty"><var class="varname">SKIP_EMPTY</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.splfileobject.php#splfileobject.constants.read-csv"><var class="varname">READ_CSV</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = &quot;r&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$useIncludePath</span><span class="initializer"> = <strong><span>false</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$context</span><span class="initializer"> = <strong><span>null</span></strong></span></span><br>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.eof.php" class="methodname" style="color:#CC7832">eof</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.fflush.php" class="methodname" style="color:#CC7832">fflush</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.fgetc.php" class="methodname" style="color:#CC7832">fgetc</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.fgetcsv.php" class="methodname" style="color:#CC7832">fgetcsv</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$separator</span><span class="initializer"> = &quot;,&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$enclosure</span><span class="initializer"> = &quot;\&quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$escape</span><span class="initializer"> = &quot;\\&quot;</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.fgets.php" class="methodname" style="color:#CC7832">fgets</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.fgetss.php" class="methodname" style="color:#CC7832">fgetss</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$allowable_tags</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.flock.php" class="methodname" style="color:#CC7832">flock</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$operation</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">&$wouldBlock</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.fpassthru.php" class="methodname" style="color:#CC7832">fpassthru</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.fputcsv.php" class="methodname" style="color:#CC7832">fputcsv</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$fields</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$separator</span><span class="initializer"> = &quot;,&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$enclosure</span><span class="initializer"> = &quot;\&quot;&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$escape</span><span class="initializer"> = &quot;\\&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$eol</span><span class="initializer"> = &quot;\n&quot;</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.fread.php" class="methodname" style="color:#CC7832">fread</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$length</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.fscanf.php" class="methodname" style="color:#CC7832">fscanf</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$format</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">&...$vars</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">null</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.fseek.php" class="methodname" style="color:#CC7832">fseek</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$whence</span><span class="initializer"> = <strong><span>SEEK_SET</span></strong></span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.fstat.php" class="methodname" style="color:#CC7832">fstat</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.ftell.php" class="methodname" style="color:#CC7832">ftell</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.ftruncate.php" class="methodname" style="color:#CC7832">ftruncate</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$size</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.fwrite.php" class="methodname" style="color:#CC7832">fwrite</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$length</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.getchildren.php" class="methodname" style="color:#CC7832">getChildren</a></span>(): <span class="type" style="color:#EAB766">null</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.getcsvcontrol.php" class="methodname" style="color:#CC7832">getCsvControl</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.getflags.php" class="methodname" style="color:#CC7832">getFlags</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.getmaxlinelen.php" class="methodname" style="color:#CC7832">getMaxLineLen</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.haschildren.php" class="methodname" style="color:#CC7832">hasChildren</a></span>(): <span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.seek.php" class="methodname" style="color:#CC7832">seek</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$line</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.setcsvcontrol.php" class="methodname" style="color:#CC7832">setCsvControl</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$separator</span><span class="initializer"> = &quot;,&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$enclosure</span><span class="initializer"> = &quot;\&quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$escape</span><span class="initializer"> = &quot;\\&quot;</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.setflags.php" class="methodname" style="color:#CC7832">setFlags</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.setmaxlinelen.php" class="methodname" style="color:#CC7832">setMaxLineLen</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$maxLength</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.tostring.php" class="methodname" style="color:#CC7832">__toString</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfileobject.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getATime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getBasename}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$suffix</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getCTime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getExtension}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFileInfo}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFilename}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getGroup}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getInode}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getLinkTarget}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getMTime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getOwner}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPath}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathInfo}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathname}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPerms}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getRealPath}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getSize}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getType}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isDir}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isExecutable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isFile}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isLink}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isReadable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isWritable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::openFile}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = &quot;r&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$useIncludePath</span><span class="initializer"> = <strong><span>false</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$context</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="type SplFileObject" style="color:#EAB766">SplFileObject</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::setFileClass}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileObject::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::setInfoClass}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileInfo::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div>   }</div>  </div>  <div class="section" id="splfileobject.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="splfileobject.constants.drop-new-line"><strong><span>SplFileObject::DROP_NEW_LINE</span></strong></dt>     <dd>      <p class="para">删除行尾的换行符。</p>     </dd>             <dt id="splfileobject.constants.read-ahead"><strong><span>SplFileObject::READ_AHEAD</span></strong></dt>     <dd>      <p class="para">使用 rewind 或 next 方法时，从文件中读取一行数据。</p>     </dd>             <dt id="splfileobject.constants.skip-empty"><strong><span>SplFileObject::SKIP_EMPTY</span></strong></dt>     <dd>      <p class="para">       跳过文件中的空白行。这需要启用       <strong><span>READ_AHEAD</span></strong>       标志，以达到预期的效果。      </p>     </dd>             <dt id="splfileobject.constants.read-csv"><strong><span>SplFileObject::READ_CSV</span></strong></dt>     <dd>      <p class="para">以 CSV 行的形式读取。</p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link SplFileObject::__construct} — Construct a new file object</li><li>{@link SplFileObject::current} — Retrieve current line of file</li><li>{@link SplFileObject::eof} — Reached end of file</li><li>{@link SplFileObject::fflush} — Flushes the output to the file</li><li>{@link SplFileObject::fgetc} — Gets character from file</li><li>{@link SplFileObject::fgetcsv} — Gets line from file and parse as CSV fields</li><li>{@link SplFileObject::fgets} — Gets line from file</li><li>{@link SplFileObject::fgetss} — Gets line from file and strip HTML tags</li><li>{@link SplFileObject::flock} — Portable file locking</li><li>{@link SplFileObject::fpassthru} — Output all remaining data on a file pointer</li><li>{@link SplFileObject::fputcsv} — Write a field array as a CSV line</li><li>{@link SplFileObject::fread} — Read from file</li><li>{@link SplFileObject::fscanf} — Parses input from file according to a format</li><li>{@link SplFileObject::fseek} — Seek to a position</li><li>{@link SplFileObject::fstat} — Gets information about the file</li><li>{@link SplFileObject::ftell} — Return current file position</li><li>{@link SplFileObject::ftruncate} — Truncates the file to a given length</li><li>{@link SplFileObject::fwrite} — Write to file</li><li>{@link SplFileObject::getChildren} — No purpose</li><li>{@link SplFileObject::getCsvControl} — Get the delimiter, enclosure and escape character for CSV</li><li>{@link SplFileObject::getCurrentLine} — 别名 SplFileObject::fgets</li><li>{@link SplFileObject::getFlags} — Gets flags for the SplFileObject</li><li>{@link SplFileObject::getMaxLineLen} — Get maximum line length</li><li>{@link SplFileObject::hasChildren} — SplFileObject does not have children</li><li>{@link SplFileObject::key} — Get line number</li><li>{@link SplFileObject::next} — Read next line</li><li>{@link SplFileObject::rewind} — Rewind the file to the first line</li><li>{@link SplFileObject::seek} — Seek to specified line</li><li>{@link SplFileObject::setCsvControl} — Set the delimiter, enclosure and escape character for CSV</li><li>{@link SplFileObject::setFlags} — Sets flags for the SplFileObject</li><li>{@link SplFileObject::setMaxLineLen} — Set maximum line length</li><li>{@link SplFileObject::__toString} — Returns the current line as a string</li><li>{@link SplFileObject::valid} — Not at EOF</li></ul></div>
*/
class SplFileObject extends SplFileInfo implements RecursiveIterator, SeekableIterator
{
    /**
     * Drop newlines at the end of a line.
     */
    public const DROP_NEW_LINE = 1;

    /**
     * Read on rewind/next.
     */
    public const READ_AHEAD = 2;

    /**
     * Skip empty lines in the file. This requires the {@see READ_AHEAD} flag to work as expected.
     */
    public const SKIP_EMPTY = 4;

    /**
     * Read lines as CSV rows.
     */
    public const READ_CSV = 8;

    /**
     * Construct a new file object.
     *
     * @link  https://php.net/manual/en/splfileobject.construct.php
     *
     * @param string $filename The file to open
     * @param string $mode [optional] The mode in which to open the file. See {@see fopen} for a list of allowed modes.
     * @param bool $useIncludePath [optional] Whether to search in the include_path for filename
     * @param resource $context [optional] A valid context resource created with {@see stream_context_create}
     *
     * @throws RuntimeException When the filename cannot be opened
     * @throws LogicException When the filename is a directory
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $filename,
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $mode = 'r',
        #[LanguageLevelTypeAware(['8.0' => 'bool'], default: '')] $useIncludePath = false,
        $context = null
    ) {}

/**
*<div id="splfileobject.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::rewind</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::rewind</span> &mdash; <span class="dc-title">Rewind the file to the first line</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Rewinds the file back to the first line.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splfileobject.rewind-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> if cannot be rewound.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.rewind-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::rewind()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"misc.txt"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Loop over whole file<br /></span><span style="color: #007700">foreach (</span><span style="color: #9876AA">$file </span><span style="color: #007700">as </span><span style="color: #9876AA">$line</span><span style="color: #007700">) { }<br /><br /></span><span style="color: #FF8000">// Rewind to first line<br /></span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// Output first line<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.rewind-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::current()} - Retrieve current line of file</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::key()} - Get line number</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::seek()} - Seek to specified line</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::next()} - Read next line</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::valid()} - Not at EOF</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function rewind(): void {}

/**
*<div id="splfileobject.eof" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::eof</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::eof</span> &mdash; <span class="dc-title">Reached end of file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.eof-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::eof</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Determine whether the end of file has been reached  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.eof-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.eof-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if file is at EOF, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.eof-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::eof()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"fruits.txt"</span><span style="color: #007700">);<br />while ( ! </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">eof</span><span style="color: #007700">()) {<br />    echo </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fgets</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>apple<br>banana<br>cherry<br>date<br>elderberry<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.eof-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::valid()} - Not at EOF</span></li>    <li class="member"><span class="function">{@link feof()} - 测试文件指针是否到了文件结束的位置</span></li>   </ul>  </span> </div></div>
     * @return bool true if file is at EOF, false otherwise.*/
    public function eof(): bool {}

/**
*<div id="splfileobject.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::valid</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::valid</span> &mdash; <span class="dc-title">Not at EOF</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Check whether EOF has been reached.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if not reached EOF, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.valid-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::valid()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Loop over a file, line by line<br /></span><span style="color: #9876AA">$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"file.txt"</span><span style="color: #007700">);<br />while (</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()) {<br />    echo </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fgets</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.valid-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::current()} - Retrieve current line of file</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::key()} - Get line number</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::seek()} - Seek to specified line</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::next()} - Read next line</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::rewind()} - Rewind the file to the first line</span></li>   </ul>  </span> </div></div>
     * @return bool true if not reached EOF, false otherwise.*/
    public function valid(): bool {}

/**
*<div id="splfileobject.fgets" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::fgets</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::fgets</span> &mdash; <span class="dc-title">Gets line from file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.fgets-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fgets</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Gets a line from the file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.fgets-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.fgets-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a string containing the next line from the file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splfileobject.fgets-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> if the file cannot be read.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.fgets-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fgets()</strong></span> example</strong></p>    <div class="example-contents"><p>This example simply outputs the contents of <span>file.txt</span> line-by-line.</p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"file.txt"</span><span style="color: #007700">);<br />while (!</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">eof</span><span style="color: #007700">()) {<br />    echo </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fgets</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.fgets-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link fgets()} - 从文件指针中读取一行</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::fgetss()} - Gets line from file and strip HTML tags</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::fgetc()} - Gets character from file</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::current()} - Retrieve current line of file</span></li>   </ul>  </span> </div></div>
     * @return string a string containing the next line from the file.*/
    public function fgets(): string {}

/**
*<div id="splfileobject.fread" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::fread</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.11, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::fread</span> &mdash; <span class="dc-title">Read from file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.fread-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fread</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$length</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Reads the given number of bytes from the file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.fread-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">length</span></dt>    <dd>     <span>      The number of bytes to read.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.fread-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the string read from the file  或者在失败时返回 <strong><span>false</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.fread-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fread()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Get contents of a file into a string<br /></span><span style="color: #9876AA">$filename </span><span style="color: #007700">= </span><span style="color: #DD0000">"/usr/local/something.txt"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$filename</span><span style="color: #007700">, </span><span style="color: #DD0000">"r"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$contents </span><span style="color: #007700">= </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fread</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getSize</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-splfileobject.fread-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    Note that <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fread()</strong></span> reads from the current    position of the file pointer. Use <span class="methodname" style="color:#CC7832">{@link SplFileObject::ftell()}</span>    to find the current position of the pointer and <span class="methodname" style="color:#CC7832">{@link SplFileObject::rewind()}</span>    (or <span class="methodname" style="color:#CC7832">{@link SplFileObject::fseek()}</span>) to rewind the pointer position.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.fread-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link fread()} - 读取文件（可安全用于二进制文件）</span></li>   </ul>  </span> </div></div>
     * @return string|false returns the string read from the file or FALSE on failure.*/
    public function fread(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $length): string|false {}

/**
*<div id="splfileobject.fgetcsv" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::fgetcsv</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::fgetcsv</span> &mdash; <span class="dc-title">Gets line from file and parse as CSV fields</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.fgetcsv-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fgetcsv</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$separator</span><span class="initializer"> = &quot;,&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$enclosure</span><span class="initializer"> = &quot;\&quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$escape</span><span class="initializer"> = &quot;\\&quot;</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Gets a line from the file which is in <abbr title="Comma Separated Value">CSV</abbr> format and returns an array containing the fields read.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    The locale settings are taken into account by this function. If    <span>LC_CTYPE</span> is e.g. <span>en_US.UTF-8</span>, files in    one-byte encodings may be read wrongly by this function.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.fgetcsv-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">separator</span></dt>     <dd>      <p class="para">       The field delimiter (one single-byte character only). Defaults as a comma or the value set using <span class="methodname" style="color:#CC7832">{@link SplFileObject::setCsvControl()}</span>.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">enclosure</span></dt>     <dd>      <p class="para">       The field enclosure character (one single-byte character only). Defaults as a double quotation mark or the value set using <span class="methodname" style="color:#CC7832">{@link SplFileObject::setCsvControl()}</span>.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">escape</span></dt>     <dd>      <p class="para">       The escape character (at most one single-byte character). Defaults as a backslash (<span>\</span>) or the value set using <span class="methodname" style="color:#CC7832">{@link SplFileObject::setCsvControl()}</span>.       An empty string (<span>&quot;&quot;</span>) disables the proprietary escape mechanism.      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <span class="simpara">        Usually an <span class="parameter" style="color:#3A95FF">enclosure</span> character is escaped inside        a field by doubling it; however, the <span class="parameter" style="color:#3A95FF">escape</span>        character can be used as an alternative. So for the default parameter        values <span>&quot;&quot;</span> and <span>\&quot;</span> have the same        meaning. Other than allowing to escape the        <span class="parameter" style="color:#3A95FF">enclosure</span> character the        <span class="parameter" style="color:#3A95FF">escape</span> character has no special meaning; it isn&#039;t        even meant to escape itself.       </span>      </p></blockquote>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.fgetcsv-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an indexed array containing the fields read, or <strong><span>false</span></strong> on error.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    A blank line in a CSV file will be returned as an array    comprising a single <strong><span>null</span></strong> field unless using <strong><span>SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE</span></strong>,     in which case empty lines are skipped.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-splfileobject.fgetcsv-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.4.0</td>       <td>        The <span class="parameter" style="color:#3A95FF">escape</span> parameter now also accepts an empty        string to disable the proprietary escape mechanism.       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.fgetcsv-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fgetcsv()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"data.csv"</span><span style="color: #007700">);<br />while (!</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">eof</span><span style="color: #007700">()) {<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fgetcsv</span><span style="color: #007700">());<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <strong><span>SplFileObject::READ_CSV</span></strong> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"animals.csv"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setFlags</span><span style="color: #007700">(</span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">::</span><span style="color: #9876AA">READ_CSV</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$file </span><span style="color: #007700">as </span><span style="color: #9876AA">$row</span><span style="color: #007700">) {<br />    list(</span><span style="color: #9876AA">$animal</span><span style="color: #007700">, </span><span style="color: #9876AA">$class</span><span style="color: #007700">, </span><span style="color: #9876AA">$legs</span><span style="color: #007700">) = </span><span style="color: #9876AA">$row</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"A %s is a %s with %d legs\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$animal</span><span style="color: #007700">, </span><span style="color: #9876AA">$class</span><span style="color: #007700">, </span><span style="color: #9876AA">$legs</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>Contents of animals.csv</p></div>    <div class="example-contents"><div class="txtcode"><span>crocodile,reptile,4<br>dolphin,mammal,0<br>duck,bird,2<br>koala,mammal,4<br>salmon,fish,0</span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>A crocodile is a reptile with 4 legs<br>A dolphin is a mammal with 0 legs<br>A duck is a bird with 2 legs<br>A koala is a mammal with 4 legs<br>A salmon is a fish with 0 legs<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.fgetcsv-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::setCsvControl()} - Set the delimiter, enclosure and escape character for CSV</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::setFlags()} - Sets flags for the SplFileObject</span></li>    <li class="member">{@link SplFileObject::READ_CSV}</li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::current()} - Retrieve current line of file</span></li>   </ul>  </span> </div></div>
     * @return array|false|null an indexed array containing the fields read, or false on error.*/
    public function fgetcsv(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $separator = ",",
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $enclosure = "\"",
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $escape = "\\"
    ) {}

/**
*<div id="splfileobject.fputcsv" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::fputcsv</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::fputcsv</span> &mdash; <span class="dc-title">Write a field array as a CSV line</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.fputcsv-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fputcsv</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$fields</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$separator</span><span class="initializer"> = &quot;,&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$enclosure</span><span class="initializer"> = &quot;\&quot;&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$escape</span><span class="initializer"> = &quot;\\&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$eol</span><span class="initializer"> = &quot;\n&quot;</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Writes the <span class="parameter" style="color:#3A95FF">fields</span> array to the file as a CSV line.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.fputcsv-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">fields</span></dt>    <dd>     <span>      An array of values.     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">separator</span></dt>    <dd>     <p class="para">      The optional <span class="parameter" style="color:#3A95FF">separator</span> parameter sets the field      delimiter (one single-byte character only).     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">enclosure</span></dt>    <dd>     <p class="para">      The optional <span class="parameter" style="color:#3A95FF">enclosure</span> parameter sets the field       enclosure (one single-byte character only).     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">escape</span></dt>    <dd>     <p class="para">      The optional <span class="parameter" style="color:#3A95FF">escape</span> parameter sets the      escape character (at most one single-byte character).      An empty string (<span>&quot;&quot;</span>) disables the proprietary escape mechanism.     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">eol</span></dt>    <dd>     <p class="para">      The optional <span class="parameter" style="color:#3A95FF">eol</span> parameter sets      a custom End of Line sequence.     </p>    </dd>     </dl>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    If an <span class="parameter" style="color:#3A95FF">enclosure</span> character is contained in a field,    it will be escaped by doubling it, unless it is immediately preceded by an    <span class="parameter" style="color:#3A95FF">escape</span>.   </p>  </p></blockquote>  </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.fputcsv-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the length of the written string 或者在失败时返回 <strong><span>false</span></strong>.  </p>  <p class="para">   Returns <strong><span>false</span></strong>, and does not write the CSV line to the file, if the   <span class="parameter" style="color:#3A95FF">separator</span> or <span class="parameter" style="color:#3A95FF">enclosure</span>   parameter is not a single character.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splfileobject.fputcsv-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   An <strong><span>E_WARNING</span></strong> level error is issued if the   <span class="parameter" style="color:#3A95FF">separator</span> or <span class="parameter" style="color:#3A95FF">enclosure</span>   parameter is not a single character.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-splfileobject.fputcsv-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.1.0</td>       <td>        The optional <span class="parameter" style="color:#3A95FF">eol</span> parameter has been added.       </td>      </tr>      <tr>       <td>7.4.0</td>       <td>        The <span class="parameter" style="color:#3A95FF">escape</span> parameter now also accepts an empty        string to disable the proprietary escape mechanism.       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.fputcsv-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fputcsv()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$list </span><span style="color: #007700">= array (<br />    array(</span><span style="color: #DD0000">'aaa'</span><span style="color: #007700">, </span><span style="color: #DD0000">'bbb'</span><span style="color: #007700">, </span><span style="color: #DD0000">'ccc'</span><span style="color: #007700">, </span><span style="color: #DD0000">'dddd'</span><span style="color: #007700">),<br />    array(</span><span style="color: #DD0000">'123'</span><span style="color: #007700">, </span><span style="color: #DD0000">'456'</span><span style="color: #007700">, </span><span style="color: #DD0000">'789'</span><span style="color: #007700">),<br />    array(</span><span style="color: #DD0000">'"aaa"'</span><span style="color: #007700">, </span><span style="color: #DD0000">'"bbb"'</span><span style="color: #007700">)<br />);<br /><br /></span><span style="color: #9876AA">$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">'file.csv'</span><span style="color: #007700">, </span><span style="color: #DD0000">'w'</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$list </span><span style="color: #007700">as </span><span style="color: #9876AA">$fields</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fputcsv</span><span style="color: #007700">(</span><span style="color: #9876AA">$fields</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>The above example will write the following to <span>file.csv</span>:</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>aaa,bbb,ccc,dddd<br>123,456,789<br>&quot;&quot;&quot;aaa&quot;&quot;&quot;,&quot;&quot;&quot;bbb&quot;&quot;&quot;<br><br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.fputcsv-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link fputcsv()} - 将行格式化为 CSV 并写入文件指针</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::fgetcsv()} - Gets line from file and parse as CSV fields</span></li>   </ul>  </span> </div></div>
     * @return int|false Returns the length of the written string or FALSE on failure.*/
    public function fputcsv(
        array $fields,
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $separator = ',',
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $enclosure = '"',
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $escape = "\\",
        #[PhpStormStubsElementAvailable('8.1')] string $eol = PHP_EOL
    ): int|false {}

/**
*<div id="splfileobject.setcsvcontrol" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::setCsvControl</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::setCsvControl</span> &mdash; <span class="dc-title">Set the delimiter, enclosure and escape character for CSV</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.setcsvcontrol-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::setCsvControl</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$separator</span><span class="initializer"> = &quot;,&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$enclosure</span><span class="initializer"> = &quot;\&quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$escape</span><span class="initializer"> = &quot;\\&quot;</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets the delimiter, enclosure and escape character for parsing CSV fields.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.setcsvcontrol-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">separator</span></dt>     <dd>      <p class="para">       The field delimiter (one single-byte character only).      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">enclosure</span></dt>     <dd>      <p class="para">       The field enclosure character (one single-byte character only).      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">escape</span></dt>     <dd>      <p class="para">       The field escape character (at most one single-byte character).       An empty string (<span>&quot;&quot;</span>) disables the proprietary escape mechanism.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.setcsvcontrol-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-splfileobject.setcsvcontrol-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.4.0</td>       <td>        The <span class="parameter" style="color:#3A95FF">escape</span> parameter now also accepts an empty        string to disable the proprietary escape mechanism.       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.setcsvcontrol-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::setCsvControl()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"data.csv"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setFlags</span><span style="color: #007700">(</span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">::</span><span style="color: #9876AA">READ_CSV</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setCsvControl</span><span style="color: #007700">(</span><span style="color: #DD0000">'|'</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$file </span><span style="color: #007700">as </span><span style="color: #9876AA">$row</span><span style="color: #007700">) {<br />    list (</span><span style="color: #9876AA">$fruit</span><span style="color: #007700">, </span><span style="color: #9876AA">$quantity</span><span style="color: #007700">) = </span><span style="color: #9876AA">$row</span><span style="color: #007700">;<br />    </span><span style="color: #FF8000">// Do something with values<br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>Contents of data.csv</p></div>    <div class="example-contents"><div class="txtcode"><span>&lt;?php<br>apples|20<br>bananas|14<br>cherries|87<br>?&gt;</span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.setcsvcontrol-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::getCsvControl()} - Get the delimiter, enclosure and escape character for CSV</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::fgetcsv()} - Gets line from file and parse as CSV fields</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function setCsvControl(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $separator = ",",
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $enclosure = "\"",
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $escape = "\\"
    ): void {}

/**
*<div id="splfileobject.getcsvcontrol" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::getCsvControl</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::getCsvControl</span> &mdash; <span class="dc-title">Get the delimiter, enclosure and escape character for CSV</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.getcsvcontrol-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::getCsvControl</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Gets the delimiter, enclosure and escape character used for parsing CSV fields.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.getcsvcontrol-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.getcsvcontrol-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an indexed array containing the delimiter, enclosure and escape character.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-splfileobject.getcsvcontrol-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.4.0</td>       <td>        The escape character can now be an empty string.       </td>      </tr>      <tr>       <td>7.0.10</td>       <td>        Added the escape character to the returned array.       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.getcsvcontrol-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::getCsvControl()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"data.txt"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getCsvControl</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; ,<br>    [1] =&gt; &quot;<br>    [2] =&gt; \<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.getcsvcontrol-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::setCsvControl()} - Set the delimiter, enclosure and escape character for CSV</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::fgetcsv()} - Gets line from file and parse as CSV fields</span></li>   </ul>  </span> </div></div>
     * @return array an indexed array containing the delimiter and enclosure character.*/
    public function getCsvControl(): array {}

/**
*<div id="splfileobject.flock" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::flock</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::flock</span> &mdash; <span class="dc-title">Portable file locking</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.flock-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::flock</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$operation</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">&$wouldBlock</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Locks or unlocks the file in the same portable way as <span class="function">{@link flock()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.flock-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">operation</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">operation</span> is one of the following:       <ul class="itemizedlist">        <li class="listitem">         <span class="simpara">          <strong><span>LOCK_SH</span></strong> to acquire a shared lock (reader).         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>LOCK_EX</span></strong> to acquire an exclusive lock (writer).         </span>        </li>        <li class="listitem">         <span class="simpara">          <strong><span>LOCK_UN</span></strong> to release a lock (shared or exclusive).         </span>        </li>       </ul>      </p>      <p class="para">       It is also possible to add <strong><span>LOCK_NB</span></strong> as a bitmask to one        of the above operations, if <span class="function">{@link flock()}</span> should not       block during the locking attempt.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">wouldBlock</span></dt>     <dd>      <p class="para">       Set to <strong><span>true</span></strong> if the lock would block (EWOULDBLOCK errno condition).      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.flock-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.flock-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::flock()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"/tmp/lock.txt"</span><span style="color: #007700">, </span><span style="color: #DD0000">"w"</span><span style="color: #007700">);<br />if (</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">flock</span><span style="color: #007700">(</span><span style="color: #9876AA">LOCK_EX</span><span style="color: #007700">)) { </span><span style="color: #FF8000">// do an exclusive lock<br />    </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ftruncate</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">);     </span><span style="color: #FF8000">// truncate file<br />    </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #DD0000">"Write something here\n"</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">flock</span><span style="color: #007700">(</span><span style="color: #9876AA">LOCK_UN</span><span style="color: #007700">);   </span><span style="color: #FF8000">// release the lock    <br /></span><span style="color: #007700">} else {<br />    echo </span><span style="color: #DD0000">"Couldn't get the lock!"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.flock-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link flock()} - 可移植的协同文件锁定</span></li>   </ul>  </span> </div></div>
     * @return bool true on success or false on failure.*/
    public function flock(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $operation, &$wouldBlock = null): bool {}

/**
*<div id="splfileobject.fflush" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::fflush</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::fflush</span> &mdash; <span class="dc-title">Flushes the output to the file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.fflush-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fflush</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Forces a write of all buffered output to the file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.fflush-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.fflush-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.fflush-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fflush()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">'misc.txt'</span><span style="color: #007700">, </span><span style="color: #DD0000">'r+'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #DD0000">"Foo"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fflush</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ftruncate</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ftell</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.fflush-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::fwrite()} - Write to file</span></li>   </ul>  </span> </div></div>
     * @return bool true on success or false on failure.*/
    public function fflush(): bool {}

/**
*<div id="splfileobject.ftell" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::ftell</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::ftell</span> &mdash; <span class="dc-title">Return current file position</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.ftell-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::ftell</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Returns the position of the file pointer which represents the current offset in the file stream.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.ftell-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.ftell-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    Returns the position of the file pointer as an integer, or <strong><span>false</span></strong> on error.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.ftell-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::ftell()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"/etc/passwd"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Read first line<br /></span><span style="color: #9876AA">$data </span><span style="color: #007700">= </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fgets</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// Where are we?<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ftell</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.ftell-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link ftell()} - 返回文件指针读/写的位置</span></li>   </ul>  </span> </div></div>
     * @return int|false the position of the file pointer as an integer, or false on error.*/
    public function ftell(): int|false {}

/**
*<div id="splfileobject.fseek" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::fseek</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::fseek</span> &mdash; <span class="dc-title">Seek to a position</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.fseek-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fseek</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$whence</span><span class="initializer"> = <strong><span>SEEK_SET</span></strong></span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Seek to a position in the file measured in bytes   from the beginning of the file, obtained by adding   <span class="parameter" style="color:#3A95FF">offset</span> to the position specified by   <span class="parameter" style="color:#3A95FF">whence</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.fseek-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">       The offset. A negative value can be used to move backwards through the file which       is useful when SEEK_END is used as the <span class="parameter" style="color:#3A95FF">whence</span> value.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">whence</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">whence</span> values are:       <ul class="simplelist">        <li class="member"><strong><span>SEEK_SET</span></strong> - Set position equal to <span class="parameter" style="color:#3A95FF">offset</span> bytes.</li>        <li class="member"><strong><span>SEEK_CUR</span></strong> - Set position to current location plus <span class="parameter" style="color:#3A95FF">offset</span>.</li>        <li class="member"><strong><span>SEEK_END</span></strong> - Set position to end-of-file plus <span class="parameter" style="color:#3A95FF">offset</span>.</li>       </ul>      </p>      <p class="para">       If <span class="parameter" style="color:#3A95FF">whence</span> is not specified, it is assumed to be <strong><span>SEEK_SET</span></strong>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.fseek-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns 0 if the seek was successful, -1 otherwise. Note that seeking   past EOF is not considered an error.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.fseek-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fseek()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"somefile.txt"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Read first line<br /></span><span style="color: #9876AA">$data </span><span style="color: #007700">= </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fgets</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// Move back to the beginning of the file<br />// Same as $file-&gt;rewind();<br /></span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fseek</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.fseek-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link fseek()} - 在文件指针中定位</span></li>   </ul>  </span> </div></div>
     * @return int 0 if the seek was successful, -1 otherwise. Note that seeking*/
    public function fseek(
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $offset,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $whence = SEEK_SET
    ): int {}

/**
*<div id="splfileobject.fgetc" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::fgetc</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::fgetc</span> &mdash; <span class="dc-title">Gets character from file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.fgetc-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fgetc</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Gets a character from the file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.fgetc-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.fgetc-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a string containing a single character read from the file or <strong><span>false</span></strong> on EOF.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数可能返回布尔值<strong><span>false</span></strong>，但也可能返回等同于 <strong><span>false</span></strong> 的非布尔值。请阅读 <a href="https://www.php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">===运算符</a>来测试此函数的返回值。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.fgetc-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fgetc()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">'file.txt'</span><span style="color: #007700">);<br />while (</span><span style="color: #9876AA">false </span><span style="color: #007700">!== (</span><span style="color: #9876AA">$char </span><span style="color: #007700">= </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fgetc</span><span style="color: #007700">())) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$char</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.fgetc-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::fgets()} - Gets line from file</span></li>   </ul>  </span> </div></div>
     * @return string|false a string containing a single character read from the file or false on EOF.*/
    public function fgetc(): string|false {}

/**
*<div id="splfileobject.fpassthru" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::fpassthru</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::fpassthru</span> &mdash; <span class="dc-title">Output all remaining data on a file pointer</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.fpassthru-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fpassthru</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Reads to EOF on the given file pointer from the current position and   writes the results to the output buffer.  </p>  <p class="para">   You may need to call <span class="methodname" style="color:#CC7832">{@link SplFileObject::rewind()}</span> to reset the file   pointer to the beginning of the file if you have already written data   to the file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.fpassthru-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.fpassthru-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the number of characters read from <span class="parameter" style="color:#3A95FF">handle</span>   and passed through to the output.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.fpassthru-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fpassthru()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">// Open the file in binary mode<br /></span><span style="color: #9876AA">$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"./img/ok.png"</span><span style="color: #007700">, </span><span style="color: #DD0000">"rb"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Send the right headers<br /></span><span style="color: #9876AA">header</span><span style="color: #007700">(</span><span style="color: #DD0000">"Content-Type: image/png"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">header</span><span style="color: #007700">(</span><span style="color: #DD0000">"Content-Length: " </span><span style="color: #007700">. </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getSize</span><span style="color: #007700">());<br /><br /></span><span style="color: #FF8000">// Dump the picture and end script<br /></span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fpassthru</span><span style="color: #007700">();<br />exit;<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.fpassthru-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link fpassthru()} - 输出文件指针处的所有剩余数据</span></li>   </ul>  </span> </div></div>
     * @return int the number of characters read from <i>handle</i>*/
    public function fpassthru(): int {}

/**
*<div id="splfileobject.fgetss" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::fgetss</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7)</p><p class="refpurpose"><span class="refname">SplFileObject::fgetss</span> &mdash; <span class="dc-title">Gets line from file and strip HTML tags</span></p> </div> <div id="splfileobject.fgetss-refsynopsisdiv">   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数已自 PHP 7.3.0起<em>弃用</em>，自 PHP 8.0.0 起<em>移除</em>。强烈建议不要依赖本函数。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.fgetss-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fgetss</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$allowable_tags</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Identical to <span class="methodname" style="color:#CC7832">{@link SplFileObject::fgets()}</span>, except that   <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fgetss()</strong></span> attempts to strip any HTML and PHP tags from   the text it reads.   The function retains the parsing state from call to call, and as such is not   equivalent to calling <span class="function">{@link strip_tags()}</span> on the return value of   <span class="methodname" style="color:#CC7832">{@link SplFileObject::fgets()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.fgetss-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">allowable_tags</span></dt>     <dd>      <p class="para">       Optional parameter to specify tags which should not be stripped.       </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.fgetss-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a string containing the next line of the file with HTML and PHP   code stripped, or <strong><span>false</span></strong> on error.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.fgetss-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fgetss()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$str </span><span style="color: #007700">= &lt;&lt;&lt;EOD<br /></span><span style="color: #DD0000">&lt;html&gt;&lt;body&gt;<br /> &lt;p&gt;Welcome! Today is the &lt;?php echo(date('jS')); ?&gt; of &lt;?= date('F'); ?&gt;.&lt;/p&gt;<br />&lt;/body&gt;&lt;/html&gt;<br />Text outside of the HTML block.<br /></span><span style="color: #007700">EOD;<br /></span><span style="color: #9876AA">file_put_contents</span><span style="color: #007700">(</span><span style="color: #DD0000">"sample.php"</span><span style="color: #007700">, </span><span style="color: #9876AA">$str</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"sample.php"</span><span style="color: #007700">);<br />while (!</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">eof</span><span style="color: #007700">()) {<br />    echo </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fgetss</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span><br> Welcome! Today is the  of .<br><br>Text outside of the HTML block.<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.fgetss-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link fgetss()} - 从文件指针中读取一行并过滤掉 HTML 标记</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::fgets()} - Gets line from file</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::fgetc()} - Gets character from file</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::current()} - Retrieve current line of file</span></li>    <li class="member">The <a href="https://www.php.net/manual/zh/filters.string.php#filters.string.strip_tags" class="link">string.strip_tags</a> filter</li>   </ul>  </span> </div></div>
     * @return string|false a string containing the next line of the file with HTML and PHP*/
    public function fgetss($allowable_tags = null) {}

/**
*<div id="splfileobject.fscanf" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::fscanf</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::fscanf</span> &mdash; <span class="dc-title">Parses input from file according to a format</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.fscanf-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fscanf</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$format</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">&...$vars</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">null</span></span></div>  <p class="para rdfs-comment">   Reads a line from the file and interprets it according to the specified <span class="parameter" style="color:#3A95FF">format</span>.  </p>  <p class="para">   Any whitespace in the <span class="parameter" style="color:#3A95FF">format</span> string matches any whitespace in the line from the file.   This means that even a tab (<span>\t</span>) in the format string can match a single space character in the input stream.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.fscanf-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">format</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">string</span> 的格式解释，在 <span class="function">{@link sprintf()}</span> 的文档中进行了描述，但有以下区别：       <ul class="simplelist">        <li class="member">         函数不支持区域设置。        </li>        <li class="member">         不支持 <span>F</span>、<span>g</span>、<span>G</span> 和 <span>b</span>。        </li>        <li class="member">         <span>D</span> 代表十进制数字。        </li>        <li class="member">         <span>i</span> stands for integer with base detection.        </li>        <li class="member">         <span>n</span> 代表到目前为止处理的字符数。        </li>        <li class="member">         <span>s</span> 在任何空白字符处停止阅读。        </li>        <li class="member">         <span>*</span> 代替 <span>argnum$</span> 禁止分配此转换规范。        </li>       </ul>      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">vars</span></dt>     <dd>      <p class="para">       The optional assigned values.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.fscanf-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   If only one parameter is passed to this method, the values parsed will be   returned as an array. Otherwise, if optional parameters are passed, the   function will return the number of assigned values. The optional   parameters must be passed by reference.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.fscanf-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fscanf()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"misc.txt"</span><span style="color: #007700">);<br />while (</span><span style="color: #9876AA">$userinfo </span><span style="color: #007700">= </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fscanf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%s %s %s"</span><span style="color: #007700">)) {<br />    list (</span><span style="color: #9876AA">$name</span><span style="color: #007700">, </span><span style="color: #9876AA">$profession</span><span style="color: #007700">, </span><span style="color: #9876AA">$countrycode</span><span style="color: #007700">) = </span><span style="color: #9876AA">$userinfo</span><span style="color: #007700">;<br />    </span><span style="color: #FF8000">// Do something with $name $profession $countrycode<br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>Contents of users.txt</p></div>    <div class="example-contents"><div class="txtcode"><span>javier   argonaut    pe<br>hiroshi  sculptor    jp<br>robert   slacker     us<br>luigi    florist     it</span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.fscanf-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link fscanf()} - 从文件中格式化输入</span></li>    <li class="member"><span class="function">{@link sscanf()} - 根据指定格式解析输入的字符</span></li>    <li class="member"><span class="function">{@link printf()} - 输出格式化字符串</span></li>    <li class="member"><span class="function">{@link sprintf()} - 返回格式化字符串</span></li>   </ul>  </span> </div></div>
     * @return array|int|null If only one parameter is passed to this method, the values parsed will be*/
    public function fscanf(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $format,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] &...$vars
    ): array|int|null {}

/**
*<div id="splfileobject.fwrite" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::fwrite</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::fwrite</span> &mdash; <span class="dc-title">Write to file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.fwrite-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fwrite</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$length</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Writes the contents of <span class="parameter" style="color:#3A95FF">string</span> to the file  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.fwrite-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">data</span></dt>     <dd>      <p class="para">       The string to be written to the file.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">length</span></dt>     <dd>      <p class="para">       If the <span class="parameter" style="color:#3A95FF">length</span> argument is given, writing will       stop after <span class="parameter" style="color:#3A95FF">length</span> bytes have been written or       the end of <span class="parameter" style="color:#3A95FF">string</span> is reached, whichever comes       first.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.fwrite-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the number of bytes written, or <strong><span>false</span></strong> on error.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-splfileobject.fwrite-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>7.4.0</td>      <td>       The function now returns <strong><span>false</span></strong> instead of zero on failure.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.fwrite-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fwrite()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"fwrite.txt"</span><span style="color: #007700">, </span><span style="color: #DD0000">"w"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$written </span><span style="color: #007700">= </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #DD0000">"12345"</span><span style="color: #007700">);<br />echo </span><span style="color: #DD0000">"Wrote </span><span style="color: #9876AA">$written</span><span style="color: #DD0000"> bytes to file"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Wrote 5 bytes to file<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.fwrite-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link fwrite()} - 写入文件（可安全用于二进制文件）</span></li>   </ul>  </span> </div></div>
     * @return int|false the number of bytes written, or 0 (false since 7.4) on error.*/
    public function fwrite(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $data,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $length = 0
    ): int|false {}

/**
*<div id="splfileobject.fstat" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::fstat</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::fstat</span> &mdash; <span class="dc-title">Gets information about the file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.fstat-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fstat</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Gathers the statistics of the file. Behaves identically to <span class="function">{@link fstat()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.fstat-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.fstat-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an array with the statistics of the file; the format of the array   is described in detail on the <span class="function">{@link stat()}</span> manual page.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.fstat-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::fstat()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"/etc/passwd"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$stat </span><span style="color: #007700">= </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fstat</span><span style="color: #007700">();<br /><br /></span><span style="color: #FF8000">// Print only the associative part<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_slice</span><span style="color: #007700">(</span><span style="color: #9876AA">$stat</span><span style="color: #007700">, </span><span style="color: #9876AA">13</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [dev] =&gt; 771<br>    [ino] =&gt; 488704<br>    [mode] =&gt; 33188<br>    [nlink] =&gt; 1<br>    [uid] =&gt; 0<br>    [gid] =&gt; 0<br>    [rdev] =&gt; 0<br>    [size] =&gt; 1114<br>    [atime] =&gt; 1061067181<br>    [mtime] =&gt; 1056136526<br>    [ctime] =&gt; 1056136526<br>    [blksize] =&gt; 4096<br>    [blocks] =&gt; 8<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.fstat-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link fstat()} - 通过已打开的文件指针取得文件信息</span></li>    <li class="member"><span class="function">{@link stat()} - 给出文件的信息</span></li>   </ul>  </span> </div></div>
     * @return array an array with the statistics of the file; the format of the array*/
    public function fstat(): array {}

/**
*<div id="splfileobject.ftruncate" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::ftruncate</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::ftruncate</span> &mdash; <span class="dc-title">Truncates the file to a given length</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.ftruncate-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::ftruncate</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$size</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Truncates the file to <span class="parameter" style="color:#3A95FF">size</span> bytes.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.ftruncate-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">size</span></dt>     <dd>      <p class="para">       The size to truncate to.      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <p class="para">        If <span class="parameter" style="color:#3A95FF">size</span> is larger than the file it is extended with null bytes.       </p>       <p class="para">        If <span class="parameter" style="color:#3A95FF">size</span> is smaller than the file, the extra data will be lost.       </p>      </p></blockquote>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.ftruncate-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.ftruncate-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::ftruncate()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Create file containing "Hello World!"<br /></span><span style="color: #9876AA">$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"/tmp/ftruncate"</span><span style="color: #007700">, </span><span style="color: #DD0000">"w+"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #DD0000">"Hello World!"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Truncate to 5 bytes<br /></span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ftruncate</span><span style="color: #007700">(</span><span style="color: #9876AA">5</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Rewind and read data<br /></span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">();<br />echo </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">fgets</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Hello<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.ftruncate-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link ftruncate()} - 将文件截断到指定的长度</span></li>   </ul>  </span> </div></div>
     * @return bool true on success or false on failure.*/
    public function ftruncate(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $size): bool {}

/**
*<div id="splfileobject.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::current</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::current</span> &mdash; <span class="dc-title">Retrieve current line of file</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::current</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Retrieves the current line of the file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Retrieves the current line of the file. If the <strong><span>SplFileObject::READ_CSV</span></strong> flag is set, this method returns an array containing the current line parsed as CSV data.   If the end of the file is reached, <strong><span>false</span></strong> is returned.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.current-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::current()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$file </span><span style="color: #007700">as </span><span style="color: #9876AA">$k </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$line</span><span style="color: #007700">) {<br />   echo (</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">() + </span><span style="color: #9876AA">1</span><span style="color: #007700">) . </span><span style="color: #DD0000">': ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>1: &lt;?php<br>2: $file = new SplFileObject(__FILE__);<br>3: foreach ($file as $line) {<br>4:     echo ($file-&gt;key() + 1) . &#039;: &#039; . $file-&gt;current();<br>5: }<br>6: ?&gt;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.current-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::key()} - Get line number</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::seek()} - Seek to specified line</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::next()} - Read next line</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::rewind()} - Rewind the file to the first line</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::valid()} - Not at EOF</span></li>   </ul>  </span> </div></div>
     * @return string|array|false Retrieves the current line of the file. If the <b>SplFileObject::READ_CSV</b> flag is set, this method returns an array containing the current line parsed as CSV data.*/
    public function current(): string|array|false {}

/**
*<div id="splfileobject.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::key</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::key</span> &mdash; <span class="dc-title">Get line number</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::key</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Gets the current line number.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    This number may not reflect the actual line number in the file     if <span class="methodname" style="color:#CC7832">{@link SplFileObject::setMaxLineLen()}</span> is used to     read fixed lengths of the file.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current line number.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.key-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::key()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"lipsum.txt"</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$file </span><span style="color: #007700">as </span><span style="color: #9876AA">$line</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">() . </span><span style="color: #DD0000">". " </span><span style="color: #007700">. </span><span style="color: #9876AA">$line</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>0. Lorem ipsum dolor sit amet, consectetur adipiscing elit. <br>1. Duis nec sapien felis, ac sodales nisl. <br>2. Lorem ipsum dolor sit amet, consectetur adipiscing elit.<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::key()</strong></span> example with <span class="methodname" style="color:#CC7832">{@link SplFileObject::setMaxLineLen()}</span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"lipsum.txt"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setMaxLineLen</span><span style="color: #007700">(</span><span style="color: #9876AA">20</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$file </span><span style="color: #007700">as </span><span style="color: #9876AA">$line</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">() . </span><span style="color: #DD0000">". " </span><span style="color: #007700">. </span><span style="color: #9876AA">$line </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>0. Lorem ipsum dolor s<br>1. it amet, consectetu<br>2. r adipiscing elit. <br>3. <br><br>4. Duis nec sapien fel<br>5. is, ac sodales nisl<br>6. . <br><br>7. Lorem ipsum dolor s<br>8. it amet, consectetu<br>9. r adipiscing elit.<br><br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.key-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::current()} - Retrieve current line of file</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::seek()} - Seek to specified line</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::next()} - Read next line</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::rewind()} - Rewind the file to the first line</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::valid()} - Not at EOF</span></li>   </ul>  </span> </div></div>
     * @return int the current line number.*/
    public function key(): int {}

/**
*<div id="splfileobject.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::next</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::next</span> &mdash; <span class="dc-title">Read next line</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Moves ahead to the next line in the file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.next-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::next()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Read through file line by line<br /></span><span style="color: #9876AA">$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"misc.txt"</span><span style="color: #007700">);<br />while (!</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">eof</span><span style="color: #007700">()) {<br />    echo </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">();<br />    </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.next-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::current()} - Retrieve current line of file</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::key()} - Get line number</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::seek()} - Seek to specified line</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::rewind()} - Rewind the file to the first line</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::valid()} - Not at EOF</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function next(): void {}

/**
*<div id="splfileobject.setflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::setFlags</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::setFlags</span> &mdash; <span class="dc-title">Sets flags for the SplFileObject</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.setflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::setFlags</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets the flags to be used by the <span class="classname"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="classname">SplFileObject</a></span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.setflags-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       Bit mask of the flags to set. See        <a href="https://www.php.net/manual/zh/class.splfileobject.php#splfileobject.constants" class="link">SplFileObject constants</a>        for the available flags.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.setflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.setflags-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::setFlags()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"data.csv"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setFlags</span><span style="color: #007700">(</span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">::</span><span style="color: #9876AA">READ_CSV</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$file </span><span style="color: #007700">as </span><span style="color: #9876AA">$fields</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$fields</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.setflags-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::getFlags()} - Gets flags for the SplFileObject</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function setFlags(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags): void {}

/**
*<div id="splfileobject.getflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::getFlags</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::getFlags</span> &mdash; <span class="dc-title">Gets flags for the SplFileObject</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.getflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::getFlags</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Gets the flags set for an instance of SplFileObject as an <span class="type" style="color:#EAB766">int</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.getflags-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.getflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an <span class="type" style="color:#EAB766">int</span> representing the flags.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.getflags-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::getFlags()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">, </span><span style="color: #DD0000">"r"</span><span style="color: #007700">);<br /><br />if (</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFlags</span><span style="color: #007700">() &amp; </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">::</span><span style="color: #9876AA">SKIP_EMPTY</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"Skipping empty lines\n"</span><span style="color: #007700">;<br />} else {<br />    echo </span><span style="color: #DD0000">"Not skipping empty lines\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setFlags</span><span style="color: #007700">(</span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">::</span><span style="color: #9876AA">SKIP_EMPTY</span><span style="color: #007700">);<br /><br />if (</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFlags</span><span style="color: #007700">() &amp; </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">::</span><span style="color: #9876AA">SKIP_EMPTY</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"Skipping empty lines\n"</span><span style="color: #007700">;<br />} else {<br />    echo </span><span style="color: #DD0000">"Not skipping empty lines\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Not skipping empty lines<br>Skipping empty lines<br><br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.getflags-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::setFlags()} - Sets flags for the SplFileObject</span></li>   </ul>  </span> </div></div>
     * @return int an integer representing the flags.*/
    public function getFlags(): int {}

/**
*<div id="splfileobject.setmaxlinelen" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::setMaxLineLen</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::setMaxLineLen</span> &mdash; <span class="dc-title">Set maximum line length</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.setmaxlinelen-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::setMaxLineLen</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$maxLength</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets the maximum length of a line to be read.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.setmaxlinelen-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">maxLength</span></dt>     <dd>      <p class="para">       The maximum length of a line.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.setmaxlinelen-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splfileobject.setmaxlinelen-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.domainexception.php" class="classname">DomainException</a></span> when   <span class="parameter" style="color:#3A95FF">maxLength</span> is less than zero.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.setmaxlinelen-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::setMaxLineLen()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"lipsum.txt"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setMaxLineLen</span><span style="color: #007700">(</span><span style="color: #9876AA">20</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$file </span><span style="color: #007700">as </span><span style="color: #9876AA">$line</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$line </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>Contents of lipsum.txt</p></div>    <div class="example-contents"><div class="txtcode"><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.<br>Duis nec sapien felis, ac sodales nisl.<br>Nulla vitae magna vitae purus aliquet consequat.</span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Lorem ipsum dolor s<br>it amet, consectetu<br>r adipiscing elit.<br><br>Duis nec sapien fel<br>is, ac sodales nisl<br>.<br><br>Nulla vitae magna v<br>itae purus aliquet <br>consequat.<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.setmaxlinelen-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::getMaxLineLen()} - Get maximum line length</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function setMaxLineLen(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $maxLength): void {}

/**
*<div id="splfileobject.getmaxlinelen" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::getMaxLineLen</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::getMaxLineLen</span> &mdash; <span class="dc-title">Get maximum line length</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.getmaxlinelen-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::getMaxLineLen</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Gets the maximum line length as set by <span class="methodname" style="color:#CC7832">{@link SplFileObject::setMaxLineLen()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.getmaxlinelen-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.getmaxlinelen-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the maximum line length if one has been set with   <span class="methodname" style="color:#CC7832">{@link SplFileObject::setMaxLineLen()}</span>, default is <span>0</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.getmaxlinelen-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::getMaxLineLen()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #DD0000">"file.txt"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMaxLineLen</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setMaxLineLen</span><span style="color: #007700">(</span><span style="color: #9876AA">20</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMaxLineLen</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(0)<br>int(20)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.getmaxlinelen-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::setMaxLineLen()} - Set maximum line length</span></li>   </ul>  </span> </div></div>
     * @return int<0, max> the maximum line length if one has been set with*/
    public function getMaxLineLen(): int {}

/**
*<div id="splfileobject.haschildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::hasChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::hasChildren</span> &mdash; <span class="dc-title">SplFileObject does not have children</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.haschildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::hasChildren</strong></span>(): <span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></div>  <p class="para rdfs-comment">   An <span class="classname"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="classname">SplFileObject</a></span> does not have children so this method always return <strong><span>false</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.haschildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.haschildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>false</span></strong>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.haschildren-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link RecursiveIterator::hasChildren()} - Returns if an iterator can be created for the current entry</span></li>   </ul>  </span> </div></div>
     * @return bool false*/
    public function hasChildren() {}

/**
*<div id="splfileobject.getchildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::getChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::getChildren</span> &mdash; <span class="dc-title">No purpose</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.getchildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::getChildren</strong></span>(): <span class="type" style="color:#EAB766">null</span></div>  <p class="para rdfs-comment">   An <span class="classname"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="classname">SplFileObject</a></span> does not have children so this method returns <strong><span>null</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.getchildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.getchildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>null</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.getchildren-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link RecursiveIterator::getChildren()} - Returns an iterator for the current entry</span></li>   </ul>  </span> </div></div>
     * @return null|RecursiveIterator An SplFileObject does not have children so this method returns NULL.*/
    public function getChildren() {}

/**
*<div id="splfileobject.seek" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::seek</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::seek</span> &mdash; <span class="dc-title">Seek to specified line</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.seek-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFileObject::seek</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$line</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Seek to specified line in the file.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfileobject.seek-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">line</span></dt>     <dd>      <p class="para">       The zero-based line number to seek to.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfileobject.seek-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splfileobject.seek-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.logicexception.php" class="classname">LogicException</a></span> if the    <span class="parameter" style="color:#3A95FF">line</span> is negative.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfileobject.seek-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFileObject::seek()</strong></span> example</strong></p>    <div class="example-contents"><p>This example outputs the third line of the script which is found at position 2.</p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$file </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFileObject</span><span style="color: #007700">(</span><span style="color: #9876AA">__FILE__</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">seek</span><span style="color: #007700">(</span><span style="color: #9876AA">2</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>$file-&gt;seek(2);<br><br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfileobject.seek-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::current()} - Retrieve current line of file</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::key()} - Get line number</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::next()} - Read next line</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::rewind()} - Rewind the file to the first line</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFileObject::valid()} - Not at EOF</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function seek(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $line): void {}

/**
*<div id="splfileobject.getcurrentline" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFileObject::getCurrentLine</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFileObject::getCurrentLine</span> &mdash; <span class="dc-title">别名 <span class="methodname" style="color:#CC7832">{@link SplFileObject::fgets()}</span></span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfileobject.getcurrentline-description">  <h3 class="title">说明</h3>  <p class="simpara">   此方法是该方法的别名： <span class="methodname" style="color:#CC7832">{@link SplFileObject::fgets()}</span>.  </p> </div></div>
     * @return string Returns a string containing the next line from the file.*/
    public function getCurrentLine(): string {}

    /**
     * Alias of <b>SplFileObject::current</b>
     * @link https://php.net/manual/en/splfileobject.tostring.php
     */
    #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')]
    public function __toString() {}
}

/**
*<div id="class.spltempfileobject" class="reference"> <h1 class="title">The SplTempFileObject class</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p>  <div class="section" id="spltempfileobject.intro">   <h2 class="title">简介</h2>   <p class="para">    The SplTempFileObject class offers an object-oriented interface for a temporary file.   </p>  </div>  <div class="section" id="spltempfileobject.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">SplTempFileObject</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.splfileobject.php" class="classname">SplFileObject</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">SplFileObject::DROP_NEW_LINE</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">SplFileObject::READ_AHEAD</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">SplFileObject::SKIP_EMPTY</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">SplFileObject::READ_CSV</var>}</var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spltempfileobject.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$maxMemory</span><span class="initializer"> = 2 * 1024 * 1024</span></span>)</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::current}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::eof}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::fflush}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::fgetc}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::fgetcsv}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$separator</span><span class="initializer"> = &quot;,&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$enclosure</span><span class="initializer"> = &quot;\&quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$escape</span><span class="initializer"> = &quot;\\&quot;</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::fgets}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::fgetss}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$allowable_tags</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::flock}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$operation</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">&$wouldBlock</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::fpassthru}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::fputcsv}</span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$fields</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$separator</span><span class="initializer"> = &quot;,&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$enclosure</span><span class="initializer"> = &quot;\&quot;&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$escape</span><span class="initializer"> = &quot;\\&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$eol</span><span class="initializer"> = &quot;\n&quot;</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::fread}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$length</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::fscanf}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$format</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">&...$vars</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">null</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::fseek}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$whence</span><span class="initializer"> = <strong><span>SEEK_SET</span></strong></span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::fstat}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::ftell}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::ftruncate}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$size</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::fwrite}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$length</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::getChildren}</span>(): <span class="type" style="color:#EAB766">null</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::getCsvControl}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::getFlags}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::getMaxLineLen}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::hasChildren}</span>(): <span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::key}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::seek}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$line</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::setCsvControl}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$separator</span><span class="initializer"> = &quot;,&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$enclosure</span><span class="initializer"> = &quot;\&quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$escape</span><span class="initializer"> = &quot;\\&quot;</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::setFlags}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::setMaxLineLen}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$maxLength</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileObject::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getATime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getBasename}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$suffix</span><span class="initializer"> = &quot;&quot;</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getCTime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getExtension}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFileInfo}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getFilename}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getGroup}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getInode}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getLinkTarget}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getMTime}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getOwner}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPath}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathInfo}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileinfo.php" class="type SplFileInfo" style="color:#EAB766">SplFileInfo</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPathname}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getPerms}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getRealPath}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getSize}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::getType}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isDir}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isExecutable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isFile}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isLink}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isReadable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::isWritable}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::openFile}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = &quot;r&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$useIncludePath</span><span class="initializer"> = <strong><span>false</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$context</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfileobject.php" class="type SplFileObject" style="color:#EAB766">SplFileObject</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::setFileClass}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileObject::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::setInfoClass}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = SplFileInfo::class</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplFileInfo::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link SplTempFileObject::__construct} — Construct a new temporary file object</li></ul></div>
*/
class SplTempFileObject extends SplFileObject
{
    /**
     * Construct a new temporary file object
     * @link https://php.net/manual/en/spltempfileobject.construct.php
     * @param int $maxMemory [optional]
     * @throws RuntimeException if an error occurs.
     * @since 5.1.2
     */
    public function __construct(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $maxMemory = 2097152) {}
}

/**
*<div id="class.spldoublylinkedlist" class="reference"> <h1 class="title">SplDoublyLinkedList 类</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p>   <div class="section" id="spldoublylinkedlist.intro">   <h2 class="title">简介</h2>   <p class="para">    SplDoublyLinkedList 类提供双向链表的主要功能。   </p>  </div>   <div class="section" id="spldoublylinkedlist.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">SplDoublyLinkedList</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a>,     <a href="https://www.php.net/manual/zh/class.countable.php" class="interfacename">Countable</a>,     <a href="https://www.php.net/manual/zh/class.arrayaccess.php" class="interfacename">ArrayAccess</a>,     <a href="https://www.php.net/manual/zh/class.serializable.php" class="interfacename">Serializable</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.spldoublylinkedlist.php#spldoublylinkedlist.constants.it-mode-lifo"><var class="varname">IT_MODE_LIFO</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.spldoublylinkedlist.php#spldoublylinkedlist.constants.it-mode-fifo"><var class="varname">IT_MODE_FIFO</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.spldoublylinkedlist.php#spldoublylinkedlist.constants.it-mode-delete"><var class="varname">IT_MODE_DELETE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.spldoublylinkedlist.php#spldoublylinkedlist.constants.it-mode-keep"><var class="varname">IT_MODE_KEEP</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.add.php" class="methodname" style="color:#CC7832">add</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.bottom.php" class="methodname" style="color:#CC7832">bottom</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.count.php" class="methodname" style="color:#CC7832">count</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.getiteratormode.php" class="methodname" style="color:#CC7832">getIteratorMode</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.isempty.php" class="methodname" style="color:#CC7832">isEmpty</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.offsetexists.php" class="methodname" style="color:#CC7832">offsetExists</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.offsetget.php" class="methodname" style="color:#CC7832">offsetGet</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.offsetset.php" class="methodname" style="color:#CC7832">offsetSet</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$index</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.offsetunset.php" class="methodname" style="color:#CC7832">offsetUnset</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.pop.php" class="methodname" style="color:#CC7832">pop</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.prev.php" class="methodname" style="color:#CC7832">prev</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.push.php" class="methodname" style="color:#CC7832">push</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.serialize.php" class="methodname" style="color:#CC7832">serialize</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.setiteratormode.php" class="methodname" style="color:#CC7832">setIteratorMode</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.shift.php" class="methodname" style="color:#CC7832">shift</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.top.php" class="methodname" style="color:#CC7832">top</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.unserialize.php" class="methodname" style="color:#CC7832">unserialize</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.unshift.php" class="methodname" style="color:#CC7832">unshift</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/spldoublylinkedlist.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>   </div>  <div class="section" id="spldoublylinkedlist.constants">   <h2 class="title">预定义常量</h2>   <div class="section" id="spldoublylinkedlist.constants.iteration-direction">    <h2 class="title">迭代方向</h2>    <dl>           <dt id="spldoublylinkedlist.constants.it-mode-lifo"><strong><span>SplDoublyLinkedList::IT_MODE_LIFO</span></strong></dt>      <dd>       <p class="para">        列表将以先进后出的顺序迭代，就像栈一样。       </p>      </dd>                <dt id="spldoublylinkedlist.constants.it-mode-fifo"><strong><span>SplDoublyLinkedList::IT_MODE_FIFO</span></strong></dt>      <dd>       <p class="para">        列表将以先进先出的顺序迭代，就像队列一样。       </p>      </dd>         </dl>   </div>   <div class="section" id="spldoublylinkedlist.constants.iteration-behavior">    <h2 class="title">迭代行为</h2>    <dl>           <dt id="spldoublylinkedlist.constants.it-mode-delete"><strong><span>SplDoublyLinkedList::IT_MODE_DELETE</span></strong></dt>      <dd>       <p class="para">        迭代将移除已迭代的元素。       </p>      </dd>                <dt id="spldoublylinkedlist.constants.it-mode-keep"><strong><span>SplDoublyLinkedList::IT_MODE_KEEP</span></strong></dt>      <dd>       <p class="para">        迭代将不会移除已迭代的元素。       </p>      </dd>         </dl>   </div>  </div>  </div>   <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link SplDoublyLinkedList::add} — Add/insert a new value at the specified index</li><li>{@link SplDoublyLinkedList::bottom} — Peeks at the node from the beginning of the doubly linked list</li><li>{@link SplDoublyLinkedList::count} — Counts the number of elements in the doubly linked list</li><li>{@link SplDoublyLinkedList::current} — Return current array entry</li><li>{@link SplDoublyLinkedList::getIteratorMode} — Returns the mode of iteration</li><li>{@link SplDoublyLinkedList::isEmpty} — Checks whether the doubly linked list is empty</li><li>{@link SplDoublyLinkedList::key} — Return current node index</li><li>{@link SplDoublyLinkedList::next} — Move to next entry</li><li>{@link SplDoublyLinkedList::offsetExists} — Returns whether the requested $index exists</li><li>{@link SplDoublyLinkedList::offsetGet} — Returns the value at the specified $index</li><li>{@link SplDoublyLinkedList::offsetSet} — Sets the value at the specified $index to $value</li><li>{@link SplDoublyLinkedList::offsetUnset} — Unsets the value at the specified $index</li><li>{@link SplDoublyLinkedList::pop} — Pops a node from the end of the doubly linked list</li><li>{@link SplDoublyLinkedList::prev} — Move to previous entry</li><li>{@link SplDoublyLinkedList::push} — Pushes an element at the end of the doubly linked list</li><li>{@link SplDoublyLinkedList::rewind} — Rewind iterator back to the start</li><li>{@link SplDoublyLinkedList::serialize} — Serializes the storage</li><li>{@link SplDoublyLinkedList::setIteratorMode} — Sets the mode of iteration</li><li>{@link SplDoublyLinkedList::shift} — Shifts a node from the beginning of the doubly linked list</li><li>{@link SplDoublyLinkedList::top} — Peeks at the node from the end of the doubly linked list</li><li>{@link SplDoublyLinkedList::unserialize} — Unserializes the storage</li><li>{@link SplDoublyLinkedList::unshift} — Prepends the doubly linked list with an element</li><li>{@link SplDoublyLinkedList::valid} — Check whether the doubly linked list contains more nodes</li></ul></div>
*/
class SplDoublyLinkedList implements Iterator, Countable, ArrayAccess, Serializable
{
    public const IT_MODE_LIFO = 2;
    public const IT_MODE_FIFO = 0;
    public const IT_MODE_DELETE = 1;
    public const IT_MODE_KEEP = 0;

/**
*<div id="spldoublylinkedlist.add" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::add</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::add</span> &mdash; <span class="dc-title">Add/insert a new value at the specified index</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.add-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::add</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Insert the value <span class="parameter" style="color:#3A95FF">value</span> at the   specified <span class="parameter" style="color:#3A95FF">index</span>, shuffling the   previous value at that index (and all subsequent values)   up through the list.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.add-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">index</span></dt>     <dd>      <p class="para">       The index where the new value is to be inserted.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The new value for the <span class="parameter" style="color:#3A95FF">index</span>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.add-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-spldoublylinkedlist.add-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.outofrangeexception.php" class="classname">OutOfRangeException</a></span> when    <span class="parameter" style="color:#3A95FF">index</span> is out of bounds or when    <span class="parameter" style="color:#3A95FF">index</span> cannot be parsed as an integer.  </p> </div></div>
     * @return void*/
    public function add(
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $index,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value
    ): void {}

/**
*<div id="spldoublylinkedlist.pop" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::pop</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::pop</span> &mdash; <span class="dc-title">Pops a node from the end of the doubly linked list</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.pop-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::pop</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.pop-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.pop-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The value of the popped node.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-spldoublylinkedlist.pop-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> when the data-structure is empty.  </p> </div></div>
     * @return mixed The value of the popped node.*/
    public function pop(): mixed {}

/**
*<div id="spldoublylinkedlist.shift" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::shift</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::shift</span> &mdash; <span class="dc-title">Shifts a node from the beginning of the doubly linked list</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.shift-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::shift</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.shift-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.shift-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The value of the shifted node.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-spldoublylinkedlist.shift-errors">  <h3 class="title">错误／异常</h3>   <p class="para">    Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> when the data-structure is empty.   </p> </div> </div>
     * @return mixed The value of the shifted node.*/
    public function shift(): mixed {}

/**
*<div id="spldoublylinkedlist.push" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::push</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::push</span> &mdash; <span class="dc-title">Pushes an element at the end of the doubly linked list</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.push-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::push</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Pushes <span class="parameter" style="color:#3A95FF">value</span> at the end of the doubly linked list.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.push-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The value to push.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.push-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function push(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value): void {}

/**
*<div id="spldoublylinkedlist.unshift" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::unshift</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::unshift</span> &mdash; <span class="dc-title">Prepends the doubly linked list with an element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.unshift-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::unshift</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Prepends <span class="parameter" style="color:#3A95FF">value</span> at the beginning of the doubly linked list.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.unshift-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The value to unshift.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.unshift-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function unshift(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value): void {}

/**
*<div id="spldoublylinkedlist.top" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::top</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::top</span> &mdash; <span class="dc-title">Peeks at the node from the end of the doubly linked list</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.top-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::top</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.top-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.top-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The value of the last node.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-spldoublylinkedlist.top-errors">  <h3 class="title">错误／异常</h3>   <p class="para">    Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> when the data-structure is empty.   </p> </div> </div>
     * @return mixed The value of the last node.*/
    public function top(): mixed {}

/**
*<div id="spldoublylinkedlist.bottom" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::bottom</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::bottom</span> &mdash; <span class="dc-title">Peeks at the node from the beginning of the doubly linked list</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.bottom-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::bottom</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.bottom-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.bottom-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The value of the first node.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-spldoublylinkedlist.bottom-errors">  <h3 class="title">错误／异常</h3>   <p class="para">    Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> when the data-structure is empty.   </p> </div> </div>
     * @return mixed The value of the first node.*/
    public function bottom(): mixed {}

/**
*<div id="spldoublylinkedlist.count" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::count</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::count</span> &mdash; <span class="dc-title">Counts the number of elements in the doubly linked list</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.count-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::count</strong></span>(): <span class="type" style="color:#EAB766">int</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.count-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.count-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the number of elements in the doubly linked list.  </p> </div></div>
     * @return int the number of elements in the doubly linked list.*/
    public function count(): int {}

/**
*<div id="spldoublylinkedlist.isempty" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::isEmpty</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::isEmpty</span> &mdash; <span class="dc-title">Checks whether the doubly linked list is empty</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.isempty-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::isEmpty</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.isempty-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.isempty-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns whether the doubly linked list is empty.  </p> </div></div>
     * @return bool whether the doubly linked list is empty.*/
    public function isEmpty(): bool {}

/**
*<div id="spldoublylinkedlist.setiteratormode" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::setIteratorMode</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::setIteratorMode</span> &mdash; <span class="dc-title">Sets the mode of iteration</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.setiteratormode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::setIteratorMode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span></span>): <span class="type" style="color:#EAB766">int</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.setiteratormode-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">mode</span></dt>     <dd>      <p class="para">       There are two orthogonal sets of modes that can be set:      </p>      <ul class="itemizedlist">       <li class="listitem">        <span class="simpara">The direction of the iteration (either one or the other):</span>        <ul class="itemizedlist">         <li class="listitem"><span class="simpara"><strong><span>SplDoublyLinkedList::IT_MODE_LIFO</span></strong> (Stack style)</span></li>         <li class="listitem"><span class="simpara"><strong><span>SplDoublyLinkedList::IT_MODE_FIFO</span></strong> (Queue style)</span></li>        </ul>       </li>       <li class="listitem">        <span class="simpara">The behavior of the iterator (either one or the other):</span>        <ul class="itemizedlist">         <li class="listitem"><span class="simpara"><strong><span>SplDoublyLinkedList::IT_MODE_DELETE</span></strong> (Elements are deleted by the iterator)</span></li>         <li class="listitem"><span class="simpara"><strong><span>SplDoublyLinkedList::IT_MODE_KEEP</span></strong> (Elements are traversed by the iterator)</span></li>        </ul>       </li>      </ul>      <p class="para">       The default mode is: <strong><span>SplDoublyLinkedList::IT_MODE_FIFO</span></strong> | <strong><span>SplDoublyLinkedList::IT_MODE_KEEP</span></strong>      </p>      <div class="warning"><strong class="warning">警告</strong>       <p class="para">        The direction of iteration can not be changed for <span class="classname"><a href="https://www.php.net/manual/zh/class.splstack.php" class="classname">SplStack</a></span> and        <span class="classname"><a href="https://www.php.net/manual/zh/class.splqueue.php" class="classname">SplQueue</a></span> classes, it is always <strong><span>SplDoublyLinkedList::IT_MODE_FIFO</span></strong>.        Trying to modify it will result in a <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> being thrown.       </p>      </div>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.setiteratormode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the different modes and flags that affect the iteration.  </p> </div></div>
     * @return int*/
    public function setIteratorMode(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $mode): int {}

/**
*<div id="spldoublylinkedlist.getiteratormode" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::getIteratorMode</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::getIteratorMode</span> &mdash; <span class="dc-title">Returns the mode of iteration</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.getiteratormode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::getIteratorMode</strong></span>(): <span class="type" style="color:#EAB766">int</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.getiteratormode-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.getiteratormode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the different modes and flags that affect the iteration.  </p> </div></div>
     * @return int the different modes and flags that affect the iteration.*/
    public function getIteratorMode(): int {}

/**
*<div id="spldoublylinkedlist.offsetexists" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::offsetExists</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::offsetExists</span> &mdash; <span class="dc-title">Returns whether the requested $index exists</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.offsetexists-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::offsetExists</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>): <span class="type" style="color:#EAB766">bool</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.offsetexists-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">index</span></dt>     <dd>      <p class="para">       The index being checked.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.offsetexists-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the requested <span class="parameter" style="color:#3A95FF">index</span> exists, otherwise <strong><span>false</span></strong>  </p> </div></div>
     * @return bool true if the requested <i>index</i> exists, otherwise false*/
    public function offsetExists($index): bool {}

/**
*<div id="spldoublylinkedlist.offsetget" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::offsetGet</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::offsetGet</span> &mdash; <span class="dc-title">Returns the value at the specified $index</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.offsetget-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::offsetGet</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.offsetget-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">index</span></dt>     <dd>      <p class="para">       The index with the value.      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.offsetget-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The value at the specified <span class="parameter" style="color:#3A95FF">index</span>.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-spldoublylinkedlist.offsetget-errors">  <h3 class="title">错误／异常</h3> <p class="para">  Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.outofrangeexception.php" class="classname">OutOfRangeException</a></span> when <span class="parameter" style="color:#3A95FF">index</span> is out of bounds  or when <span class="parameter" style="color:#3A95FF">index</span> cannot be parsed as an integer. </p> </div>  </div>
     * @return mixed The value at the specified <i>index</i>.*/
    public function offsetGet($index): mixed {}

/**
*<div id="spldoublylinkedlist.offsetset" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::offsetSet</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::offsetSet</span> &mdash; <span class="dc-title">Sets the value at the specified $index to $value</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.offsetset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::offsetSet</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$index</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <p class="para rdfs-comment">   Sets the value at the specified <span class="parameter" style="color:#3A95FF">index</span> to <span class="parameter" style="color:#3A95FF">value</span>.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.offsetset-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">index</span></dt>     <dd>      <p class="para">       The index being set. If <strong><span>null</span></strong>, the next value will be added after the last item.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The new value for the <span class="parameter" style="color:#3A95FF">index</span>.      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.offsetset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-spldoublylinkedlist.offsetset-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.outofrangeexception.php" class="classname">OutOfRangeException</a></span> when <span class="parameter" style="color:#3A95FF">index</span> is out of bounds or when <span class="parameter" style="color:#3A95FF">index</span> cannot be parsed as an integer.  </p> </div> </div>
     * @return void*/
    public function offsetSet($index, #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value): void {}

/**
*<div id="spldoublylinkedlist.offsetunset" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::offsetUnset</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::offsetUnset</span> &mdash; <span class="dc-title">Unsets the value at the specified $index</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.offsetunset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::offsetUnset</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <p class="para rdfs-comment">   Unsets the value at the specified index.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.offsetunset-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">index</span></dt>     <dd>      <p class="para">       The index being unset.      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.offsetunset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-spldoublylinkedlist.offsetunset-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.outofrangeexception.php" class="classname">OutOfRangeException</a></span> when <span class="parameter" style="color:#3A95FF">index</span> is out of bounds   or when <span class="parameter" style="color:#3A95FF">index</span> cannot be parsed as an integer.  </p> </div></div>
     * @return void*/
    public function offsetUnset($index): void {}

/**
*<div id="spldoublylinkedlist.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::rewind</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::rewind</span> &mdash; <span class="dc-title">Rewind iterator back to the start</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   This rewinds the iterator to the beginning.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function rewind(): void {}

/**
*<div id="spldoublylinkedlist.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::current</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::current</span> &mdash; <span class="dc-title">Return current array entry</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::current</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Get the current doubly linked list node.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current node value.  </p> </div></div>
     * @return mixed The current node value.*/
    public function current(): mixed {}

/**
*<div id="spldoublylinkedlist.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::key</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::key</span> &mdash; <span class="dc-title">Return current node index</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::key</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   This function returns the current node index  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current node index.  </p> </div></div>
     * @return string|float|int|bool|null The current node index.*/
    public function key(): int {}

/**
*<div id="spldoublylinkedlist.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::next</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::next</span> &mdash; <span class="dc-title">Move to next entry</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Move the iterator to the next node.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function next(): void {}

/**
*<div id="spldoublylinkedlist.prev" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::prev</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::prev</span> &mdash; <span class="dc-title">Move to previous entry</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.prev-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::prev</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Move the iterator to the previous node.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.prev-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.prev-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function prev(): void {}

/**
*<div id="spldoublylinkedlist.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::valid</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::valid</span> &mdash; <span class="dc-title">Check whether the doubly linked list contains more nodes</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the doubly linked list contains any more nodes.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the doubly linked list contains any more nodes, <strong><span>false</span></strong> otherwise.  </p> </div></div>
     * @return bool true if the doubly linked list contains any more nodes, false otherwise.*/
    public function valid(): bool {}

/**
*<div id="spldoublylinkedlist.unserialize" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::unserialize</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::unserialize</span> &mdash; <span class="dc-title">Unserializes the storage</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.unserialize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::unserialize</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Unserializes the storage, from <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::serialize()}</span>.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.unserialize-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">data</span></dt>    <dd>     <span>      The serialized string.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.unserialize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-spldoublylinkedlist.unserialize-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::serialize()} - Serializes the storage</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function unserialize(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $data): void {}

/**
*<div id="spldoublylinkedlist.serialize" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplDoublyLinkedList::serialize</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplDoublyLinkedList::serialize</span> &mdash; <span class="dc-title">Serializes the storage</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-spldoublylinkedlist.serialize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplDoublyLinkedList::serialize</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Serializes the storage.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-spldoublylinkedlist.serialize-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-spldoublylinkedlist.serialize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The serialized string.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-spldoublylinkedlist.serialize-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::unserialize()} - Unserializes the storage</span></li>   </ul>  </span> </div></div>
     * @return string The serialized string.*/
    public function serialize(): string {}

    /**
     * @return array
     * @since 7.4
     */
    #[TentativeType]
    public function __debugInfo(): array {}

    /**
     * @return array
     * @since 7.4
     */
    #[TentativeType]
    public function __serialize(): array {}

    /**
     * @param array $data
     * @since 7.4
     */
    #[TentativeType]
    public function __unserialize(array $data): void {}
}

/**
*<div id="class.splqueue" class="reference"> <h1 class="title">SplQueue 类</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p>   <div class="section" id="splqueue.intro">   <h2 class="title">简介</h2>   <p class="para">    SplQueue 类的主要功能是通过将迭代模式设置为 <strong><span>SplDoublyLinkedList::IT_MODE_FIFO</span></strong> 来提供使用双向链表实现的队列。   </p>  </div>   <div class="section" id="splqueue.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">SplQueue</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.spldoublylinkedlist.php" class="classname">SplDoublyLinkedList</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">SplDoublyLinkedList::IT_MODE_LIFO</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">SplDoublyLinkedList::IT_MODE_FIFO</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">SplDoublyLinkedList::IT_MODE_DELETE</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">SplDoublyLinkedList::IT_MODE_KEEP</var>}</var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splqueue.dequeue.php" class="methodname" style="color:#CC7832">dequeue</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splqueue.enqueue.php" class="methodname" style="color:#CC7832">enqueue</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::add}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::bottom}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::count}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::getIteratorMode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::isEmpty}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::key}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::offsetExists}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::offsetGet}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::offsetSet}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$index</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::offsetUnset}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::pop}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::prev}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::push}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::serialize}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::setIteratorMode}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::shift}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::top}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::unserialize}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::unshift}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div>  <div class="section">   <h2 class="title">示例</h2>   <p class="para">    <div class="example" id="">     <p><strong>示例 #1 <span class="classname"><strong class="classname">SplQueue</strong></span> 示例</strong></p>     <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$q </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplQueue</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$q</span><span style="color: #007700">[] = </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$q</span><span style="color: #007700">[] = </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$q</span><span style="color: #007700">[] = </span><span style="color: #9876AA">3</span><span style="color: #007700">;<br />foreach (</span><span style="color: #9876AA">$q </span><span style="color: #007700">as </span><span style="color: #9876AA">$elem</span><span style="color: #007700">)  {<br /> echo </span><span style="color: #9876AA">$elem</span><span style="color: #007700">.</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>     </div>     <div class="example-contents"><p>以上示例会输出：</p></div>     <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">      <div class="cdata"><span>1<br>2<br>3<br></span></div>     </div>    </div>    <div class="example" id="">     <p><strong>示例 #2 使用 <span class="classname"><strong class="classname">SplQueue</strong></span> 高效处理任务</strong></p>     <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$q </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplQueue</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$q</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setIteratorMode</span><span style="color: #007700">(</span><span style="color: #9876AA">SplQueue</span><span style="color: #007700">::</span><span style="color: #9876AA">IT_MODE_DELETE</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// ... enqueue some tasks on the queue ...<br />// process them<br /></span><span style="color: #007700">foreach (</span><span style="color: #9876AA">$q </span><span style="color: #007700">as </span><span style="color: #9876AA">$task</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// ... process $task ...<br />    // add new tasks on the queue<br />    </span><span style="color: #9876AA">$q</span><span style="color: #007700">[] = </span><span style="color: #9876AA">$newTask</span><span style="color: #007700">;<br />    </span><span style="color: #FF8000">// ...<br /></span><span style="color: #007700">}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>     </div>    </div>   </p>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link SplQueue::dequeue} — Dequeues a node from the queue</li><li>{@link SplQueue::enqueue} — Adds an element to the queue</li></ul></div>
*/
class SplQueue extends SplDoublyLinkedList
{
/**
*<div id="splqueue.enqueue" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplQueue::enqueue</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplQueue::enqueue</span> &mdash; <span class="dc-title">Adds an element to the queue</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splqueue.enqueue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplQueue::enqueue</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Enqueues <span class="parameter" style="color:#3A95FF">value</span> at the end of the queue.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="methodname" style="color:#CC7832"><strong>SplQueue::enqueue()</strong></span> is an alias of <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::push()}</span>.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splqueue.enqueue-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The value to enqueue.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splqueue.enqueue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function enqueue(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value): void {}

/**
*<div id="splqueue.dequeue" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplQueue::dequeue</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplQueue::dequeue</span> &mdash; <span class="dc-title">Dequeues a node from the queue</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splqueue.dequeue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplQueue::dequeue</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Dequeues <span class="parameter" style="color:#3A95FF">value</span> from the top of the queue.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="methodname" style="color:#CC7832"><strong>SplQueue::dequeue()</strong></span> is an alias of <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::shift()}</span>.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splqueue.dequeue-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splqueue.dequeue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The value of the dequeued node.  </p> </div></div>
     * @return TValue The value of the dequeued node.*/
    public function dequeue(): mixed {}

    /**
     * Sets the mode of iteration
     * @link https://php.net/manual/en/spldoublylinkedlist.setiteratormode.php
     * @param int $mode <p>
     * There are two orthogonal sets of modes that can be set:
     * </p>
     * The direction of the iteration (either one or the other):
     * <b>SplDoublyLinkedList::IT_MODE_LIFO</b> (Stack style)
     * @return void
     */
    public function setIteratorMode($mode) {}
}

/**
*<div id="class.splstack" class="reference"> <h1 class="title">SplStack 类</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p>   <div class="section" id="splstack.intro">   <h2 class="title">简介</h2>   <p class="para">    SplStack 类的主要功能是通过将迭代模式设置为 <strong><span>SplDoublyLinkedList::IT_MODE_LIFO</span></strong> 来提供使用双向链表实现的栈。   </p>  </div>   <div class="section" id="splstack.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">SplStack</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.spldoublylinkedlist.php" class="classname">SplDoublyLinkedList</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">SplDoublyLinkedList::IT_MODE_LIFO</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">SplDoublyLinkedList::IT_MODE_FIFO</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">SplDoublyLinkedList::IT_MODE_DELETE</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">SplDoublyLinkedList::IT_MODE_KEEP</var>}</var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::add}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::bottom}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::count}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::getIteratorMode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::isEmpty}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::key}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::offsetExists}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::offsetGet}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::offsetSet}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$index</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::offsetUnset}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::pop}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::prev}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::push}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::serialize}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::setIteratorMode}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::shift}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::top}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::unserialize}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::unshift}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplDoublyLinkedList::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div>    <div class="section">   <h2 class="title">示例</h2>   <p class="para">    <div class="example" id="">     <p><strong>示例 #1 <span class="classname"><strong class="classname">SplStack</strong></span> 示例</strong></p>     <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$q </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplStack</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$q</span><span style="color: #007700">[] = </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$q</span><span style="color: #007700">[] = </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$q</span><span style="color: #007700">[] = </span><span style="color: #9876AA">3</span><span style="color: #007700">;<br />foreach (</span><span style="color: #9876AA">$q </span><span style="color: #007700">as </span><span style="color: #9876AA">$elem</span><span style="color: #007700">)  {<br /> echo </span><span style="color: #9876AA">$elem</span><span style="color: #007700">.</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>     </div>     <div class="example-contents"><p>以上示例会输出：</p></div>     <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>3<br>2<br>1<br></span></div>     </div>    </div>   </p>  </div> </div> </div>
*/
class SplStack extends SplDoublyLinkedList
{
    /**
     * Sets the mode of iteration
     * @link https://php.net/manual/en/spldoublylinkedlist.setiteratormode.php
     * @param int $mode <p>
     * There are two orthogonal sets of modes that can be set:
     * </p>
     * The direction of the iteration (either one or the other):
     * <b>SplDoublyLinkedList::IT_MODE_LIFO</b> (Stack style)
     * @return void
     */
    public function setIteratorMode($mode) {}
}

/**
*<div id="class.splheap" class="reference"> <h1 class="title">The SplHeap class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p>   <div class="section" id="splheap.intro">   <h2 class="title">简介</h2>   <p class="para">    The SplHeap class provides the main functionalities of a Heap.   </p>  </div>   <div class="section" id="splheap.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">abstract</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">SplHeap</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a>,     <a href="https://www.php.net/manual/zh/class.countable.php" class="interfacename">Countable</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">protected</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splheap.compare.php" class="methodname" style="color:#CC7832">compare</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value2</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splheap.count.php" class="methodname" style="color:#CC7832">count</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splheap.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splheap.extract.php" class="methodname" style="color:#CC7832">extract</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splheap.insert.php" class="methodname" style="color:#CC7832">insert</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splheap.iscorrupted.php" class="methodname" style="color:#CC7832">isCorrupted</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splheap.isempty.php" class="methodname" style="color:#CC7832">isEmpty</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splheap.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splheap.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splheap.recoverfromcorruption.php" class="methodname" style="color:#CC7832">recoverFromCorruption</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splheap.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splheap.top.php" class="methodname" style="color:#CC7832">top</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splheap.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>   </div>   </div>   <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link SplHeap::compare} — Compare elements in order to place them correctly in the heap while sifting up</li><li>{@link SplHeap::count} — Counts the number of elements in the heap</li><li>{@link SplHeap::current} — Return current node pointed by the iterator</li><li>{@link SplHeap::extract} — Extracts a node from top of the heap and sift up</li><li>{@link SplHeap::insert} — Inserts an element in the heap by sifting it up</li><li>{@link SplHeap::isCorrupted} — Tells if the heap is in a corrupted state</li><li>{@link SplHeap::isEmpty} — Checks whether the heap is empty</li><li>{@link SplHeap::key} — Return current node index</li><li>{@link SplHeap::next} — Move to the next node</li><li>{@link SplHeap::recoverFromCorruption} — Recover from the corrupted state and allow further actions on the heap</li><li>{@link SplHeap::rewind} — Rewind iterator back to the start (no-op)</li><li>{@link SplHeap::top} — Peeks at the node from the top of the heap</li><li>{@link SplHeap::valid} — Check whether the heap contains more nodes</li></ul></div>
*/
abstract class SplHeap implements Iterator, Countable
{
/**
*<div id="splheap.extract" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplHeap::extract</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplHeap::extract</span> &mdash; <span class="dc-title">Extracts a node from top of the heap and sift up</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splheap.extract-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplHeap::extract</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splheap.extract-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splheap.extract-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The value of the extracted node.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splheap.extract-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> when the data-structure is empty.  </p> </div></div>
     * @return TValue The value of the extracted node.*/
    public function extract(): mixed {}

/**
*<div id="splheap.insert" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplHeap::insert</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplHeap::insert</span> &mdash; <span class="dc-title">Inserts an element in the heap by sifting it up</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splheap.insert-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplHeap::insert</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   Insert <span class="parameter" style="color:#3A95FF">value</span> in the heap.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splheap.insert-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The value to insert.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splheap.insert-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div></div>
     * @return bool*/
    public function insert(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value): bool {}

/**
*<div id="splheap.top" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplHeap::top</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplHeap::top</span> &mdash; <span class="dc-title">Peeks at the node from the top of the heap</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splheap.top-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplHeap::top</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splheap.top-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splheap.top-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The value of the node on the top.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splheap.top-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> when the data-structure is empty.  </p> </div> </div>
     * @return TValue The value of the node on the top.*/
    public function top(): mixed {}

/**
*<div id="splheap.count" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplHeap::count</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplHeap::count</span> &mdash; <span class="dc-title">Counts the number of elements in the heap</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splheap.count-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplHeap::count</strong></span>(): <span class="type" style="color:#EAB766">int</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splheap.count-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splheap.count-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the number of elements in the heap.  </p> </div></div>
     * @return int the number of elements in the heap.*/
    public function count(): int {}

/**
*<div id="splheap.isempty" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplHeap::isEmpty</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplHeap::isEmpty</span> &mdash; <span class="dc-title">Checks whether the heap is empty</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splheap.isempty-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplHeap::isEmpty</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splheap.isempty-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splheap.isempty-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns whether the heap is empty.  </p> </div></div>
     * @return bool whether the heap is empty.*/
    public function isEmpty(): bool {}

/**
*<div id="splheap.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplHeap::rewind</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplHeap::rewind</span> &mdash; <span class="dc-title">Rewind iterator back to the start (no-op)</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splheap.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplHeap::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   This rewinds the iterator to the beginning. This is a no-op for heaps   as the iterator is virtual and in fact never moves from the top of the    heap.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splheap.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splheap.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function rewind(): void {}

/**
*<div id="splheap.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplHeap::current</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplHeap::current</span> &mdash; <span class="dc-title">Return current node pointed by the iterator</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splheap.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplHeap::current</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Get the current datastructure node.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splheap.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splheap.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current node value.  </p> </div></div>
     * @return TValue The current node value.*/
    public function current(): mixed {}

/**
*<div id="splheap.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplHeap::key</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplHeap::key</span> &mdash; <span class="dc-title">Return current node index</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splheap.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplHeap::key</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   This function returns the current node index  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splheap.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splheap.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current node index.  </p> </div></div>
     * @return int The current node index.*/
    public function key(): int {}

/**
*<div id="splheap.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplHeap::next</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplHeap::next</span> &mdash; <span class="dc-title">Move to the next node</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splheap.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplHeap::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Move to the next node. This will delete the top node of the heap.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splheap.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splheap.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> </div>
     * @return void*/
    public function next(): void {}

/**
*<div id="splheap.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplHeap::valid</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplHeap::valid</span> &mdash; <span class="dc-title">Check whether the heap contains more nodes</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splheap.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplHeap::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the heap contains any more nodes.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splheap.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splheap.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the heap contains any more nodes, <strong><span>false</span></strong> otherwise.  </p> </div></div>
     * @return bool true if the heap contains any more nodes, false otherwise.*/
    public function valid(): bool {}

/**
*<div id="splheap.recoverfromcorruption" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplHeap::recoverFromCorruption</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplHeap::recoverFromCorruption</span> &mdash; <span class="dc-title">Recover from the corrupted state and allow further actions on the heap</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splheap.recoverfromcorruption-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplHeap::recoverFromCorruption</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splheap.recoverfromcorruption-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splheap.recoverfromcorruption-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Always returns <strong><span>true</span></strong>.  </p> </div></div>
     * @return bool*/
    public function recoverFromCorruption(): bool {}

/**
*<div id="splheap.compare" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplHeap::compare</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplHeap::compare</span> &mdash; <span class="dc-title">Compare elements in order to place them correctly in the heap while sifting up</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splheap.compare-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">protected</span> <span class="methodname" style="color:#CC7832"><strong>SplHeap::compare</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value2</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Compare <span class="parameter" style="color:#3A95FF">value1</span> with <span class="parameter" style="color:#3A95FF">value2</span>.  </p>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    Throwing exceptions in <span class="methodname" style="color:#CC7832"><strong>SplHeap::compare()</strong></span> can    corrupt the Heap and place it in a blocked state. You can unblock it by    calling <span class="methodname" style="color:#CC7832">{@link SplHeap::recoverFromCorruption()}</span>.     However, some elements might not be placed correctly and it may hence    break the heap-property.   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splheap.compare-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value1</span></dt>     <dd>      <p class="para">       The value of the first node being compared.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value2</span></dt>     <dd>      <p class="para">       The value of the second node being compared.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splheap.compare-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Result of the comparison, positive integer if <span class="parameter" style="color:#3A95FF">value1</span> is greater than <span class="parameter" style="color:#3A95FF">value2</span>, 0 if they are equal, negative integer otherwise.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    Having multiple elements with the same value in a Heap is not recommended. They will end up in an arbitrary relative position.   </p>  </p></blockquote> </div></div>
     * @return int Result of the comparison, positive integer if <i>value1</i> is greater than <i>value2</i>, 0 if they are equal, negative integer otherwise.*/
    abstract protected function compare($value1, $value2);

/**
*<div id="splheap.iscorrupted" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplHeap::isCorrupted</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplHeap::isCorrupted</span> &mdash; <span class="dc-title">Tells if the heap is in a corrupted state</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splheap.iscorrupted-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplHeap::isCorrupted</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splheap.iscorrupted-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splheap.iscorrupted-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the heap is corrupted, <strong><span>false</span></strong> otherwise.  </p> </div></div>
     * @return bool*/
    public function isCorrupted(): bool {}

    /**
     * @return array
     * @since 7.4
     */
    #[TentativeType]
    public function __debugInfo(): array {}
}

/**
*<div id="class.splminheap" class="reference"> <h1 class="title">The SplMinHeap class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p>   <div class="section" id="splminheap.intro">   <h2 class="title">简介</h2>   <p class="para">    The SplMinHeap class provides the main functionalities of a heap, keeping the minimum on the top.   </p>  </div>   <div class="section" id="splminheap.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">SplMinHeap</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.splheap.php" class="classname">SplHeap</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">protected</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splminheap.compare.php" class="methodname" style="color:#CC7832">compare</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value2</span></span>): <span class="type" style="color:#EAB766">int</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">protected</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::compare}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value2</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::count}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::extract}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::insert}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::isCorrupted}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::isEmpty}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::key}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::recoverFromCorruption}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::top}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>   </div>  </div>  <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link SplMinHeap::compare} — Compare elements in order to place them correctly in the heap while sifting up</li></ul></div>
*/
class SplMinHeap extends SplHeap
{
/**
*<div id="splminheap.compare" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplMinHeap::compare</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplMinHeap::compare</span> &mdash; <span class="dc-title">Compare elements in order to place them correctly in the heap while sifting up</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splminheap.compare-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">protected</span> <span class="methodname" style="color:#CC7832"><strong>SplMinHeap::compare</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value2</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Compare <span class="parameter" style="color:#3A95FF">value1</span> with <span class="parameter" style="color:#3A95FF">value2</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splminheap.compare-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value1</span></dt>     <dd>      <p class="para">       The value of the first node being compared.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value2</span></dt>     <dd>      <p class="para">       The value of the second node being compared.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splminheap.compare-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Result of the comparison, positive integer if <span class="parameter" style="color:#3A95FF">value1</span> is lower than <span class="parameter" style="color:#3A95FF">value2</span>, 0 if they are equal, negative integer otherwise.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    Having multiple elements with the same value in a Heap is not recommended. They will end up in an arbitrary relative position.   </p>  </p></blockquote> </div></div>
     * @return int Result of the comparison, positive integer if <i>value1</i> is lower than <i>value2</i>, 0 if they are equal, negative integer otherwise.*/
    protected function compare(
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value1,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value2
    ): int {}

    /**
     * Extracts a node from top of the heap and sift up.
     * @link https://php.net/manual/en/splheap.extract.php
     * @return TValue The value of the extracted node.
     */
    public function extract() {}

    /**
     * Inserts an element in the heap by sifting it up.
     * @link https://php.net/manual/en/splheap.insert.php
     * @param TValue $value <p>
     * The value to insert.
     * </p>
     * @return true
     */
    public function insert($value) {}

    /**
     * Peeks at the node from the top of the heap
     * @link https://php.net/manual/en/splheap.top.php
     * @return TValue The value of the node on the top.
     */
    public function top() {}

    /**
     * Counts the number of elements in the heap.
     * @link https://php.net/manual/en/splheap.count.php
     * @return int the number of elements in the heap.
     */
    public function count() {}

    /**
     * Checks whether the heap is empty.
     * @link https://php.net/manual/en/splheap.isempty.php
     * @return bool whether the heap is empty.
     */
    public function isEmpty() {}

    /**
     * Rewind iterator back to the start (no-op)
     * @link https://php.net/manual/en/splheap.rewind.php
     * @return void
     */
    public function rewind() {}

    /**
     * Return current node pointed by the iterator
     * @link https://php.net/manual/en/splheap.current.php
     * @return TValue The current node value.
     */
    public function current() {}

    /**
     * Return current node index
     * @link https://php.net/manual/en/splheap.key.php
     * @return int The current node index.
     */
    public function key() {}

    /**
     * Move to the next node
     * @link https://php.net/manual/en/splheap.next.php
     * @return void
     */
    public function next() {}

    /**
     * Check whether the heap contains more nodes
     * @link https://php.net/manual/en/splheap.valid.php
     * @return bool true if the heap contains any more nodes, false otherwise.
     */
    public function valid() {}

    /**
     * Recover from the corrupted state and allow further actions on the heap.
     * @link https://php.net/manual/en/splheap.recoverfromcorruption.php
     * @return void
     */
    public function recoverFromCorruption() {}
}

/**
*<div id="class.splmaxheap" class="reference"> <h1 class="title">The SplMaxHeap class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p>   <div class="section" id="splmaxheap.intro">   <h2 class="title">简介</h2>   <p class="para">    The SplMaxHeap class provides the main functionalities of a heap, keeping the maximum on the top.   </p>  </div>   <div class="section" id="splmaxheap.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">SplMaxHeap</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.splheap.php" class="classname">SplHeap</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">protected</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splmaxheap.compare.php" class="methodname" style="color:#CC7832">compare</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value2</span></span>): <span class="type" style="color:#EAB766">int</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">protected</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::compare}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value2</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::count}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::extract}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::insert}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::isCorrupted}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::isEmpty}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::key}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::recoverFromCorruption}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::top}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SplHeap::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>   </div>  </div>  <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link SplMaxHeap::compare} — Compare elements in order to place them correctly in the heap while sifting up</li></ul></div>
*/
class SplMaxHeap extends SplHeap
{
/**
*<div id="splmaxheap.compare" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplMaxHeap::compare</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplMaxHeap::compare</span> &mdash; <span class="dc-title">Compare elements in order to place them correctly in the heap while sifting up</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splmaxheap.compare-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">protected</span> <span class="methodname" style="color:#CC7832"><strong>SplMaxHeap::compare</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value2</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Compare <span class="parameter" style="color:#3A95FF">value1</span> with <span class="parameter" style="color:#3A95FF">value2</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splmaxheap.compare-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value1</span></dt>     <dd>      <p class="para">       The value of the first node being compared.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value2</span></dt>     <dd>      <p class="para">       The value of the second node being compared.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splmaxheap.compare-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Result of the comparison, positive integer if <span class="parameter" style="color:#3A95FF">value1</span> is greater than <span class="parameter" style="color:#3A95FF">value2</span>, 0 if they are equal, negative integer otherwise.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    Having multiple elements with the same value in a Heap is not recommended. They will end up in an arbitrary relative position.   </p>  </p></blockquote> </div></div>
     * @return int Result of the comparison, positive integer if <i>value1</i> is greater than <i>value2</i>, 0 if they are equal, negative integer otherwise.*/
    protected function compare(
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value1,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value2
    ): int {}
}

/**
*<div id="class.splpriorityqueue" class="reference"> <h1 class="title">The SplPriorityQueue class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p>   <div class="section" id="splpriorityqueue.intro">   <h2 class="title">简介</h2>   <p class="para">    The SplPriorityQueue class provides the main functionalities of a     prioritized queue, implemented using a max heap.   </p>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <span class="simpara">     The order of elements with identical priority is <em>undefined</em>.     It may differ from the order in which they have been inserted.    </span>   </p></blockquote>  </div>   <div class="section" id="splpriorityqueue.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">SplPriorityQueue</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a>,     <a href="https://www.php.net/manual/zh/class.countable.php" class="interfacename">Countable</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.splpriorityqueue.php#splpriorityqueue.constants.extr-both"><var class="varname">EXTR_BOTH</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.splpriorityqueue.php#splpriorityqueue.constants.extr-priority"><var class="varname">EXTR_PRIORITY</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.splpriorityqueue.php#splpriorityqueue.constants.extr-data"><var class="varname">EXTR_DATA</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splpriorityqueue.compare.php" class="methodname" style="color:#CC7832">compare</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$priority1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$priority2</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splpriorityqueue.count.php" class="methodname" style="color:#CC7832">count</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splpriorityqueue.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splpriorityqueue.extract.php" class="methodname" style="color:#CC7832">extract</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splpriorityqueue.getextractflags.php" class="methodname" style="color:#CC7832">getExtractFlags</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splpriorityqueue.insert.php" class="methodname" style="color:#CC7832">insert</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$priority</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splpriorityqueue.iscorrupted.php" class="methodname" style="color:#CC7832">isCorrupted</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splpriorityqueue.isempty.php" class="methodname" style="color:#CC7832">isEmpty</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splpriorityqueue.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splpriorityqueue.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splpriorityqueue.recoverfromcorruption.php" class="methodname" style="color:#CC7832">recoverFromCorruption</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splpriorityqueue.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splpriorityqueue.setextractflags.php" class="methodname" style="color:#CC7832">setExtractFlags</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splpriorityqueue.top.php" class="methodname" style="color:#CC7832">top</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splpriorityqueue.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>   </div>  <div class="section" id="splpriorityqueue.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="splpriorityqueue.constants.extr-both"><strong><span>SplPriorityQueue::EXTR_BOTH</span></strong></dt>     <dd>      <p class="para"/>     </dd>             <dt id="splpriorityqueue.constants.extr-priority"><strong><span>SplPriorityQueue::EXTR_PRIORITY</span></strong></dt>     <dd>      <p class="para"/>     </dd>             <dt id="splpriorityqueue.constants.extr-data"><strong><span>SplPriorityQueue::EXTR_DATA</span></strong></dt>     <dd>      <p class="para"/>     </dd>       </dl>  </div>   </div>   <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link SplPriorityQueue::compare} — Compare priorities in order to place elements correctly in the heap while sifting up</li><li>{@link SplPriorityQueue::count} — Counts the number of elements in the queue</li><li>{@link SplPriorityQueue::current} — Return current node pointed by the iterator</li><li>{@link SplPriorityQueue::extract} — Extracts a node from top of the heap and sift up</li><li>{@link SplPriorityQueue::getExtractFlags} — Get the flags of extraction</li><li>{@link SplPriorityQueue::insert} — Inserts an element in the queue by sifting it up</li><li>{@link SplPriorityQueue::isCorrupted} — Tells if the priority queue is in a corrupted state</li><li>{@link SplPriorityQueue::isEmpty} — Checks whether the queue is empty</li><li>{@link SplPriorityQueue::key} — Return current node index</li><li>{@link SplPriorityQueue::next} — Move to the next node</li><li>{@link SplPriorityQueue::recoverFromCorruption} — Recover from the corrupted state and allow further actions on the queue</li><li>{@link SplPriorityQueue::rewind} — Rewind iterator back to the start (no-op)</li><li>{@link SplPriorityQueue::setExtractFlags} — Sets the mode of extraction</li><li>{@link SplPriorityQueue::top} — Peeks at the node from the top of the queue</li><li>{@link SplPriorityQueue::valid} — Check whether the queue contains more nodes</li></ul></div>
*/
class SplPriorityQueue implements Iterator, Countable
{
    public const EXTR_BOTH = 3;
    public const EXTR_PRIORITY = 2;
    public const EXTR_DATA = 1;

/**
*<div id="splpriorityqueue.compare" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplPriorityQueue::compare</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplPriorityQueue::compare</span> &mdash; <span class="dc-title">Compare priorities in order to place elements correctly in the heap while sifting up</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splpriorityqueue.compare-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplPriorityQueue::compare</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$priority1</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$priority2</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Compare <span class="parameter" style="color:#3A95FF">priority1</span> with <span class="parameter" style="color:#3A95FF">priority2</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splpriorityqueue.compare-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">priority1</span></dt>     <dd>      <p class="para">       The priority of the first node being compared.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">priority2</span></dt>     <dd>      <p class="para">       The priority of the second node being compared.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splpriorityqueue.compare-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Result of the comparison, positive integer if <span class="parameter" style="color:#3A95FF">priority1</span> is greater than <span class="parameter" style="color:#3A95FF">priority2</span>, 0 if they are equal, negative integer otherwise.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    Multiple elements with the same priority will get dequeued in no particular order.   </p>  </p></blockquote> </div></div>
     * @return int Result of the comparison, positive integer if <i>priority1</i> is greater than <i>priority2</i>, 0 if they are equal, negative integer otherwise.*/
    public function compare(
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $priority1,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $priority2
    ): int {}

/**
*<div id="splpriorityqueue.insert" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplPriorityQueue::insert</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplPriorityQueue::insert</span> &mdash; <span class="dc-title">Inserts an element in the queue by sifting it up</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splpriorityqueue.insert-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplPriorityQueue::insert</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$priority</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   Insert <span class="parameter" style="color:#3A95FF">value</span> with the priority <span class="parameter" style="color:#3A95FF">priority</span> in the queue.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splpriorityqueue.insert-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The value to insert.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">priority</span></dt>     <dd>      <p class="para">       The associated priority.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splpriorityqueue.insert-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div></div>
     * @return true*/
    public function insert(
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $priority
    ) {}

/**
*<div id="splpriorityqueue.setextractflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplPriorityQueue::setExtractFlags</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplPriorityQueue::setExtractFlags</span> &mdash; <span class="dc-title">Sets the mode of extraction</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splpriorityqueue.setextractflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplPriorityQueue::setExtractFlags</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766">int</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splpriorityqueue.setextractflags-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       Defines what is extracted by <span class="methodname" style="color:#CC7832">{@link SplPriorityQueue::current()}</span>,       <span class="methodname" style="color:#CC7832">{@link SplPriorityQueue::top()}</span> and        <span class="methodname" style="color:#CC7832">{@link SplPriorityQueue::extract()}</span>.      </p>      <ul class="itemizedlist">       <li class="listitem"><span class="simpara"><strong><span>SplPriorityQueue::EXTR_DATA</span></strong> (0x00000001): Extract the data</span></li>       <li class="listitem"><span class="simpara"><strong><span>SplPriorityQueue::EXTR_PRIORITY</span></strong> (0x00000002): Extract the priority</span></li>       <li class="listitem"><span class="simpara"><strong><span>SplPriorityQueue::EXTR_BOTH</span></strong> (0x00000003): Extract an array containing both</span></li>      </ul>      <p class="para">       The default mode is <strong><span>SplPriorityQueue::EXTR_DATA</span></strong>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splpriorityqueue.setextractflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the flags of extraction.  </p> </div></div>
     * @return int*/
    public function setExtractFlags(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags): int {}

/**
*<div id="splpriorityqueue.top" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplPriorityQueue::top</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplPriorityQueue::top</span> &mdash; <span class="dc-title">Peeks at the node from the top of the queue</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splpriorityqueue.top-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplPriorityQueue::top</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splpriorityqueue.top-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splpriorityqueue.top-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The value or priority (or both) of the top node, depending on the extract flag.  </p> </div></div>
     * @return TValue The value or priority (or both) of the top node, depending on the extract flag.*/
    public function top(): mixed {}

/**
*<div id="splpriorityqueue.extract" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplPriorityQueue::extract</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplPriorityQueue::extract</span> &mdash; <span class="dc-title">Extracts a node from top of the heap and sift up</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splpriorityqueue.extract-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplPriorityQueue::extract</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splpriorityqueue.extract-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splpriorityqueue.extract-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The value or priority (or both) of the extracted node, depending on the extract flag.  </p> </div></div>
     * @return TValue The value or priority (or both) of the extracted node, depending on the extract flag.*/
    public function extract(): mixed {}

/**
*<div id="splpriorityqueue.count" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplPriorityQueue::count</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplPriorityQueue::count</span> &mdash; <span class="dc-title">Counts the number of elements in the queue</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splpriorityqueue.count-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplPriorityQueue::count</strong></span>(): <span class="type" style="color:#EAB766">int</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splpriorityqueue.count-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splpriorityqueue.count-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the number of elements in the queue.  </p> </div></div>
     * @return int the number of elements in the queue.*/
    public function count(): int {}

/**
*<div id="splpriorityqueue.isempty" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplPriorityQueue::isEmpty</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplPriorityQueue::isEmpty</span> &mdash; <span class="dc-title">Checks whether the queue is empty</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splpriorityqueue.isempty-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplPriorityQueue::isEmpty</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splpriorityqueue.isempty-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splpriorityqueue.isempty-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns whether the queue is empty.  </p> </div></div>
     * @return bool whether the queue is empty.*/
    public function isEmpty(): bool {}

/**
*<div id="splpriorityqueue.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplPriorityQueue::rewind</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplPriorityQueue::rewind</span> &mdash; <span class="dc-title">Rewind iterator back to the start (no-op)</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splpriorityqueue.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplPriorityQueue::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   This rewinds the iterator to the beginning. This is a no-op for heaps   as the iterator is virtual and in fact never moves from the top of the    heap.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splpriorityqueue.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splpriorityqueue.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function rewind(): void {}

/**
*<div id="splpriorityqueue.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplPriorityQueue::current</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplPriorityQueue::current</span> &mdash; <span class="dc-title">Return current node pointed by the iterator</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splpriorityqueue.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplPriorityQueue::current</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Get the current datastructure node.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splpriorityqueue.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splpriorityqueue.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The value or priority (or both) of the current node, depending on the extract flag.  </p> </div></div>
     * @return TValue The value or priority (or both) of the current node, depending on the extract flag.*/
    public function current(): mixed {}

/**
*<div id="splpriorityqueue.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplPriorityQueue::key</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplPriorityQueue::key</span> &mdash; <span class="dc-title">Return current node index</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splpriorityqueue.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplPriorityQueue::key</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   This function returns the current node index  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splpriorityqueue.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splpriorityqueue.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current node index.  </p> </div></div>
     * @return int The current node index.*/
    public function key(): int {}

/**
*<div id="splpriorityqueue.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplPriorityQueue::next</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplPriorityQueue::next</span> &mdash; <span class="dc-title">Move to the next node</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splpriorityqueue.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplPriorityQueue::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Extracts the top node from the queue.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splpriorityqueue.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splpriorityqueue.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function next(): void {}

/**
*<div id="splpriorityqueue.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplPriorityQueue::valid</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplPriorityQueue::valid</span> &mdash; <span class="dc-title">Check whether the queue contains more nodes</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splpriorityqueue.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplPriorityQueue::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the queue contains any more nodes.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splpriorityqueue.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splpriorityqueue.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the queue contains any more nodes, <strong><span>false</span></strong> otherwise.  </p> </div></div>
     * @return bool true if the queue contains any more nodes, false otherwise.*/
    public function valid(): bool {}

/**
*<div id="splpriorityqueue.recoverfromcorruption" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplPriorityQueue::recoverFromCorruption</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplPriorityQueue::recoverFromCorruption</span> &mdash; <span class="dc-title">Recover from the corrupted state and allow further actions on the queue</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splpriorityqueue.recoverfromcorruption-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplPriorityQueue::recoverFromCorruption</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splpriorityqueue.recoverfromcorruption-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splpriorityqueue.recoverfromcorruption-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Always returns <strong><span>true</span></strong>.  </p> </div></div>
     * @return void*/
    public function recoverFromCorruption() {}

/**
*<div id="splpriorityqueue.iscorrupted" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplPriorityQueue::isCorrupted</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplPriorityQueue::isCorrupted</span> &mdash; <span class="dc-title">Tells if the priority queue is in a corrupted state</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splpriorityqueue.iscorrupted-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplPriorityQueue::isCorrupted</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splpriorityqueue.iscorrupted-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splpriorityqueue.iscorrupted-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the priority queue is corrupted, <strong><span>false</span></strong> otherwise.  </p> </div></div>
     * @return bool*/
    public function isCorrupted(): bool {}

/**
*<div id="splpriorityqueue.getextractflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplPriorityQueue::getExtractFlags</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplPriorityQueue::getExtractFlags</span> &mdash; <span class="dc-title">Get the flags of extraction</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splpriorityqueue.getextractflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplPriorityQueue::getExtractFlags</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splpriorityqueue.getextractflags-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splpriorityqueue.getextractflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the flags of extraction.  </p> </div></div>
     * @return int*/
    public function getExtractFlags(): int {}

    /**
     * @return array
     * @since 7.4
     */
    #[TentativeType]
    public function __debugInfo(): array {}
}

/**
*<div id="class.splfixedarray" class="reference"> <h1 class="title">The SplFixedArray class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p>   <div class="section" id="splfixedarray.intro">   <h2 class="title">简介</h2>   <p class="para">    The SplFixedArray class provides the main functionalities of array. The     main difference between a SplFixedArray and a normal PHP array is that     the SplFixedArray must be resized manually and allows only integers within     the range as indexes. The advantage is that it uses less memory than    a standard <span class="type" style="color:#EAB766">array</span>.   </p>  </div>   <div class="section" id="splfixedarray.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">SplFixedArray</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.iteratoraggregate.php" class="interfacename">IteratorAggregate</a>,     <a href="https://www.php.net/manual/zh/class.arrayaccess.php" class="interfacename">ArrayAccess</a>,     <a href="https://www.php.net/manual/zh/class.countable.php" class="interfacename">Countable</a>,     <a href="https://www.php.net/manual/zh/class.jsonserializable.php" class="interfacename">JsonSerializable</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$size</span><span class="initializer"> = 0</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.count.php" class="methodname" style="color:#CC7832">count</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.fromarray.php" class="methodname" style="color:#CC7832">fromArray</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$preserveKeys</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfixedarray.php" class="type SplFixedArray" style="color:#EAB766">SplFixedArray</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.getiterator.php" class="methodname" style="color:#CC7832">getIterator</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.getsize.php" class="methodname" style="color:#CC7832">getSize</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.jsonserialize.php" class="methodname" style="color:#CC7832">jsonSerialize</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.offsetexists.php" class="methodname" style="color:#CC7832">offsetExists</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.offsetget.php" class="methodname" style="color:#CC7832">offsetGet</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.offsetset.php" class="methodname" style="color:#CC7832">offsetSet</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.offsetunset.php" class="methodname" style="color:#CC7832">offsetUnset</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.serialize.php" class="methodname" style="color:#CC7832">__serialize</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.setsize.php" class="methodname" style="color:#CC7832">setSize</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$size</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.toarray.php" class="methodname" style="color:#CC7832">toArray</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.unserialize.php" class="methodname" style="color:#CC7832">__unserialize</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$data</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splfixedarray.wakeup.php" class="methodname" style="color:#CC7832">__wakeup</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>   </div>  <div class="section">   <h2 class="title">更新日志</h2>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.2.0</td>       <td>        The <span class="methodname" style="color:#CC7832">{@link SplFixedArray::__serialize()}</span> and        <span class="methodname" style="color:#CC7832">{@link SplFixedArray::__unserialize()}</span>        magic methods have been added to <span class="classname"><strong class="classname">SplFixedArray</strong></span>.       </td>      </tr>      <tr>       <td>8.1.0</td>       <td>        <span class="classname"><strong class="classname">SplFixedArray</strong></span> implements        <span class="interfacename"><a href="https://www.php.net/manual/zh/class.jsonserializable.php" class="interfacename">JsonSerializable</a></span> now.       </td>      </tr>      <tr>       <td>8.0.0</td>       <td>        <span class="classname"><strong class="classname">SplFixedArray</strong></span> implements        <span class="interfacename"><a href="https://www.php.net/manual/zh/class.iteratoraggregate.php" class="interfacename">IteratorAggregate</a></span> now.        Previously, <span class="interfacename"><a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a></span> was implemented instead.       </td>      </tr>     </tbody>       </table>  </div>  <div class="section" id="splfixedarray.examples">   <h2 class="title">示例</h2>   <p class="para">    <div class="example" id="">     <p><strong>示例 #1 <span class="classname"><strong class="classname">SplFixedArray</strong></span> usage example</strong></p>     <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Initialize the array with a fixed length<br /></span><span style="color: #9876AA">$array </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFixedArray</span><span style="color: #007700">(</span><span style="color: #9876AA">5</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$array</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">] = </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$array</span><span style="color: #007700">[</span><span style="color: #9876AA">4</span><span style="color: #007700">] = </span><span style="color: #DD0000">"foo"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]); </span><span style="color: #FF8000">// NULL<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]); </span><span style="color: #FF8000">// int(2)<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">[</span><span style="color: #DD0000">"4"</span><span style="color: #007700">]); </span><span style="color: #FF8000">// string(3) "foo"<br /><br />// Increase the size of the array to 10<br /></span><span style="color: #9876AA">$array</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setSize</span><span style="color: #007700">(</span><span style="color: #9876AA">10</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$array</span><span style="color: #007700">[</span><span style="color: #9876AA">9</span><span style="color: #007700">] = </span><span style="color: #DD0000">"asdf"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// Shrink the array to a size of 2<br /></span><span style="color: #9876AA">$array</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setSize</span><span style="color: #007700">(</span><span style="color: #9876AA">2</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// The following lines throw a RuntimeException: Index invalid or out of range<br /></span><span style="color: #007700">try {<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">[</span><span style="color: #DD0000">"non-numeric"</span><span style="color: #007700">]);<br />} catch(</span><span style="color: #9876AA">RuntimeException $re</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"RuntimeException: "</span><span style="color: #007700">.</span><span style="color: #9876AA">$re</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">().</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br />try {<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">[-</span><span style="color: #9876AA">1</span><span style="color: #007700">]);<br />} catch(</span><span style="color: #9876AA">RuntimeException $re</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"RuntimeException: "</span><span style="color: #007700">.</span><span style="color: #9876AA">$re</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">().</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br />try {<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">[</span><span style="color: #9876AA">5</span><span style="color: #007700">]);<br />} catch(</span><span style="color: #9876AA">RuntimeException $re</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"RuntimeException: "</span><span style="color: #007700">.</span><span style="color: #9876AA">$re</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">().</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>NULL<br>int(2)<br>string(3) &quot;foo&quot;<br>RuntimeException: Index invalid or out of range<br>RuntimeException: Index invalid or out of range<br>RuntimeException: Index invalid or out of range<br></span></div>     </div>    </div>   </p>  </div>   </div>   <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link SplFixedArray::__construct} — Constructs a new fixed array</li><li>{@link SplFixedArray::count} — Returns the size of the array</li><li>{@link SplFixedArray::current} — Return current array entry</li><li>{@link SplFixedArray::fromArray} — Import a PHP array in a SplFixedArray instance</li><li>{@link SplFixedArray::getIterator} — Retrieve the iterator to go through the array</li><li>{@link SplFixedArray::getSize} — Gets the size of the array</li><li>{@link SplFixedArray::jsonSerialize} — Returns a representation that can be converted to JSON</li><li>{@link SplFixedArray::key} — Return current array index</li><li>{@link SplFixedArray::next} — Move to next entry</li><li>{@link SplFixedArray::offsetExists} — Returns whether the requested index exists</li><li>{@link SplFixedArray::offsetGet} — Returns the value at the specified index</li><li>{@link SplFixedArray::offsetSet} — Sets a new value at a specified index</li><li>{@link SplFixedArray::offsetUnset} — Unsets the value at the specified $index</li><li>{@link SplFixedArray::rewind} — Rewind iterator back to the start</li><li>{@link SplFixedArray::__serialize} — Serializes the SplFixedArray object</li><li>{@link SplFixedArray::setSize} — Change the size of an array</li><li>{@link SplFixedArray::toArray} — Returns a PHP array from the fixed array</li><li>{@link SplFixedArray::__unserialize} — Deserializes the data parameter into an SplFixedArray object</li><li>{@link SplFixedArray::valid} — Check whether the array contains more elements</li><li>{@link SplFixedArray::__wakeup} — Reinitialises the array after being unserialised</li></ul></div>
*/
class SplFixedArray implements Iterator, ArrayAccess, Countable, IteratorAggregate, JsonSerializable
{
    /**
     * Constructs a new fixed array
     * @link https://php.net/manual/en/splfixedarray.construct.php
     * @param int $size [optional]
     */
    public function __construct(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $size = 0) {}

/**
*<div id="splfixedarray.count" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFixedArray::count</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFixedArray::count</span> &mdash; <span class="dc-title">Returns the size of the array</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfixedarray.count-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFixedArray::count</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Returns the size of the array.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfixedarray.count-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfixedarray.count-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the size of the array.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfixedarray.count-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFixedArray::count()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFixedArray</span><span style="color: #007700">(</span><span style="color: #9876AA">5</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$array</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">count</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>5<br>5<br></span></div>    </div>   </div>  </span> </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-splfixedarray.count-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    This method is functionally equivalent to <span class="methodname" style="color:#CC7832">{@link SplFixedArray::getSize()}</span>.   </p>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    The count of elements is always equal to the set size because all values are initially     initialized with <strong><span>null</span></strong>.   </p>  </p></blockquote> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfixedarray.count-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFixedArray::getSize()} - Gets the size of the array</span></li>  </ul> </div> </div>
     * @return int the size of the array.*/
    public function count(): int {}

/**
*<div id="splfixedarray.toarray" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFixedArray::toArray</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFixedArray::toArray</span> &mdash; <span class="dc-title">Returns a PHP array from the fixed array</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfixedarray.toarray-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFixedArray::toArray</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Returns a PHP array from the fixed array.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfixedarray.toarray-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfixedarray.toarray-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a PHP <span class="type" style="color:#EAB766">array</span>, similar to the fixed array.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfixedarray.toarray-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplFixedArray::toArray()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fa </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFixedArray</span><span style="color: #007700">(</span><span style="color: #9876AA">3</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$fa</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">] = </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$fa</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">] = </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$fa</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">toArray</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(3) {<br>  [0]=&gt;<br>  int(0)<br>  [1]=&gt;<br>  NULL<br>  [2]=&gt;<br>  int(2)<br>}<br></span></div>    </div>   </div>  </span> </div></div>
     * @return TValue[] a PHP array, similar to the fixed array.*/
    public function toArray(): array {}

/**
*<div id="splfixedarray.fromarray" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFixedArray::fromArray</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFixedArray::fromArray</span> &mdash; <span class="dc-title">Import a PHP array in a <span class="classname"><a href="https://www.php.net/manual/zh/class.splfixedarray.php" class="classname">SplFixedArray</a></span> instance</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfixedarray.fromarray-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>SplFixedArray::fromArray</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$preserveKeys</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splfixedarray.php" class="type SplFixedArray" style="color:#EAB766">SplFixedArray</a></span></div>  <p class="para rdfs-comment">   Import the PHP array <span class="parameter" style="color:#3A95FF">array</span>    in a new <span class="classname"><a href="https://www.php.net/manual/zh/class.splfixedarray.php" class="classname">SplFixedArray</a></span> instance  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfixedarray.fromarray-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       The array to import.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">preserveKeys</span></dt>     <dd>      <p class="para">       Try to save the numeric indexes used in the original array.       </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfixedarray.fromarray-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an instance of <span class="classname"><a href="https://www.php.net/manual/zh/class.splfixedarray.php" class="classname">SplFixedArray</a></span>    containing the array content.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfixedarray.fromarray-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplFixedArray::fromArray()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fa </span><span style="color: #007700">= </span><span style="color: #9876AA">SplFixedArray</span><span style="color: #007700">::</span><span style="color: #9876AA">fromArray</span><span style="color: #007700">(array(</span><span style="color: #9876AA">1 </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">0 </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3 </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">3</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$fa</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$fa </span><span style="color: #007700">= </span><span style="color: #9876AA">SplFixedArray</span><span style="color: #007700">::</span><span style="color: #9876AA">fromArray</span><span style="color: #007700">(array(</span><span style="color: #9876AA">1 </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">0 </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3 </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">3</span><span style="color: #007700">), </span><span style="color: #9876AA">false</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$fa</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(SplFixedArray)#1 (4) {<br>  [0]=&gt;<br>  int(2)<br>  [1]=&gt;<br>  int(1)<br>  [2]=&gt;<br>  NULL<br>  [3]=&gt;<br>  int(3)<br>}<br>object(SplFixedArray)#2 (3) {<br>  [0]=&gt;<br>  int(1)<br>  [1]=&gt;<br>  int(2)<br>  [2]=&gt;<br>  int(3)<br>}<br></span></div>    </div>   </div>  </span> </div></div>
     * @return SplFixedArray an instance of <b>SplFixedArray</b>*/
    public static function fromArray(
        #[LanguageLevelTypeAware(['8.0' => 'array'], default: '')] $array,
        #[LanguageLevelTypeAware(['8.0' => 'bool'], default: '')] $preserveKeys = true
    ): SplFixedArray {}

/**
*<div id="splfixedarray.getsize" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFixedArray::getSize</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFixedArray::getSize</span> &mdash; <span class="dc-title">Gets the size of the array</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfixedarray.getsize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFixedArray::getSize</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Gets the size of the array.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfixedarray.getsize-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfixedarray.getsize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the size of the array, as an <span class="type" style="color:#EAB766">int</span>.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfixedarray.getsize-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>SplFixedArray::getSize()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFixedArray</span><span style="color: #007700">(</span><span style="color: #9876AA">5</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$array</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getSize</span><span style="color: #007700">().</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$array</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setSize</span><span style="color: #007700">(</span><span style="color: #9876AA">10</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$array</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getSize</span><span style="color: #007700">().</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>5<br>10<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-splfixedarray.getsize-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    This method is functionally equivalent to <span class="methodname" style="color:#CC7832">{@link SplFixedArray::count()}</span>   </p>  </p></blockquote> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splfixedarray.getsize-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="methodname" style="color:#CC7832">{@link SplFixedArray::count()} - Returns the size of the array</span></li>  </ul> </div> </div>
     * @return int the size of the array, as an integer.*/
    public function getSize(): int {}

/**
*<div id="splfixedarray.setsize" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFixedArray::setSize</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFixedArray::setSize</span> &mdash; <span class="dc-title">Change the size of an array</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfixedarray.setsize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFixedArray::setSize</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$size</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Change the size of an array to the new size of <span class="parameter" style="color:#3A95FF">size</span>. If    <span class="parameter" style="color:#3A95FF">size</span> is less than the current array size, any values after the new size    will be discarded. If <span class="parameter" style="color:#3A95FF">size</span> is greater than the current array size, the    array will be padded with <strong><span>null</span></strong> values.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfixedarray.setsize-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">size</span></dt>     <dd>      <p class="para">       The new array size. This should be a value between <span>0</span> and <strong><span>PHP_INT_MAX</span></strong>.      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfixedarray.setsize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splfixedarray.setsize-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.invalidargumentexception.php" class="classname">InvalidArgumentException</a></span> when <span class="parameter" style="color:#3A95FF">size</span> is less than zero.  </p>  <p class="para">   Raises <strong><span>E_WARNING</span></strong> when <span class="parameter" style="color:#3A95FF">size</span> cannot be used as a number.  </p>  </div>   <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splfixedarray.setsize-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplFixedArray::setSize()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />   $array </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplFixedArray</span><span style="color: #007700">(</span><span style="color: #9876AA">5</span><span style="color: #007700">);<br />   echo </span><span style="color: #9876AA">$array</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getSize</span><span style="color: #007700">().</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />   </span><span style="color: #9876AA">$array</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setSize</span><span style="color: #007700">(</span><span style="color: #9876AA">10</span><span style="color: #007700">);<br />   echo </span><span style="color: #9876AA">$array</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getSize</span><span style="color: #007700">().</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>5<br>10<br></span></div>    </div>   </div>  </span> </div></div>
     * @return bool*/
    public function setSize(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $size) {}

/**
*<div id="splfixedarray.offsetexists" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFixedArray::offsetExists</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFixedArray::offsetExists</span> &mdash; <span class="dc-title">Returns whether the requested index exists</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfixedarray.offsetexists-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFixedArray::offsetExists</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks whether the requested index <span class="parameter" style="color:#3A95FF">index</span>    exists.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfixedarray.offsetexists-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">index</span></dt>     <dd>      <p class="para">       The index being checked.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfixedarray.offsetexists-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the requested <span class="parameter" style="color:#3A95FF">index</span> exists, otherwise <strong><span>false</span></strong>  </p> </div></div>
     * @return bool true if the requested <i>index</i> exists, otherwise false*/
    public function offsetExists($index): bool {}

/**
*<div id="splfixedarray.offsetget" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFixedArray::offsetGet</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFixedArray::offsetGet</span> &mdash; <span class="dc-title">Returns the value at the specified index</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfixedarray.offsetget-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFixedArray::offsetGet</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Returns the value at the index <span class="parameter" style="color:#3A95FF">index</span>.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfixedarray.offsetget-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">index</span></dt>     <dd>      <p class="para">       The index with the value.      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfixedarray.offsetget-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The value at the specified <span class="parameter" style="color:#3A95FF">index</span>.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splfixedarray.offsetget-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> when <span class="parameter" style="color:#3A95FF">index</span> is outside    the defined size of the array or when <span class="parameter" style="color:#3A95FF">index</span> cannot be parsed as an integer.  </p> </div> </div>
     * @return TValue The value at the specified <i>index</i>.*/
    public function offsetGet($index): mixed {}

/**
*<div id="splfixedarray.offsetset" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFixedArray::offsetSet</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFixedArray::offsetSet</span> &mdash; <span class="dc-title">Sets a new value at a specified index</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfixedarray.offsetset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFixedArray::offsetSet</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets the value at the specified <span class="parameter" style="color:#3A95FF">index</span> to <span class="parameter" style="color:#3A95FF">value</span>.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfixedarray.offsetset-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">index</span></dt>     <dd>      <p class="para">       The index being set.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The new value for the <span class="parameter" style="color:#3A95FF">index</span>.      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfixedarray.offsetset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splfixedarray.offsetset-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> when <span class="parameter" style="color:#3A95FF">index</span> is outside   the defined size of the array or when <span class="parameter" style="color:#3A95FF">index</span> cannot be parsed as an integer.  </p> </div> </div>
     * @return void*/
    public function offsetSet($index, #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value): void {}

/**
*<div id="splfixedarray.offsetunset" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFixedArray::offsetUnset</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplFixedArray::offsetUnset</span> &mdash; <span class="dc-title">Unsets the value at the specified $index</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfixedarray.offsetunset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFixedArray::offsetUnset</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$index</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Unsets the value at the specified index.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfixedarray.offsetunset-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">index</span></dt>     <dd>      <p class="para">       The index being unset.      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfixedarray.offsetunset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splfixedarray.offsetunset-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> when <span class="parameter" style="color:#3A95FF">index</span> is outside   the defined size of the array or when <span class="parameter" style="color:#3A95FF">index</span> cannot be parsed as an integer.  </p> </div>  </div>
     * @return void*/
    public function offsetUnset($index): void {}

/**
*<div id="splfixedarray.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFixedArray::rewind</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7)</p><p class="refpurpose"><span class="refname">SplFixedArray::rewind</span> &mdash; <span class="dc-title">Rewind iterator back to the start</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfixedarray.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFixedArray::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Rewinds the iterator to the beginning.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfixedarray.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfixedarray.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function rewind() {}

/**
*<div id="splfixedarray.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFixedArray::current</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7)</p><p class="refpurpose"><span class="refname">SplFixedArray::current</span> &mdash; <span class="dc-title">Return current array entry</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfixedarray.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFixedArray::current</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Get the current array element.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfixedarray.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfixedarray.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current element value.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splfixedarray.current-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> when the internal array pointer points to an    invalid index or is out of bounds.   </p> </div> </div>
     * @return TValue The current element value.*/
    public function current() {}

/**
*<div id="splfixedarray.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFixedArray::key</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7)</p><p class="refpurpose"><span class="refname">SplFixedArray::key</span> &mdash; <span class="dc-title">Return current array index</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfixedarray.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFixedArray::key</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Returns the current array index.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfixedarray.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfixedarray.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current array index.  </p> </div></div>
     * @return int The current array index.*/
    public function key() {}

/**
*<div id="splfixedarray.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFixedArray::next</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7)</p><p class="refpurpose"><span class="refname">SplFixedArray::next</span> &mdash; <span class="dc-title">Move to next entry</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfixedarray.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFixedArray::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Move the iterator to the next array entry.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfixedarray.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfixedarray.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function next() {}

/**
*<div id="splfixedarray.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFixedArray::valid</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7)</p><p class="refpurpose"><span class="refname">SplFixedArray::valid</span> &mdash; <span class="dc-title">Check whether the array contains more elements</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfixedarray.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFixedArray::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the array contains any more elements.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfixedarray.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfixedarray.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the array contains any more elements, <strong><span>false</span></strong> otherwise.  </p> </div></div>
     * @return bool true if the array contains any more elements, false otherwise.*/
    public function valid(): bool {}

    #[TentativeType]
    public function __wakeup(): void {}

    #[PhpStormStubsElementAvailable(from: '8.2')]
    public function __serialize(): array {}

    /**
     * @param array $data
     */
    #[PhpStormStubsElementAvailable(from: '8.2')]
    public function __unserialize(array $data): void {}

/**
*<div id="splfixedarray.getiterator" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFixedArray::getIterator</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">SplFixedArray::getIterator</span> &mdash; <span class="dc-title">Retrieve the iterator to go through the array</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfixedarray.getiterator-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFixedArray::getIterator</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></div>  <p class="para rdfs-comment">   Returns the iterator to go through the array.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfixedarray.getiterator-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfixedarray.getiterator-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   An instance of an object implementing <span class="classname"><a href="https://www.php.net/manual/zh/class.iterator.php" class="classname">Iterator</a></span> to go   through the array.  </p> </div></div>
     * @return Iterator<int, TValue>*/
    public function getIterator(): Iterator {}

/**
*<div id="splfixedarray.jsonserialize" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplFixedArray::jsonSerialize</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">SplFixedArray::jsonSerialize</span> &mdash; <span class="dc-title">Returns a representation that can be converted to JSON</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splfixedarray.jsonserialize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplFixedArray::jsonSerialize</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Serializes the array to a value that can be serialized natively by   <span class="function">{@link json_encode()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splfixedarray.jsonserialize-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splfixedarray.jsonserialize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns array data which can be serialized by <span class="function">{@link json_encode()}</span>,   which is a value of any type other than a <a href="https://www.php.net/manual/zh/language.types.resource.php" class="link">resource</a>.  </p> </div></div>
*/
    public function jsonSerialize(): array {}
}

/**
 * The <b>SplObserver</b> interface is used alongside
 * <b>SplSubject</b> to implement the Observer Design Pattern.
 * @link https://php.net/manual/en/class.splobserver.php
 */
interface SplObserver
{
    /**
     * Receive update from subject
     * @link https://php.net/manual/en/splobserver.update.php
     * @param SplSubject $subject <p>
     * The <b>SplSubject</b> notifying the observer of an update.
     * </p>
     * @return void
     */
    #[TentativeType]
    public function update(SplSubject $subject): void;
}

/**
 * The <b>SplSubject</b> interface is used alongside
 * <b>SplObserver</b> to implement the Observer Design Pattern.
 * @link https://php.net/manual/en/class.splsubject.php
 */
interface SplSubject
{
    /**
     * Attach an SplObserver
     * @link https://php.net/manual/en/splsubject.attach.php
     * @param SplObserver $observer <p>
     * The <b>SplObserver</b> to attach.
     * </p>
     * @return void
     */
    #[TentativeType]
    public function attach(SplObserver $observer): void;

    /**
     * Detach an observer
     * @link https://php.net/manual/en/splsubject.detach.php
     * @param SplObserver $observer <p>
     * The <b>SplObserver</b> to detach.
     * </p>
     * @return void
     */
    #[TentativeType]
    public function detach(SplObserver $observer): void;

    /**
     * Notify an observer
     * @link https://php.net/manual/en/splsubject.notify.php
     * @return void
     */
    #[TentativeType]
    public function notify(): void;
}

/**
*<div id="class.splobjectstorage" class="reference"> <h1 class="title">The SplObjectStorage class</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>  <div class="section" id="splobjectstorage.intro">   <h2 class="title">简介</h2>   <p class="para">    The SplObjectStorage class provides a map from objects to data or, by    ignoring data, an object set. This dual purpose can be useful in many    cases involving the need to uniquely identify objects.   </p>  </div>  <div class="section" id="splobjectstorage.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">SplObjectStorage</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.countable.php" class="interfacename">Countable</a>,     <a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a>,     <a href="https://www.php.net/manual/zh/class.serializable.php" class="interfacename">Serializable</a>,     <a href="https://www.php.net/manual/zh/class.arrayaccess.php" class="interfacename">ArrayAccess</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.addall.php" class="methodname" style="color:#CC7832">addAll</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splobjectstorage.php" class="type SplObjectStorage" style="color:#EAB766">SplObjectStorage</a></span> <span class="parameter" style="color:#3A95FF">$storage</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.attach.php" class="methodname" style="color:#CC7832">attach</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$info</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.contains.php" class="methodname" style="color:#CC7832">contains</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.count.php" class="methodname" style="color:#CC7832">count</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = <strong><span>COUNT_NORMAL</span></strong></span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766">object</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.detach.php" class="methodname" style="color:#CC7832">detach</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.gethash.php" class="methodname" style="color:#CC7832">getHash</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.getinfo.php" class="methodname" style="color:#CC7832">getInfo</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.offsetexists.php" class="methodname" style="color:#CC7832">offsetExists</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.offsetget.php" class="methodname" style="color:#CC7832">offsetGet</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.offsetset.php" class="methodname" style="color:#CC7832">offsetSet</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$info</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.offsetunset.php" class="methodname" style="color:#CC7832">offsetUnset</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.removeall.php" class="methodname" style="color:#CC7832">removeAll</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splobjectstorage.php" class="type SplObjectStorage" style="color:#EAB766">SplObjectStorage</a></span> <span class="parameter" style="color:#3A95FF">$storage</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.removeallexcept.php" class="methodname" style="color:#CC7832">removeAllExcept</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splobjectstorage.php" class="type SplObjectStorage" style="color:#EAB766">SplObjectStorage</a></span> <span class="parameter" style="color:#3A95FF">$storage</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.serialize.php" class="methodname" style="color:#CC7832">serialize</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.setinfo.php" class="methodname" style="color:#CC7832">setInfo</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$info</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.unserialize.php" class="methodname" style="color:#CC7832">unserialize</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/splobjectstorage.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div>  <div class="section" id="splobjectstorage.examples">   <h2 class="title">示例</h2>   <p class="para">    <div class="example" id="">     <p><strong>示例 #1 <span class="classname"><strong class="classname">SplObjectStorage</strong></span> as a set</strong></p>     <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// As an object set<br /></span><span style="color: #9876AA">$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$o1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o3 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o2</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">contains</span><span style="color: #007700">(</span><span style="color: #9876AA">$o1</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">contains</span><span style="color: #007700">(</span><span style="color: #9876AA">$o2</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">contains</span><span style="color: #007700">(</span><span style="color: #9876AA">$o3</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">detach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o2</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">contains</span><span style="color: #007700">(</span><span style="color: #9876AA">$o1</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">contains</span><span style="color: #007700">(</span><span style="color: #9876AA">$o2</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">contains</span><span style="color: #007700">(</span><span style="color: #9876AA">$o3</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(true)<br>bool(false)<br>bool(true)<br>bool(false)<br>bool(false)<br></span></div>     </div>    </div>    <div class="example" id="">     <p><strong>示例 #2 <span class="classname"><strong class="classname">SplObjectStorage</strong></span> as a map</strong></p>     <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// As a map from objects to data<br /></span><span style="color: #9876AA">$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$o1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o3 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">[</span><span style="color: #9876AA">$o1</span><span style="color: #007700">] = </span><span style="color: #DD0000">"data for object 1"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">[</span><span style="color: #9876AA">$o2</span><span style="color: #007700">] = array(</span><span style="color: #9876AA">1</span><span style="color: #007700">,</span><span style="color: #9876AA">2</span><span style="color: #007700">,</span><span style="color: #9876AA">3</span><span style="color: #007700">);<br /><br />if (isset(</span><span style="color: #9876AA">$s</span><span style="color: #007700">[</span><span style="color: #9876AA">$o2</span><span style="color: #007700">])) {<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">[</span><span style="color: #9876AA">$o2</span><span style="color: #007700">]);<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(3) {<br>  [0]=&gt;<br>  int(1)<br>  [1]=&gt;<br>  int(2)<br>  [2]=&gt;<br>  int(3)<br>}<br></span></div>     </div>    </div>   </p>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link SplObjectStorage::addAll} — Adds all objects from another storage</li><li>{@link SplObjectStorage::attach} — Adds an object in the storage</li><li>{@link SplObjectStorage::contains} — Checks if the storage contains a specific object</li><li>{@link SplObjectStorage::count} — Returns the number of objects in the storage</li><li>{@link SplObjectStorage::current} — Returns the current storage entry</li><li>{@link SplObjectStorage::detach} — Removes an object from the storage</li><li>{@link SplObjectStorage::getHash} — Calculate a unique identifier for the contained objects</li><li>{@link SplObjectStorage::getInfo} — Returns the data associated with the current iterator entry</li><li>{@link SplObjectStorage::key} — Returns the index at which the iterator currently is</li><li>{@link SplObjectStorage::next} — Move to the next entry</li><li>{@link SplObjectStorage::offsetExists} — Checks whether an object exists in the storage</li><li>{@link SplObjectStorage::offsetGet} — Returns the data associated with an object</li><li>{@link SplObjectStorage::offsetSet} — Associates data to an object in the storage</li><li>{@link SplObjectStorage::offsetUnset} — Removes an object from the storage</li><li>{@link SplObjectStorage::removeAll} — Removes objects contained in another storage from the current storage</li><li>{@link SplObjectStorage::removeAllExcept} — Removes all objects except for those contained in another storage from the current storage</li><li>{@link SplObjectStorage::rewind} — Rewind the iterator to the first storage element</li><li>{@link SplObjectStorage::serialize} — Serializes the storage</li><li>{@link SplObjectStorage::setInfo} — Sets the data associated with the current iterator entry</li><li>{@link SplObjectStorage::unserialize} — Unserializes a storage from its string representation</li><li>{@link SplObjectStorage::valid} — Returns if the current iterator entry is valid</li></ul></div>
*/
class SplObjectStorage implements Countable, Iterator, Serializable, ArrayAccess
{
/**
*<div id="splobjectstorage.attach" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::attach</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::attach</span> &mdash; <span class="dc-title">Adds an object in the storage</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.attach-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::attach</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$info</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Adds an <span class="type" style="color:#EAB766">object</span> inside the storage, and optionally associate it to some data.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.attach-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       The <span class="type" style="color:#EAB766">object</span> to add.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">info</span></dt>     <dd>      <p class="para">       The data to associate with the <span class="type" style="color:#EAB766">object</span>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.attach-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.attach-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::attach()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$o1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o1</span><span style="color: #007700">); </span><span style="color: #FF8000">// similar to $s[$o1] = NULL;<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o2</span><span style="color: #007700">, </span><span style="color: #DD0000">"hello"</span><span style="color: #007700">); </span><span style="color: #FF8000">// similar to $s[$o2] = "hello";<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">[</span><span style="color: #9876AA">$o1</span><span style="color: #007700">]);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">[</span><span style="color: #9876AA">$o2</span><span style="color: #007700">]);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>NULL<br>string(5) &quot;hello&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.attach-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::detach()} - Removes an object from the storage</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::offsetSet()} - Associates data to an object in the storage</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function attach(
        #[LanguageLevelTypeAware(['8.0' => 'object'], default: '')] $object,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $info = null
    ): void {}

/**
*<div id="splobjectstorage.detach" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::detach</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::detach</span> &mdash; <span class="dc-title">Removes an <span class="type" style="color:#EAB766">object</span> from the storage</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.detach-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::detach</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Removes the <span class="type" style="color:#EAB766">object</span> from the storage.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.detach-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       The <span class="type" style="color:#EAB766">object</span> to remove.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.detach-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.detach-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::detach()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$o </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">detach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(1)<br>int(0)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.detach-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::attach()} - Adds an object in the storage</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::removeAll()} - Removes objects contained in another storage from the current storage</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function detach(#[LanguageLevelTypeAware(['8.0' => 'object'], default: '')] $object): void {}

/**
*<div id="splobjectstorage.contains" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::contains</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::contains</span> &mdash; <span class="dc-title">Checks if the storage contains a specific object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.contains-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::contains</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the storage contains the <span class="type" style="color:#EAB766">object</span> provided.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.contains-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       The <span class="type" style="color:#EAB766">object</span> to look for.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.contains-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the <span class="type" style="color:#EAB766">object</span> is in the storage, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.contains-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::contains()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$o1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">[</span><span style="color: #9876AA">$o1</span><span style="color: #007700">] = </span><span style="color: #DD0000">"hello"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">contains</span><span style="color: #007700">(</span><span style="color: #9876AA">$o1</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">contains</span><span style="color: #007700">(</span><span style="color: #9876AA">$o2</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.contains-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::offsetExists()} - Checks whether an object exists in the storage</span></li>   </ul>  </span> </div></div>
     * @return bool true if the object is in the storage, false otherwise.*/
    public function contains(#[LanguageLevelTypeAware(['8.0' => 'object'], default: '')] $object): bool {}

/**
*<div id="splobjectstorage.addall" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::addAll</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::addAll</span> &mdash; <span class="dc-title">Adds all objects from another storage</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.addall-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::addAll</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splobjectstorage.php" class="type SplObjectStorage" style="color:#EAB766">SplObjectStorage</a></span> <span class="parameter" style="color:#3A95FF">$storage</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Adds all objects-data pairs from a different storage in the current storage.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.addall-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">storage</span></dt>     <dd>      <p class="para">       The storage you want to import.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.addall-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The number of objects in the storage.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.addall-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::addAll()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$o </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$a </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #9876AA">$o</span><span style="color: #007700">] = </span><span style="color: #DD0000">"hello"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$b </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addAll</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">$b</span><span style="color: #007700">[</span><span style="color: #9876AA">$o</span><span style="color: #007700">].</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>hello<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.addall-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::removeAll()} - Removes objects contained in another storage from the current storage</span></li>   </ul>  </span> </div></div>
     * @return int*/
    public function addAll(#[LanguageLevelTypeAware(['8.0' => 'SplObjectStorage'], default: '')] $storage): int {}

/**
*<div id="splobjectstorage.removeall" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::removeAll</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::removeAll</span> &mdash; <span class="dc-title">Removes objects contained in another storage from the current storage</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.removeall-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::removeAll</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splobjectstorage.php" class="type SplObjectStorage" style="color:#EAB766">SplObjectStorage</a></span> <span class="parameter" style="color:#3A95FF">$storage</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Removes objects contained in another storage from the current storage.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.removeall-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">storage</span></dt>     <dd>      <p class="para">       The storage containing the elements to remove.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.removeall-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the number of remaining objects.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.removeall-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::removeAll()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$o1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$a </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$a</span><span style="color: #007700">[</span><span style="color: #9876AA">$o1</span><span style="color: #007700">] = </span><span style="color: #DD0000">"foo"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$b </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$b</span><span style="color: #007700">[</span><span style="color: #9876AA">$o1</span><span style="color: #007700">] = </span><span style="color: #DD0000">"bar"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$b</span><span style="color: #007700">[</span><span style="color: #9876AA">$o2</span><span style="color: #007700">] = </span><span style="color: #DD0000">"gee"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">removeAll</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(2)<br>int(1)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.removeall-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::addAll()} - Adds all objects from another storage</span></li>   </ul>  </span> </div></div>
     * @return int*/
    public function removeAll(#[LanguageLevelTypeAware(['8.0' => 'SplObjectStorage'], default: '')] $storage): int {}

/**
*<div id="splobjectstorage.removeallexcept" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::removeAllExcept</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.6, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::removeAllExcept</span> &mdash; <span class="dc-title">Removes all objects except for those contained in another storage from the current storage</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.removeallexcept-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::removeAllExcept</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.splobjectstorage.php" class="type SplObjectStorage" style="color:#EAB766">SplObjectStorage</a></span> <span class="parameter" style="color:#3A95FF">$storage</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Removes all objects except for those contained in another storage from the current storage.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.removeallexcept-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">storage</span></dt>     <dd>      <p class="para">       The storage containing the elements to retain in the current storage.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.removeallexcept-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the number of remaining objects.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.removeallexcept-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::removeAllExcept()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$a </span><span style="color: #007700">= (object) </span><span style="color: #DD0000">'a'</span><span style="color: #007700">; <br /></span><span style="color: #9876AA">$b </span><span style="color: #007700">= (object) </span><span style="color: #DD0000">'b'</span><span style="color: #007700">; <br /></span><span style="color: #9876AA">$c </span><span style="color: #007700">= (object) </span><span style="color: #DD0000">'c'</span><span style="color: #007700">; <br /><br /></span><span style="color: #9876AA">$foo </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$foo</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$foo</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$bar </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$bar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$bar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$c</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$foo</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">removeAllExcept</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">contains</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">contains</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>bool(true)<br></span></div>    </div>   </div>  </span> </div></div>
     * @return int*/
    public function removeAllExcept(#[LanguageLevelTypeAware(['8.0' => 'SplObjectStorage'], default: '')] $storage): int {}

/**
*<div id="splobjectstorage.getinfo" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::getInfo</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::getInfo</span> &mdash; <span class="dc-title">Returns the data associated with the current iterator entry</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.getinfo-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::getInfo</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Returns the data, or info, associated with the object pointed by the current iterator position.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.getinfo-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.getinfo-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The data associated with the current iterator position.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.getinfo-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::getInfo()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$o1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o1</span><span style="color: #007700">, </span><span style="color: #DD0000">"d1"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o2</span><span style="color: #007700">, </span><span style="color: #DD0000">"d2"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">();<br />while(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()) {<br />    </span><span style="color: #9876AA">$index  </span><span style="color: #007700">= </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">();<br />    </span><span style="color: #9876AA">$object </span><span style="color: #007700">= </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">(); </span><span style="color: #FF8000">// similar to current($s)<br />    </span><span style="color: #9876AA">$data   </span><span style="color: #007700">= </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getInfo</span><span style="color: #007700">();<br /><br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$object</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(stdClass)#2 (0) {<br>}<br>string(2) &quot;d1&quot;<br>object(stdClass)#3 (0) {<br>}<br>string(2) &quot;d2&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.getinfo-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::current()} - Returns the current storage entry</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::rewind()} - Rewind the iterator to the first storage element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::key()} - Returns the index at which the iterator currently is</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::next()} - Move to the next entry</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::valid()} - Returns if the current iterator entry is valid</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::setInfo()} - Sets the data associated with the current iterator entry</span></li>   </ul>  </span> </div></div>
     * @return TValue The data associated with the current iterator position.*/
    public function getInfo(): mixed {}

/**
*<div id="splobjectstorage.setinfo" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::setInfo</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::setInfo</span> &mdash; <span class="dc-title">Sets the data associated with the current iterator entry</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.setinfo-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::setInfo</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$info</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Associates data, or info, with the object currently pointed to by the iterator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.setinfo-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">info</span></dt>     <dd>      <p class="para">       The data to associate with the current iterator entry.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.setinfo-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.setinfo-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::setInfo()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$o1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o1</span><span style="color: #007700">, </span><span style="color: #DD0000">"d1"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o2</span><span style="color: #007700">, </span><span style="color: #DD0000">"d2"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">();<br />while(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()) {<br />    </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setInfo</span><span style="color: #007700">(</span><span style="color: #DD0000">"new"</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">[</span><span style="color: #9876AA">$o1</span><span style="color: #007700">]);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">[</span><span style="color: #9876AA">$o2</span><span style="color: #007700">]);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(3) &quot;new&quot;<br>string(3) &quot;new&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.setinfo-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::current()} - Returns the current storage entry</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::rewind()} - Rewind the iterator to the first storage element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::key()} - Returns the index at which the iterator currently is</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::next()} - Move to the next entry</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::valid()} - Returns if the current iterator entry is valid</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::getInfo()} - Returns the data associated with the current iterator entry</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function setInfo(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $info): void {}

/**
*<div id="splobjectstorage.count" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::count</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::count</span> &mdash; <span class="dc-title">Returns the number of objects in the storage</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.count-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::count</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = <strong><span>COUNT_NORMAL</span></strong></span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Counts the number of objects in the storage.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.count-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">mode</span></dt>     <dd>      <p class="para">       If the optional <span class="parameter" style="color:#3A95FF">mode</span> parameter is set to       <strong><span>COUNT_RECURSIVE</span></strong> (or 1), <span class="function"><strong style="color:#CC7832">SplObjectStorage::count()</strong></span>       will recursively count the storage.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.count-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The number of objects in the storage.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.count-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::count()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$o1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">count</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(2)<br>int(2)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.count-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::attach()} - Adds an object in the storage</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::detach()} - Removes an object from the storage</span></li>   </ul>  </span> </div></div>
     * @return int The number of objects in the storage.*/
    public function count(#[PhpStormStubsElementAvailable(from: '8.0')] int $mode = COUNT_NORMAL): int {}

/**
*<div id="splobjectstorage.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::rewind</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::rewind</span> &mdash; <span class="dc-title">Rewind the iterator to the first storage element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Rewind the iterator to the first storage element.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.rewind-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::rewind()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$o1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o1</span><span style="color: #007700">, </span><span style="color: #DD0000">"d1"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o2</span><span style="color: #007700">, </span><span style="color: #DD0000">"d2"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">();<br />while(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()) {<br />    </span><span style="color: #9876AA">$index  </span><span style="color: #007700">= </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">();<br />    </span><span style="color: #9876AA">$object </span><span style="color: #007700">= </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">(); </span><span style="color: #FF8000">// similar to current($s)<br />    </span><span style="color: #9876AA">$data   </span><span style="color: #007700">= </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getInfo</span><span style="color: #007700">();<br /><br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$object</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(1)<br>int(0)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.rewind-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::next()} - Move to the next entry</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function rewind(): void {}

/**
*<div id="splobjectstorage.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::valid</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::valid</span> &mdash; <span class="dc-title">Returns if the current iterator entry is valid</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Returns if the current iterator entry is valid.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the iterator entry is valid, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.valid-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::valid()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$o1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o1</span><span style="color: #007700">, </span><span style="color: #DD0000">"d1"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o2</span><span style="color: #007700">, </span><span style="color: #DD0000">"d2"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">();<br />while(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()) {<br />    echo </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">().</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>0<br>1<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.valid-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::current()} - Returns the current storage entry</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::getInfo()} - Returns the data associated with the current iterator entry</span></li>   </ul>  </span> </div></div>
     * @return bool true if the iterator entry is valid, false otherwise.*/
    public function valid(): bool {}

/**
*<div id="splobjectstorage.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::key</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::key</span> &mdash; <span class="dc-title">Returns the index at which the iterator currently is</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::key</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Returns the index at which the iterator currently is.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The index corresponding to the position of the iterator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.key-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::key()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$o1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o1</span><span style="color: #007700">, </span><span style="color: #DD0000">"d1"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o2</span><span style="color: #007700">, </span><span style="color: #DD0000">"d2"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">();<br />while(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()) {<br />    </span><span style="color: #9876AA">$index  </span><span style="color: #007700">= </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">();<br />    </span><span style="color: #9876AA">$object </span><span style="color: #007700">= </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">(); </span><span style="color: #FF8000">// similar to current($s)<br /><br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$index</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$object</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(0)<br>object(stdClass)#2 (0) {<br>}<br>int(1)<br>object(stdClass)#3 (0) {<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.key-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::rewind()} - Rewind the iterator to the first storage element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::current()} - Returns the current storage entry</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::next()} - Move to the next entry</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::valid()} - Returns if the current iterator entry is valid</span></li>   </ul>  </span> </div></div>
     * @return int The index corresponding to the position of the iterator.*/
    public function key(): int {}

/**
*<div id="splobjectstorage.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::current</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::current</span> &mdash; <span class="dc-title">Returns the current storage entry</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::current</strong></span>(): <span class="type" style="color:#EAB766">object</span></div>  <p class="para rdfs-comment">   Returns the current storage entry.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The <span class="type" style="color:#EAB766">object</span> at the current iterator position.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-splobjectstorage.current-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.1.0</td>      <td>       <span class="function"><strong style="color:#CC7832">SplObjectStorage::current()</strong></span> now throws an <span class="classname"><a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a></span> exception       if the current position is invalid.  Previously, <strong><span>false</span></strong> was returned instead.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.current-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::current()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$o1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o1</span><span style="color: #007700">, </span><span style="color: #DD0000">"d1"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o2</span><span style="color: #007700">, </span><span style="color: #DD0000">"d2"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">();<br />while(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()) {<br />    </span><span style="color: #9876AA">$index  </span><span style="color: #007700">= </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">();<br />    </span><span style="color: #9876AA">$object </span><span style="color: #007700">= </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">(); </span><span style="color: #FF8000">// similar to current($s)<br />    </span><span style="color: #9876AA">$data   </span><span style="color: #007700">= </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getInfo</span><span style="color: #007700">();<br /><br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$object</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(stdClass)#2 (0) {<br>}<br>string(2) &quot;d1&quot;<br>object(stdClass)#3 (0) {<br>}<br>string(2) &quot;d2&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.current-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::rewind()} - Rewind the iterator to the first storage element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::key()} - Returns the index at which the iterator currently is</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::next()} - Move to the next entry</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::valid()} - Returns if the current iterator entry is valid</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::getInfo()} - Returns the data associated with the current iterator entry</span></li>   </ul>  </span> </div></div>
     * @return TObject The object at the current iterator position.*/
    public function current(): object {}

/**
*<div id="splobjectstorage.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::next</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::next</span> &mdash; <span class="dc-title">Move to the next entry</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Moves the iterator to the next <span class="type" style="color:#EAB766">object</span> in the storage.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.next-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::next()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$o1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o1</span><span style="color: #007700">, </span><span style="color: #DD0000">"d1"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o2</span><span style="color: #007700">, </span><span style="color: #DD0000">"d2"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">();<br />while(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()) {<br />    </span><span style="color: #9876AA">$index  </span><span style="color: #007700">= </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">();<br />    </span><span style="color: #9876AA">$object </span><span style="color: #007700">= </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">(); </span><span style="color: #FF8000">// similar to current($s)<br /><br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$index</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$object</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(0)<br>object(stdClass)#2 (0) {<br>}<br>int(1)<br>object(stdClass)#3 (0) {<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.next-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SPLObjectStorage::rewind()} - Rewind the iterator to the first storage element</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function next(): void {}

/**
*<div id="splobjectstorage.unserialize" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::unserialize</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::unserialize</span> &mdash; <span class="dc-title">Unserializes a storage from its string representation</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.unserialize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::unserialize</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Unserializes storage entries and attach them to the current storage.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.unserialize-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">data</span></dt>     <dd>      <p class="para">       The serialized representation of a storage.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.unserialize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.unserialize-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::unserialize()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$s1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$s2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$s1</span><span style="color: #007700">[</span><span style="color: #9876AA">$o</span><span style="color: #007700">] = </span><span style="color: #DD0000">"data"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$s2</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">unserialize</span><span style="color: #007700">(</span><span style="color: #9876AA">$s1</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">serialize</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$s2</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(1)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.unserialize-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::serialize()} - Serializes the storage</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function unserialize(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $data): void {}

/**
*<div id="splobjectstorage.serialize" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::serialize</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::serialize</span> &mdash; <span class="dc-title">Serializes the storage</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.serialize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::serialize</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Returns a string representation of the storage.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.serialize-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.serialize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   A string representing the storage.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.serialize-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::serialize()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">[</span><span style="color: #9876AA">$o</span><span style="color: #007700">] = </span><span style="color: #DD0000">"data"</span><span style="color: #007700">;<br /><br />echo </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">serialize</span><span style="color: #007700">().</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>x:i:1;O:8:&quot;stdClass&quot;:0:{},s:4:&quot;data&quot;;;m:a:0:{}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.serialize-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::unserialize()} - Unserializes a storage from its string representation</span></li>   </ul>  </span> </div></div>
     * @return string A string representing the storage.*/
    public function serialize(): string {}

/**
*<div id="splobjectstorage.offsetexists" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::offsetExists</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::offsetExists</span> &mdash; <span class="dc-title">Checks whether an object exists in the storage</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.offsetexists-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::offsetExists</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks whether an <span class="type" style="color:#EAB766">object</span> exists in the storage.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::offsetExists()</strong></span> is an alias of <span class="methodname" style="color:#CC7832">{@link SplObjectStorage::contains()}</span>.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.offsetexists-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       The <span class="type" style="color:#EAB766">object</span> to look for.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.offsetexists-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the <span class="type" style="color:#EAB766">object</span> exists in the storage,   and <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.offsetexists-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::offsetExists()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o1</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">offsetExists</span><span style="color: #007700">(</span><span style="color: #9876AA">$o1</span><span style="color: #007700">)); </span><span style="color: #FF8000">// Similar to isset($s[$o1])<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">offsetExists</span><span style="color: #007700">(</span><span style="color: #9876AA">$o2</span><span style="color: #007700">)); </span><span style="color: #FF8000">// Similar to isset($s[$o2])<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.offsetexists-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::offsetSet()} - Associates data to an object in the storage</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::offsetGet()} - Returns the data associated with an object</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::offsetUnset()} - Removes an object from the storage</span></li>   </ul>  </span> </div></div>
     * @return bool true if the object exists in the storage,*/
    public function offsetExists($object): bool {}

/**
*<div id="splobjectstorage.offsetset" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::offsetSet</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::offsetSet</span> &mdash; <span class="dc-title">Associates data to an object in the storage</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.offsetset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::offsetSet</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$info</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Associate data to an <span class="type" style="color:#EAB766">object</span> in the storage.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::offsetSet()</strong></span> is an alias of <span class="methodname" style="color:#CC7832">{@link SplObjectStorage::attach()}</span>.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.offsetset-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       The <span class="type" style="color:#EAB766">object</span> to associate data with.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">info</span></dt>     <dd>      <p class="para">       The data to associate with the <span class="type" style="color:#EAB766">object</span>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.offsetset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.offsetset-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::offsetSet()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$o1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">offsetSet</span><span style="color: #007700">(</span><span style="color: #9876AA">$o1</span><span style="color: #007700">, </span><span style="color: #DD0000">"hello"</span><span style="color: #007700">); </span><span style="color: #FF8000">// Similar to $s[$o1] = "hello";<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">[</span><span style="color: #9876AA">$o1</span><span style="color: #007700">]);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(5) &quot;hello&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.offsetset-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::attach()} - Adds an object in the storage</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::offsetGet()} - Returns the data associated with an object</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::offsetExists()} - Checks whether an object exists in the storage</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::offsetUnset()} - Removes an object from the storage</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function offsetSet(
        #[LanguageLevelTypeAware(['8.1' => 'mixed'], default: '')] $object,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $info = null
    ): void {}

/**
*<div id="splobjectstorage.offsetunset" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::offsetUnset</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::offsetUnset</span> &mdash; <span class="dc-title">Removes an object from the storage</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.offsetunset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::offsetUnset</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Removes an <span class="type" style="color:#EAB766">object</span> from the storage.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::offsetUnset()</strong></span> is an alias of <span class="methodname" style="color:#CC7832">{@link SplObjectStorage::detach()}</span>.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.offsetunset-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       The <span class="type" style="color:#EAB766">object</span> to remove.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.offsetunset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.offsetunset-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::offsetUnset()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$o </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">offsetUnset</span><span style="color: #007700">(</span><span style="color: #9876AA">$o</span><span style="color: #007700">); </span><span style="color: #FF8000">// Similar to unset($s[$o])<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(1)<br>int(0)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.offsetunset-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::offsetGet()} - Returns the data associated with an object</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::offsetSet()} - Associates data to an object in the storage</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::offsetExists()} - Checks whether an object exists in the storage</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function offsetUnset($object): void {}

/**
*<div id="splobjectstorage.offsetget" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::offsetGet</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::offsetGet</span> &mdash; <span class="dc-title">Returns the data associated with an <span class="type" style="color:#EAB766">object</span></span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.offsetget-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::offsetGet</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Returns the data associated with an <span class="type" style="color:#EAB766">object</span> in the storage.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.offsetget-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       The <span class="type" style="color:#EAB766">object</span> to look for.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.offsetget-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The data previously associated with the <span class="type" style="color:#EAB766">object</span> in the storage.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splobjectstorage.offsetget-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws <span class="classname"><a href="https://www.php.net/manual/zh/class.unexpectedvalueexception.php" class="classname">UnexpectedValueException</a></span> when <span class="parameter" style="color:#3A95FF">object</span> could not be found.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.offsetget-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::offsetGet()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">SplObjectStorage</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$o1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">[</span><span style="color: #9876AA">$o1</span><span style="color: #007700">] = </span><span style="color: #DD0000">"hello"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">attach</span><span style="color: #007700">(</span><span style="color: #9876AA">$o2</span><span style="color: #007700">);<br /><br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">offsetGet</span><span style="color: #007700">(</span><span style="color: #9876AA">$o1</span><span style="color: #007700">)); </span><span style="color: #FF8000">// Similar to $s[$o1]<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">offsetGet</span><span style="color: #007700">(</span><span style="color: #9876AA">$o2</span><span style="color: #007700">)); </span><span style="color: #FF8000">// Similar to $s[$o2]<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(5) &quot;hello&quot;<br>NULL<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.offsetget-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::offsetSet()} - Associates data to an object in the storage</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::offsetExists()} - Checks whether an object exists in the storage</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SplObjectStorage::offsetUnset()} - Removes an object from the storage</span></li>   </ul>  </span> </div></div>
     * @return TValue The data previously associated with the object in the storage.*/
    public function offsetGet($object): mixed {}

/**
*<div id="splobjectstorage.gethash" class="refentry"> <div class="refnamediv">  <h1 class="refname">SplObjectStorage::getHash</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SplObjectStorage::getHash</span> &mdash; <span class="dc-title">   Calculate a unique identifier for the contained objects  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-splobjectstorage.gethash-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SplObjectStorage::getHash</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">object</span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   This method calculates an identifier for the objects added to an   <span class="classname"><a href="https://www.php.net/manual/zh/class.splobjectstorage.php" class="classname">SplObjectStorage</a></span> object.  </p>  <p class="para">   The implementation in <span class="classname"><a href="https://www.php.net/manual/zh/class.splobjectstorage.php" class="classname">SplObjectStorage</a></span> returns   the same value as <span class="function">{@link spl_object_hash()}</span>.  </p>  <p class="para">   The storage object will never contain more than one object with the same identifier.   As such, it can be used to implement a set (a collection of unique values)   where the quality of an object being unique is determined by the value   returned by this function being unique.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-splobjectstorage.gethash-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <span>      The object whose identifier is to be calculated.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-splobjectstorage.gethash-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   A <span class="type" style="color:#EAB766">string</span> with the calculated identifier.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-splobjectstorage.gethash-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   A <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> is thrown when the returned   value is not a <span class="type" style="color:#EAB766">string</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-splobjectstorage.gethash-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">SplObjectStorage::getHash()</strong></span> example</strong></p><div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">OneSpecimenPerClassStorage </span><span style="color: #007700">extends </span><span style="color: #9876AA">SplObjectStorage </span><span style="color: #007700">{<br />    public function </span><span style="color: #9876AA">getHash</span><span style="color: #007700">(</span><span style="color: #9876AA">$o</span><span style="color: #007700">) {<br />        return </span><span style="color: #9876AA">get_class</span><span style="color: #007700">(</span><span style="color: #9876AA">$o</span><span style="color: #007700">);<br />    }<br />}<br />class </span><span style="color: #9876AA">A </span><span style="color: #007700">{}<br /><br /></span><span style="color: #9876AA">$s </span><span style="color: #007700">= new </span><span style="color: #9876AA">OneSpecimenPerClassStorage</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$o3 </span><span style="color: #007700">= new </span><span style="color: #9876AA">A</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">[</span><span style="color: #9876AA">$o1</span><span style="color: #007700">] = </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">//$o2 is considered equal to $o1 so the value is replaced<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">[</span><span style="color: #9876AA">$o2</span><span style="color: #007700">] = </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$s</span><span style="color: #007700">[</span><span style="color: #9876AA">$o3</span><span style="color: #007700">] = </span><span style="color: #9876AA">3</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//these are considered equal to the objects before<br />//so they can be used to access the values stored under them<br /></span><span style="color: #9876AA">$p1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$p2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">A</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">$s</span><span style="color: #007700">[</span><span style="color: #9876AA">$p1</span><span style="color: #007700">], </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #9876AA">$s</span><span style="color: #007700">[</span><span style="color: #9876AA">$p2</span><span style="color: #007700">], </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>2<br>3<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-splobjectstorage.gethash-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link spl_object_hash()} - 返回指定对象的 hash id</span></li>   </ul>  </span> </div></div>
     * @return string A string with the calculated identifier.*/
    public function getHash(#[LanguageLevelTypeAware(['8.0' => 'object'], default: '')] $object): string {}

    /**
     * @return array
     * @since 7.4
     */
    #[TentativeType]
    public function __serialize(): array {}

    /**
     * @param array $data
     * @since 7.4
     */
    #[TentativeType]
    public function __unserialize(array $data): void {}

    /**
     * @return array
     * @since 7.4
     */
    #[TentativeType]
    public function __debugInfo(): array {}
}

/**
*<div id="class.multipleiterator" class="reference"> <h1 class="title">The MultipleIterator class</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p>  <div class="section" id="multipleiterator.intro">   <h2 class="title">简介</h2>   <p class="para">    An Iterator that sequentially iterates over all attached iterators   </p>  </div>  <div class="section" id="multipleiterator.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">MultipleIterator</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.multipleiterator.php#multipleiterator.constants.mit-need-any"><var class="varname">MIT_NEED_ANY</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.multipleiterator.php#multipleiterator.constants.mit-need-all"><var class="varname">MIT_NEED_ALL</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.multipleiterator.php#multipleiterator.constants.mit-keys-numeric"><var class="varname">MIT_KEYS_NUMERIC</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.multipleiterator.php#multipleiterator.constants.mit-keys-assoc"><var class="varname">MIT_KEYS_ASSOC</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/multipleiterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = MultipleIterator::MIT_NEED_ALL | MultipleIterator::MIT_KEYS_NUMERIC</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/multipleiterator.attachiterator.php" class="methodname" style="color:#CC7832">attachIterator</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">null</span></span> <span class="parameter" style="color:#3A95FF">$info</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/multipleiterator.containsiterator.php" class="methodname" style="color:#CC7832">containsIterator</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/multipleiterator.countiterators.php" class="methodname" style="color:#CC7832">countIterators</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/multipleiterator.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/multipleiterator.detachiterator.php" class="methodname" style="color:#CC7832">detachIterator</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/multipleiterator.getflags.php" class="methodname" style="color:#CC7832">getFlags</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/multipleiterator.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/multipleiterator.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/multipleiterator.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/multipleiterator.setflags.php" class="methodname" style="color:#CC7832">setFlags</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/multipleiterator.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div>    <div class="section" id="multipleiterator.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="multipleiterator.constants.mit-need-any"><strong><span>MultipleIterator::MIT_NEED_ANY</span></strong></dt>     <dd>      <p class="para">       Do not require all sub iterators to be valid in iteration.      </p>     </dd>             <dt id="multipleiterator.constants.mit-need-all"><strong><span>MultipleIterator::MIT_NEED_ALL</span></strong></dt>     <dd>      <p class="para">       Require all sub iterators to be valid in iteration.      </p>     </dd>             <dt id="multipleiterator.constants.mit-keys-numeric"><strong><span>MultipleIterator::MIT_KEYS_NUMERIC</span></strong></dt>     <dd>      <p class="para">       Keys are created from the sub iterators position.      </p>     </dd>             <dt id="multipleiterator.constants.mit-keys-assoc"><strong><span>MultipleIterator::MIT_KEYS_ASSOC</span></strong></dt>     <dd>      <p class="para">       Keys are created from sub iterators associated information.      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link MultipleIterator::attachIterator} — Attaches iterator information</li><li>{@link MultipleIterator::__construct} — Constructs a new MultipleIterator</li><li>{@link MultipleIterator::containsIterator} — Checks if an iterator is attached</li><li>{@link MultipleIterator::countIterators} — Gets the number of attached iterator instances</li><li>{@link MultipleIterator::current} — Gets the registered iterator instances</li><li>{@link MultipleIterator::detachIterator} — Detaches an iterator</li><li>{@link MultipleIterator::getFlags} — Gets the flag information</li><li>{@link MultipleIterator::key} — Gets the registered iterator instances</li><li>{@link MultipleIterator::next} — Moves all attached iterator instances forward</li><li>{@link MultipleIterator::rewind} — Rewinds all attached iterator instances</li><li>{@link MultipleIterator::setFlags} — Sets flags</li><li>{@link MultipleIterator::valid} — Checks the validity of sub iterators</li></ul></div>
*/
class MultipleIterator implements Iterator
{
    public const MIT_NEED_ANY = 0;
    public const MIT_NEED_ALL = 1;
    public const MIT_KEYS_NUMERIC = 0;
    public const MIT_KEYS_ASSOC = 2;

    /**
     * Constructs a new MultipleIterator
     * @link https://php.net/manual/en/multipleiterator.construct.php
     * @param int $flags Defaults to MultipleIterator::MIT_NEED_ALL | MultipleIterator::MIT_KEYS_NUMERIC
     */
    public function __construct(
        #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $flags,
        #[PhpStormStubsElementAvailable(from: '8.0')] int $flags = MultipleIterator::MIT_NEED_ALL|MultipleIterator::MIT_KEYS_NUMERIC
    ) {}

/**
*<div id="multipleiterator.getflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">MultipleIterator::getFlags</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">MultipleIterator::getFlags</span> &mdash; <span class="dc-title">Gets the flag information</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-multipleiterator.getflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>MultipleIterator::getFlags</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Gets information about the flags.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-multipleiterator.getflags-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-multipleiterator.getflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Information about the flags, as an <span class="type" style="color:#EAB766">int</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-multipleiterator.getflags-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/class.multipleiterator.php#multipleiterator.constants" class="link">Flag Constants</a></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link MultipleIterator::__construct()} - Constructs a new MultipleIterator</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link MultipleIterator::setFlags()} - Sets flags</span></li>   </ul>  </span> </div></div>
     * @return int Information about the flags, as an integer.*/
    public function getFlags(): int {}

/**
*<div id="multipleiterator.setflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">MultipleIterator::setFlags</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">MultipleIterator::setFlags</span> &mdash; <span class="dc-title">Sets flags</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-multipleiterator.setflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>MultipleIterator::setFlags</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets flags.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-multipleiterator.setflags-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       The flags to set, according to the       <a href="https://www.php.net/manual/zh/class.multipleiterator.php#multipleiterator.constants" class="link">Flag Constants</a>      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-multipleiterator.setflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-multipleiterator.setflags-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/class.multipleiterator.php#multipleiterator.constants" class="link">Flag Constants</a></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link MultipleIterator::__construct()} - Constructs a new MultipleIterator</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link MultipleIterator::getFlags()} - Gets the flag information</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function setFlags(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags): void {}

/**
*<div id="multipleiterator.attachiterator" class="refentry"> <div class="refnamediv">  <h1 class="refname">MultipleIterator::attachIterator</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">MultipleIterator::attachIterator</span> &mdash; <span class="dc-title">Attaches iterator information</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-multipleiterator.attachiterator-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>MultipleIterator::attachIterator</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">null</span></span> <span class="parameter" style="color:#3A95FF">$info</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Attaches iterator information.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-multipleiterator.attachiterator-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">iterator</span></dt>     <dd>      <p class="para">       The new iterator to attach.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">info</span></dt>     <dd>      <p class="para">       The associative information for the Iterator, which must be an       <span class="type" style="color:#EAB766">int</span>, a <span class="type" style="color:#EAB766">string</span>, or <strong><span>null</span></strong>.       </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-multipleiterator.attachiterator-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Description...  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-multipleiterator.attachiterator-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   An <span class="classname"><strong class="classname">IllegalValueException</strong></span> if the <span class="parameter" style="color:#3A95FF">iterator</span> parameter   is invalid, or if <span class="parameter" style="color:#3A95FF">info</span> is already associated   information.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-multipleiterator.attachiterator-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link MultipleIterator::__construct()} - Constructs a new MultipleIterator</span></li>   </ul>  </span> </div></div>
     * @return void Description...*/
    public function attachIterator(Iterator $iterator, #[LanguageLevelTypeAware(['8.0' => 'int|string|null'], default: '')] $info = null): void {}

/**
*<div id="multipleiterator.detachiterator" class="refentry"> <div class="refnamediv">  <h1 class="refname">MultipleIterator::detachIterator</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">MultipleIterator::detachIterator</span> &mdash; <span class="dc-title">Detaches an iterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-multipleiterator.detachiterator-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>MultipleIterator::detachIterator</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Detaches an iterator.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-multipleiterator.detachiterator-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">iterator</span></dt>     <dd>      <p class="para">       The iterator to detach.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-multipleiterator.detachiterator-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-multipleiterator.detachiterator-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link MultipleIterator::attachIterator()} - Attaches iterator information</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function detachIterator(Iterator $iterator): void {}

/**
*<div id="multipleiterator.containsiterator" class="refentry"> <div class="refnamediv">  <h1 class="refname">MultipleIterator::containsIterator</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">MultipleIterator::containsIterator</span> &mdash; <span class="dc-title">Checks if an iterator is attached</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-multipleiterator.containsiterator-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>MultipleIterator::containsIterator</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if an iterator is attached or not.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-multipleiterator.containsiterator-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">iterator</span></dt>     <dd>      <p class="para">       The iterator to check.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-multipleiterator.containsiterator-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-multipleiterator.containsiterator-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link MultipleIterator::valid()} - Checks the validity of sub iterators</span></li>   </ul>  </span> </div></div>
     * @return bool true on success or false on failure.*/
    public function containsIterator(Iterator $iterator): bool {}

/**
*<div id="multipleiterator.countiterators" class="refentry"> <div class="refnamediv">  <h1 class="refname">MultipleIterator::countIterators</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">MultipleIterator::countIterators</span> &mdash; <span class="dc-title">Gets the number of attached iterator instances</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-multipleiterator.countiterators-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>MultipleIterator::countIterators</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Gets the number of attached iterator instances.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-multipleiterator.countiterators-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-multipleiterator.countiterators-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The number of attached iterator instances (as an <span class="type" style="color:#EAB766">int</span>).  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-multipleiterator.countiterators-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link MultipleIterator::containsIterator()} - Checks if an iterator is attached</span></li>   </ul>  </span> </div></div>
     * @return int The number of attached iterator instances (as an integer).*/
    public function countIterators(): int {}

/**
*<div id="multipleiterator.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">MultipleIterator::rewind</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">MultipleIterator::rewind</span> &mdash; <span class="dc-title">Rewinds all attached iterator instances</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-multipleiterator.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>MultipleIterator::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Rewinds all attached iterator instances.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-multipleiterator.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-multipleiterator.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-multipleiterator.rewind-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link MultipleIterator::next()} - Moves all attached iterator instances forward</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function rewind(): void {}

/**
*<div id="multipleiterator.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">MultipleIterator::valid</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">MultipleIterator::valid</span> &mdash; <span class="dc-title">Checks the validity of sub iterators</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-multipleiterator.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>MultipleIterator::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks the validity of sub iterators.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-multipleiterator.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-multipleiterator.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if one or all sub iterators are valid depending on flags,   otherwise <strong><span>false</span></strong>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-multipleiterator.valid-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link MultipleIterator::__construct()} - Constructs a new MultipleIterator</span></li>   </ul>  </span> </div></div>
     * @return bool true if one or all sub iterators are valid depending on flags,*/
    public function valid(): bool {}

/**
*<div id="multipleiterator.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">MultipleIterator::key</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">MultipleIterator::key</span> &mdash; <span class="dc-title">Gets the registered iterator instances</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-multipleiterator.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>MultipleIterator::key</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Get the registered iterator instances key() result.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-multipleiterator.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-multipleiterator.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   An <span class="type" style="color:#EAB766">array</span> of all registered iterator instances.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-multipleiterator.key-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   A <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> if the iterator is invalid (as of PHP 8.1.0), or   mode <strong><span>MIT_NEED_ALL</span></strong> is set, and at least one attached iterator is not valid.  </p>  <p class="para">   Calling this method from <a href="https://www.php.net/manual/zh/control-structures.foreach.php" class="xref">foreach</a>   triggers warning &quot;Illegal type returned&quot;.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-multipleiterator.key-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.1.0</td>      <td>       A <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> is now thrown if       <span class="methodname" style="color:#CC7832"><strong>MultipleIterator::key()</strong></span> is called on an       invalid iterator.  Previously, <strong><span>false</span></strong> was returned.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-multipleiterator.key-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link MultipleIterator::current()} - Gets the registered iterator instances</span></li>   </ul>  </span> </div></div>
     * @return array An array of all registered iterator instances,*/
    public function key(): array {}

/**
*<div id="multipleiterator.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">MultipleIterator::current</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">MultipleIterator::current</span> &mdash; <span class="dc-title">Gets the registered iterator instances</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-multipleiterator.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>MultipleIterator::current</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Get the registered iterator instances current() result.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-multipleiterator.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-multipleiterator.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   An <span class="type" style="color:#EAB766">array</span> containing the current values of each attached iterator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-multipleiterator.current-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   A <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> if the iterator is invalid (as of PHP 8.1.0),   or mode <strong><span>MIT_NEED_ALL</span></strong> is set and at least one attached iterator is   not valid. Or an <span class="classname"><strong class="classname">IllegalValueException</strong></span> if a key is <strong><span>null</span></strong> and   <strong><span>MIT_KEYS_ASSOC</span></strong> is set.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-multipleiterator.current-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.1.0</td>      <td>       A <span class="classname"><a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> is now thrown if       <span class="methodname" style="color:#CC7832"><strong>MultipleIterator::current()</strong></span> is called on an       invalid iterator.  Previously, <strong><span>false</span></strong> was returned.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-multipleiterator.current-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link MultipleIterator::valid()} - Checks the validity of sub iterators</span></li>   </ul>  </span> </div></div>
     * @return array An array containing the current values of each attached iterator,*/
    public function current(): array {}

/**
*<div id="multipleiterator.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">MultipleIterator::next</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">MultipleIterator::next</span> &mdash; <span class="dc-title">Moves all attached iterator instances forward</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-multipleiterator.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>MultipleIterator::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Moves all attached iterator instances forward.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-multipleiterator.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-multipleiterator.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-multipleiterator.next-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link MultipleIterator::rewind()} - Rewinds all attached iterator instances</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function next(): void {}

    /**
     * @return array
     * @since 7.4
     */
    #[TentativeType]
    public function __debugInfo(): array {}
}
