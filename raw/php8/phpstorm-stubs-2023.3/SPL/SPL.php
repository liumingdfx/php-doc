<?php

// Start of SPL v.0.2
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\TentativeType;

/**
*<div id="class.logicexception" class="reference"> <h1 class="title">The LogicException class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>   <div class="section" id="logicexception.intro">   <h2 class="title">简介</h2>   <p class="para">    Exception that represents error in the program logic. This kind of    exception should lead directly to a fix in your code.   </p>  </div>   <div class="section" id="logicexception.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">LogicException</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.exception.php" class="classname">Exception</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>   </div>  </div>   </div>
*/
class LogicException extends Exception {}

/**
*<div id="class.badfunctioncallexception" class="reference"> <h1 class="title">The BadFunctionCallException class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>   <div class="section" id="badfunctioncallexception.intro">   <h2 class="title">简介</h2>   <p class="para">    Exception thrown if a callback refers to an undefined function or if some    arguments are missing.   </p>  </div>   <div class="section" id="badfunctioncallexception.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">BadFunctionCallException</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.logicexception.php" class="classname">LogicException</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>   </div>  </div>   </div>
*/
class BadFunctionCallException extends LogicException {}

/**
*<div id="class.badmethodcallexception" class="reference"> <h1 class="title">BadMethodCallException 类</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>   <div class="section" id="badmethodcallexception.intro">   <h2 class="title">简介</h2>   <p class="para">    当 callback 指向未定义的方法或缺失一些参数时会抛出该异常。   </p>  </div>   <div class="section" id="badmethodcallexception.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">BadMethodCallException</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.badfunctioncallexception.php" class="classname">BadFunctionCallException</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>   </div>  </div>   </div>
*/
class BadMethodCallException extends BadFunctionCallException {}

/**
*<div id="class.domainexception" class="reference"> <h1 class="title">The DomainException class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>   <div class="section" id="domainexception.intro">   <h2 class="title">简介</h2>   <p class="para">    Exception thrown if a value does not adhere to a defined valid data domain.   </p>  </div>   <div class="section" id="domainexception.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">DomainException</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.logicexception.php" class="classname">LogicException</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>   </div>  </div>   </div>
*/
class DomainException extends LogicException {}

/**
*<div id="class.invalidargumentexception" class="reference"> <h1 class="title">The InvalidArgumentException class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>   <div class="section" id="invalidargumentexception.intro">   <h2 class="title">简介</h2>   <p class="para">    Exception thrown if an argument is not of the expected type.   </p>  </div>   <div class="section" id="invalidargumentexception.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">InvalidArgumentException</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.logicexception.php" class="classname">LogicException</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>   </div> </div>   </div>
*/
class InvalidArgumentException extends LogicException {}

/**
*<div id="class.lengthexception" class="reference"> <h1 class="title">The LengthException class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>   <div class="section" id="lengthexception.intro">   <h2 class="title">简介</h2>   <p class="para">    Exception thrown if a length is invalid.   </p>  </div>   <div class="section" id="lengthexception.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">LengthException</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.logicexception.php" class="classname">LogicException</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>   </div>  </div>   </div>
*/
class LengthException extends LogicException {}

/**
*<div id="class.outofrangeexception" class="reference"> <h1 class="title">The OutOfRangeException class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>   <div class="section" id="outofrangeexception.intro">   <h2 class="title">简介</h2>   <p class="para">    Exception thrown when an illegal index was requested. This represents    errors that should be detected at compile time.   </p>  </div>   <div class="section" id="outofrangeexception.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">OutOfRangeException</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.logicexception.php" class="classname">LogicException</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>   </div>  </div>   </div>
*/
class OutOfRangeException extends LogicException {}

/**
*<div id="class.runtimeexception" class="reference"> <h1 class="title">The RuntimeException class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>   <div class="section" id="runtimeexception.intro">   <h2 class="title">简介</h2>   <p class="para">    Exception thrown if an error which can only be found on runtime occurs.   </p>  </div>   <div class="section" id="runtimeexception.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">RuntimeException</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.exception.php" class="classname">Exception</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>   </div>  </div>   </div>
*/
class RuntimeException extends Exception {}

/**
*<div id="class.outofboundsexception" class="reference"> <h1 class="title">The OutOfBoundsException class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>   <div class="section" id="outofboundsexception.intro">   <h2 class="title">简介</h2>   <p class="para">    Exception thrown if a value is not a valid key. This represents errors    that cannot be detected at compile time.   </p>  </div>   <div class="section" id="outofboundsexception.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">OutOfBoundsException</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>   </div>  </div>   </div>
*/
class OutOfBoundsException extends RuntimeException {}

/**
*<div id="class.overflowexception" class="reference"> <h1 class="title">The OverflowException class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>   <div class="section" id="overflowexception.intro">   <h2 class="title">简介</h2>   <p class="para">    Exception thrown when adding an element to a full container.   </p>  </div>   <div class="section" id="overflowexception.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">OverflowException</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>   </div>  </div>   </div>
*/
class OverflowException extends RuntimeException {}

/**
*<div id="class.rangeexception" class="reference"> <h1 class="title">The RangeException class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>   <div class="section" id="rangeexception.intro">   <h2 class="title">简介</h2>   <p class="para">    Exception thrown to indicate range errors during program execution.    Normally this means there was an arithmetic error other than    under/overflow. This is the runtime version of    <span class="classname"><a href="https://www.php.net/manual/zh/class.domainexception.php" class="classname">DomainException</a></span>.   </p>  </div>   <div class="section" id="rangeexception.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">RangeException</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>   </div>  </div>   </div>
*/
class RangeException extends RuntimeException {}

/**
*<div id="class.underflowexception" class="reference"> <h1 class="title">The UnderflowException class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>   <div class="section" id="underflowexception.intro">   <h2 class="title">简介</h2>   <p class="para">    Exception thrown when performing an invalid operation on an empty    container, such as removing an element.   </p>  </div>   <div class="section" id="underflowexception.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">UnderflowException</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>   </div>  </div>   </div>
*/
class UnderflowException extends RuntimeException {}

/**
*<div id="class.unexpectedvalueexception" class="reference"> <h1 class="title">The UnexpectedValueException class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>   <div class="section" id="unexpectedvalueexception.intro">   <h2 class="title">简介</h2>   <p class="para">    Exception thrown if a value does not match with a set of values. Typically    this happens when a function calls another function and expects the return    value to be of a certain type or value not including arithmetic or buffer    related errors.   </p>  </div>   <div class="section" id="unexpectedvalueexception.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">UnexpectedValueException</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>   </div>  </div>   </div>
*/
class UnexpectedValueException extends RuntimeException {}

/**
*<div id="class.emptyiterator" class="reference"> <h1 class="title">The EmptyIterator class</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>  <div class="section" id="emptyiterator.intro">   <h2 class="title">简介</h2>   <p class="para">    The EmptyIterator class for an empty iterator.   </p>  </div>  <div class="section" id="emptyiterator.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">EmptyIterator</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.iterator.php" class="interfacename">Iterator</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/emptyiterator.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><span class="type never" style="color:#EAB766">never</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/emptyiterator.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766"><span class="type never" style="color:#EAB766">never</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/emptyiterator.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/emptyiterator.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/emptyiterator.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link EmptyIterator::current} — The current() method</li><li>{@link EmptyIterator::key} — The key() method</li><li>{@link EmptyIterator::next} — The next() method</li><li>{@link EmptyIterator::rewind} — The rewind() method</li><li>{@link EmptyIterator::valid} — The valid() method</li></ul></div>
*/
class EmptyIterator implements Iterator
{
/**
*<div id="emptyiterator.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">EmptyIterator::current</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">EmptyIterator::current</span> &mdash; <span class="dc-title">The current() method</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-emptyiterator.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>EmptyIterator::current</strong></span>(): <span class="type" style="color:#EAB766"><span class="type never" style="color:#EAB766">never</span></span></div>  <p class="para rdfs-comment">   This function must not be called. It throws an exception upon access.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-emptyiterator.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-emptyiterator.current-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws an <span class="classname"><a href="https://www.php.net/manual/zh/class.exception.php" class="classname">Exception</a></span> if called.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-emptyiterator.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return mixed Can return any type.*/
    public function current(): never {}

/**
*<div id="emptyiterator.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">EmptyIterator::next</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">EmptyIterator::next</span> &mdash; <span class="dc-title">The next() method</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-emptyiterator.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>EmptyIterator::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   No operation, nothing to do.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-emptyiterator.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-emptyiterator.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void Any returned value is ignored.*/
    public function next(): void {}

/**
*<div id="emptyiterator.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">EmptyIterator::key</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">EmptyIterator::key</span> &mdash; <span class="dc-title">The key() method</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-emptyiterator.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>EmptyIterator::key</strong></span>(): <span class="type" style="color:#EAB766"><span class="type never" style="color:#EAB766">never</span></span></div>  <p class="para rdfs-comment">   This function must not be called. It throws an exception upon access.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-emptyiterator.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-emptyiterator.key-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws an <span class="classname"><a href="https://www.php.net/manual/zh/class.exception.php" class="classname">Exception</a></span> if called.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-emptyiterator.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return mixed The key of the current element.*/
    public function key(): never {}

/**
*<div id="emptyiterator.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">EmptyIterator::valid</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">EmptyIterator::valid</span> &mdash; <span class="dc-title">The valid() method</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-emptyiterator.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>EmptyIterator::valid</strong></span>(): <span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></div>  <p class="para rdfs-comment">   The EmptyIterator valid() method.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-emptyiterator.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-emptyiterator.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>false</span></strong>  </p> </div></div>
     * @return bool The return value will be casted to boolean and then evaluated.*/
    public function valid() {}

/**
*<div id="emptyiterator.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">EmptyIterator::rewind</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">EmptyIterator::rewind</span> &mdash; <span class="dc-title">The rewind() method</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-emptyiterator.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>EmptyIterator::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   No operation, nothing to do.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-emptyiterator.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-emptyiterator.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void Any returned value is ignored.*/
    public function rewind(): void {}
}

/**
*<div id="class.callbackfilteriterator" class="reference"> <h1 class="title">The CallbackFilterIterator class</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p>  <div class="section" id="callbackfilteriterator.intro">   <h2 class="title">简介</h2>   <p class="para">   </p>  </div>  <div class="section" id="callbackfilteriterator.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">CallbackFilterIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.filteriterator.php" class="classname">FilterIterator</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/callbackfilteriterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/callbackfilteriterator.accept.php" class="methodname" style="color:#CC7832">accept</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::accept}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::getInnerIterator}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div>    <div class="section" id="callbackfilteriterator.examples">   <h2 class="title">示例</h2>   <p class="para">    The callback should accept up to three arguments:    the current item, the current key and the iterator, respectively.   </p>   <div class="example" id="">    <p><strong>示例 #1 Available callback arguments</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">//*<br /> * Callback for CallbackFilterIterator<br /> *<br /> * @param $current   Current item's value<br /> * @param $key       Current item's key<br /> * @param $iterator  Iterator being filtered<br /> * @return boolean   TRUE to accept the current item, FALSE otherwise<br /> <br /></span><span style="color: #007700">function </span><span style="color: #9876AA">my_callback</span><span style="color: #007700">(</span><span style="color: #9876AA">$current</span><span style="color: #007700">, </span><span style="color: #9876AA">$key</span><span style="color: #007700">, </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// Your filtering code here<br /></span><span style="color: #007700">}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>   <p class="para">    Any <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> may be used; such as a string containing a    function name, an array for a method, or an anonymous function.   </p>   <div class="example" id="">    <p><strong>示例 #2 Callback basic examples</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$dir </span><span style="color: #007700">= new </span><span style="color: #9876AA">FilesystemIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">__DIR__</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Filter large files ( &gt; 100MB)<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">is_large_file</span><span style="color: #007700">(</span><span style="color: #9876AA">$current</span><span style="color: #007700">) {<br />    return </span><span style="color: #9876AA">$current</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isFile</span><span style="color: #007700">() &amp;&amp; </span><span style="color: #9876AA">$current</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getSize</span><span style="color: #007700">() &gt; </span><span style="color: #9876AA">104857600</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">$large_files </span><span style="color: #007700">= new </span><span style="color: #9876AA">CallbackFilterIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$dir</span><span style="color: #007700">, </span><span style="color: #DD0000">'is_large_file'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Filter directories<br /></span><span style="color: #9876AA">$files </span><span style="color: #007700">= new </span><span style="color: #9876AA">CallbackFilterIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$dir</span><span style="color: #007700">, function (</span><span style="color: #9876AA">$current</span><span style="color: #007700">, </span><span style="color: #9876AA">$key</span><span style="color: #007700">, </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">) {<br />    return </span><span style="color: #9876AA">$current</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isDir</span><span style="color: #007700">() &amp;&amp; ! </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isDot</span><span style="color: #007700">();<br />});<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </div>   </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link CallbackFilterIterator::accept} — Calls the callback with the current value, the current key and the inner iterator as arguments</li><li>{@link CallbackFilterIterator::__construct} — Create a filtered iterator from another iterator</li></ul></div>
*/
class CallbackFilterIterator extends FilterIterator
{
    /**
     * Creates a filtered iterator using the callback to determine which items are accepted or rejected.
     * @param Iterator $iterator The iterator to be filtered.
     * @param callable $callback The callback, which should return TRUE to accept the current item or FALSE otherwise.
     * May be any valid callable value.
     * The callback should accept up to three arguments: the current item, the current key and the iterator, respectively.
     * <code> function my_callback($current, $key, $iterator) </code>
     * @link https://secure.php.net/manual/en/callbackfilteriterator.construct.php
     */
    public function __construct(Iterator $iterator, callable $callback) {}

/**
*<div id="callbackfilteriterator.accept" class="refentry"> <div class="refnamediv">  <h1 class="refname">CallbackFilterIterator::accept</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CallbackFilterIterator::accept</span> &mdash; <span class="dc-title">Calls the callback with the current value, the current key and the inner iterator as arguments</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-callbackfilteriterator.accept-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CallbackFilterIterator::accept</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   This method calls the callback with the current value, current key    and the inner iterator.  </p>  <p class="para">   The callback is expected to return <strong><span>true</span></strong> if the current item is    to be accepted, or <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-callbackfilteriterator.accept-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-callbackfilteriterator.accept-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> to accept the current item, or <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-callbackfilteriterator.accept-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/class.callbackfilteriterator.php#callbackfilteriterator.examples" class="link">CallbackFilterIterator Examples</a></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link CallbackFilterIterator::__construct()} - Create a filtered iterator from another iterator</span></li>   </ul>  </span> </div></div>
     * @return bool true if the current element is acceptable, otherwise false.*/
    public function accept(): bool {}
}

/**
*<div id="class.recursivecallbackfilteriterator" class="reference"> <h1 class="title">The RecursiveCallbackFilterIterator class</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p>  <div class="section" id="recursivecallbackfilteriterator.intro">   <h2 class="title">简介</h2>   <p class="para">   </p>  </div>  <div class="section" id="recursivecallbackfilteriterator.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">RecursiveCallbackFilterIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.callbackfilteriterator.php" class="classname">CallbackFilterIterator</a>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="interfacename">RecursiveIterator</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivecallbackfilteriterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="type RecursiveIterator" style="color:#EAB766">RecursiveIterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivecallbackfilteriterator.getchildren.php" class="methodname" style="color:#CC7832">getChildren</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursivecallbackfilteriterator.php" class="type RecursiveCallbackFilterIterator" style="color:#EAB766">RecursiveCallbackFilterIterator</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivecallbackfilteriterator.haschildren.php" class="methodname" style="color:#CC7832">hasChildren</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link CallbackFilterIterator::accept}</span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::accept}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::getInnerIterator}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div>    <div class="section" id="recursivecallbackfilteriterator.examples">   <h2 class="title">示例</h2>   <p class="para">    The callback should accept up to three arguments:    the current item, the current key and the iterator, respectively.   </p>   <div class="example" id="">    <p><strong>示例 #1 Available callback arguments</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">//*<br /> * Callback for RecursiveCallbackFilterIterator<br /> *<br /> * @param $current   Current item's value<br /> * @param $key       Current item's key<br /> * @param $iterator  Iterator being filtered<br /> * @return boolean   TRUE to accept the current item, FALSE otherwise<br /> <br /></span><span style="color: #007700">function </span><span style="color: #9876AA">my_callback</span><span style="color: #007700">(</span><span style="color: #9876AA">$current</span><span style="color: #007700">, </span><span style="color: #9876AA">$key</span><span style="color: #007700">, </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// Your filtering code here<br /></span><span style="color: #007700">}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>   <p class="para">    Filtering a recursive iterator generally involves two conditions.    The first is that, to allow recursion, the callback function should return <strong><span>true</span></strong>    if the current iterator item has children.    The second is the normal filter condition, such as a file size or extension     check as in the example below.   </p>   <div class="example" id="">    <p><strong>示例 #2 Recursive callback basic example</strong></p><div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$dir </span><span style="color: #007700">= new </span><span style="color: #9876AA">RecursiveDirectoryIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">__DIR__</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Filter large files ( &gt; 100MB)<br /></span><span style="color: #9876AA">$files </span><span style="color: #007700">= new </span><span style="color: #9876AA">RecursiveCallbackFilterIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$dir</span><span style="color: #007700">, function (</span><span style="color: #9876AA">$current</span><span style="color: #007700">, </span><span style="color: #9876AA">$key</span><span style="color: #007700">, </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// Allow recursion<br />    </span><span style="color: #007700">if (</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasChildren</span><span style="color: #007700">()) {<br />        return </span><span style="color: #9876AA">TRUE</span><span style="color: #007700">;<br />    }<br />    </span><span style="color: #FF8000">// Check for large file<br />    </span><span style="color: #007700">if (</span><span style="color: #9876AA">$current</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isFile</span><span style="color: #007700">() &amp;&amp; </span><span style="color: #9876AA">$current</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getSize</span><span style="color: #007700">() &gt; </span><span style="color: #9876AA">104857600</span><span style="color: #007700">) {<br />        return </span><span style="color: #9876AA">TRUE</span><span style="color: #007700">;<br />    }<br />    return </span><span style="color: #9876AA">FALSE</span><span style="color: #007700">;<br />});<br /> <br />foreach (new </span><span style="color: #9876AA">RecursiveIteratorIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$files</span><span style="color: #007700">) as </span><span style="color: #9876AA">$file</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$file</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getPathname</span><span style="color: #007700">() . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </div>   </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link RecursiveCallbackFilterIterator::__construct} — Create a RecursiveCallbackFilterIterator from a RecursiveIterator</li><li>{@link RecursiveCallbackFilterIterator::getChildren} — Return the inner iterator's children contained in a RecursiveCallbackFilterIterator</li><li>{@link RecursiveCallbackFilterIterator::hasChildren} — Check whether the inner iterator's current element has children</li></ul></div>
*/
class RecursiveCallbackFilterIterator extends CallbackFilterIterator implements RecursiveIterator
{
    /**
     * Create a RecursiveCallbackFilterIterator from a RecursiveIterator
     * @param RecursiveIterator $iterator The recursive iterator to be filtered.
     * @param callable $callback The callback, which should return TRUE to accept the current item or FALSE otherwise. See Examples.
     * May be any valid callable value.
     * @link https://www.php.net/manual/en/recursivecallbackfilteriterator.construct.php
     */
    public function __construct(
        RecursiveIterator $iterator,
        #[LanguageLevelTypeAware(['8.0' => 'callable'], default: '')] $callback
    ) {}

/**
*<div id="recursivecallbackfilteriterator.haschildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveCallbackFilterIterator::hasChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveCallbackFilterIterator::hasChildren</span> &mdash; <span class="dc-title">Check whether the inner iterator&#039;s current element has children</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivecallbackfilteriterator.haschildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveCallbackFilterIterator::hasChildren</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Returns <strong><span>true</span></strong> if the current element has children, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivecallbackfilteriterator.haschildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivecallbackfilteriterator.haschildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the current element has children, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-recursivecallbackfilteriterator.haschildren-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>RecursiveCallbackFilterIterator::hasChildren()</strong></span> basic usage</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$dir </span><span style="color: #007700">= new </span><span style="color: #9876AA">RecursiveDirectoryIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">__DIR__</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Recursively iterate over XML files<br /></span><span style="color: #9876AA">$files </span><span style="color: #007700">= new </span><span style="color: #9876AA">RecursiveCallbackFilterIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$dir</span><span style="color: #007700">, function (</span><span style="color: #9876AA">$current</span><span style="color: #007700">, </span><span style="color: #9876AA">$key</span><span style="color: #007700">, </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// Allow recursion into directories<br />    </span><span style="color: #007700">if (</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasChildren</span><span style="color: #007700">()) {<br />        return </span><span style="color: #9876AA">TRUE</span><span style="color: #007700">;<br />    }<br />    </span><span style="color: #FF8000">// Check for XML file<br />    </span><span style="color: #007700">if (!</span><span style="color: #9876AA">strcasecmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$current</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getExtension</span><span style="color: #007700">(), </span><span style="color: #DD0000">'xml'</span><span style="color: #007700">)) {<br />        return </span><span style="color: #9876AA">TRUE</span><span style="color: #007700">;<br />    }<br />    return </span><span style="color: #9876AA">FALSE</span><span style="color: #007700">;<br />});<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-recursivecallbackfilteriterator.haschildren-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/class.recursivecallbackfilteriterator.php#recursivecallbackfilteriterator.examples" class="link">RecursiveCallbackFilterIterator Examples</a></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link RecursiveCallbackFilterIterator::__construct()} - Create a RecursiveCallbackFilterIterator from a RecursiveIterator</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link RecursiveCallbackFilteriterator::getChildren()} - Return the inner iterator's children contained in a RecursiveCallbackFilterIterator</span></li>   </ul>  </span> </div></div>
     * @return bool Returns TRUE if the current element has children, FALSE otherwise.*/
    public function hasChildren(): bool {}

/**
*<div id="recursivecallbackfilteriterator.getchildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveCallbackFilterIterator::getChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveCallbackFilterIterator::getChildren</span> &mdash; <span class="dc-title">Return the inner iterator&#039;s children contained in a RecursiveCallbackFilterIterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivecallbackfilteriterator.getchildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveCallbackFilterIterator::getChildren</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursivecallbackfilteriterator.php" class="type RecursiveCallbackFilterIterator" style="color:#EAB766">RecursiveCallbackFilterIterator</a></span></div>  <p class="para rdfs-comment">   Fetches the filtered children of the inner iterator.  </p>  <p class="para">   <span class="methodname" style="color:#CC7832">{@link RecursiveCallbackFilterIterator::hasChildren()}</span> should be used   to determine if there are children to be fetched.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivecallbackfilteriterator.getchildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivecallbackfilteriterator.getchildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <span class="classname"><a href="https://www.php.net/manual/zh/class.recursivecallbackfilteriterator.php" class="classname">RecursiveCallbackFilterIterator</a></span> containing   the children.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-recursivecallbackfilteriterator.getchildren-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/class.recursivecallbackfilteriterator.php#recursivecallbackfilteriterator.examples" class="link">RecursiveCallbackFilterIterator Examples</a></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link RecursiveCallbackFilterIterator::__construct()} - Create a RecursiveCallbackFilterIterator from a RecursiveIterator</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link RecursiveCallbackFilteriterator::hasChildren()} - Check whether the inner iterator's current element has children</span></li>   </ul>  </span> </div></div>
     * @return RecursiveCallbackFilterIterator containing the children.*/
    public function getChildren(): RecursiveCallbackFilterIterator {}
}

/**
 * Classes implementing <b>RecursiveIterator</b> can be used to iterate
 * over iterators recursively.
 * @link https://php.net/manual/en/class.recursiveiterator.php
 */
interface RecursiveIterator extends Iterator
{
/**
*<div id="recursivecallbackfilteriterator.haschildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveCallbackFilterIterator::hasChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveCallbackFilterIterator::hasChildren</span> &mdash; <span class="dc-title">Check whether the inner iterator&#039;s current element has children</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivecallbackfilteriterator.haschildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveCallbackFilterIterator::hasChildren</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Returns <strong><span>true</span></strong> if the current element has children, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivecallbackfilteriterator.haschildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivecallbackfilteriterator.haschildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the current element has children, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-recursivecallbackfilteriterator.haschildren-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>RecursiveCallbackFilterIterator::hasChildren()</strong></span> basic usage</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$dir </span><span style="color: #007700">= new </span><span style="color: #9876AA">RecursiveDirectoryIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">__DIR__</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Recursively iterate over XML files<br /></span><span style="color: #9876AA">$files </span><span style="color: #007700">= new </span><span style="color: #9876AA">RecursiveCallbackFilterIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$dir</span><span style="color: #007700">, function (</span><span style="color: #9876AA">$current</span><span style="color: #007700">, </span><span style="color: #9876AA">$key</span><span style="color: #007700">, </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// Allow recursion into directories<br />    </span><span style="color: #007700">if (</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasChildren</span><span style="color: #007700">()) {<br />        return </span><span style="color: #9876AA">TRUE</span><span style="color: #007700">;<br />    }<br />    </span><span style="color: #FF8000">// Check for XML file<br />    </span><span style="color: #007700">if (!</span><span style="color: #9876AA">strcasecmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$current</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getExtension</span><span style="color: #007700">(), </span><span style="color: #DD0000">'xml'</span><span style="color: #007700">)) {<br />        return </span><span style="color: #9876AA">TRUE</span><span style="color: #007700">;<br />    }<br />    return </span><span style="color: #9876AA">FALSE</span><span style="color: #007700">;<br />});<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-recursivecallbackfilteriterator.haschildren-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/class.recursivecallbackfilteriterator.php#recursivecallbackfilteriterator.examples" class="link">RecursiveCallbackFilterIterator Examples</a></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link RecursiveCallbackFilterIterator::__construct()} - Create a RecursiveCallbackFilterIterator from a RecursiveIterator</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link RecursiveCallbackFilteriterator::getChildren()} - Return the inner iterator's children contained in a RecursiveCallbackFilterIterator</span></li>   </ul>  </span> </div></div>
     * @return bool true if the current entry can be iterated over, otherwise returns false.*/
    public function hasChildren(): bool;

/**
*<div id="recursivecallbackfilteriterator.getchildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveCallbackFilterIterator::getChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveCallbackFilterIterator::getChildren</span> &mdash; <span class="dc-title">Return the inner iterator&#039;s children contained in a RecursiveCallbackFilterIterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivecallbackfilteriterator.getchildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveCallbackFilterIterator::getChildren</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursivecallbackfilteriterator.php" class="type RecursiveCallbackFilterIterator" style="color:#EAB766">RecursiveCallbackFilterIterator</a></span></div>  <p class="para rdfs-comment">   Fetches the filtered children of the inner iterator.  </p>  <p class="para">   <span class="methodname" style="color:#CC7832">{@link RecursiveCallbackFilterIterator::hasChildren()}</span> should be used   to determine if there are children to be fetched.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivecallbackfilteriterator.getchildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivecallbackfilteriterator.getchildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <span class="classname"><a href="https://www.php.net/manual/zh/class.recursivecallbackfilteriterator.php" class="classname">RecursiveCallbackFilterIterator</a></span> containing   the children.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-recursivecallbackfilteriterator.getchildren-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/class.recursivecallbackfilteriterator.php#recursivecallbackfilteriterator.examples" class="link">RecursiveCallbackFilterIterator Examples</a></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link RecursiveCallbackFilterIterator::__construct()} - Create a RecursiveCallbackFilterIterator from a RecursiveIterator</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link RecursiveCallbackFilteriterator::hasChildren()} - Check whether the inner iterator's current element has children</span></li>   </ul>  </span> </div></div>
     * @return RecursiveIterator|null An iterator for the current entry.*/
    public function getChildren(): ?RecursiveIterator;
}

/**
*<div id="class.recursiveiteratoriterator" class="reference"> <h1 class="title">The RecursiveIteratorIterator class</h1>  <div class="partintro"><p class="verinfo">(PHP 5, PHP 7, PHP 8)</p>  <div class="section" id="recursiveiteratoriterator.intro">   <h2 class="title">简介</h2>   <p class="para">    Can be used to iterate through recursive iterators.   </p>  </div>  <div class="section" id="recursiveiteratoriterator.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">RecursiveIteratorIterator</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.outeriterator.php" class="interfacename">OuterIterator</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.recursiveiteratoriterator.php#recursiveiteratoriterator.constants.leaves-only"><var class="varname">LEAVES_ONLY</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.recursiveiteratoriterator.php#recursiveiteratoriterator.constants.self-first"><var class="varname">SELF_FIRST</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.recursiveiteratoriterator.php#recursiveiteratoriterator.constants.child-first"><var class="varname">CHILD_FIRST</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.recursiveiteratoriterator.php#recursiveiteratoriterator.constants.catch-get-child"><var class="varname">CATCH_GET_CHILD</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveiteratoriterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.traversable.php" class="type Traversable" style="color:#EAB766">Traversable</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = RecursiveIteratorIterator::LEAVES_ONLY</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveiteratoriterator.beginchildren.php" class="methodname" style="color:#CC7832">beginChildren</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveiteratoriterator.beginiteration.php" class="methodname" style="color:#CC7832">beginIteration</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveiteratoriterator.callgetchildren.php" class="methodname" style="color:#CC7832">callGetChildren</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="type RecursiveIterator" style="color:#EAB766">RecursiveIterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveiteratoriterator.callhaschildren.php" class="methodname" style="color:#CC7832">callHasChildren</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveiteratoriterator.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveiteratoriterator.endchildren.php" class="methodname" style="color:#CC7832">endChildren</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveiteratoriterator.enditeration.php" class="methodname" style="color:#CC7832">endIteration</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveiteratoriterator.getdepth.php" class="methodname" style="color:#CC7832">getDepth</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveiteratoriterator.getinneriterator.php" class="methodname" style="color:#CC7832">getInnerIterator</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="type RecursiveIterator" style="color:#EAB766">RecursiveIterator</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveiteratoriterator.getmaxdepth.php" class="methodname" style="color:#CC7832">getMaxDepth</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveiteratoriterator.getsubiterator.php" class="methodname" style="color:#CC7832">getSubIterator</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$level</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="type RecursiveIterator" style="color:#EAB766">RecursiveIterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveiteratoriterator.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveiteratoriterator.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveiteratoriterator.nextelement.php" class="methodname" style="color:#CC7832">nextElement</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveiteratoriterator.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveiteratoriterator.setmaxdepth.php" class="methodname" style="color:#CC7832">setMaxDepth</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$maxDepth</span><span class="initializer"> = -1</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveiteratoriterator.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div>  <div class="section" id="recursiveiteratoriterator.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="recursiveiteratoriterator.constants.leaves-only"><strong><span>RecursiveIteratorIterator::LEAVES_ONLY</span></strong></dt>     <dd>      <p class="para"/>     </dd>             <dt id="recursiveiteratoriterator.constants.self-first"><strong><span>RecursiveIteratorIterator::SELF_FIRST</span></strong></dt>     <dd>      <p class="para"/>     </dd>             <dt id="recursiveiteratoriterator.constants.child-first"><strong><span>RecursiveIteratorIterator::CHILD_FIRST</span></strong></dt>     <dd>      <p class="para"/>     </dd>             <dt id="recursiveiteratoriterator.constants.catch-get-child"><strong><span>RecursiveIteratorIterator::CATCH_GET_CHILD</span></strong></dt>     <dd>      <p class="para"/>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link RecursiveIteratorIterator::beginChildren} — Begin children</li><li>{@link RecursiveIteratorIterator::beginIteration} — Begin Iteration</li><li>{@link RecursiveIteratorIterator::callGetChildren} — Get children</li><li>{@link RecursiveIteratorIterator::callHasChildren} — Has children</li><li>{@link RecursiveIteratorIterator::__construct} — Construct a RecursiveIteratorIterator</li><li>{@link RecursiveIteratorIterator::current} — Access the current element value</li><li>{@link RecursiveIteratorIterator::endChildren} — End children</li><li>{@link RecursiveIteratorIterator::endIteration} — End Iteration</li><li>{@link RecursiveIteratorIterator::getDepth} — Get the current depth of the recursive iteration</li><li>{@link RecursiveIteratorIterator::getInnerIterator} — Get inner iterator</li><li>{@link RecursiveIteratorIterator::getMaxDepth} — Get max depth</li><li>{@link RecursiveIteratorIterator::getSubIterator} — The current active sub iterator</li><li>{@link RecursiveIteratorIterator::key} — Access the current key</li><li>{@link RecursiveIteratorIterator::next} — Move forward to the next element</li><li>{@link RecursiveIteratorIterator::nextElement} — Next element</li><li>{@link RecursiveIteratorIterator::rewind} — Rewind the iterator to the first element of the top level inner iterator</li><li>{@link RecursiveIteratorIterator::setMaxDepth} — Set max depth</li><li>{@link RecursiveIteratorIterator::valid} — Check whether the current position is valid</li></ul></div>
*/
class RecursiveIteratorIterator implements OuterIterator
{
    /**
     * The default. Lists only leaves in iteration.
     */
    public const LEAVES_ONLY = 0;

    /**
     * Lists leaves and parents in iteration with parents coming first.
     */
    public const SELF_FIRST = 1;

    /**
     * Lists leaves and parents in iteration with leaves coming first.
     */
    public const CHILD_FIRST = 2;

    /**
     * Special flag: Ignore exceptions thrown in accessing children.
     */
    public const CATCH_GET_CHILD = 16;

    /**
     * Construct a RecursiveIteratorIterator
     * @link https://php.net/manual/en/recursiveiteratoriterator.construct.php
     * @param Traversable $iterator
     * @param int $mode [optional] The operation mode. See class constants for details.
     * @param int $flags [optional] A bitmask of special flags. See class constants for details.
     * @since 5.1.3
     */
    public function __construct(
        Traversable $iterator,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $mode = self::LEAVES_ONLY,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags = 0
    ) {}

/**
*<div id="recursiveiteratoriterator.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveIteratorIterator::rewind</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveIteratorIterator::rewind</span> &mdash; <span class="dc-title">Rewind the iterator to the first element of the top level inner iterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveiteratoriterator.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveIteratorIterator::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveiteratoriterator.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveiteratoriterator.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function rewind(): void {}

/**
*<div id="recursiveiteratoriterator.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveIteratorIterator::valid</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveIteratorIterator::valid</span> &mdash; <span class="dc-title">Check whether the current position is valid</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveiteratoriterator.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveIteratorIterator::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveiteratoriterator.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveiteratoriterator.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the current position is valid, otherwise <strong><span>false</span></strong>  </p> </div></div>
     * @return bool true if the current position is valid, otherwise false*/
    public function valid(): bool {}

/**
*<div id="recursiveiteratoriterator.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveIteratorIterator::key</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveIteratorIterator::key</span> &mdash; <span class="dc-title">Access the current key</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveiteratoriterator.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveIteratorIterator::key</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveiteratoriterator.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveiteratoriterator.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current key.  </p> </div></div>
     * @return mixed The key of the current element.*/
    public function key(): mixed {}

/**
*<div id="recursiveiteratoriterator.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveIteratorIterator::current</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveIteratorIterator::current</span> &mdash; <span class="dc-title">Access the current element value</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveiteratoriterator.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveIteratorIterator::current</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveiteratoriterator.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveiteratoriterator.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current elements value.  </p> </div></div>
     * @return mixed The current elements value.*/
    public function current(): mixed {}

/**
*<div id="recursiveiteratoriterator.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveIteratorIterator::next</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveIteratorIterator::next</span> &mdash; <span class="dc-title">Move forward to the next element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveiteratoriterator.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveIteratorIterator::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveiteratoriterator.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveiteratoriterator.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function next(): void {}

/**
*<div id="recursiveiteratoriterator.getdepth" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveIteratorIterator::getDepth</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveIteratorIterator::getDepth</span> &mdash; <span class="dc-title">Get the current depth of the recursive iteration</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveiteratoriterator.getdepth-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveIteratorIterator::getDepth</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveiteratoriterator.getdepth-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveiteratoriterator.getdepth-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current depth of the recursive iteration.  </p> </div></div>
     * @return int The current depth of the recursive iteration.*/
    public function getDepth(): int {}

/**
*<div id="recursiveiteratoriterator.getsubiterator" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveIteratorIterator::getSubIterator</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveIteratorIterator::getSubIterator</span> &mdash; <span class="dc-title">The current active sub iterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveiteratoriterator.getsubiterator-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveIteratorIterator::getSubIterator</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$level</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="type RecursiveIterator" style="color:#EAB766">RecursiveIterator</a></span></span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveiteratoriterator.getsubiterator-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">level</span></dt>     <dd>      <p class="para">             </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveiteratoriterator.getsubiterator-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current active sub iterator on success; <strong><span>null</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-recursiveiteratoriterator.getsubiterator-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        <span class="parameter" style="color:#3A95FF">level</span> is now nullable.       </td>      </tr>     </tbody>       </table>  </span> </div></div>
     * @return RecursiveIterator|null The current active sub iterator.*/
    public function getSubIterator(#[LanguageLevelTypeAware(['8.0' => 'int|null'], default: '')] $level): ?RecursiveIterator {}

/**
*<div id="recursiveiteratoriterator.getinneriterator" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveIteratorIterator::getInnerIterator</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveIteratorIterator::getInnerIterator</span> &mdash; <span class="dc-title">Get inner iterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveiteratoriterator.getinneriterator-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveIteratorIterator::getInnerIterator</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="type RecursiveIterator" style="color:#EAB766">RecursiveIterator</a></span></div>  <p class="para rdfs-comment">   Gets the current active sub iterator.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveiteratoriterator.getinneriterator-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveiteratoriterator.getinneriterator-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current active sub iterator.  </p> </div></div>
     * @return RecursiveIterator The current active sub iterator.*/
    public function getInnerIterator(): RecursiveIterator {}

/**
*<div id="recursiveiteratoriterator.beginiteration" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveIteratorIterator::beginIteration</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveIteratorIterator::beginIteration</span> &mdash; <span class="dc-title">Begin Iteration</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveiteratoriterator.beginiteration-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveIteratorIterator::beginIteration</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Called when iteration begins (after the first <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::rewind()}</span>   call.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveiteratoriterator.beginiteration-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveiteratoriterator.beginiteration-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function beginIteration(): void {}

/**
*<div id="recursiveiteratoriterator.enditeration" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveIteratorIterator::endIteration</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveIteratorIterator::endIteration</span> &mdash; <span class="dc-title">End Iteration</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveiteratoriterator.enditeration-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveIteratorIterator::endIteration</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Called when the iteration ends (when <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::valid()}</span>   first returns <strong><span>false</span></strong>.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveiteratoriterator.enditeration-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveiteratoriterator.enditeration-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function endIteration(): void {}

/**
*<div id="recursiveiteratoriterator.callhaschildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveIteratorIterator::callHasChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveIteratorIterator::callHasChildren</span> &mdash; <span class="dc-title">Has children</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveiteratoriterator.callhaschildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveIteratorIterator::callHasChildren</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Called for each element to test whether it has children.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveiteratoriterator.callhaschildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveiteratoriterator.callhaschildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns whether the element has children.  </p> </div></div>
     * @return bool true if the element has children, otherwise false*/
    public function callHasChildren(): bool {}

/**
*<div id="recursiveiteratoriterator.callgetchildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveIteratorIterator::callGetChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveIteratorIterator::callGetChildren</span> &mdash; <span class="dc-title">Get children</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveiteratoriterator.callgetchildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveIteratorIterator::callGetChildren</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="type RecursiveIterator" style="color:#EAB766">RecursiveIterator</a></span></span></div>  <p class="para rdfs-comment">   Get children of the current element.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveiteratoriterator.callgetchildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveiteratoriterator.callgetchildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   A <span class="methodname" style="color:#CC7832"><strong>RecursiveIterator()</strong></span> on success, or <strong><span>null</span></strong> on failure.  </p> </div></div>
     * @return RecursiveIterator|null A <b>RecursiveIterator</b>.*/
    public function callGetChildren(): ?RecursiveIterator {}

/**
*<div id="recursiveiteratoriterator.beginchildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveIteratorIterator::beginChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveIteratorIterator::beginChildren</span> &mdash; <span class="dc-title">Begin children</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveiteratoriterator.beginchildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveIteratorIterator::beginChildren</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Is called after calling <span class="methodname" style="color:#CC7832"><strong>RecursiveIteratorIterator::getChildren()</strong></span>,   and its associated <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::rewind()}</span>.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveiteratoriterator.beginchildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveiteratoriterator.beginchildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function beginChildren(): void {}

/**
*<div id="recursiveiteratoriterator.endchildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveIteratorIterator::endChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveIteratorIterator::endChildren</span> &mdash; <span class="dc-title">End children</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveiteratoriterator.endchildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveIteratorIterator::endChildren</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Called when end recursing one level.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveiteratoriterator.endchildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveiteratoriterator.endchildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function endChildren(): void {}

/**
*<div id="recursiveiteratoriterator.nextelement" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveIteratorIterator::nextElement</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveIteratorIterator::nextElement</span> &mdash; <span class="dc-title">Next element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveiteratoriterator.nextelement-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveIteratorIterator::nextElement</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Called when the next element is available.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveiteratoriterator.nextelement-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveiteratoriterator.nextelement-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function nextElement(): void {}

/**
*<div id="recursiveiteratoriterator.setmaxdepth" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveIteratorIterator::setMaxDepth</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveIteratorIterator::setMaxDepth</span> &mdash; <span class="dc-title">Set max depth</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveiteratoriterator.setmaxdepth-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveIteratorIterator::setMaxDepth</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$maxDepth</span><span class="initializer"> = -1</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Set the maximum allowed depth.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveiteratoriterator.setmaxdepth-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">maxDepth</span></dt>     <dd>      <p class="para">       The maximum allowed depth. <span>-1</span> is used       for any depth.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveiteratoriterator.setmaxdepth-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-recursiveiteratoriterator.setmaxdepth-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Emits an <span class="classname"><a href="https://www.php.net/manual/zh/class.exception.php" class="classname">Exception</a></span> if <span class="parameter" style="color:#3A95FF">maxDepth</span> is less than <span>-1</span>.  </p> </div></div>
     * @return void*/
    public function setMaxDepth(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $maxDepth = -1): void {}

/**
*<div id="recursiveiteratoriterator.getmaxdepth" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveIteratorIterator::getMaxDepth</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveIteratorIterator::getMaxDepth</span> &mdash; <span class="dc-title">Get max depth</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveiteratoriterator.getmaxdepth-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveIteratorIterator::getMaxDepth</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Gets the maximum allowable depth.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveiteratoriterator.getmaxdepth-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveiteratoriterator.getmaxdepth-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The maximum accepted depth, or <strong><span>false</span></strong> if any depth is allowed.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-recursiveiteratoriterator.getmaxdepth-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::setMaxDepth()} - Set max depth</span></li>   </ul>  </span> </div></div>
     * @return int|false The maximum accepted depth, or false if any depth is allowed.*/
    public function getMaxDepth(): int|false {}
}

/**
 * Classes implementing <b>OuterIterator</b> can be used to iterate
 * over iterators.
 * @link https://php.net/manual/en/class.outeriterator.php
 */
interface OuterIterator extends Iterator
{
/**
*<div id="recursiveiteratoriterator.getinneriterator" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveIteratorIterator::getInnerIterator</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveIteratorIterator::getInnerIterator</span> &mdash; <span class="dc-title">Get inner iterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveiteratoriterator.getinneriterator-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveIteratorIterator::getInnerIterator</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="type RecursiveIterator" style="color:#EAB766">RecursiveIterator</a></span></div>  <p class="para rdfs-comment">   Gets the current active sub iterator.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveiteratoriterator.getinneriterator-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveiteratoriterator.getinneriterator-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current active sub iterator.  </p> </div></div>
     * @return Iterator|null The inner iterator for the current entry.*/
    public function getInnerIterator(): ?Iterator;
}

/**
*<div id="class.iteratoriterator" class="reference"> <h1 class="title">The IteratorIterator class</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>  <div class="section" id="iteratoriterator.intro">   <h2 class="title">简介</h2>   <p class="para">    This iterator wrapper allows the conversion of anything that is    <a href="https://www.php.net/manual/zh/class.traversable.php" class="link">Traversable</a> into an Iterator.    It is important to understand that most classes that do not implement    Iterators have reasons as most likely they do not allow the full    Iterator feature set. If so, techniques should be provided to prevent    misuse, otherwise expect exceptions or fatal errors.   </p>  </div>  <div class="section" id="iteratoriterator.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">IteratorIterator</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.outeriterator.php" class="interfacename">OuterIterator</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/iteratoriterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.traversable.php" class="type Traversable" style="color:#EAB766">Traversable</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/iteratoriterator.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/iteratoriterator.getinneriterator.php" class="methodname" style="color:#CC7832">getInnerIterator</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/iteratoriterator.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/iteratoriterator.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/iteratoriterator.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/iteratoriterator.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div>   <div class="section">   <h2 class="title">注释</h2>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <p class="para">     This class permits access to methods of the inner iterator via the __call magic method.    </p>   </p></blockquote>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link IteratorIterator::__construct} — Create an iterator from anything that is traversable</li><li>{@link IteratorIterator::current} — Get the current value</li><li>{@link IteratorIterator::getInnerIterator} — Get the inner iterator</li><li>{@link IteratorIterator::key} — Get the key of the current element</li><li>{@link IteratorIterator::next} — Forward to the next element</li><li>{@link IteratorIterator::rewind} — Rewind to the first element</li><li>{@link IteratorIterator::valid} — Checks if the iterator is valid</li></ul></div>
*/
class IteratorIterator implements OuterIterator
{
    /**
     * Create an iterator from anything that is traversable
     * @link https://php.net/manual/en/iteratoriterator.construct.php
     * @param Traversable $iterator
     * @param string|null $class [optional]
     */
    public function __construct(Traversable $iterator, #[PhpStormStubsElementAvailable(from: '8.0')] ?string $class = null) {}

/**
*<div id="iteratoriterator.getinneriterator" class="refentry"> <div class="refnamediv">  <h1 class="refname">IteratorIterator::getInnerIterator</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">IteratorIterator::getInnerIterator</span> &mdash; <span class="dc-title">Get the inner iterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-iteratoriterator.getinneriterator-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>IteratorIterator::getInnerIterator</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></span></div>  <p class="para rdfs-comment">   Get the inner iterator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-iteratoriterator.getinneriterator-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-iteratoriterator.getinneriterator-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The inner iterator as passed to <span class="methodname" style="color:#CC7832">{@link IteratorIterator::__construct()}</span>, or <strong><span>null</span></strong> when there is no inner iterator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-iteratoriterator.getinneriterator-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="classname"><a href="https://www.php.net/manual/zh/class.iterator.php" class="classname">Iterator</a></span></li>    <li class="member"><span class="classname"><a href="https://www.php.net/manual/zh/class.outeriterator.php" class="classname">OuterIterator</a></span></li>   </ul>  </span> </div></div>
     * @return Iterator|null The inner iterator as passed to IteratorIterator::__construct.*/
    public function getInnerIterator(): ?Iterator {}

/**
*<div id="iteratoriterator.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">IteratorIterator::rewind</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">IteratorIterator::rewind</span> &mdash; <span class="dc-title">Rewind to the first element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-iteratoriterator.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>IteratorIterator::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Rewinds to the first element.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-iteratoriterator.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-iteratoriterator.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-iteratoriterator.rewind-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link IteratorIterator::next()} - Forward to the next element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link IteratorIterator::valid()} - Checks if the iterator is valid</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function rewind(): void {}

/**
*<div id="iteratoriterator.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">IteratorIterator::valid</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">IteratorIterator::valid</span> &mdash; <span class="dc-title">Checks if the iterator is valid</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-iteratoriterator.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>IteratorIterator::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the iterator is valid.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-iteratoriterator.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-iteratoriterator.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the iterator is valid, otherwise <strong><span>false</span></strong>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-iteratoriterator.valid-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link iterator_count()} - 计算迭代器中元素的个数</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link IteratorIterator::current()} - Get the current value</span></li>   </ul>  </span> </div></div>
     * @return bool true if the iterator is valid, otherwise false*/
    public function valid(): bool {}

/**
*<div id="iteratoriterator.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">IteratorIterator::key</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">IteratorIterator::key</span> &mdash; <span class="dc-title">Get the key of the current element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-iteratoriterator.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>IteratorIterator::key</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Get the key of the current element.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-iteratoriterator.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-iteratoriterator.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The key of the current element.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-iteratoriterator.key-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link IteratorIterator::current()} - Get the current value</span></li>   </ul>  </span> </div></div>
     * @return mixed The key of the current element.*/
    public function key(): mixed {}

/**
*<div id="iteratoriterator.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">IteratorIterator::current</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">IteratorIterator::current</span> &mdash; <span class="dc-title">Get the current value</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-iteratoriterator.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>IteratorIterator::current</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Get the value of the current element.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-iteratoriterator.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-iteratoriterator.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The value of the current element.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-iteratoriterator.current-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link IteratorIterator::key()} - Get the key of the current element</span></li>   </ul>  </span> </div></div>
     * @return mixed The value of the current element.*/
    public function current(): mixed {}

/**
*<div id="iteratoriterator.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">IteratorIterator::next</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">IteratorIterator::next</span> &mdash; <span class="dc-title">Forward to the next element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-iteratoriterator.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>IteratorIterator::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Forward to the next element.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-iteratoriterator.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-iteratoriterator.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-iteratoriterator.next-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link IteratorIterator::rewind()} - Rewind to the first element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link IteratorIterator::valid()} - Checks if the iterator is valid</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function next(): void {}
}

/**
*<div id="class.filteriterator" class="reference"> <h1 class="title">FilterIterator 类</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>  <div class="section" id="filteriterator.intro">   <h2 class="title">简介</h2>   <p class="para">    这个抽象类的遍历并过滤出不想要的值。这个类应该被实现了迭代过滤器的类继承    <span class="methodname" style="color:#CC7832">{@link FilterIterator::accept()}</span> 方法必须被子类实现。   </p>  </div>  <div class="section" id="filteriterator.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">abstract</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">FilterIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.iteratoriterator.php" class="classname">IteratorIterator</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/filteriterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/filteriterator.accept.php" class="methodname" style="color:#CC7832">accept</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/filteriterator.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/filteriterator.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/filteriterator.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/filteriterator.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/filteriterator.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::getInnerIterator}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link FilterIterator::accept} — Check whether the current element of the iterator is acceptable</li><li>{@link FilterIterator::__construct} — Construct a filterIterator</li><li>{@link FilterIterator::current} — Get the current element value</li><li>{@link FilterIterator::key} — Get the current key</li><li>{@link FilterIterator::next} — Move the iterator forward</li><li>{@link FilterIterator::rewind} — Rewind the iterator</li><li>{@link FilterIterator::valid} — Check whether the current element is valid</li></ul></div>
*/
abstract class FilterIterator extends IteratorIterator
{
/**
*<div id="filteriterator.accept" class="refentry"> <div class="refnamediv">  <h1 class="refname">FilterIterator::accept</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">FilterIterator::accept</span> &mdash; <span class="dc-title">Check whether the current element of the iterator is acceptable</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-filteriterator.accept-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>FilterIterator::accept</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Returns whether the current element of the iterator is acceptable through this filter.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-filteriterator.accept-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-filteriterator.accept-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the current element is acceptable, otherwise <strong><span>false</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-filteriterator.accept-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">FilterIterator::accept()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// This iterator filters all values with less than 10 characters<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">LengthFilterIterator </span><span style="color: #007700">extends </span><span style="color: #9876AA">FilterIterator </span><span style="color: #007700">{<br /><br />    public function </span><span style="color: #9876AA">accept</span><span style="color: #007700">() {<br />        </span><span style="color: #FF8000">// Only accept strings with a length of 10 and greater<br />        </span><span style="color: #007700">return </span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">parent</span><span style="color: #007700">::</span><span style="color: #9876AA">current</span><span style="color: #007700">()) &gt;= </span><span style="color: #9876AA">10</span><span style="color: #007700">;<br />    }<br /><br />}<br /><br /></span><span style="color: #9876AA">$arrayIterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'test1'</span><span style="color: #007700">, </span><span style="color: #DD0000">'more than 10 characters'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$lengthFilter </span><span style="color: #007700">= new </span><span style="color: #9876AA">LengthFilterIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayIterator</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$lengthFilter </span><span style="color: #007700">as </span><span style="color: #9876AA">$value</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$value </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>more than 10 characters<br></span></div>    </div>   </div>  </span> </div></div>
     * @return bool true if the current element is acceptable, otherwise false.*/
    abstract public function accept(): bool;

    /**
     * Construct a filterIterator
     * @link https://php.net/manual/en/filteriterator.construct.php
     * @param Iterator $iterator
     */
    public function __construct(Iterator $iterator) {}

/**
*<div id="filteriterator.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">FilterIterator::rewind</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">FilterIterator::rewind</span> &mdash; <span class="dc-title">Rewind the iterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-filteriterator.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>FilterIterator::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>  <p class="para">   Rewind the iterator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-filteriterator.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-filteriterator.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-filteriterator.rewind-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link FilterIterator::current()} - Get the current element value</span></li>    <li class="member"><span class="function">{@link FilterIterator::key()} - Get the current key</span></li>    <li class="member"><span class="function">{@link FilterIterator::next()} - Move the iterator forward</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function rewind(): void {}

/**
*<div id="filteriterator.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">FilterIterator::valid</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">FilterIterator::valid</span> &mdash; <span class="dc-title">Check whether the current element is valid</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-filteriterator.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>FilterIterator::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>  <p class="para">   Checks whether the current element is valid.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-filteriterator.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-filteriterator.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the current element is valid, otherwise <strong><span>false</span></strong>  </p> </div></div>
     * @return bool true if the current element is valid, otherwise false*/
    public function valid(): bool {}

/**
*<div id="filteriterator.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">FilterIterator::key</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">FilterIterator::key</span> &mdash; <span class="dc-title">Get the current key</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-filteriterator.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>FilterIterator::key</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>  <p class="para">   Get the current key.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-filteriterator.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-filteriterator.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current key.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-filteriterator.key-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link FilterIterator::next()} - Move the iterator forward</span></li>    <li class="member"><span class="function">{@link FilterIterator::current()} - Get the current element value</span></li>   </ul>  </span> </div></div>
     * @return mixed The key of the current element.*/
    public function key(): mixed {}

/**
*<div id="filteriterator.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">FilterIterator::current</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">FilterIterator::current</span> &mdash; <span class="dc-title">Get the current element value</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-filteriterator.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>FilterIterator::current</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>  <p class="para">   Get the current element value.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-filteriterator.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-filteriterator.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current element value.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-filteriterator.current-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link FilterIterator::key()} - Get the current key</span></li>    <li class="member"><span class="function">{@link FilterIterator::next()} - Move the iterator forward</span></li>   </ul>  </span> </div></div>
     * @return mixed The current element value.*/
    public function current(): mixed {}

/**
*<div id="filteriterator.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">FilterIterator::next</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">FilterIterator::next</span> &mdash; <span class="dc-title">Move the iterator forward</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-filteriterator.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>FilterIterator::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>  <p class="para">   Move the iterator forward.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-filteriterator.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-filteriterator.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-filteriterator.next-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link FilterIterator::current()} - Get the current element value</span></li>    <li class="member"><span class="function">{@link FilterIterator::key()} - Get the current key</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function next(): void {}

    /**
     * Get the inner iterator
     * @link https://php.net/manual/en/filteriterator.getinneriterator.php
     * @return Iterator The inner iterator.
     */
    public function getInnerIterator(): Iterator {}
}

/**
*<div id="class.recursivefilteriterator" class="reference"> <h1 class="title">The RecursiveFilterIterator class</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>  <div class="section" id="recursivefilteriterator.intro">   <h2 class="title">简介</h2>   <p class="para">    This abstract iterator filters out unwanted values for a <span class="classname"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="classname">RecursiveIterator</a></span>.    This class should be extended to implement custom filters.     The <span class="methodname" style="color:#CC7832"><strong>RecursiveFilterIterator::accept()</strong></span> must be implemented in the subclass.   </p>  </div>  <div class="section" id="recursivefilteriterator.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">abstract</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">RecursiveFilterIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.filteriterator.php" class="classname">FilterIterator</a>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="interfacename">RecursiveIterator</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivefilteriterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="type RecursiveIterator" style="color:#EAB766">RecursiveIterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivefilteriterator.getchildren.php" class="methodname" style="color:#CC7832">getChildren</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursivefilteriterator.php" class="type RecursiveFilterIterator" style="color:#EAB766">RecursiveFilterIterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivefilteriterator.haschildren.php" class="methodname" style="color:#CC7832">hasChildren</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::accept}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::getInnerIterator}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link RecursiveFilterIterator::__construct} — Create a RecursiveFilterIterator from a RecursiveIterator</li><li>{@link RecursiveFilterIterator::getChildren} — Return the inner iterator's children contained in a RecursiveFilterIterator</li><li>{@link RecursiveFilterIterator::hasChildren} — Check whether the inner iterator's current element has children</li></ul></div>
*/
abstract class RecursiveFilterIterator extends FilterIterator implements RecursiveIterator
{
    /**
     * Create a RecursiveFilterIterator from a RecursiveIterator
     * @link https://php.net/manual/en/recursivefilteriterator.construct.php
     * @param RecursiveIterator $iterator
     */
    public function __construct(RecursiveIterator $iterator) {}

/**
*<div id="recursivefilteriterator.haschildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveFilterIterator::hasChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveFilterIterator::hasChildren</span> &mdash; <span class="dc-title">Check whether the inner iterator&#039;s current element has children</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivefilteriterator.haschildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveFilterIterator::hasChildren</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Check whether the inner iterator&#039;s current element has children.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivefilteriterator.haschildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivefilteriterator.haschildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the inner iterator has children, otherwise <strong><span>false</span></strong>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-recursivefilteriterator.haschildren-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link RecursiveFilterIterator::getChildren()} - Return the inner iterator's children contained in a RecursiveFilterIterator</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link RecursiveIterator::hasChildren()} - Returns if an iterator can be created for the current entry</span></li>   </ul>  </span> </div></div>
     * @return bool true if the inner iterator has children, otherwise false*/
    public function hasChildren(): bool {}

/**
*<div id="recursivefilteriterator.getchildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveFilterIterator::getChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveFilterIterator::getChildren</span> &mdash; <span class="dc-title">Return the inner iterator&#039;s children contained in a RecursiveFilterIterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivefilteriterator.getchildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveFilterIterator::getChildren</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursivefilteriterator.php" class="type RecursiveFilterIterator" style="color:#EAB766">RecursiveFilterIterator</a></span></span></div>  <p class="para rdfs-comment">   Return the inner iterator&#039;s children contained in a <span class="classname"><a href="https://www.php.net/manual/zh/class.recursivefilteriterator.php" class="classname">RecursiveFilterIterator</a></span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivefilteriterator.getchildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivefilteriterator.getchildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <span class="classname"><a href="https://www.php.net/manual/zh/class.recursivefilteriterator.php" class="classname">RecursiveFilterIterator</a></span> containing the inner iterator&#039;s children.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-recursivefilteriterator.getchildren-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link RecursiveFilterIterator::hasChildren()} - Check whether the inner iterator's current element has children</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link RecursiveIterator::getChildren()} - Returns an iterator for the current entry</span></li>   </ul>  </span> </div></div>
     * @return RecursiveFilterIterator|null containing the inner iterator's children.*/
    public function getChildren(): ?RecursiveFilterIterator {}
}

/**
*<div id="class.parentiterator" class="reference"> <h1 class="title">The ParentIterator class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>   <div class="section" id="parentiterator.intro">   <h2 class="title">简介</h2>   <p class="para">    This extended <span class="classname"><a href="https://www.php.net/manual/zh/class.filteriterator.php" class="classname">FilterIterator</a></span> allows a recursive    iteration using <span class="classname"><a href="https://www.php.net/manual/zh/class.recursiveiteratoriterator.php" class="classname">RecursiveIteratorIterator</a></span> that only    shows those elements which have children.   </p>  </div>   <div class="section" id="parentiterator.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">ParentIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.recursivefilteriterator.php" class="classname">RecursiveFilterIterator</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/parentiterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="type RecursiveIterator" style="color:#EAB766">RecursiveIterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/parentiterator.accept.php" class="methodname" style="color:#CC7832">accept</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/parentiterator.getchildren.php" class="methodname" style="color:#CC7832">getChildren</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.parentiterator.php" class="type ParentIterator" style="color:#EAB766">ParentIterator</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/parentiterator.haschildren.php" class="methodname" style="color:#CC7832">hasChildren</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/parentiterator.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/parentiterator.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveFilterIterator::getChildren}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursivefilteriterator.php" class="type RecursiveFilterIterator" style="color:#EAB766">RecursiveFilterIterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveFilterIterator::hasChildren}</span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::accept}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::getInnerIterator}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>   </div>   </div>   <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ParentIterator::accept} — Determines acceptability</li><li>{@link ParentIterator::__construct} — Constructs a ParentIterator</li><li>{@link ParentIterator::getChildren} — Return the inner iterator's children contained in a ParentIterator</li><li>{@link ParentIterator::hasChildren} — Check whether the inner iterator's current element has children</li><li>{@link ParentIterator::next} — Move the iterator forward</li><li>{@link ParentIterator::rewind} — Rewind the iterator</li></ul></div>
*/
class ParentIterator extends RecursiveFilterIterator
{
/**
*<div id="parentiterator.accept" class="refentry"> <div class="refnamediv">  <h1 class="refname">ParentIterator::accept</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ParentIterator::accept</span> &mdash; <span class="dc-title">Determines acceptability</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-parentiterator.accept-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ParentIterator::accept</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Determines if the current element has children.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-parentiterator.accept-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-parentiterator.accept-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the current element is acceptable, otherwise <strong><span>false</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-parentiterator.accept-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ParentIterator::hasChildren()} - Check whether the inner iterator's current element has children</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link FilterIterator::accept()} - Check whether the current element of the iterator is acceptable</span></li>   </ul>  </span> </div></div>
     * @return bool true if the current element is acceptable, otherwise false.*/
    public function accept(): bool {}

    /**
     * Constructs a ParentIterator
     * @link https://php.net/manual/en/parentiterator.construct.php
     * @param RecursiveIterator $iterator
     */
    public function __construct(RecursiveIterator $iterator) {}

/**
*<div id="parentiterator.haschildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">ParentIterator::hasChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ParentIterator::hasChildren</span> &mdash; <span class="dc-title">Check whether the inner iterator&#039;s current element has children</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-parentiterator.haschildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ParentIterator::hasChildren</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Check whether the inner iterator&#039;s current element has children.  </p>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-parentiterator.haschildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-parentiterator.haschildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool true if the inner iterator has children, otherwise false*/
    public function hasChildren() {}

/**
*<div id="parentiterator.getchildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">ParentIterator::getChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ParentIterator::getChildren</span> &mdash; <span class="dc-title">Return the inner iterator&#039;s children contained in a ParentIterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-parentiterator.getchildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ParentIterator::getChildren</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.parentiterator.php" class="type ParentIterator" style="color:#EAB766">ParentIterator</a></span></div>  <p class="para rdfs-comment">   Get the inner iterator&#039;s children contained in a ParentIterator.  </p>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-parentiterator.getchildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-parentiterator.getchildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   An <span class="type" style="color:#EAB766">object</span>.  </p> </div></div>
     * @return ParentIterator containing the inner iterator's children.*/
    public function getChildren() {}
}

/**
 * The Seekable iterator.
 * @link https://php.net/manual/en/class.seekableiterator.php
 */
interface SeekableIterator extends Iterator
{
    /**
     * Seeks to a position
     * @link https://php.net/manual/en/seekableiterator.seek.php
     * @param int $offset <p>
     * The position to seek to.
     * </p>
     * @return void
     */
    #[TentativeType]
    public function seek(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $offset): void;
}

/**
*<div id="class.limititerator" class="reference"> <h1 class="title">LimitIterator 类</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>   <div class="section" id="limititerator.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">LimitIterator</strong></span> 类允许遍历一个    <span class="classname"><a href="https://www.php.net/manual/zh/class.iterator.php" class="classname">Iterator</a></span> 的限定子集的元素。   </p>  </div>   <div class="section" id="limititerator.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">LimitIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.iteratoriterator.php" class="classname">IteratorIterator</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/limititerator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$limit</span><span class="initializer"> = -1</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/limititerator.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/limititerator.getposition.php" class="methodname" style="color:#CC7832">getPosition</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/limititerator.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/limititerator.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/limititerator.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/limititerator.seek.php" class="methodname" style="color:#CC7832">seek</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/limititerator.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::getInnerIterator}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>   </div>     <div class="section" id="limititerator.examples">   <h2 class="title">示例</h2>   <p class="para">    <div class="example" id="">     <p><strong>示例 #1 <span class="classname"><strong class="classname">LimitIterator</strong></span> usage example</strong></p>     <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">// Create an iterator to be limited<br /></span><span style="color: #9876AA">$fruits </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(array(<br />    </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'banana'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'cherry'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'damson'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'elderberry'<br /></span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">// Loop over first three fruits only<br /></span><span style="color: #007700">foreach (new </span><span style="color: #9876AA">LimitIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">) as </span><span style="color: #9876AA">$fruit</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruit</span><span style="color: #007700">);<br />}<br /><br />echo </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// Loop from third fruit until the end<br />// Note: offset starts from zero for apple<br /></span><span style="color: #007700">foreach (new </span><span style="color: #9876AA">LimitIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">) as </span><span style="color: #9876AA">$fruit</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruit</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(5) &quot;apple&quot;<br>string(6) &quot;banana&quot;<br>string(6) &quot;cherry&quot;<br><br>string(6) &quot;cherry&quot;<br>string(6) &quot;damson&quot;<br>string(10) &quot;elderberry&quot;<br></span></div>     </div>    </div>   </p>  </div>   </div>   <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link LimitIterator::__construct} — Construct a LimitIterator</li><li>{@link LimitIterator::current} — Get current element</li><li>{@link LimitIterator::getPosition} — Return the current position</li><li>{@link LimitIterator::key} — Get current key</li><li>{@link LimitIterator::next} — Move the iterator forward</li><li>{@link LimitIterator::rewind} — Rewind the iterator to the specified starting offset</li><li>{@link LimitIterator::seek} — Seek to the given position</li><li>{@link LimitIterator::valid} — Check whether the current element is valid</li></ul></div>
*/
class LimitIterator extends IteratorIterator
{
    /**
     * Construct a LimitIterator
     * @link https://php.net/manual/en/limititerator.construct.php
     * @param Iterator $iterator The iterator to limit.
     * @param int $offset [optional] The offset to start at. Must be zero or greater.
     * @param int $limit [optional] The number of items to iterate. Must be -1 or greater. -1, the default, means no limit.
     */
    public function __construct(
        Iterator $iterator,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $offset = 0,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $limit = -1
    ) {}

/**
*<div id="limititerator.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">LimitIterator::rewind</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">LimitIterator::rewind</span> &mdash; <span class="dc-title">Rewind the iterator to the specified starting offset</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-limititerator.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LimitIterator::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Rewinds the iterator to the starting offset specified in <span class="methodname" style="color:#CC7832">{@link LimitIterator::__construct()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-limititerator.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-limititerator.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-limititerator.rewind-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::current()} - Get current element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::key()} - Get current key</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::next()} - Move the iterator forward</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::seek()} - Seek to the given position</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::valid()} - Check whether the current element is valid</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function rewind(): void {}

/**
*<div id="limititerator.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">LimitIterator::valid</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">LimitIterator::valid</span> &mdash; <span class="dc-title">Check whether the current element is valid</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-limititerator.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LimitIterator::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks whether the current element is valid.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-limititerator.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-limititerator.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-limititerator.valid-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::current()} - Get current element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::key()} - Get current key</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::rewind()} - Rewind the iterator to the specified starting offset</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::next()} - Move the iterator forward</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::seek()} - Seek to the given position</span></li>   </ul>  </span> </div></div>
     * @return bool true on success or false on failure.*/
    public function valid(): bool {}

/**
*<div id="limititerator.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">LimitIterator::key</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">LimitIterator::key</span> &mdash; <span class="dc-title">Get current key</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-limititerator.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LimitIterator::key</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Gets the key for the current item in the inner <span class="classname"><a href="https://www.php.net/manual/zh/class.iterator.php" class="classname">Iterator</a></span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-limititerator.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-limititerator.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the key for the current item.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-limititerator.key-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::getPosition()} - Return the current position</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::current()} - Get current element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::next()} - Move the iterator forward</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::rewind()} - Rewind the iterator to the specified starting offset</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::seek()} - Seek to the given position</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::valid()} - Check whether the current element is valid</span></li>   </ul>  </span> </div></div>
     * @return mixed The key of the current element.*/
    public function key(): mixed {}

/**
*<div id="limititerator.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">LimitIterator::current</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">LimitIterator::current</span> &mdash; <span class="dc-title">Get current element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-limititerator.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LimitIterator::current</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Gets the current element of the inner <span class="classname"><a href="https://www.php.net/manual/zh/class.iterator.php" class="classname">Iterator</a></span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-limititerator.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-limititerator.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current element or <strong><span>null</span></strong> if there is none.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-limititerator.current-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::key()} - Get current key</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::next()} - Move the iterator forward</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::rewind()} - Rewind the iterator to the specified starting offset</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::seek()} - Seek to the given position</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::valid()} - Check whether the current element is valid</span></li>   </ul>  </span> </div></div>
     * @return mixed the current element or null if there is none.*/
    public function current(): mixed {}

/**
*<div id="limititerator.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">LimitIterator::next</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">LimitIterator::next</span> &mdash; <span class="dc-title">Move the iterator forward</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-limititerator.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LimitIterator::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Moves the iterator forward.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-limititerator.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-limititerator.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-limititerator.next-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::current()} - Get current element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::key()} - Get current key</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::rewind()} - Rewind the iterator to the specified starting offset</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::seek()} - Seek to the given position</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::valid()} - Check whether the current element is valid</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function next(): void {}

/**
*<div id="limititerator.seek" class="refentry"> <div class="refnamediv">  <h1 class="refname">LimitIterator::seek</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">LimitIterator::seek</span> &mdash; <span class="dc-title">Seek to the given position</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-limititerator.seek-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LimitIterator::seek</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span></span>): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Moves the iterator to the offset specified by <span class="parameter" style="color:#3A95FF">offset</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-limititerator.seek-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">       The position to seek to.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-limititerator.seek-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the offset position after seeking.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-limititerator.seek-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws an <span class="classname"><a href="https://www.php.net/manual/zh/class.outofboundsexception.php" class="classname">OutOfBoundsException</a></span> if the position is    outside of the limits specified in <span class="methodname" style="color:#CC7832">{@link LimitIterator::__construct()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-limititerator.seek-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::current()} - Get current element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::key()} - Get current key</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::rewind()} - Rewind the iterator to the specified starting offset</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::next()} - Move the iterator forward</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link LimitIterator::valid()} - Check whether the current element is valid</span></li>   </ul>  </span> </div></div>
     * @return int the offset position after seeking.*/
    public function seek(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $offset): int {}

/**
*<div id="limititerator.getposition" class="refentry"> <div class="refnamediv">  <h1 class="refname">LimitIterator::getPosition</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">LimitIterator::getPosition</span> &mdash; <span class="dc-title">Return the current position</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-limititerator.getposition-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LimitIterator::getPosition</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Gets the current zero-based position of the inner <span class="classname"><a href="https://www.php.net/manual/zh/class.iterator.php" class="classname">Iterator</a></span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-limititerator.getposition-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-limititerator.getposition-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current position.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-limititerator.getposition-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">LimitIterator::getPosition()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fruits </span><span style="color: #007700">= array(<br />    </span><span style="color: #DD0000">'a' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'b' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'banana'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'c' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'cherry'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'d' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'damson'</span><span style="color: #007700">,<br />    </span><span style="color: #DD0000">'e' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'elderberry'<br /></span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$array_it </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$limit_it </span><span style="color: #007700">= new </span><span style="color: #9876AA">LimitIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$array_it</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$limit_it </span><span style="color: #007700">as </span><span style="color: #9876AA">$item</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$limit_it</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getPosition</span><span style="color: #007700">() . </span><span style="color: #DD0000">' ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$item </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>2 cherry<br>3 damson<br>4 elderberry<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-limititerator.getposition-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link FilterIterator::key()} - Get the current key</span></li>   </ul>  </span> </div></div>
     * @return int The current position.*/
    public function getPosition(): int {}

    /**
     * Get inner iterator
     * @link https://php.net/manual/en/limititerator.getinneriterator.php
     * @return Iterator The inner iterator passed to <b>LimitIterator::__construct</b>.
     */
    public function getInnerIterator(): Iterator {}
}

/**
*<div id="class.cachingiterator" class="reference"> <h1 class="title">CachingIterator 类</h1>   <div class="partintro"><p class="verinfo">(PHP 5, PHP 7, PHP 8)</p>   <div class="section" id="cachingiterator.intro">   <h2 class="title">简介</h2>   <p class="para">    该对象支持在另一迭代器上缓存迭代。   </p>  </div>   <div class="section" id="cachingiterator.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">CachingIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.iteratoriterator.php" class="classname">IteratorIterator</a>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.arrayaccess.php" class="interfacename">ArrayAccess</a>,     <a href="https://www.php.net/manual/zh/class.countable.php" class="interfacename">Countable</a>,     <a href="https://www.php.net/manual/zh/class.stringable.php" class="interfacename">Stringable</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.cachingiterator.php#cachingiterator.constants.call-tostring"><var class="varname">CALL_TOSTRING</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.cachingiterator.php#cachingiterator.constants.catch-get-child"><var class="varname">CATCH_GET_CHILD</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.cachingiterator.php#cachingiterator.constants.tostring-use-key"><var class="varname">TOSTRING_USE_KEY</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.cachingiterator.php#cachingiterator.constants.tostring-use-current"><var class="varname">TOSTRING_USE_CURRENT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.cachingiterator.php#cachingiterator.constants.tostring-use-inner"><var class="varname">TOSTRING_USE_INNER</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.cachingiterator.php#cachingiterator.constants.full-cache"><var class="varname">FULL_CACHE</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/cachingiterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = CachingIterator::CALL_TOSTRING</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/cachingiterator.count.php" class="methodname" style="color:#CC7832">count</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/cachingiterator.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/cachingiterator.getcache.php" class="methodname" style="color:#CC7832">getCache</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/cachingiterator.getflags.php" class="methodname" style="color:#CC7832">getFlags</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/cachingiterator.hasnext.php" class="methodname" style="color:#CC7832">hasNext</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/cachingiterator.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766"><span class="type scalar" style="color:#EAB766">scalar</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/cachingiterator.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/cachingiterator.offsetexists.php" class="methodname" style="color:#CC7832">offsetExists</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/cachingiterator.offsetget.php" class="methodname" style="color:#CC7832">offsetGet</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/cachingiterator.offsetset.php" class="methodname" style="color:#CC7832">offsetSet</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/cachingiterator.offsetunset.php" class="methodname" style="color:#CC7832">offsetUnset</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/cachingiterator.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/cachingiterator.setflags.php" class="methodname" style="color:#CC7832">setFlags</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/cachingiterator.tostring.php" class="methodname" style="color:#CC7832">__toString</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/cachingiterator.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::getInnerIterator}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div>    <div class="section" id="cachingiterator.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="cachingiterator.constants.call-tostring"><strong><span>CachingIterator::CALL_TOSTRING</span></strong></dt>     <dd>      <p class="para">每个元素转换为字符串。</p>     </dd>             <dt id="cachingiterator.constants.catch-get-child"><strong><span>CachingIterator::CATCH_GET_CHILD</span></strong></dt>     <dd>      <p class="para">访问子元素时不要抛出异常。</p>     </dd>             <dt id="cachingiterator.constants.tostring-use-key"><strong><span>CachingIterator::TOSTRING_USE_KEY</span></strong></dt>     <dd>      <p class="para">       转换为字符串时使用 <a href="https://www.php.net/manual/zh/cachingiterator.key.php" class="link">key</a>。      </p>     </dd>             <dt id="cachingiterator.constants.tostring-use-current"><strong><span>CachingIterator::TOSTRING_USE_CURRENT</span></strong></dt>     <dd>      <p class="para">       转换为字符串时使用 <a href="https://www.php.net/manual/zh/cachingiterator.current.php" class="link">current</a>。      </p>     </dd>             <dt id="cachingiterator.constants.tostring-use-inner"><strong><span>CachingIterator::TOSTRING_USE_INNER</span></strong></dt>     <dd>      <p class="para">       转换为字符串时使用 <a href="https://www.php.net/manual/zh/iteratoriterator.getinneriterator.php" class="link">inner</a>。      </p>     </dd>             <dt id="cachingiterator.constants.full-cache"><strong><span>CachingIterator::FULL_CACHE</span></strong></dt>     <dd>      <p class="para">缓存所有读取的数据。</p>     </dd>       </dl>  </div>  <div class="section">   <h2 class="title">更新日志</h2>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        <span class="classname"><strong class="classname">CachingIterator</strong></span> 现在实现了        <span class="interfacename"><a href="https://www.php.net/manual/zh/class.stringable.php" class="interfacename">Stringable</a></span>。       </td>      </tr>     </tbody>       </table>  </div> </div>   <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link CachingIterator::__construct} — Construct a new CachingIterator object for the iterator</li><li>{@link CachingIterator::count} — The number of elements in the iterator</li><li>{@link CachingIterator::current} — Return the current element</li><li>{@link CachingIterator::getCache} — Retrieve the contents of the cache</li><li>{@link CachingIterator::getFlags} — Get flags used</li><li>{@link CachingIterator::hasNext} — Check whether the inner iterator has a valid next element</li><li>{@link CachingIterator::key} — Return the key for the current element</li><li>{@link CachingIterator::next} — Move the iterator forward</li><li>{@link CachingIterator::offsetExists} — The offsetExists purpose</li><li>{@link CachingIterator::offsetGet} — The offsetGet purpose</li><li>{@link CachingIterator::offsetSet} — The offsetSet purpose</li><li>{@link CachingIterator::offsetUnset} — The offsetUnset purpose</li><li>{@link CachingIterator::rewind} — Rewind the iterator</li><li>{@link CachingIterator::setFlags} — The setFlags purpose</li><li>{@link CachingIterator::__toString} — Return the string representation of the current element</li><li>{@link CachingIterator::valid} — Check whether the current element is valid</li></ul></div>
*/
class CachingIterator extends IteratorIterator implements ArrayAccess, Countable, Stringable
{
    /**
     * String conversion flag (mutually exclusive): Uses the current element for the iterator's string conversion.
     * This converts the current element to a string only once, regardless of whether it is needed or not.
     */
    public const CALL_TOSTRING = 1;

    /**
     * String conversion flag (mutually exclusive). Uses the current key for the iterator's string conversion.
     */
    public const TOSTRING_USE_KEY = 2;

    /**
     * String conversion flag (mutually exclusive). Uses the current element for the iterator's string conversion.
     * This converts the current element to a string only when (and every time) it is needed.
     */
    public const TOSTRING_USE_CURRENT = 4;

    /**
     * String conversion flag (mutually exclusive). Forwards the string conversion to the inner iterator.
     * This converts the inner iterator to a string only once, regardless of whether it is needed or not.
     */
    public const TOSTRING_USE_INNER = 8;

    /**
     * Ignore exceptions thrown in accessing children. Only used with {@see RecursiveCachingIterator}.
     */
    public const CATCH_GET_CHILD = 16;

    /**
     * Cache all read data. This is needed to use {@see CachingIterator::getCache}, and ArrayAccess and Countable methods.
     */
    public const FULL_CACHE = 256;

    /**
     * Constructs a new CachingIterator.
     * @link https://php.net/manual/en/cachingiterator.construct.php
     * @param Iterator $iterator The iterator to cache.
     * @param int $flags [optional] A bitmask of flags. See CachingIterator class constants for details.
     */
    public function __construct(Iterator $iterator, #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags = self::CALL_TOSTRING) {}

/**
*<div id="cachingiterator.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">CachingIterator::rewind</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CachingIterator::rewind</span> &mdash; <span class="dc-title">Rewind the iterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-cachingiterator.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CachingIterator::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>  <p class="para">   Rewind the iterator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-cachingiterator.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-cachingiterator.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function rewind(): void {}

/**
*<div id="cachingiterator.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">CachingIterator::valid</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CachingIterator::valid</span> &mdash; <span class="dc-title">Check whether the current element is valid</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-cachingiterator.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CachingIterator::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>  <p class="para">   Check whether the current element is valid.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-cachingiterator.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-cachingiterator.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool true on success or false on failure.*/
    public function valid(): bool {}

/**
*<div id="cachingiterator.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">CachingIterator::key</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CachingIterator::key</span> &mdash; <span class="dc-title">Return the key for the current element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-cachingiterator.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CachingIterator::key</strong></span>(): <span class="type" style="color:#EAB766"><span class="type scalar" style="color:#EAB766">scalar</span></span></div>    <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>    <p class="para">   This method may return a key for the current element.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-cachingiterator.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div></div>
     * @return mixed The key of the current element.*/
    public function key(): mixed {}

/**
*<div id="cachingiterator.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">CachingIterator::current</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CachingIterator::current</span> &mdash; <span class="dc-title">Return the current element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-cachingiterator.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CachingIterator::current</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>    <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>    <p class="para">   May return the current element in the iteration.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-cachingiterator.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-cachingiterator.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Mixed  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-cachingiterator.current-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Iterator::current()} - 返回当前元素</span></li>   </ul>  </span> </div></div>
     * @return mixed*/
    public function current(): mixed {}

/**
*<div id="cachingiterator.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">CachingIterator::next</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CachingIterator::next</span> &mdash; <span class="dc-title">Move the iterator forward</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-cachingiterator.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CachingIterator::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>  <p class="para">   Move the iterator forward.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-cachingiterator.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-cachingiterator.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function next(): void {}

/**
*<div id="cachingiterator.hasnext" class="refentry"> <div class="refnamediv">  <h1 class="refname">CachingIterator::hasNext</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CachingIterator::hasNext</span> &mdash; <span class="dc-title">Check whether the inner iterator has a valid next element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-cachingiterator.hasnext-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CachingIterator::hasNext</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-cachingiterator.hasnext-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-cachingiterator.hasnext-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return bool true on success or false on failure.*/
    public function hasNext(): bool {}

    /**
     * Return the string representation of the current iteration based on the flag being used.
     * @link https://php.net/manual/en/cachingiterator.tostring.php
     * @return string The string representation of the current iteration based on the flag being used.
     */
    #[TentativeType]
    public function __toString(): string {}

    /**
     * Returns the inner iterator
     * @link https://php.net/manual/en/cachingiterator.getinneriterator.php
     * @return Iterator an object implementing the Iterator interface.
     */
    public function getInnerIterator(): Iterator {}

/**
*<div id="cachingiterator.getflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">CachingIterator::getFlags</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CachingIterator::getFlags</span> &mdash; <span class="dc-title">Get flags used</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-cachingiterator.getflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CachingIterator::getFlags</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>    <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>    <p class="para">   Get the bitmask of the flags used for this CachingIterator instance.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-cachingiterator.getflags-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-cachingiterator.getflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Description...  </p> </div></div>
     * @return int Bitmask of the flags*/
    public function getFlags(): int {}

/**
*<div id="cachingiterator.setflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">CachingIterator::setFlags</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CachingIterator::setFlags</span> &mdash; <span class="dc-title">The setFlags purpose</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-cachingiterator.setflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CachingIterator::setFlags</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>    <p class="para">   Set the flags for the CachingIterator object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-cachingiterator.setflags-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       Bitmask of the flags to set.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-cachingiterator.setflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function setFlags(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags): void {}

/**
*<div id="cachingiterator.offsetget" class="refentry"> <div class="refnamediv">  <h1 class="refname">CachingIterator::offsetGet</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CachingIterator::offsetGet</span> &mdash; <span class="dc-title">The offsetGet purpose</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-cachingiterator.offsetget-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CachingIterator::offsetGet</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>    <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-cachingiterator.offsetget-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       Description...      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-cachingiterator.offsetget-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Description...  </p> </div></div>
     * @return mixed*/
    public function offsetGet($key): mixed {}

/**
*<div id="cachingiterator.offsetset" class="refentry"> <div class="refnamediv">  <h1 class="refname">CachingIterator::offsetSet</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CachingIterator::offsetSet</span> &mdash; <span class="dc-title">The offsetSet purpose</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-cachingiterator.offsetset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CachingIterator::offsetSet</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-cachingiterator.offsetset-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       The index of the element to be set.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The new value for the <span class="parameter" style="color:#3A95FF">key</span>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-cachingiterator.offsetset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function offsetSet($key, #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value): void {}

/**
*<div id="cachingiterator.offsetunset" class="refentry"> <div class="refnamediv">  <h1 class="refname">CachingIterator::offsetUnset</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CachingIterator::offsetUnset</span> &mdash; <span class="dc-title">The offsetUnset purpose</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-cachingiterator.offsetunset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CachingIterator::offsetUnset</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-cachingiterator.offsetunset-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       The index of the element to be unset.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-cachingiterator.offsetunset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function offsetUnset($key): void {}

/**
*<div id="cachingiterator.offsetexists" class="refentry"> <div class="refnamediv">  <h1 class="refname">CachingIterator::offsetExists</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CachingIterator::offsetExists</span> &mdash; <span class="dc-title">The offsetExists purpose</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-cachingiterator.offsetexists-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CachingIterator::offsetExists</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766">bool</span></div>    <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>   </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-cachingiterator.offsetexists-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       The index being checked.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-cachingiterator.offsetexists-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if an entry referenced by the offset exists, <strong><span>false</span></strong> otherwise.  </p> </div></div>
     * @return bool true if an entry referenced by the offset exists, false otherwise.*/
    public function offsetExists($key): bool {}

/**
*<div id="cachingiterator.getcache" class="refentry"> <div class="refnamediv">  <h1 class="refname">CachingIterator::getCache</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CachingIterator::getCache</span> &mdash; <span class="dc-title">Retrieve the contents of the cache</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-cachingiterator.getcache-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CachingIterator::getCache</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Retrieve the contents of the cache.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    The <strong><span>CachingIterator::FULL_CACHE</span></strong> flag    must be being used.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-cachingiterator.getcache-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-cachingiterator.getcache-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   An <span class="type" style="color:#EAB766">array</span> containing the cache items.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-cachingiterator.getcache-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.badmethodcallexception.php" class="classname">BadMethodCallException</a></span> when the   <strong><span>CachingIterator::FULL_CACHE</span></strong> flag is not being used.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-cachingiterator.getcache-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>CachingIterator::getCache()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(array(</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$cache    </span><span style="color: #007700">= new </span><span style="color: #9876AA">CachingIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">, </span><span style="color: #9876AA">CachingIterator</span><span style="color: #007700">::</span><span style="color: #9876AA">FULL_CACHE</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$cache</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$cache</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$cache</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getCache</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$cache</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$cache</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getCache</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(2) {<br>  [0]=&gt;<br>  int(1)<br>  [1]=&gt;<br>  int(2)<br>}<br>array(3) {<br>  [0]=&gt;<br>  int(1)<br>  [1]=&gt;<br>  int(2)<br>  [2]=&gt;<br>  int(3)<br>}<br></span></div>    </div>   </div>  </span> </div></div>
     * @return array An array containing the cache items.*/
    public function getCache(): array {}

/**
*<div id="cachingiterator.count" class="refentry"> <div class="refnamediv">  <h1 class="refname">CachingIterator::count</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">CachingIterator::count</span> &mdash; <span class="dc-title">The number of elements in the iterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-cachingiterator.count-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>CachingIterator::count</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>    <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>    <p class="para">   May return the number of elements in the iterator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-cachingiterator.count-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-cachingiterator.count-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The count of the elements iterated over.  </p> </div></div>
     * @return int The count of the elements iterated over.*/
    public function count(): int {}
}

/**
*<div id="class.recursivecachingiterator" class="reference"> <h1 class="title">The RecursiveCachingIterator class</h1>   <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>   <div class="section" id="recursivecachingiterator.intro">   <h2 class="title">简介</h2>   <p class="para">    ...   </p>  </div>   <div class="section" id="recursivecachingiterator.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">RecursiveCachingIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.cachingiterator.php" class="classname">CachingIterator</a>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="interfacename">RecursiveIterator</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">CachingIterator::CALL_TOSTRING</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">CachingIterator::CATCH_GET_CHILD</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">CachingIterator::TOSTRING_USE_KEY</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">CachingIterator::TOSTRING_USE_CURRENT</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">CachingIterator::TOSTRING_USE_INNER</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">CachingIterator::FULL_CACHE</var>}</var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivecachingiterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = RecursiveCachingIterator::CALL_TOSTRING</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivecachingiterator.getchildren.php" class="methodname" style="color:#CC7832">getChildren</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursivecachingiterator.php" class="type RecursiveCachingIterator" style="color:#EAB766">RecursiveCachingIterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivecachingiterator.haschildren.php" class="methodname" style="color:#CC7832">hasChildren</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link CachingIterator::count}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link CachingIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link CachingIterator::getCache}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link CachingIterator::getFlags}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link CachingIterator::hasNext}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link CachingIterator::key}</span>(): <span class="type" style="color:#EAB766"><span class="type scalar" style="color:#EAB766">scalar</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link CachingIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link CachingIterator::offsetExists}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link CachingIterator::offsetGet}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link CachingIterator::offsetSet}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link CachingIterator::offsetUnset}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link CachingIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link CachingIterator::setFlags}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link CachingIterator::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link CachingIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::getInnerIterator}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>   </div>   </div>   <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link RecursiveCachingIterator::__construct} — Construct</li><li>{@link RecursiveCachingIterator::getChildren} — Return the inner iterator's children as a RecursiveCachingIterator</li><li>{@link RecursiveCachingIterator::hasChildren} — Check whether the current element of the inner iterator has children</li></ul></div>
*/
class RecursiveCachingIterator extends CachingIterator implements RecursiveIterator
{
    /**
     * Constructs a new RecursiveCachingIterator.
     * @link https://php.net/manual/en/recursivecachingiterator.construct.php
     * @param Iterator $iterator The iterator to cache.
     * @param int $flags [optional] A bitmask of flags. See CachingIterator class constants for details.
     */
    public function __construct(Iterator $iterator, #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags = CachingIterator::CALL_TOSTRING) {}

/**
*<div id="recursivecachingiterator.haschildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveCachingIterator::hasChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveCachingIterator::hasChildren</span> &mdash; <span class="dc-title">Check whether the current element of the inner iterator has children</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivecachingiterator.haschildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveCachingIterator::hasChildren</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivecachingiterator.haschildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivecachingiterator.haschildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the inner iterator has children, otherwise <strong><span>false</span></strong>  </p> </div></div>
     * @return bool true if the inner iterator has children, otherwise false*/
    public function hasChildren(): bool {}

/**
*<div id="recursivecachingiterator.getchildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveCachingIterator::getChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveCachingIterator::getChildren</span> &mdash; <span class="dc-title">Return the inner iterator&#039;s children as a RecursiveCachingIterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivecachingiterator.getchildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveCachingIterator::getChildren</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursivecachingiterator.php" class="type RecursiveCachingIterator" style="color:#EAB766">RecursiveCachingIterator</a></span></span></div>   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivecachingiterator.getchildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivecachingiterator.getchildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The inner iterator&#039;s children, as a RecursiveCachingIterator; or <strong><span>null</span></strong> if there is no children.  </p> </div></div>
     * @return RecursiveCachingIterator|null The inner iterator's children, as a RecursiveCachingIterator.*/
    public function getChildren(): ?RecursiveCachingIterator {}
}

/**
*<div id="class.norewinditerator" class="reference"> <h1 class="title">The NoRewindIterator class</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>  <div class="section" id="norewinditerator.intro">   <h2 class="title">简介</h2>   <p class="para">    This iterator ignores rewind operations. This allows processing an iterator in multiple partial foreach loops.   </p>  </div>  <div class="section" id="norewinditerator.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">NoRewindIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.iteratoriterator.php" class="classname">IteratorIterator</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/norewinditerator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/norewinditerator.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/norewinditerator.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/norewinditerator.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/norewinditerator.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/norewinditerator.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::getInnerIterator}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link NoRewindIterator::__construct} — Construct a NoRewindIterator</li><li>{@link NoRewindIterator::current} — Get the current value</li><li>{@link NoRewindIterator::key} — Get the current key</li><li>{@link NoRewindIterator::next} — Forward to the next element</li><li>{@link NoRewindIterator::rewind} — Prevents the rewind operation on the inner iterator</li><li>{@link NoRewindIterator::valid} — Validates the iterator</li></ul></div>
*/
class NoRewindIterator extends IteratorIterator
{
    /**
     * Construct a NoRewindIterator
     * @link https://php.net/manual/en/norewinditerator.construct.php
     * @param Iterator $iterator
     */
    public function __construct(Iterator $iterator) {}

/**
*<div id="norewinditerator.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">NoRewindIterator::rewind</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">NoRewindIterator::rewind</span> &mdash; <span class="dc-title">Prevents the rewind operation on the inner iterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-norewinditerator.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>NoRewindIterator::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Prevents the rewind operation on the inner iterator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-norewinditerator.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-norewinditerator.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-norewinditerator.rewind-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">NoRewindIterator::rewind()</strong></span> example</strong></p>    <div class="example-contents"><p>     This example demonstrates that calling rewind on a NoRewindIterator object has no effect.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"lemon"</span><span style="color: #007700">, </span><span style="color: #DD0000">"orange"</span><span style="color: #007700">, </span><span style="color: #DD0000">"apple"</span><span style="color: #007700">, </span><span style="color: #DD0000">"pear"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$noRewindIterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">NoRewindIterator</span><span style="color: #007700">(new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">));<br /><br />echo </span><span style="color: #9876AA">$noRewindIterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$noRewindIterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br /></span><span style="color: #FF8000">// now rewind the iterator (nothing should happen)<br /></span><span style="color: #9876AA">$noRewindIterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">();<br />echo </span><span style="color: #9876AA">$noRewindIterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>lemon<br>orange<br></span></div>    </div>   </div>  </span> </div></div>
     * @return void*/
    public function rewind(): void {}

/**
*<div id="norewinditerator.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">NoRewindIterator::valid</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">NoRewindIterator::valid</span> &mdash; <span class="dc-title">Validates the iterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-norewinditerator.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>NoRewindIterator::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks whether the iterator is valid.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-norewinditerator.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-norewinditerator.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-norewinditerator.valid-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832"><strong>NoRewindIterator::getInnerIterator()</strong></span></li>   </ul>  </span> </div></div>
     * @return bool true on success or false on failure.*/
    public function valid(): bool {}

/**
*<div id="norewinditerator.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">NoRewindIterator::key</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">NoRewindIterator::key</span> &mdash; <span class="dc-title">Get the current key</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-norewinditerator.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>NoRewindIterator::key</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Gets the current key.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-norewinditerator.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-norewinditerator.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current key.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-norewinditerator.key-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link NoRewindIterator::next()} - Forward to the next element</span></li>   </ul>  </span> </div></div>
     * @return mixed The key of the current element.*/
    public function key(): mixed {}

/**
*<div id="norewinditerator.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">NoRewindIterator::current</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">NoRewindIterator::current</span> &mdash; <span class="dc-title">Get the current value</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-norewinditerator.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>NoRewindIterator::current</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Gets the current value.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-norewinditerator.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-norewinditerator.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current value.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-norewinditerator.current-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link NoRewindIterator::key()} - Get the current key</span></li>   </ul>  </span> </div></div>
     * @return mixed The current value.*/
    public function current(): mixed {}

/**
*<div id="norewinditerator.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">NoRewindIterator::next</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">NoRewindIterator::next</span> &mdash; <span class="dc-title">Forward to the next element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-norewinditerator.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>NoRewindIterator::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Forwards to the next element.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-norewinditerator.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-norewinditerator.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-norewinditerator.next-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link NoRewindIterator::rewind()} - Prevents the rewind operation on the inner iterator</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function next(): void {}

    /**
     * Get the inner iterator
     * @link https://php.net/manual/en/norewinditerator.getinneriterator.php
     * @return Iterator The inner iterator, as passed to <b>NoRewindIterator::__construct</b>.
     */
    public function getInnerIterator(): Iterator {}
}

/**
*<div id="class.appenditerator" class="reference"> <h1 class="title">AppendIterator 类</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>  <div class="section" id="appenditerator.intro">   <h2 class="title">简介</h2>   <p class="para">    这个迭代器能陆续遍历几个迭代器。   </p>  </div>  <div class="section" id="appenditerator.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">AppendIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.iteratoriterator.php" class="classname">IteratorIterator</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/appenditerator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>()</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/appenditerator.append.php" class="methodname" style="color:#CC7832">append</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/appenditerator.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/appenditerator.getarrayiterator.php" class="methodname" style="color:#CC7832">getArrayIterator</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.arrayiterator.php" class="type ArrayIterator" style="color:#EAB766">ArrayIterator</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/appenditerator.getiteratorindex.php" class="methodname" style="color:#CC7832">getIteratorIndex</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">int</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/appenditerator.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766"><span class="type scalar" style="color:#EAB766">scalar</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/appenditerator.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/appenditerator.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/appenditerator.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::getInnerIterator}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link AppendIterator::append} — Appends an iterator</li><li>{@link AppendIterator::__construct} — Constructs an AppendIterator</li><li>{@link AppendIterator::current} — Gets the current value</li><li>{@link AppendIterator::getArrayIterator} — Gets the ArrayIterator</li><li>{@link AppendIterator::getIteratorIndex} — Gets an index of iterators</li><li>{@link AppendIterator::key} — Gets the current key</li><li>{@link AppendIterator::next} — Moves to the next element</li><li>{@link AppendIterator::rewind} — Rewinds the Iterator</li><li>{@link AppendIterator::valid} — Checks validity of the current element</li></ul></div>
*/
class AppendIterator extends IteratorIterator
{
    /**
     * Constructs an AppendIterator
     * @link https://php.net/manual/en/appenditerator.construct.php
     */
    public function __construct() {}

/**
*<div id="appenditerator.append" class="refentry"> <div class="refnamediv">  <h1 class="refname">AppendIterator::append</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">AppendIterator::append</span> &mdash; <span class="dc-title">Appends an iterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-appenditerator.append-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>AppendIterator::append</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Appends an iterator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-appenditerator.append-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">iterator</span></dt>     <dd>      <p class="para">       The iterator to append.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-appenditerator.append-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-appenditerator.append-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>AppendIterator::append()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array_a </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'a'</span><span style="color: #007700">, </span><span style="color: #DD0000">'b'</span><span style="color: #007700">, </span><span style="color: #DD0000">'c'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$array_b </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'d'</span><span style="color: #007700">, </span><span style="color: #DD0000">'e'</span><span style="color: #007700">, </span><span style="color: #DD0000">'f'</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">AppendIterator</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">append</span><span style="color: #007700">(</span><span style="color: #9876AA">$array_a</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">append</span><span style="color: #007700">(</span><span style="color: #9876AA">$array_b</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$iterator </span><span style="color: #007700">as </span><span style="color: #9876AA">$current</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$current</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>abcdef<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-appenditerator.append-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::__construct()} - Constructs an AppendIterator</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function append(Iterator $iterator): void {}

/**
*<div id="appenditerator.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">AppendIterator::rewind</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">AppendIterator::rewind</span> &mdash; <span class="dc-title">Rewinds the Iterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-appenditerator.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>AppendIterator::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Rewind to the first element of the first inner Iterator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-appenditerator.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-appenditerator.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-appenditerator.rewind-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Iterator::rewind()} - 返回到迭代器的第一个元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::current()} - Gets the current value</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::key()} - Gets the current key</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::next()} - Moves to the next element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::valid()} - Checks validity of the current element</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function rewind(): void {}

/**
*<div id="appenditerator.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">AppendIterator::valid</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">AppendIterator::valid</span> &mdash; <span class="dc-title">Checks validity of the current element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-appenditerator.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>AppendIterator::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks validity of the current element.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-appenditerator.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-appenditerator.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the current iteration is valid, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-appenditerator.valid-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::current()} - Gets the current value</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::key()} - Gets the current key</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::next()} - Moves to the next element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::rewind()} - Rewinds the Iterator</span></li>   </ul>  </span> </div></div>
     * @return bool true on success or false on failure.*/
    public function valid(): bool {}

/**
*<div id="appenditerator.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">AppendIterator::key</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">AppendIterator::key</span> &mdash; <span class="dc-title">Gets the current key</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-appenditerator.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>AppendIterator::key</strong></span>(): <span class="type" style="color:#EAB766"><span class="type scalar" style="color:#EAB766">scalar</span></span></div>  <p class="para rdfs-comment">   Get the current key.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-appenditerator.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-appenditerator.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current key if it is valid or <strong><span>null</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-appenditerator.key-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>AppendIterator::key()</strong></span> basic example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array_a </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'a' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'aardwolf'</span><span style="color: #007700">, </span><span style="color: #DD0000">'b' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'bear'</span><span style="color: #007700">, </span><span style="color: #DD0000">'c' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'capybara'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$array_b </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">, </span><span style="color: #DD0000">'orange'</span><span style="color: #007700">, </span><span style="color: #DD0000">'lemon'</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">AppendIterator</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">append</span><span style="color: #007700">(</span><span style="color: #9876AA">$array_a</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">append</span><span style="color: #007700">(</span><span style="color: #9876AA">$array_b</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Manual iteration<br /></span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">();<br />while (</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()) {<br />    echo </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">() . </span><span style="color: #DD0000">' ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">() . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />}<br /><br />echo </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// With foreach<br /></span><span style="color: #007700">foreach (</span><span style="color: #9876AA">$iterator </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$current</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$key </span><span style="color: #007700">. </span><span style="color: #DD0000">' ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$current </span><span style="color: #007700">. </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>a aardwolf<br>b bear<br>c capybara<br>0 apple<br>1 orange<br>2 lemon<br><br>a aardwolf<br>b bear<br>c capybara<br>0 apple<br>1 orange<br>2 lemon<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-appenditerator.key-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Iterator::key()} - 返回当前元素的键</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::current()} - Gets the current value</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::valid()} - Checks validity of the current element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::next()} - Moves to the next element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::rewind()} - Rewinds the Iterator</span></li>   </ul>  </span> </div></div>
     * @return mixed The key of the current element.*/
    public function key(): mixed {}

/**
*<div id="appenditerator.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">AppendIterator::current</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">AppendIterator::current</span> &mdash; <span class="dc-title">Gets the current value</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-appenditerator.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>AppendIterator::current</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Gets the current value.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-appenditerator.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-appenditerator.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current value if it is valid or <strong><span>null</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-appenditerator.current-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Iterator::current()} - 返回当前元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::key()} - Gets the current key</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::valid()} - Checks validity of the current element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::next()} - Moves to the next element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::rewind()} - Rewinds the Iterator</span></li>   </ul>  </span> </div></div>
     * @return mixed The current value if it is valid or null otherwise.*/
    public function current(): mixed {}

/**
*<div id="appenditerator.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">AppendIterator::next</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">AppendIterator::next</span> &mdash; <span class="dc-title">Moves to the next element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-appenditerator.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>AppendIterator::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Moves to the next element. If this means to another Iterator   then it rewinds that Iterator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-appenditerator.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-appenditerator.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-appenditerator.next-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link Iterator::next()} - 向前移动到下一个元素</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::current()} - Gets the current value</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::key()} - Gets the current key</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::valid()} - Checks validity of the current element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::rewind()} - Rewinds the Iterator</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function next(): void {}

    /**
     * Gets an inner iterator
     * @link https://php.net/manual/en/appenditerator.getinneriterator.php
     * @return Iterator the current inner Iterator.
     */
    public function getInnerIterator(): Iterator {}

/**
*<div id="appenditerator.getiteratorindex" class="refentry"> <div class="refnamediv">  <h1 class="refname">AppendIterator::getIteratorIndex</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">AppendIterator::getIteratorIndex</span> &mdash; <span class="dc-title">Gets an index of iterators</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-appenditerator.getiteratorindex-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>AppendIterator::getIteratorIndex</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766">int</span></span></div>  <p class="para rdfs-comment">   Gets the index of the current inner iterator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-appenditerator.getiteratorindex-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-appenditerator.getiteratorindex-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the zero-based, integer index of the current inner iterator if it exists, or <strong><span>null</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-appenditerator.getiteratorindex-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>AppendIterator.getIteratorIndex()</strong></span> basic example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array_a </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'a' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'aardwolf'</span><span style="color: #007700">, </span><span style="color: #DD0000">'b' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'bear'</span><span style="color: #007700">, </span><span style="color: #DD0000">'c' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'capybara'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$array_b </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">, </span><span style="color: #DD0000">'orange'</span><span style="color: #007700">, </span><span style="color: #DD0000">'lemon'</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">AppendIterator</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">append</span><span style="color: #007700">(</span><span style="color: #9876AA">$array_a</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">append</span><span style="color: #007700">(</span><span style="color: #9876AA">$array_b</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$iterator </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$current</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getIteratorIndex</span><span style="color: #007700">() . </span><span style="color: #DD0000">'  ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$key </span><span style="color: #007700">. </span><span style="color: #DD0000">' ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$current </span><span style="color: #007700">. </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>0  a aardwolf<br>0  b bear<br>0  c capybara<br>1  0 apple<br>1  1 orange<br>1  2 lemon<br><br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-appenditerator.getiteratorindex-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832"><strong>AppendIterator::getInnerIterator()</strong></span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link AppendIterator::getArrayIterator()} - Gets the ArrayIterator</span></li>   </ul>  </span> </div></div>
     * @return int|null The index of iterators.*/
    public function getIteratorIndex(): ?int {}

/**
*<div id="appenditerator.getarrayiterator" class="refentry"> <div class="refnamediv">  <h1 class="refname">AppendIterator::getArrayIterator</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">AppendIterator::getArrayIterator</span> &mdash; <span class="dc-title">Gets the ArrayIterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-appenditerator.getarrayiterator-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>AppendIterator::getArrayIterator</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.arrayiterator.php" class="type ArrayIterator" style="color:#EAB766">ArrayIterator</a></span></div>  <p class="para rdfs-comment">   This method gets the <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayiterator.php" class="classname">ArrayIterator</a></span> that is used to    store the iterators added with <span class="methodname" style="color:#CC7832">{@link AppendIterator::append()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-appenditerator.getarrayiterator-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-appenditerator.getarrayiterator-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayiterator.php" class="classname">ArrayIterator</a></span> containing   the appended iterators.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-appenditerator.getarrayiterator-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832"><strong>AppendIterator::getInnerIterator()</strong></span></li>   </ul>  </span> </div></div>
     * @return ArrayIterator containing the appended iterators.*/
    public function getArrayIterator(): ArrayIterator {}
}

/**
*<div id="class.infiniteiterator" class="reference"> <h1 class="title">The InfiniteIterator class</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>  <div class="section" id="infiniteiterator.intro">   <h2 class="title">简介</h2>   <p class="para">    The <span class="classname"><strong class="classname">InfiniteIterator</strong></span> allows one to    infinitely iterate over an iterator without having to manually    rewind the iterator upon reaching its end.   </p>  </div>  <div class="section" id="infiniteiterator.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">InfiniteIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.iteratoriterator.php" class="classname">IteratorIterator</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/infiniteiterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/infiniteiterator.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::getInnerIterator}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link InfiniteIterator::__construct} — Constructs an InfiniteIterator</li><li>{@link InfiniteIterator::next} — Moves the inner Iterator forward or rewinds it</li></ul></div>
*/
class InfiniteIterator extends IteratorIterator
{
    /**
     * Constructs an InfiniteIterator
     * @link https://php.net/manual/en/infiniteiterator.construct.php
     * @param Iterator $iterator
     */
    public function __construct(Iterator $iterator) {}

/**
*<div id="infiniteiterator.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">InfiniteIterator::next</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">InfiniteIterator::next</span> &mdash; <span class="dc-title">Moves the inner Iterator forward or rewinds it</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-infiniteiterator.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>InfiniteIterator::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Moves the inner <span class="classname"><a href="https://www.php.net/manual/zh/class.iterator.php" class="classname">Iterator</a></span> forward to its next element if there is one,   otherwise rewinds the inner <span class="classname"><a href="https://www.php.net/manual/zh/class.iterator.php" class="classname">Iterator</a></span> back to the beginning.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    Even an <span class="classname"><a href="https://www.php.net/manual/zh/class.infiniteiterator.php" class="classname">InfiniteIterator</a></span> stops if     its inner <span class="classname"><a href="https://www.php.net/manual/zh/class.iterator.php" class="classname">Iterator</a></span> is empty.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-infiniteiterator.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-infiniteiterator.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-infiniteiterator.next-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link InfiniteIterator::__construct()} - Constructs an InfiniteIterator</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function next(): void {}
}

/**
*<div id="class.regexiterator" class="reference"> <h1 class="title">The RegexIterator class</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p>  <div class="section" id="regexiterator.intro">   <h2 class="title">简介</h2>   <p class="para">    This iterator can be used to filter another iterator based on a regular expression.   </p>  </div>  <div class="section" id="regexiterator.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">RegexIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.filteriterator.php" class="classname">FilterIterator</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.regexiterator.php#regexiterator.constants.use-key"><var class="varname">USE_KEY</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.regexiterator.php#regexiterator.constants.invert-match"><var class="varname">INVERT_MATCH</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.regexiterator.php#regexiterator.constants.match"><var class="varname">MATCH</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.regexiterator.php#regexiterator.constants.get-match"><var class="varname">GET_MATCH</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.regexiterator.php#regexiterator.constants.all-matches"><var class="varname">ALL_MATCHES</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.regexiterator.php#regexiterator.constants.split"><var class="varname">SPLIT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.regexiterator.php#regexiterator.constants.replace"><var class="varname">REPLACE</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.regexiterator.php#regexiterator.props.replacement">$<var class="varname">replacement</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/regexiterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$pattern</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = RegexIterator::MATCH</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$pregFlags</span><span class="initializer"> = 0</span></span><br>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/regexiterator.accept.php" class="methodname" style="color:#CC7832">accept</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/regexiterator.getflags.php" class="methodname" style="color:#CC7832">getFlags</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/regexiterator.getmode.php" class="methodname" style="color:#CC7832">getMode</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/regexiterator.getpregflags.php" class="methodname" style="color:#CC7832">getPregFlags</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/regexiterator.getregex.php" class="methodname" style="color:#CC7832">getRegex</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/regexiterator.setflags.php" class="methodname" style="color:#CC7832">setFlags</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/regexiterator.setmode.php" class="methodname" style="color:#CC7832">setMode</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/regexiterator.setpregflags.php" class="methodname" style="color:#CC7832">setPregFlags</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$pregFlags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::accept}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::getInnerIterator}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div>  <div class="section" id="regexiterator.constants">   <h2 class="title">预定义常量</h2>   <div class="section" id="regexiterator.constants.operation-modes">    <h2 class="title">RegexIterator operation modes</h2>    <dl>           <dt id="regexiterator.constants.all-matches"><strong><span>RegexIterator::ALL_MATCHES</span></strong></dt>      <dd>       <p class="para">        Return all matches for the current entry         (see <span class="function">{@link preg_match_all()}</span>).       </p>      </dd>                <dt id="regexiterator.constants.get-match"><strong><span>RegexIterator::GET_MATCH</span></strong></dt>      <dd>       <p class="para">        Return the first match for the current entry         (see <span class="function">{@link preg_match()}</span>).       </p>      </dd>                <dt id="regexiterator.constants.match"><strong><span>RegexIterator::MATCH</span></strong></dt>      <dd>       <p class="para">        Only execute match (filter) for the current entry         (see <span class="function">{@link preg_match()}</span>).       </p>      </dd>                <dt id="regexiterator.constants.replace"><strong><span>RegexIterator::REPLACE</span></strong></dt>      <dd>       <p class="para">        Replace the current entry         (see <span class="function">{@link preg_replace()}</span>; Not fully implemented yet)       </p>      </dd>                <dt id="regexiterator.constants.split"><strong><span>RegexIterator::SPLIT</span></strong></dt>      <dd>       <p class="para">        Returns the split values for the current entry (see <span class="function">{@link preg_split()}</span>).       </p>      </dd>         </dl>   </div>   <div class="section" id="regexiterator.constants.flags">    <h2 class="title">RegexIterator Flags</h2>    <dl>           <dt id="regexiterator.constants.use-key"><strong><span>RegexIterator::USE_KEY</span></strong></dt>      <dd>       <p class="para">        Special flag: Match the entry key instead of the entry value.       </p>      </dd>                <dt id="regexiterator.constants.invert-match"><strong><span>RegexIterator::INVERT_MATCH</span></strong></dt>      <dd>       <p class="para">        Inverts the return value of <span class="methodname" style="color:#CC7832">{@link RegexIterator::accept()}</span>.       </p>      </dd>         </dl>   </div>  </div>  <div class="section" id="regexiterator.props">   <h2 class="title">属性</h2>   <dl>         <dt id="regexiterator.props.replacement">      <var class="varname">replacement</var>     </dt>     <dd>      <p class="para"/>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link RegexIterator::accept} — Get accept status</li><li>{@link RegexIterator::__construct} — Create a new RegexIterator</li><li>{@link RegexIterator::getFlags} — Get flags</li><li>{@link RegexIterator::getMode} — Returns operation mode</li><li>{@link RegexIterator::getPregFlags} — Returns the regular expression flags</li><li>{@link RegexIterator::getRegex} — Returns current regular expression</li><li>{@link RegexIterator::setFlags} — Sets the flags</li><li>{@link RegexIterator::setMode} — Sets the operation mode</li><li>{@link RegexIterator::setPregFlags} — Sets the regular expression flags</li></ul></div>
*/
class RegexIterator extends FilterIterator
{
    /**
     * Return all matches for the current entry @see preg_match_all
     */
    public const ALL_MATCHES = 2;

    /**
     * Return the first match for the current entry @see preg_match
     */
    public const GET_MATCH = 1;

    /**
     * Only execute match (filter) for the current entry @see preg_match
     */
    public const MATCH = 0;

    /**
     * Replace the current entry (Not fully implemented yet) @see preg_replace
     */
    public const REPLACE = 4;

    /**
     * Returns the split values for the current entry @see preg_split
     */
    public const SPLIT = 3;

    /**
     * Special flag: Match the entry key instead of the entry value.
     */
    public const USE_KEY = 1;
    public const INVERT_MATCH = 2;

    #[LanguageLevelTypeAware(['8.1' => 'string|null'], default: '')]
    public $replacement;

    /**
     * Create a new RegexIterator
     * @link https://php.net/manual/en/regexiterator.construct.php
     * @param Iterator $iterator The iterator to apply this regex filter to.
     * @param string $pattern The regular expression to match.
     * @param int $mode [optional] Operation mode, see RegexIterator::setMode() for a list of modes.
     * @param int $flags [optional] Special flags, see RegexIterator::setFlags() for a list of available flags.
     * @param int $pregFlags [optional] The regular expression flags. These flags depend on the operation mode parameter
     */
    public function __construct(
        Iterator $iterator,
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $pattern,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $mode = self::MATCH,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags = 0,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $pregFlags = 0
    ) {}

/**
*<div id="regexiterator.accept" class="refentry"> <div class="refnamediv">  <h1 class="refname">RegexIterator::accept</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RegexIterator::accept</span> &mdash; <span class="dc-title">Get accept status</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-regexiterator.accept-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RegexIterator::accept</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Matches <span>(string)</span> <span class="methodname" style="color:#CC7832"><strong>RegexIterator::current()</strong></span>   (or <span class="methodname" style="color:#CC7832"><strong>RegexIterator::key()</strong></span> if the   {@link RegexIterator::USE_KEY} flag is set)   against the regular expression.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-regexiterator.accept-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-regexiterator.accept-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if a match, <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-regexiterator.accept-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>RegexIterator::accept()</strong></span> example</strong></p>    <div class="example-contents"><p>     This example shows that only items matching the regular expression are accepted.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$names </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'Ann'</span><span style="color: #007700">, </span><span style="color: #DD0000">'Bob'</span><span style="color: #007700">, </span><span style="color: #DD0000">'Charlie'</span><span style="color: #007700">, </span><span style="color: #DD0000">'David'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$filter </span><span style="color: #007700">= new </span><span style="color: #9876AA">RegexIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$names</span><span style="color: #007700">, </span><span style="color: #DD0000">'/^[B-D]/'</span><span style="color: #007700">);<br />foreach (</span><span style="color: #9876AA">$filter </span><span style="color: #007700">as </span><span style="color: #9876AA">$name</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$name </span><span style="color: #007700">. </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Bob<br>Charlie<br>David<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-regexiterator.accept-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/class.regexiterator.php#regexiterator.constants" class="link">RegexIterator constants</a></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link RegexIterator::setFlags()} - Sets the flags</span></li>   </ul>  </span> </div></div>
     * @return bool true if a match, false otherwise.*/
    public function accept(): bool {}

/**
*<div id="regexiterator.getmode" class="refentry"> <div class="refnamediv">  <h1 class="refname">RegexIterator::getMode</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RegexIterator::getMode</span> &mdash; <span class="dc-title">Returns operation mode</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-regexiterator.getmode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RegexIterator::getMode</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Returns the operation mode, see <span class="methodname" style="color:#CC7832">{@link RegexIterator::setMode()}</span>   for the list of operation modes.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-regexiterator.getmode-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-regexiterator.getmode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the operation mode.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-regexiterator.getmode-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>RegexIterator::getMode()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$test </span><span style="color: #007700">= array (</span><span style="color: #DD0000">'str1' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'test 1'</span><span style="color: #007700">, </span><span style="color: #DD0000">'teststr2' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'another test'</span><span style="color: #007700">, </span><span style="color: #DD0000">'str3' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'test 123'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$arrayIterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$test</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$regexIterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">RegexIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayIterator</span><span style="color: #007700">, </span><span style="color: #DD0000">'/^[a-z]+/'</span><span style="color: #007700">, </span><span style="color: #9876AA">RegexIterator</span><span style="color: #007700">::</span><span style="color: #9876AA">GET_MATCH</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$mode </span><span style="color: #007700">= </span><span style="color: #9876AA">$regexIterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMode</span><span style="color: #007700">();<br />if (</span><span style="color: #9876AA">$mode </span><span style="color: #007700">&amp; </span><span style="color: #9876AA">RegexIterator</span><span style="color: #007700">::</span><span style="color: #9876AA">GET_MATCH</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Getting the match for each item.'</span><span style="color: #007700">;<br />} elseif (</span><span style="color: #9876AA">$mode </span><span style="color: #007700">&amp; </span><span style="color: #9876AA">RegexIterator</span><span style="color: #007700">::</span><span style="color: #9876AA">ALL_MATCHES</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Getting all matches for each item.'</span><span style="color: #007700">;<br />} elseif (</span><span style="color: #9876AA">$mode </span><span style="color: #007700">&amp; </span><span style="color: #9876AA">RegexIterator</span><span style="color: #007700">::MATCH) {<br />    echo </span><span style="color: #DD0000">'Getting each item if it matches.'</span><span style="color: #007700">;<br />} elseif (</span><span style="color: #9876AA">$mode </span><span style="color: #007700">&amp; </span><span style="color: #9876AA">RegexIterator</span><span style="color: #007700">::</span><span style="color: #9876AA">SPLIT</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Getting split pieces of each.'</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Getting the match for each item.<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-regexiterator.getmode-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link RegexIterator::setMode()} - Sets the operation mode</span></li>   </ul>  </span> </div></div>
     * @return int the operation mode.*/
    public function getMode(): int {}

/**
*<div id="regexiterator.setmode" class="refentry"> <div class="refnamediv">  <h1 class="refname">RegexIterator::setMode</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RegexIterator::setMode</span> &mdash; <span class="dc-title">Sets the operation mode</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-regexiterator.setmode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RegexIterator::setMode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets the operation mode.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-regexiterator.setmode-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">mode</span></dt>     <dd>      <p class="para">       The operation mode.      </p>      <p class="para">       The available modes are listed below. The actual       meanings of these modes are described in the       <a href="https://www.php.net/manual/zh/class.regexiterator.php#regexiterator.constants" class="link">predefined constants</a>.       <table class="doctable table">        <caption><strong><span class="classname"><a href="https://www.php.net/manual/zh/class.regexiterator.php" class="classname">RegexIterator</a></span> modes</strong></caption>                 <thead>          <tr>           <th>value</th>           <th>constant</th>          </tr>         </thead>         <tbody class="tbody">          <tr>           <td>0</td>           <td>            {@link RegexIterator::MATCH}           </td>          </tr>          <tr>           <td>1</td>           <td>            {@link RegexIterator::GET_MATCH}           </td>          </tr>          <tr>           <td>2</td>           <td>            {@link RegexIterator::ALL_MATCHES}           </td>          </tr>          <tr>           <td>3</td>           <td>            {@link RegexIterator::SPLIT}           </td>          </tr>          <tr>           <td>4</td>           <td>            {@link RegexIterator::REPLACE}           </td>          </tr>         </tbody>               </table>      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-regexiterator.setmode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-regexiterator.setmode-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>RegexIterator::setMode()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$test </span><span style="color: #007700">= array (</span><span style="color: #DD0000">'str1' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'test 1'</span><span style="color: #007700">, </span><span style="color: #DD0000">'test str2' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'another test'</span><span style="color: #007700">, </span><span style="color: #DD0000">'str3' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'test 123'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$arrayIterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$test</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// Filter everything that starts with 'test ' followed by one or more numbers.<br /></span><span style="color: #9876AA">$regexIterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">RegexIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayIterator</span><span style="color: #007700">, </span><span style="color: #DD0000">'/^test (\d+)/'</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// Operation mode: Replace actual value with the matches<br /></span><span style="color: #9876AA">$regexIterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setMode</span><span style="color: #007700">(</span><span style="color: #9876AA">RegexIterator</span><span style="color: #007700">::</span><span style="color: #9876AA">GET_MATCH</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$regexIterator </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$value</span><span style="color: #007700">) {<br />    </span><span style="color: #FF8000">// print out the matched number(s)<br />    </span><span style="color: #007700">echo </span><span style="color: #9876AA">$key </span><span style="color: #007700">. </span><span style="color: #DD0000">' =&gt; ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$value</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">] . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>str1 =&gt; 1<br>str3 =&gt; 123<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-regexiterator.setmode-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link RegexIterator::getMode()} - Returns operation mode</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function setMode(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $mode): void {}

/**
*<div id="regexiterator.getflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">RegexIterator::getFlags</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RegexIterator::getFlags</span> &mdash; <span class="dc-title">Get flags</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-regexiterator.getflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RegexIterator::getFlags</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Returns the flags, see <span class="methodname" style="color:#CC7832">{@link RegexIterator::setFlags()}</span>   for a list of available flags.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-regexiterator.getflags-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-regexiterator.getflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the set flags.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-regexiterator.getflags-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>RegexIterator::getFlags()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$test </span><span style="color: #007700">= array (</span><span style="color: #DD0000">'str1' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'test 1'</span><span style="color: #007700">, </span><span style="color: #DD0000">'teststr2' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'another test'</span><span style="color: #007700">, </span><span style="color: #DD0000">'str3' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'test 123'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$arrayIterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$test</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$regexIterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">RegexIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayIterator</span><span style="color: #007700">, </span><span style="color: #DD0000">'/^test/'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$regexIterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setFlags</span><span style="color: #007700">(</span><span style="color: #9876AA">RegexIterator</span><span style="color: #007700">::</span><span style="color: #9876AA">USE_KEY</span><span style="color: #007700">);<br /><br />if (</span><span style="color: #9876AA">$regexIterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFlags</span><span style="color: #007700">() &amp; </span><span style="color: #9876AA">RegexIterator</span><span style="color: #007700">::</span><span style="color: #9876AA">USE_KEY</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Filtering based on the array keys.'</span><span style="color: #007700">;<br />} else {<br />    echo </span><span style="color: #DD0000">'Filtering based on the array values.'</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Filtering based on the array keys.<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-regexiterator.getflags-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link RegexIterator::setFlags()} - Sets the flags</span></li>   </ul>  </span> </div></div>
     * @return int the set flags.*/
    public function getFlags(): int {}

/**
*<div id="regexiterator.setflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">RegexIterator::setFlags</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RegexIterator::setFlags</span> &mdash; <span class="dc-title">Sets the flags</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-regexiterator.setflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RegexIterator::setFlags</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets the flags.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-regexiterator.setflags-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       The flags to set, a bitmask of class constants.      </p>      <p class="para">       The available flags are listed below. The actual       meanings of these flags are described in the       <a href="https://www.php.net/manual/zh/class.regexiterator.php#regexiterator.constants" class="link">predefined constants</a>.       <table class="doctable table">        <caption><strong><span class="classname"><a href="https://www.php.net/manual/zh/class.regexiterator.php" class="classname">RegexIterator</a></span> flags</strong></caption>                 <thead>          <tr>           <th>value</th>           <th>constant</th>          </tr>         </thead>         <tbody class="tbody">          <tr>           <td>1</td>           <td>            {@link RegexIterator::USE_KEY}           </td>          </tr>         </tbody>               </table>      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-regexiterator.setflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-regexiterator.setflags-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>RegexIterator::setFlags()</strong></span> example</strong></p>    <div class="example-contents"><p>     Creates a new RegexIterator that filters all entries whose key starts with &#039;<span>test</span>&#039;.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$test </span><span style="color: #007700">= array (</span><span style="color: #DD0000">'str1' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'test 1'</span><span style="color: #007700">, </span><span style="color: #DD0000">'teststr2' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'another test'</span><span style="color: #007700">, </span><span style="color: #DD0000">'str3' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'test 123'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$arrayIterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$test</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$regexIterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">RegexIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayIterator</span><span style="color: #007700">, </span><span style="color: #DD0000">'/^test/'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$regexIterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setFlags</span><span style="color: #007700">(</span><span style="color: #9876AA">RegexIterator</span><span style="color: #007700">::</span><span style="color: #9876AA">USE_KEY</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$regexIterator </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$value</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$key </span><span style="color: #007700">. </span><span style="color: #DD0000">' =&gt; ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$value </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>teststr2 =&gt; another test<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-regexiterator.setflags-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link RegexIterator::getFlags()} - Get flags</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function setFlags(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags): void {}

/**
*<div id="regexiterator.getregex" class="refentry"> <div class="refnamediv">  <h1 class="refname">RegexIterator::getRegex</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RegexIterator::getRegex</span> &mdash; <span class="dc-title">Returns current regular expression</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-regexiterator.getregex-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RegexIterator::getRegex</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-regexiterator.getregex-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-regexiterator.getregex-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  </p> </div></div>
     * @return string*/
    public function getRegex(): string {}

/**
*<div id="regexiterator.getpregflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">RegexIterator::getPregFlags</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RegexIterator::getPregFlags</span> &mdash; <span class="dc-title">Returns the regular expression flags</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-regexiterator.getpregflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RegexIterator::getPregFlags</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Returns the regular expression flags, see <span class="methodname" style="color:#CC7832">{@link RegexIterator::__construct()}</span>   for the list of flags.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-regexiterator.getpregflags-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-regexiterator.getpregflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a bitmask of the regular expression flags.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-regexiterator.getpregflags-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>RegexIterator::getPregFlags()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$test </span><span style="color: #007700">= array (</span><span style="color: #DD0000">'str1' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'test 1'</span><span style="color: #007700">, </span><span style="color: #DD0000">'teststr2' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'another test'</span><span style="color: #007700">, </span><span style="color: #DD0000">'str3' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'test 123'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$arrayIterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$test</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$regexIterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">RegexIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayIterator</span><span style="color: #007700">, </span><span style="color: #DD0000">'/\s/'</span><span style="color: #007700">, </span><span style="color: #9876AA">RegexIterator</span><span style="color: #007700">::</span><span style="color: #9876AA">SPLIT</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$regexIterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setPregFlags</span><span style="color: #007700">(</span><span style="color: #9876AA">PREG_SPLIT_NO_EMPTY </span><span style="color: #007700">| </span><span style="color: #9876AA">PREG_SPLIT_OFFSET_CAPTURE</span><span style="color: #007700">);<br /><br />if (</span><span style="color: #9876AA">$regexIterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getPregFlags</span><span style="color: #007700">() &amp; </span><span style="color: #9876AA">PREG_SPLIT_NO_EMPTY</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Ignoring empty pieces'</span><span style="color: #007700">;<br />} else {<br />    echo </span><span style="color: #DD0000">'Not ignoring empty pieces'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Ignoring empty pieces<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-regexiterator.getpregflags-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link RegexIterator::setPregFlags()} - Sets the regular expression flags</span></li>   </ul>  </span> </div></div>
     * @return int a bitmask of the regular expression flags.*/
    public function getPregFlags(): int {}

/**
*<div id="regexiterator.setpregflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">RegexIterator::setPregFlags</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RegexIterator::setPregFlags</span> &mdash; <span class="dc-title">Sets the regular expression flags</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-regexiterator.setpregflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RegexIterator::setPregFlags</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$pregFlags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets the regular expression flags.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-regexiterator.setpregflags-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">pregFlags</span></dt>     <dd>      <p class="para">       The regular expression flags. See <span class="methodname" style="color:#CC7832">{@link RegexIterator::__construct()}</span>       for an overview of available flags.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-regexiterator.setpregflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-regexiterator.setpregflags-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">RegexIterator::setPregFlags()</strong></span> example</strong></p>    <div class="example-contents"><p>      Creates a new RegexIterator that filters all entries with where the array key starts with &#039;test&#039;.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$test </span><span style="color: #007700">= array (</span><span style="color: #DD0000">'test 1'</span><span style="color: #007700">, </span><span style="color: #DD0000">'another test'</span><span style="color: #007700">, </span><span style="color: #DD0000">'test 123'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$arrayIterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$test</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$regexIterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">RegexIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayIterator</span><span style="color: #007700">, </span><span style="color: #DD0000">'/^test/'</span><span style="color: #007700">, </span><span style="color: #9876AA">RegexIterator</span><span style="color: #007700">::</span><span style="color: #9876AA">GET_MATCH</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$regexIterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setPregFlags</span><span style="color: #007700">(</span><span style="color: #9876AA">PREG_OFFSET_CAPTURE</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$regexIterator </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$value</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$value</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(1) {<br>  [0]=&gt;<br>  array(2) {<br>    [0]=&gt;<br>    string(4) &quot;test&quot;<br>    [1]=&gt;<br>    int(0)<br>  }<br>}<br>array(1) {<br>  [0]=&gt;<br>  array(2) {<br>    [0]=&gt;<br>    string(4) &quot;test&quot;<br>    [1]=&gt;<br>    int(0)<br>  }<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-regexiterator.setpregflags-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link RegexIterator::getPregFlags()} - Returns the regular expression flags</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function setPregFlags(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $pregFlags): void {}
}

/**
*<div id="class.recursiveregexiterator" class="reference"> <h1 class="title">The RecursiveRegexIterator class</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p>  <div class="section" id="recursiveregexiterator.intro">   <h2 class="title">简介</h2>   <p class="para">    This recursive iterator can filter another recursive iterator via a regular expression.   </p>  </div>  <div class="section" id="recursiveregexiterator.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">RecursiveRegexIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.regexiterator.php" class="classname">RegexIterator</a>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="interfacename">RecursiveIterator</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">RegexIterator::USE_KEY</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">RegexIterator::INVERT_MATCH</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">RegexIterator::MATCH</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">RegexIterator::GET_MATCH</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">RegexIterator::ALL_MATCHES</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">RegexIterator::SPLIT</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">RegexIterator::REPLACE</var>}</var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.regexiterator.php#regexiterator.props.replacement">$<var class="varname">replacement</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveregexiterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="type RecursiveIterator" style="color:#EAB766">RecursiveIterator</a></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$pattern</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = RecursiveRegexIterator::MATCH</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$pregFlags</span><span class="initializer"> = 0</span></span><br>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveregexiterator.getchildren.php" class="methodname" style="color:#CC7832">getChildren</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveregexiterator.php" class="type RecursiveRegexIterator" style="color:#EAB766">RecursiveRegexIterator</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursiveregexiterator.haschildren.php" class="methodname" style="color:#CC7832">hasChildren</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RegexIterator::accept}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RegexIterator::getFlags}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RegexIterator::getMode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RegexIterator::getPregFlags}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RegexIterator::getRegex}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RegexIterator::setFlags}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RegexIterator::setMode}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RegexIterator::setPregFlags}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$pregFlags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::accept}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link FilterIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::getInnerIterator}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link IteratorIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link RecursiveRegexIterator::__construct} — Creates a new RecursiveRegexIterator</li><li>{@link RecursiveRegexIterator::getChildren} — Returns an iterator for the current entry</li><li>{@link RecursiveRegexIterator::hasChildren} — Returns whether an iterator can be obtained for the current entry</li></ul></div>
*/
class RecursiveRegexIterator extends RegexIterator implements RecursiveIterator
{
    /**
     * Creates a new RecursiveRegexIterator.
     * @link https://php.net/manual/en/recursiveregexiterator.construct.php
     * @param RecursiveIterator $iterator The iterator to apply this regex filter to.
     * @param string $pattern The regular expression to match.
     * @param int $mode [optional] Operation mode, see RegexIterator::setMode() for a list of modes.
     * @param int $flags [optional] Special flags, see RegexIterator::setFlags() for a list of available flags.
     * @param int $pregFlags [optional] The regular expression flags. These flags depend on the operation mode parameter
     */
    public function __construct(
        RecursiveIterator $iterator,
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $pattern,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $mode = RegexIterator::MATCH,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags = 0,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $pregFlags = 0
    ) {}

/**
*<div id="recursiveregexiterator.haschildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveRegexIterator::hasChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveRegexIterator::hasChildren</span> &mdash; <span class="dc-title">Returns whether an iterator can be obtained for the current entry</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveregexiterator.haschildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveRegexIterator::hasChildren</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Returns whether an iterator can be obtained for the current entry. This iterator can be   obtained via <span class="methodname" style="color:#CC7832">{@link RecursiveRegexIterator::getChildren()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveregexiterator.haschildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveregexiterator.haschildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if an iterator can be obtained for the current entry, otherwise returns <strong><span>false</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-recursiveregexiterator.haschildren-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">RecursiveRegexIterator::hasChildren()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$rArrayIterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">RecursiveArrayIterator</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'test1'</span><span style="color: #007700">, array(</span><span style="color: #DD0000">'tet3'</span><span style="color: #007700">, </span><span style="color: #DD0000">'test4'</span><span style="color: #007700">, </span><span style="color: #DD0000">'test5'</span><span style="color: #007700">)));<br /></span><span style="color: #9876AA">$rRegexIterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">RecursiveRegexIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$rArrayIterator</span><span style="color: #007700">, </span><span style="color: #DD0000">'/^test/'</span><span style="color: #007700">,<br />    </span><span style="color: #9876AA">RecursiveRegexIterator</span><span style="color: #007700">::</span><span style="color: #9876AA">ALL_MATCHES</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$rRegexIterator </span><span style="color: #007700">as </span><span style="color: #9876AA">$value</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rRegexIterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasChildren</span><span style="color: #007700">());<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>bool(true)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-recursiveregexiterator.haschildren-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link RecursiveRegexIterator::getChildren()} - Returns an iterator for the current entry</span></li>   </ul>  </span> </div></div>
     * @return bool true if an iterator can be obtained for the current entry, otherwise returns false.*/
    public function hasChildren(): bool {}

/**
*<div id="recursiveregexiterator.getchildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveRegexIterator::getChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveRegexIterator::getChildren</span> &mdash; <span class="dc-title">Returns an iterator for the current entry</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursiveregexiterator.getchildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveRegexIterator::getChildren</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveregexiterator.php" class="type RecursiveRegexIterator" style="color:#EAB766">RecursiveRegexIterator</a></span></div>  <p class="para rdfs-comment">   Returns an iterator for the current iterator entry.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursiveregexiterator.getchildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursiveregexiterator.getchildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   An iterator for the current entry, if it can be iterated over by the inner iterator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-recursiveregexiterator.getchildren-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   An <span class="classname"><a href="https://www.php.net/manual/zh/class.invalidargumentexception.php" class="classname">InvalidArgumentException</a></span>   will be thrown if the current entry does not contain a value that can be iterated over by   the inner iterator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-recursiveregexiterator.getchildren-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">RecursiveRegexIterator::getChildren()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$rArrayIterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">RecursiveArrayIterator</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'test1'</span><span style="color: #007700">, array(</span><span style="color: #DD0000">'tet3'</span><span style="color: #007700">, </span><span style="color: #DD0000">'test4'</span><span style="color: #007700">, </span><span style="color: #DD0000">'test5'</span><span style="color: #007700">)));<br /></span><span style="color: #9876AA">$rRegexIterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">RecursiveRegexIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$rArrayIterator</span><span style="color: #007700">, </span><span style="color: #DD0000">'/^test/'</span><span style="color: #007700">,<br />    </span><span style="color: #9876AA">RecursiveRegexIterator</span><span style="color: #007700">::</span><span style="color: #9876AA">ALL_MATCHES</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$rRegexIterator </span><span style="color: #007700">as </span><span style="color: #9876AA">$key1 </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$value1</span><span style="color: #007700">) {<br /><br />    if (</span><span style="color: #9876AA">$rRegexIterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasChildren</span><span style="color: #007700">()) {<br /><br />        </span><span style="color: #FF8000">// print all children<br />        </span><span style="color: #007700">echo </span><span style="color: #DD0000">"Children: "</span><span style="color: #007700">;<br />        foreach (</span><span style="color: #9876AA">$rRegexIterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getChildren</span><span style="color: #007700">() as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$value</span><span style="color: #007700">) {<br />            echo </span><span style="color: #9876AA">$value </span><span style="color: #007700">. </span><span style="color: #DD0000">" "</span><span style="color: #007700">;<br />        }<br />        echo </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />    } else {<br />        echo </span><span style="color: #DD0000">"No children\n"</span><span style="color: #007700">;<br />    }<br /><br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>No children<br>Children: test4 test5<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-recursiveregexiterator.getchildren-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link RecursiveRegexIterator::hasChildren()} - Returns whether an iterator can be obtained for the current entry</span></li>   </ul>  </span> </div></div>
     * @return RecursiveRegexIterator An iterator for the current entry, if it can be iterated over by the inner iterator.*/
    public function getChildren(): RecursiveRegexIterator {}
}

/**
*<div id="class.recursivetreeiterator" class="reference"> <h1 class="title">The RecursiveTreeIterator class</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p>  <div class="section" id="recursivetreeiterator.intro">   <h2 class="title">简介</h2>   <p class="para">    Allows iterating over a <span class="classname"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="classname">RecursiveIterator</a></span> to generate an ASCII graphic tree.   </p>  </div>  <div class="section" id="recursivetreeiterator.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">RecursiveTreeIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.recursiveiteratoriterator.php" class="classname">RecursiveIteratorIterator</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">RecursiveIteratorIterator::LEAVES_ONLY</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">RecursiveIteratorIterator::SELF_FIRST</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">RecursiveIteratorIterator::CHILD_FIRST</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">RecursiveIteratorIterator::CATCH_GET_CHILD</var>}</var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.recursivetreeiterator.php#recursivetreeiterator.constants.bypass-current"><var class="varname">BYPASS_CURRENT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.recursivetreeiterator.php#recursivetreeiterator.constants.bypass-key"><var class="varname">BYPASS_KEY</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.recursivetreeiterator.php#recursivetreeiterator.constants.prefix-left"><var class="varname">PREFIX_LEFT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.recursivetreeiterator.php#recursivetreeiterator.constants.prefix-mid-has-next"><var class="varname">PREFIX_MID_HAS_NEXT</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.recursivetreeiterator.php#recursivetreeiterator.constants.prefix-mid-last"><var class="varname">PREFIX_MID_LAST</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.recursivetreeiterator.php#recursivetreeiterator.constants.prefix-end-has-next"><var class="varname">PREFIX_END_HAS_NEXT</var></a></var><span class="initializer"> = 3</span>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.recursivetreeiterator.php#recursivetreeiterator.constants.prefix-end-last"><var class="varname">PREFIX_END_LAST</var></a></var><span class="initializer"> = 4</span>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.recursivetreeiterator.php#recursivetreeiterator.constants.prefix-right"><var class="varname">PREFIX_RIGHT</var></a></var><span class="initializer"> = 5</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivetreeiterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="type RecursiveIterator" style="color:#EAB766">RecursiveIterator</a></span>|<span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iteratoraggregate.php" class="type IteratorAggregate" style="color:#EAB766">IteratorAggregate</a></span></span> <span class="parameter" style="color:#3A95FF">$iterator</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = RecursiveTreeIterator::BYPASS_KEY</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$cachingIteratorFlags</span><span class="initializer"> = CachingIterator::CATCH_GET_CHILD</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$mode</span><span class="initializer"> = RecursiveTreeIterator::SELF_FIRST</span></span><br>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivetreeiterator.beginchildren.php" class="methodname" style="color:#CC7832">beginChildren</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivetreeiterator.beginiteration.php" class="methodname" style="color:#CC7832">beginIteration</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="type RecursiveIterator" style="color:#EAB766">RecursiveIterator</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivetreeiterator.callgetchildren.php" class="methodname" style="color:#CC7832">callGetChildren</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="type RecursiveIterator" style="color:#EAB766">RecursiveIterator</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivetreeiterator.callhaschildren.php" class="methodname" style="color:#CC7832">callHasChildren</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivetreeiterator.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivetreeiterator.endchildren.php" class="methodname" style="color:#CC7832">endChildren</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivetreeiterator.enditeration.php" class="methodname" style="color:#CC7832">endIteration</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivetreeiterator.getentry.php" class="methodname" style="color:#CC7832">getEntry</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivetreeiterator.getpostfix.php" class="methodname" style="color:#CC7832">getPostfix</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivetreeiterator.getprefix.php" class="methodname" style="color:#CC7832">getPrefix</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivetreeiterator.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivetreeiterator.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivetreeiterator.nextelement.php" class="methodname" style="color:#CC7832">nextElement</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivetreeiterator.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivetreeiterator.setpostfix.php" class="methodname" style="color:#CC7832">setPostfix</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$postfix</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivetreeiterator.setprefixpart.php" class="methodname" style="color:#CC7832">setPrefixPart</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$part</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivetreeiterator.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::beginChildren}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::beginIteration}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::callGetChildren}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="type RecursiveIterator" style="color:#EAB766">RecursiveIterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::callHasChildren}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::endChildren}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::endIteration}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::getDepth}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::getInnerIterator}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="type RecursiveIterator" style="color:#EAB766">RecursiveIterator</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::getMaxDepth}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::getSubIterator}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$level</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="type RecursiveIterator" style="color:#EAB766">RecursiveIterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::key}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::nextElement}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::setMaxDepth}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$maxDepth</span><span class="initializer"> = -1</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link RecursiveIteratorIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div>    <div class="section" id="recursivetreeiterator.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="recursivetreeiterator.constants.bypass-current"><strong><span>RecursiveTreeIterator::BYPASS_CURRENT</span></strong></dt>     <dd>      <p class="para"/>     </dd>             <dt id="recursivetreeiterator.constants.bypass-key"><strong><span>RecursiveTreeIterator::BYPASS_KEY</span></strong></dt>     <dd>      <p class="para"/>     </dd>             <dt id="recursivetreeiterator.constants.prefix-left"><strong><span>RecursiveTreeIterator::PREFIX_LEFT</span></strong></dt>     <dd>      <p class="para"/>     </dd>             <dt id="recursivetreeiterator.constants.prefix-mid-has-next"><strong><span>RecursiveTreeIterator::PREFIX_MID_HAS_NEXT</span></strong></dt>     <dd>      <p class="para"/>     </dd>             <dt id="recursivetreeiterator.constants.prefix-mid-last"><strong><span>RecursiveTreeIterator::PREFIX_MID_LAST</span></strong></dt>     <dd>      <p class="para"/>     </dd>             <dt id="recursivetreeiterator.constants.prefix-end-has-next"><strong><span>RecursiveTreeIterator::PREFIX_END_HAS_NEXT</span></strong></dt>     <dd>      <p class="para"/>     </dd>             <dt id="recursivetreeiterator.constants.prefix-end-last"><strong><span>RecursiveTreeIterator::PREFIX_END_LAST</span></strong></dt>     <dd>      <p class="para"/>     </dd>             <dt id="recursivetreeiterator.constants.prefix-right"><strong><span>RecursiveTreeIterator::PREFIX_RIGHT</span></strong></dt>     <dd>      <p class="para"/>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link RecursiveTreeIterator::beginChildren} — Begin children</li><li>{@link RecursiveTreeIterator::beginIteration} — Begin iteration</li><li>{@link RecursiveTreeIterator::callGetChildren} — Get children</li><li>{@link RecursiveTreeIterator::callHasChildren} — Has children</li><li>{@link RecursiveTreeIterator::__construct} — Construct a RecursiveTreeIterator</li><li>{@link RecursiveTreeIterator::current} — Get current element</li><li>{@link RecursiveTreeIterator::endChildren} — End children</li><li>{@link RecursiveTreeIterator::endIteration} — End iteration</li><li>{@link RecursiveTreeIterator::getEntry} — Get current entry</li><li>{@link RecursiveTreeIterator::getPostfix} — Get the postfix</li><li>{@link RecursiveTreeIterator::getPrefix} — Get the prefix</li><li>{@link RecursiveTreeIterator::key} — Get the key of the current element</li><li>{@link RecursiveTreeIterator::next} — Move to next element</li><li>{@link RecursiveTreeIterator::nextElement} — Next element</li><li>{@link RecursiveTreeIterator::rewind} — Rewind iterator</li><li>{@link RecursiveTreeIterator::setPostfix} — Set postfix</li><li>{@link RecursiveTreeIterator::setPrefixPart} — Set a part of the prefix</li><li>{@link RecursiveTreeIterator::valid} — Check validity</li></ul></div>
*/
class RecursiveTreeIterator extends RecursiveIteratorIterator
{
    public const BYPASS_CURRENT = 4;
    public const BYPASS_KEY = 8;
    public const PREFIX_LEFT = 0;
    public const PREFIX_MID_HAS_NEXT = 1;
    public const PREFIX_MID_LAST = 2;
    public const PREFIX_END_HAS_NEXT = 3;
    public const PREFIX_END_LAST = 4;
    public const PREFIX_RIGHT = 5;

    /**
     * Construct a RecursiveTreeIterator
     * @link https://php.net/manual/en/recursivetreeiterator.construct.php
     * @param RecursiveIterator|IteratorAggregate $iterator
     * @param int $flags [optional] Flags to control the behavior of the RecursiveTreeIterator object.
     * @param int $cachingIteratorFlags [optional] Flags to affect the behavior of the {@see RecursiveCachingIterator} used internally.
     * @param int $mode [optional] Flags to affect the behavior of the {@see RecursiveIteratorIterator} used internally.
     */
    public function __construct(
        $iterator,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags = self::BYPASS_KEY,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $cachingIteratorFlags = CachingIterator::CATCH_GET_CHILD,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $mode = RecursiveIteratorIterator::SELF_FIRST
    ) {}

/**
*<div id="recursivetreeiterator.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveTreeIterator::rewind</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveTreeIterator::rewind</span> &mdash; <span class="dc-title">Rewind iterator</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivetreeiterator.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveTreeIterator::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Rewinds the iterator to the first element of the top level inner iterator.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivetreeiterator.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivetreeiterator.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function rewind(): void {}

/**
*<div id="recursivetreeiterator.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveTreeIterator::valid</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveTreeIterator::valid</span> &mdash; <span class="dc-title">Check validity</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivetreeiterator.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveTreeIterator::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Check whether the current position is valid.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivetreeiterator.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivetreeiterator.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the current position is valid, otherwise <strong><span>false</span></strong>  </p> </div></div>
     * @return bool true if the current position is valid, otherwise false*/
    public function valid(): bool {}

/**
*<div id="recursivetreeiterator.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveTreeIterator::key</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveTreeIterator::key</span> &mdash; <span class="dc-title">Get the key of the current element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivetreeiterator.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveTreeIterator::key</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Gets the current key prefixed and postfixed.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivetreeiterator.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivetreeiterator.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current key prefixed and postfixed.  </p> </div></div>
     * @return string the current key prefixed and postfixed.*/
    public function key(): mixed {}

/**
*<div id="recursivetreeiterator.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveTreeIterator::current</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveTreeIterator::current</span> &mdash; <span class="dc-title">Get current element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivetreeiterator.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveTreeIterator::current</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Gets the current element prefixed and postfixed.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivetreeiterator.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivetreeiterator.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current element prefixed and postfixed.  </p> </div></div>
     * @return string the current element prefixed and postfixed.*/
    public function current(): mixed {}

/**
*<div id="recursivetreeiterator.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveTreeIterator::next</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveTreeIterator::next</span> &mdash; <span class="dc-title">Move to next element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivetreeiterator.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveTreeIterator::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Moves forward to the next element.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivetreeiterator.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivetreeiterator.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function next(): void {}

/**
*<div id="recursivetreeiterator.beginiteration" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveTreeIterator::beginIteration</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveTreeIterator::beginIteration</span> &mdash; <span class="dc-title">Begin iteration</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivetreeiterator.beginiteration-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveTreeIterator::beginIteration</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="type RecursiveIterator" style="color:#EAB766">RecursiveIterator</a></span></div>  <p class="para rdfs-comment">   Called when iteration begins (after the first <span class="methodname" style="color:#CC7832">{@link RecursiveTreeIterator::rewind()}</span>   call).  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivetreeiterator.beginiteration-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivetreeiterator.beginiteration-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   A <span class="classname"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="classname">RecursiveIterator</a></span>.  </p> </div></div>
     * @return RecursiveIterator A <b>RecursiveIterator</b>.*/
    public function beginIteration() {}

/**
*<div id="recursivetreeiterator.enditeration" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveTreeIterator::endIteration</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveTreeIterator::endIteration</span> &mdash; <span class="dc-title">End iteration</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivetreeiterator.enditeration-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveTreeIterator::endIteration</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Called when the iteration ends (when <span class="methodname" style="color:#CC7832">{@link RecursiveTreeIterator::valid()}</span>   first returns <strong><span>false</span></strong>)  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivetreeiterator.enditeration-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivetreeiterator.enditeration-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function endIteration() {}

/**
*<div id="recursivetreeiterator.callhaschildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveTreeIterator::callHasChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveTreeIterator::callHasChildren</span> &mdash; <span class="dc-title">Has children</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivetreeiterator.callhaschildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveTreeIterator::callHasChildren</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Called for each element to test whether it has children.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivetreeiterator.callhaschildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivetreeiterator.callhaschildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if there are children, otherwise <strong><span>false</span></strong>  </p> </div></div>
     * @return bool true if there are children, otherwise false*/
    public function callHasChildren() {}

/**
*<div id="recursivetreeiterator.callgetchildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveTreeIterator::callGetChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveTreeIterator::callGetChildren</span> &mdash; <span class="dc-title">Get children</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivetreeiterator.callgetchildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveTreeIterator::callGetChildren</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="type RecursiveIterator" style="color:#EAB766">RecursiveIterator</a></span></div>  <p class="para rdfs-comment">   Gets children of the current element.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivetreeiterator.callgetchildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivetreeiterator.callgetchildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   A <span class="classname"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="classname">RecursiveIterator</a></span>.  </p> </div></div>
     * @return RecursiveIterator A <b>RecursiveIterator</b>.*/
    public function callGetChildren() {}

/**
*<div id="recursivetreeiterator.beginchildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveTreeIterator::beginChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveTreeIterator::beginChildren</span> &mdash; <span class="dc-title">Begin children</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivetreeiterator.beginchildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveTreeIterator::beginChildren</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Called when recursing one level down.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivetreeiterator.beginchildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivetreeiterator.beginchildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function beginChildren() {}

/**
*<div id="recursivetreeiterator.endchildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveTreeIterator::endChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveTreeIterator::endChildren</span> &mdash; <span class="dc-title">End children</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivetreeiterator.endchildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveTreeIterator::endChildren</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Called when end recursing one level.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivetreeiterator.endchildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivetreeiterator.endchildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function endChildren() {}

/**
*<div id="recursivetreeiterator.nextelement" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveTreeIterator::nextElement</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveTreeIterator::nextElement</span> &mdash; <span class="dc-title">Next element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivetreeiterator.nextelement-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveTreeIterator::nextElement</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Called when the next element is available.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivetreeiterator.nextelement-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivetreeiterator.nextelement-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function nextElement() {}

/**
*<div id="recursivetreeiterator.getprefix" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveTreeIterator::getPrefix</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveTreeIterator::getPrefix</span> &mdash; <span class="dc-title">Get the prefix</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivetreeiterator.getprefix-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveTreeIterator::getPrefix</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Gets the string to place in front of current element  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivetreeiterator.getprefix-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivetreeiterator.getprefix-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the string to place in front of current element  </p> </div></div>
     * @return string the string to place in front of current element*/
    public function getPrefix(): string {}

/**
*<div id="recursivetreeiterator.setpostfix" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveTreeIterator::setPostfix</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.3, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveTreeIterator::setPostfix</span> &mdash; <span class="dc-title">Set postfix</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivetreeiterator.setpostfix-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveTreeIterator::setPostfix</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$postfix</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets postfix as used in <span class="methodname" style="color:#CC7832">{@link RecursiveTreeIterator::getPostfix()}</span>.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivetreeiterator.setpostfix-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">postfix</span></dt>     <dd>      <p class="para">             </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivetreeiterator.setpostfix-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
*/
    public function setPostfix(#[PhpStormStubsElementAvailable(from: '7.3')] string $postfix): void {}

/**
*<div id="recursivetreeiterator.setprefixpart" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveTreeIterator::setPrefixPart</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveTreeIterator::setPrefixPart</span> &mdash; <span class="dc-title">Set a part of the prefix</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivetreeiterator.setprefixpart-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveTreeIterator::setPrefixPart</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$part</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets a part of the prefix used in the graphic tree.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivetreeiterator.setprefixpart-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">part</span></dt>     <dd>      <p class="para">       One of the {@link RecursiveTreeIterator::PREFIX_*} constants.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The value to assign to the part of the prefix specified in <span class="parameter" style="color:#3A95FF">part</span>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivetreeiterator.setprefixpart-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function setPrefixPart(
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $part,
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $value
    ): void {}

/**
*<div id="recursivetreeiterator.getentry" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveTreeIterator::getEntry</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveTreeIterator::getEntry</span> &mdash; <span class="dc-title">Get current entry</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivetreeiterator.getentry-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveTreeIterator::getEntry</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Gets the part of the tree built for the current element.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivetreeiterator.getentry-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivetreeiterator.getentry-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the part of the tree built for the current element.  </p> </div></div>
     * @return string the part of the tree built for the current element.*/
    public function getEntry(): string {}

/**
*<div id="recursivetreeiterator.getpostfix" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveTreeIterator::getPostfix</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveTreeIterator::getPostfix</span> &mdash; <span class="dc-title">Get the postfix</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivetreeiterator.getpostfix-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveTreeIterator::getPostfix</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Gets the string to place after the current element.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivetreeiterator.getpostfix-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivetreeiterator.getpostfix-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    Returns the string to place after the current element.  </p> </div></div>
     * @return string to place after the current element.*/
    public function getPostfix(): string {}
}

/**
*<div id="class.arrayobject" class="reference"> <h1 class="title">The ArrayObject class</h1>   <div class="partintro"><p class="verinfo">(PHP 5, PHP 7, PHP 8)</p>   <div class="section" id="arrayobject.intro">   <h2 class="title">简介</h2>   <p class="para">    This class allows objects to work as arrays.   </p>  </div>   <div class="section" id="arrayobject.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">ArrayObject</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.iteratoraggregate.php" class="interfacename">IteratorAggregate</a>,     <a href="https://www.php.net/manual/zh/class.arrayaccess.php" class="interfacename">ArrayAccess</a>,     <a href="https://www.php.net/manual/zh/class.serializable.php" class="interfacename">Serializable</a>,     <a href="https://www.php.net/manual/zh/class.countable.php" class="interfacename">Countable</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.arrayobject.php#arrayobject.constants.std-prop-list"><var class="varname">STD_PROP_LIST</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.arrayobject.php#arrayobject.constants.array-as-props"><var class="varname">ARRAY_AS_PROPS</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">object</span></span> <span class="parameter" style="color:#3A95FF">$array</span><span class="initializer"> = []</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$iteratorClass</span><span class="initializer"> = ArrayIterator::class</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.append.php" class="methodname" style="color:#CC7832">append</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.asort.php" class="methodname" style="color:#CC7832">asort</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>SORT_REGULAR</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.count.php" class="methodname" style="color:#CC7832">count</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.exchangearray.php" class="methodname" style="color:#CC7832">exchangeArray</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">object</span></span> <span class="parameter" style="color:#3A95FF">$array</span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.getarraycopy.php" class="methodname" style="color:#CC7832">getArrayCopy</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.getflags.php" class="methodname" style="color:#CC7832">getFlags</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.getiterator.php" class="methodname" style="color:#CC7832">getIterator</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.getiteratorclass.php" class="methodname" style="color:#CC7832">getIteratorClass</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.ksort.php" class="methodname" style="color:#CC7832">ksort</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>SORT_REGULAR</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.natcasesort.php" class="methodname" style="color:#CC7832">natcasesort</a></span>(): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.natsort.php" class="methodname" style="color:#CC7832">natsort</a></span>(): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.offsetexists.php" class="methodname" style="color:#CC7832">offsetExists</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.offsetget.php" class="methodname" style="color:#CC7832">offsetGet</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.offsetset.php" class="methodname" style="color:#CC7832">offsetSet</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.offsetunset.php" class="methodname" style="color:#CC7832">offsetUnset</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.serialize.php" class="methodname" style="color:#CC7832">serialize</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.setflags.php" class="methodname" style="color:#CC7832">setFlags</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.setiteratorclass.php" class="methodname" style="color:#CC7832">setIteratorClass</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$iteratorClass</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.uasort.php" class="methodname" style="color:#CC7832">uasort</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.uksort.php" class="methodname" style="color:#CC7832">uksort</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayobject.unserialize.php" class="methodname" style="color:#CC7832">unserialize</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>   </div>   <div class="section" id="arrayobject.constants">   <h2 class="title">预定义常量</h2>   <div class="section" id="arrayobject.constants.flags">    <h2 class="title">ArrayObject Flags</h2>    <dl>           <dt id="arrayobject.constants.std-prop-list"><strong><span>ArrayObject::STD_PROP_LIST</span></strong></dt>      <dd>       <p class="para">        Properties of the object have their normal functionality when        accessed as list (<span class="function">{@link var_dump()}</span>, <a href="https://www.php.net/manual/zh/control-structures.foreach.php" class="link">foreach</a>, etc.).       </p>      </dd>                <dt id="arrayobject.constants.array-as-props"><strong><span>ArrayObject::ARRAY_AS_PROPS</span></strong></dt>      <dd>       <p class="para">        Entries can be accessed as properties (read and write). The        <span class="classname"><strong class="classname">ArrayObject</strong></span> class uses its own logic to access        properties, thus no warning or error is raised when trying to read or        write dynamic properties.       </p>      </dd>         </dl>   </div>  </div>    </div>   <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ArrayObject::append} — 追加新的值作为最后一个元素。</li><li>{@link ArrayObject::asort} — Sort the entries by value</li><li>{@link ArrayObject::__construct} — Construct a new array object</li><li>{@link ArrayObject::count} — 统计 ArrayObject 内 public 属性的数量</li><li>{@link ArrayObject::exchangeArray} — Exchange the array for another one</li><li>{@link ArrayObject::getArrayCopy} — Creates a copy of the ArrayObject</li><li>{@link ArrayObject::getFlags} — Gets the behavior flags</li><li>{@link ArrayObject::getIterator} — Create a new iterator from an ArrayObject instance</li><li>{@link ArrayObject::getIteratorClass} — Gets the iterator classname for the ArrayObject</li><li>{@link ArrayObject::ksort} — Sort the entries by key</li><li>{@link ArrayObject::natcasesort} — Sort an array using a case insensitive &quot;natural order&quot; algorithm</li><li>{@link ArrayObject::natsort} — Sort entries using a &quot;natural order&quot; algorithm</li><li>{@link ArrayObject::offsetExists} — Returns whether the requested index exists</li><li>{@link ArrayObject::offsetGet} — Returns the value at the specified index</li><li>{@link ArrayObject::offsetSet} — 为指定索引设定新值</li><li>{@link ArrayObject::offsetUnset} — Unsets the value at the specified index</li><li>{@link ArrayObject::serialize} — Serialize an ArrayObject</li><li>{@link ArrayObject::setFlags} — Sets the behavior flags</li><li>{@link ArrayObject::setIteratorClass} — Sets the iterator classname for the ArrayObject</li><li>{@link ArrayObject::uasort} — Sort the entries with a user-defined comparison function and maintain key association</li><li>{@link ArrayObject::uksort} — Sort the entries by keys using a user-defined comparison function</li><li>{@link ArrayObject::unserialize} — Unserialize an ArrayObject</li></ul></div>
*/
class ArrayObject implements IteratorAggregate, ArrayAccess, Serializable, Countable
{
    /**
     * Properties of the object have their normal functionality when accessed as list (var_dump, foreach, etc.).
     */
    public const STD_PROP_LIST = 1;

    /**
     * Entries can be accessed as properties (read and write).
     */
    public const ARRAY_AS_PROPS = 2;

    /**
     * Construct a new array object
     * @link https://php.net/manual/en/arrayobject.construct.php
     * @param array<TValue>|object $array The input parameter accepts an array or an Object.
     * @param int $flags Flags to control the behaviour of the ArrayObject object.
     * @param class-string<ArrayIterator> $iteratorClass Specify the class that will be used for iteration of the ArrayObject object. ArrayIterator is the default class used.
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'object|array'], default: '')] $array = [],
        #[PhpStormStubsElementAvailable(from: '7.0')] #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags = 0,
        #[PhpStormStubsElementAvailable(from: '7.0')] #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $iteratorClass = "ArrayIterator"
    ) {}

/**
*<div id="arrayobject.offsetexists" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::offsetExists</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::offsetExists</span> &mdash; <span class="dc-title">Returns whether the requested index exists</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.offsetexists-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::offsetExists</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766">bool</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.offsetexists-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       The index being checked.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.offsetexists-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the requested index exists, otherwise <strong><span>false</span></strong>  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.offsetexists-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ArrayObject::offsetExists()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$arrayobj </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'zero'</span><span style="color: #007700">, </span><span style="color: #DD0000">'one'</span><span style="color: #007700">, </span><span style="color: #DD0000">'example'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'e.g.'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayobj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">offsetExists</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayobj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">offsetExists</span><span style="color: #007700">(</span><span style="color: #DD0000">'example'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayobj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">offsetExists</span><span style="color: #007700">(</span><span style="color: #DD0000">'notfound'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(true)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div></div>
     * @return bool true if the requested index exists, otherwise false*/
    public function offsetExists(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $key): bool {}

/**
*<div id="arrayobject.offsetget" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::offsetGet</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::offsetGet</span> &mdash; <span class="dc-title">Returns the value at the specified index</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.offsetget-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::offsetGet</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.offsetget-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       The index with the value.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.offsetget-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The value at the specified index or <strong><span>null</span></strong>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-arrayobject.offsetget-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Produces an <strong><span>E_NOTICE</span></strong> error message when the specified   index does not exist.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.offsetget-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ArrayObject::offsetGet()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$arrayobj </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'zero'</span><span style="color: #007700">, </span><span style="color: #9876AA">7</span><span style="color: #007700">, </span><span style="color: #DD0000">'example'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'e.g.'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayobj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">offsetGet</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayobj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">offsetGet</span><span style="color: #007700">(</span><span style="color: #DD0000">'example'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayobj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">offsetExists</span><span style="color: #007700">(</span><span style="color: #DD0000">'notfound'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(7)<br>string(4) &quot;e.g.&quot;<br>bool(false)<br></span></div>    </div>   </div>  </span> </div></div>
     * @return mixed|false The value at the specified index or false.*/
    public function offsetGet(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $key): mixed {}

/**
*<div id="arrayobject.offsetset" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::offsetSet</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::offsetSet</span> &mdash; <span class="dc-title">为指定索引设定新值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.offsetset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::offsetSet</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   设置指定的索引为新值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.offsetset-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       将要被设置的索引。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       参数 <span class="parameter" style="color:#3A95FF">key</span> 所对应的新值。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.offsetset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.offsetset-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ArrayObject::offsetSet()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Example </span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">$property </span><span style="color: #007700">= </span><span style="color: #DD0000">'prop:public'</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">$arrayobj </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(new </span><span style="color: #9876AA">Example</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">$arrayobj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">offsetSet</span><span style="color: #007700">(</span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #DD0000">'four'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$arrayobj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">offsetSet</span><span style="color: #007700">(</span><span style="color: #DD0000">'group'</span><span style="color: #007700">, array(</span><span style="color: #DD0000">'g1'</span><span style="color: #007700">, </span><span style="color: #DD0000">'g2'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayobj</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$arrayobj </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'zero'</span><span style="color: #007700">,</span><span style="color: #DD0000">'one'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$arrayobj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">offsetSet</span><span style="color: #007700">(</span><span style="color: #9876AA">null</span><span style="color: #007700">, </span><span style="color: #DD0000">'last'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayobj</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(ArrayObject)#1 (3) {<br>  [&quot;property&quot;]=&gt;<br>  string(11) &quot;prop:public&quot;<br>  [4]=&gt;<br>  string(4) &quot;four&quot;<br>  [&quot;group&quot;]=&gt;<br>  array(2) {<br>    [0]=&gt;<br>    string(2) &quot;g1&quot;<br>    [1]=&gt;<br>    string(2) &quot;g2&quot;<br>  }<br>}<br>object(ArrayObject)#3 (3) {<br>  [0]=&gt;<br>  string(4) &quot;zero&quot;<br>  [1]=&gt;<br>  string(3) &quot;one&quot;<br>  [2]=&gt;<br>  string(4) &quot;last&quot;<br>}<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayobject.offsetset-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::append()} - 追加新的值作为最后一个元素。</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function offsetSet(
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $key,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value
    ): void {}

/**
*<div id="arrayobject.offsetunset" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::offsetUnset</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::offsetUnset</span> &mdash; <span class="dc-title">Unsets the value at the specified index</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.offsetunset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::offsetUnset</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Unsets the value at the specified index.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.offsetunset-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       The index being unset.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.offsetunset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.offsetunset-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ArrayObject::offsetUnset()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$arrayobj </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(array(</span><span style="color: #9876AA">0</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'zero'</span><span style="color: #007700">,</span><span style="color: #9876AA">2</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'two'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$arrayobj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">offsetUnset</span><span style="color: #007700">(</span><span style="color: #9876AA">2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayobj</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(ArrayObject)#1 (1) {<br>  [0]=&gt;<br>  string(4) &quot;zero&quot;<br>}<br></span></div>    </div>   </div>  </span> </div> </div>
     * @return void*/
    public function offsetUnset(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $key): void {}

/**
*<div id="arrayobject.append" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::append</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::append</span> &mdash; <span class="dc-title">追加新的值作为最后一个元素。</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.append-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::append</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   追加新的值作为最后一个元素。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    当 <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayobject.php" class="classname">ArrayObject</a></span> 从 object 初始化时不能调用此方法。使用 <span class="methodname" style="color:#CC7832">{@link ArrayObject::offsetSet()}</span> 代替。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.append-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       将要被追加的值      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.append-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div><br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.append-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ArrayObject::append()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$arrayobj </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'first'</span><span style="color: #007700">,</span><span style="color: #DD0000">'second'</span><span style="color: #007700">,</span><span style="color: #DD0000">'third'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">$arrayobj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">append</span><span style="color: #007700">(</span><span style="color: #DD0000">'fourth'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$arrayobj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">append</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'five'</span><span style="color: #007700">, </span><span style="color: #DD0000">'six'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayobj</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(ArrayObject)#1 (5) {<br>  [0]=&gt;<br>  string(5) &quot;first&quot;<br>  [1]=&gt;<br>  string(6) &quot;second&quot;<br>  [2]=&gt;<br>  string(5) &quot;third&quot;<br>  [3]=&gt;<br>  string(6) &quot;fourth&quot;<br>  [4]=&gt;<br>  array(2) {<br>    [0]=&gt;<br>    string(4) &quot;five&quot;<br>    [1]=&gt;<br>    string(3) &quot;six&quot;<br>  }<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayobject.append-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::offsetSet()} - 为指定索引设定新值</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function append(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value): void {}

/**
*<div id="arrayobject.getarraycopy" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::getArrayCopy</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::getArrayCopy</span> &mdash; <span class="dc-title">Creates a copy of the ArrayObject</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.getarraycopy-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::getArrayCopy</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Exports the <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayobject.php" class="classname">ArrayObject</a></span> to an array.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.getarraycopy-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.getarraycopy-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a copy of the array. When the <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayobject.php" class="classname">ArrayObject</a></span> refers to an object,   an array of the properties of that object will be returned.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.getarraycopy-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ArrayObject::getArrayCopy()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Array of available fruits<br /></span><span style="color: #9876AA">$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"lemons" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">"oranges" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #DD0000">"bananas" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #DD0000">"apples" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">10</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$fruitsArrayObject </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$fruitsArrayObject</span><span style="color: #007700">[</span><span style="color: #DD0000">'pears'</span><span style="color: #007700">] = </span><span style="color: #9876AA">4</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// create a copy of the array<br /></span><span style="color: #9876AA">$copy </span><span style="color: #007700">= </span><span style="color: #9876AA">$fruitsArrayObject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getArrayCopy</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$copy</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [lemons] =&gt; 1<br>    [oranges] =&gt; 4<br>    [bananas] =&gt; 5<br>    [apples] =&gt; 10<br>    [pears] =&gt; 4<br>)<br></span></div>    </div>   </div>  </span> </div></div>
     * @return array<TValue> a copy of the array. When the <b>ArrayObject</b> refers to an object*/
    public function getArrayCopy(): array {}

/**
*<div id="arrayobject.count" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::count</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::count</span> &mdash; <span class="dc-title">统计 ArrayObject 内 public 属性的数量</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.count-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::count</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   获取 <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayobject.php" class="classname">ArrayObject</a></span> 的 public 属性数量  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.count-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.count-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   对象 <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayobject.php" class="classname">ArrayObject</a></span> 的 public 属性数量  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    当对象 <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayobject.php" class="classname">ArrayObject</a></span> 是从数组构造而来时，所有属性都是 public 的。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.count-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ArrayObject::count()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">Example </span><span style="color: #007700">{<br />    public </span><span style="color: #9876AA">$public </span><span style="color: #007700">= </span><span style="color: #DD0000">'prop:public'</span><span style="color: #007700">;<br />    private </span><span style="color: #9876AA">$prv   </span><span style="color: #007700">= </span><span style="color: #DD0000">'prop:private'</span><span style="color: #007700">;<br />    protected </span><span style="color: #9876AA">$prt </span><span style="color: #007700">= </span><span style="color: #DD0000">'prop:protected'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">$arrayobj </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(new </span><span style="color: #9876AA">Example</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayobj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">count</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">$arrayobj </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'first'</span><span style="color: #007700">,</span><span style="color: #DD0000">'second'</span><span style="color: #007700">,</span><span style="color: #DD0000">'third'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayobj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">count</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(1)<br>int(3)<br></span></div>    </div>   </div>  </span> </div> </div>
     * @return int The number of public properties in the ArrayObject.*/
    public function count(): int {}

/**
*<div id="arrayobject.getflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::getFlags</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::getFlags</span> &mdash; <span class="dc-title">Gets the behavior flags</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.getflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::getFlags</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Gets the behavior flags of the <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayobject.php" class="classname">ArrayObject</a></span>. See the   {@link ArrayObject::setFlags}   method for a list of the available flags.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.getflags-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.getflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the behavior flags of the ArrayObject.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.getflags-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ArrayObject::getFlags()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Array of available fruits<br /></span><span style="color: #9876AA">$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"lemons" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">"oranges" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #DD0000">"bananas" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #DD0000">"apples" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">10</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$fruitsArrayObject </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Get the current flags<br /></span><span style="color: #9876AA">$flags </span><span style="color: #007700">= </span><span style="color: #9876AA">$fruitsArrayObject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFlags</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$flags</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Set new flags<br /></span><span style="color: #9876AA">$fruitsArrayObject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setFlags</span><span style="color: #007700">(</span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">::</span><span style="color: #9876AA">ARRAY_AS_PROPS</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Get the new flags<br /></span><span style="color: #9876AA">$flags </span><span style="color: #007700">= </span><span style="color: #9876AA">$fruitsArrayObject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getFlags</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$flags</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(0)<br>int(2)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayobject.getflags-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::setFlags()} - Sets the behavior flags</span></li>   </ul>  </span> </div></div>
     * @return int the behavior flags of the ArrayObject.*/
    public function getFlags(): int {}

/**
*<div id="arrayobject.setflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::setFlags</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::setFlags</span> &mdash; <span class="dc-title">Sets the behavior flags</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.setflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::setFlags</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Set the flags that change the behavior of the ArrayObject.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.setflags-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       The new ArrayObject behavior.       It takes on either a bitmask, or named constants. Using named       constants is strongly encouraged to ensure compatibility for future       versions.      </p>      <p class="para">       The available behavior flags are listed below. The actual       meanings of these flags are described in the       <a href="https://www.php.net/manual/zh/class.arrayobject.php#arrayobject.constants" class="link">predefined constants</a>.       <table class="doctable table">        <caption><strong>ArrayObject behavior flags</strong></caption>                 <thead>          <tr>           <th>value</th>           <th>constant</th>          </tr>         </thead>         <tbody class="tbody">          <tr>           <td>1</td>           <td>            {@link ArrayObject::STD_PROP_LIST}           </td>          </tr>          <tr>           <td>2</td>           <td>            {@link ArrayObject::ARRAY_AS_PROPS}           </td>          </tr>         </tbody>               </table>      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.setflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.setflags-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ArrayObject::setFlags()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Array of available fruits<br /></span><span style="color: #9876AA">$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"lemons" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">"oranges" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #DD0000">"bananas" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #DD0000">"apples" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">10</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$fruitsArrayObject </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Try to use array key as property<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruitsArrayObject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">lemons</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// Set the flag so that the array keys can be used as properties of the ArrayObject<br /></span><span style="color: #9876AA">$fruitsArrayObject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setFlags</span><span style="color: #007700">(</span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">::</span><span style="color: #9876AA">ARRAY_AS_PROPS</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// Try it again<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruitsArrayObject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">lemons</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>NULL<br>int(1)<br></span></div>    </div>   </div>  </span> </div></div>
     * @return void*/
    public function setFlags(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags): void {}

/**
*<div id="arrayobject.asort" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::asort</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::asort</span> &mdash; <span class="dc-title">Sort the entries by value</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.asort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::asort</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>SORT_REGULAR</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   Sorts the entries in ascending order,   such that its keys maintain their correlation with the values they   are associated with.  </p>  <p class="para">   This is used mainly when sorting associative arrays where the actual   element order is significant.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.asort-parameters">  <h3 class="title">参数</h3>  <dl>     <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>  <dd>  <span>    可选的第二个参数 <span class="parameter" style="color:#3A95FF">flags</span>     可以用以下值改变排序的行为：  </span>  <p class="para">    排序类型标记：    <ul class="itemizedlist">    <li class="listitem">      <span class="simpara"><strong><span>SORT_REGULAR</span></strong>  - 正常比较单元         详细描述参见 <a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">比较运算符</a> 章节</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_NUMERIC</span></strong> - 单元被作为数字来比较</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_STRING</span></strong> - 单元被作为字符串来比较</span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_LOCALE_STRING</span></strong> -      根据当前的区域（locale）设置来把单元当作字符串比较，可以用      <span class="function">{@link setlocale()}</span> 来改变。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_NATURAL</span></strong> - 和 <span class="function">{@link natsort()}</span>      类似对每个单元以“自然的顺序”对字符串进行排序。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_FLAG_CASE</span></strong> - 能够与      <strong><span>SORT_STRING</span></strong> 或         <strong><span>SORT_NATURAL</span></strong>          合并（OR 位运算），不区分大小写排序字符串。      </span>    </li>    </ul>  </p>  </dd>  </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.asort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-arrayobject.asort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.asort-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ArrayObject::asort()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"d" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"lemon"</span><span style="color: #007700">, </span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"orange"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"banana"</span><span style="color: #007700">, </span><span style="color: #DD0000">"c" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"apple"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$fruitArrayObject </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$fruitArrayObject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">asort</span><span style="color: #007700">();<br /><br />foreach (</span><span style="color: #9876AA">$fruitArrayObject </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$val</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000"> = </span><span style="color: #9876AA">$val</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>c = apple<br>b = banana<br>d = lemon<br>a = orange<br></span></div>    </div>    <div class="example-contents"><p>     The fruits have been sorted in alphabetical order, and the key     associated with each entry has been maintained.    </p></div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayobject.asort-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::ksort()} - Sort the entries by key</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::natsort()} - Sort entries using a &quot;natural order&quot; algorithm</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::natcasesort()} - Sort an array using a case insensitive &quot;natural order&quot; algorithm</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::uasort()} - Sort the entries with a user-defined comparison function and maintain key association</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::uksort()} - Sort the entries by keys using a user-defined comparison function</span></li>    <li class="member"><span class="function">{@link asort()} - 对数组进行升序排序并保持索引关系</span></li>   </ul>  </span> </div></div>
*/
    public function asort(#[PhpStormStubsElementAvailable(from: '8.0')] int $flags = SORT_REGULAR) {}

/**
*<div id="arrayobject.ksort" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::ksort</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::ksort</span> &mdash; <span class="dc-title">Sort the entries by key</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.ksort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::ksort</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>SORT_REGULAR</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   Sorts the entries by key, maintaining key to entry correlations. This is   useful mainly for associative arrays.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.ksort-parameters">  <h3 class="title">参数</h3>  <dl>     <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>  <dd>  <span>    可选的第二个参数 <span class="parameter" style="color:#3A95FF">flags</span>     可以用以下值改变排序的行为：  </span>  <p class="para">    排序类型标记：    <ul class="itemizedlist">    <li class="listitem">      <span class="simpara"><strong><span>SORT_REGULAR</span></strong>  - 正常比较单元         详细描述参见 <a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">比较运算符</a> 章节</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_NUMERIC</span></strong> - 单元被作为数字来比较</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_STRING</span></strong> - 单元被作为字符串来比较</span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_LOCALE_STRING</span></strong> -      根据当前的区域（locale）设置来把单元当作字符串比较，可以用      <span class="function">{@link setlocale()}</span> 来改变。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_NATURAL</span></strong> - 和 <span class="function">{@link natsort()}</span>      类似对每个单元以“自然的顺序”对字符串进行排序。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_FLAG_CASE</span></strong> - 能够与      <strong><span>SORT_STRING</span></strong> 或         <strong><span>SORT_NATURAL</span></strong>          合并（OR 位运算），不区分大小写排序字符串。      </span>    </li>    </ul>  </p>  </dd>  </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.ksort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-arrayobject.ksort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.ksort-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ArrayObject::ksort()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"d" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"lemon"</span><span style="color: #007700">, </span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"orange"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"banana"</span><span style="color: #007700">, </span><span style="color: #DD0000">"c" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"apple"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$fruitArrayObject </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$fruitArrayObject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ksort</span><span style="color: #007700">();<br /><br />foreach (</span><span style="color: #9876AA">$fruitArrayObject </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$val</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000"> = </span><span style="color: #9876AA">$val</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /> </span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>a = orange<br>b = banana<br>c = apple<br>d = lemon<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayobject.ksort-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::asort()} - Sort the entries by value</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::natsort()} - Sort entries using a &quot;natural order&quot; algorithm</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::natcasesort()} - Sort an array using a case insensitive &quot;natural order&quot; algorithm</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::uasort()} - Sort the entries with a user-defined comparison function and maintain key association</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::uksort()} - Sort the entries by keys using a user-defined comparison function</span></li>    <li class="member"><span class="function">{@link ksort()} - 对数组根据键名升序排序</span></li>   </ul>  </span> </div></div>
*/
    public function ksort(#[PhpStormStubsElementAvailable(from: '8.0')] int $flags = SORT_REGULAR) {}

/**
*<div id="arrayobject.uasort" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::uasort</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::uasort</span> &mdash; <span class="dc-title">Sort the entries with a user-defined comparison function and maintain key association</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.uasort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::uasort</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   This function sorts the entries such that keys maintain their   correlation with the entry that they are associated with, using a   user-defined comparison function.  </p>  <p class="para">   This is used mainly when sorting associative arrays where the actual   element order is significant.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.uasort-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para"> 在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。</p><div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$b</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="caution"><strong class="caution">警告</strong> <p class="para">  从比较函数中返回<em>非整数</em>值，例如 <span class="type" style="color:#EAB766">float</span>，将导致内部强制转换为 callback 返回值为  <span class="type" style="color:#EAB766">int</span>。因此，诸如 <span>0.99</span> 和 <span>0.1</span> 之类的值都将被转换为整数值  <span>0</span>，将这些值比较的话将会是相等。 </p></div>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.uasort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-arrayobject.uasort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.uasort-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ArrayObject::uasort()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Comparison function<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">cmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">) {<br />    if (</span><span style="color: #9876AA">$a </span><span style="color: #007700">== </span><span style="color: #9876AA">$b</span><span style="color: #007700">) {<br />        return </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br />    }<br />    return (</span><span style="color: #9876AA">$a </span><span style="color: #007700">&lt; </span><span style="color: #9876AA">$b</span><span style="color: #007700">) ? -</span><span style="color: #9876AA">1 </span><span style="color: #007700">: </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// Array to be sorted<br /></span><span style="color: #9876AA">$array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'a' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #DD0000">'b' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">8</span><span style="color: #007700">, </span><span style="color: #DD0000">'c' </span><span style="color: #007700">=&gt; -</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">'d' </span><span style="color: #007700">=&gt; -</span><span style="color: #9876AA">9</span><span style="color: #007700">, </span><span style="color: #DD0000">'e' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #DD0000">'f' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #DD0000">'g' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #DD0000">'h' </span><span style="color: #007700">=&gt; -</span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$arrayObject </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayObject</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Sort and print the resulting array<br /></span><span style="color: #9876AA">$arrayObject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">uasort</span><span style="color: #007700">(</span><span style="color: #DD0000">'cmp'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$arrayObject</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [a] =&gt; 4<br>    [b] =&gt; 8<br>    [c] =&gt; -1<br>    [d] =&gt; -9<br>    [e] =&gt; 2<br>    [f] =&gt; 5<br>    [g] =&gt; 3<br>    [h] =&gt; -4<br>)<br>Array<br>(<br>    [d] =&gt; -9<br>    [h] =&gt; -4<br>    [c] =&gt; -1<br>    [e] =&gt; 2<br>    [g] =&gt; 3<br>    [a] =&gt; 4<br>    [f] =&gt; 5<br>    [b] =&gt; 8<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayobject.uasort-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::asort()} - Sort the entries by value</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::ksort()} - Sort the entries by key</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::natsort()} - Sort entries using a &quot;natural order&quot; algorithm</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::natcasesort()} - Sort an array using a case insensitive &quot;natural order&quot; algorithm</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::uksort()} - Sort the entries by keys using a user-defined comparison function</span></li>    <li class="member"><span class="function">{@link uasort()} - 使用用户定义的比较函数对数组进行排序并保持索引关联</span></li>   </ul>  </span> </div></div>
*/
    public function uasort(#[LanguageLevelTypeAware(['8.0' => 'callable'], default: '')] $callback) {}

/**
*<div id="arrayobject.uksort" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::uksort</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::uksort</span> &mdash; <span class="dc-title">Sort the entries by keys using a user-defined comparison function</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.uksort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::uksort</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   This function sorts the keys of the entries using a user-supplied   comparison function. The key to entry correlations will be maintained.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.uksort-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para"> 在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。</p><div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$b</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="caution"><strong class="caution">警告</strong> <p class="para">  从比较函数中返回<em>非整数</em>值，例如 <span class="type" style="color:#EAB766">float</span>，将导致内部强制转换为 callback 返回值为  <span class="type" style="color:#EAB766">int</span>。因此，诸如 <span>0.99</span> 和 <span>0.1</span> 之类的值都将被转换为整数值  <span>0</span>，将这些值比较的话将会是相等。 </p></div>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.uksort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-arrayobject.uksort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.uksort-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ArrayObject::uksort()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #9876AA">cmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">$a </span><span style="color: #007700">= </span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">'@^(a|an|the) @'</span><span style="color: #007700">, </span><span style="color: #DD0000">''</span><span style="color: #007700">, </span><span style="color: #9876AA">$a</span><span style="color: #007700">);<br />    </span><span style="color: #9876AA">$b </span><span style="color: #007700">= </span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">'@^(a|an|the) @'</span><span style="color: #007700">, </span><span style="color: #DD0000">''</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br />    return </span><span style="color: #9876AA">strcasecmp</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">);<br />}<br /><br /></span><span style="color: #9876AA">$array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"John" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">"the Earth" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">2</span><span style="color: #007700">, </span><span style="color: #DD0000">"an apple" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #DD0000">"a banana" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$arrayObject </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$arrayObject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">uksort</span><span style="color: #007700">(</span><span style="color: #DD0000">'cmp'</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$arrayObject </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$value</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$key</span><span style="color: #DD0000">: </span><span style="color: #9876AA">$value</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>an apple: 3<br>a banana: 4<br>the Earth: 2<br>John: 1<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayobject.uksort-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::asort()} - Sort the entries by value</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::ksort()} - Sort the entries by key</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::natsort()} - Sort entries using a &quot;natural order&quot; algorithm</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::natcasesort()} - Sort an array using a case insensitive &quot;natural order&quot; algorithm</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::uasort()} - Sort the entries with a user-defined comparison function and maintain key association</span></li>    <li class="member"><span class="function">{@link uksort()} - 使用用户自定义的比较函数对数组中的键名进行排序</span></li>   </ul>  </span> </div></div>
*/
    public function uksort(#[LanguageLevelTypeAware(['8.0' => 'callable'], default: '')] $callback) {}

/**
*<div id="arrayobject.natsort" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::natsort</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::natsort</span> &mdash; <span class="dc-title">Sort entries using a &quot;natural order&quot; algorithm</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.natsort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::natsort</strong></span>(): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   This method implements a sort algorithm that orders alphanumeric strings  in the way a human being would while maintaining key/value associations.   This is described as a &quot;natural ordering&quot;.  An example of the difference   between this algorithm and the regular computer string sorting algorithms   (used in {@link ArrayObject::asort}) method   can be seen in the example below.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.natsort-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.natsort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-arrayobject.natsort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.natsort-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ArrayObject::natsort()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"img12.png"</span><span style="color: #007700">, </span><span style="color: #DD0000">"img10.png"</span><span style="color: #007700">, </span><span style="color: #DD0000">"img2.png"</span><span style="color: #007700">, </span><span style="color: #DD0000">"img1.png"</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$arr1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$arr2 </span><span style="color: #007700">= clone </span><span style="color: #9876AA">$arr1</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$arr1</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">asort</span><span style="color: #007700">();<br />echo </span><span style="color: #DD0000">"Standard sorting\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr1</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$arr2</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">natsort</span><span style="color: #007700">();<br />echo </span><span style="color: #DD0000">"\nNatural order sorting\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Standard sorting<br>ArrayObject Object<br>(<br>    [3] =&gt; img1.png<br>    [1] =&gt; img10.png<br>    [0] =&gt; img12.png<br>    [2] =&gt; img2.png<br>)<br><br>Natural order sorting<br>ArrayObject Object<br>(<br>    [3] =&gt; img1.png<br>    [2] =&gt; img2.png<br>    [1] =&gt; img10.png<br>    [0] =&gt; img12.png<br>)<br></span></div>    </div>    <div class="example-contents"><p>     For more information see: Martin Pool&#039;s <a href="https://www.php.net/manual/zh/https://github.com/sourcefrog/natsort" class="link external">&raquo;&nbsp;Natural Order String Comparison</a>     page.    </p></div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayobject.natsort-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::asort()} - Sort the entries by value</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::ksort()} - Sort the entries by key</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::natcasesort()} - Sort an array using a case insensitive &quot;natural order&quot; algorithm</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::uasort()} - Sort the entries with a user-defined comparison function and maintain key association</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::uksort()} - Sort the entries by keys using a user-defined comparison function</span></li>    <li class="member"><span class="function">{@link natsort()} - 用&ldquo;自然排序&rdquo;算法对数组排序</span></li>   </ul>  </span> </div></div>
*/
    public function natsort() {}

/**
*<div id="arrayobject.natcasesort" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::natcasesort</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::natcasesort</span> &mdash; <span class="dc-title">Sort an array using a case insensitive &quot;natural order&quot; algorithm</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.natcasesort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::natcasesort</strong></span>(): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   This method is a case insensitive version of   {@link ArrayObject::natsort}.  </p>  <p class="para">   This method implements a sort algorithm that orders   alphanumeric strings in the way a human being would while maintaining   key/value associations.  This is described as a &quot;natural ordering&quot;.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.natcasesort-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.natcasesort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-arrayobject.natcasesort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.natcasesort-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ArrayObject::natcasesort()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'IMG0.png'</span><span style="color: #007700">, </span><span style="color: #DD0000">'img12.png'</span><span style="color: #007700">, </span><span style="color: #DD0000">'img10.png'</span><span style="color: #007700">, </span><span style="color: #DD0000">'img2.png'</span><span style="color: #007700">, </span><span style="color: #DD0000">'img1.png'</span><span style="color: #007700">, </span><span style="color: #DD0000">'IMG3.png'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$arr1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$arr2 </span><span style="color: #007700">= clone </span><span style="color: #9876AA">$arr1</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$arr1</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">asort</span><span style="color: #007700">();<br />echo </span><span style="color: #DD0000">"Standard sorting\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr1</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$arr2</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">natcasesort</span><span style="color: #007700">();<br />echo </span><span style="color: #DD0000">"\nNatural order sorting (case-insensitive)\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Standard sorting<br>ArrayObject Object<br>(<br>    [0] =&gt; IMG0.png<br>    [5] =&gt; IMG3.png<br>    [4] =&gt; img1.png<br>    [2] =&gt; img10.png<br>    [1] =&gt; img12.png<br>    [3] =&gt; img2.png<br>)<br><br>Natural order sorting (case-insensitive)<br>ArrayObject Object<br>(<br>    [0] =&gt; IMG0.png<br>    [4] =&gt; img1.png<br>    [3] =&gt; img2.png<br>    [5] =&gt; IMG3.png<br>    [2] =&gt; img10.png<br>    [1] =&gt; img12.png<br>)<br></span></div>    </div>    <div class="example-contents"><p>     For more information see: Martin Pool&#039;s <a href="https://www.php.net/manual/zh/https://github.com/sourcefrog/natsort" class="link external">&raquo;&nbsp;Natural Order String Comparison</a>     page.    </p></div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayobject.natcasesort-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::asort()} - Sort the entries by value</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::ksort()} - Sort the entries by key</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::natsort()} - Sort entries using a &quot;natural order&quot; algorithm</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::uasort()} - Sort the entries with a user-defined comparison function and maintain key association</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::uksort()} - Sort the entries by keys using a user-defined comparison function</span></li>    <li class="member"><span class="function">{@link natcasesort()} - 用&ldquo;自然排序&rdquo;算法对数组进行不区分大小写字母的排序</span></li>   </ul>  </span> </div></div>
*/
    public function natcasesort() {}

/**
*<div id="arrayobject.unserialize" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::unserialize</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::unserialize</span> &mdash; <span class="dc-title">Unserialize an ArrayObject</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.unserialize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::unserialize</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Unserializes a serialized <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayobject.php" class="classname">ArrayObject</a></span>.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.unserialize-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">data</span></dt>     <dd>      <p class="para">       The serialized <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayobject.php" class="classname">ArrayObject</a></span>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.unserialize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayobject.unserialize-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::serialize()} - Serialize</span></li>    <li class="member"><span class="function">{@link unserialize()} - 从已存储的表示中创建 PHP 的值</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.serialization.php" class="link">Serializing Objects</a></li>   </ul>  </span> </div></div>
     * @return void*/
    public function unserialize(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $data): void {}

/**
*<div id="arrayobject.serialize" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::serialize</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::serialize</span> &mdash; <span class="dc-title">Serialize an ArrayObject</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.serialize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::serialize</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Serializes an <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayobject.php" class="classname">ArrayObject</a></span>.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.serialize-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.serialize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The serialized representation of the <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayobject.php" class="classname">ArrayObject</a></span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.serialize-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ArrayObject::serialize()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$o </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$s1 </span><span style="color: #007700">= </span><span style="color: #9876AA">serialize</span><span style="color: #007700">(</span><span style="color: #9876AA">$o</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$s2 </span><span style="color: #007700">= </span><span style="color: #9876AA">$o</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">serialize</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s1</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$s2</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(45) &quot;C:11:&quot;ArrayObject&quot;:21:{x:i:0;a:0:{};m:a:0:{}}&quot;<br>string(21) &quot;x:i:0;a:0:{};m:a:0:{}&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayobject.serialize-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayObject::unserialize()} - Unserialize an ArrayObject</span></li>    <li class="member"><span class="function">{@link serialize()} - 生成值的可存储表示</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/language.oop5.serialization.php" class="link">Serializing Objects</a></li>   </ul>  </span> </div></div>
     * @return string The serialized representation of the <b>ArrayObject</b>.*/
    public function serialize(): string {}

    /**
     * @return array
     * @since 7.4
     */
    #[TentativeType]
    public function __debugInfo(): array {}

    /**
     * @return array
     * @since 7.4
     */
    #[TentativeType]
    public function __serialize(): array {}

    /**
     * @param array $data
     * @since 7.4
     */
    #[TentativeType]
    public function __unserialize(array $data): void {}

/**
*<div id="arrayobject.getiterator" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::getIterator</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::getIterator</span> &mdash; <span class="dc-title">Create a new iterator from an ArrayObject instance</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.getiterator-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::getIterator</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.iterator.php" class="type Iterator" style="color:#EAB766">Iterator</a></span></div>  <p class="para rdfs-comment">   Create a new iterator from an <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayobject.php" class="classname">ArrayObject</a></span> instance.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.getiterator-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.getiterator-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   An iterator from an <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayobject.php" class="classname">ArrayObject</a></span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.getiterator-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ArrayObject::getIterator()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'1' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'one'</span><span style="color: #007700">,<br />               </span><span style="color: #DD0000">'2' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'two'</span><span style="color: #007700">,<br />               </span><span style="color: #DD0000">'3' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'three'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$arrayobject </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$iterator </span><span style="color: #007700">= </span><span style="color: #9876AA">$arrayobject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getIterator</span><span style="color: #007700">();<br /><br />while(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()) {<br />    echo </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">() . </span><span style="color: #DD0000">' =&gt; ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br />    </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>1 =&gt; one<br>2 =&gt; two<br>3 =&gt; three<br></span></div>    </div>   </div>  </span> </div></div>
     * @return ArrayIterator<TKey, TValue> An iterator from an <b>ArrayObject</b>.*/
    public function getIterator(): Iterator {}

/**
*<div id="arrayobject.exchangearray" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::exchangeArray</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::exchangeArray</span> &mdash; <span class="dc-title">Exchange the array for another one</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.exchangearray-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::exchangeArray</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">object</span></span> <span class="parameter" style="color:#3A95FF">$array</span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Exchange the current <span class="type" style="color:#EAB766">array</span> with another <span class="type" style="color:#EAB766">array</span> or <span class="type" style="color:#EAB766">object</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.exchangearray-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       The new <span class="type" style="color:#EAB766">array</span> or <span class="type" style="color:#EAB766">object</span> to exchange with the current array.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.exchangearray-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the old <span class="type" style="color:#EAB766">array</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.exchangearray-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ArrayObject::exchangeArray()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Array of available fruits<br /></span><span style="color: #9876AA">$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"lemons" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">"oranges" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #DD0000">"bananas" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #DD0000">"apples" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">10</span><span style="color: #007700">);<br /></span><span style="color: #FF8000">// Array of locations in Europe<br /></span><span style="color: #9876AA">$locations </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'Amsterdam'</span><span style="color: #007700">, </span><span style="color: #DD0000">'Paris'</span><span style="color: #007700">, </span><span style="color: #DD0000">'London'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$fruitsArrayObject </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Now exchange fruits for locations<br /></span><span style="color: #9876AA">$old </span><span style="color: #007700">= </span><span style="color: #9876AA">$fruitsArrayObject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exchangeArray</span><span style="color: #007700">(</span><span style="color: #9876AA">$locations</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$old</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruitsArrayObject</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [lemons] =&gt; 1<br>    [oranges] =&gt; 4<br>    [bananas] =&gt; 5<br>    [apples] =&gt; 10<br>)<br>ArrayObject Object<br>(<br>    [0] =&gt; Amsterdam<br>    [1] =&gt; Paris<br>    [2] =&gt; London<br>)<br></span></div>    </div>   </div>  </span> </div></div>
     * @return array the old array.*/
    public function exchangeArray(#[LanguageLevelTypeAware(['8.0' => 'object|array'], default: '')] $array): array {}

/**
*<div id="arrayobject.setiteratorclass" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::setIteratorClass</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::setIteratorClass</span> &mdash; <span class="dc-title">Sets the iterator classname for the ArrayObject</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.setiteratorclass-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::setIteratorClass</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$iteratorClass</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets the classname of the array iterator that is used by   {@link ArrayObject::getIterator()}.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.setiteratorclass-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">iteratorClass</span></dt>     <dd>      <p class="para">       The classname of the array iterator to use when iterating over this object.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.setiteratorclass-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.setiteratorclass-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ArrayObject::setIteratorClass()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Custom ArrayIterator (inherits from ArrayIterator)<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">MyArrayIterator </span><span style="color: #007700">extends </span><span style="color: #9876AA">ArrayIterator </span><span style="color: #007700">{<br />    </span><span style="color: #FF8000">// custom implementation<br /></span><span style="color: #007700">}<br /><br /></span><span style="color: #FF8000">// Array of available fruits<br /></span><span style="color: #9876AA">$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"lemons" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">"oranges" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #DD0000">"bananas" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #DD0000">"apples" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">10</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$fruitsArrayObject </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Set the iterator classname to the newly<br /></span><span style="color: #9876AA">$fruitsArrayObject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setIteratorClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'MyArrayIterator'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruitsArrayObject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getIterator</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>MyArrayIterator Object<br>(<br>    [lemons] =&gt; 1<br>    [oranges] =&gt; 4<br>    [bananas] =&gt; 5<br>    [apples] =&gt; 10<br>)<br></span></div>    </div>   </div>  </span> </div></div>
     * @return void*/
    public function setIteratorClass(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $iteratorClass): void {}

/**
*<div id="arrayobject.getiteratorclass" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayObject::getIteratorClass</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayObject::getIteratorClass</span> &mdash; <span class="dc-title">Gets the iterator classname for the ArrayObject</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayobject.getiteratorclass-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayObject::getIteratorClass</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Gets the class name of the array iterator that is used by   {@link ArrayObject::getIterator()}.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayobject.getiteratorclass-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayobject.getiteratorclass-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the iterator class name that is used to iterate over this object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayobject.getiteratorclass-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ArrayObject::getIteratorClass()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Custom ArrayIterator (inherits from ArrayIterator)<br /></span><span style="color: #007700">class </span><span style="color: #9876AA">MyArrayIterator </span><span style="color: #007700">extends </span><span style="color: #9876AA">ArrayIterator </span><span style="color: #007700">{<br />    </span><span style="color: #FF8000">// custom implementation<br /></span><span style="color: #007700">}<br /><br /></span><span style="color: #FF8000">// Array of available fruits<br /></span><span style="color: #9876AA">$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"lemons" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #DD0000">"oranges" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">4</span><span style="color: #007700">, </span><span style="color: #DD0000">"bananas" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">5</span><span style="color: #007700">, </span><span style="color: #DD0000">"apples" </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">10</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$fruitsArrayObject </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Get the current class name<br /></span><span style="color: #9876AA">$className </span><span style="color: #007700">= </span><span style="color: #9876AA">$fruitsArrayObject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getIteratorClass</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$className</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Set new classname<br /></span><span style="color: #9876AA">$fruitsArrayObject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setIteratorClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'MyArrayIterator'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Get the new iterator classname<br /></span><span style="color: #9876AA">$className </span><span style="color: #007700">= </span><span style="color: #9876AA">$fruitsArrayObject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getIteratorClass</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$className</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(13) &quot;ArrayIterator&quot;<br>string(15) &quot;MyArrayIterator&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayobject.getiteratorclass-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member">The {@link ArrayObject::setIteratorClass} method</li>   </ul>  </span> </div></div>
     * @return class-string<ArrayIterator> the iterator class name that is used to iterate over this object.*/
    public function getIteratorClass(): string {}
}

/**
*<div id="class.arrayiterator" class="reference"> <h1 class="title">ArrayIterator 类</h1>   <div class="partintro"><p class="verinfo">(PHP 5, PHP 7, PHP 8)</p>   <div class="section" id="arrayiterator.intro">   <h2 class="title">简介</h2>   <p class="para">    允许在迭代数组和对象时删除元素以及更新值或键。   </p>   <p class="para">    当你想多次遍历相同数组时你需要实例化 ArrayObject，然后让这个实例创建一个 ArrayIterator 实例。    当你想遍历相同数组时多次你需要实例 ArrayObject 并且让这个实例创建一个 ArrayIterator 实例，然后使用    <a href="https://www.php.net/manual/zh/control-structures.foreach.php" class="link">foreach</a> 或者手动调用 getIterator() 方法。   </p>  </div>   <div class="section" id="arrayiterator.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">ArrayIterator</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.seekableiterator.php" class="interfacename">SeekableIterator</a>,     <a href="https://www.php.net/manual/zh/class.arrayaccess.php" class="interfacename">ArrayAccess</a>,     <a href="https://www.php.net/manual/zh/class.serializable.php" class="interfacename">Serializable</a>,     <a href="https://www.php.net/manual/zh/class.countable.php" class="interfacename">Countable</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.arrayiterator.php#arrayiterator.constants.std-prop-list"><var class="varname">STD_PROP_LIST</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.arrayiterator.php#arrayiterator.constants.array-as-props"><var class="varname">ARRAY_AS_PROPS</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">object</span></span> <span class="parameter" style="color:#3A95FF">$array</span><span class="initializer"> = []</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.append.php" class="methodname" style="color:#CC7832">append</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.asort.php" class="methodname" style="color:#CC7832">asort</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>SORT_REGULAR</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.count.php" class="methodname" style="color:#CC7832">count</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.getarraycopy.php" class="methodname" style="color:#CC7832">getArrayCopy</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.getflags.php" class="methodname" style="color:#CC7832">getFlags</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">null</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.ksort.php" class="methodname" style="color:#CC7832">ksort</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>SORT_REGULAR</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.natcasesort.php" class="methodname" style="color:#CC7832">natcasesort</a></span>(): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.natsort.php" class="methodname" style="color:#CC7832">natsort</a></span>(): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.offsetexists.php" class="methodname" style="color:#CC7832">offsetExists</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.offsetget.php" class="methodname" style="color:#CC7832">offsetGet</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.offsetset.php" class="methodname" style="color:#CC7832">offsetSet</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.offsetunset.php" class="methodname" style="color:#CC7832">offsetUnset</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.seek.php" class="methodname" style="color:#CC7832">seek</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.serialize.php" class="methodname" style="color:#CC7832">serialize</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.setflags.php" class="methodname" style="color:#CC7832">setFlags</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.uasort.php" class="methodname" style="color:#CC7832">uasort</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.uksort.php" class="methodname" style="color:#CC7832">uksort</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.unserialize.php" class="methodname" style="color:#CC7832">unserialize</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/arrayiterator.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>   </div>   <div class="section" id="arrayiterator.constants">   <h2 class="title">预定义常量</h2>   <div class="section" id="arrayiterator.constants.flags">    <h2 class="title">ArrayIterator 标记</h2>    <dl>           <dt id="arrayiterator.constants.std-prop-list"><strong><span>ArrayIterator::STD_PROP_LIST</span></strong></dt>      <dd>       <p class="para">Properties of the object have their normal functionality when accessed as list (var_dump, foreach, etc.).</p>      </dd>                <dt id="arrayiterator.constants.array-as-props"><strong><span>ArrayIterator::ARRAY_AS_PROPS</span></strong></dt>      <dd>       <p class="para">可以通过属性访问条目（读写都支持）。</p>      </dd>         </dl>   </div>  </div>    </div>   <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ArrayIterator::append} — Append an element</li><li>{@link ArrayIterator::asort} — Sort entries by values</li><li>{@link ArrayIterator::__construct} — Construct an ArrayIterator</li><li>{@link ArrayIterator::count} — Count elements</li><li>{@link ArrayIterator::current} — Return current array entry</li><li>{@link ArrayIterator::getArrayCopy} — Get array copy</li><li>{@link ArrayIterator::getFlags} — Get behavior flags</li><li>{@link ArrayIterator::key} — Return current array key</li><li>{@link ArrayIterator::ksort} — Sort entries by keys</li><li>{@link ArrayIterator::natcasesort} — Sort entries naturally, case insensitive</li><li>{@link ArrayIterator::natsort} — Sort entries naturally</li><li>{@link ArrayIterator::next} — Move to next entry</li><li>{@link ArrayIterator::offsetExists} — Check if offset exists</li><li>{@link ArrayIterator::offsetGet} — Get value for an offset</li><li>{@link ArrayIterator::offsetSet} — Set value for an offset</li><li>{@link ArrayIterator::offsetUnset} — Unset value for an offset</li><li>{@link ArrayIterator::rewind} — Rewind array back to the start</li><li>{@link ArrayIterator::seek} — Seek to position</li><li>{@link ArrayIterator::serialize} — Serialize</li><li>{@link ArrayIterator::setFlags} — Set behaviour flags</li><li>{@link ArrayIterator::uasort} — Sort with a user-defined comparison function and maintain index association</li><li>{@link ArrayIterator::uksort} — Sort by keys using a user-defined comparison function</li><li>{@link ArrayIterator::unserialize} — Unserialize</li><li>{@link ArrayIterator::valid} — Check whether array contains more entries</li></ul></div>
*/
class ArrayIterator implements SeekableIterator, ArrayAccess, Serializable, Countable
{
    public const STD_PROP_LIST = 1;
    public const ARRAY_AS_PROPS = 2;

    /**
     * Construct an ArrayIterator
     * @link https://php.net/manual/en/arrayiterator.construct.php
     * @param array $array The array or object to be iterated on.
     * @param int $flags Flags to control the behaviour of the ArrayObject object.
     * @see ArrayObject::setFlags()
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'object|array'], default: '')] $array = [],
        #[PhpStormStubsElementAvailable(from: '7.0')] #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags = 0,
        #[PhpStormStubsElementAvailable(from: '7.0', to: '7.1')] $iterator_class = null
    ) {}

/**
*<div id="arrayiterator.offsetexists" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::offsetExists</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::offsetExists</span> &mdash; <span class="dc-title">Check if offset exists</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.offsetexists-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::offsetExists</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the offset exists.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.offsetexists-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       The offset being checked.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.offsetexists-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the offset exists, otherwise <strong><span>false</span></strong>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayiterator.offsetexists-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::valid()} - Check whether array contains more entries</span></li>   </ul>  </span> </div></div>
     * @return bool true if the offset exists, otherwise false*/
    public function offsetExists(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $key): bool {}

/**
*<div id="arrayiterator.offsetget" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::offsetGet</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::offsetGet</span> &mdash; <span class="dc-title">Get value for an offset</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.offsetget-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::offsetGet</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Gets the value from the provided offset.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.offsetget-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       The offset to get the value from.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.offsetget-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The value at offset <span class="parameter" style="color:#3A95FF">key</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayiterator.offsetget-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::offsetSet()} - Set value for an offset</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::offsetUnset()} - Unset value for an offset</span></li>   </ul>  </span> </div></div>
     * @return mixed The value at offset <i>index</i>.*/
    public function offsetGet(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $key): mixed {}

/**
*<div id="arrayiterator.offsetset" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::offsetSet</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::offsetSet</span> &mdash; <span class="dc-title">Set value for an offset</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.offsetset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::offsetSet</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Sets a value for a given offset.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.offsetset-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       The index to set for.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The new value to store at the index.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.offsetset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayiterator.offsetset-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::offsetGet()} - Get value for an offset</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::offsetUnset()} - Unset value for an offset</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function offsetSet(
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $key,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value
    ): void {}

/**
*<div id="arrayiterator.offsetunset" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::offsetUnset</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::offsetUnset</span> &mdash; <span class="dc-title">Unset value for an offset</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.offsetunset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::offsetUnset</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Unsets a value for an offset.  </p>  <p class="para">   If iteration is in progress, and <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::offsetUnset()</strong></span> is used to   unset the current index of iteration, the iteration position will be advanced to the next index.   Since the iteration position is also advanced at the end of a   <a href="https://www.php.net/manual/zh/control-structures.foreach.php" class="link">foreach</a> loop body, use of   <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::offsetUnset()</strong></span> inside a   <a href="https://www.php.net/manual/zh/control-structures.foreach.php" class="link"><span>foreach</span></a> loop may result in   indices being skipped.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.offsetunset-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       The offset to unset.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.offsetunset-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayiterator.offsetunset-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::offsetGet()} - Get value for an offset</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::offsetSet()} - Set value for an offset</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function offsetUnset(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $key): void {}

/**
*<div id="arrayiterator.append" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::append</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::append</span> &mdash; <span class="dc-title">Append an element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.append-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::append</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Appends value as the last element.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.append-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The value to append.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.append-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div><br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-arrayiterator.append-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    This method cannot be called when the <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayiterator.php" class="classname">ArrayIterator</a></span>    refers to an <span class="type" style="color:#EAB766">object</span>.   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayiterator.append-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::next()} - Move to next entry</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function append(#[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value): void {}

/**
*<div id="arrayiterator.getarraycopy" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::getArrayCopy</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::getArrayCopy</span> &mdash; <span class="dc-title">Get array copy</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.getarraycopy-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::getArrayCopy</strong></span>(): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Get a copy of an array.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.getarraycopy-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.getarraycopy-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   A copy of the <span class="type" style="color:#EAB766">array</span>, or array of public properties   if ArrayIterator refers to an <span class="type" style="color:#EAB766">object</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayiterator.getarraycopy-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::valid()} - Check whether array contains more entries</span></li>   </ul>  </span> </div></div>
     * @return array A copy of the array, or array of public properties*/
    public function getArrayCopy(): array {}

/**
*<div id="arrayiterator.count" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::count</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::count</span> &mdash; <span class="dc-title">Count elements</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.count-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::count</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Gets the number of elements in the <span class="type" style="color:#EAB766">array</span>, or the number of   public properties in the <span class="type" style="color:#EAB766">object</span>.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.count-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.count-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The number of elements or public properties in the associated   <span class="type" style="color:#EAB766">array</span> or <span class="type" style="color:#EAB766">object</span>, respectively.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayiterator.count-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::getFlags()} - Get behavior flags</span></li>   </ul>  </span> </div></div>
     * @return int<0,max> The number of elements or public properties in the associated*/
    public function count(): int {}

/**
*<div id="arrayiterator.getflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::getFlags</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::getFlags</span> &mdash; <span class="dc-title">Get behavior flags</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.getflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::getFlags</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Gets the behavior flags of the <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayiterator.php" class="classname">ArrayIterator</a></span>. See the   {@link ArrayIterator::setFlags}   method for a list of the available flags.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.getflags-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.getflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the behavior flags of the ArrayIterator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayiterator.getflags-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::setFlags()} - Set behaviour flags</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::valid()} - Check whether array contains more entries</span></li>   </ul>  </span> </div></div>
     * @return int The current flags.*/
    public function getFlags(): int {}

/**
*<div id="arrayiterator.setflags" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::setFlags</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::setFlags</span> &mdash; <span class="dc-title">Set behaviour flags</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.setflags-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::setFlags</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Set the flags that change the behavior of the ArrayIterator.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.setflags-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       The new ArrayIterator behavior.       It takes on either a bitmask, or named constants. Using named       constants is strongly encouraged to ensure compatibility for future       versions.      </p>      <p class="para">       The available behavior flags are listed below. The actual       meanings of these flags are described in the       <a href="https://www.php.net/manual/zh/class.arrayiterator.php#arrayiterator.constants" class="link">predefined constants</a>.       <table class="doctable table">        <caption><strong>ArrayIterator behavior flags</strong></caption>                 <thead>          <tr>           <th>value</th>           <th>constant</th>          </tr>         </thead>         <tbody class="tbody">          <tr>           <td>1</td>           <td>            {@link ArrayIterator::STD_PROP_LIST}           </td>          </tr>          <tr>           <td>2</td>           <td>            {@link ArrayIterator::ARRAY_AS_PROPS}           </td>          </tr>         </tbody>               </table>      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.setflags-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayiterator.setflags-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::getFlags()} - Get behavior flags</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function setFlags(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $flags): void {}

/**
*<div id="arrayiterator.asort" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::asort</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::asort</span> &mdash; <span class="dc-title">Sort entries by values</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.asort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::asort</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>SORT_REGULAR</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   Sorts entries by their values.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.asort-parameters">  <h3 class="title">参数</h3>  <dl>     <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>  <dd>  <span>    可选的第二个参数 <span class="parameter" style="color:#3A95FF">flags</span>     可以用以下值改变排序的行为：  </span>  <p class="para">    排序类型标记：    <ul class="itemizedlist">    <li class="listitem">      <span class="simpara"><strong><span>SORT_REGULAR</span></strong>  - 正常比较单元         详细描述参见 <a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">比较运算符</a> 章节</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_NUMERIC</span></strong> - 单元被作为数字来比较</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_STRING</span></strong> - 单元被作为字符串来比较</span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_LOCALE_STRING</span></strong> -      根据当前的区域（locale）设置来把单元当作字符串比较，可以用      <span class="function">{@link setlocale()}</span> 来改变。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_NATURAL</span></strong> - 和 <span class="function">{@link natsort()}</span>      类似对每个单元以“自然的顺序”对字符串进行排序。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_FLAG_CASE</span></strong> - 能够与      <strong><span>SORT_STRING</span></strong> 或         <strong><span>SORT_NATURAL</span></strong>          合并（OR 位运算），不区分大小写排序字符串。      </span>    </li>    </ul>  </p>  </dd>  </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.asort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-arrayiterator.asort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayiterator.asort-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::ksort()} - Sort entries by keys</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::natcasesort()} - Sort entries naturally, case insensitive</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::natsort()} - Sort entries naturally</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::uasort()} - Sort with a user-defined comparison function and maintain index association</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::uksort()} - Sort by keys using a user-defined comparison function</span></li>    <li class="member"><span class="function">{@link asort()} - 对数组进行升序排序并保持索引关系</span></li>   </ul>  </span> </div></div>
*/
    public function asort(#[PhpStormStubsElementAvailable(from: '8.0')] int $flags = SORT_REGULAR) {}

/**
*<div id="arrayiterator.ksort" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::ksort</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::ksort</span> &mdash; <span class="dc-title">Sort entries by keys</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.ksort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::ksort</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>SORT_REGULAR</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   Sorts entries by their keys.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.ksort-parameters">  <h3 class="title">参数</h3>  <dl>     <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>  <dd>  <span>    可选的第二个参数 <span class="parameter" style="color:#3A95FF">flags</span>     可以用以下值改变排序的行为：  </span>  <p class="para">    排序类型标记：    <ul class="itemizedlist">    <li class="listitem">      <span class="simpara"><strong><span>SORT_REGULAR</span></strong>  - 正常比较单元         详细描述参见 <a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">比较运算符</a> 章节</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_NUMERIC</span></strong> - 单元被作为数字来比较</span>    </li>    <li class="listitem">      <span class="simpara"><strong><span>SORT_STRING</span></strong> - 单元被作为字符串来比较</span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_LOCALE_STRING</span></strong> -      根据当前的区域（locale）设置来把单元当作字符串比较，可以用      <span class="function">{@link setlocale()}</span> 来改变。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_NATURAL</span></strong> - 和 <span class="function">{@link natsort()}</span>      类似对每个单元以“自然的顺序”对字符串进行排序。      </span>    </li>    <li class="listitem">      <span class="simpara">      <strong><span>SORT_FLAG_CASE</span></strong> - 能够与      <strong><span>SORT_STRING</span></strong> 或         <strong><span>SORT_NATURAL</span></strong>          合并（OR 位运算），不区分大小写排序字符串。      </span>    </li>    </ul>  </p>  </dd>  </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.ksort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-arrayiterator.ksort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayiterator.ksort-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::asort()} - Sort entries by values</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::natcasesort()} - Sort entries naturally, case insensitive</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::natsort()} - Sort entries naturally</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::uasort()} - Sort with a user-defined comparison function and maintain index association</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::uksort()} - Sort by keys using a user-defined comparison function</span></li>    <li class="member"><span class="function">{@link ksort()} - 对数组根据键名升序排序</span></li>   </ul>  </span> </div></div>
*/
    public function ksort(#[PhpStormStubsElementAvailable(from: '8.0')] int $flags = SORT_REGULAR) {}

/**
*<div id="arrayiterator.uasort" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::uasort</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::uasort</span> &mdash; <span class="dc-title">Sort with a user-defined comparison function and maintain index association</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.uasort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::uasort</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   This method sorts the elements such that indices maintain their correlation   with the values they are associated with, using a user-defined comparison   function.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.uasort-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para"> 在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。</p><div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$b</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="caution"><strong class="caution">警告</strong> <p class="para">  从比较函数中返回<em>非整数</em>值，例如 <span class="type" style="color:#EAB766">float</span>，将导致内部强制转换为 callback 返回值为  <span class="type" style="color:#EAB766">int</span>。因此，诸如 <span>0.99</span> 和 <span>0.1</span> 之类的值都将被转换为整数值  <span>0</span>，将这些值比较的话将会是相等。 </p></div>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.uasort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-arrayiterator.uasort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayiterator.uasort-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::asort()} - Sort entries by values</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::ksort()} - Sort entries by keys</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::natcasesort()} - Sort entries naturally, case insensitive</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::natsort()} - Sort entries naturally</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::uksort()} - Sort by keys using a user-defined comparison function</span></li>    <li class="member"><span class="function">{@link uasort()} - 使用用户定义的比较函数对数组进行排序并保持索引关联</span></li>   </ul>  </span> </div></div>
*/
    public function uasort(#[LanguageLevelTypeAware(['8.0' => 'callable'], default: '')] $callback) {}

/**
*<div id="arrayiterator.uksort" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::uksort</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::uksort</span> &mdash; <span class="dc-title">Sort by keys using a user-defined comparison function</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.uksort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::uksort</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   This method sorts the elements by keys using a user-supplied comparison   function.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.uksort-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para"> 在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于 0 的整数。</p><div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><span class="replaceable">callback</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$a</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$b</span></span>): <span class="type" style="color:#EAB766">int</span></div><div class="caution"><strong class="caution">警告</strong> <p class="para">  从比较函数中返回<em>非整数</em>值，例如 <span class="type" style="color:#EAB766">float</span>，将导致内部强制转换为 callback 返回值为  <span class="type" style="color:#EAB766">int</span>。因此，诸如 <span>0.99</span> 和 <span>0.1</span> 之类的值都将被转换为整数值  <span>0</span>，将这些值比较的话将会是相等。 </p></div>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.uksort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-arrayiterator.uksort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayiterator.uksort-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::asort()} - Sort entries by values</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::ksort()} - Sort entries by keys</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::natcasesort()} - Sort entries naturally, case insensitive</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::natsort()} - Sort entries naturally</span></li>    <li class="member"><span class="methodname" style="color:#CC7832"><strong>ArrayIterator::uksort()</strong></span></li>    <li class="member"><span class="function">{@link uksort()} - 使用用户自定义的比较函数对数组中的键名进行排序</span></li>   </ul>  </span> </div></div>
*/
    public function uksort(#[LanguageLevelTypeAware(['8.0' => 'callable'], default: '')] $callback) {}

/**
*<div id="arrayiterator.natsort" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::natsort</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::natsort</span> &mdash; <span class="dc-title">Sort entries naturally</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.natsort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::natsort</strong></span>(): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   Sort the entries by values using a &quot;natural order&quot; algorithm.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.natsort-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.natsort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-arrayiterator.natsort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayiterator.natsort-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::asort()} - Sort entries by values</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::ksort()} - Sort entries by keys</span></li>    <li class="member"><span class="methodname" style="color:#CC7832"><strong>ArrayIterator::natsort()</strong></span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::uasort()} - Sort with a user-defined comparison function and maintain index association</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::uksort()} - Sort by keys using a user-defined comparison function</span></li>    <li class="member"><span class="function">{@link natsort()} - 用&ldquo;自然排序&rdquo;算法对数组排序</span></li>   </ul>  </span> </div></div>
*/
    public function natsort() {}

/**
*<div id="arrayiterator.natcasesort" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::natcasesort</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::natcasesort</span> &mdash; <span class="dc-title">Sort entries naturally, case insensitive</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.natcasesort-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::natcasesort</strong></span>(): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div>  <p class="para rdfs-comment">   Sort the entries by values using a case insensitive &quot;natural order&quot; algorithm.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  <p class="para">  如果两个成员完全相同，那么它们将保持原来的顺序。  在 PHP 8.0.0 之前，它们在排序数组中的相对顺序是未定义的。 </p></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.natcasesort-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.natcasesort-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   总是返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-arrayiterator.natcasesort-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr> <td>8.2.0</td> <td>  现在返回类型为 <strong><span>true</span></strong>；之前是 <span class="type" style="color:#EAB766">bool</span>。 </td></tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayiterator.natcasesort-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::asort()} - Sort entries by values</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::ksort()} - Sort entries by keys</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::natsort()} - Sort entries naturally</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::uasort()} - Sort with a user-defined comparison function and maintain index association</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::uksort()} - Sort by keys using a user-defined comparison function</span></li>    <li class="member"><span class="function">{@link natcasesort()} - 用&ldquo;自然排序&rdquo;算法对数组进行不区分大小写字母的排序</span></li>   </ul>  </span> </div></div>
*/
    public function natcasesort() {}

/**
*<div id="arrayiterator.unserialize" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::unserialize</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::unserialize</span> &mdash; <span class="dc-title">Unserialize</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.unserialize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::unserialize</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Unserialize.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.unserialize-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">data</span></dt>     <dd>      <p class="para">       The serialized ArrayIterator object to be unserialized.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.unserialize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayiterator.unserialize-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::serialize()} - Serialize</span></li>   </ul>  </span> </div></div>
     * @return void*/
    public function unserialize(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $data): void {}

/**
*<div id="arrayiterator.serialize" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::serialize</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::serialize</span> &mdash; <span class="dc-title">Serialize</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.serialize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::serialize</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Serialize.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.serialize-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.serialize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The serialized <span class="classname"><a href="https://www.php.net/manual/zh/class.arrayiterator.php" class="classname">ArrayIterator</a></span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-arrayiterator.serialize-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link ArrayIterator::unserialize()} - Unserialize</span></li>   </ul>  </span> </div></div>
     * @return string The serialized <b>ArrayIterator</b>.*/
    public function serialize(): string {}

/**
*<div id="arrayiterator.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::rewind</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::rewind</span> &mdash; <span class="dc-title">Rewind array back to the start</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   This rewinds the iterator to the beginning.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayiterator.rewind-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ArrayIterator::rewind()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$arrayobject </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$arrayobject</span><span style="color: #007700">[] = </span><span style="color: #DD0000">'zero'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$arrayobject</span><span style="color: #007700">[] = </span><span style="color: #DD0000">'one'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$arrayobject</span><span style="color: #007700">[] = </span><span style="color: #DD0000">'two'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$iterator </span><span style="color: #007700">= </span><span style="color: #9876AA">$arrayobject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getIterator</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />echo </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">(); </span><span style="color: #FF8000">//1<br /><br /></span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">(); </span><span style="color: #FF8000">//rewinding to the beginning<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">(); </span><span style="color: #FF8000">//0<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div></div>
     * @return void*/
    public function rewind(): void {}

/**
*<div id="arrayiterator.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::current</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::current</span> &mdash; <span class="dc-title">Return current array entry</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::current</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Get the current <span class="type" style="color:#EAB766">array</span> entry.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current <span class="type" style="color:#EAB766">array</span> entry.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayiterator.current-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ArrayIterator::current()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'1' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'one'</span><span style="color: #007700">,<br />               </span><span style="color: #DD0000">'2' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'two'</span><span style="color: #007700">,<br />               </span><span style="color: #DD0000">'3' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'three'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$arrayobject </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /><br />for(</span><span style="color: #9876AA">$iterator </span><span style="color: #007700">= </span><span style="color: #9876AA">$arrayobject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getIterator</span><span style="color: #007700">();<br />    </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">();<br />    </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">()) {<br /><br />    echo </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">() . </span><span style="color: #DD0000">' =&gt; ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>1 =&gt; one<br>2 =&gt; two<br>3 =&gt; three<br></span></div>    </div>   </div>  </span> </div></div>
     * @return mixed The current array entry.*/
    public function current(): mixed {}

/**
*<div id="arrayiterator.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::key</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::key</span> &mdash; <span class="dc-title">Return current array key</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::key</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">null</span></span></div>  <p class="para rdfs-comment">   This function returns the current array key  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current <span class="type" style="color:#EAB766">array</span> key.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayiterator.key-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ArrayIterator::key()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'key' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'value'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$arrayobject </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$iterator </span><span style="color: #007700">= </span><span style="color: #9876AA">$arrayobject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getIterator</span><span style="color: #007700">();<br /><br />echo </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">(); </span><span style="color: #FF8000">//key<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div></div>
     * @return string|int|null The key of the current element.*/
    public function key(): string|int|null {}

/**
*<div id="arrayiterator.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::next</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::next</span> &mdash; <span class="dc-title">Move to next entry</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   The iterator to the next entry.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayiterator.next-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ArrayIterator::next()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$arrayobject </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">$arrayobject</span><span style="color: #007700">[] = </span><span style="color: #DD0000">'zero'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$arrayobject</span><span style="color: #007700">[] = </span><span style="color: #DD0000">'one'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$iterator </span><span style="color: #007700">= </span><span style="color: #9876AA">$arrayobject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getIterator</span><span style="color: #007700">();<br /><br />while(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()) {<br />    echo </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">() . </span><span style="color: #DD0000">' =&gt; ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br />    </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>0 =&gt; zero<br>1 =&gt; one<br></span></div>    </div>   </div>  </span> </div></div>
     * @return void*/
    public function next(): void {}

/**
*<div id="arrayiterator.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::valid</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::valid</span> &mdash; <span class="dc-title">Check whether array contains more entries</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Checks if the <span class="type" style="color:#EAB766">array</span> contains any more entries.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the iterator is valid, otherwise <strong><span>false</span></strong>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-arrayiterator.valid-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">ArrayIterator::valid()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$array </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'1' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'one'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$arrayobject </span><span style="color: #007700">= new </span><span style="color: #9876AA">ArrayObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$array</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$iterator </span><span style="color: #007700">= </span><span style="color: #9876AA">$arrayobject</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getIterator</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()); </span><span style="color: #FF8000">//bool(true)<br /><br /></span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">(); </span><span style="color: #FF8000">// advance to the next item<br /><br />//bool(false) because there is only one array element<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div></div>
     * @return bool*/
    public function valid(): bool {}

/**
*<div id="arrayiterator.seek" class="refentry"> <div class="refnamediv">  <h1 class="refname">ArrayIterator::seek</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ArrayIterator::seek</span> &mdash; <span class="dc-title">Seek to position</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-arrayiterator.seek-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ArrayIterator::seek</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-arrayiterator.seek-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">       The position to seek to.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-arrayiterator.seek-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
     * @return void*/
    public function seek(#[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $offset): void {}

    /**
     * @return array
     * @since 7.4
     */
    #[TentativeType]
    public function __debugInfo(): array {}

    /**
     * @return array
     * @since 7.4
     */
    #[TentativeType]
    public function __serialize(): array {}

    /**
     * @param array $data
     * @since 7.4
     */
    #[TentativeType]
    public function __unserialize(array $data): void {}
}

/**
*<div id="class.recursivearrayiterator" class="reference"> <h1 class="title">The RecursiveArrayIterator class</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p>  <div class="section" id="recursivearrayiterator.intro">   <h2 class="title">简介</h2>   <p class="para">    This iterator allows for unsetting and modifying values and keys while iterating over arrays and objects,    in the same way as the <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.arrayiterator.php" class="type ArrayIterator" style="color:#EAB766">ArrayIterator</a></span>. Additionally, it is possible to iterate    over the current iterator entry.   </p>  </div>  <div class="section" id="recursivearrayiterator.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">RecursiveArrayIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.arrayiterator.php" class="classname">ArrayIterator</a>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="interfacename">RecursiveIterator</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">ArrayIterator::STD_PROP_LIST</var>}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname">{@link <var class="varname">ArrayIterator::ARRAY_AS_PROPS</var>}</var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.recursivearrayiterator.php#recursivearrayiterator.constants.child-arrays-only"><var class="varname">CHILD_ARRAYS_ONLY</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivearrayiterator.getchildren.php" class="methodname" style="color:#CC7832">getChildren</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursivearrayiterator.php" class="type RecursiveArrayIterator" style="color:#EAB766">RecursiveArrayIterator</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/recursivearrayiterator.haschildren.php" class="methodname" style="color:#CC7832">hasChildren</a></span>(): <span class="type" style="color:#EAB766">bool</span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">object</span></span> <span class="parameter" style="color:#3A95FF">$array</span><span class="initializer"> = []</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::append}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::asort}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>SORT_REGULAR</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::count}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::getArrayCopy}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::getFlags}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::key}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766">null</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::ksort}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = <strong><span>SORT_REGULAR</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::natcasesort}</span>(): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::natsort}</span>(): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::offsetExists}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::offsetGet}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::offsetSet}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::offsetUnset}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$key</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::seek}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$offset</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::serialize}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::setFlags}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::uasort}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::uksort}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$callback</span></span>): <span class="type" style="color:#EAB766"><span class="type true" style="color:#EAB766">true</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::unserialize}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ArrayIterator::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div>   }</div>  </div>  <div class="section" id="recursivearrayiterator.constants">   <h2 class="title">预定义常量</h2>   <div class="section" id="recursivearrayiterator.constants.flags">    <h2 class="title">RecursiveArrayIterator Flags</h2>    <dl>           <dt id="recursivearrayiterator.constants.child-arrays-only"><strong><span>RecursiveArrayIterator::CHILD_ARRAYS_ONLY</span></strong></dt>      <dd>       <p class="para">Treat only arrays (not objects) as having children for recursive iteration.</p>      </dd>         </dl>   </div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link RecursiveArrayIterator::getChildren} — Returns an iterator for the current entry if it is an array or an object</li><li>{@link RecursiveArrayIterator::hasChildren} — Returns whether current entry is an array or an object</li></ul></div>
*/
class RecursiveArrayIterator extends ArrayIterator implements RecursiveIterator
{
    public const CHILD_ARRAYS_ONLY = 4;

/**
*<div id="recursivearrayiterator.haschildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveArrayIterator::hasChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveArrayIterator::hasChildren</span> &mdash; <span class="dc-title">Returns whether current entry is an array or an object</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivearrayiterator.haschildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveArrayIterator::hasChildren</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Returns whether current entry is an <span class="type" style="color:#EAB766">array</span> or an <span class="type" style="color:#EAB766">object</span> for   which an iterator can be obtained via   <span class="methodname" style="color:#CC7832">{@link RecursiveArrayIterator::getChildren()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivearrayiterator.haschildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivearrayiterator.haschildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the current entry is an <span class="type" style="color:#EAB766">array</span> or an <span class="type" style="color:#EAB766">object</span>,   otherwise <strong><span>false</span></strong> is returned.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-recursivearrayiterator.haschildren-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">RecursiveArrayIterator::hasChildren()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"lemon"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"orange"</span><span style="color: #007700">, array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"apple"</span><span style="color: #007700">, </span><span style="color: #DD0000">"p" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"pear"</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">RecursiveArrayIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br /><br />while (</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()) {<br /><br />    </span><span style="color: #FF8000">// Check if there are children<br />    </span><span style="color: #007700">if (</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasChildren</span><span style="color: #007700">()) {<br />        </span><span style="color: #FF8000">// print all children<br />        </span><span style="color: #007700">foreach (</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getChildren</span><span style="color: #007700">() as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$value</span><span style="color: #007700">) {<br />            echo </span><span style="color: #9876AA">$key </span><span style="color: #007700">. </span><span style="color: #DD0000">' : ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$value </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />        }<br />    } else {<br />        echo </span><span style="color: #DD0000">"No children.\n"</span><span style="color: #007700">;<br />    }<br /><br />    </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>No children.<br>No children.<br>a : apple<br>p : pear<br><br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-recursivearrayiterator.haschildren-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link RecursiveArrayIterator::getChildren()} - Returns an iterator for the current entry if it is an array or an object</span></li>   </ul>  </span> </div></div>
     * @return bool true if the current entry is an array or an object,*/
    public function hasChildren(): bool {}

/**
*<div id="recursivearrayiterator.getchildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">RecursiveArrayIterator::getChildren</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">RecursiveArrayIterator::getChildren</span> &mdash; <span class="dc-title">Returns an iterator for the current entry if it is an <span class="type" style="color:#EAB766">array</span> or an <span class="type" style="color:#EAB766">object</span></span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-recursivearrayiterator.getchildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>RecursiveArrayIterator::getChildren</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.recursivearrayiterator.php" class="type RecursiveArrayIterator" style="color:#EAB766">RecursiveArrayIterator</a></span></span></div>  <p class="para rdfs-comment">   Returns an iterator for the current iterator entry.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-recursivearrayiterator.getchildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-recursivearrayiterator.getchildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   An iterator for the current entry, if it is an <span class="type" style="color:#EAB766">array</span> or <span class="type" style="color:#EAB766">object</span>; or <strong><span>null</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-recursivearrayiterator.getchildren-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   An <span class="classname"><a href="https://www.php.net/manual/zh/class.invalidargumentexception.php" class="classname">InvalidArgumentException</a></span>   will be thrown if the current entry does not contain an <span class="type" style="color:#EAB766">array</span> or an <span class="type" style="color:#EAB766">object</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-recursivearrayiterator.getchildren-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">RecursiveArrayIterator::getChildren()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fruits </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"lemon"</span><span style="color: #007700">, </span><span style="color: #DD0000">"b" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"orange"</span><span style="color: #007700">, array(</span><span style="color: #DD0000">"a" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"apple"</span><span style="color: #007700">, </span><span style="color: #DD0000">"p" </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"pear"</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$iterator </span><span style="color: #007700">= new </span><span style="color: #9876AA">RecursiveArrayIterator</span><span style="color: #007700">(</span><span style="color: #9876AA">$fruits</span><span style="color: #007700">);<br /><br />while (</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()) {<br /><br />    if (</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasChildren</span><span style="color: #007700">()) {<br />        </span><span style="color: #FF8000">// print all children<br />        </span><span style="color: #007700">foreach (</span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getChildren</span><span style="color: #007700">() as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$value</span><span style="color: #007700">) {<br />            echo </span><span style="color: #9876AA">$key </span><span style="color: #007700">. </span><span style="color: #DD0000">' : ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$value </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />        }<br />    } else {<br />        echo </span><span style="color: #DD0000">"No children.\n"</span><span style="color: #007700">;<br />    }<br /><br />    </span><span style="color: #9876AA">$iterator</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>No children.<br>No children.<br>a : apple<br>p : pear<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-recursivearrayiterator.getchildren-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link RecursiveArrayIterator::hasChildren()} - Returns whether current entry is an array or an object</span></li>   </ul>  </span> </div></div>
     * @return RecursiveArrayIterator|null An iterator for the current entry, if it is an array or object.*/
    public function getChildren(): ?RecursiveArrayIterator {}
}
