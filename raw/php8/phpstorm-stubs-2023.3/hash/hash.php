<?php

// Start of hash v.1.0
use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Pure;

/**
*<div id="function.hash" class="refentry"> <div class="refnamediv">  <h1 class="refname">hash</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash</span> &mdash; <span class="dc-title">生成散列值（消息摘要）</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.hash-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>hash</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$algo</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$binary</span><span class="initializer"> = <strong><span>false</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$options</span><span class="initializer"> = []</span></span><br>): <span class="type" style="color:#EAB766">string</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.hash-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">algo</span></dt>     <dd>      <p class="para">       要使用的散列算法，例如：“md5”、“sha256”、“haval160,4”等。在       <span class="function">{@link hash_algos()}</span> 中查看支持的算法。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">data</span></dt>     <dd>      <p class="para">       要进行散列运算的消息。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">binary</span></dt>     <dd>      <p class="para">       设置为 <strong><span>true</span></strong> 输出原始二进制数据，       设置为 <strong><span>false</span></strong> 输出小写 16 进制字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">options</span></dt>     <dd>      <p class="para">       各种散列算法的一系列选项数组。目前 MurmurHash 算法仅支持 “seed” 参数。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.hash-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">binary</span> 设置为 <strong><span>true</span></strong>， 则返回原始二进制数据表示的信息摘要，   否则返回 16 进制小写字符串格式表示的信息摘要。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.hash-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.1.0</td>       <td>新增 <span class="parameter" style="color:#3A95FF">options</span> 参数。</td>      </tr>      <tr>       <td>8.0.0</td>       <td>        如果 <span class="parameter" style="color:#3A95FF">algo</span> 未知，现在 <span class="function"><strong style="color:#CC7832">hash()</strong></span> 将抛出        <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span> 异常，之前返回 <strong><span>false</span></strong>。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.hash-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2714">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">hash()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">hash</span><span style="color: #007700">(</span><span style="color: #DD0000">'sha256'</span><span style="color: #007700">, </span><span style="color: #DD0000">'The quick brown fox jumped over the lazy dog.'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>68b1282b91de2c054c36629cb8dd447f12f096d3e3c587978dc2248444633483<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.hash-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link hash_file()} - 给指定文件的内容生成散列值</span></li>    <li class="member"><span class="function">{@link hash_hmac()} - 使用 HMAC 方法生成带有密钥的散列值</span></li>    <li class="member"><span class="function">{@link hash_init()} - 初始化增量散列运算上下文</span></li>    <li class="member"><span class="function">{@link md5()} - 计算字符串的 MD5 散列值</span></li>    <li class="member"><span class="function">{@link sha1()} - 计算字符串的 sha1 散列值</span></li>   </ul>  </span> </div></div>
 * @return string a string containing the calculated message digest as lowercase hexits*/
function hash(string $algo, string $data, bool $binary = false, #[PhpStormStubsElementAvailable('8.1')] array $options = []): string {}

/**
*<div id="function.hash-equals" class="refentry"> <div class="refnamediv">  <h1 class="refname">hash_equals</h1>  <p class="verinfo">(PHP 5 &gt;= 5.6.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">hash_equals</span> &mdash; <span class="dc-title">可防止时序攻击的字符串比较</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.hash-equals-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>hash_equals</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$known_string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$user_string</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   检查两个字符串是否相等，而不会通过执行时泄露有关 <span class="parameter" style="color:#3A95FF">known_string</span> 内容的任何信息。  </p>  <p class="para">   此函数可用于缓解计时攻击。使用 <span>===</span> 进行常规比较所需的时间的长短取决于两个值是否不同以及可以找到第一个不同的位置，从而泄露有关   <span class="parameter" style="color:#3A95FF">known_string</span> 内容的秘密信息。  </p>  <div class="caution"><strong class="caution">警告</strong>   <p class="para">    非常重要的一点是，用户提供的字符串必须是第二个参数。   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.hash-equals-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">known_string</span></dt>    <dd>     <span>       必须保密的已知 <span class="type" style="color:#EAB766">string</span>。     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">user_string</span></dt>    <dd>     <p class="para">      与已知字符串进行比较的用户提供的 <span class="type" style="color:#EAB766">string</span>。     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.hash-equals-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   当两个字符串相等时返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.hash-equals-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2687">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">hash_equals()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$secretKey </span><span style="color: #007700">= </span><span style="color: #DD0000">'8uRhAeH89naXfFXKGOEj'</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 值和签名是由用户提供的，例如在 URL 中，使用 $_GET 检索。<br /></span><span style="color: #9876AA">$value </span><span style="color: #007700">= </span><span style="color: #DD0000">'username=rasmuslerdorf'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$signature </span><span style="color: #007700">= </span><span style="color: #DD0000">'8c35009d3b50caf7f5d2c1e031842e6b7823a1bb781d33c5237cd27b57b5f327'</span><span style="color: #007700">;<br /><br />if (</span><span style="color: #9876AA">hash_equals</span><span style="color: #007700">(</span><span style="color: #9876AA">hash_hmac</span><span style="color: #007700">(</span><span style="color: #DD0000">'sha256'</span><span style="color: #007700">, </span><span style="color: #9876AA">$value</span><span style="color: #007700">, </span><span style="color: #9876AA">$secretKey</span><span style="color: #007700">), </span><span style="color: #9876AA">$signature</span><span style="color: #007700">)) {<br />    echo </span><span style="color: #DD0000">"The value is correctly signed."</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />} else {<br />    echo </span><span style="color: #DD0000">"The value was tampered with."</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>The value is correctly signed.<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.hash-equals-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    要想成功进行比较，那么所提供的 2 个参数必须是相同长度的字符串。    如果所提供的字符串长度不同，那么本函数会立即返回 <strong><span>false</span></strong>，    在时序攻击的场景下，已知字符串的长度可能会被泄露。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.hash-equals-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link hash_hmac()} - 使用 HMAC 方法生成带有密钥的散列值</span></li>   </ul>  </span> </div></div>
 * @return bool <p>Returns <b>TRUE</b> when the two strings are equal, <b>FALSE</b> otherwise.</p>*/
function hash_equals(string $known_string, string $user_string): bool {}

/**
*<div id="function.hash-file" class="refentry"> <div class="refnamediv">  <h1 class="refname">hash_file</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash_file</span> &mdash; <span class="dc-title">给指定文件的内容生成散列值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.hash-file-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>hash_file</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$algo</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$binary</span><span class="initializer"> = <strong><span>false</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$options</span><span class="initializer"> = []</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.hash-file-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">algo</span></dt>     <dd>      <p class="para">       要使用的散列算法的名称（例如：“md5”、“sha256”、“haval160,4”等）。       可以在 <span class="function">{@link hash_algos()}</span> 中查看当前支持的算法。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">filename</span></dt>     <dd>      <p class="para">       要进行散列运算的文件位置的 URL；支持 fopen 封装协议。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">binary</span></dt>     <dd>      <p class="para">       设置为 <strong><span>true</span></strong> 时，输出原始二进制数据。       设置为 <strong><span>false</span></strong> 时，输出小写的十六进制字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">options</span></dt>     <dd>      <p class="para">       各种散列算法的一系列选项数组。目前 MurmurHash 算法仅支持 “seed” 参数。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.hash-file-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">binary</span> 设置为 true， 则返回原始二进制数据表示的信息摘要，   否则返回十六进制小写字符串格式表示的信息摘要。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.hash-file-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.1.0</td>       <td>新增 <span class="parameter" style="color:#3A95FF">options</span> 参数。</td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.hash-file-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2690">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">hash_file()</strong></span> 示例</strong></p>    <div class="example-contents">     <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Create a file to calculate hash of <br /></span><span style="color: #9876AA">file_put_contents</span><span style="color: #007700">(</span><span style="color: #DD0000">'example.txt'</span><span style="color: #007700">, </span><span style="color: #DD0000">'The quick brown fox jumped over the lazy dog.'</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #9876AA">hash_file</span><span style="color: #007700">(</span><span style="color: #DD0000">'sha256'</span><span style="color: #007700">, </span><span style="color: #DD0000">'example.txt'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>68b1282b91de2c054c36629cb8dd447f12f096d3e3c587978dc2248444633483<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.hash-file-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link hash()} - 生成散列值（消息摘要）</span></li>    <li class="member"><span class="function">{@link hash_hmac_file()} - 使用 HMAC 方法和给定文件的内容生成带密钥的散列值</span></li>    <li class="member"><span class="function">{@link hash_update_file()} - 从文件向活跃的散列运算上下文中填充数据</span></li>    <li class="member"><span class="function">{@link md5_file()} - 计算指定文件的 MD5 散列值</span></li>    <li class="member"><span class="function">{@link sha1_file()} - 计算文件的 sha1 散列值</span></li>   </ul>  </span> </div></div>
 * @return string|false a string containing the calculated message digest as lowercase hexits*/
function hash_file(string $algo, string $filename, bool $binary = false, #[PhpStormStubsElementAvailable('8.1')] array $options = []): string|false {}

/**
*<div id="function.hash-hmac" class="refentry"> <div class="refnamediv">  <h1 class="refname">hash_hmac</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash_hmac</span> &mdash; <span class="dc-title">使用 HMAC 方法生成带有密钥的散列值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.hash-hmac-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>hash_hmac</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$algo</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$binary</span><span class="initializer"> = <strong><span>false</span></strong></span></span><br>): <span class="type" style="color:#EAB766">string</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.hash-hmac-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">algo</span></dt>     <dd>      <p class="para">       要使用的散列算法名称，例如：“md5”、“sha256”、“haval160,4”等。如何获取受支持的算法清单，请参见       <span class="function">{@link hash_hmac_algos()}</span> 函数。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">data</span></dt>     <dd>      <p class="para">       要进行散列运算的消息。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       使用 HMAC 生成信息摘要时所使用的密钥。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">binary</span></dt>     <dd>      <p class="para">       设置为 <strong><span>true</span></strong> 输出原始二进制数据，设置为 <strong><span>false</span></strong> 输出小写 16 进制字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.hash-hmac-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">binary</span> 设置为 <strong><span>true</span></strong>，则返回原始二进制数据表示的信息摘要，否则返回   16 进制小写字符串格式表示的信息摘要。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.hash-hmac-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">algo</span> 未知或非加密散列函数，则抛出   <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span> 异常。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.hash-hmac-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        如果 <span class="parameter" style="color:#3A95FF">algo</span> 未知或者非加密散列函数，现在将抛出        <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span> 异常；以前返回 <strong><span>false</span></strong>。       </td>      </tr>      <tr>       <td>7.2.0</td>       <td>不再支持非加密的散列函数（adler32、crc32、crc32b、fnv132、fnv1a32、fnv164、fnv1a64、joaat）。</td>      </tr>     </tbody>       </table>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.hash-hmac-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2702">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">hash_hmac()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">hash_hmac</span><span style="color: #007700">(</span><span style="color: #DD0000">'sha256'</span><span style="color: #007700">, </span><span style="color: #DD0000">'The quick brown fox jumped over the lazy dog.'</span><span style="color: #007700">, </span><span style="color: #DD0000">'secret'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>9c5c42422b03f0ee32949920649445e417b2c634050833c5165704b825c2a53b<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.hash-hmac-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link hash()} - 生成散列值（消息摘要）</span></li>    <li class="member"><span class="function">{@link hash_hmac_algos()} - 返回适用于 hash_hmac 的已注册散列算法列表</span></li>    <li class="member"><span class="function">{@link hash_init()} - 初始化增量散列运算上下文</span></li>    <li class="member"><span class="function">{@link hash_hmac_file()} - 使用 HMAC 方法和给定文件的内容生成带密钥的散列值</span></li>    <li class="member"><span class="function">{@link hash_equals()} - 可防止时序攻击的字符串比较</span></li>   </ul>  </span> </div></div>
 * @return string a string containing the calculated message digest as lowercase hexits*/
function hash_hmac(string $algo, string $data, string $key, bool $binary = false): string {}

/**
*<div id="function.hash-hmac-file" class="refentry"> <div class="refnamediv">  <h1 class="refname">hash_hmac_file</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash_hmac_file</span> &mdash; <span class="dc-title">使用 HMAC 方法和给定文件的内容生成带密钥的散列值</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.hash-hmac-file-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>hash_hmac_file</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$algo</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$binary</span><span class="initializer"> = <strong><span>false</span></strong></span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.hash-hmac-file-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">algo</span></dt>     <dd>      <p class="para">       要使用的散列算法名称，例如：&quot;md5&quot;，&quot;sha256&quot;，&quot;haval160,4&quot; 等。       如何获取受支持的算法清单，请参见 <span class="function">{@link hash_hmac_algos()}</span> 函数。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">filename</span></dt>     <dd>      <p class="para">       要进行散列运算的文件路径，支持 fopen 封装器。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       使用 HMAC 生成信息摘要时所使用的密钥。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">binary</span></dt>     <dd>      <p class="para">       设置为 <strong><span>true</span></strong> 输出原始二进制数据，       设置为 <strong><span>false</span></strong> 输出小写 16 进制字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.hash-hmac-file-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">binary</span> 设置为 <strong><span>true</span></strong>， 则返回原始二进制数据表示的信息摘要，否则返回   16 进制小写字符串格式表示的信息摘要。如果无法读取文件    <span class="parameter" style="color:#3A95FF">filename</span>，则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.hash-hmac-file-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">algo</span> 未知或非加密散列函数，则抛出   <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span> 异常。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.hash-hmac-file-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        如果 <span class="parameter" style="color:#3A95FF">algo</span> 未知或非加密散列函数，现在抛出        <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span> 异常，之前返回 <strong><span>false</span></strong>。       </td>      </tr>      <tr>       <td>7.2.0</td>       <td>禁用非加密散列函数（adler32、crc32、crc32b、fnv132、fnv1a32、fnv164、fnv1a64、joaat）。</td>      </tr>     </tbody>       </table>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.hash-hmac-file-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2699">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">hash_hmac_file()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 创建一个要计算散列值的文件 <br /></span><span style="color: #9876AA">file_put_contents</span><span style="color: #007700">(</span><span style="color: #DD0000">'example.txt'</span><span style="color: #007700">, </span><span style="color: #DD0000">'The quick brown fox jumped over the lazy dog.'</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #9876AA">hash_hmac_file</span><span style="color: #007700">(</span><span style="color: #DD0000">'sha256'</span><span style="color: #007700">, </span><span style="color: #DD0000">'example.txt'</span><span style="color: #007700">, </span><span style="color: #DD0000">'secret'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>9c5c42422b03f0ee32949920649445e417b2c634050833c5165704b825c2a53b<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.hash-hmac-file-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link hash_hmac_algos()} - 返回适用于 hash_hmac 的已注册散列算法列表</span></li>    <li class="member"><span class="function">{@link hash_hmac()} - 使用 HMAC 方法生成带有密钥的散列值</span></li>    <li class="member"><span class="function">{@link hash_file()} - 给指定文件的内容生成散列值</span></li>   </ul>  </span> </div></div>
 * @return string|false a string containing the calculated message digest as lowercase hexits*/
function hash_hmac_file(string $algo, string $filename, string $key, bool $binary = false): string|false {}

/**
*<div id="function.hash-init" class="refentry"> <div class="refnamediv">  <h1 class="refname">hash_init</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash_init</span> &mdash; <span class="dc-title">初始化增量散列运算上下文</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.hash-init-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>hash_init</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$algo</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span><span class="initializer"> = &quot;&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$options</span><span class="initializer"> = []</span></span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.hashcontext.php" class="type HashContext" style="color:#EAB766">HashContext</a></span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.hash-init-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">algo</span></dt>     <dd>      <p class="para">       要使用的散列算法名称，例如：“md5”、“sha256”、“haval160,4”等。如何获取受支持的算法清单，请参见       <span class="function">{@link hash_algos()}</span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       进行散列运算的可选设置，目前仅支持一个选项：<strong><span>HASH_HMAC</span></strong>。当指定此选项的时候，<em>必须</em>指定       <span class="parameter" style="color:#3A95FF">key</span> 参数。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       当 <span class="parameter" style="color:#3A95FF">flags</span> 参数为        <strong><span>HASH_HMAC</span></strong> 时，使用此参数传入进行 HMAC 散列运算时的共享密钥。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">options</span></dt>     <dd>      <p class="para">       各种散列算法的一系列选项数组。目前 MurmurHash 算法仅支持 “seed” 参数。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.hash-init-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回散列运算上下文对象，以供   <span class="function">{@link hash_update()}</span>、<span class="function">{@link hash_update_stream()}</span>、<span class="function">{@link hash_update_file()}</span>   和 <span class="function">{@link hash_final()}</span> 函数使用。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.hash-init-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">algo</span> 未知或非加密散列函数，或者 <span class="parameter" style="color:#3A95FF">key</span>   为空时，抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span> 异常。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.hash-init-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.1.0</td>       <td>新增 <span class="parameter" style="color:#3A95FF">options</span> 参数。</td>      </tr>      <tr>       <td>8.0.0</td>       <td>        如果 <span class="parameter" style="color:#3A95FF">algo</span> 未知或非加密散列函数，或者 <span class="parameter" style="color:#3A95FF">key</span>        为空时，现在抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span> 异常。之前返回 <strong><span>false</span></strong>        并发出 <strong><span>E_WARNING</span></strong> 消息。       </td>      </tr>      <tr>       <td>7.2.0</td>       <td>当使用 <strong><span>HASH_HMAC</span></strong> 选项的时候，不再支持非加密的散列函数（adler32，crc32，crc32b，fnv132，fnv1a32，fnv164，fnv1a64，joaat）。</td>      </tr>      <tr>       <td>7.2.0</td>       <td>        返回 <span class="classname"><a href="https://www.php.net/manual/zh/class.hashcontext.php" class="classname">HashContext</a></span> 对象，不再返回资源类型。       </td>      </tr>     </tbody>       </table>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.hash-init-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2705">    <p><strong>示例 #1 增量散列运算示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$hash </span><span style="color: #007700">= </span><span style="color: #9876AA">hash</span><span style="color: #007700">(</span><span style="color: #DD0000">'sha256'</span><span style="color: #007700">, </span><span style="color: #DD0000">'The quick brown fox jumped over the lazy dog.'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$ctx </span><span style="color: #007700">= </span><span style="color: #9876AA">hash_init</span><span style="color: #007700">(</span><span style="color: #DD0000">'sha256'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">hash_update</span><span style="color: #007700">(</span><span style="color: #9876AA">$ctx</span><span style="color: #007700">, </span><span style="color: #DD0000">'The quick brown fox '</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">hash_update</span><span style="color: #007700">(</span><span style="color: #9876AA">$ctx</span><span style="color: #007700">, </span><span style="color: #DD0000">'jumped over the lazy dog.'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$incremental_hash </span><span style="color: #007700">= </span><span style="color: #9876AA">hash_final</span><span style="color: #007700">(</span><span style="color: #9876AA">$ctx</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #9876AA">$incremental_hash</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$hash </span><span style="color: #007700">=== </span><span style="color: #9876AA">$incremental_hash</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>68b1282b91de2c054c36629cb8dd447f12f096d3e3c587978dc2248444633483<br>bool(true)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.hash-init-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link hash()} - 生成散列值（消息摘要）</span></li>    <li class="member"><span class="function">{@link hash_algos()} - 返回已注册的散列算法列表</span></li>    <li class="member"><span class="function">{@link hash_file()} - 给指定文件的内容生成散列值</span></li>    <li class="member"><span class="function">{@link hash_hmac()} - 使用 HMAC 方法生成带有密钥的散列值</span></li>    <li class="member"><span class="function">{@link hash_hmac_file()} - 使用 HMAC 方法和给定文件的内容生成带密钥的散列值</span></li>   </ul>  </span> </div></div>
 * @return HashContext|resource a Hashing Context resource for use with <b>hash_update</b>,*/
function hash_init(string $algo, int $flags = 0, string $key = "", #[PhpStormStubsElementAvailable('8.1')] array $options = []) {}

/**
*<div id="function.hash-update" class="refentry"> <div class="refnamediv">  <h1 class="refname">hash_update</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash_update</span> &mdash; <span class="dc-title">向活跃的哈希运算上下文中填充数据</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.hash-update-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>hash_update</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.hashcontext.php" class="type HashContext" style="color:#EAB766">HashContext</a></span> <span class="parameter" style="color:#3A95FF">$context</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>): <span class="type" style="color:#EAB766">bool</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.hash-update-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">context</span></dt>     <dd>      <p class="para">       由 <span class="function">{@link hash_init()}</span> 函数返回的哈希运算上下文。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">data</span></dt>     <dd>      <p class="para">       要向哈希摘要中追加的数据。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.hash-update-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <strong><span>true</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.hash-update-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.2.0</td>       <td>        接收参数从资源类型修改为 <span class="classname"><a href="https://www.php.net/manual/zh/class.hashcontext.php" class="classname">HashContext</a></span> 对象类型。       </td>      </tr>     </tbody>       </table>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.hash-update-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link hash_init()} - 初始化增量散列运算上下文</span></li>    <li class="member"><span class="function">{@link hash_update_file()} - 从文件向活跃的散列运算上下文中填充数据</span></li>    <li class="member"><span class="function">{@link hash_update_stream()} - 从打开的流向活跃的散列运算上下文中填充数据</span></li>    <li class="member"><span class="function">{@link hash_final()} - 结束增量散列且返回摘要结果</span></li>   </ul>  </span> </div></div>
 * @return bool <b>TRUE</b>.*/
function hash_update(#[LanguageLevelTypeAware(["7.2" => "HashContext"], default: "resource")] $context, string $data): bool {}

/**
*<div id="function.hash-update-stream" class="refentry"> <div class="refnamediv">  <h1 class="refname">hash_update_stream</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash_update_stream</span> &mdash; <span class="dc-title">从打开的流向活跃的散列运算上下文中填充数据</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.hash-update-stream-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>hash_update_stream</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.hashcontext.php" class="type HashContext" style="color:#EAB766">HashContext</a></span> <span class="parameter" style="color:#3A95FF">$context</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">resource</span> <span class="parameter" style="color:#3A95FF">$stream</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$length</span><span class="initializer"> = -1</span></span>): <span class="type" style="color:#EAB766">int</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.hash-update-stream-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">context</span></dt>     <dd>      <p class="para">       由 <span class="function">{@link hash_init()}</span> 函数返回的散列运算上下文。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">stream</span></dt>     <dd>      <p class="para">       创建流的函数返回的打开的文件句柄。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">length</span></dt>     <dd>      <p class="para">       要从 <span class="parameter" style="color:#3A95FF">stream</span> 向活跃的散列运算上下文中拷贝的最大字符数。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.hash-update-stream-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   从 <span class="parameter" style="color:#3A95FF">stream</span> 向散列运算上下文中实际填充的字节数量。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.hash-update-stream-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.2.0</td>       <td>        接收参数从资源类型修改为 <span class="classname"><a href="https://www.php.net/manual/zh/class.hashcontext.php" class="classname">HashContext</a></span> 对象类型。       </td>      </tr>     </tbody>       </table>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.hash-update-stream-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2711">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">hash_update_stream()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$fp </span><span style="color: #007700">= </span><span style="color: #9876AA">tmpfile</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">, </span><span style="color: #DD0000">'jumped over the lazy dog.'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">rewind</span><span style="color: #007700">(</span><span style="color: #9876AA">$fp</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$ctx </span><span style="color: #007700">= </span><span style="color: #9876AA">hash_init</span><span style="color: #007700">(</span><span style="color: #DD0000">'sha256'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">hash_update</span><span style="color: #007700">(</span><span style="color: #9876AA">$ctx</span><span style="color: #007700">, </span><span style="color: #DD0000">'The quick brown fox '</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">hash_update_stream</span><span style="color: #007700">(</span><span style="color: #9876AA">$ctx</span><span style="color: #007700">, </span><span style="color: #9876AA">$fp</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">hash_final</span><span style="color: #007700">(</span><span style="color: #9876AA">$ctx</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>68b1282b91de2c054c36629cb8dd447f12f096d3e3c587978dc2248444633483<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.hash-update-stream-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link hash_init()} - 初始化增量散列运算上下文</span></li>    <li class="member"><span class="function">{@link hash_update()} - 向活跃的哈希运算上下文中填充数据</span></li>    <li class="member"><span class="function">{@link hash_final()} - 结束增量散列且返回摘要结果</span></li>    <li class="member"><span class="function">{@link hash()} - 生成散列值（消息摘要）</span></li>    <li class="member"><span class="function">{@link hash_file()} - 给指定文件的内容生成散列值</span></li>   </ul>  </span> </div></div>
 * @return int Actual number of bytes added to the hashing context from <i>handle</i>.*/
function hash_update_stream(#[LanguageLevelTypeAware(["7.2" => "HashContext"], default: "resource")] $context, $stream, int $length = -1): int {}

/**
*<div id="function.hash-update-file" class="refentry"> <div class="refnamediv">  <h1 class="refname">hash_update_file</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash_update_file</span> &mdash; <span class="dc-title">从文件向活跃的散列运算上下文中填充数据</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.hash-update-file-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>hash_update_file</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.hashcontext.php" class="type HashContext" style="color:#EAB766">HashContext</a></span> <span class="parameter" style="color:#3A95FF">$context</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">resource</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$stream_context</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766">bool</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.hash-update-file-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">context</span></dt>     <dd>      <p class="para">       由 <span class="function">{@link hash_init()}</span> 函数返回的散列运算上下文。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">filename</span></dt>     <dd>      <p class="para">       要进行散列运算的文件路径，支持 fopen 封装器。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">stream_context</span></dt>     <dd>      <p class="para">       由 <span class="function">{@link stream_context_create()}</span> 函数返回的流上下文。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.hash-update-file-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.hash-update-file-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        <span class="parameter" style="color:#3A95FF">stream_context</span> 现在可以为 null。       </td>      </tr>      <tr>       <td>7.2.0</td>       <td>        接收参数从资源类型修改为 <span class="classname"><a href="https://www.php.net/manual/zh/class.hashcontext.php" class="classname">HashContext</a></span> 对象类型。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.hash-update-file-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link hash_init()} - 初始化增量散列运算上下文</span></li>    <li class="member"><span class="function">{@link hash_update()} - 向活跃的哈希运算上下文中填充数据</span></li>    <li class="member"><span class="function">{@link hash_update_stream()} - 从打开的流向活跃的散列运算上下文中填充数据</span></li>    <li class="member"><span class="function">{@link hash_final()} - 结束增量散列且返回摘要结果</span></li>    <li class="member"><span class="function">{@link hash()} - 生成散列值（消息摘要）</span></li>    <li class="member"><span class="function">{@link hash_file()} - 给指定文件的内容生成散列值</span></li>   </ul>  </span> </div></div>
 * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
function hash_update_file(#[LanguageLevelTypeAware(["7.2" => "HashContext"], default: "resource")] $context, string $filename, $stream_context): bool {}

/**
*<div id="function.hash-final" class="refentry"> <div class="refnamediv">  <h1 class="refname">hash_final</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash_final</span> &mdash; <span class="dc-title">结束增量散列且返回摘要结果</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.hash-final-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>hash_final</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.hashcontext.php" class="type HashContext" style="color:#EAB766">HashContext</a></span> <span class="parameter" style="color:#3A95FF">$context</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$binary</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">string</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.hash-final-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">context</span></dt>     <dd>      <p class="para">       <span class="function">{@link hash_init()}</span> 返回的散列上下文资源。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">binary</span></dt>     <dd>      <p class="para">       设置为 <strong><span>true</span></strong>，输出格式为原始的二进制数据。       设置为 <strong><span>false</span></strong>，输出小写的 16 进制字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.hash-final-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">binary</span> 设置为 <strong><span>true</span></strong>， 则返回原始二进制数据表示的信息摘要，   否则返回 16 进制小写字符串格式表示的信息摘要。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.hash-final-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.2.0</td>       <td>        接收参数从资源类型修改为 <span class="classname"><a href="https://www.php.net/manual/zh/class.hashcontext.php" class="classname">HashContext</a></span> 对象类型。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.hash-final-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link hash_init()} - 初始化增量散列运算上下文</span></li>    <li class="member"><span class="function">{@link hash_update()} - 向活跃的哈希运算上下文中填充数据</span></li>    <li class="member"><span class="function">{@link hash_update_stream()} - 从打开的流向活跃的散列运算上下文中填充数据</span></li>    <li class="member"><span class="function">{@link hash_update_file()} - 从文件向活跃的散列运算上下文中填充数据</span></li>   </ul>  </span> </div></div>
 * @return string a string containing the calculated message digest as lowercase hexits*/
function hash_final(#[LanguageLevelTypeAware(["7.2" => "HashContext"], default: "resource")] $context, bool $binary = false): string {}

/**
*<div id="function.hash-copy" class="refentry"> <div class="refnamediv">  <h1 class="refname">hash_copy</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">hash_copy</span> &mdash; <span class="dc-title">拷贝哈希运算上下文</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.hash-copy-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>hash_copy</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.hashcontext.php" class="type HashContext" style="color:#EAB766">HashContext</a></span> <span class="parameter" style="color:#3A95FF">$context</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.hashcontext.php" class="type HashContext" style="color:#EAB766">HashContext</a></span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.hash-copy-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">context</span></dt>     <dd>      <p class="para">       由 <span class="function">{@link hash_init()}</span> 函数返回的哈希运算上下文。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.hash-copy-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回哈希运算上下文的一个复本。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.hash-copy-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.2.0</td>       <td>        接受的参数以及返回值从资源类型修改为 <span class="classname"><a href="https://www.php.net/manual/zh/class.hashcontext.php" class="classname">HashContext</a></span> 对象类型。       </td>      </tr>     </tbody>       </table>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.hash-copy-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2684">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">hash_copy()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$context </span><span style="color: #007700">= </span><span style="color: #9876AA">hash_init</span><span style="color: #007700">(</span><span style="color: #DD0000">"sha256"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">hash_update</span><span style="color: #007700">(</span><span style="color: #9876AA">$context</span><span style="color: #007700">, </span><span style="color: #DD0000">"The quick brown fox "</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 拷贝上下文资源以便继续使用 <br /></span><span style="color: #9876AA">$copy_context </span><span style="color: #007700">= </span><span style="color: #9876AA">hash_copy</span><span style="color: #007700">(</span><span style="color: #9876AA">$context</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #9876AA">hash_final</span><span style="color: #007700">(</span><span style="color: #9876AA">$context</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">hash_update</span><span style="color: #007700">(</span><span style="color: #9876AA">$copy_context</span><span style="color: #007700">, </span><span style="color: #DD0000">"jumped over the lazy dog."</span><span style="color: #007700">);<br />echo </span><span style="color: #9876AA">hash_final</span><span style="color: #007700">(</span><span style="color: #9876AA">$copy_context</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>b29d66e56ed90cce9b0165c43fedec612b60a071974d8be4513e18580d55b5bd<br>68b1282b91de2c054c36629cb8dd447f12f096d3e3c587978dc2248444633483<br></span></div>    </div>   </div>  </span> </div></div>
 * @return HashContext|resource a copy of Hashing Context resource.*/
function hash_copy(#[LanguageLevelTypeAware(["7.2" => "HashContext"], default: "resource")] $context) {}

/**
*<div id="function.hash-algos" class="refentry"> <div class="refnamediv">  <h1 class="refname">hash_algos</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8, PECL hash &gt;= 1.1)</p><p class="refpurpose"><span class="refname">hash_algos</span> &mdash; <span class="dc-title">返回已注册的散列算法列表</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.hash-algos-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>hash_algos</strong></span>(): <span class="type" style="color:#EAB766">array</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.hash-algos-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.hash-algos-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个数值索引的数组，   包含了受支持的散列算法名称。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.hash-algos-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.1.0</td>       <td>        新增对 MurmurHash3 和 xxHash 算法的支持。       </td>      </tr>      <tr>       <td>7.4.0</td>       <td>        支持 crc32c。       </td>      </tr>      <tr>       <td>7.1.0</td>       <td>        加入 sha512/224，sha512/256，sha3-224，sha3-256，sha3-384 以及        sha3-512 算法的支持。       </td>      </tr>     </tbody>       </table>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.hash-algos-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2681">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">hash_algos()</strong></span> 示例</strong></p>    <div class="example-contents"><p>     在 PHP 8.1.0 中，<span class="function"><strong style="color:#CC7832">hash_algos()</strong></span>      会返回下表所示的算法清单：    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">hash_algos</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; md2<br>    [1] =&gt; md4<br>    [2] =&gt; md5<br>    [3] =&gt; sha1<br>    [4] =&gt; sha224<br>    [5] =&gt; sha256<br>    [6] =&gt; sha384<br>    [7] =&gt; sha512/224<br>    [8] =&gt; sha512/256<br>    [9] =&gt; sha512<br>    [10] =&gt; sha3-224<br>    [11] =&gt; sha3-256<br>    [12] =&gt; sha3-384<br>    [13] =&gt; sha3-512<br>    [14] =&gt; ripemd128<br>    [15] =&gt; ripemd160<br>    [16] =&gt; ripemd256<br>    [17] =&gt; ripemd320<br>    [18] =&gt; whirlpool<br>    [19] =&gt; tiger128,3<br>    [20] =&gt; tiger160,3<br>    [21] =&gt; tiger192,3<br>    [22] =&gt; tiger128,4<br>    [23] =&gt; tiger160,4<br>    [24] =&gt; tiger192,4<br>    [25] =&gt; snefru<br>    [26] =&gt; snefru256<br>    [27] =&gt; gost<br>    [28] =&gt; gost-crypto<br>    [29] =&gt; adler32<br>    [30] =&gt; crc32<br>    [31] =&gt; crc32b<br>    [32] =&gt; crc32c<br>    [33] =&gt; fnv132<br>    [34] =&gt; fnv1a32<br>    [35] =&gt; fnv164<br>    [36] =&gt; fnv1a64<br>    [37] =&gt; joaat<br>    [38] =&gt; murmur3a<br>    [39] =&gt; murmur3c<br>    [40] =&gt; murmur3f<br>    [41] =&gt; xxh32<br>    [42] =&gt; xxh64<br>    [43] =&gt; xxh3<br>    [44] =&gt; xxh128<br>    [45] =&gt; haval128,3<br>    [46] =&gt; haval160,3<br>    [47] =&gt; haval192,3<br>    [48] =&gt; haval224,3<br>    [49] =&gt; haval256,3<br>    [50] =&gt; haval128,4<br>    [51] =&gt; haval160,4<br>    [52] =&gt; haval192,4<br>    [53] =&gt; haval224,4<br>    [54] =&gt; haval256,4<br>    [55] =&gt; haval128,5<br>    [56] =&gt; haval160,5<br>    [57] =&gt; haval192,5<br>    [58] =&gt; haval224,5<br>    [59] =&gt; haval256,5<br>)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.hash-algos-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link hash_hmac_algos()} - 返回适用于 hash_hmac 的已注册散列算法列表</span></li>  </ul> </div> </div>
 * @return array a numerically indexed array containing the list of supported*/
function hash_algos(): array {}

/**
*<div id="function.hash-hkdf" class="refentry"> <div class="refnamediv">  <h1 class="refname">hash_hkdf</h1>  <p class="verinfo">(PHP 7 &gt;= 7.1.2, PHP 8)</p><p class="refpurpose"><span class="refname">hash_hkdf</span> &mdash; <span class="dc-title">Generate a HKDF key derivation of a supplied key input</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.hash-hkdf-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>hash_hkdf</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$algo</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$length</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$info</span><span class="initializer"> = &quot;&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$salt</span><span class="initializer"> = &quot;&quot;</span></span><br>): <span class="type" style="color:#EAB766">string</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.hash-hkdf-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">algo</span></dt>     <dd>      <p class="para">       Name of selected hashing algorithm (i.e. &quot;sha256&quot;, &quot;sha512&quot;, &quot;haval160,4&quot;, etc..)       See <span class="function">{@link hash_algos()}</span> for a list of supported algorithms.       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:         <p class="para">         Non-cryptographic hash functions are not allowed.        </p>       </p></blockquote>      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       Input keying material (raw binary). Cannot be empty.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">length</span></dt>     <dd>      <p class="para">       Desired output length in bytes.       Cannot be greater than 255 times the chosen hash function size.      </p>      <p class="para">       If <span class="parameter" style="color:#3A95FF">length</span> is <span>0</span>, the output length       will default to the chosen hash function size.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">info</span></dt>     <dd>      <p class="para">       Application/context-specific info string.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">salt</span></dt>     <dd>      <p class="para">       Salt to use during derivation.      </p>      <p class="para">       While optional, adding random salt significantly improves the strength of HKDF.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.hash-hkdf-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a string containing a raw binary representation of the derived key   (also known as output keying material - OKM).  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.hash-hkdf-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span> exception if <span class="parameter" style="color:#3A95FF">key</span>   is empty, <span class="parameter" style="color:#3A95FF">algo</span> is unknown/non-cryptographic,   <span class="parameter" style="color:#3A95FF">length</span> is less than <span>0</span> or too large   (greater than 255 times the size of the hash function).  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.hash-hkdf-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        Now throws a <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span> exception on error.        Previously, <strong><span>false</span></strong> was returned and an <strong><span>E_WARNING</span></strong>        message was emitted.       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.hash-hkdf-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2693">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">hash_hkdf()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Generate a random key, and salt to strengthen it during derivation.<br /></span><span style="color: #9876AA">$inputKey </span><span style="color: #007700">= </span><span style="color: #9876AA">random_bytes</span><span style="color: #007700">(</span><span style="color: #9876AA">32</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$salt </span><span style="color: #007700">= </span><span style="color: #9876AA">random_bytes</span><span style="color: #007700">(</span><span style="color: #9876AA">16</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Derive a pair of separate keys, using the same input created above.<br /></span><span style="color: #9876AA">$encryptionKey </span><span style="color: #007700">= </span><span style="color: #9876AA">hash_hkdf</span><span style="color: #007700">(</span><span style="color: #DD0000">'sha256'</span><span style="color: #007700">, </span><span style="color: #9876AA">$inputKey</span><span style="color: #007700">, </span><span style="color: #9876AA">32</span><span style="color: #007700">, </span><span style="color: #DD0000">'aes-256-encryption'</span><span style="color: #007700">, </span><span style="color: #9876AA">$salt</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$authenticationKey </span><span style="color: #007700">= </span><span style="color: #9876AA">hash_hkdf</span><span style="color: #007700">(</span><span style="color: #DD0000">'sha256'</span><span style="color: #007700">, </span><span style="color: #9876AA">$inputKey</span><span style="color: #007700">, </span><span style="color: #9876AA">32</span><span style="color: #007700">, </span><span style="color: #DD0000">'sha-256-authentication'</span><span style="color: #007700">, </span><span style="color: #9876AA">$salt</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$encryptionKey </span><span style="color: #007700">!== </span><span style="color: #9876AA">$authenticationKey</span><span style="color: #007700">); </span><span style="color: #FF8000">// bool(true)<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     The above example produces a pair of separate keys, suitable for creation of an     encrypt-then-HMAC construct, using AES-256 and SHA-256 for encryption and     authentication respectively.    </p></div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.hash-hkdf-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link hash_pbkdf2()} - 生成所提供密码的 PBKDF2 密钥导出</span></li>    <li class="member"><a href="http://www.faqs.org/rfcs/rfc5869" class="link external">&raquo;&nbsp;RFC 5869</a></li>    <li class="member"><a href="https://www.php.net/manual/zh/https://github.com/narfbg/hash_hkdf_compat" class="link external">&raquo;&nbsp;userland implementation</a></li>   </ul>  </span> </div></div>
 * @return string|false <p>Returns a string containing a raw binary representation of the derived key (also known as output keying material - OKM); or <b>FALSE</b> on failure.</p>*/
function hash_hkdf(string $algo, string $key, int $length = 0, string $info = '', string $salt = '') {}

/**
*<div id="function.hash-hmac-algos" class="refentry"> <div class="refnamediv">  <h1 class="refname">hash_hmac_algos</h1>  <p class="verinfo">(PHP 7 &gt;= 7.2.0, PHP 8)</p><p class="refpurpose"><span class="refname">hash_hmac_algos</span> &mdash; <span class="dc-title">返回适用于 hash_hmac 的已注册散列算法列表</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.hash-hmac-algos-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>hash_hmac_algos</strong></span>(): <span class="type" style="color:#EAB766">array</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.hash-hmac-algos-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.hash-hmac-algos-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回数字索引数组，包含适用于 <span class="function">{@link hash_hmac()}</span> 支持的散列算法列表。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.hash-hmac-algos-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-2696">   <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">hash_hmac_algos()</strong></span> 示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">hash_hmac_algos</span><span style="color: #007700">());</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Array<br>(<br>    [0] =&gt; md2<br>    [1] =&gt; md4<br>    [2] =&gt; md5<br>    [3] =&gt; sha1<br>    [4] =&gt; sha224<br>    [5] =&gt; sha256<br>    [6] =&gt; sha384<br>    [7] =&gt; sha512/224<br>    [8] =&gt; sha512/256<br>    [9] =&gt; sha512<br>    [10] =&gt; sha3-224<br>    [11] =&gt; sha3-256<br>    [12] =&gt; sha3-384<br>    [13] =&gt; sha3-512<br>    [14] =&gt; ripemd128<br>    [15] =&gt; ripemd160<br>    [16] =&gt; ripemd256<br>    [17] =&gt; ripemd320<br>    [18] =&gt; whirlpool<br>    [19] =&gt; tiger128,3<br>    [20] =&gt; tiger160,3<br>    [21] =&gt; tiger192,3<br>    [22] =&gt; tiger128,4<br>    [23] =&gt; tiger160,4<br>    [24] =&gt; tiger192,4<br>    [25] =&gt; snefru<br>    [26] =&gt; snefru256<br>    [27] =&gt; gost<br>    [28] =&gt; gost-crypto<br>    [29] =&gt; haval128,3<br>    [30] =&gt; haval160,3<br>    [31] =&gt; haval192,3<br>    [32] =&gt; haval224,3<br>    [33] =&gt; haval256,3<br>    [34] =&gt; haval128,4<br>    [35] =&gt; haval160,4<br>    [36] =&gt; haval192,4<br>    [37] =&gt; haval224,4<br>    [38] =&gt; haval256,4<br>    [39] =&gt; haval128,5<br>    [40] =&gt; haval160,5<br>    [41] =&gt; haval192,5<br>    [42] =&gt; haval224,5<br>    [43] =&gt; haval256,5<br>)<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.hash-hmac-algos-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    在 PHP 7.2.0 之前，获取支持的散列算法列表的唯一方法是调用    <span class="function">{@link hash_algos()}</span>，该方法也会返回不适合    <span class="function">{@link hash_hmac()}</span> 的散列算法。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.hash-hmac-algos-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="function">{@link hash_hmac()} - 使用 HMAC 方法生成带有密钥的散列值</span></li>   <li class="member"><span class="function">{@link hash_algos()} - 返回已注册的散列算法列表</span></li>  </ul> </div></div>
 * @return string[] Returns a numerically indexed array containing the list of supported hashing algorithms suitable for {@see hash_hmac()}.*/
function hash_hmac_algos(): array {}

/**
*<div id="function.hash-pbkdf2" class="refentry"> <div class="refnamediv">  <h1 class="refname">hash_pbkdf2</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">hash_pbkdf2</span> &mdash; <span class="dc-title">生成所提供密码的 PBKDF2 密钥导出</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.hash-pbkdf2-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>hash_pbkdf2</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$algo</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$password</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$salt</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$iterations</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$length</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$binary</span><span class="initializer"> = <strong><span>false</span></strong></span></span><br>): <span class="type" style="color:#EAB766">string</span></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.hash-pbkdf2-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">algo</span></dt>     <dd>      <p class="para">       散列算法名称，例如       <span>md5</span>、<span>sha256</span>、<span>haval160,4</span> 等。       受支持的算法清单请参见 <span class="function">{@link hash_algos()}</span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">password</span></dt>     <dd>      <p class="para">       要进行导出的密码。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">salt</span></dt>     <dd>      <p class="para">       进行导出时所使用的“盐”，这个值应该是随机生成的。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">iterations</span></dt>     <dd>      <p class="para">       进行导出时的迭代次数。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">length</span></dt>     <dd>      <p class="para">       密钥导出数据的长度。如果 <span class="parameter" style="color:#3A95FF">binary</span> 为 <strong><span>true</span></strong>，       此参数为密钥导出数据的字节长度。如果 <span class="parameter" style="color:#3A95FF">binary</span> 为 <strong><span>false</span></strong>，       此参数为密钥导出数据的字节长度的 2 倍，因为 1 个字节数据对应的 2 个 16 进制的字符。      </p>      <p class="para">       如果传入 <span>0</span>，则使用所选算法的完整输出大小。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">binary</span></dt>     <dd>      <p class="para">       设置为 <strong><span>true</span></strong> 输出原始二进制数据，       设置为 <strong><span>false</span></strong> 输出小写 16 进制字符串。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.hash-pbkdf2-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">binary</span> 设置为 <strong><span>true</span></strong>，    则返回原始二进制数据表示的信息摘要，   否则返回 16 进制小写字符串格式表示的信息摘要。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.hash-pbkdf2-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   在以下情况下会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span> 异常：算法未知，<span class="parameter" style="color:#3A95FF">iterations</span>   小于等于 <span>0</span>，<span class="parameter" style="color:#3A95FF">length</span> 小于等于 <span>0</span> 或者   <span class="parameter" style="color:#3A95FF">salt</span> 过长（大于 <strong><span>INT_MAX</span></strong><span> - 4</span>）。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.hash-pbkdf2-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        现在错误时将抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span> 异常。之前返回 <strong><span>false</span></strong>        并发出 <strong><span>E_WARNING</span></strong> 消息。       </td>      </tr>      <tr>       <td>7.2.0</td>       <td>不再支持非加密的散列函数（adler32、crc32、crc32b、fnv132、fnv1a32、fnv164、fnv1a64、joaat）。</td>      </tr>     </tbody>       </table>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.hash-pbkdf2-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2708">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">hash_pbkdf2()</strong></span> 示例，基础用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$password </span><span style="color: #007700">= </span><span style="color: #DD0000">"password"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$iterations </span><span style="color: #007700">= </span><span style="color: #9876AA">600000</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 使用 random_bytes() 生成一个加密安全的随机盐。<br /></span><span style="color: #9876AA">$salt </span><span style="color: #007700">= </span><span style="color: #9876AA">random_bytes</span><span style="color: #007700">(</span><span style="color: #9876AA">16</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$hash </span><span style="color: #007700">= </span><span style="color: #9876AA">hash_pbkdf2</span><span style="color: #007700">(</span><span style="color: #DD0000">"sha256"</span><span style="color: #007700">, </span><span style="color: #9876AA">$password</span><span style="color: #007700">, </span><span style="color: #9876AA">$salt</span><span style="color: #007700">, </span><span style="color: #9876AA">$iterations</span><span style="color: #007700">, </span><span style="color: #9876AA">20</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$hash</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 对于原始二进制，$length 需要减半以获得相同的结果<br /></span><span style="color: #9876AA">$hash </span><span style="color: #007700">= </span><span style="color: #9876AA">hash_pbkdf2</span><span style="color: #007700">(</span><span style="color: #DD0000">"sha256"</span><span style="color: #007700">, </span><span style="color: #9876AA">$password</span><span style="color: #007700">, </span><span style="color: #9876AA">$salt</span><span style="color: #007700">, </span><span style="color: #9876AA">$iterations</span><span style="color: #007700">, </span><span style="color: #9876AA">10</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">bin2hex</span><span style="color: #007700">(</span><span style="color: #9876AA">$hash</span><span style="color: #007700">));</span><span style="color: #9876AA">?&gt;<br /></span>?&gt;</span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(20) &quot;120fb6cffcf8b32c43e7&quot;<br>string(20) &quot;120fb6cffcf8b32c43e7&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.hash-pbkdf2-notes">  <h3 class="title">注释</h3>  <div class="caution"><strong class="caution">警告</strong>   <p class="para">    为了安全起见，可以使用 PBKDF2 方法对密码明文进行散列运算后再存储。但是更好的方案是使用    <span class="function">{@link password_hash()}</span> 函数或者使用 <strong><span>CRYPT_BLOWFISH</span></strong> 算法调用     <span class="function">{@link crypt()}</span> 函数。   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.hash-pbkdf2-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link password_hash()} - 创建密码的散列（hash）</span></li>    <li class="member"><span class="function">{@link hash_hkdf()} - Generate a HKDF key derivation of a supplied key input</span></li>    <li class="member"><span class="function">{@link sodium_crypto_pwhash()} - Derive a key from a password, using Argon2</span></li>   </ul>  </span> </div></div>
 * @return string a string containing the derived key as lowercase hexits unless*/
function hash_pbkdf2(
    string $algo,
    string $password,
    string $salt,
    int $iterations,
    int $length = 0,
    bool $binary = false,
    #[PhpStormStubsElementAvailable(from: '8.1')] array $options = []
): string {}

/**
*<div id="function.mhash-keygen-s2k" class="refentry"> <div class="refnamediv">  <h1 class="refname">mhash_keygen_s2k</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">mhash_keygen_s2k</span> &mdash; <span class="dc-title">Generates a key</span></p> </div> <div id="function.mhash-keygen-s2k-refsynopsisdiv">  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数自 PHP 8.1.0 起<em>弃用</em>。强烈建议不要应用此函数。</p></div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.mhash-keygen-s2k-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>mhash_keygen_s2k</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$algo</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$password</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$salt</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$length</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Generates a key according to the given <span class="parameter" style="color:#3A95FF">algo</span>, using an user   provided <span class="parameter" style="color:#3A95FF">password</span>.  </p>  <p class="para">   This is the Salted S2K algorithm as specified in the OpenPGP   document (<a href="http://www.faqs.org/rfcs/rfc2440" class="link external">&raquo;&nbsp;RFC 2440</a>).  </p>  <p class="para">   Keep in mind that user supplied passwords are not really suitable   to be used as keys in cryptographic algorithms, since users normally   choose keys they can write on keyboard. These passwords use   only 6 to 7 bits per character (or less). It is highly recommended   to use some kind of transformation (like this function) to the user   supplied key.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.mhash-keygen-s2k-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">algo</span></dt>     <dd>      <p class="para">       The hash ID used to create the key.       One of the <strong><span>MHASH_hashname</span></strong> constants.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">password</span></dt>     <dd>      <p class="para">       An user supplied password.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">salt</span></dt>     <dd>      <p class="para">       Must be different and random enough for every key you generate in       order to create different keys. Because <span class="parameter" style="color:#3A95FF">salt</span>       must be known when you check the keys, it is a good idea to append       the key to it. Salt has a fixed length of 8 bytes and will be padded       with zeros if you supply less bytes.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">length</span></dt>     <dd>      <p class="para">       The key length, in bytes.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.mhash-keygen-s2k-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the generated key as a string, or <strong><span>false</span></strong> on error.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.mhash-keygen-s2k-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.1.0</td>       <td>        This function has been deprecated.        Use the <a href="https://www.php.net/manual/zh/ref.hash.php" class="link"><span>hash_*()</span> functions</a> instead.       </td>      </tr>     </tbody>       </table>  </span> </div> </div>
 * @return string|false the generated key as a string, or <b>FALSE</b> on error.*/
function mhash_keygen_s2k(int $algo, string $password, string $salt, int $length): string|false {}

/**
*<div id="function.mhash-get-block-size" class="refentry"> <div class="refnamediv">  <h1 class="refname">mhash_get_block_size</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">mhash_get_block_size</span> &mdash; <span class="dc-title">Gets the block size of the specified hash</span></p> </div> <div id="function.mhash-get-block-size-refsynopsisdiv">  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数自 PHP 8.1.0 起<em>弃用</em>。强烈建议不要应用此函数。</p></div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.mhash-get-block-size-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>mhash_get_block_size</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$algo</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">int</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Gets the size of a block of the specified <span class="parameter" style="color:#3A95FF">algo</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.mhash-get-block-size-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">algo</span></dt>     <dd>      <p class="para">       The hash ID. One of the <strong><span>MHASH_hashname</span></strong> constants.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.mhash-get-block-size-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the size in bytes or <strong><span>false</span></strong>, if the <span class="parameter" style="color:#3A95FF">algo</span>   does not exist.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.mhash-get-block-size-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.1.0</td>       <td>        This function has been deprecated.        Use the <a href="https://www.php.net/manual/zh/ref.hash.php" class="link"><span>hash_*()</span> functions</a> instead.       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.mhash-get-block-size-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2768">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">mhash_get_block_size()</strong></span> Example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">mhash_get_block_size</span><span style="color: #007700">(</span><span style="color: #9876AA">MHASH_MD5</span><span style="color: #007700">); </span><span style="color: #FF8000">// 16<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div></div>
 * @return int|false the size in bytes or <b>FALSE</b>, if the <i>hash</i>*/
function mhash_get_block_size(int $algo): int|false {}

/**
*<div id="function.mhash-get-hash-name" class="refentry"> <div class="refnamediv">  <h1 class="refname">mhash_get_hash_name</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">mhash_get_hash_name</span> &mdash; <span class="dc-title">Gets the name of the specified hash</span></p> </div> <div id="function.mhash-get-hash-name-refsynopsisdiv">  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数自 PHP 8.1.0 起<em>弃用</em>。强烈建议不要应用此函数。</p></div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.mhash-get-hash-name-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>mhash_get_hash_name</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$algo</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Gets the name of the specified <span class="parameter" style="color:#3A95FF">algo</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.mhash-get-hash-name-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">algo</span></dt>     <dd>      <p class="para">       The hash ID. One of the <strong><span>MHASH_hashname</span></strong> constants.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.mhash-get-hash-name-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the name of the hash or <strong><span>false</span></strong>, if the hash does not exist.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.mhash-get-hash-name-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.1.0</td>       <td>        This function has been deprecated.        Use the <a href="https://www.php.net/manual/zh/ref.hash.php" class="link"><span>hash_*()</span> functions</a> instead.       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.mhash-get-hash-name-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2771">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">mhash_get_hash_name()</strong></span> Example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">mhash_get_hash_name</span><span style="color: #007700">(</span><span style="color: #9876AA">MHASH_MD5</span><span style="color: #007700">); </span><span style="color: #FF8000">// MD5<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div></div>
 * @return string|false the name of the hash or <b>FALSE</b>, if the hash does not exist.*/
function mhash_get_hash_name(int $algo): string|false {}

/**
*<div id="function.mhash-count" class="refentry"> <div class="refnamediv">  <h1 class="refname">mhash_count</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">mhash_count</span> &mdash; <span class="dc-title">Gets the highest available hash ID</span></p> </div> <div id="function.mhash-count-refsynopsisdiv">  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数自 PHP 8.1.0 起<em>弃用</em>。强烈建议不要应用此函数。</p></div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.mhash-count-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>mhash_count</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   Gets the highest available hash ID.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.mhash-count-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.mhash-count-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the highest available hash ID. Hashes are numbered from 0 to this   hash ID.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.mhash-count-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.1.0</td>       <td>        This function has been deprecated.        Use the <a href="https://www.php.net/manual/zh/ref.hash.php" class="link"><span>hash_*()</span> functions</a> instead.       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.mhash-count-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="example-2765">    <p><strong>示例 #1 Traversing all hashes</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$nr </span><span style="color: #007700">= </span><span style="color: #9876AA">mhash_count</span><span style="color: #007700">();<br /><br />for (</span><span style="color: #9876AA">$i </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">; </span><span style="color: #9876AA">$i </span><span style="color: #007700">&lt;= </span><span style="color: #9876AA">$nr</span><span style="color: #007700">; </span><span style="color: #9876AA">$i</span><span style="color: #007700">++) {<br />    echo </span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"The blocksize of %s is %d\n"</span><span style="color: #007700">,<br />        </span><span style="color: #9876AA">mhash_get_hash_name</span><span style="color: #007700">(</span><span style="color: #9876AA">$i</span><span style="color: #007700">),<br />        </span><span style="color: #9876AA">mhash_get_block_size</span><span style="color: #007700">(</span><span style="color: #9876AA">$i</span><span style="color: #007700">));<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div></div>
 * @return int<0, max> the highest available hash ID. Hashes are numbered from 0 to this*/
function mhash_count(): int {}

/**
*<div id="function.mhash" class="refentry"> <div class="refnamediv">  <h1 class="refname">mhash</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">mhash</span> &mdash; <span class="dc-title">Computes hash</span></p> </div> <div id="function.mhash-refsynopsisdiv">  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数自 PHP 8.1.0 起<em>弃用</em>。强烈建议不要应用此函数。</p></div> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.mhash-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>mhash</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$algo</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$key</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong style="color:#CC7832">mhash()</strong></span> applies a hash function specified by   <span class="parameter" style="color:#3A95FF">algo</span> to the <span class="parameter" style="color:#3A95FF">data</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.mhash-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">algo</span></dt>     <dd>      <p class="para">       The hash ID. One of the <strong><span>MHASH_hashname</span></strong> constants.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">data</span></dt>     <dd>      <p class="para">       The user input, as a string.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">key</span></dt>     <dd>      <p class="para">       If specified, the function will return the resulting HMAC instead.       HMAC is keyed hashing for message authentication, or simply a message       digest that depends on the specified key. Not all algorithms        supported in mhash can be used in HMAC mode.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.mhash-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the resulting hash (also called digest) or HMAC as a string, or   <strong><span>false</span></strong> on error.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.mhash-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.1.0</td>       <td>        This function has been deprecated.        Use the <a href="https://www.php.net/manual/zh/ref.hash.php" class="link"><span>hash_*()</span> functions</a> instead.       </td>      </tr>      <tr>       <td>8.0.0</td>       <td>        <span class="parameter" style="color:#3A95FF">key</span> is now nullable.       </td>      </tr>     </tbody>       </table>  </span> </div> </div>
 * @return string|false the resulting hash (also called digest) or HMAC as a string, or*/
function mhash(int $algo, string $data, ?string $key): string|false {}

/**
*     <span class="function">{@link hash_init()}</span> 中的可选标志。表示 HMAC digest-keying 算法应被用于当前散列上下文环境。     
*/
define('HASH_HMAC', 1);
define('MHASH_CRC32', 0);
/**
 * @since 7.4
 */
define('MHASH_CRC32C', 34);
define('MHASH_MD5', 1);
define('MHASH_SHA1', 2);
define('MHASH_HAVAL256', 3);
define('MHASH_RIPEMD160', 5);
define('MHASH_TIGER', 7);
define('MHASH_GOST', 8);
define('MHASH_CRC32B', 9);
define('MHASH_HAVAL224', 10);
define('MHASH_HAVAL192', 11);
define('MHASH_HAVAL160', 12);
define('MHASH_HAVAL128', 13);
define('MHASH_TIGER128', 14);
define('MHASH_TIGER160', 15);
define('MHASH_MD4', 16);
define('MHASH_SHA256', 17);
define('MHASH_ADLER32', 18);
define('MHASH_SHA224', 19);
define('MHASH_SHA512', 20);
define('MHASH_SHA384', 21);
define('MHASH_WHIRLPOOL', 22);
define('MHASH_RIPEMD128', 23);
define('MHASH_RIPEMD256', 24);
define('MHASH_RIPEMD320', 25);
define('MHASH_SNEFRU256', 27);
define('MHASH_MD2', 28);
define('MHASH_FNV132', 29);
define('MHASH_FNV1A32', 30);
define('MHASH_FNV164', 31);
define('MHASH_FNV1A64', 32);
define('MHASH_JOAAT', 33);
/**
 * @since 8.1
 */
define('MHASH_MURMUR3A', 35);
/**
 * @since 8.1
 */
define('MHASH_MURMUR3C', 36);
/**
 * @since 8.1
 */
define('MHASH_MURMUR3F', 37);
/**
 * @since 8.1
 */
define('MHASH_XXH32', 38);
/**
 * @since 8.1
 */
define('MHASH_XXH64', 39);
/**
 * @since 8.1
 */
define('MHASH_XXH3', 40);
/**
 * @since 8.1
 */
define('MHASH_XXH128', 41);

/**
*<div id="class.hashcontext" class="reference"> <h1 class="title">HashContext 类</h1>  <div class="partintro"><p class="verinfo">(PHP 7 &gt;= 7.2.0, PHP 8)</p>  <div class="section" id="hashcontext.intro">   <h2 class="title">简介</h2>   <p class="para">   </p>  </div>  <div class="section" id="hashcontext.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">final</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">HashContext</strong></strong>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">private</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/hashcontext.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>()</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/hashcontext.serialize.php" class="methodname" style="color:#CC7832">__serialize</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/hashcontext.unserialize.php" class="methodname" style="color:#CC7832">__unserialize</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">array</span> <span class="parameter" style="color:#3A95FF">$data</span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link HashContext::__construct} — 私有构造方法以禁止直接实例化</li><li>{@link HashContext::__serialize} — 序列化 HashContext 对象</li><li>{@link HashContext::__unserialize} — 反序列化 data 参数为 HashContext 对象</li></ul></div>
*/
final class HashContext
{
    private function __construct() {}

    public function __serialize(): array {}

    /**
     * @param array $data
     */
    public function __unserialize(#[LanguageLevelTypeAware(['8.0' => 'array'], default: '')] $data): void {}
}
// End of hash v.1.0
