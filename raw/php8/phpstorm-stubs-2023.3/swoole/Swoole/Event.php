<?php

declare(strict_types=1);

namespace Swoole;

/**
*<div id="class.event" class="reference"> <h1 class="title">The Event class</h1>  <div class="partintro"><p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p>  <div class="section" id="event.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">Event</strong></span>    class represents and event firing on a file descriptor being ready to read    from or write to; a file descriptor becoming ready to read from or write    to(edge-triggered I/O only); a timeout expiring; a signal occurring; a    user-triggered event.   </p>   <p class="para">    Every event is associated with    <span class="classname"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="classname">EventBase</a></span>    . However, event will never fire until it is    <em>added</em>    (via    <span class="methodname" style="color:#CC7832">{@link Event::add()}</span>    ). An added event remains in    <em>pending</em>    state until the registered event occurs, thus turning it to    <em>active</em>    state. To handle events user may register a callback which is called when    event becomes active. If event is configured    <em>persistent</em>    , it remains pending. If it is not persistent, it stops being pending when    it&#039;s callback runs.    <span class="methodname" style="color:#CC7832">{@link Event::del()}</span>    method    <em>deletes</em>    event, thus making it non-pending. By means of    <span class="methodname" style="color:#CC7832">{@link Event::add()}</span>    method it could be added again.   </p>  </div>  <div class="section" id="event.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass">     <strong class="classname"></strong>    </span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">final</span>      <span class="modifier">class</span> <strong class="classname">Event</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.event.php#event.constants.et"><var class="varname">ET</var></a></var><span class="initializer"> = 32</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.event.php#event.constants.persist"><var class="varname">PERSIST</var></a></var><span class="initializer"> = 16</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.event.php#event.constants.read"><var class="varname">READ</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.event.php#event.constants.write"><var class="varname">WRITE</var></a></var><span class="initializer"> = 4</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.event.php#event.constants.signal"><var class="varname">SIGNAL</var></a></var><span class="initializer"> = 8</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766">int</span>      <var class="fieldsynopsis_varname"><a href="https://www.php.net/manual/zh/class.event.php#event.constants.timeout"><var class="varname">TIMEOUT</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">readonly</span>     <span class="type" style="color:#EAB766">bool</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.event.php#event.props.pending">$<var class="varname">pending</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.add.php" class="methodname" style="color:#CC7832">add</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$timeout</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$fd</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$what</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>    <span class="initializer"> = NULL</span>   </span><br>)</div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.del.php" class="methodname" style="color:#CC7832">del</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.free.php" class="methodname" style="color:#CC7832">free</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.getsupportedmethods.php" class="methodname" style="color:#CC7832">getSupportedMethods</a></span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.pending.php" class="methodname" style="color:#CC7832">pending</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$flags</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.set.php" class="methodname" style="color:#CC7832">set</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$fd</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$what</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$cb</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>   <span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.setpriority.php" class="methodname" style="color:#CC7832">setPriority</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$priority</span>   </span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.settimer.php" class="methodname" style="color:#CC7832">setTimer</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.signal.php" class="methodname" style="color:#CC7832">signal</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$signum</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>   <span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.event.php" class="type Event" style="color:#EAB766">Event</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span>   <span class="modifier">static</span>   <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/event.timer.php" class="methodname" style="color:#CC7832">timer</a></span>(<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$cb</span>   </span>, <span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.event.php" class="type Event" style="color:#EAB766">Event</a></span></div>   }</div>  </div>  <div class="section" id="event.props">   <h2 class="title">属性</h2>   <dl>         <dt id="event.props.pending">      <var class="varname">pending</var>     </dt>     <dd>      <p class="para">       Whether event is pending. See       <a href="https://www.php.net/manual/zh/event.persistence.php" class="link">About event persistence</a>       .      </p>     </dd>       </dl>  </div>  <div class="section" id="event.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="event.constants.et">      <strong><span>Event::ET</span></strong>     </dt>     <dd>      <p class="para">       Indicates that the event should be edge-triggered, if the underlying       event base backend supports edge-triggered events. This affects the       semantics of       <strong><span>Event::READ</span></strong>       and       <strong><span>Event::WRITE</span></strong>       .      </p>     </dd>             <dt id="event.constants.persist">      <strong><span>Event::PERSIST</span></strong>     </dt>     <dd>      <p class="para">       Indicates that the event is persistent. See       <a href="https://www.php.net/manual/zh/event.persistence.php" class="link">About event persistence</a>       .      </p>     </dd>             <dt id="event.constants.read">      <strong><span>Event::READ</span></strong>     </dt>     <dd>      <p class="para">       This flag indicates an event that becomes active when the provided file       descriptor(usually a stream resource, or socket) is ready for reading.      </p>     </dd>             <dt id="event.constants.write">      <strong><span>Event::WRITE</span></strong>     </dt>     <dd>      <p class="para">       This flag indicates an event that becomes active when the provided file       descriptor(usually a stream resource, or socket) is ready for reading.      </p>     </dd>             <dt id="event.constants.signal">      <strong><span>Event::SIGNAL</span></strong>     </dt>     <dd>      <p class="para">       Used to implement signal detection. See &quot;Constructing signal events&quot;       below.      </p>     </dd>             <dt id="event.constants.timeout">      <strong><span>Event::TIMEOUT</span></strong>     </dt>     <dd>      <p class="para">       This flag indicates an event that becomes active after a timeout       elapses.      </p>      <p class="para">       The       <strong><span>Event::TIMEOUT</span></strong>       flag is ignored when constructing an event: one can either set a       timeout when event is       <em>added</em>       , or not. It is set in the       <span>$what</span>       argument to the callback function when a timeout has occurred.      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Event::add} — Makes event pending</li><li>{@link Event::addSignal} — 别名 Event::add</li><li>{@link Event::addTimer} — 别名 Event::add</li><li>{@link Event::__construct} — Constructs Event object</li><li>{@link Event::del} — Makes event non-pending</li><li>{@link Event::delSignal} — 别名 Event::del</li><li>{@link Event::delTimer} — 别名 Event::del</li><li>{@link Event::free} — Make event non-pending and free resources allocated for this  event</li><li>{@link Event::getSupportedMethods} — Returns array with of the names of the methods supported in this version of Libevent</li><li>{@link Event::pending} — Detects whether event is pending or scheduled</li><li>{@link Event::set} — Re-configures event</li><li>{@link Event::setPriority} — Set event priority</li><li>{@link Event::setTimer} — Re-configures timer event</li><li>{@link Event::signal} — Constructs signal event object</li><li>{@link Event::timer} — Constructs timer event object</li></ul></div>
*/
class Event
{
/**
*<div id="event.add" class="refentry"> <div class="refnamediv">  <h1 class="refname">Event::add</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">Event::add</span> &mdash; <span class="dc-title">Makes event pending</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-event.add-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>Event::add</strong></span>(<span class="methodparam">    <span class="type" style="color:#EAB766">float</span>     <span class="parameter" style="color:#3A95FF">$timeout</span>   <span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Marks event pending. Non-pending event will never occur, and the event   callback will never be called. In conjunction with   <span class="methodname" style="color:#CC7832">{@link Event::del()}</span>   an event could be re-scheduled by user at any time.  </p>  <p class="para">   If   <span class="methodname" style="color:#CC7832"><strong>Event::add()</strong></span>   is called on an already pending event, libevent will leave it pending and   re-schedule it with the given timeout(if specified). If in this case   timeout is not specified,   <span class="methodname" style="color:#CC7832"><strong>Event::add()</strong></span>   has no effect.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-event.add-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">timeout</span>    </dt>    <dd>     <span>      Timeout in seconds.     </span>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-event.add-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-event.add-examples">  <h3 class="title">示例</h3>  <div class="example" id="">   <p><strong>示例 #1 Adding a custom signal</strong></p>   <div class="example-contents">    <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">//<br />Launch it in a terminal window:<br /><br />$ php examples/signal.php<br /><br />In another terminal window find out the pid and send SIGTERM, e.g.:<br /><br />$ ps aux | grep examp<br />ruslan    3976  0.2  0.0 139896 11256 pts/1    S+   10:25   0:00 php examples/signal.php<br />ruslan    3978  0.0  0.0   9572   864 pts/2    S+   10:26   0:00 grep --color=auto examp<br />$ kill -TERM 3976<br /><br />At the first terminal window you should catch the following:<br /><br />Caught signal 15<br /><br /></span><span style="color: #007700">class </span><span style="color: #9876AA">MyEventSignal </span><span style="color: #007700">{<br />    private </span><span style="color: #9876AA">$base</span><span style="color: #007700">, </span><span style="color: #9876AA">$ev</span><span style="color: #007700">;<br /><br />    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">) {<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">base </span><span style="color: #007700">= </span><span style="color: #9876AA">$base</span><span style="color: #007700">;<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ev </span><span style="color: #007700">= </span><span style="color: #9876AA">Event</span><span style="color: #007700">::</span><span style="color: #9876AA">signal</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">, </span><span style="color: #9876AA">SIGTERM</span><span style="color: #007700">, array(</span><span style="color: #9876AA">$this</span><span style="color: #007700">, </span><span style="color: #DD0000">'eventSighandler'</span><span style="color: #007700">));<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ev</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">add</span><span style="color: #007700">();<br />    }<br /><br />    public function </span><span style="color: #9876AA">eventSighandler</span><span style="color: #007700">(</span><span style="color: #9876AA">$no</span><span style="color: #007700">, </span><span style="color: #9876AA">$c</span><span style="color: #007700">) {<br />        echo </span><span style="color: #DD0000">"Caught signal </span><span style="color: #9876AA">$no</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">exit</span><span style="color: #007700">();<br />    }<br />}<br /><br /></span><span style="color: #9876AA">$base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$c    </span><span style="color: #007700">= new </span><span style="color: #9876AA">MyEventSignal</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">loop</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Caught signal 15<br></span></div>   </div>  </div>  <div class="example" id="">   <p><strong>示例 #2 Adding a timer</strong></p>   <div class="example-contents">    <div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$base </span><span style="color: #007700">= new </span><span style="color: #9876AA">EventBase</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">$n </span><span style="color: #007700">= </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$e </span><span style="color: #007700">= </span><span style="color: #9876AA">Event</span><span style="color: #007700">::</span><span style="color: #9876AA">timer</span><span style="color: #007700">(</span><span style="color: #9876AA">$base</span><span style="color: #007700">, function(</span><span style="color: #9876AA">$n</span><span style="color: #007700">) use (&amp;</span><span style="color: #9876AA">$e</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$n</span><span style="color: #DD0000"> seconds elapsed\n"</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">delTimer</span><span style="color: #007700">();<br />}, </span><span style="color: #9876AA">$n</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">add</span><span style="color: #007700">(</span><span style="color: #9876AA">$n</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$base</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">loop</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;">    <div class="cdata"><span>2 seconds elapsed<br></span></div>   </div>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-event.add-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member"><span class="methodname" style="color:#CC7832"><strong>Event::add()</strong></span></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link Event::del()} - Makes event non-pending</span></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link Event::signal()} - Constructs signal event object</span></li>   <li class="member"><span class="methodname" style="color:#CC7832">{@link Event::timer()} - Constructs timer event object</span></li>  </ul> </div></div>
     * @return mixed*/
    public static function add($fd, ?callable $read_callback, ?callable $write_callback = null, $events = null) {}

/**
*<div id="event.del" class="refentry"> <div class="refnamediv">  <h1 class="refname">Event::del</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">Event::del</span> &mdash; <span class="dc-title">Makes event non-pending</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-event.del-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>Event::del</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Removes an event from the set of monitored events, i.e. makes it   non-pending.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-event.del-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-event.del-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-event.del-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li class="member">    <span class="methodname" style="color:#CC7832">{@link Event::add()} - Makes event pending</span>   </li>  </ul> </div></div>
     * @return mixed*/
    public static function del($fd) {}

/**
*<div id="event.set" class="refentry"> <div class="refnamediv">  <h1 class="refname">Event::set</h1>  <p class="verinfo">(PECL event &gt;= 1.2.6-beta)</p><p class="refpurpose"><span class="refname">Event::set</span> &mdash; <span class="dc-title">Re-configures event</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-event.set-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="methodname" style="color:#CC7832"><strong>Event::set</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.eventbase.php" class="type EventBase" style="color:#EAB766">EventBase</a></span>     <span class="parameter" style="color:#3A95FF">$base</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$fd</span>   </span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766">int</span>     <span class="parameter" style="color:#3A95FF">$what</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>     <span class="parameter" style="color:#3A95FF">$cb</span>   <span class="initializer"> = ?</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam">    <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span>     <span class="parameter" style="color:#3A95FF">$arg</span>   <span class="initializer"> = ?</span></span><br>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Re-configures event. Note, this function doesn&#039;t invoke obsolete libevent&#039;s   event_set. It calls event_assign instead.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-event.set-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">base</span>    </dt>    <dd>     <span>      The event base to associate the event with.     </span>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">fd</span>    </dt>    <dd>     <p class="para">      Stream resource, socket resource, or numeric file descriptor. For timer      events pass      <strong><span>-1</span></strong>      . For signal events pass the signal number, e.g.      <strong><span>SIGHUP</span></strong>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">what</span>    </dt>    <dd>     <p class="para">      See      <a href="https://www.php.net/manual/zh/event.flags.php" class="link">Event flags</a>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">cb</span>    </dt>    <dd>     <p class="para">      The event callback. See      <a href="https://www.php.net/manual/zh/event.callbacks.php" class="link">Event callbacks</a>      .     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">arg</span>    </dt>    <dd>     <p class="para">      Custom data associated with the event. It will be passed to the callback      when the event becomes active.     </p>    </dd>     </dl> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-event.set-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div></div>
     * @return mixed*/
    public static function set($fd, ?callable $read_callback = null, ?callable $write_callback = null, $events = null) {}

    /**
     * @param mixed $fd
     * @param mixed|null $events
     * @return mixed
     */
    public static function isset($fd, $events = null) {}

    /**
     * @return mixed
     */
    public static function dispatch() {}

    /**
     * @return true
     */
    public static function defer(callable $callback) {}

    /**
     * @param mixed|null $before
     * @return mixed
     */
    public static function cycle(?callable $callback, $before = null) {}

    /**
     * @param mixed $fd
     * @param mixed $data
     * @return mixed
     */
    public static function write($fd, $data) {}

    /**
     * @return mixed
     */
    public static function wait() {}

    /**
     * @return mixed
     */
    public static function rshutdown() {}

    /**
     * @return mixed
     */
    public static function exit() {}
}
