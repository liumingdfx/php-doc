<?php

// Start of SimpleXML v.0.1
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\TentativeType;
use JetBrains\PhpStorm\Pure;

/**
*<div id="class.simplexmlelement" class="reference"> <h1 class="title">The SimpleXMLElement class</h1>   <div class="partintro"><p class="verinfo">(PHP 5, PHP 7, PHP 8)</p>   <div class="section" id="simplexmlelement.intro">   <h2 class="title">简介</h2>   <p class="para">    Represents an element in an XML document.   </p>  </div>   <div class="section" id="simplexmlelement.synopsis">   <h2 class="title">类摘要</h2>    <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">SimpleXMLElement</strong></strong>             <span class="modifier">implements</span>      <a href="https://www.php.net/manual/zh/class.stringable.php" class="interfacename">Stringable</a>,     <a href="https://www.php.net/manual/zh/class.countable.php" class="interfacename">Countable</a>,     <a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="interfacename">RecursiveIterator</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$options</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$dataIsURL</span><span class="initializer"> = <strong><span>false</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$namespaceOrPrefix</span><span class="initializer"> = &quot;&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$isPrefix</span><span class="initializer"> = <strong><span>false</span></strong></span></span><br>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.addattribute.php" class="methodname" style="color:#CC7832">addAttribute</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$qualifiedName</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$namespace</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.addchild.php" class="methodname" style="color:#CC7832">addChild</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$qualifiedName</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$value</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$namespace</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.asxml.php" class="methodname" style="color:#CC7832">asXML</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$filename</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">bool</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.attributes.php" class="methodname" style="color:#CC7832">attributes</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$namespaceOrPrefix</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$isPrefix</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.children.php" class="methodname" style="color:#CC7832">children</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$namespaceOrPrefix</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$isPrefix</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.count.php" class="methodname" style="color:#CC7832">count</a></span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.getdocnamespaces.php" class="methodname" style="color:#CC7832">getDocNamespaces</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$recursive</span><span class="initializer"> = <strong><span>false</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$fromRoot</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.getname.php" class="methodname" style="color:#CC7832">getName</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.getnamespaces.php" class="methodname" style="color:#CC7832">getNamespaces</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$recursive</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.getchildren.php" class="methodname" style="color:#CC7832">getChildren</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.haschildren.php" class="methodname" style="color:#CC7832">hasChildren</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.registerxpathnamespace.php" class="methodname" style="color:#CC7832">registerXPathNamespace</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$prefix</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$namespace</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.tostring.php" class="methodname" style="color:#CC7832">__toString</a></span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://www.php.net/manual/zh/simplexmlelement.xpath.php" class="methodname" style="color:#CC7832">xpath</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$expression</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">null</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>   }</div>   </div>  <div class="section">   <h2 class="title">更新日志</h2>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        <span class="classname"><strong class="classname">SimpleXMLElement</strong></span> implements        <span class="interfacename"><a href="https://www.php.net/manual/zh/class.stringable.php" class="interfacename">Stringable</a></span>,        <span class="interfacename"><a href="https://www.php.net/manual/zh/class.countable.php" class="interfacename">Countable</a></span>,        and <span class="interfacename"><a href="https://www.php.net/manual/zh/class.recursiveiterator.php" class="interfacename">RecursiveIterator</a></span> now.       </td>      </tr>     </tbody>       </table>  </div>  </div>  <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link SimpleXMLElement::addAttribute} — Adds an attribute to the SimpleXML element</li><li>{@link SimpleXMLElement::addChild} — Adds a child element to the XML node</li><li>{@link SimpleXMLElement::asXML} — Return a well-formed XML string based on SimpleXML element</li><li>{@link SimpleXMLElement::attributes} — Identifies an element's attributes</li><li>{@link SimpleXMLElement::children} — Finds children of given node</li><li>{@link SimpleXMLElement::__construct} — Creates a new SimpleXMLElement object</li><li>{@link SimpleXMLElement::count} — Counts the children of an element</li><li>{@link SimpleXMLElement::current} — Returns the current element</li><li>{@link SimpleXMLElement::getDocNamespaces} — Returns namespaces declared in document</li><li>{@link SimpleXMLElement::getName} — Gets the name of the XML element</li><li>{@link SimpleXMLElement::getNamespaces} — Returns namespaces used in document</li><li>{@link SimpleXMLElement::getChildren} — Returns the sub-elements of the current element</li><li>{@link SimpleXMLElement::hasChildren} — Checks whether the current element has sub elements</li><li>{@link SimpleXMLElement::key} — Return current key</li><li>{@link SimpleXMLElement::next} — Move to next element</li><li>{@link SimpleXMLElement::registerXPathNamespace} — Creates a prefix/ns context for the next XPath query</li><li>{@link SimpleXMLElement::rewind} — Rewind to the first element</li><li>{@link SimpleXMLElement::saveXML} — 别名 SimpleXMLElement::asXML</li><li>{@link SimpleXMLElement::__toString} — Returns the string content</li><li>{@link SimpleXMLElement::valid} — Check whether the current element is valid</li><li>{@link SimpleXMLElement::xpath} — Runs XPath query on XML data</li></ul></div>
*/
class SimpleXMLElement implements Traversable, ArrayAccess, Countable, Iterator, Stringable, RecursiveIterator
{
    /**
     * Creates a new SimpleXMLElement object
     * @link https://php.net/manual/en/simplexmlelement.construct.php
     * @param string $data A well-formed XML string or the path or URL to an XML document if data_is_url is TRUE.
     * @param int $options Optionally used to specify additional Libxml parameters.
     * @param bool $dataIsURL By default, data_is_url is FALSE.
     * Use TRUE to specify that data is a path or URL to an XML document instead of string data.
     * @param string $namespaceOrPrefix Namespace prefix or URI.
     * @param bool $isPrefix TRUE if ns is a prefix, FALSE if it's a URI; defaults to FALSE.
     * @throws Exception if the XML data could not be parsed.
     * @since 5.0.1
     */
    #[Pure]
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $data,
        #[LanguageLevelTypeAware(['8.0' => 'int'], default: '')] $options = 0,
        #[LanguageLevelTypeAware(['8.0' => 'bool'], default: '')] $dataIsURL = false,
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $namespaceOrPrefix = "",
        #[LanguageLevelTypeAware(['8.0' => 'bool'], default: '')] $isPrefix = false
    ) {}

    /**
     * Provides access to element's children
     * private Method not callable directly, stub exists for typehint only
     * @param string $name child name
     * @return static
     */
    private function __get($name) {}

/**
*<div id="simplexmlelement.asxml" class="refentry"> <div class="refnamediv">  <h1 class="refname">SimpleXMLElement::asXML</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SimpleXMLElement::asXML</span> &mdash; <span class="dc-title">   Return a well-formed XML string based on SimpleXML element  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-simplexmlelement.asxml-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::asXML</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$filename</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">bool</span></span></div>  <p class="para rdfs-comment">   The <span>asXML</span> method formats the parent object&#039;s data   in XML version 1.0.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-simplexmlelement.asxml-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">filename</span></dt>     <dd>      <p class="para">       If a <span class="type" style="color:#EAB766">string</span> value is provided, the function writes the data to the file rather than       returning it.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-simplexmlelement.asxml-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   If the <span class="parameter" style="color:#3A95FF">filename</span> isn&#039;t specified, this function   returns a <span class="type" style="color:#EAB766">string</span> on success and <strong><span>false</span></strong> on error. If the   parameter is specified, it returns <strong><span>true</span></strong> if the file was written   successfully and <strong><span>false</span></strong> otherwise.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-simplexmlelement.asxml-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">filename</span> is nullable now.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-simplexmlelement.asxml-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Get XML</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$string </span><span style="color: #007700">= &lt;&lt;&lt;XML<br /></span><span style="color: #DD0000">&lt;a&gt;<br /> &lt;b&gt;<br />  &lt;c&gt;text&lt;/c&gt;<br />  &lt;c&gt;stuff&lt;/c&gt;<br /> &lt;/b&gt;<br /> &lt;d&gt;<br />  &lt;c&gt;code&lt;/c&gt;<br /> &lt;/d&gt;<br />&lt;/a&gt;<br /></span><span style="color: #007700">XML;<br /><br /></span><span style="color: #9876AA">$xml </span><span style="color: #007700">= new </span><span style="color: #9876AA">SimpleXMLElement</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #9876AA">$xml</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">asXML</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;a&gt;<br> &lt;b&gt;<br>  &lt;c&gt;text&lt;/c&gt;<br>  &lt;c&gt;stuff&lt;/c&gt;<br> &lt;/b&gt;<br> &lt;d&gt;<br>  &lt;c&gt;code&lt;/c&gt;<br> &lt;/d&gt;<br>&lt;/a&gt;<br></span></div>    </div>   </div>  </span>  <p class="para">   <span>asXML</span> also works on Xpath results:   <div class="example" id="">    <p><strong>示例 #2 Using asXML() on <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::xpath()}</span> results</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Continued from example XML above.<br /><br />// Search for &lt;a&gt;&lt;b&gt;&lt;c&gt; <br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$xml</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">xpath</span><span style="color: #007700">(</span><span style="color: #DD0000">'/a/b/c'</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$result </span><span style="color: #007700">as </span><span style="color: #9876AA">$node</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$node</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">asXML</span><span style="color: #007700">();<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>&lt;c&gt;text&lt;/c&gt;&lt;c&gt;stuff&lt;/c&gt;<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-simplexmlelement.asxml-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::__toString()} - Returns the string content</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/simplexml.examples-basic.php" class="xref">Basic SimpleXML usage</a></li>   </ul>  </span> </div></div>
     * @return string|bool If the <i>filename</i> isn't specified, this function*/
    public function asXML(#[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $filename = null): string|bool {}

/**
*<div id="simplexmlelement.savexml" class="refentry"> <div class="refnamediv">  <h1 class="refname">SimpleXMLElement::saveXML</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SimpleXMLElement::saveXML</span> &mdash; <span class="dc-title">别名 <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::asXML()}</span></span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-simplexmlelement.savexml-description">  <h3 class="title">说明</h3>  <p class="para">   此方法是该方法的别名： <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::asXML()}</span>  </p> </div></div>
     * @return string|bool If the <i>filename</i> isn't specified, this function*/
    public function saveXML(#[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $filename = null): string|bool {}

/**
*<div id="simplexmlelement.xpath" class="refentry"> <div class="refnamediv">  <h1 class="refname">SimpleXMLElement::xpath</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SimpleXMLElement::xpath</span> &mdash; <span class="dc-title">Runs XPath query on XML data</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-simplexmlelement.xpath-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::xpath</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$expression</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">null</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   The <span>xpath</span> method searches the SimpleXML node for   children matching the <abbr title="XML Path Language">XPath</abbr> <span class="parameter" style="color:#3A95FF">expression</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-simplexmlelement.xpath-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">expression</span></dt>     <dd>      <p class="para">       An XPath path      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-simplexmlelement.xpath-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an <span class="type" style="color:#EAB766">array</span> of SimpleXMLElement objects on success; or <strong><span>null</span></strong> or <strong><span>false</span></strong> in   case of an error.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-simplexmlelement.xpath-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Xpath</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$string </span><span style="color: #007700">= &lt;&lt;&lt;XML<br /></span><span style="color: #DD0000">&lt;a&gt;<br /> &lt;b&gt;<br />  &lt;c&gt;text&lt;/c&gt;<br />  &lt;c&gt;stuff&lt;/c&gt;<br /> &lt;/b&gt;<br /> &lt;d&gt;<br />  &lt;c&gt;code&lt;/c&gt;<br /> &lt;/d&gt;<br />&lt;/a&gt;<br /></span><span style="color: #007700">XML;<br /><br /></span><span style="color: #9876AA">$xml </span><span style="color: #007700">= new </span><span style="color: #9876AA">SimpleXMLElement</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// Search for &lt;a&gt;&lt;b&gt;&lt;c&gt; <br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$xml</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">xpath</span><span style="color: #007700">(</span><span style="color: #DD0000">'/a/b/c'</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$result </span><span style="color: #007700">as </span><span style="color: #9876AA">$node</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'/a/b/c: '</span><span style="color: #007700">,</span><span style="color: #9876AA">$node</span><span style="color: #007700">,</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #FF8000">// Relative paths also work... <br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$xml</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">xpath</span><span style="color: #007700">(</span><span style="color: #DD0000">'b/c'</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$result </span><span style="color: #007700">as </span><span style="color: #9876AA">$node</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'b/c: '</span><span style="color: #007700">,</span><span style="color: #9876AA">$node</span><span style="color: #007700">,</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>/a/b/c: text<br>/a/b/c: stuff<br>b/c: text<br>b/c: stuff<br></span></div>    </div>    <div class="example-contents"><p>     Notice that the two results are equal.    </p></div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-simplexmlelement.xpath-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::registerXPathNamespace()} - Creates a prefix/ns context for the next XPath query</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::getDocNamespaces()} - Returns namespaces declared in document</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::getNamespaces()} - Returns namespaces used in document</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/simplexml.examples-basic.php" class="xref">Basic SimpleXML usage</a></li>   </ul>  </span> </div></div>
     * @return static[]|false|null an array of SimpleXMLElement objects or <b>FALSE</b> in*/
    public function xpath(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $expression): array|false|null {}

/**
*<div id="simplexmlelement.registerxpathnamespace" class="refentry"> <div class="refnamediv">  <h1 class="refname">SimpleXMLElement::registerXPathNamespace</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SimpleXMLElement::registerXPathNamespace</span> &mdash; <span class="dc-title">   Creates a prefix/ns context for the next XPath query  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-simplexmlelement.registerxpathnamespace-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::registerXPathNamespace</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$prefix</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$namespace</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   Creates a prefix/ns context for the next XPath query. In particular, this is   helpful if the provider of the given XML document alters the namespace   prefixes. <span>registerXPathNamespace</span> will create a prefix for   the associated namespace, allowing one to access nodes in that namespace    without the need to change code to allow for the new prefixes dictated by the   provider.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-simplexmlelement.registerxpathnamespace-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">prefix</span></dt>     <dd>      <p class="para">       The namespace prefix to use in the XPath query for the namespace given in        <span class="parameter" style="color:#3A95FF">namespace</span>.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">namespace</span></dt>     <dd>      <p class="para">       The namespace to use for the XPath query. This must match a namespace in       use by the XML document or the XPath query using        <span class="parameter" style="color:#3A95FF">prefix</span> will not return any results.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-simplexmlelement.registerxpathnamespace-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span>true</span></strong>， 或者在失败时返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-simplexmlelement.registerxpathnamespace-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Setting a namespace prefix to use in an XPath query</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$xml </span><span style="color: #007700">= &lt;&lt;&lt;EOD<br /></span><span style="color: #DD0000">&lt;book xmlns:chap="http://example.org/chapter-title"&gt;<br />    &lt;title&gt;My Book&lt;/title&gt;<br />    &lt;chapter id="1"&gt;<br />        &lt;chap:title&gt;Chapter 1&lt;/chap:title&gt;<br />        &lt;para&gt;Donec velit. Nullam eget tellus vitae tortor gravida scelerisque. <br />            In orci lorem, cursus imperdiet, ultricies non, hendrerit et, orci. <br />            Nulla facilisi. Nullam velit nisl, laoreet id, condimentum ut, <br />            ultricies id, mauris.&lt;/para&gt;<br />    &lt;/chapter&gt;<br />    &lt;chapter id="2"&gt;<br />        &lt;chap:title&gt;Chapter 2&lt;/chap:title&gt;<br />        &lt;para&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Proin <br />            gravida. Phasellus tincidunt massa vel urna. Proin adipiscing quam <br />            vitae odio. Sed dictum. Ut tincidunt lorem ac lorem. Duis eros <br />            tellus, pharetra id, faucibus eu, dapibus dictum, odio.&lt;/para&gt;<br />    &lt;/chapter&gt;<br />&lt;/book&gt;<br /></span><span style="color: #007700">EOD;<br /><br /></span><span style="color: #9876AA">$sxe </span><span style="color: #007700">= new </span><span style="color: #9876AA">SimpleXMLElement</span><span style="color: #007700">(</span><span style="color: #9876AA">$xml</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$sxe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">registerXPathNamespace</span><span style="color: #007700">(</span><span style="color: #DD0000">'c'</span><span style="color: #007700">, </span><span style="color: #DD0000">'http://example.org/chapter-title'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$result </span><span style="color: #007700">= </span><span style="color: #9876AA">$sxe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">xpath</span><span style="color: #007700">(</span><span style="color: #DD0000">'//c:title'</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$result </span><span style="color: #007700">as </span><span style="color: #9876AA">$title</span><span style="color: #007700">) {<br />  echo </span><span style="color: #9876AA">$title </span><span style="color: #007700">. </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Chapter 1<br>Chapter 2<br></span></div>    </div>    <div class="example-contents"><p>     Notice how the XML document shown in the example sets a namespace with a      prefix of <span>chap</span>. Imagine that this document (or another     one like it) may have used a prefix of <span>c</span> in the past for     the same namespace. Since it has changed, the XPath query will no longer      return the proper results and the query will require modification. Using      <span>registerXPathNamespace</span> avoids future modification of the     query even if the provider changes the namespace prefix.    </p></div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-simplexmlelement.registerxpathnamespace-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::xpath()} - Runs XPath query on XML data</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::getDocNamespaces()} - Returns namespaces declared in document</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::getNamespaces()} - Returns namespaces used in document</span></li>   </ul>  </span> </div></div>
     * @return bool <b>TRUE</b> on success or <b>FALSE</b> on failure.*/
    public function registerXPathNamespace(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $prefix,
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $namespace
    ): bool {}

/**
*<div id="simplexmlelement.attributes" class="refentry"> <div class="refnamediv">  <h1 class="refname">SimpleXMLElement::attributes</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SimpleXMLElement::attributes</span> &mdash; <span class="dc-title">Identifies an element&#039;s attributes</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-simplexmlelement.attributes-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::attributes</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$namespaceOrPrefix</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$isPrefix</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span></span></div>  <p class="para rdfs-comment">   This function provides the attributes and values defined within an xml tag.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">SimpleXML建起了一个给大多数方法添加迭代属性的规则。不能通过使用<span class="function">{@link var_dump()}</span> 或任何可检查对象的其它东西来查看。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-simplexmlelement.attributes-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">namespaceOrPrefix</span></dt>     <dd>      <p class="para">       An optional namespace for the retrieved attributes      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">isPrefix</span></dt>     <dd>      <p class="para">       Default to <strong><span>false</span></strong>      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-simplexmlelement.attributes-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="classname">SimpleXMLElement</a></span> object that can be   iterated over to loop through the attributes on the tag.  </p>  <p class="para">   Returns <strong><span>null</span></strong> if called on a <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="classname">SimpleXMLElement</a></span>   object that already represents an attribute and not a tag.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-simplexmlelement.attributes-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Interpret an XML string</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$string </span><span style="color: #007700">= &lt;&lt;&lt;XML<br /></span><span style="color: #DD0000">&lt;a&gt;<br /> &lt;foo name="one" game="lonely"&gt;1&lt;/foo&gt;<br />&lt;/a&gt;<br /></span><span style="color: #007700">XML;<br /><br /></span><span style="color: #9876AA">$xml </span><span style="color: #007700">= </span><span style="color: #9876AA">simplexml_load_string</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">);<br />foreach(</span><span style="color: #9876AA">$xml</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">foo</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">attributes</span><span style="color: #007700">() as </span><span style="color: #9876AA">$a </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$b</span><span style="color: #007700">) {<br />    echo </span><span style="color: #9876AA">$a</span><span style="color: #007700">,</span><span style="color: #DD0000">'="'</span><span style="color: #007700">,</span><span style="color: #9876AA">$b</span><span style="color: #007700">,</span><span style="color: #DD0000">"\"\n"</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>name=&quot;one&quot;<br>game=&quot;lonely&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-simplexmlelement.attributes-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><a href="https://www.php.net/manual/zh/simplexml.examples-basic.php" class="xref">Basic SimpleXML usage</a></li>   </ul>  </span> </div></div>
     * @return static|null a <b>SimpleXMLElement</b> object that can be*/
    public function attributes(
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $namespaceOrPrefix = null,
        #[LanguageLevelTypeAware(['8.0' => 'bool'], default: '')] $isPrefix = false
    ): ?static {}

/**
*<div id="simplexmlelement.children" class="refentry"> <div class="refnamediv">  <h1 class="refname">SimpleXMLElement::children</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SimpleXMLElement::children</span> &mdash; <span class="dc-title">Finds children of given node</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-simplexmlelement.children-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::children</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$namespaceOrPrefix</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$isPrefix</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span></span></div>  <p class="para rdfs-comment">   This method finds the children of an element. The result follows normal   iteration rules.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">SimpleXML建起了一个给大多数方法添加迭代属性的规则。不能通过使用<span class="function">{@link var_dump()}</span> 或任何可检查对象的其它东西来查看。</span></p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-simplexmlelement.children-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">namespaceOrPrefix</span></dt>     <dd>      <p class="para">       An <abbr title="eXtensible Markup Language">XML</abbr> namespace.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">isPrefix</span></dt>     <dd>      <p class="para">       If <span class="parameter" style="color:#3A95FF">isPrefix</span> is <strong><span>true</span></strong>,       <span class="parameter" style="color:#3A95FF">namespaceOrPrefix</span> will be regarded as a prefix. If <strong><span>false</span></strong>,       <span class="parameter" style="color:#3A95FF">namespaceOrPrefix</span> will be regarded as a namespace       <abbr title="Uniform Resource Locator">URL</abbr>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-simplexmlelement.children-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="classname">SimpleXMLElement</a></span> element, whether the node    has children or not, unless the node represents an attribute, in which case   <strong><span>null</span></strong> is returned.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-simplexmlelement.children-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Traversing a <span>children()</span> pseudo-array</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$xml </span><span style="color: #007700">= new </span><span style="color: #9876AA">SimpleXMLElement</span><span style="color: #007700">(<br /></span><span style="color: #DD0000">'&lt;person&gt;<br /> &lt;child role="son"&gt;<br />  &lt;child role="daughter"/&gt;<br /> &lt;/child&gt;<br /> &lt;child role="daughter"&gt;<br />  &lt;child role="son"&gt;<br />   &lt;child role="son"/&gt;<br />  &lt;/child&gt;<br /> &lt;/child&gt;<br />&lt;/person&gt;'</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$xml</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">children</span><span style="color: #007700">() as </span><span style="color: #9876AA">$second_gen</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">' The person begot a ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$second_gen</span><span style="color: #007700">[</span><span style="color: #DD0000">'role'</span><span style="color: #007700">];<br /><br />    foreach (</span><span style="color: #9876AA">$second_gen</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">children</span><span style="color: #007700">() as </span><span style="color: #9876AA">$third_gen</span><span style="color: #007700">) {<br />        echo </span><span style="color: #DD0000">' who begot a ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$third_gen</span><span style="color: #007700">[</span><span style="color: #DD0000">'role'</span><span style="color: #007700">] . </span><span style="color: #DD0000">';'</span><span style="color: #007700">;<br /><br />        foreach (</span><span style="color: #9876AA">$third_gen</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">children</span><span style="color: #007700">() as </span><span style="color: #9876AA">$fourth_gen</span><span style="color: #007700">) {<br />            echo </span><span style="color: #DD0000">' and that ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$third_gen</span><span style="color: #007700">[</span><span style="color: #DD0000">'role'</span><span style="color: #007700">] .<br />                </span><span style="color: #DD0000">' begot a ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$fourth_gen</span><span style="color: #007700">[</span><span style="color: #DD0000">'role'</span><span style="color: #007700">];<br />        }<br />    }<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>The person begot a son who begot a daughter; The person<br>begot a daughter who begot a son; and that son begot a son<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #2 Using namespaces</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$xml </span><span style="color: #007700">= </span><span style="color: #DD0000">'&lt;example xmlns:foo="my.foo.urn"&gt;<br />  &lt;foo:a&gt;Apple&lt;/foo:a&gt;<br />  &lt;foo:b&gt;Banana&lt;/foo:b&gt;<br />  &lt;c&gt;Cherry&lt;/c&gt;<br />&lt;/example&gt;'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$sxe </span><span style="color: #007700">= new </span><span style="color: #9876AA">SimpleXMLElement</span><span style="color: #007700">(</span><span style="color: #9876AA">$xml</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$kids </span><span style="color: #007700">= </span><span style="color: #9876AA">$sxe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">children</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$kids</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$kids </span><span style="color: #007700">= </span><span style="color: #9876AA">$sxe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">children</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">, </span><span style="color: #9876AA">TRUE</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$kids</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$kids </span><span style="color: #007700">= </span><span style="color: #9876AA">$sxe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">children</span><span style="color: #007700">(</span><span style="color: #DD0000">'my.foo.urn'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$kids</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$kids </span><span style="color: #007700">= </span><span style="color: #9876AA">$sxe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">children</span><span style="color: #007700">(</span><span style="color: #DD0000">'my.foo.urn'</span><span style="color: #007700">, </span><span style="color: #9876AA">TRUE</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$kids</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">$kids </span><span style="color: #007700">= </span><span style="color: #9876AA">$sxe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">children</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">$kids</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>int(0)<br>int(2)<br>int(2)<br>int(0)<br>int(1)<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-simplexmlelement.children-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::count()} - Counts the children of an element</span></li>    <li class="member"><span class="function">{@link count()} - 统计数组、Countable 对象中所有元素的数量</span></li>   </ul>  </span> </div></div>
     * @return static|null a <b>SimpleXMLElement</b> element, whether the node*/
    public function children(
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $namespaceOrPrefix = null,
        #[LanguageLevelTypeAware(['8.0' => 'bool'], default: '')] $isPrefix = false
    ): ?static {}

/**
*<div id="simplexmlelement.getnamespaces" class="refentry"> <div class="refnamediv">  <h1 class="refname">SimpleXMLElement::getNamespaces</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SimpleXMLElement::getNamespaces</span> &mdash; <span class="dc-title">   Returns namespaces used in document  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-simplexmlelement.getnamespaces-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::getNamespaces</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$recursive</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div>  <p class="para rdfs-comment">   Returns namespaces used in document  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-simplexmlelement.getnamespaces-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">recursive</span></dt>     <dd>      <p class="para">       If specified, returns all namespaces used in parent and child nodes.        Otherwise, returns only namespaces used in root node.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-simplexmlelement.getnamespaces-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The <span>getNamespaces</span> method returns an <span class="type" style="color:#EAB766">array</span> of    namespace names with their associated URIs.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-simplexmlelement.getnamespaces-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Get document namespaces in use</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$xml </span><span style="color: #007700">= &lt;&lt;&lt;XML<br /></span><span style="color: #DD0000">&lt;?xml version="1.0" standalone="yes"?&gt;<br />&lt;people xmlns:p="http://example.org/ns" xmlns:t="http://example.org/test"&gt;<br />    &lt;p:person id="1"&gt;John Doe&lt;/p:person&gt;<br />    &lt;p:person id="2"&gt;Susie Q. Public&lt;/p:person&gt;<br />&lt;/people&gt;<br /></span><span style="color: #007700">XML;<br /> <br /></span><span style="color: #9876AA">$sxe </span><span style="color: #007700">= new </span><span style="color: #9876AA">SimpleXMLElement</span><span style="color: #007700">(</span><span style="color: #9876AA">$xml</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$namespaces </span><span style="color: #007700">= </span><span style="color: #9876AA">$sxe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getNamespaces</span><span style="color: #007700">(</span><span style="color: #9876AA">true</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$namespaces</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(1) {<br>  [&quot;p&quot;]=&gt;<br>  string(21) &quot;http://example.org/ns&quot;<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-simplexmlelement.getnamespaces-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::getDocNamespaces()} - Returns namespaces declared in document</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::registerXPathNamespace()} - Creates a prefix/ns context for the next XPath query</span></li>   </ul>  </span> </div></div>
     * @return array The getNamespaces method returns an array of*/
    public function getNamespaces(#[LanguageLevelTypeAware(['8.0' => 'bool'], default: '')] $recursive = false): array {}

/**
*<div id="simplexmlelement.getdocnamespaces" class="refentry"> <div class="refnamediv">  <h1 class="refname">SimpleXMLElement::getDocNamespaces</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SimpleXMLElement::getDocNamespaces</span> &mdash; <span class="dc-title">   Returns namespaces declared in document  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-simplexmlelement.getdocnamespaces-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::getDocNamespaces</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$recursive</span><span class="initializer"> = <strong><span>false</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$fromRoot</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Returns namespaces declared in document  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-simplexmlelement.getdocnamespaces-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">recursive</span></dt>     <dd>      <p class="para">       If specified, returns all namespaces declared in parent and child nodes.        Otherwise, returns only namespaces declared in root node.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">fromRoot</span></dt>     <dd>      <p class="para">       Allows you to recursively check namespaces under a child node instead of       from the root of the XML doc.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-simplexmlelement.getdocnamespaces-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The <span>getDocNamespaces</span> method returns an <span class="type" style="color:#EAB766">array</span>    of namespace names with their associated URIs.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-simplexmlelement.getdocnamespaces-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Get document namespaces</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$xml </span><span style="color: #007700">= &lt;&lt;&lt;XML<br /></span><span style="color: #DD0000">&lt;?xml version="1.0" standalone="yes"?&gt;<br />&lt;people xmlns:p="http://example.org/ns"&gt;<br />    &lt;p:person id="1"&gt;John Doe&lt;/p:person&gt;<br />    &lt;p:person id="2"&gt;Susie Q. Public&lt;/p:person&gt;<br />&lt;/people&gt;<br /></span><span style="color: #007700">XML;<br /> <br /></span><span style="color: #9876AA">$sxe </span><span style="color: #007700">= new </span><span style="color: #9876AA">SimpleXMLElement</span><span style="color: #007700">(</span><span style="color: #9876AA">$xml</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$namespaces </span><span style="color: #007700">= </span><span style="color: #9876AA">$sxe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDocNamespaces</span><span style="color: #007700">();<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$namespaces</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(1) {<br>   [&quot;p&quot;]=&gt;<br>   string(21) &quot;http://example.org/ns&quot;<br>}<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 Working with multiple namespaces</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$xml </span><span style="color: #007700">= &lt;&lt;&lt;XML<br /></span><span style="color: #DD0000">&lt;?xml version="1.0" standalone="yes"?&gt;<br />&lt;people xmlns:p="http://example.org/ns" xmlns:t="http://example.org/test"&gt;<br />    &lt;p:person t:id="1"&gt;John Doe&lt;/p:person&gt;<br />    &lt;p:person t:id="2" a:addr="123 Street" xmlns:a="http://example.org/addr"&gt;<br />        Susie Q. Public<br />    &lt;/p:person&gt;<br />&lt;/people&gt;<br /></span><span style="color: #007700">XML;<br /> <br /></span><span style="color: #9876AA">$sxe </span><span style="color: #007700">= new </span><span style="color: #9876AA">SimpleXMLElement</span><span style="color: #007700">(</span><span style="color: #9876AA">$xml</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$namespaces </span><span style="color: #007700">= </span><span style="color: #9876AA">$sxe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDocNamespaces</span><span style="color: #007700">(</span><span style="color: #9876AA">TRUE</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$namespaces</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(3) {<br>  [&quot;p&quot;]=&gt;<br>  string(21) &quot;http://example.org/ns&quot;<br>  [&quot;t&quot;]=&gt;<br>  string(23) &quot;http://example.org/test&quot;<br>  [&quot;a&quot;]=&gt;<br>  string(23) &quot;http://example.org/addr&quot;<br>}<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-simplexmlelement.getdocnamespaces-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::getNamespaces()} - Returns namespaces used in document</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::registerXPathNamespace()} - Creates a prefix/ns context for the next XPath query</span></li>   </ul>  </span> </div></div>
     * @return array The getDocNamespaces method returns an array*/
    public function getDocNamespaces(
        #[LanguageLevelTypeAware(['8.0' => 'bool'], default: '')] $recursive = false,
        #[LanguageLevelTypeAware(['8.0' => 'bool'], default: '')] $fromRoot = true
    ): array|false {}

/**
*<div id="simplexmlelement.getname" class="refentry"> <div class="refnamediv">  <h1 class="refname">SimpleXMLElement::getName</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.3, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SimpleXMLElement::getName</span> &mdash; <span class="dc-title">Gets the name of the XML element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-simplexmlelement.getname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::getName</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   Gets the name of the XML element.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-simplexmlelement.getname-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-simplexmlelement.getname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The <span>getName</span> method returns as a <span class="type" style="color:#EAB766">string</span> the    name of the XML tag referenced by the SimpleXMLElement object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-simplexmlelement.getname-examples">  <h3 class="title">示例</h3>  <span>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <p class="para">     Listed examples may include <span>example.php</span>,     which refers to the XML string found in the first example     of the <a href="https://www.php.net/manual/zh/simplexml.examples-basic.php" class="link">basic usage</a> guide.    </p>   </span></blockquote>   <div class="example" id="">    <p><strong>示例 #1 Get XML element names</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">include </span><span style="color: #DD0000">'example.php'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$sxe </span><span style="color: #007700">= new </span><span style="color: #9876AA">SimpleXMLElement</span><span style="color: #007700">(</span><span style="color: #9876AA">$xmlstr</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #9876AA">$sxe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br />foreach (</span><span style="color: #9876AA">$sxe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">children</span><span style="color: #007700">() as </span><span style="color: #9876AA">$child</span><span style="color: #007700">)<br />{<br />    echo </span><span style="color: #9876AA">$child</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>movies<br>movie<br></span></div>    </div>   </div>  </p> </div></div>
     * @return string The getName method returns as a string the*/
    public function getName(): string {}

/**
*<div id="simplexmlelement.addchild" class="refentry"> <div class="refnamediv">  <h1 class="refname">SimpleXMLElement::addChild</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.3, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SimpleXMLElement::addChild</span> &mdash; <span class="dc-title">   Adds a child element to the XML node  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-simplexmlelement.addchild-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::addChild</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$qualifiedName</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$value</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$namespace</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span></span></div>  <p class="para rdfs-comment">   Adds a child element to the node and returns a SimpleXMLElement of the child.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-simplexmlelement.addchild-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">qualifiedName</span></dt>     <dd>      <p class="para">       The name of the child element to add.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       If specified, the value of the child element.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">namespace</span></dt>     <dd>      <p class="para">       If specified, the namespace to which the child element belongs.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-simplexmlelement.addchild-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The <span>addChild</span> method returns a <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span>   object representing the child added to the XML node on success; <strong><span>null</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-simplexmlelement.addchild-examples">  <h3 class="title">示例</h3>  <span>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <p class="para">     Listed examples may include <span>example.php</span>,     which refers to the XML string found in the first example     of the <a href="https://www.php.net/manual/zh/simplexml.examples-basic.php" class="link">basic usage</a> guide.    </p>   </span></blockquote>   <div class="example" id="">    <p><strong>示例 #1 Add attributes and children to a SimpleXML element</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">include </span><span style="color: #DD0000">'example.php'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$sxe </span><span style="color: #007700">= new </span><span style="color: #9876AA">SimpleXMLElement</span><span style="color: #007700">(</span><span style="color: #9876AA">$xmlstr</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sxe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addAttribute</span><span style="color: #007700">(</span><span style="color: #DD0000">'type'</span><span style="color: #007700">, </span><span style="color: #DD0000">'documentary'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$movie </span><span style="color: #007700">= </span><span style="color: #9876AA">$sxe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addChild</span><span style="color: #007700">(</span><span style="color: #DD0000">'movie'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$movie</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addChild</span><span style="color: #007700">(</span><span style="color: #DD0000">'title'</span><span style="color: #007700">, </span><span style="color: #DD0000">'PHP2: More Parser Stories'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$movie</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addChild</span><span style="color: #007700">(</span><span style="color: #DD0000">'plot'</span><span style="color: #007700">, </span><span style="color: #DD0000">'This is all about the people who make it work.'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$characters </span><span style="color: #007700">= </span><span style="color: #9876AA">$movie</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addChild</span><span style="color: #007700">(</span><span style="color: #DD0000">'characters'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$character  </span><span style="color: #007700">= </span><span style="color: #9876AA">$characters</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addChild</span><span style="color: #007700">(</span><span style="color: #DD0000">'character'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$character</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addChild</span><span style="color: #007700">(</span><span style="color: #DD0000">'name'</span><span style="color: #007700">, </span><span style="color: #DD0000">'Mr. Parser'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$character</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addChild</span><span style="color: #007700">(</span><span style="color: #DD0000">'actor'</span><span style="color: #007700">, </span><span style="color: #DD0000">'John Doe'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$rating </span><span style="color: #007700">= </span><span style="color: #9876AA">$movie</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addChild</span><span style="color: #007700">(</span><span style="color: #DD0000">'rating'</span><span style="color: #007700">, </span><span style="color: #DD0000">'5'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$rating</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addAttribute</span><span style="color: #007700">(</span><span style="color: #DD0000">'type'</span><span style="color: #007700">, </span><span style="color: #DD0000">'stars'</span><span style="color: #007700">);<br /> <br />echo </span><span style="color: #9876AA">$sxe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">asXML</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>&lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;<br>&lt;movies type=&quot;documentary&quot;&gt;<br> &lt;movie&gt;<br>  &lt;title&gt;PHP: Behind the Parser&lt;/title&gt;<br>  &lt;characters&gt;<br>   &lt;character&gt;<br>    &lt;name&gt;Ms. Coder&lt;/name&gt;<br>    &lt;actor&gt;Onlivia Actora&lt;/actor&gt;<br>   &lt;/character&gt;<br>   &lt;character&gt;<br>    &lt;name&gt;Mr. Coder&lt;/name&gt;<br>    &lt;actor&gt;El Act&amp;#xD3;r&lt;/actor&gt;<br>   &lt;/character&gt;<br>  &lt;/characters&gt;<br>  &lt;plot&gt;<br>   So, this language. It&#039;s like, a programming language. Or is it a<br>   scripting language? All is revealed in this thrilling horror spoof<br>   of a documentary.<br>  &lt;/plot&gt;<br>  &lt;great-lines&gt;<br>   &lt;line&gt;PHP solves all my web problems&lt;/line&gt;<br>  &lt;/great-lines&gt;<br>  &lt;rating type=&quot;thumbs&quot;&gt;7&lt;/rating&gt;<br>  &lt;rating type=&quot;stars&quot;&gt;5&lt;/rating&gt;<br> &lt;/movie&gt;<br> &lt;movie&gt;<br>  &lt;title&gt;PHP2: More Parser Stories&lt;/title&gt;<br>  &lt;plot&gt;This is all about the people who make it work.&lt;/plot&gt;<br>  &lt;characters&gt;<br>   &lt;character&gt;<br>    &lt;name&gt;Mr. Parser&lt;/name&gt;<br>    &lt;actor&gt;John Doe&lt;/actor&gt;<br>   &lt;/character&gt;<br>  &lt;/characters&gt;<br>  &lt;rating type=&quot;stars&quot;&gt;5&lt;/rating&gt;<br> &lt;/movie&gt;<br>&lt;/movies&gt;<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-simplexmlelement.addchild-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::addAttribute()} - Adds an attribute to the SimpleXML element</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/simplexml.examples-basic.php" class="xref">Basic SimpleXML usage</a></li>   </ul>  </span> </div></div>
     * @return static|null The addChild method returns a SimpleXMLElement*/
    public function addChild(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $qualifiedName,
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $value = null,
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $namespace = null
    ): ?static {}

/**
*<div id="simplexmlelement.addattribute" class="refentry"> <div class="refnamediv">  <h1 class="refname">SimpleXMLElement::addAttribute</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.3, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SimpleXMLElement::addAttribute</span> &mdash; <span class="dc-title">   Adds an attribute to the SimpleXML element  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-simplexmlelement.addattribute-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::addAttribute</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$qualifiedName</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$namespace</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <p class="para rdfs-comment">   Adds an attribute to the SimpleXML element.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-simplexmlelement.addattribute-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">qualifiedName</span></dt>     <dd>      <p class="para">       The name of the attribute to add.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The value of the attribute.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">namespace</span></dt>     <dd>      <p class="para">       If specified, the namespace to which the attribute belongs.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-simplexmlelement.addattribute-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-simplexmlelement.addattribute-examples">  <h3 class="title">示例</h3>  <span>   <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:     <p class="para">     Listed examples may include <span>example.php</span>,     which refers to the XML string found in the first example     of the <a href="https://www.php.net/manual/zh/simplexml.examples-basic.php" class="link">basic usage</a> guide.    </p>   </span></blockquote>   <div class="example" id="">    <p><strong>示例 #1 Add attributes and children to a SimpleXML element</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #007700">include </span><span style="color: #DD0000">'example.php'</span><span style="color: #007700">;<br /> <br /></span><span style="color: #9876AA">$sxe </span><span style="color: #007700">= new </span><span style="color: #9876AA">SimpleXMLElement</span><span style="color: #007700">(</span><span style="color: #9876AA">$xmlstr</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$sxe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addAttribute</span><span style="color: #007700">(</span><span style="color: #DD0000">'type'</span><span style="color: #007700">, </span><span style="color: #DD0000">'documentary'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$movie </span><span style="color: #007700">= </span><span style="color: #9876AA">$sxe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addChild</span><span style="color: #007700">(</span><span style="color: #DD0000">'movie'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$movie</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addChild</span><span style="color: #007700">(</span><span style="color: #DD0000">'title'</span><span style="color: #007700">, </span><span style="color: #DD0000">'PHP2: More Parser Stories'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$movie</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addChild</span><span style="color: #007700">(</span><span style="color: #DD0000">'plot'</span><span style="color: #007700">, </span><span style="color: #DD0000">'This is all about the people who make it work.'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$characters </span><span style="color: #007700">= </span><span style="color: #9876AA">$movie</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addChild</span><span style="color: #007700">(</span><span style="color: #DD0000">'characters'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$character  </span><span style="color: #007700">= </span><span style="color: #9876AA">$characters</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addChild</span><span style="color: #007700">(</span><span style="color: #DD0000">'character'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$character</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addChild</span><span style="color: #007700">(</span><span style="color: #DD0000">'name'</span><span style="color: #007700">, </span><span style="color: #DD0000">'Mr. Parser'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$character</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addChild</span><span style="color: #007700">(</span><span style="color: #DD0000">'actor'</span><span style="color: #007700">, </span><span style="color: #DD0000">'John Doe'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$rating </span><span style="color: #007700">= </span><span style="color: #9876AA">$movie</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addChild</span><span style="color: #007700">(</span><span style="color: #DD0000">'rating'</span><span style="color: #007700">, </span><span style="color: #DD0000">'5'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$rating</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">addAttribute</span><span style="color: #007700">(</span><span style="color: #DD0000">'type'</span><span style="color: #007700">, </span><span style="color: #DD0000">'stars'</span><span style="color: #007700">);<br /> <br />echo </span><span style="color: #9876AA">$sxe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">asXML</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>&lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;<br>&lt;movies type=&quot;documentary&quot;&gt;<br> &lt;movie&gt;<br>  &lt;title&gt;PHP: Behind the Parser&lt;/title&gt;<br>  &lt;characters&gt;<br>   &lt;character&gt;<br>    &lt;name&gt;Ms. Coder&lt;/name&gt;<br>    &lt;actor&gt;Onlivia Actora&lt;/actor&gt;<br>   &lt;/character&gt;<br>   &lt;character&gt;<br>    &lt;name&gt;Mr. Coder&lt;/name&gt;<br>    &lt;actor&gt;El Act&amp;#xD3;r&lt;/actor&gt;<br>   &lt;/character&gt;<br>  &lt;/characters&gt;<br>  &lt;plot&gt;<br>   So, this language. It&#039;s like, a programming language. Or is it a<br>   scripting language? All is revealed in this thrilling horror spoof<br>   of a documentary.<br>  &lt;/plot&gt;<br>  &lt;great-lines&gt;<br>   &lt;line&gt;PHP solves all my web problems&lt;/line&gt;<br>  &lt;/great-lines&gt;<br>  &lt;rating type=&quot;thumbs&quot;&gt;7&lt;/rating&gt;<br>  &lt;rating type=&quot;stars&quot;&gt;5&lt;/rating&gt;<br> &lt;/movie&gt;<br> &lt;movie&gt;<br>  &lt;title&gt;PHP2: More Parser Stories&lt;/title&gt;<br>  &lt;plot&gt;This is all about the people who make it work.&lt;/plot&gt;<br>  &lt;characters&gt;<br>   &lt;character&gt;<br>    &lt;name&gt;Mr. Parser&lt;/name&gt;<br>    &lt;actor&gt;John Doe&lt;/actor&gt;<br>   &lt;/character&gt;<br>  &lt;/characters&gt;<br>  &lt;rating type=&quot;stars&quot;&gt;5&lt;/rating&gt;<br> &lt;/movie&gt;<br>&lt;/movies&gt;<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-simplexmlelement.addattribute-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::addChild()} - Adds a child element to the XML node</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/simplexml.examples-basic.php" class="xref">Basic SimpleXML usage</a></li>   </ul>  </span> </div></div>
     * @return void No value is returned.*/
    public function addAttribute(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $qualifiedName,
        #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $value = null,
        #[PhpStormStubsElementAvailable(from: '8.0')] string $value,
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $namespace = null
    ): void {}

    /**
     * Returns the string content
     * @link https://php.net/manual/en/simplexmlelement.tostring.php
     * @return string the string content on success or an empty string on failure.
     * @since 5.3
     */
    #[TentativeType]
    public function __toString(): string {}

/**
*<div id="simplexmlelement.count" class="refentry"> <div class="refnamediv">  <h1 class="refname">SimpleXMLElement::count</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">SimpleXMLElement::count</span> &mdash; <span class="dc-title">Counts the children of an element</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-simplexmlelement.count-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::count</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   This method counts the number of children of an element.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-simplexmlelement.count-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-simplexmlelement.count-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the number of elements of an element.  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-simplexmlelement.count-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Counting the number of children</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$xml </span><span style="color: #007700">= &lt;&lt;&lt;EOF<br /></span><span style="color: #DD0000">&lt;people&gt;<br /> &lt;person name="Person 1"&gt;<br />  &lt;child/&gt;<br />  &lt;child/&gt;<br />  &lt;child/&gt;<br /> &lt;/person&gt;<br /> &lt;person name="Person 2"&gt;<br />  &lt;child/&gt;<br />  &lt;child/&gt;<br />  &lt;child/&gt;<br />  &lt;child/&gt;<br />  &lt;child/&gt;<br /> &lt;/person&gt;<br />&lt;/people&gt;<br /></span><span style="color: #007700">EOF;<br /><br /></span><span style="color: #9876AA">$elem </span><span style="color: #007700">= new </span><span style="color: #9876AA">SimpleXMLElement</span><span style="color: #007700">(</span><span style="color: #9876AA">$xml</span><span style="color: #007700">);<br /><br />foreach (</span><span style="color: #9876AA">$elem </span><span style="color: #007700">as </span><span style="color: #9876AA">$person</span><span style="color: #007700">) {<br />    </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%s has got %d children.\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">$person</span><span style="color: #007700">[</span><span style="color: #DD0000">'name'</span><span style="color: #007700">], </span><span style="color: #9876AA">$person</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">count</span><span style="color: #007700">());<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Person 1 has got 3 children.<br>Person 2 has got 5 children.<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-simplexmlelement.count-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::children()} - Finds children of given node</span></li>   </ul>  </span> </div></div>
     * @return int<0,max> the number of elements of an element.*/
    public function count(): int {}

    /**
     * Class provides access to children by position, and attributes by name
     * private Method not callable directly, stub exists for typehint only
     * @param string|int $offset
     * @return bool true on success or false on failure.
     */
    #[Pure]
    public function offsetExists($offset) {}

    /**
     * Class provides access to children by position, and attributes by name
     * private Method not callable directly, stub exists for typehint only
     * @param string|int $offset
     * @return static Either a named attribute or an element from a list of children
     */
    #[Pure]
    public function offsetGet($offset) {}

    /**
     * Class provides access to children by position, and attributes by name
     * private Method not callable directly, stub exists for typehint only
     * @param string|int $offset
     * @param mixed $value
     * @return void
     */
    public function offsetSet($offset, $value) {}

    /**
     * Class provides access to children by position, and attributes by name
     * private Method not callable directly, stub exists for typehint only
     * @param string|int $offset
     * @return void
     */
    public function offsetUnset($offset) {}

/**
*<div id="simplexmlelement.rewind" class="refentry"> <div class="refnamediv">  <h1 class="refname">SimpleXMLElement::rewind</h1>  <p class="verinfo">(No version information available, might only be in Git)</p><p class="refpurpose"><span class="refname">SimpleXMLElement::rewind</span> &mdash; <span class="dc-title">Rewind to the first element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-simplexmlelement.rewind-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::rewind</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <div class="warning"><strong class="warning">警告</strong>   <p class="simpara">    Prior to PHP 8.0, <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::rewind()</strong></span> was only    declared on the subclass <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmliterator.php" class="classname">SimpleXMLIterator</a></span>.   </p>  </div>  <p class="para">   This method rewinds the <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="classname">SimpleXMLElement</a></span> to the first element.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-simplexmlelement.rewind-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-simplexmlelement.rewind-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-simplexmlelement.rewind-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Rewind to the first element</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$xmlElement </span><span style="color: #007700">= new </span><span style="color: #9876AA">SimpleXMLElement</span><span style="color: #007700">(</span><span style="color: #DD0000">'&lt;books&gt;&lt;book&gt;PHP Basics&lt;/book&gt;&lt;book&gt;XML Basics&lt;/book&gt;&lt;/books&gt;'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>     <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(SimpleXMLElement)#2 (1) {<br>  [0]=&gt;<br>  string(10) &quot;PHP Basics&quot;<br>}<br></span></div>    </div>   </div>  </span> </div></div>
     * @return void No value is returned.*/
    public function rewind(): void {}

/**
*<div id="simplexmlelement.valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">SimpleXMLElement::valid</h1>  <p class="verinfo">(No version information available, might only be in Git)</p><p class="refpurpose"><span class="refname">SimpleXMLElement::valid</span> &mdash; <span class="dc-title">Check whether the current element is valid</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-simplexmlelement.valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::valid</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <div class="warning"><strong class="warning">警告</strong>   <p class="simpara">    Prior to PHP 8.0, <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::valid()</strong></span> was only    declared on the subclass <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmliterator.php" class="classname">SimpleXMLIterator</a></span>.   </p>  </div>  <p class="para">   This method checks if the current element is valid after calls to   <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::rewind()}</span> or   <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::next()}</span>.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-simplexmlelement.valid-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-simplexmlelement.valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span>true</span></strong> if the current element is valid, otherwise <strong><span>false</span></strong>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-simplexmlelement.valid-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Check whether the current element is valid</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$xmlElement </span><span style="color: #007700">= new </span><span style="color: #9876AA">SimpleXMLElement</span><span style="color: #007700">(</span><span style="color: #DD0000">'&lt;books&gt;&lt;book&gt;SQL Basics&lt;/book&gt;&lt;/books&gt;'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">(); </span><span style="color: #FF8000">// rewind to the first element<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()); </span><span style="color: #FF8000">// bool(true)<br /><br /></span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">(); </span><span style="color: #FF8000">// advance to the next element<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">()); </span><span style="color: #FF8000">// bool(false) because there is only one element<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>  </span> </div></div>
     * @return bool <b>TRUE</b> if the current element is valid, otherwise <b>FALSE</b>*/
    public function valid(): bool {}

/**
*<div id="simplexmlelement.current" class="refentry"> <div class="refnamediv">  <h1 class="refname">SimpleXMLElement::current</h1>  <p class="verinfo">(No version information available, might only be in Git)</p><p class="refpurpose"><span class="refname">SimpleXMLElement::current</span> &mdash; <span class="dc-title">Returns the current element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-simplexmlelement.current-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::current</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span></div>  <div class="warning"><strong class="warning">警告</strong>   <p class="simpara">    Prior to PHP 8.0, <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::current()</strong></span> was only    declared on the subclass <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmliterator.php" class="classname">SimpleXMLIterator</a></span>.   </p>  </div>  <p class="para">   This method returns the current element as a <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="classname">SimpleXMLElement</a></span> object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-simplexmlelement.current-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-simplexmlelement.current-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current element as a <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="classname">SimpleXMLElement</a></span> object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-simplexmlelement.current-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws an <span class="classname"><a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a></span> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-simplexmlelement.current-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.1.0</td>      <td>       An <span class="classname"><a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a></span> is now thrown if       <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::current()</strong></span> is called on an       invalid iterator.  Previously, <strong><span>null</span></strong> was returned.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-simplexmlelement.current-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Return the current element</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$xmlElement </span><span style="color: #007700">= new </span><span style="color: #9876AA">SimpleXMLElement</span><span style="color: #007700">(</span><span style="color: #DD0000">'&lt;books&gt;&lt;book&gt;PHP basics&lt;/book&gt;&lt;book&gt;XML basics&lt;/book&gt;&lt;/books&gt;'</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">(); </span><span style="color: #FF8000">// rewind to first element, otherwise current() won't work<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(SimpleXMLElement)#2 (1) {<br>  [0]=&gt;<br>  string(10) &quot;PHP basics&quot;<br>}<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-simplexmlelement.current-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::key()} - Return current key</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::next()} - Move to next element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::rewind()} - Rewind to the first element</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::valid()} - Check whether the current element is valid</span></li>    <li class="member"><span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="classname">SimpleXMLElement</a></span></li>   </ul>  </span> </div></div>
     * @return static|null the current element as a <b>SimpleXMLElement</b> object or <b>NULL</b> on failure.*/
    public function current(): ?static {}

/**
*<div id="simplexmlelement.key" class="refentry"> <div class="refnamediv">  <h1 class="refname">SimpleXMLElement::key</h1>  <p class="verinfo">(No version information available, might only be in Git)</p><p class="refpurpose"><span class="refname">SimpleXMLElement::key</span> &mdash; <span class="dc-title">Return current key</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-simplexmlelement.key-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::key</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <div class="warning"><strong class="warning">警告</strong>   <p class="simpara">    Prior to PHP 8.0, <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::key()</strong></span> was only    declared on the subclass <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmliterator.php" class="classname">SimpleXMLIterator</a></span>.   </p>  </div>  <p class="para">   This method gets the XML tag name of the current element.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-simplexmlelement.key-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-simplexmlelement.key-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the XML tag name of the element referenced by the current <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="classname">SimpleXMLElement</a></span> object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-simplexmlelement.key-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws an <span class="classname"><a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a></span> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-simplexmlelement.key-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.1.0</td>      <td>       An <span class="classname"><a href="https://www.php.net/manual/zh/class.error.php" class="classname">Error</a></span> is now thrown if       <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::key()</strong></span> is called on an       invalid iterator.  Previously, <strong><span>false</span></strong> was returned.      </td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-simplexmlelement.key-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Get the current XML tag key</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$xmlElement </span><span style="color: #007700">= new </span><span style="color: #9876AA">SimpleXMLElement</span><span style="color: #007700">(</span><span style="color: #DD0000">'&lt;books&gt;&lt;book&gt;PHP basics&lt;/book&gt;&lt;book&gt;XML basics&lt;/book&gt;&lt;/books&gt;'</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">(); </span><span style="color: #FF8000">// rewind to the first element<br /></span><span style="color: #007700">echo </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">key</span><span style="color: #007700">());<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>     <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(false)<br>string(4) &quot;book&quot;<br></span></div>    </div>   </div>  </span> </div></div>
     * @return string|false the XML tag name of the element referenced by the current <b>SimpleXMLIterator</b> object*/
    public function key() {}

/**
*<div id="simplexmlelement.next" class="refentry"> <div class="refnamediv">  <h1 class="refname">SimpleXMLElement::next</h1>  <p class="verinfo">(No version information available, might only be in Git)</p><p class="refpurpose"><span class="refname">SimpleXMLElement::next</span> &mdash; <span class="dc-title">Move to next element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-simplexmlelement.next-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::next</strong></span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>  <div class="warning"><strong class="warning">警告</strong>   <p class="simpara">    Prior to PHP 8.0, <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::next()</strong></span> was only    declared on the subclass <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmliterator.php" class="classname">SimpleXMLIterator</a></span>.   </p>  </div>  <p class="para">   This method moves the <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="classname">SimpleXMLElement</a></span> to the next element.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-simplexmlelement.next-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-simplexmlelement.next-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-simplexmlelement.next-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Move to the next element</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$xmlElement </span><span style="color: #007700">= new </span><span style="color: #9876AA">SimpleXMLElement</span><span style="color: #007700">(</span><span style="color: #DD0000">'&lt;books&gt;&lt;book&gt;PHP Basics&lt;/book&gt;&lt;book&gt;XML basics&lt;/book&gt;&lt;/books&gt;'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">(); </span><span style="color: #FF8000">// rewind to the first element<br /></span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">());<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>     <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(SimpleXMLElement)#2 (1) {<br>  [0]=&gt;<br>  string(10) &quot;XML basics&quot;<br>}<br></span></div>    </div>   </div>  </span> </div></div>
     * @return void No value is returned.*/
    public function next(): void {}

/**
*<div id="simplexmlelement.haschildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">SimpleXMLElement::hasChildren</h1>  <p class="verinfo">(No version information available, might only be in Git)</p><p class="refpurpose"><span class="refname">SimpleXMLElement::hasChildren</span> &mdash; <span class="dc-title">Checks whether the current element has sub elements</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-simplexmlelement.haschildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::hasChildren</strong></span>(): <span class="type" style="color:#EAB766">bool</span></div>  <div class="warning"><strong class="warning">警告</strong>   <p class="simpara">    Prior to PHP 8.0, <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::hasChildren()</strong></span> was only    declared on the subclass <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmliterator.php" class="classname">SimpleXMLIterator</a></span>.   </p>  </div>  <p class="para">   This method checks whether the current <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="classname">SimpleXMLElement</a></span> element has sub-elements.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-simplexmlelement.haschildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-simplexmlelement.haschildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span>true</span></strong> if the current element has sub-elements, otherwise <strong><span>false</span></strong>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-simplexmlelement.haschildren-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Check whether the current element has sub-elements</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$xml </span><span style="color: #007700">= &lt;&lt;&lt;XML<br /></span><span style="color: #DD0000">&lt;books&gt;<br />    &lt;book&gt;<br />        &lt;title&gt;PHP Basics&lt;/title&gt;<br />        &lt;author&gt;Jim Smith&lt;/author&gt;<br />    &lt;/book&gt;<br />    &lt;book&gt;XML basics&lt;/book&gt;<br />&lt;/books&gt;<br /></span><span style="color: #007700">XML;<br /><br /></span><span style="color: #9876AA">$xmlElement </span><span style="color: #007700">= new </span><span style="color: #9876AA">SimpleXMLElement</span><span style="color: #007700">(</span><span style="color: #9876AA">$xml</span><span style="color: #007700">);<br />for (</span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">(); </span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">(); </span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">()) {<br />    if (</span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasChildren</span><span style="color: #007700">()) {<br />        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">current</span><span style="color: #007700">());<br />    }<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(SimpleXMLElement)#2 (2) {<br>  [&quot;title&quot;]=&gt;<br>  string(10) &quot;PHP Basics&quot;<br>  [&quot;author&quot;]=&gt;<br>  string(9) &quot;Jim Smith&quot;<br>}<br></span></div>    </div>   </div>  </span> </div></div>
     * @return bool*/
    public function hasChildren(): bool {}

/**
*<div id="simplexmlelement.getchildren" class="refentry"> <div class="refnamediv">  <h1 class="refname">SimpleXMLElement::getChildren</h1>  <p class="verinfo">(No version information available, might only be in Git)</p><p class="refpurpose"><span class="refname">SimpleXMLElement::getChildren</span> &mdash; <span class="dc-title">Returns the sub-elements of the current element</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-simplexmlelement.getchildren-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::getChildren</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span></span></div>  <div class="warning"><strong class="warning">警告</strong>   <p class="simpara">    Prior to PHP 8.0, <span class="methodname" style="color:#CC7832"><strong>SimpleXMLElement::getChildren()</strong></span> was only    declared on the subclass <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmliterator.php" class="classname">SimpleXMLIterator</a></span>.   </p>  </div>  <p class="para">   This method returns a <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="classname">SimpleXMLElement</a></span> object   containing sub-elements of the current <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="classname">SimpleXMLElement</a></span>   element.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-simplexmlelement.getchildren-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-simplexmlelement.getchildren-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="classname">SimpleXMLElement</a></span> object containing   the sub-elements of the current element.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-simplexmlelement.getchildren-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Return the sub-elements of the current element</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$xml </span><span style="color: #007700">= &lt;&lt;&lt;XML<br /></span><span style="color: #DD0000">&lt;books&gt;<br />    &lt;book&gt;<br />        &lt;title&gt;PHP Basics&lt;/title&gt;<br />        &lt;author&gt;Jim Smith&lt;/author&gt;<br />    &lt;/book&gt;<br />    &lt;book&gt;XML basics&lt;/book&gt;<br />&lt;/books&gt;<br /></span><span style="color: #007700">XML;<br /><br /></span><span style="color: #9876AA">$xmlElement </span><span style="color: #007700">= new </span><span style="color: #9876AA">SimpleXMLElement</span><span style="color: #007700">(</span><span style="color: #9876AA">$xml</span><span style="color: #007700">);<br />for (</span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">rewind</span><span style="color: #007700">(); </span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">valid</span><span style="color: #007700">(); </span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">next</span><span style="color: #007700">()) {<br />    foreach(</span><span style="color: #9876AA">$xmlElement</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getChildren</span><span style="color: #007700">() as </span><span style="color: #9876AA">$name </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$data</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">"The </span><span style="color: #9876AA">$name</span><span style="color: #DD0000"> is '</span><span style="color: #9876AA">$data</span><span style="color: #DD0000">' from the class " </span><span style="color: #007700">. </span><span style="color: #9876AA">get_class</span><span style="color: #007700">(</span><span style="color: #9876AA">$data</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />    }<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>The title is &#039;PHP Basics&#039; from the class SimpleXMLElement<br>The author is &#039;Jim Smith&#039; from the class SimpleXMLElement<br></span></div>    </div>   </div>  </span> </div></div>
*/
    public function getChildren(): ?SimpleXMLElement {}
}

/**
*<div id="class.simplexmliterator" class="reference"> <h1 class="title">The SimpleXMLIterator class</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.1.3, PHP 7, PHP 8)</p>  <div class="section" id="simplexmliterator.intro">   <h2 class="title">简介</h2>   <p class="para">    The SimpleXMLIterator provides recursive iteration over all nodes of a <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="classname">SimpleXMLElement</a></span> object.   </p>  </div>  <div class="section" id="simplexmliterator.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">SimpleXMLIterator</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="classname">SimpleXMLElement</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::__construct}</span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$options</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$dataIsURL</span><span class="initializer"> = <strong><span>false</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$namespaceOrPrefix</span><span class="initializer"> = &quot;&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$isPrefix</span><span class="initializer"> = <strong><span>false</span></strong></span></span><br>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::addAttribute}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$qualifiedName</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$namespace</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::addChild}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$qualifiedName</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$value</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$namespace</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::asXML}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$filename</span><span class="initializer"> = <strong><span>null</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766">bool</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::attributes}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$namespaceOrPrefix</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$isPrefix</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::children}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$namespaceOrPrefix</span><span class="initializer"> = <strong><span>null</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$isPrefix</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::count}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::current}</span>(): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::getDocNamespaces}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$recursive</span><span class="initializer"> = <strong><span>false</span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$fromRoot</span><span class="initializer"> = <strong><span>true</span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::getName}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::getNamespaces}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$recursive</span><span class="initializer"> = <strong><span>false</span></strong></span></span>): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::getChildren}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::hasChildren}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::key}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::next}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::registerXPathNamespace}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$prefix</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$namespace</span></span>): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::rewind}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::valid}</span>(): <span class="type" style="color:#EAB766">bool</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::xpath}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$expression</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">array</span>|<span class="type" style="color:#EAB766">null</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>   }</div>  </div>  <div class="section">   <h2 class="title">更新日志</h2>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        Iterator methods (<span class="methodname" style="color:#CC7832"><strong>SimpleXMLIterator::hasChildren()</strong></span>,        <span class="methodname" style="color:#CC7832"><strong>SimpleXMLIterator::getChildren()</strong></span>,        <span class="methodname" style="color:#CC7832"><strong>SimpleXMLIterator::current()</strong></span>, <span class="methodname" style="color:#CC7832"><strong>SimpleXMLIterator::key()</strong></span>,        <span class="methodname" style="color:#CC7832"><strong>SimpleXMLIterator::next()</strong></span>,<span class="methodname" style="color:#CC7832"><strong>SimpleXMLIterator::rewind()</strong></span>,        <span class="methodname" style="color:#CC7832"><strong>SimpleXMLIterator::valid()</strong></span>) were moved to <span class="classname"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="classname">SimpleXMLElement</a></span>.       </td>      </tr>      <tr>       <td>8.0.0</td>       <td>        <span class="classname"><strong class="classname">SimpleXMLIterator</strong></span> implements        <span class="interfacename"><a href="https://www.php.net/manual/zh/class.stringable.php" class="interfacename">Stringable</a></span> now.       </td>      </tr>     </tbody>       </table>  </div> </div></div>
*/
class SimpleXMLIterator extends SimpleXMLElement implements RecursiveIterator, Countable, Stringable
{
    /**
     * Rewind to the first element
     * @link https://php.net/manual/en/simplexmliterator.rewind.php
     * @return void No value is returned.
     */
    public function rewind() {}

    /**
     * Check whether the current element is valid
     * @link https://php.net/manual/en/simplexmliterator.valid.php
     * @return bool <b>TRUE</b> if the current element is valid, otherwise <b>FALSE</b>
     */
    #[Pure]
    public function valid() {}

    /**
     * Returns the current element
     * @link https://php.net/manual/en/simplexmliterator.current.php
     * @return static|null the current element as a <b>SimpleXMLIterator</b> object or <b>NULL</b> on failure.
     */
    #[Pure]
    public function current() {}

    /**
     * Return current key
     * @link https://php.net/manual/en/simplexmliterator.key.php
     * @return string|false the XML tag name of the element referenced by the current <b>SimpleXMLIterator</b> object or <b>FALSE</b>
     */
    public function key() {}

    /**
     * Move to next element
     * @link https://php.net/manual/en/simplexmliterator.next.php
     * @return void No value is returned.
     */
    public function next() {}

    /**
     * Checks whether the current element has sub elements.
     * @link https://php.net/manual/en/simplexmliterator.haschildren.php
     * @return bool <b>TRUE</b> if the current element has sub-elements, otherwise <b>FALSE</b>
     */
    #[Pure]
    public function hasChildren() {}

    /**
     * Returns the sub-elements of the current element
     * @link https://php.net/manual/en/simplexmliterator.getchildren.php
     * @return SimpleXMLIterator a <b>SimpleXMLIterator</b> object containing
     * the sub-elements of the current element.
     */
    #[Pure]
    public function getChildren() {}

    /**
     * Returns the string content
     * @link https://php.net/manual/en/simplexmlelement.tostring.php
     * @return string the string content on success or an empty string on failure.
     * @since 5.3
     */
    public function __toString() {}

    /**
     * Counts the children of an element
     * @link https://php.net/manual/en/simplexmlelement.count.php
     * @return int the number of elements of an element.
     */
    #[Pure]
    public function count() {}
}

/**
*<div id="function.simplexml-load-file" class="refentry"> <div class="refnamediv">  <h1 class="refname">simplexml_load_file</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">simplexml_load_file</span> &mdash; <span class="dc-title">   Interprets an XML file into an object  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.simplexml-load-file-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>simplexml_load_file</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$filename</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class_name</span><span class="initializer"> = SimpleXMLElement::class</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$options</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$namespace_or_prefix</span><span class="initializer"> = &quot;&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$is_prefix</span><span class="initializer"> = <strong><span>false</span></strong></span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Convert the well-formed XML document in the given file to an object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.simplexml-load-file-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">filename</span></dt>     <dd>      <p class="para">       Path to the XML file      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">class_name</span></dt>     <dd>      <p class="para">       You may use this optional parameter so that       <span class="function"><strong style="color:#CC7832">simplexml_load_file()</strong></span> will return an object of        the specified class. That class should extend the        <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span> class.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">options</span></dt>     <dd>      <p class="para">  <a href="https://www.php.net/manual/zh/language.operators.bitwise.php" class="link">Bitwise <span>OR</span></a>  of the <a href="https://www.php.net/manual/zh/libxml.constants.php" class="link">libxml option constants</a>.</p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">namespace_or_prefix</span></dt>     <dd>      <p class="para">       Namespace prefix or URI.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">is_prefix</span></dt>     <dd>      <p class="para">       <strong><span>true</span></strong> if <span class="parameter" style="color:#3A95FF">namespace_or_prefix</span> is a prefix, <strong><span>false</span></strong> if it&#039;s a URI;       defaults to <strong><span>false</span></strong>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.simplexml-load-file-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an <span class="type" style="color:#EAB766">object</span> of class <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span> with   properties containing the data held within the XML document, 或者在失败时返回 <strong><span>false</span></strong>.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数可能返回布尔值<strong><span>false</span></strong>，但也可能返回等同于 <strong><span>false</span></strong> 的非布尔值。请阅读 <a href="https://www.php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">===运算符</a>来测试此函数的返回值。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.simplexml-load-file-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Produces an <strong><span>E_WARNING</span></strong> error message for each error   found in the XML data.  </p>  <div class="tip"><strong class="tip">小技巧</strong>   <p class="para">    Use <span class="function">{@link libxml_use_internal_errors()}</span> to suppress all XML    errors, and <span class="function">{@link libxml_get_errors()}</span> to iterate over them    afterwards.   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.simplexml-load-file-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Interpret an XML document</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// The file test.xml contains an XML document with a root element<br />// and at least an element /[root]/title.<br /><br /></span><span style="color: #007700">if (</span><span style="color: #9876AA">file_exists</span><span style="color: #007700">(</span><span style="color: #DD0000">'test.xml'</span><span style="color: #007700">)) {<br />    </span><span style="color: #9876AA">$xml </span><span style="color: #007700">= </span><span style="color: #9876AA">simplexml_load_file</span><span style="color: #007700">(</span><span style="color: #DD0000">'test.xml'</span><span style="color: #007700">);<br /> <br />    </span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$xml</span><span style="color: #007700">);<br />} else {<br />    exit(</span><span style="color: #DD0000">'Failed to open test.xml.'</span><span style="color: #007700">);<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>     This script will display, on success:    </p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>SimpleXMLElement Object<br>(<br>  [title] =&gt; Example Title<br>  ...<br>)<br></span></div>    </div>    <div class="example-contents"><p>     At this point, you can go about using <span>$xml-&gt;title</span>     and any other elements.    </p></div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.simplexml-load-file-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link simplexml_load_string()} - Interprets a string of XML into an object</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::__construct()} - Creates a new SimpleXMLElement object</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/simplexml.examples-errors.php" class="xref">Dealing with XML errors</a></li>    <li class="member"><span class="function">{@link libxml_use_internal_errors()} - Disable libxml errors and allow user to fetch error information as needed</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/simplexml.examples-basic.php" class="xref">Basic SimpleXML usage</a></li>    <li class="member"><span class="function">{@link libxml_set_streams_context()} - Set the streams context for the next libxml document load or write</span></li>   </ul>  </span> </div></div>
 * @return SimpleXMLElement|false an object of class SimpleXMLElement with*/
function simplexml_load_file(string $filename, ?string $class_name = "SimpleXMLElement", int $options = 0, string $namespace_or_prefix = "", bool $is_prefix = false): SimpleXMLElement|false {}

/**
*<div id="function.simplexml-load-string" class="refentry"> <div class="refnamediv">  <h1 class="refname">simplexml_load_string</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">simplexml_load_string</span> &mdash; <span class="dc-title">   Interprets a string of XML into an object  </span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.simplexml-load-string-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>simplexml_load_string</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$data</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class_name</span><span class="initializer"> = SimpleXMLElement::class</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$options</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$namespace_or_prefix</span><span class="initializer"> = &quot;&quot;</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">bool</span> <span class="parameter" style="color:#3A95FF">$is_prefix</span><span class="initializer"> = <strong><span>false</span></strong></span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   Takes a well-formed XML string and returns it as an object.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.simplexml-load-string-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">data</span></dt>     <dd>      <p class="para">       A well-formed XML string      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">class_name</span></dt>     <dd>      <p class="para">       You may use this optional parameter so that       <span class="function"><strong style="color:#CC7832">simplexml_load_string()</strong></span> will return an object of        the specified class. That class should extend the        <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span> class.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">options</span></dt>     <dd>      <p class="para">  <a href="https://www.php.net/manual/zh/language.operators.bitwise.php" class="link">Bitwise <span>OR</span></a>  of the <a href="https://www.php.net/manual/zh/libxml.constants.php" class="link">libxml option constants</a>.</p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">namespace_or_prefix</span></dt>     <dd>      <p class="para">       Namespace prefix or URI.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">is_prefix</span></dt>     <dd>      <p class="para">       <strong><span>true</span></strong> if <span class="parameter" style="color:#3A95FF">namespace_or_prefix</span> is a prefix, <strong><span>false</span></strong> if it&#039;s a URI;       defaults to <strong><span>false</span></strong>.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.simplexml-load-string-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an <span class="type" style="color:#EAB766">object</span> of class <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span> with   properties containing the data held within the xml document, 或者在失败时返回 <strong><span>false</span></strong>.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数可能返回布尔值<strong><span>false</span></strong>，但也可能返回等同于 <strong><span>false</span></strong> 的非布尔值。请阅读 <a href="https://www.php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用<a href="https://www.php.net/manual/zh/language.operators.comparison.php" class="link">===运算符</a>来测试此函数的返回值。</p></div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.simplexml-load-string-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Produces an <strong><span>E_WARNING</span></strong> error message for each error   found in the XML data.  </p>  <div class="tip"><strong class="tip">小技巧</strong>   <p class="para">    Use <span class="function">{@link libxml_use_internal_errors()}</span> to suppress all XML    errors, and <span class="function">{@link libxml_get_errors()}</span> to iterate over them    afterwards.   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.simplexml-load-string-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Interpret an XML string</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$string </span><span style="color: #007700">= &lt;&lt;&lt;XML<br /></span><span style="color: #DD0000">&lt;?xml version='1.0'?&gt; <br />&lt;document&gt;<br /> &lt;title&gt;Forty What?&lt;/title&gt;<br /> &lt;from&gt;Joe&lt;/from&gt;<br /> &lt;to&gt;Jane&lt;/to&gt;<br /> &lt;body&gt;<br />  I know that's the answer -- but what's the question?<br /> &lt;/body&gt;<br />&lt;/document&gt;<br /></span><span style="color: #007700">XML;<br /><br /></span><span style="color: #9876AA">$xml </span><span style="color: #007700">= </span><span style="color: #9876AA">simplexml_load_string</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">);<br /><br /></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">$xml</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>SimpleXMLElement Object<br>(<br>  [title] =&gt; Forty What?<br>  [from] =&gt; Joe<br>  [to] =&gt; Jane<br>  [body] =&gt;<br>   I know that&#039;s the answer -- but what&#039;s the question?<br>)<br></span></div>    </div>    <div class="example-contents"><p>     At this point, you can go about using <span>$xml-&gt;body</span>     and such.    </p></div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.simplexml-load-string-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link simplexml_load_file()} - Interprets an XML file into an object</span></li>    <li class="member"><span class="methodname" style="color:#CC7832">{@link SimpleXMLElement::__construct()} - Creates a new SimpleXMLElement object</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/simplexml.examples-errors.php" class="xref">Dealing with XML errors</a></li>    <li class="member"><span class="function">{@link libxml_use_internal_errors()} - Disable libxml errors and allow user to fetch error information as needed</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/simplexml.examples-basic.php" class="xref">Basic SimpleXML usage</a></li>   </ul>  </span> </div></div>
 * @return SimpleXMLElement|false an object of class SimpleXMLElement with*/
function simplexml_load_string(string $data, ?string $class_name = "SimpleXMLElement", int $options = 0, string $namespace_or_prefix = "", bool $is_prefix = false): SimpleXMLElement|false {}

/**
*<div id="function.simplexml-import-dom" class="refentry"> <div class="refnamediv">  <h1 class="refname">simplexml_import_dom</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">simplexml_import_dom</span> &mdash; <span class="dc-title">Get a <span>SimpleXMLElement</span> object from a DOM node</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.simplexml-import-dom-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>simplexml_import_dom</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span>|<span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.domnode.php" class="type DOMNode" style="color:#EAB766">DOMNode</a></span></span> <span class="parameter" style="color:#3A95FF">$node</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$class_name</span><span class="initializer"> = SimpleXMLElement::class</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span></span></div>  <p class="para rdfs-comment">   This function takes a node of a <a href="https://www.php.net/manual/zh/book.dom.php" class="link">DOM</a>   document and makes it into a SimpleXML node. This new object can   then be used as a native SimpleXML element.   </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.simplexml-import-dom-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">node</span></dt>     <dd>      <p class="para">       A <a href="https://www.php.net/manual/zh/book.dom.php" class="link">DOM</a> Element node      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">class_name</span></dt>     <dd>      <p class="para">       You may use this optional parameter so that       <span class="function"><strong style="color:#CC7832">simplexml_import_dom()</strong></span> will return an object of        the specified class. That class should extend the        <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span> class.      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.simplexml-import-dom-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.simplexmlelement.php" class="type SimpleXMLElement" style="color:#EAB766">SimpleXMLElement</a></span> or <strong><span>null</span></strong> on failure.  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.simplexml-import-dom-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 Importing DOM</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$dom </span><span style="color: #007700">= new </span><span style="color: #9876AA">DOMDocument</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$dom</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">loadXML</span><span style="color: #007700">(</span><span style="color: #DD0000">'&lt;books&gt;&lt;book&gt;&lt;title&gt;blah&lt;/title&gt;&lt;/book&gt;&lt;/books&gt;'</span><span style="color: #007700">);<br />if (!</span><span style="color: #9876AA">$dom</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Error while parsing the document'</span><span style="color: #007700">;<br />    exit;<br />}<br /><br /></span><span style="color: #9876AA">$s </span><span style="color: #007700">= </span><span style="color: #9876AA">simplexml_import_dom</span><span style="color: #007700">(</span><span style="color: #9876AA">$dom</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #9876AA">$s</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">book</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]-&gt;</span><span style="color: #9876AA">title</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>blah<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.simplexml-import-dom-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link dom_import_simplexml()} - Gets a DOMElement object from a   SimpleXMLElement object</span></li>    <li class="member"><a href="https://www.php.net/manual/zh/simplexml.examples-basic.php" class="xref">Basic SimpleXML usage</a></li>   </ul>  </span> </div></div>
 * @return SimpleXMLElement|null a SimpleXMLElement or <b>FALSE</b> on failure.*/
function simplexml_import_dom(SimpleXMLElement|DOMNode $node, ?string $class_name = "SimpleXMLElement"): ?SimpleXMLElement {}

// End of SimpleXML v.0.1
