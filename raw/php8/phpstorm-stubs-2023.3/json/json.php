<?php

// Start of json v.1.3.1
use JetBrains\PhpStorm\Internal\TentativeType;
use JetBrains\PhpStorm\Pure;

/**
 * Objects implementing JsonSerializable
 * can customize their JSON representation when encoded with
 * <b>json_encode</b>.
 * @link https://php.net/manual/en/class.jsonserializable.php
 * @since 5.4
 */
interface JsonSerializable
{
    /**
     * Specify data which should be serialized to JSON
     * @link https://php.net/manual/en/jsonserializable.jsonserialize.php
     * @return mixed data which can be serialized by <b>json_encode</b>,
     * which is a value of any type other than a resource.
     * @since 5.4
     */
    #[TentativeType]
    public function jsonSerialize(): mixed;
}

class JsonIncrementalParser
{
    public const JSON_PARSER_SUCCESS = 0;
    public const JSON_PARSER_CONTINUE = 1;

    /**
     * @param int $depth [optional]
     * @param int $options [optional]
     */
    #[Pure]
    public function __construct($depth, $options) {}

    #[Pure]
    public function getError() {}

    public function reset() {}

    /**
     * @param string $json
     */
    public function parse($json) {}

    /**
     * @param string $filename
     */
    public function parseFile($filename) {}

    /**
     * @param int $options [optional]
     */
    #[Pure]
    public function get($options) {}
}

/**
*<div id="function.json-encode" class="refentry"> <div class="refnamediv">  <h1 class="refname">json_encode</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8, PECL json &gt;= 1.2.0)</p><p class="refpurpose"><span class="refname">json_encode</span> &mdash; <span class="dc-title">对变量进行 JSON 编码</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.json-encode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>json_encode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$depth</span><span class="initializer"> = 512</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">string</span>|<span class="type" style="color:#EAB766"><span class="type false" style="color:#EAB766">false</span></span></span></div>  <p class="para rdfs-comment">   返回字符串，包含了 <span class="parameter" style="color:#3A95FF">value</span> 值 JSON 形式的表示。如果参数是 <span class="type" style="color:#EAB766">array</span> 或 <span class="type" style="color:#EAB766">object</span>，则会递归序列化。  </p>  <p class="para">   如果要序列化的值是对象，则默认仅包含公开可见的属性，或者类可以实现 <span class="interfacename"><a href="https://www.php.net/manual/zh/class.jsonserializable.php" class="interfacename">JsonSerializable</a></span>   控制其值如何序列化为 <abbr title="JavaScript Object Notation">JSON</abbr>。  </p>  <p class="para">   编码受传入的 <span class="parameter" style="color:#3A95FF">flags</span> 参数影响，此外浮点值的编码依赖于 <a href="https://www.php.net/manual/zh/ini.core.php#ini.serialize-precision" class="link">serialize_precision</a>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.json-encode-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       待编码的 <span class="parameter" style="color:#3A95FF">value</span> ，除了 <a href="https://www.php.net/manual/zh/language.types.resource.php" class="link">resource</a>       类型之外，可以为任何数据类型。      </p>      <p class="para">       所有字符串数据的编码必须是 UTF-8。      </p>       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:   <p class="para">   PHP 实现了 JSON 的一个超集，参考   <a href="http://www.faqs.org/rfcs/rfc7159" class="link external">&raquo;&nbsp;RFC 7159</a>.  </p> </p></blockquote>     </dd>             <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       由以下常量组成的二进制掩码：       <strong><span>JSON_FORCE_OBJECT</span></strong>、       <strong><span>JSON_HEX_QUOT</span></strong>、       <strong><span>JSON_HEX_TAG</span></strong>、       <strong><span>JSON_HEX_AMP</span></strong>、       <strong><span>JSON_HEX_APOS</span></strong>、       <strong><span>JSON_INVALID_UTF8_IGNORE</span></strong>、       <strong><span>JSON_INVALID_UTF8_SUBSTITUTE</span></strong>、       <strong><span>JSON_NUMERIC_CHECK</span></strong>、       <strong><span>JSON_PARTIAL_OUTPUT_ON_ERROR</span></strong>、       <strong><span>JSON_PRESERVE_ZERO_FRACTION</span></strong>、       <strong><span>JSON_PRETTY_PRINT</span></strong>、       <strong><span>JSON_UNESCAPED_LINE_TERMINATORS</span></strong>、       <strong><span>JSON_UNESCAPED_SLASHES</span></strong>、       <strong><span>JSON_UNESCAPED_UNICODE</span></strong>、       <strong><span>JSON_THROW_ON_ERROR</span></strong>。       关于 JSON 常量详情参考       <a href="https://www.php.net/manual/zh/json.constants.php" class="link">JSON 常量</a>页面。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">depth</span></dt>     <dd>      <p class="para">       设置最大深度。 必须大于0。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.json-encode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功则返回 JSON 编码的 <span class="type" style="color:#EAB766">string</span>  或者在失败时返回 <strong><span>false</span></strong> 。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.json-encode-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.3.0</td>       <td>        <span class="parameter" style="color:#3A95FF">flags</span> 参数新增        <strong><span>JSON_THROW_ON_ERROR</span></strong>        常量。       </td>      </tr>      <tr>       <td>7.2.0</td>       <td>        <span class="parameter" style="color:#3A95FF">flags</span> 参数新增        <strong><span>JSON_INVALID_UTF8_IGNORE</span></strong> 和        <strong><span>JSON_INVALID_UTF8_SUBSTITUTE</span></strong>        常量。       </td>      </tr>      <tr>       <td>7.1.0</td>       <td>        <span class="parameter" style="color:#3A95FF">flags</span> 参数新增        <strong><span>JSON_UNESCAPED_LINE_TERMINATORS</span></strong>        常量。       </td>      </tr>      <tr>       <td>7.1.0</td>       <td>        对 <span class="type" style="color:#EAB766">float</span> 值进行编码时，使用        <a href="https://www.php.net/manual/zh/ini.core.php#ini.serialize-precision" class="link">serialize_precision</a> 代替        <a href="https://www.php.net/manual/zh/ini.core.php#ini.precision" class="link">precision</a>。       </td>      </tr>     </tbody>       </table>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.json-encode-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">json_encode()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$arr </span><span style="color: #007700">= array (</span><span style="color: #DD0000">'a'</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">1</span><span style="color: #007700">,</span><span style="color: #DD0000">'b'</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">2</span><span style="color: #007700">,</span><span style="color: #DD0000">'c'</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">3</span><span style="color: #007700">,</span><span style="color: #DD0000">'d'</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">4</span><span style="color: #007700">,</span><span style="color: #DD0000">'e'</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">5</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$arr</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>{&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5}<br></span></div>    </div>   </div>      <div class="example" id="">    <p><strong>示例 #2  <span class="function"><strong style="color:#CC7832">json_encode()</strong></span> 函数中 flags 参数的用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$a </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'&lt;foo&gt;'</span><span style="color: #007700">,</span><span style="color: #DD0000">"'bar'"</span><span style="color: #007700">,</span><span style="color: #DD0000">'"baz"'</span><span style="color: #007700">,</span><span style="color: #DD0000">'&amp;blong&amp;'</span><span style="color: #007700">, </span><span style="color: #DD0000">"\xc3\xa9"</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #DD0000">"Normal: "</span><span style="color: #007700">,  </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"Tags: "</span><span style="color: #007700">,    </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">JSON_HEX_TAG</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"Apos: "</span><span style="color: #007700">,    </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">JSON_HEX_APOS</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"Quot: "</span><span style="color: #007700">,    </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">JSON_HEX_QUOT</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"Amp: "</span><span style="color: #007700">,     </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">JSON_HEX_AMP</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"Unicode: "</span><span style="color: #007700">, </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">JSON_UNESCAPED_UNICODE</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"All: "</span><span style="color: #007700">,     </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">JSON_HEX_TAG </span><span style="color: #007700">| </span><span style="color: #9876AA">JSON_HEX_APOS </span><span style="color: #007700">| </span><span style="color: #9876AA">JSON_HEX_QUOT </span><span style="color: #007700">| </span><span style="color: #9876AA">JSON_HEX_AMP </span><span style="color: #007700">| </span><span style="color: #9876AA">JSON_UNESCAPED_UNICODE</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$b </span><span style="color: #007700">= array();<br /><br />echo </span><span style="color: #DD0000">"Empty array output as array: "</span><span style="color: #007700">, </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"Empty array output as object: "</span><span style="color: #007700">, </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$b</span><span style="color: #007700">, </span><span style="color: #9876AA">JSON_FORCE_OBJECT</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$c </span><span style="color: #007700">= array(array(</span><span style="color: #9876AA">1</span><span style="color: #007700">,</span><span style="color: #9876AA">2</span><span style="color: #007700">,</span><span style="color: #9876AA">3</span><span style="color: #007700">));<br /><br />echo </span><span style="color: #DD0000">"Non-associative array output as array: "</span><span style="color: #007700">, </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$c</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"Non-associative array output as object: "</span><span style="color: #007700">, </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$c</span><span style="color: #007700">, </span><span style="color: #9876AA">JSON_FORCE_OBJECT</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$d </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'foo' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">, </span><span style="color: #DD0000">'baz' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'long'</span><span style="color: #007700">);<br /><br />echo </span><span style="color: #DD0000">"Associative array always output as object: "</span><span style="color: #007700">, </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$d</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br />echo </span><span style="color: #DD0000">"Associative array always output as object: "</span><span style="color: #007700">, </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$d</span><span style="color: #007700">, </span><span style="color: #9876AA">JSON_FORCE_OBJECT</span><span style="color: #007700">), </span><span style="color: #DD0000">"\n\n"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Normal: [&quot;&lt;foo&gt;&quot;,&quot;&#039;bar&#039;&quot;,&quot;\&quot;baz\&quot;&quot;,&quot;&amp;blong&amp;&quot;,&quot;\u00e9&quot;]<br>Tags: [&quot;\u003Cfoo\u003E&quot;,&quot;&#039;bar&#039;&quot;,&quot;\&quot;baz\&quot;&quot;,&quot;&amp;blong&amp;&quot;,&quot;\u00e9&quot;]<br>Apos: [&quot;&lt;foo&gt;&quot;,&quot;\u0027bar\u0027&quot;,&quot;\&quot;baz\&quot;&quot;,&quot;&amp;blong&amp;&quot;,&quot;\u00e9&quot;]<br>Quot: [&quot;&lt;foo&gt;&quot;,&quot;&#039;bar&#039;&quot;,&quot;\u0022baz\u0022&quot;,&quot;&amp;blong&amp;&quot;,&quot;\u00e9&quot;]<br>Amp: [&quot;&lt;foo&gt;&quot;,&quot;&#039;bar&#039;&quot;,&quot;\&quot;baz\&quot;&quot;,&quot;\u0026blong\u0026&quot;,&quot;\u00e9&quot;]<br>Unicode: [&quot;&lt;foo&gt;&quot;,&quot;&#039;bar&#039;&quot;,&quot;\&quot;baz\&quot;&quot;,&quot;&amp;blong&amp;&quot;,&quot;é&quot;]<br>All: [&quot;\u003Cfoo\u003E&quot;,&quot;\u0027bar\u0027&quot;,&quot;\u0022baz\u0022&quot;,&quot;\u0026blong\u0026&quot;,&quot;é&quot;]<br><br>Empty array output as array: []<br>Empty array output as object: {}<br><br>Non-associative array output as array: [[1,2,3]]<br>Non-associative array output as object: {&quot;0&quot;:{&quot;0&quot;:1,&quot;1&quot;:2,&quot;2&quot;:3}}<br><br>Associative array always output as object: {&quot;foo&quot;:&quot;bar&quot;,&quot;baz&quot;:&quot;long&quot;}<br>Associative array always output as object: {&quot;foo&quot;:&quot;bar&quot;,&quot;baz&quot;:&quot;long&quot;}<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #3 选项 JSON_NUMERIC_CHECK 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #DD0000">"Strings representing numbers automatically turned into numbers"</span><span style="color: #007700">.</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$numbers </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'+123123'</span><span style="color: #007700">, </span><span style="color: #DD0000">'-123123'</span><span style="color: #007700">, </span><span style="color: #DD0000">'1.2e3'</span><span style="color: #007700">, </span><span style="color: #DD0000">'0.00001'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(<br /> </span><span style="color: #9876AA">$numbers</span><span style="color: #007700">,<br /> </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$numbers</span><span style="color: #007700">, </span><span style="color: #9876AA">JSON_NUMERIC_CHECK</span><span style="color: #007700">)<br />);<br />echo </span><span style="color: #DD0000">"Strings containing improperly formatted numbers"</span><span style="color: #007700">.</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$strings </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'+a33123456789'</span><span style="color: #007700">, </span><span style="color: #DD0000">'a123'</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(<br /> </span><span style="color: #9876AA">$strings</span><span style="color: #007700">,<br /> </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$strings</span><span style="color: #007700">, </span><span style="color: #9876AA">JSON_NUMERIC_CHECK</span><span style="color: #007700">)<br />);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Strings representing numbers automatically turned into numbers<br>array(4) {<br>  [0]=&gt;<br>  string(7) &quot;+123123&quot;<br>  [1]=&gt;<br>  string(7) &quot;-123123&quot;<br>  [2]=&gt;<br>  string(5) &quot;1.2e3&quot;<br>  [3]=&gt;<br>  string(7) &quot;0.00001&quot;<br>}<br>string(28) &quot;[123123,-123123,1200,1.0e-5]&quot;<br>Strings containing improperly formatted numbers<br>array(2) {<br>  [0]=&gt;<br>  string(13) &quot;+a33123456789&quot;<br>  [1]=&gt;<br>  string(4) &quot;a123&quot;<br>}<br>string(24) &quot;[&quot;+a33123456789&quot;,&quot;a123&quot;]&quot;<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #4 连续与非连续数组示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #007700">echo </span><span style="color: #DD0000">"连续数组"</span><span style="color: #007700">.</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$sequential </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"foo"</span><span style="color: #007700">, </span><span style="color: #DD0000">"bar"</span><span style="color: #007700">, </span><span style="color: #DD0000">"baz"</span><span style="color: #007700">, </span><span style="color: #DD0000">"blong"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(<br /> </span><span style="color: #9876AA">$sequential</span><span style="color: #007700">,<br /> </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$sequential</span><span style="color: #007700">)<br />);<br /><br />echo </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">.</span><span style="color: #DD0000">"非连续数组"</span><span style="color: #007700">.</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">$nonsequential </span><span style="color: #007700">= array(</span><span style="color: #9876AA">1</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"foo"</span><span style="color: #007700">, </span><span style="color: #9876AA">2</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"bar"</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"baz"</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">"blong"</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(<br /> </span><span style="color: #9876AA">$nonsequential</span><span style="color: #007700">,<br /> </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$nonsequential</span><span style="color: #007700">)<br />);<br /><br />echo </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">.</span><span style="color: #DD0000">"删除一个连续数组值的方式产生的非连续数组"</span><span style="color: #007700">.</span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />unset(</span><span style="color: #9876AA">$sequential</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]);<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(<br /> </span><span style="color: #9876AA">$sequential</span><span style="color: #007700">,<br /> </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$sequential</span><span style="color: #007700">)<br />);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>连续数组<br>array(4) {<br>  [0]=&gt;<br>  string(3) &quot;foo&quot;<br>  [1]=&gt;<br>  string(3) &quot;bar&quot;<br>  [2]=&gt;<br>  string(3) &quot;baz&quot;<br>  [3]=&gt;<br>  string(5) &quot;blong&quot;<br>}<br>string(27) &quot;[&quot;foo&quot;,&quot;bar&quot;,&quot;baz&quot;,&quot;blong&quot;]&quot;<br><br>非连续数组<br>array(4) {<br>  [1]=&gt;<br>  string(3) &quot;foo&quot;<br>  [2]=&gt;<br>  string(3) &quot;bar&quot;<br>  [3]=&gt;<br>  string(3) &quot;baz&quot;<br>  [4]=&gt;<br>  string(5) &quot;blong&quot;<br>}<br>string(43) &quot;{&quot;1&quot;:&quot;foo&quot;,&quot;2&quot;:&quot;bar&quot;,&quot;3&quot;:&quot;baz&quot;,&quot;4&quot;:&quot;blong&quot;}&quot;<br><br>删除一个连续数组值的方式产生的非连续数组<br>array(3) {<br>  [0]=&gt;<br>  string(3) &quot;foo&quot;<br>  [2]=&gt;<br>  string(3) &quot;baz&quot;<br>  [3]=&gt;<br>  string(5) &quot;blong&quot;<br>}<br>string(33) &quot;{&quot;0&quot;:&quot;foo&quot;,&quot;2&quot;:&quot;baz&quot;,&quot;3&quot;:&quot;blong&quot;}&quot;<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #5 <strong><span>选项 JSON_PRESERVE_ZERO_FRACTION</span></strong> 的例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">12.0</span><span style="color: #007700">, </span><span style="color: #9876AA">JSON_PRESERVE_ZERO_FRACTION</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">12.0</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(4) &quot;12.0&quot;<br>string(2) &quot;12&quot;<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.json-encode-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    如果执行失败，可以通过 <span class="function">{@link json_last_error()}</span> 函数来获取详细错误信息。   </p>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    如果要编码的数组的键不是从0开始的数字，所有的键将会被当作字符串，并明确声明为 key-value 对。   </p>  </p></blockquote>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    参考 JSON 解析器，如果指定简单的 <span class="type" style="color:#EAB766">string</span>、<span class="type" style="color:#EAB766">integer</span>、<span class="type" style="color:#EAB766">float</span> 或    <span class="type" style="color:#EAB766">boolean</span> 作为输入 <span class="parameter" style="color:#3A95FF">value</span>，<span class="function"><strong style="color:#CC7832">json_encode()</strong></span>    将生成简单的值的 JSON（既不是对象又不是数组）。虽然大多数解码器会接受这些值作为有效的    JSON，但有些可能不会，因为在这一点上规范是模棱两可的。   </p>   <p class="para">    总而言之，应该测试下 JSON decoder 能否处理 <span class="function"><strong style="color:#CC7832">json_encode()</strong></span> 生成的数据。   </p>  </p></blockquote> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.json-encode-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="interfacename"><a href="https://www.php.net/manual/zh/class.jsonserializable.php" class="interfacename">JsonSerializable</a></span></li>    <li class="member"><span class="function">{@link json_decode()} - 对 JSON 格式的字符串进行解码</span></li>    <li class="member"><span class="function">{@link json_last_error()} - 返回最后发生的错误</span></li>    <li class="member"><span class="function">{@link serialize()} - 生成值的可存储表示</span></li>   </ul>  </span> </div></div>
 * @return string|false a JSON encoded string on success or <b>FALSE</b> on failure.*/
function json_encode(mixed $value, int $flags = 0, int $depth = 512): string|false {}

/**
*<div id="function.json-decode" class="refentry"> <div class="refnamediv">  <h1 class="refname">json_decode</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8, PECL json &gt;= 1.2.0)</p><p class="refpurpose"><span class="refname">json_decode</span> &mdash; <span class="dc-title">对 JSON 格式的字符串进行解码</span></p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.json-decode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>json_decode</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$json</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">bool</span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$associative</span><span class="initializer"> = <strong><span>null</span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$depth</span><span class="initializer"> = 512</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   接受一个 JSON 编码的字符串并且把它转换为 PHP 值。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.json-decode-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">json</span></dt>     <dd>      <p class="para">       待解码的 <span class="parameter" style="color:#3A95FF">json</span> <span class="type" style="color:#EAB766">string</span> 格式的字符串。      </p>      <p class="para">       这个函数仅能处理 UTF-8 编码的数据。      </p>       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:   <p class="para">   PHP 实现了 JSON 的一个超集，参考   <a href="http://www.faqs.org/rfcs/rfc7159" class="link external">&raquo;&nbsp;RFC 7159</a>.  </p> </p></blockquote>     </dd>             <dt><span class="parameter" style="color:#3A95FF">associative</span></dt>     <dd>      <p class="para">       当为 <strong><span>true</span></strong> 时，JSON 对象将返回关联 <span class="type" style="color:#EAB766">array</span>；当为 <strong><span>false</span></strong> 时，JSON 对象将返回       <span class="type" style="color:#EAB766">object</span>。当为 <strong><span>null</span></strong> 时，JSON 对象将返回关联 <span class="type" style="color:#EAB766">array</span> 或 <span class="type" style="color:#EAB766">object</span>，这取决于是否在       <span class="parameter" style="color:#3A95FF">flags</span> 中设置 <strong><span>JSON_OBJECT_AS_ARRAY</span></strong>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">depth</span></dt>     <dd>      <p class="para">       需要解码的结构，其最大嵌套深度。该值必须大于 <span>0</span> 或者小于等于 <span>2147483647</span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       由 <strong><span>JSON_BIGINT_AS_STRING</span></strong>、<strong><span>JSON_INVALID_UTF8_IGNORE</span></strong>、<strong><span>JSON_INVALID_UTF8_SUBSTITUTE</span></strong>、<strong><span>JSON_OBJECT_AS_ARRAY</span></strong>、<strong><span>JSON_THROW_ON_ERROR</span></strong>       组成的掩码。这些常量的行为在 <a href="https://www.php.net/manual/zh/json.constants.php" class="link">JSON constants</a> 页面有进一步描述。      </p>     </dd>       </dl>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.json-decode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回在 <span class="parameter" style="color:#3A95FF">json</span> 中编码的数据作为合适的 PHP 类型。没有引号的值   <span>true</span>、<span>false</span> 和 <span>null</span>   会相应地返回 <strong><span>true</span></strong>、<strong><span>false</span></strong> 和 <strong><span>null</span></strong>。如果 <span class="parameter" style="color:#3A95FF">json</span>    无法被解码，或者编码数据深度超过了嵌套限制的话，将会返回 <strong><span>null</span></strong>。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.json-decode-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">depth</span> 超出允许的范围，自 PHP 8.0.0 起将会抛出   <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>，在此之前的版本将会引发   <strong><span>E_WARNING</span></strong> 级别的错误。  </p> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 changelog" id="refsect1-function.json-decode-changelog">  <h3 class="title">更新日志</h3>  <span>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.3.0</td>       <td>        <span class="parameter" style="color:#3A95FF">flags</span> 新增 <strong><span>JSON_THROW_ON_ERROR</span></strong>。       </td>      </tr>      <tr>       <td>7.2.0</td>       <td>        现在 <span class="parameter" style="color:#3A95FF">associative</span> 允许为 null。       </td>      </tr>      <tr>       <td>7.2.0</td>       <td>        <span class="parameter" style="color:#3A95FF">flags</span> 新增 <strong><span>JSON_INVALID_UTF8_IGNORE</span></strong>、<strong><span>JSON_INVALID_UTF8_SUBSTITUTE</span></strong>。       </td>      </tr>      <tr>       <td>7.1.0</td>       <td>        An empty JSON key (&quot;&quot;) can be encoded to the empty object property        instead of using a key with value <span>_empty_</span>.       </td>      </tr>     </tbody>       </table>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.json-decode-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">json_decode()</strong></span> 的例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$json </span><span style="color: #007700">= </span><span style="color: #DD0000">'{"a":1,"b":2,"c":3,"d":4,"e":5}'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">json_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">$json</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">json_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">$json</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(stdClass)#1 (5) {<br>    [&quot;a&quot;] =&gt; int(1)<br>    [&quot;b&quot;] =&gt; int(2)<br>    [&quot;c&quot;] =&gt; int(3)<br>    [&quot;d&quot;] =&gt; int(4)<br>    [&quot;e&quot;] =&gt; int(5)<br>}<br><br>array(5) {<br>    [&quot;a&quot;] =&gt; int(1)<br>    [&quot;b&quot;] =&gt; int(2)<br>    [&quot;c&quot;] =&gt; int(3)<br>    [&quot;d&quot;] =&gt; int(4)<br>    [&quot;e&quot;] =&gt; int(5)<br>}<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #2 Accessing invalid object properties</strong></p>    <div class="example-contents"><p>     Accessing elements within an object that contain characters not     permitted under PHP&#039;s naming convention (e.g. the hyphen) can be     accomplished by encapsulating the element name within braces and the apostrophe.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br />$json </span><span style="color: #007700">= </span><span style="color: #DD0000">'{"foo-bar": 12345}'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$obj </span><span style="color: #007700">= </span><span style="color: #9876AA">json_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">$json</span><span style="color: #007700">);<br />print </span><span style="color: #9876AA">$obj</span><span style="color: #007700">-&gt;{</span><span style="color: #DD0000">'foo-bar'</span><span style="color: #007700">}; </span><span style="color: #FF8000">// 12345<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #3 common mistakes using <span class="function"><strong style="color:#CC7832">json_decode()</strong></span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /><br /></span><span style="color: #FF8000">// the following strings are valid JavaScript but not valid JSON<br /><br />// the name and value must be enclosed in double quotes<br />// single quotes are not valid <br /></span><span style="color: #9876AA">$bad_json </span><span style="color: #007700">= </span><span style="color: #DD0000">"{ 'bar': 'baz' }"</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">json_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">$bad_json</span><span style="color: #007700">); </span><span style="color: #FF8000">// null<br /><br />// the name must be enclosed in double quotes<br /></span><span style="color: #9876AA">$bad_json </span><span style="color: #007700">= </span><span style="color: #DD0000">'{ bar: "baz" }'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">json_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">$bad_json</span><span style="color: #007700">); </span><span style="color: #FF8000">// null<br /><br />// trailing commas are not allowed<br /></span><span style="color: #9876AA">$bad_json </span><span style="color: #007700">= </span><span style="color: #DD0000">'{ bar: "baz", }'</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">json_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">$bad_json</span><span style="color: #007700">); </span><span style="color: #FF8000">// null<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #4 <span class="parameter" style="color:#3A95FF">depth</span> errors</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// Encode some data with a maximum depth  of 4 (array -&gt; array -&gt; array -&gt; string)<br /></span><span style="color: #9876AA">$json </span><span style="color: #007700">= </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(<br />    array(<br />        </span><span style="color: #9876AA">1 </span><span style="color: #007700">=&gt; array(<br />            </span><span style="color: #DD0000">'English' </span><span style="color: #007700">=&gt; array(<br />                </span><span style="color: #DD0000">'One'</span><span style="color: #007700">,<br />                </span><span style="color: #DD0000">'January'<br />            </span><span style="color: #007700">),<br />            </span><span style="color: #DD0000">'French' </span><span style="color: #007700">=&gt; array(<br />                </span><span style="color: #DD0000">'Une'</span><span style="color: #007700">,<br />                </span><span style="color: #DD0000">'Janvier'<br />            </span><span style="color: #007700">)<br />        )<br />    )<br />);<br /><br /></span><span style="color: #FF8000">// Show the errors for different depths.<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">json_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">$json</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">));<br />echo </span><span style="color: #DD0000">'Last error: '</span><span style="color: #007700">, </span><span style="color: #9876AA">json_last_error_msg</span><span style="color: #007700">(), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">json_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">$json</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">));<br />echo </span><span style="color: #DD0000">'Last error: '</span><span style="color: #007700">, </span><span style="color: #9876AA">json_last_error_msg</span><span style="color: #007700">(), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>array(1) {<br>  [1]=&gt;<br>  array(2) {<br>    [&quot;English&quot;]=&gt;<br>    array(2) {<br>      [0]=&gt;<br>      string(3) &quot;One&quot;<br>      [1]=&gt;<br>      string(7) &quot;January&quot;<br>    }<br>    [&quot;French&quot;]=&gt;<br>    array(2) {<br>      [0]=&gt;<br>      string(3) &quot;Une&quot;<br>      [1]=&gt;<br>      string(7) &quot;Janvier&quot;<br>    }<br>  }<br>}<br>Last error: No error<br><br>NULL<br>Last error: Maximum stack depth exceeded<br></span></div>    </div>   </div>   <div class="example" id="">    <p><strong>示例 #5 <span class="function"><strong style="color:#CC7832">json_decode()</strong></span> of large integers</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />$json </span><span style="color: #007700">= </span><span style="color: #DD0000">'{"number": 12345678901234567890}'</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">json_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">$json</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">json_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">$json</span><span style="color: #007700">, </span><span style="color: #9876AA">false</span><span style="color: #007700">, </span><span style="color: #9876AA">512</span><span style="color: #007700">, </span><span style="color: #9876AA">JSON_BIGINT_AS_STRING</span><span style="color: #007700">));<br /><br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>object(stdClass)#1 (1) {<br>  [&quot;number&quot;]=&gt;<br>  float(1.2345678901235E+19)<br>}<br>object(stdClass)#1 (1) {<br>  [&quot;number&quot;]=&gt;<br>  string(20) &quot;12345678901234567890&quot;<br>}<br></span></div>    </div>   </div>  </span> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 notes" id="refsect1-function.json-decode-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    The JSON spec is not JavaScript, but a subset of JavaScript.   </p>  </p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <p class="para">    In the event of a failure to decode, <span class="function">{@link json_last_error()}</span>    can be used to determine the exact nature of the error.   </p>  </p></blockquote> </div>  <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.json-decode-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link json_encode()} - 对变量进行 JSON 编码</span></li>    <li class="member"><span class="function">{@link json_last_error()} - 返回最后发生的错误</span></li>   </ul>  </span> </div></div>
 * @return mixed the value encoded in <i>json</i> in appropriate*/
function json_decode(string $json, ?bool $associative = null, int $depth = 512, int $flags = 0): mixed {}

/**
*<div id="function.json-last-error" class="refentry"> <div class="refnamediv">  <h1 class="refname">json_last_error</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">json_last_error</span> &mdash; <span class="dc-title">返回最后发生的错误</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.json-last-error-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>json_last_error</strong></span>(): <span class="type" style="color:#EAB766">int</span></div>  <p class="para rdfs-comment">   没有指定 <strong><span>JSON_THROW_ON_ERROR</span></strong>时，返回上一次 JSON 编码解码时发生的最后一个错误（如果有）。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.json-last-error-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.json-last-error-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个整型（integer），这个值会是以下的常量之一：  </p>  <table class="doctable table">   <caption><strong>JSON 错误码</strong></caption>       <thead>     <tr>      <th>常量</th>      <th>含义</th>      <th>可用性</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td><strong><span>JSON_ERROR_NONE</span></strong></td>      <td>没有错误发生</td>      <td class="empty">&nbsp;</td>     </tr>     <tr>      <td><strong><span>JSON_ERROR_DEPTH</span></strong></td>      <td>到达了最大堆栈深度</td>      <td class="empty">&nbsp;</td>     </tr>     <tr>      <td><strong><span>JSON_ERROR_STATE_MISMATCH</span></strong></td>      <td>无效或异常的 JSON</td>      <td class="empty">&nbsp;</td>     </tr>     <tr>      <td><strong><span>JSON_ERROR_CTRL_CHAR</span></strong></td>      <td>控制字符错误，可能是编码不对</td>      <td class="empty">&nbsp;</td>     </tr>     <tr>      <td><strong><span>JSON_ERROR_SYNTAX</span></strong></td>      <td>语法错误</td>      <td class="empty">&nbsp;</td>     </tr>     <tr>      <td><strong><span>JSON_ERROR_UTF8</span></strong></td>      <td>异常的 UTF-8 字符，也许是因为不正确的编码。</td>      <td class="empty">&nbsp;</td>     </tr>     <tr>      <td><strong><span>JSON_ERROR_RECURSION</span></strong></td>      <td>One or more recursive references in the value to be encoded</td>      <td class="empty">&nbsp;</td>     </tr>     <tr>      <td><strong><span>JSON_ERROR_INF_OR_NAN</span></strong></td>      <td>       One or more       <a href="https://www.php.net/manual/zh/language.types.float.php#language.types.float.nan" class="link"><strong><span>NAN</span></strong></a>       or {@link <strong><code>INF</code></strong>}       values in the value to be encoded      </td>      <td class="empty">&nbsp;</td>     </tr>     <tr>      <td><strong><span>JSON_ERROR_UNSUPPORTED_TYPE</span></strong></td>      <td>指定的类型，值无法编码。</td>      <td class="empty">&nbsp;</td>     </tr>     <tr>      <td><strong><span>JSON_ERROR_INVALID_PROPERTY_NAME</span></strong></td>      <td>指定的属性名无法编码。</td>      <td class="empty">&nbsp;</td>     </tr>     <tr>      <td><strong><span>JSON_ERROR_UTF16</span></strong></td>      <td>畸形的 UTF-16 字符，可能因为字符编码不正确。</td>      <td class="empty">&nbsp;</td>     </tr>    </tbody>     </table> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.json-last-error-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">json_last_error()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 一个有效的 json 字符串<br /></span><span style="color: #9876AA">$json</span><span style="color: #007700">[] = </span><span style="color: #DD0000">'{"Organization": "PHP Documentation Team"}'</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">// 一个无效的 json 字符串会导致一个语法错误，在这个例子里我们使用 ' 代替了 " 作为引号<br /></span><span style="color: #9876AA">$json</span><span style="color: #007700">[] = </span><span style="color: #DD0000">"{'Organization': 'PHP Documentation Team'}"</span><span style="color: #007700">;<br /><br /><br />foreach (</span><span style="color: #9876AA">$json </span><span style="color: #007700">as </span><span style="color: #9876AA">$string</span><span style="color: #007700">) {<br />    echo </span><span style="color: #DD0000">'Decoding: ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$string</span><span style="color: #007700">;<br />    </span><span style="color: #9876AA">json_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">$string</span><span style="color: #007700">);<br /><br />    switch (</span><span style="color: #9876AA">json_last_error</span><span style="color: #007700">()) {<br />        case </span><span style="color: #9876AA">JSON_ERROR_NONE</span><span style="color: #007700">:<br />            echo </span><span style="color: #DD0000">' - No errors'</span><span style="color: #007700">;<br />        break;<br />        case </span><span style="color: #9876AA">JSON_ERROR_DEPTH</span><span style="color: #007700">:<br />            echo </span><span style="color: #DD0000">' - Maximum stack depth exceeded'</span><span style="color: #007700">;<br />        break;<br />        case </span><span style="color: #9876AA">JSON_ERROR_STATE_MISMATCH</span><span style="color: #007700">:<br />            echo </span><span style="color: #DD0000">' - Underflow or the modes mismatch'</span><span style="color: #007700">;<br />        break;<br />        case </span><span style="color: #9876AA">JSON_ERROR_CTRL_CHAR</span><span style="color: #007700">:<br />            echo </span><span style="color: #DD0000">' - Unexpected control character found'</span><span style="color: #007700">;<br />        break;<br />        case </span><span style="color: #9876AA">JSON_ERROR_SYNTAX</span><span style="color: #007700">:<br />            echo </span><span style="color: #DD0000">' - Syntax error, malformed JSON'</span><span style="color: #007700">;<br />        break;<br />        case </span><span style="color: #9876AA">JSON_ERROR_UTF8</span><span style="color: #007700">:<br />            echo </span><span style="color: #DD0000">' - Malformed UTF-8 characters, possibly incorrectly encoded'</span><span style="color: #007700">;<br />        break;<br />        default:<br />            echo </span><span style="color: #DD0000">' - Unknown error'</span><span style="color: #007700">;<br />        break;<br />    }<br /><br />    echo </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br />}<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>Decoding: {&quot;Organization&quot;: &quot;PHP Documentation Team&quot;} - No errors<br>Decoding: {&#039;Organization&#039;: &#039;PHP Documentation Team&#039;} - Syntax error, malformed JSON<br></span></div>    </div>   </div>  </span>  <p class="para">   <div class="example" id="">    <p><strong>示例 #2 <span class="function">{@link json_encode()}</span> 的 <span class="function"><strong style="color:#CC7832">json_last_error()</strong></span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 无效的 UTF8 序列<br /></span><span style="color: #9876AA">$text </span><span style="color: #007700">= </span><span style="color: #DD0000">"\xB1\x31"</span><span style="color: #007700">;<br /><br /></span><span style="color: #9876AA">$json  </span><span style="color: #007700">= </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #9876AA">$text</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">$error </span><span style="color: #007700">= </span><span style="color: #9876AA">json_last_error</span><span style="color: #007700">();<br /><br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$json</span><span style="color: #007700">, </span><span style="color: #9876AA">$error </span><span style="color: #007700">=== </span><span style="color: #9876AA">JSON_ERROR_UTF8</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>string(4) &quot;null&quot;<br>bool(true)<br></span></div>    </div>   </div>  </p>  <p class="para">   <div class="example" id="">    <p><strong>示例 #3 <span class="function"><strong style="color:#CC7832">json_last_error()</strong></span> 和 <strong><span>JSON_THROW_ON_ERROR</span></strong></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br /></span><span style="color: #FF8000">// 导致 JSON_ERROR_UTF8 的无效 UTF8 序列<br /></span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #DD0000">"\xB1\x31"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 以下不会导致 JSON 错误<br /></span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(</span><span style="color: #DD0000">'okay'</span><span style="color: #007700">, </span><span style="color: #9876AA">JSON_THROW_ON_ERROR</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">// 前者的 json_encode() 不会改变全局错误状态<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">json_last_error</span><span style="color: #007700">() === </span><span style="color: #9876AA">JSON_ERROR_UTF8</span><span style="color: #007700">);<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br></span></div>    </div>   </div>  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.json-last-error-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link json_last_error_msg()} - 返回最后一次调用 json_encode() 或 json_decode() 时产生的错误信息</span></li>    <li class="member"><span class="function">{@link json_decode()} - 对 JSON 格式的字符串进行解码</span></li>    <li class="member"><span class="function">{@link json_encode()} - 对变量进行 JSON 编码</span></li>   </ul>  </span> </div></div>
 * @return int an integer, the value can be one of the following*/
function json_last_error(): int {}

/**
*<div id="function.json-last-error-msg" class="refentry"> <div class="refnamediv">  <h1 class="refname">json_last_error_msg</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">json_last_error_msg</span> &mdash; <span class="dc-title">返回最后一次调用 json_encode() 或 json_decode() 时产生的错误信息</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.json-last-error-msg-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>json_last_error_msg</strong></span>(): <span class="type" style="color:#EAB766">string</span></div>  <p class="para rdfs-comment">   当没有设置 <strong><span>JSON_THROW_ON_ERROR</span></strong> 参数时，返回最后一次调用 <span class="function">{@link json_encode()}</span> 或 <span class="function">{@link json_decode()}</span>   产生的错误信息。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.json-last-error-msg-parameters">  <h3 class="title">参数</h3>  <span>此函数没有参数。</span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.json-last-error-msg-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功则返回错误信息，如果没有错误产生则返回 <span>&quot;No error&quot;</span> 。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.json-last-error-msg-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link json_last_error()} - 返回最后发生的错误</span></li>   </ul>  </span> </div></div>
 * @return string Returns the error message on success, "No error" if no error has occurred.*/
function json_last_error_msg(): string {}

/**
*<div id="function.json-validate" class="refentry"> <div class="refnamediv">  <h1 class="refname">json_validate</h1>  <p class="verinfo">(PHP 8 &gt;= 8.3.0)</p><p class="refpurpose"><span class="refname">json_validate</span> &mdash; <span class="dc-title">检查一个字符串是否包含有效的JSON</span></p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 description" id="refsect1-function.json-validate-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>json_validate</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$json</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$depth</span><span class="initializer"> = 512</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766">bool</span></div>  <p class="para rdfs-comment">   返回给定的 <span class="type" style="color:#EAB766">string</span> 是否是语法上有效的 JSON。   如果 <span class="function"><strong style="color:#CC7832">json_validate()</strong></span> 返回 <strong><span>true</span></strong>，<span class="function">{@link json_decode()}</span> 在使用相同的 <span class="parameter" style="color:#3A95FF">depth</span>   和 <span class="parameter" style="color:#3A95FF">flags</span> 时，将成功解码给定的字符串。  </p>  <p class="para">   如果 <span class="function"><strong style="color:#CC7832">json_validate()</strong></span> 返回 <strong><span>false</span></strong>，原因可以使用 <span class="function">{@link json_last_error()}</span>   和 <span class="function">{@link json_last_error_msg()}</span> 获取。  </p>  <p class="para">   如果解码后的 JSON 内容未被使用，<span class="function"><strong style="color:#CC7832">json_validate()</strong></span> 相比于   <span class="function">{@link json_decode()}</span> 使用了较少的内存，因为它不需要构建包含有效载荷的数组或对象结构。  </p>  <div class="caution"><strong class="caution">警告</strong>   <p class="para">    在 <span class="function">{@link json_decode()}</span> 之前调用 <span class="function"><strong style="color:#CC7832">json_validate()</strong></span> 将不必要地解析字符串两次，    因为 <span class="function">{@link json_decode()}</span> 在解码过程中隐式地执行验证。   </p>   <p class="para">    <span class="function"><strong style="color:#CC7832">json_validate()</strong></span> 只有在解码后的 JSON 内容不会立即使用，但需要知道字符串是否包含有效的 JSON 时才有用。   </p>  </div> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 parameters" id="refsect1-function.json-validate-parameters">  <h3 class="title">参数</h3>  <span>   <dl>         <dt><span class="parameter" style="color:#3A95FF">json</span></dt>     <dd>      <p class="para">       需要验证的字符串。      </p>      <p class="para">       该函数仅适用于 UTF-8 编码字符串。      </p>       <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:   <p class="para">   PHP 实现了 JSON 的一个超集，参考   <a href="http://www.faqs.org/rfcs/rfc7159" class="link external">&raquo;&nbsp;RFC 7159</a>.  </p> </p></blockquote>     </dd>             <dt><span class="parameter" style="color:#3A95FF">depth</span></dt>     <dd>      <p class="para">       解码结构的最大嵌套深度。       该值必须大于 <span>0</span>、       且小于或等于 <span>2147483647</span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       当前只接受 <strong><span>JSON_INVALID_UTF8_IGNORE</span></strong>。      </p>     </dd>       </dl>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 returnvalues" id="refsect1-function.json-validate-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果给定字符串是语法有效的 JSON，则返回 <strong><span>true</span></strong>，否则返回 <strong><span>false</span></strong>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 errors" id="refsect1-function.json-validate-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">depth</span> 超出允许的范围，将抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。  </p> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 examples" id="refsect1-function.json-validate-examples">  <h3 class="title">示例</h3>  <span>   <div class="example" id="">    <p><strong>示例 #1 <span class="function"><strong style="color:#CC7832">json_validate()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#232525"><span><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br />var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">json_validate</span><span style="color: #007700">(</span><span style="color: #DD0000">'{ "test": { "foo": "bar" } }'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">json_validate</span><span style="color: #007700">(</span><span style="color: #DD0000">'{ "": "": "" } }'</span><span style="color: #007700">));<br /></span><span style="color: #9876AA">?&gt;</span></span></span></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="color:AFB1B3;background:black;padding-left:5px;"><div class="cdata"><span>bool(true)<br>bool(false)<br></span></div>    </div>   </div>  </span> </div> <br></br><div style="BORDER-TOP: gray 1px dashed; OVERFLOW: hidden; HEIGHT: 1px"></div><div class="refsect1 seealso" id="refsect1-function.json-validate-seealso">  <h3 class="title">参见</h3>  <span>   <ul class="simplelist">    <li class="member"><span class="function">{@link json_decode()} - 对 JSON 格式的字符串进行解码</span></li>    <li class="member"><span class="function">{@link json_last_error()} - 返回最后发生的错误</span></li>    <li class="member"><span class="function">{@link json_last_error_msg()} - 返回最后一次调用 json_encode() 或 json_decode() 时产生的错误信息</span></li>   </ul>  </span> </div></div>
*/
function json_validate(string $json, int $depth = 512, int $flags = 0): bool {}

/**
*      所有的 &lt; 和 &gt; 转换成 \u003C 和 \u003E。     
*/
define('JSON_HEX_TAG', 1);

/**
*      所有的 &amp; 转换成 \u0026。     
*/
define('JSON_HEX_AMP', 2);

/**
*      所有的 &#039; 转换成 \u0027。     
*/
define('JSON_HEX_APOS', 4);

/**
*      所有的 &quot; 转换成 \u0022。     
*/
define('JSON_HEX_QUOT', 8);

/**
*      使一个非关联数组输出一个类（Object）而非数组。      在数组为空而接受者需要一个类（Object）的时候尤其有用。     
*/
define('JSON_FORCE_OBJECT', 16);

/**
*      将所有数字字符串编码成数字（numbers）。     
*/
define('JSON_NUMERIC_CHECK', 32);

/**
*      不要编码 <code class="literal">/</code>。     
*/
define('JSON_UNESCAPED_SLASHES', 64);

/**
*      用空白字符格式化返回的数据。     
*/
define('JSON_PRETTY_PRINT', 128);

/**
*      以字面编码多字节 Unicode 字符（默认是编码成 \uXXXX）。     
*/
define('JSON_UNESCAPED_UNICODE', 256);
/**
*      用不可编码的值来代替失败。     
*/
define('JSON_PARTIAL_OUTPUT_ON_ERROR', 512);

/**
*      出现了下溢（underflow）或者模式不匹配。     
*/
define('JSON_ERROR_STATE_MISMATCH', 2);

/**
*      控制字符错误，可能是编码不对。     
*/
define('JSON_ERROR_CTRL_CHAR', 3);

/**
*      异常的 UTF-8 字符，也许是因为不正确的编码。     
*/
define('JSON_ERROR_UTF8', 5);

/**
*       传递给 <span class="function">{@link json_encode()}</span> 函数的对象或数组包含了递归引用，导致无法被编码。如果打开了       <strong><code>JSON_PARTIAL_OUTPUT_ON_ERROR</code></strong> 选项，则牵涉到递归引用的数据会转换成       <strong><code>null</code></strong> 后返回。     
*/
define('JSON_ERROR_RECURSION', 6);

/**
*      传递给 <span class="function">{@link json_encode()}</span> 函数的参数中包含了      <a href="https://www.php.net/manual/zh/language.types.float.php#language.types.float.nan" class="link"><strong><code>NAN</code></strong></a>      或 {@link <strong><code>INF</code></strong>}，导致编码出错。如果打开了      <strong><code>JSON_PARTIAL_OUTPUT_ON_ERROR</code></strong> 选项，则牵涉到对应不可编码的数字，会转换成数字      <code class="literal">0</code> 后返回。     
*/
define('JSON_ERROR_INF_OR_NAN', 7);

/**
*       传递了不支持的数据类型给 <span class="function">{@link json_encode()}</span> 函数，比如 <a href="https://www.php.net/manual/zh/language.types.resource.php" class="link">resource</a>。如果打开了       <strong><code>JSON_PARTIAL_OUTPUT_ON_ERROR</code></strong> 选项，则对于不支持的数据类型，会转换成       <strong><code>null</code></strong> 后返回。     
*/
define('JSON_ERROR_UNSUPPORTED_TYPE', 8);

/**
*      没有错误发生。     
*/
define('JSON_ERROR_NONE', 0);

/**
*      到达了最大堆栈深度。     
*/
define('JSON_ERROR_DEPTH', 1);

/**
*      语法错误。     
*/
define('JSON_ERROR_SYNTAX', 4);

/**
*      将 JSON 对象作为数组解码。当调用 <span class="function">{@link json_decode()}</span> 且第二个参数为      <strong><code>true</code></strong> 时此选项会自动添加。     
*/
define('JSON_OBJECT_AS_ARRAY', 1);
define('JSON_PARSER_NOTSTRICT', 4);

/**
*      将大数字编码成原始字符原来的值。     
*/
define('JSON_BIGINT_AS_STRING', 2);

/**
*      确保 <span class="type">float</span> 值始终编码为为 float 值。     
*/
define('JSON_PRESERVE_ZERO_FRACTION', 1024);

/**
*      The line terminators are kept unescaped when      <strong><code>JSON_UNESCAPED_UNICODE</code></strong> is supplied. It uses the same      behaviour as it was before PHP 7.1 without this constant.      Available since PHP 7.1.0.     
*/
define('JSON_UNESCAPED_LINE_TERMINATORS', 2048);

/**
*      忽略无效的 UTF-8 字符。自 PHP 7.2.0 起生效。     
*/
define('JSON_INVALID_UTF8_IGNORE', 1048576);

/**
*      将无效 UTF-8 字符转换为 \0xfffd（Unicode 字符“虚缺号”）。自 PHP 7.2.0 起生效。     
*/
define('JSON_INVALID_UTF8_SUBSTITUTE', 2097152);

/**
*      A key starting with \u0000 character was in the string passed to      <span class="function">{@link json_decode()}</span> when decoding a JSON object into a PHP      object.     
*/
define('JSON_ERROR_INVALID_PROPERTY_NAME', 9);

/**
*      Single unpaired UTF-16 surrogate in unicode escape contained in the      JSON string passed to <span class="function">{@link json_encode()}</span>.     
*/
define('JSON_ERROR_UTF16', 10);

/**
*      如果发生错误则会抛出 <span class="classname"><a href="https://www.php.net/manual/zh/class.jsonexception.php" class="classname">JsonException</a></span>，而不是通过 <span class="function">{@link json_last_error()}</span>      和 <span class="function">{@link json_last_error_msg()}</span> 检索设置到全局的错误状态。<strong><code>JSON_PARTIAL_OUTPUT_ON_ERROR</code></strong>      优先于 <strong><code>JSON_THROW_ON_ERROR</code></strong>。自 PHP 7.3.0 起生效。     
*/
define('JSON_THROW_ON_ERROR', 4194304);

/**
 * @since 8.1
 */
define('JSON_ERROR_NON_BACKED_ENUM', 11);

/**
*<div id="class.jsonexception" class="reference"> <h1 class="title">JsonException 类</h1>  <div class="partintro"><p class="verinfo">(PHP 7 &gt;= 7.3.0, PHP 8)</p>    <div class="section" id="jsonexception.intro">   <h2 class="title">简介</h2>   <p class="para">    如果为 <span class="function">{@link json_encode()}</span> 或 <span class="function">{@link json_decode()}</span>    设置了 <strong class="option unknown">JSON_THROW_ON_ERROR</strong> 选项，则会抛出异常。    <var class="varname">code</var> 包含错误类型，关于可能的值请参见 <span class="function">{@link json_last_error()}</span>。   </p>  </div>    <div class="section" id="jsonexception.synopsis">   <h2 class="title">类摘要</h2>      <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="exceptionname">JsonException</strong></strong>             <span class="modifier">extends</span>      <a href="https://www.php.net/manual/zh/class.exception.php" class="classname">Exception</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">string</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = &quot;&quot;</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766">int</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">array</span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://www.php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__construct}</span>(<span class="methodparam"><span class="type" style="color:#EAB766">string</span> <span class="parameter" style="color:#3A95FF">$message</span><span class="initializer"> = &quot;&quot;</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">int</span> <span class="parameter" style="color:#3A95FF">$code</span><span class="initializer"> = 0</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span> <span class="parameter" style="color:#3A95FF">$previous</span><span class="initializer"> = <strong><span>null</span></strong></span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><a href="https://www.php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766">int</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766">array</span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766">string</span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><span class="type void" style="color:#EAB766">void</span></span></div>   }</div>     </div> </div> </div>
*/
class JsonException extends Exception {}

// End of json v.1.3.1
